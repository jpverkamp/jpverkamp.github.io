<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Optimization on jverkamp.com</title><link>https://blog.jverkamp.com/2024/12/12/optimization/</link><description>Recent content in Optimization on jverkamp.com</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Thu, 12 Dec 2024 00:00:03 +0000</lastBuildDate><atom:link href="https://blog.jverkamp.com/2024/12/12/optimization/atom.xml" rel="self" type="application/rss+xml"/><item><title>AoC 2024 Day 12: Edginator</title><link>https://blog.jverkamp.com/2024/12/12/aoc-2024-day-12-edginator/</link><pubDate>Thu, 12 Dec 2024 00:00:03 +0000</pubDate><guid>https://blog.jverkamp.com/2024/12/12/aoc-2024-day-12-edginator/</guid><description>&lt;h2 id="source-day-12-garden-groups">Source: &lt;a href="https://adventofcode.com/2024/day/12" target="_blank" rel="noopener">Day 12: Garden Groups&lt;/a>&lt;/h2>
&lt;p>&lt;a href="https://github.com/jpverkamp/advent-of-code/blob/master/2024/src/day12.rs" target="_blank" rel="noopener">Full solution&lt;/a> for today (spoilers!).&lt;/p>
&lt;nav id="TableOfContents">
 &lt;ul>
 &lt;li>&lt;a href="#source-day-12-garden-groups">Source: &lt;a href="https://adventofcode.com/2024/day/12">Day 12: Garden Groups&lt;/a>&lt;/a>&lt;/li>
 &lt;li>&lt;a href="#part-1">Part 1&lt;/a>&lt;/li>
 &lt;li>&lt;a href="#part-2">Part 2&lt;/a>
 &lt;ul>
 &lt;li>&lt;a href="#optimization-1-detect-corners-instead-of-edges">Optimization 1: Detect corners instead of edges&lt;/a>&lt;/li>
 &lt;/ul>
 &lt;/li>
 &lt;li>&lt;a href="#benchmarks">Benchmarks&lt;/a>&lt;/li>
 &lt;/ul>
&lt;/nav>

&lt;h2 id="part-1">Part 1&lt;/h2>
&lt;blockquote>
&lt;p>Given a &lt;code>Grid&lt;/code> of regions, calculate the sum of the product &lt;code>perimeter * area&lt;/code> for each region.&lt;/p>&lt;/blockquote></description></item><item><title>AoC 2024 Day 11: Exponential Growthinator</title><link>https://blog.jverkamp.com/2024/12/11/aoc-2024-day-11-exponential-growthinator/</link><pubDate>Wed, 11 Dec 2024 00:00:03 +0000</pubDate><guid>https://blog.jverkamp.com/2024/12/11/aoc-2024-day-11-exponential-growthinator/</guid><description>&lt;h2 id="source-day-11-plutonian-pebbles">Source: &lt;a href="https://adventofcode.com/2024/day/11" target="_blank" rel="noopener">Day 11: Plutonian Pebbles&lt;/a>&lt;/h2>
&lt;p>&lt;a href="https://github.com/jpverkamp/advent-of-code/blob/master/2024/src/day11.rs" target="_blank" rel="noopener">Full solution&lt;/a> for today (spoilers!).&lt;/p>
&lt;nav id="TableOfContents">
 &lt;ul>
 &lt;li>&lt;a href="#source-day-11-plutonian-pebbles">Source: &lt;a href="https://adventofcode.com/2024/day/11">Day 11: Plutonian Pebbles&lt;/a>&lt;/a>&lt;/li>
 &lt;li>&lt;a href="#part-1">Part 1&lt;/a>
 &lt;ul>
 &lt;li>&lt;a href="#optimization-1-recursion">Optimization 1: Recursion&lt;/a>&lt;/li>
 &lt;li>&lt;a href="#optimization-2-memoization">Optimization 2: Memoization&lt;/a>&lt;/li>
 &lt;/ul>
 &lt;/li>
 &lt;li>&lt;a href="#part-2">Part 2&lt;/a>
 &lt;ul>
 &lt;li>&lt;a href="#optimization-attempt-3-association-list-cache">Optimization (attempt) 3: Association list cache&lt;/a>&lt;/li>
 &lt;li>&lt;a href="#optimization-attempt-4-btree-cache">Optimization (attempt) 4: &lt;code>BTree&lt;/code> cache&lt;/a>&lt;/li>
 &lt;li>&lt;a href="#optimization-5-iterate-over-hashmapvalue-count">Optimization 5: Iterate over &lt;code>HashMap&amp;lt;value, count&amp;gt;&lt;/code>&lt;/a>&lt;/li>
 &lt;/ul>
 &lt;/li>
 &lt;li>&lt;a href="#benchmarks">Benchmarks&lt;/a>&lt;/li>
 &lt;/ul>
&lt;/nav>

&lt;h2 id="part-1">Part 1&lt;/h2>
&lt;blockquote>
&lt;p>Given a sequence of values &lt;code>v_n&lt;/code>, replace each value with the first matching rule:&lt;/p>
&lt;ul>
&lt;li>&lt;code>if v = 0 -&amp;gt; 1&lt;/code>&lt;/li>
&lt;li>If &lt;code>v&lt;/code> has an even number of digits, split it (so &lt;code>v = 8675&lt;/code> becomes &lt;code>[86, 75]&lt;/code>)&lt;/li>
&lt;li>Otherwise, &lt;code>v -&amp;gt; v * 2024&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>Calculate how many elements are in the sequence after 25 iterations.&lt;/p>&lt;/blockquote></description></item><item><title>AoC 2024 Day 9: Defraginator</title><link>https://blog.jverkamp.com/2024/12/09/aoc-2024-day-9-defraginator/</link><pubDate>Mon, 09 Dec 2024 00:00:03 +0000</pubDate><guid>https://blog.jverkamp.com/2024/12/09/aoc-2024-day-9-defraginator/</guid><description>&lt;h2 id="source-day-9-disk-fragmenter">Source: &lt;a href="https://adventofcode.com/2024/day/9" target="_blank" rel="noopener">Day 9: Disk Fragmenter&lt;/a>&lt;/h2>
&lt;p>&lt;a href="https://github.com/jpverkamp/advent-of-code/blob/master/2024/src/day9.rs" target="_blank" rel="noopener">Full solution&lt;/a> for today (spoilers!).&lt;/p>
&lt;nav id="TableOfContents">
 &lt;ul>
 &lt;li>&lt;a href="#source-day-9-disk-fragmenter">Source: &lt;a href="https://adventofcode.com/2024/day/9">Day 9: Disk Fragmenter&lt;/a>&lt;/a>&lt;/li>
 &lt;li>&lt;a href="#part-1">Part 1&lt;/a>&lt;/li>
 &lt;li>&lt;a href="#part-2">Part 2&lt;/a>
 &lt;ul>
 &lt;li>&lt;a href="#optimization-attempt-1-btree-representation">Optimization (attempt) 1: BTree representation&lt;/a>&lt;/li>
 &lt;/ul>
 &lt;/li>
 &lt;li>&lt;a href="#optimization-2-track-the-leftmost-empty-space">Optimization 2: Track the leftmost empty space&lt;/a>&lt;/li>
 &lt;li>&lt;a href="#benchmarks">Benchmarks&lt;/a>&lt;/li>
 &lt;/ul>
&lt;/nav>

&lt;h2 id="part-1">Part 1&lt;/h2>
&lt;blockquote>
&lt;p>Given a disk layout alternating between files and empty spaces, move all files as early on the disk is possible, splitting into multiple blocks. Return a checksum on the disk.&lt;/p>
&lt;p>Alternating means: &lt;code>23331&lt;/code> would mean a 2 block file, 3 empty, a 3 block file, 3 empty, and a 1 block file.&lt;/p>
&lt;p>The checksum is the sum of &lt;code>file_id * block_index&lt;/code> for all occupied blocks. File IDs are assigned sequentially on initial generation.&lt;/p>&lt;/blockquote></description></item><item><title>AoC 2022 Day 19: Blueprintinator</title><link>https://blog.jverkamp.com/2022/12/19/aoc-2022-day-19-blueprintinator/</link><pubDate>Mon, 19 Dec 2022 00:00:03 +0000</pubDate><guid>https://blog.jverkamp.com/2022/12/19/aoc-2022-day-19-blueprintinator/</guid><description>&lt;h2 id="source-not-enough-minerals">Source: &lt;a href="https://adventofcode.com/2022/day/19" target="_blank" rel="noopener">Not Enough Minerals&lt;/a>&lt;/h2>
&lt;h2 id="part-1">Part 1&lt;/h2>
&lt;blockquote>
&lt;p>Given a series of given a series of &lt;code>blueprints&lt;/code>, each of which gives instructions for how to build a single &lt;code>robot&lt;/code> from a collection of &lt;code>materials&lt;/code> that in turn will produce one of a given &lt;code>material&lt;/code> per turn, determine the best order of builds to maximize your &lt;code>geode&lt;/code> (the most valuable &lt;code>material&lt;/code>) production for each &lt;code>blueprint&lt;/code> given a time limit of &lt;code>24 minutes&lt;/code>.&lt;/p>&lt;/blockquote></description></item><item><title>AoC 2022 Day 17: Tetrisinator</title><link>https://blog.jverkamp.com/2022/12/17/aoc-2022-day-17-tetrisinator/</link><pubDate>Sat, 17 Dec 2022 00:00:03 +0000</pubDate><guid>https://blog.jverkamp.com/2022/12/17/aoc-2022-day-17-tetrisinator/</guid><description>&lt;h2 id="source-pyroclastic-flow">Source: &lt;a href="https://adventofcode.com/2022/day/17" target="_blank" rel="noopener">Pyroclastic Flow&lt;/a>&lt;/h2>
&lt;h2 id="part-1">Part 1&lt;/h2>
&lt;blockquote>
&lt;p>Simulate &lt;a href="https://en.wikipedia.org/wiki/Tetris">Tetris&lt;/a> on a 7 wide board with a given (infinitely repeated) series of left and right inputs to be applied on each frame before dropping the block and a given (infinitely repeated) set of blocks. Once 2022 blocks have been dropped, what is the total height of the placed blocks?&lt;/p>&lt;/blockquote></description></item><item><title>AoC 2022 Day 16: Pressurinator</title><link>https://blog.jverkamp.com/2022/12/16/aoc-2022-day-16-pressurinator/</link><pubDate>Fri, 16 Dec 2022 00:00:03 +0000</pubDate><guid>https://blog.jverkamp.com/2022/12/16/aoc-2022-day-16-pressurinator/</guid><description>&lt;h2 id="source-proboscidea-volcanium">Source: &lt;a href="https://adventofcode.com/2022/day/16" target="_blank" rel="noopener">Proboscidea Volcanium&lt;/a>&lt;/h2>
&lt;nav id="TableOfContents">
 &lt;ul>
 &lt;li>&lt;a href="#source-proboscidea-volcanium">Source: &lt;a href="https://adventofcode.com/2022/day/16">Proboscidea Volcanium&lt;/a>&lt;/a>&lt;/li>
 &lt;li>&lt;a href="#part-1">Part 1&lt;/a>
 &lt;ul>
 &lt;li>&lt;a href="#optimized-version-with-multiple-steps-and-no-repeats">Optimized version with multiple steps and no-repeats&lt;/a>&lt;/li>
 &lt;li>&lt;a href="#the-actual-code">The actual code&lt;/a>&lt;/li>
 &lt;li>&lt;a href="#attempted-to-solve-via-30-steps-of-all-possibilities">Attempted to solve via 30 steps of all possibilities&lt;/a>&lt;/li>
 &lt;li>&lt;a href="#a-priority-queue-edit-2-dec-20">A Priority Queue (Edit 2, Dec 20)&lt;/a>&lt;/li>
 &lt;/ul>
 &lt;/li>
 &lt;li>&lt;a href="#part-2">Part 2&lt;/a>
 &lt;ul>
 &lt;li>&lt;a href="#simulating-n-agents">Simulating &lt;em>n&lt;/em> agents&lt;/a>&lt;/li>
 &lt;li>&lt;a href="#new-multi-agent-code-with-one-agent">New multi-agent code with one agent&lt;/a>&lt;/li>
 &lt;li>&lt;a href="#checking-with-multiple-agents">Checking with multiple agents&lt;/a>&lt;/li>
 &lt;li>&lt;a href="#problems-with-memory-">Problems with memory (?)&lt;/a>&lt;/li>
 &lt;li>&lt;a href="#improving-memory-usage">Improving memory usage&lt;/a>&lt;/li>
 &lt;li>&lt;a href="#improving-runtime">Improving runtime&lt;/a>&lt;/li>
 &lt;li>&lt;a href="#to-be-continued">To be continued&amp;hellip;&lt;/a>&lt;/li>
 &lt;li>&lt;a href="#let-it-run-edit-dec-20">Let it run! (Edit, Dec 20)&lt;/a>&lt;/li>
 &lt;li>&lt;a href="#queues-to-the-rescue-edit-3-dec-20">Queues to the rescue (Edit 3, Dec 20)&lt;/a>&lt;/li>
 &lt;li>&lt;a href="#optimization-remaining_best_case-edit-4-dec-21">Optimization: &lt;code>remaining_best_case&lt;/code> (Edit 4, Dec 21)&lt;/a>&lt;/li>
 &lt;li>&lt;a href="#optimization-seen_skip-edit-4-dec-21">Optimization: &lt;code>seen_skip&lt;/code> (Edit 4, Dec 21)&lt;/a>&lt;/li>
 &lt;li>&lt;a href="#threading">Threading&lt;/a>&lt;/li>
 &lt;/ul>
 &lt;/li>
 &lt;li>&lt;a href="#graphviz-visualizations">Graphviz visualizations&lt;/a>&lt;/li>
 &lt;li>&lt;a href="#performance">Performance&lt;/a>&lt;/li>
 &lt;/ul>
&lt;/nav>

&lt;h2 id="part-1">Part 1&lt;/h2>
&lt;blockquote>
&lt;p>Given a graph of nodes, some of which have a &lt;code>pressure&lt;/code> (per tick output value) and an agent that can move through the graph and activate specific nodes (so that they output their per tick value every future tick), what is the maximum total output possible in 30 steps?&lt;/p>&lt;/blockquote></description></item><item><title>AoC 2022 Day 12: Climbiantor</title><link>https://blog.jverkamp.com/2022/12/12/aoc-2022-day-12-climbiantor/</link><pubDate>Mon, 12 Dec 2022 00:00:03 +0000</pubDate><guid>https://blog.jverkamp.com/2022/12/12/aoc-2022-day-12-climbiantor/</guid><description>&lt;h2 id="source-hill-climbing-algorithm">Source: &lt;a href="https://adventofcode.com/2022/day/12" target="_blank" rel="noopener">Hill Climbing Algorithm&lt;/a>&lt;/h2>
&lt;h2 id="part-1">Part 1&lt;/h2>
&lt;blockquote>
&lt;p>Given a height map, find the shortest path between two points such that the path can descend any distance but can only climb by a maximum of 1.&lt;/p>&lt;/blockquote></description></item><item><title>Go is faster than Python? (an example parsing huge JSON logs)</title><link>https://blog.jverkamp.com/2022/02/11/go-is-faster-than-python-an-example-parsing-huge-json-logs/</link><pubDate>Fri, 11 Feb 2022 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2022/02/11/go-is-faster-than-python-an-example-parsing-huge-json-logs/</guid><description>&lt;p>Recently at work I came across a problem where I had to go through a year&amp;rsquo;s worth of logs and corelate two different fields across all of our requests. On the good side, we have the logs stored as JSON objects (archived from Datadog which collects them). On the down side&amp;hellip; it&amp;rsquo;s kind of a huge amount of data. Not as much as I&amp;rsquo;ve dealt with at previous jobs/in some academic problems, but we&amp;rsquo;re still talking on the order of terabytes.&lt;/p>
&lt;p>On one hand, write up a quick Python script, fire and forget. It takes maybe ten minutes to write the code and (for this specific example) half an hour to run it on the specific cloud instance the logs lived on. So we&amp;rsquo;ll start with that. But then I got thinking&amp;hellip; Python is supposed to be super slow right? Can I do better?&lt;/p>
&lt;p>(Note: This problem is mostly disk bound. So Python actually for the most part does just fine.)&lt;/p></description></item><item><title>AoC 2021 Day 24: Aluinator</title><link>https://blog.jverkamp.com/2021/12/24/aoc-2021-day-24-aluinator/</link><pubDate>Fri, 24 Dec 2021 00:00:03 +0000</pubDate><guid>https://blog.jverkamp.com/2021/12/24/aoc-2021-day-24-aluinator/</guid><description>&lt;h3 id="source-arithmetic-logic-unit">Source: &lt;a href="https://adventofcode.com/2021/day/24" target="_blank" rel="noopener">Arithmetic Logic Unit&lt;/a>&lt;/h3>
&lt;h4 id="part-1-simulate-an-alu-with-4-registers-w-x-y-and-z-and-instructions-defined-below-find-the-largest-14-digit-number-with-no-0-digits-which-result-in-z0">&lt;strong>Part 1:&lt;/strong> Simulate an ALU with 4 registers (&lt;code>w&lt;/code>, &lt;code>x&lt;/code>, &lt;code>y&lt;/code>, and &lt;code>z&lt;/code>) and instructions defined below. Find the largest 14 digit number with no 0 digits which result in &lt;code>z=0&lt;/code>.&lt;/h4></description></item><item><title>AoC 2021 Day 23: Amphipodinator</title><link>https://blog.jverkamp.com/2021/12/23/aoc-2021-day-23-amphipodinator/</link><pubDate>Thu, 23 Dec 2021 00:00:03 +0000</pubDate><guid>https://blog.jverkamp.com/2021/12/23/aoc-2021-day-23-amphipodinator/</guid><description>&lt;h3 id="source-amphipod">Source: &lt;a href="https://adventofcode.com/2021/day/23" target="_blank" rel="noopener">Amphipod&lt;/a>&lt;/h3>
&lt;h4 id="part-1-given-4-rooms-full-of-amphipods-with-various-energy-costs-for-movement-a1-b10-c100-d1000-and-a-hallway-how-much-energy-does-it-take-at-minimum-to-sort-the-amphipods-into-their-own-rooms-with-the-following-conditions">&lt;strong>Part 1:&lt;/strong> Given 4 rooms full of amphipods with various energy costs for movement (a=1, b=10, c=100, d=1000) and a hallway, how much energy does it take (at minimum) to sort the amphipods into their own rooms with the following conditions:&lt;/h4></description></item><item><title>AoC 2021 Day 22: Cubinator</title><link>https://blog.jverkamp.com/2021/12/22/aoc-2021-day-22-cubinator/</link><pubDate>Wed, 22 Dec 2021 00:00:05 +0000</pubDate><guid>https://blog.jverkamp.com/2021/12/22/aoc-2021-day-22-cubinator/</guid><description>&lt;h3 id="source-reactor-reboot">Source: &lt;a href="https://adventofcode.com/2021/day/22" target="_blank" rel="noopener">Reactor Reboot&lt;/a>&lt;/h3>
&lt;h4 id="part-1-given-a-series-of-3d-cubes-that-either-turn-on-all-or-turn-off-all-points-in-their-region-calculate-how-many-points-in-the-region--5050-5050-5050-are-on-at-the-end">&lt;strong>Part 1:&lt;/strong> Given a series of 3D cubes that either turn ON all or turn OFF all points in their region, calculate how many points in the region (-50..50,-50..50,-50..50) are ON at the end.&lt;/h4></description></item><item><title>AoC 2021 Day 21: Dicinator</title><link>https://blog.jverkamp.com/2021/12/21/aoc-2021-day-21-dicinator/</link><pubDate>Tue, 21 Dec 2021 00:00:05 +0000</pubDate><guid>https://blog.jverkamp.com/2021/12/21/aoc-2021-day-21-dicinator/</guid><description>&lt;h3 id="source-dirac-dice">Source: &lt;a href="https://adventofcode.com/2021/day/21" target="_blank" rel="noopener">Dirac Dice&lt;/a>&lt;/h3>
&lt;h4 id="part-1-play-a-simple-game-describe-below-with-a-loaded-d100-that-always-rolls-1-2-3--99-100-1--return-the-score-of-the-losing-player-times-the-number-of-times-the-die-was-rolled">&lt;strong>Part 1:&lt;/strong> Play a simple game (describe below) with a loaded D100 (that always rolls 1, 2, 3, &amp;hellip; 99, 100, 1, &amp;hellip;). Return the score of the losing player times the number of times the die was rolled.&lt;/h4></description></item><item><title>AoC 2021 Day 15: Low Ceiling Simulator</title><link>https://blog.jverkamp.com/2021/12/15/aoc-2021-day-15-low-ceiling-simulator/</link><pubDate>Wed, 15 Dec 2021 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2021/12/15/aoc-2021-day-15-low-ceiling-simulator/</guid><description>&lt;h3 id="source-chiton">Source: &lt;a href="https://adventofcode.com/2021/day/15" target="_blank" rel="noopener">Chiton&lt;/a>&lt;/h3>
&lt;h4 id="part-1-given-a-grid-of-weights-find-the-minimum-path-from-top-left-to-top-right-return-the-total-weight-along-that-path">&lt;strong>Part 1:&lt;/strong> Given a grid of weights, find the minimum path from top left to top right. Return the total weight along that path.&lt;/h4></description></item><item><title>AoC 2021 Day 12: Submarine Spider</title><link>https://blog.jverkamp.com/2021/12/12/aoc-2021-day-12-submarine-spider/</link><pubDate>Sun, 12 Dec 2021 00:00:15 +0000</pubDate><guid>https://blog.jverkamp.com/2021/12/12/aoc-2021-day-12-submarine-spider/</guid><description>&lt;h3 id="source-passage-pathing">Source: &lt;a href="https://adventofcode.com/2021/day/12" target="_blank" rel="noopener">Passage Pathing&lt;/a>&lt;/h3>
&lt;h4 id="part-1-given-a-list-of-edges-in-a-bi-directional-graph-count-the-number-of-paths-from-start-to-end-such-that-nodes-named-with-lowercase-letters-are-visited-once-and-nodes-with-uppercase-letters-can-be-visited-any-number-of-times">&lt;strong>Part 1:&lt;/strong> Given a list of edges in a bi-directional graph, count the number of paths from &lt;code>start&lt;/code> to &lt;code>end&lt;/code> such that nodes named with lowercase letters are visited once, and nodes with uppercase letters can be visited any number of times.&lt;/h4></description></item><item><title>AoC 2017 Day 18: Duetvm</title><link>https://blog.jverkamp.com/2017/12/18/aoc-2017-day-18-duetvm/</link><pubDate>Mon, 18 Dec 2017 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2017/12/18/aoc-2017-day-18-duetvm/</guid><description>&lt;h3 id="source-duet">Source: &lt;a href="http://adventofcode.com/2017/day/18" target="_blank" rel="noopener">Duet&lt;/a>&lt;/h3>
&lt;blockquote>
&lt;p>&lt;strong>Part 1:&lt;/strong> Create a virtual machine with the following instruction set:&lt;/p>&lt;/blockquote>
&lt;blockquote>
&lt;ul>
&lt;li>&lt;code>snd X&lt;/code> plays a sound with a frequency equal to the value of &lt;code>X&lt;/code>&lt;/li>
&lt;li>&lt;code>set X Y&lt;/code> sets register &lt;code>X&lt;/code> to &lt;code>Y&lt;/code>&lt;/li>
&lt;li>&lt;code>add X Y&lt;/code> set register &lt;code>X&lt;/code> to &lt;code>X + Y&lt;/code>&lt;/li>
&lt;li>&lt;code>mul X Y&lt;/code> sets register &lt;code>X&lt;/code> to &lt;code>X * Y&lt;/code>&lt;/li>
&lt;li>&lt;code>mod X Y&lt;/code> sets register &lt;code>X&lt;/code> to &lt;code>X mod Y&lt;/code>&lt;/li>
&lt;li>&lt;code>rcv X&lt;/code> recovers the frequency of the last sound played, if &lt;code>X&lt;/code> is not zero&lt;/li>
&lt;li>&lt;code>jgz X Y&lt;/code> jumps with an offset of the value of &lt;code>Y&lt;/code>, iff &lt;code>X&lt;/code> is greater than zero&lt;/li>
&lt;/ul>&lt;/blockquote>
&lt;blockquote>
&lt;p>In most cases, &lt;code>X&lt;/code> and &lt;code>Y&lt;/code> can be either an integer value or a register.&lt;/p>&lt;/blockquote>
&lt;blockquote>
&lt;p>What is the value recovered by &lt;code>rcv&lt;/code> the first time &lt;code>X&lt;/code> is non-zero?&lt;/p>&lt;/blockquote></description></item><item><title>AoC 2017 Day 17: Spinlock</title><link>https://blog.jverkamp.com/2017/12/17/aoc-2017-day-17-spinlock/</link><pubDate>Sun, 17 Dec 2017 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2017/12/17/aoc-2017-day-17-spinlock/</guid><description>&lt;h3 id="source-spinlock">Source: &lt;a href="http://adventofcode.com/2017/day/17" target="_blank" rel="noopener">Spinlock&lt;/a>&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>&lt;/h3>
&lt;blockquote>
&lt;p>&lt;strong>Part 1:&lt;/strong> Start with a &lt;a href="https://en.wikipedia.org/wiki/circular%20buffer">circular buffer&lt;/a> containing &lt;code>[0]&lt;/code> and &lt;code>current_position = 0&lt;/code>. For &lt;code>n&lt;/code> from &lt;code>1&lt;/code> up to &lt;code>2017&lt;/code>:&lt;/p>&lt;/blockquote>
&lt;blockquote>
&lt;ol>
&lt;li>Step forward &lt;code>steps&lt;/code> (puzzle input)&lt;/li>
&lt;li>Input the next value for &lt;code>n&lt;/code>, set &lt;code>current_position&lt;/code> to &lt;code>n&lt;/code>, increment &lt;code>n&lt;/code>&lt;/li>
&lt;li>Repeat&lt;/li>
&lt;/ol>&lt;/blockquote>
&lt;blockquote>
&lt;p>What is the value after 2017?&lt;/p>&lt;/blockquote>
&lt;p>It&amp;rsquo;s a bit weird to describe, but the given example helps (assume &lt;code>steps = 3&lt;/code>):&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-text" data-lang="text">&lt;span style="display:flex;">&lt;span>(0)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>0 (1)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>0 (2) 1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>0 2 (3) 1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>0 2 (4) 3 1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>0 (5) 2 4 3 1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>0 5 2 4 3 (6) 1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>0 5 (7) 2 4 3 6 1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>0 5 7 2 4 3 (8) 6 1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>0 (9) 5 7 2 4 3 8 6 1
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>AoC 2017 Day 16: Swing Your Partner</title><link>https://blog.jverkamp.com/2017/12/16/aoc-2017-day-16-swing-your-partner/</link><pubDate>Sat, 16 Dec 2017 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2017/12/16/aoc-2017-day-16-swing-your-partner/</guid><description>&lt;h3 id="source-permutation-promenade">Source: &lt;a href="http://adventofcode.com/2017/day/16" target="_blank" rel="noopener">Permutation Promenade&lt;/a>&lt;/h3>
&lt;blockquote>
&lt;p>&lt;strong>Part 1:&lt;/strong> Running on the string &lt;code>a...p&lt;/code> apply a series of the following commands:&lt;/p>&lt;/blockquote>
&lt;blockquote>
&lt;ul>
&lt;li>&lt;code>sX&lt;/code> rotates the string right by &lt;code>X&lt;/code> positions&lt;/li>
&lt;li>&lt;code>xX/Y&lt;/code> swaps positions &lt;code>X&lt;/code> and &lt;code>Y&lt;/code>&lt;/li>
&lt;li>&lt;code>pA/B&lt;/code> swaps the letters &lt;code>A&lt;/code> and &lt;code>B&lt;/code> no matter their positions&lt;/li>
&lt;/ul>&lt;/blockquote></description></item><item><title>AoC 2016 Day 11: Radiation Avoider</title><link>https://blog.jverkamp.com/2016/12/11/aoc-2016-day-11-radiation-avoider/</link><pubDate>Sun, 11 Dec 2016 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2016/12/11/aoc-2016-day-11-radiation-avoider/</guid><description>&lt;h3 id="source-radioisotope-thermoelectric-generators">Source: &lt;a href="http://adventofcode.com/2016/day/11" target="_blank" rel="noopener">Radioisotope Thermoelectric Generators&lt;/a>&lt;/h3>
&lt;blockquote>
&lt;p>&lt;strong>Part 1:&lt;/strong> Input will be a list of the following form:&lt;/p>&lt;/blockquote>
&lt;blockquote>
&lt;ul>
&lt;li>The first floor contains a hydrogen-compatible microchip and a lithium-compatible microchip.&lt;/li>
&lt;li>The second floor contains a hydrogen generator.&lt;/li>
&lt;li>The third floor contains a lithium generator.&lt;/li>
&lt;li>The fourth floor contains nothing relevant.&lt;/li>
&lt;/ul>&lt;/blockquote>
&lt;blockquote>
&lt;p>You have an elevator that can move exactly 1 or 2 items. You can only leave a microchip on a floor with a non-matching generator if a matching generator is also present.&lt;/p>&lt;/blockquote>
&lt;blockquote>
&lt;p>Move all items to the top (4th) floor.&lt;/p>&lt;/blockquote></description></item><item><title>Generating omnichromatic images</title><link>https://blog.jverkamp.com/2015/01/01/generating-omnichromatic-images/</link><pubDate>Thu, 01 Jan 2015 00:10:00 +0000</pubDate><guid>https://blog.jverkamp.com/2015/01/01/generating-omnichromatic-images/</guid><description>&lt;p>Inspired half by a &lt;a href="https://codegolf.stackexchange.com/questions/22144/images-with-all-colors">post on the Code Golf StackExchange&lt;/a> and half by the corresponding website &lt;a href="http://allrgb.com/">allrgb.com&lt;/a>, today&amp;rsquo;s post tasks us with making images like this:&lt;/p>
&lt;figure>&lt;img src="https://blog.jverkamp.com/embeds/2015/grow-minimum_gray-code_400x200.png">
&lt;/figure>

&lt;p>So what&amp;rsquo;s so interesting about that picture?&lt;/p></description></item><item><title>Palette Swapping</title><link>https://blog.jverkamp.com/2014/12/23/palette-swapping/</link><pubDate>Tue, 23 Dec 2014 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2014/12/23/palette-swapping/</guid><description>&lt;p>Today&amp;rsquo;s task comes from the &lt;a href="https://codegolf.stackexchange.com/" target="_blank" rel="noopener">Code Golf StackExchange&lt;/a>. The idea behind &lt;a href="https://en.wikipedia.org/wiki/code%20golf">code golf&lt;/a> is to write a program with as few characters as possible, often rendering the code nigh on unreadable. Luckily, the same StackExchange also host popularity contests, one of which is the inspiration behind today&amp;rsquo;s post:&lt;/p>
&lt;blockquote>
&lt;p>You are given two true color images, the Source and the Palette. They do not necessarily have the same dimensions but it is guaranteed that their areas are the same, i.e. they have the same number of pixels.
Your task is to create an algorithm that makes the most accurate looking copy of the Source by only using the pixels in the Palette. Each pixel in the Palette must be used exactly once in a unique position in this copy. The copy must have the same dimensions as the Source.
&amp;ndash; &lt;a href="https://codegolf.stackexchange.com/questions/33172/american-gothic-in-the-palette-of-mona-lisa-rearrange-the-pixels" target="_blank" rel="noopener">American Gothic in the palette of Mona Lisa: Rearrange the pixels&lt;/a>&lt;/p>&lt;/blockquote></description></item><item><title>Adventures in optimization, re: Typed Racket</title><link>https://blog.jverkamp.com/2013/04/16/adventures-in-optimization-re-typed-racket/</link><pubDate>Tue, 16 Apr 2013 14:00:47 +0000</pubDate><guid>https://blog.jverkamp.com/2013/04/16/adventures-in-optimization-re-typed-racket/</guid><description>&lt;p>Last Thursday I wrote a &lt;a href="https://blog.jverkamp.com/2013/04/11/perlin-and-simplex-noise-in-racket/">post about generating Perlin/simplex noise&lt;/a> in Racket. Later that day, I &lt;a title="[racket] Perlin and simplex noise - optimizing Racket code" href="http://lists.racket-lang.org/users/archive/2013-April/057245.html">posted to the Racket mailing list&lt;/a> asking how I could make it faster. What resulted was a whole sequence of responses (primarily about Typed Racket) and a bit of a rabbit hole that I&amp;rsquo;m still trying to wrap my head around.&lt;/p></description></item></channel></rss>