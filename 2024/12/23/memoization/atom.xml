<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Memoization on jverkamp.com</title><link>https://blog.jverkamp.com/2024/12/23/memoization/</link><description>Recent content in Memoization on jverkamp.com</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Mon, 23 Dec 2024 00:00:03 +0000</lastBuildDate><atom:link href="https://blog.jverkamp.com/2024/12/23/memoization/atom.xml" rel="self" type="application/rss+xml"/><item><title>AoC 2024 Day 23: LAN Partinator</title><link>https://blog.jverkamp.com/2024/12/23/aoc-2024-day-23-lan-partinator/</link><pubDate>Mon, 23 Dec 2024 00:00:03 +0000</pubDate><guid>https://blog.jverkamp.com/2024/12/23/aoc-2024-day-23-lan-partinator/</guid><description>&lt;h2 id="source-day-23-lan-party">Source: &lt;a href="https://adventofcode.com/2024/day/23" target="_blank" rel="noopener">Day 23: LAN Party&lt;/a>&lt;/h2>
&lt;p>&lt;a href="https://github.com/jpverkamp/advent-of-code/blob/master/2024/src/day23.rs" target="_blank" rel="noopener">Full solution&lt;/a> for today (spoilers!).&lt;/p>
&lt;nav id="TableOfContents">
 &lt;ul>
 &lt;li>&lt;a href="#source-day-23-lan-party">Source: &lt;a href="https://adventofcode.com/2024/day/23">Day 23: LAN Party&lt;/a>&lt;/a>&lt;/li>
 &lt;li>&lt;a href="#part-1">Part 1&lt;/a>&lt;/li>
 &lt;li>&lt;a href="#part-2">Part 2&lt;/a>
 &lt;ul>
 &lt;li>&lt;a href="#corrected-version-1-largest-completely-connected">Corrected version 1: Largest completely connected&lt;/a>&lt;/li>
 &lt;li>&lt;a href="#corrected-version-2-recursion--memoization">Corrected version 2: Recursion + memoization&lt;/a>&lt;/li>
 &lt;li>&lt;a href="#corrected-version-3-ordering-by-most-connected-nodes">Corrected version 3: Ordering by most connected nodes&lt;/a>&lt;/li>
 &lt;li>&lt;a href="#this-is-stupid">This is stupid&amp;hellip;&lt;/a>&lt;/li>
 &lt;li>&lt;a href="#and-complicated">&amp;hellip;and complicated&lt;/a>&lt;/li>
 &lt;/ul>
 &lt;/li>
 &lt;li>&lt;a href="#benchmarks">Benchmarks&lt;/a>&lt;/li>
 &lt;/ul>
&lt;/nav>

&lt;h2 id="part-1">Part 1&lt;/h2>
&lt;blockquote>
&lt;p>You are given the edges of an &lt;a href="https://en.wikipedia.org/wiki/undirected%20graph">undirected graph&lt;/a>. Count how many &lt;a href="https://en.wikipedia.org/wiki/complete%20graph">complete&lt;/a> &lt;a href="https://en.wikipedia.org/wiki/subgraphs">subgraphs&lt;/a> of size three exist that contain one or more starting with the letter &lt;code>t&lt;/code>.&lt;/p>&lt;/blockquote>
&lt;p>Aside: Games with local (but not hotseat) multiplayer have gotten rather rarer over the years&amp;hellip; how many people still know what a &lt;a href="https://en.wikipedia.org/wiki/LAN%20party">LAN party&lt;/a> is/was?&lt;/p></description></item><item><title>AoC 2024 Day 21: Busy Workinator</title><link>https://blog.jverkamp.com/2024/12/21/aoc-2024-day-21-busy-workinator/</link><pubDate>Sat, 21 Dec 2024 00:00:03 +0000</pubDate><guid>https://blog.jverkamp.com/2024/12/21/aoc-2024-day-21-busy-workinator/</guid><description>&lt;h2 id="source-day-21-keypad-conundrum">Source: &lt;a href="https://adventofcode.com/2024/day/21" target="_blank" rel="noopener">Day 21: Keypad Conundrum&lt;/a>&lt;/h2>
&lt;p>&lt;a href="https://github.com/jpverkamp/advent-of-code/blob/master/2024/src/day21.rs" target="_blank" rel="noopener">Full solution&lt;/a> for today (spoilers!).&lt;/p>
&lt;nav id="TableOfContents">
 &lt;ul>
 &lt;li>&lt;a href="#source-day-21-keypad-conundrum">Source: &lt;a href="https://adventofcode.com/2024/day/21">Day 21: Keypad Conundrum&lt;/a>&lt;/a>&lt;/li>
 &lt;li>&lt;a href="#part-1">Part 1&lt;/a>
 &lt;ul>
 &lt;li>&lt;a href="#failed-version-1-way-over-engineered">(Failed) Version 1: Way over engineered&lt;/a>&lt;/li>
 &lt;li>&lt;a href="#version-2-direct-simulation">Version 2: Direct simulation&lt;/a>&lt;/li>
 &lt;/ul>
 &lt;/li>
 &lt;li>&lt;a href="#part-2">Part 2&lt;/a>
 &lt;ul>
 &lt;li>&lt;a href="#memoization">Memoization&lt;/a>&lt;/li>
 &lt;/ul>
 &lt;/li>
 &lt;li>&lt;a href="#benchmarks">Benchmarks&lt;/a>
 &lt;ul>
 &lt;li>&lt;a href="#tracing">Tracing&lt;/a>&lt;/li>
 &lt;/ul>
 &lt;/li>
 &lt;/ul>
&lt;/nav>

&lt;h2 id="part-1">Part 1&lt;/h2>
&lt;blockquote>
&lt;p>You are trying to type a code on a keypad:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-text" data-lang="text">&lt;span style="display:flex;">&lt;span>+---+---+---+
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>| 7 | 8 | 9 |
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>+---+---+---+
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>| 4 | 5 | 6 |
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>+---+---+---+
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>| 1 | 2 | 3 |
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>+---+---+---+
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> | 0 | A |
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> +---+---+
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>But you cannot type directly. Instead, you can control a pointer on the keypad with arrow keys:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-text" data-lang="text">&lt;span style="display:flex;">&lt;span> +---+---+
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> | ^ | A |
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>+---+---+---+
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>| &amp;lt; | v | &amp;gt; |
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>+---+---+---+
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Whenever you type a &lt;code>^&lt;/code> on the arrow keys, the pointer on the keypad will move up one, etc. When you type &lt;code>A&lt;/code>, then the pointer on the keypad will type whatever it is pointing at.&lt;/p>
&lt;p>But that&amp;rsquo;s not enough either. Add a second keypad. And then a third, that is the one you are actually controlling.&lt;/p>
&lt;p>For each output sequence multiple the length of the minimum input sequence needed to generate it by the numeric value of the input sequence (ignoring any &lt;code>A&lt;/code>); sum these.&lt;/p>
&lt;p>Note: Moving off any keypad or into the blank spaces is an error.&lt;/p>&lt;/blockquote></description></item><item><title>AoC 2024 Day 19: Regexinator</title><link>https://blog.jverkamp.com/2024/12/19/aoc-2024-day-19-regexinator/</link><pubDate>Thu, 19 Dec 2024 00:00:03 +0000</pubDate><guid>https://blog.jverkamp.com/2024/12/19/aoc-2024-day-19-regexinator/</guid><description>&lt;h2 id="source-day-19-linen-layout">Source: &lt;a href="https://adventofcode.com/2024/day/19" target="_blank" rel="noopener">Day 19: Linen Layout&lt;/a>&lt;/h2>
&lt;p>&lt;a href="https://github.com/jpverkamp/advent-of-code/blob/master/2024/src/day19.rs" target="_blank" rel="noopener">Full solution&lt;/a> for today (spoilers!).&lt;/p>
&lt;nav id="TableOfContents">
 &lt;ul>
 &lt;li>&lt;a href="#source-day-19-linen-layout">Source: &lt;a href="https://adventofcode.com/2024/day/19">Day 19: Linen Layout&lt;/a>&lt;/a>&lt;/li>
 &lt;li>&lt;a href="#part-1">Part 1&lt;/a>
 &lt;ul>
 &lt;li>&lt;a href="#lets-write-it-ourselves-backtracking">Let&amp;rsquo;s write it ourselves: Backtracking&lt;/a>&lt;/li>
 &lt;li>&lt;a href="#optimization-1-simplified-backtracking">Optimization 1: Simplified backtracking&lt;/a>&lt;/li>
 &lt;li>&lt;a href="#optimization-2-memoization">Optimization 2: Memoization&lt;/a>&lt;/li>
 &lt;/ul>
 &lt;/li>
 &lt;li>&lt;a href="#part-2">Part 2&lt;/a>&lt;/li>
 &lt;li>&lt;a href="#benchmarks">Benchmarks&lt;/a>&lt;/li>
 &lt;/ul>
&lt;/nav>

&lt;h2 id="part-1">Part 1&lt;/h2>
&lt;blockquote>
&lt;p>Given a comma delimited list of substrings and a list of strings, count how many of the latter strings can be made up of any (repeating) combination of the former.&lt;/p>&lt;/blockquote></description></item><item><title>AoC 2024 Day 11: Exponential Growthinator</title><link>https://blog.jverkamp.com/2024/12/11/aoc-2024-day-11-exponential-growthinator/</link><pubDate>Wed, 11 Dec 2024 00:00:03 +0000</pubDate><guid>https://blog.jverkamp.com/2024/12/11/aoc-2024-day-11-exponential-growthinator/</guid><description>&lt;h2 id="source-day-11-plutonian-pebbles">Source: &lt;a href="https://adventofcode.com/2024/day/11" target="_blank" rel="noopener">Day 11: Plutonian Pebbles&lt;/a>&lt;/h2>
&lt;p>&lt;a href="https://github.com/jpverkamp/advent-of-code/blob/master/2024/src/day11.rs" target="_blank" rel="noopener">Full solution&lt;/a> for today (spoilers!).&lt;/p>
&lt;nav id="TableOfContents">
 &lt;ul>
 &lt;li>&lt;a href="#source-day-11-plutonian-pebbles">Source: &lt;a href="https://adventofcode.com/2024/day/11">Day 11: Plutonian Pebbles&lt;/a>&lt;/a>&lt;/li>
 &lt;li>&lt;a href="#part-1">Part 1&lt;/a>
 &lt;ul>
 &lt;li>&lt;a href="#optimization-1-recursion">Optimization 1: Recursion&lt;/a>&lt;/li>
 &lt;li>&lt;a href="#optimization-2-memoization">Optimization 2: Memoization&lt;/a>&lt;/li>
 &lt;/ul>
 &lt;/li>
 &lt;li>&lt;a href="#part-2">Part 2&lt;/a>
 &lt;ul>
 &lt;li>&lt;a href="#optimization-attempt-3-association-list-cache">Optimization (attempt) 3: Association list cache&lt;/a>&lt;/li>
 &lt;li>&lt;a href="#optimization-attempt-4-btree-cache">Optimization (attempt) 4: &lt;code>BTree&lt;/code> cache&lt;/a>&lt;/li>
 &lt;li>&lt;a href="#optimization-5-iterate-over-hashmapvalue-count">Optimization 5: Iterate over &lt;code>HashMap&amp;lt;value, count&amp;gt;&lt;/code>&lt;/a>&lt;/li>
 &lt;/ul>
 &lt;/li>
 &lt;li>&lt;a href="#benchmarks">Benchmarks&lt;/a>&lt;/li>
 &lt;/ul>
&lt;/nav>

&lt;h2 id="part-1">Part 1&lt;/h2>
&lt;blockquote>
&lt;p>Given a sequence of values &lt;code>v_n&lt;/code>, replace each value with the first matching rule:&lt;/p>
&lt;ul>
&lt;li>&lt;code>if v = 0 -&amp;gt; 1&lt;/code>&lt;/li>
&lt;li>If &lt;code>v&lt;/code> has an even number of digits, split it (so &lt;code>v = 8675&lt;/code> becomes &lt;code>[86, 75]&lt;/code>)&lt;/li>
&lt;li>Otherwise, &lt;code>v -&amp;gt; v * 2024&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>Calculate how many elements are in the sequence after 25 iterations.&lt;/p>&lt;/blockquote></description></item><item><title>AoC 2024 Day 7: Mathinator</title><link>https://blog.jverkamp.com/2024/12/07/aoc-2024-day-7-mathinator/</link><pubDate>Sat, 07 Dec 2024 00:00:03 +0000</pubDate><guid>https://blog.jverkamp.com/2024/12/07/aoc-2024-day-7-mathinator/</guid><description>&lt;h2 id="source-day-7-bridge-repair">Source: &lt;a href="https://adventofcode.com/2024/day/7" target="_blank" rel="noopener">Day 7: Bridge Repair&lt;/a>&lt;/h2>
&lt;p>&lt;a href="https://github.com/jpverkamp/advent-of-code/blob/master/2024/src/day7.rs" target="_blank" rel="noopener">Full solution&lt;/a> for today (spoilers!).&lt;/p>
&lt;nav id="TableOfContents">
 &lt;ul>
 &lt;li>&lt;a href="#source-day-7-bridge-repair">Source: &lt;a href="https://adventofcode.com/2024/day/7">Day 7: Bridge Repair&lt;/a>&lt;/a>&lt;/li>
 &lt;li>&lt;a href="#part-1">Part 1&lt;/a>
 &lt;ul>
 &lt;li>&lt;a href="#optimization-attempt-1-queue">Optimization (attempt) 1: Queue&lt;/a>&lt;/li>
 &lt;/ul>
 &lt;/li>
 &lt;li>&lt;a href="#part-2">Part 2&lt;/a>&lt;/li>
 &lt;li>&lt;a href="#a-cleaner-way-of-looking-at-it-opset">A &amp;lsquo;cleaner&amp;rsquo; way of looking at it: &lt;code>OpSet&lt;/code>&lt;/a>&lt;/li>
 &lt;li>&lt;a href="#benchmarks">Benchmarks&lt;/a>&lt;/li>
 &lt;li>&lt;a href="#future-work">Future work&lt;/a>&lt;/li>
 &lt;/ul>
&lt;/nav>

&lt;h2 id="part-1">Part 1&lt;/h2>
&lt;blockquote>
&lt;p>Given a result and a list of numbers, determine if any combination of addition (&lt;code>+&lt;/code>) and/or multiplication (&lt;code>*&lt;/code>) using all the given numbers in order can return the result. Ignore order of operations.&lt;/p>&lt;/blockquote></description></item><item><title>StackLang Part VII: New CLI and Datatypes</title><link>https://blog.jverkamp.com/2023/08/05/stacklang-part-vii-new-cli-and-datatypes/</link><pubDate>Sat, 05 Aug 2023 23:59:00 +0000</pubDate><guid>https://blog.jverkamp.com/2023/08/05/stacklang-part-vii-new-cli-and-datatypes/</guid><description>&lt;p>Another day, another Stacklang!&lt;/p>
&lt;div class="ranking">
 &lt;h3 class="title">Posts in &lt;a href="https://blog.jverkamp.com/series/stacklang/">StackLang&lt;/a>:&lt;/h3>
 &lt;div class="content">
 &lt;ul>&lt;li>
 &lt;a href="https://blog.jverkamp.com/2023/04/14/stacklang-part-i-the-idea/">
 StackLang Part I: The Idea
 &lt;/a>&lt;/li>&lt;li>
 &lt;a href="https://blog.jverkamp.com/2023/04/16/stacklang-part-ii-the-lexer/">
 StackLang Part II: The Lexer
 &lt;/a>&lt;/li>&lt;li>
 &lt;a href="https://blog.jverkamp.com/2023/04/24/stacklang-part-iii-the-parser/">
 StackLang Part III: The Parser
 &lt;/a>&lt;/li>&lt;li>
 &lt;a href="https://blog.jverkamp.com/2023/05/01/stacklang-part-iv-an-interpreter/">
 StackLang Part IV: An Interpreter
 &lt;/a>&lt;/li>&lt;li>
 &lt;a href="https://blog.jverkamp.com/2023/07/12/stacklang-part-v-compiling-to-c/">
 StackLang Part V: Compiling to C
 &lt;/a>&lt;/li>&lt;li>
 &lt;a href="https://blog.jverkamp.com/2023/07/16/stacklang-part-vi-some-examples/">
 StackLang Part VI: Some Examples
 &lt;/a>&lt;/li>&lt;li>
 &lt;a href="https://blog.jverkamp.com/2023/08/05/stacklang-part-vii-new-cli-and-datatypes/">
 StackLang Part VII: New CLI and Datatypes
 &lt;/a>&lt;/li>&lt;li>
 &lt;a href="https://blog.jverkamp.com/2023/08/11/stacklang-part-viii-compiler-stacks/">
 StackLang Part VIII: Compiler Stacks
 &lt;/a>&lt;/li>&lt;li>
 &lt;a href="https://blog.jverkamp.com/2023/08/12/stacklang-part-ix-better-testing/">
 StackLang Part IX: Better Testing
 &lt;/a>&lt;/li>&lt;/ul>
 &lt;/div>
&lt;/div>

&lt;p>Today, we&amp;rsquo;ve got two main parts to work on:&lt;/p></description></item></channel></rss>