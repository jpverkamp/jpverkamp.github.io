<!DOCTYPE html>
<html>
<head>
        
        

        <title>What the (be)funge‽ | jverkamp.com | John-Paul Verkamp</title>

        <script src="//ajax.googleapis.com/ajax/libs/jquery/1.11.0/jquery.min.js" defer></script>
        <script src="//code.jquery.com/ui/1.11.1/jquery-ui.min.js" defer></script>

        <link rel="stylesheet" href="//netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css" defer />
        <link rel="stylesheet" href="//netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap-theme.min.css" defer />
        <script src="//netdna.bootstrapcdn.com/bootstrap/3.1.1/js/bootstrap.min.js" defer></script>

        <link rel="stylesheet" href="//cdnjs.cloudflare.com/ajax/libs/ekko-lightbox/3.0.3a/ekko-lightbox.min.css" defer />
        <script src="//cdnjs.cloudflare.com/ajax/libs/ekko-lightbox/3.0.3a/ekko-lightbox.min.js" defer></script>

        <script src="//cdnjs.cloudflare.com/ajax/libs/jquery.transit/0.9.9/jquery.transit.min.js" defer></script>

        <!-- Highlight.js for syntax highlighting -->
        <link rel="stylesheet" href="/highlight/styles/obsidian.css" defer />
        <script src="/highlight/highlight.pack.js" defer></script>

        <!-- MathJax for LaTeX support -->
        <script src="//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML" defer></script>

        <!-- nanoGallery for Flickr Galleries -->
        <link rel="stylesheet" href="//cdnjs.cloudflare.com/ajax/libs/nanogallery/4.4.2/css/themes/light/nanogallery_light.css" defer />
        <script type="text/javascript" src="//cdnjs.cloudflare.com/ajax/libs/nanogallery/4.4.2/jquery.nanogallery.min.js" defer ></script>

        <!-- Pretty pretty fonts -->
        <link rel="stylesheet" type="text/css" href="//fonts.googleapis.com/css?family=Calligraffitti" defer />

        <!-- Any custom CSS or JS that I've written; this should be kept minimal -->
        <link rel="stylesheet" href="/custom.css" defer />
        <script src="/custom.js" defer></script>

        <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
        <link rel="alternate" type="application/atom+xml" title="jverkamp.com (Atom 2.0)" href="//blog.jverkamp.com/feed/" />
</head>
<body>
        <header class="container">
        <nav class="navbar navbar-default" role="navigation">
  <div class="container-fluid">
    <!-- Brand and toggle get grouped for better mobile display -->
    <div class="navbar-header">
      <button type="button" class="navbar-toggle" data-toggle="collapse" data-target="#bs-example-navbar-collapse-1">
        <span class="sr-only">Toggle navigation</span>
        <span class="icon-bar"></span>
        <span class="icon-bar"></span>
        <span class="icon-bar"></span>
      </button>
      <a class="navbar-brand" href="//blog.jverkamp.com"><span style="color: green;">jv</span>erkamp.com</a>
    </div>

    <!-- Collect the nav links, forms, and other content for toggling -->
    <div class="collapse navbar-collapse" id="bs-example-navbar-collapse-1">
      <ul class="nav navbar-nav"><li class="dropdown"><a href="//blog.jverkamp.com/category/archives" class="dropdown-toggle">Archives<span class="caret"></span></a><ul class="dropdown-menu"><li><a href="//blog.jverkamp.com/category/archives/2004">2004</a></li><li><a href="//blog.jverkamp.com/category/archives/2005">2005</a></li><li><a href="//blog.jverkamp.com/category/archives/2006">2006</a></li><li><a href="//blog.jverkamp.com/category/archives/2007">2007</a></li><li><a href="//blog.jverkamp.com/category/archives/2008">2008</a></li><li><a href="//blog.jverkamp.com/category/archives/2009">2009</a></li><li><a href="//blog.jverkamp.com/category/archives/2010">2010</a></li><li><a href="//blog.jverkamp.com/category/archives/2011">2011</a></li><li><a href="//blog.jverkamp.com/category/archives/2012">2012</a></li><li><a href="//blog.jverkamp.com/category/archives/2013">2013</a></li><li><a href="//blog.jverkamp.com/category/archives/2014">2014</a></li><li><a href="//blog.jverkamp.com/category/archives/2015">2015</a></li></ul></li><li class="dropdown"><a href="//blog.jverkamp.com/category/other" class="dropdown-toggle">Other<span class="caret"></span></a><ul class="dropdown-menu"><li><a href="//blog.jverkamp.com/category/other/board-game-reviews">Board Game Reviews</a></li><li><a href="//blog.jverkamp.com/category/other/book-reviews">Book Reviews</a></li><li><a href="//blog.jverkamp.com/category/other/cooking">Cooking</a></li><li><a href="//blog.jverkamp.com/category/other/movie-reviews">Movie Reviews</a></li></ul></li><li class="dropdown"><a href="//blog.jverkamp.com/category/photography" class="dropdown-toggle">Photography<span class="caret"></span></a><ul class="dropdown-menu"><li><a href="//blog.jverkamp.com/category/photography/dp-challenge">DP Challenge</a></li><li><a href="//blog.jverkamp.com/category/photography/photosets">Photosets</a></li><li><a href="//blog.jverkamp.com/category/photography/photosynth">Photosynth</a></li></ul></li><li class="dropdown"><a href="//blog.jverkamp.com/category/programming" class="dropdown-toggle">Programming<span class="caret"></span></a><ul class="dropdown-menu"><li><a href="//blog.jverkamp.com/category/programming/by-language">By Language</a></li><li><a href="//blog.jverkamp.com/category/programming/by-project">By Project</a></li><li><a href="//blog.jverkamp.com/category/programming/by-source">By Source</a></li><li><a href="//blog.jverkamp.com/category/programming/by-topic">By Topic</a></li><li><a href="//blog.jverkamp.com/category/programming/libraries">Libraries</a></li></ul></li><li class="dropdown"><a href="//blog.jverkamp.com/category/research" class="dropdown-toggle">Research<span class="caret"></span></a><ul class="dropdown-menu"><li><a href="//blog.jverkamp.com/category/research/by-topic">By Topic</a></li><li><a href="//blog.jverkamp.com/category/research/publications">Publications</a></li></ul></li><li class="dropdown"><a href="//blog.jverkamp.com/category/writing" class="dropdown-toggle">Writing<span class="caret"></span></a><ul class="dropdown-menu"><li><a href="//blog.jverkamp.com/category/writing/by-genre">By Genre</a></li><li><a href="//blog.jverkamp.com/category/writing/ideas">Ideas</a></li><li><a href="//blog.jverkamp.com/category/writing/nanowrimo">NaNoWriMo</a></li><li><a href="//blog.jverkamp.com/category/writing/novels">Novels</a></li><li><a href="//blog.jverkamp.com/category/writing/other">Other</a></li><li><a href="//blog.jverkamp.com/category/writing/short-stories">Short Stories</a></li><li><a href="//blog.jverkamp.com/category/writing/writing-excuses">Writing Excuses</a></li></ul></li></ul>

      <form action="//www.google.com/search" method="get" onSubmit="(function(obj){obj.q.value='site:blog.jverkamp.com '+obj.qfront.value;})(this)" class="navbar-form navbar-right" role="search">
        <div class="form-group">
          <input name="q" type="hidden" />
          <input name="qfront" type="text" class="form-control" placeholder="Search" />
          <button type="submit" class="btn btn-default" value="Search">Search</button>
        </p>
      </form>
    </div><!-- /.navbar-collapse -->
  </div><!-- /.container-fluid -->
</nav>
        </header>

        <article class="container">
                <header>
                        <h1 class="entry-title">What the (be)funge‽</h1>

                        <div class="entry-meta">
                                <span class="posted-on"><time class="entry-date" datetime="2014-06-10"><span class="year">2014</span> <span class="month">June</span> <span class="day">10</span></time></span>
                                <span class="tags"><ul class="tag-list list-inline"><li><a href="//blog.jverkamp.com/category/programming/by-topic/esolangs">Esolangs</a></li><li><a href="//blog.jverkamp.com/category/programming">Programming</a></li><li><a href="//blog.jverkamp.com/category/programming/by-topic/programming-languages">Programming Languages</a></li><li><a href="//blog.jverkamp.com/category/programming/by-language/racket">Racket</a></li><li><a href="//blog.jverkamp.com/category/programming/by-language/scheme">Scheme</a></li></ul></span>
                        </div>

                        <hr />
                </header>
                <div class="entry-content">
                        <p>Here's a fun little bit of code for you:</p>
<pre class="bash"><code>55*4*v    _   v
v   &lt;&gt;:1-:^
    |:&lt;$      &lt;    ,*48 &lt;
    @"@"&gt;0"zzif"&gt;:#,_$      v
&gt;:3%!|    &gt;0"zzub"&gt;:#,_$^
     &gt;:5%!|
v "buzz"0&lt;&gt;:.           ^
         |!%5:           &lt;
&gt;:#,_   $&gt;              ^</code></pre>
<p>Gibberish you say? No! <a href="https://en.wikipedia.org/wiki/Befuge">Befunge</a>!</p>
<!--more-->
<p>More specifically:</p>
<blockquote>Befunge is a stack-based, reflective, esoteric programming language. It differs from conventional languages in that programs are arranged on a two-dimensional grid. "Arrow" instructions direct the control flow to the left, right, up or down, and loops are constructed by sending the control flow in a cycle. It has been described as "a cross between Forth and Lemmings."</blockquote>
<p>-- <a href="https://en.wikipedia.org/wiki/Wikipedia">Befunge</a></p>
<p>There's not much of a write up this time, since pretty much the entire code is the state machine that actually drives the language. We'll go ahead and assume that we have a whole suite of helper functions (see <a href="https://github.com/jpverkamp/small-projects/blob/master/blog/befunge.rkt">GitHub</a> for details):</p>
<ul>
        <li><code>wrapped-vector-ref</code> - <code>vector-ref </code>where indexes out of bounds wrap</li>
        <li><code>wrapped-vector-set!</code> - likewise for <code>vector-set!</code></li>
        <li><code>grid-ref</code> - ref for a vector of vectors, using wrapping</li>
        <li><code>grid-set!</code> - set! for a vector of vectors</li>
        <li><code>read-befunge</code> - read a befunge program from input</li>
        <li><code>write-befunge</code> - write a befunge grid out for debugging</li>
</ul>
<p>Next, we have the state of the machine. I'll store it in a parameter, so we can access it from a number of helper functions (up in a bit):</p>
<h3>State functions</h3>
<pre class="scheme"><code>; Befunge state
(struct state (x y facing stack grid running) #:transparent #:mutable)
(define current-state (make-parameter #f))</code></pre>
<p>Next, said helpers to manipulate the stack, move the pointer, and get the current character. All of them are safe to use even if there is no current state, they just won't do anything.</p>
<pre class="scheme"><code>; Stack maniuplation. Pop 0 on an empty stack
(define (pop!)
  (when (current-state)
    (define stack (state-stack (current-state)))
    (if (null? stack)
        0
        (begin0
          (car stack)
          (set-state-stack! (current-state) (cdr stack))))))

(define (push! v)
  (when (current-state)
    (set-state-stack! (current-state) (cons v (state-stack (current-state))))))

; Move in the current direction
(define (move!)
  (when (current-state)
    (case (state-facing (current-state))
      [(right) (set-state-x! (current-state) (+ (state-x (current-state)) 1))]
      [(left)  (set-state-x! (current-state) (- (state-x (current-state)) 1))]
      [(down)  (set-state-y! (current-state) (+ (state-y (current-state)) 1))]
      [(up)    (set-state-y! (current-state) (- (state-y (current-state)) 1))])))

; Get the current character from the state
(define (grid-@"@")
  (if (current-state)
      (grid-ref (state-grid (current-state))
                (state-x (current-state))
                (state-y (current-state)))
      #\space))</code></pre>
<h3>Stepper</h3>
<p>Now it's just a literal translation of the instructions into state transitions. I'll have one function to advance the state to make it easier to make a debugging rendering function:</p>
<pre class="scheme"><code>; Advance the befunge program to the next step
(define (step!)
  (when (and (current-state) (state-running (current-state)))
    ; Decode the next instruction
    (define cmd (grid-@"@"))
    (case cmd
      ; Push this number on the stack
      [(#\0 #\1 #\2 #\3 #\4 #\5 #\6 #\7 #\8 #\9)
       (push! (string-&gt;number (string cmd)))]
      ; Addition: Pop a and b, then push a+b
      ; Subtraction: Pop a and b, then push b-a
      ; Multiplication: Pop a and b, then push a*b
      ; Integer division: Pop a and b, then push b/a, rounded down. If a is zero, ask the user what result they want.[dubious – discuss]
      ; Modulo: Pop a and b, then push the remainder of the integer division of b/a. If a is zero, ask the user what result they want.[dubious – discuss]
      ; Greater than: Pop a and b, then push 1 if b&gt;a, otherwise zero.
      [(#\+ #\- #\* #\/ #\% #\`)
       (define a (pop!))
       (define b (pop!))
       (define op (cdr (assoc cmd `((#\+ . ,+)
                                    (#\- . ,-)
                                    (#\* . ,*)
                                    (#\/ . ,quotient)
                                    (#\% . ,remainder)
                                    (#\` . ,(λ (b a) (if (&gt; b a) 1 0)))))))
       (push! (op b a))]
      ; Logical NOT: Pop a value. If the value is zero, push 1; otherwise, push zero.
      [(#\!)
       (push! (if (zero? (pop!)) 1 0))]
      ; Change direction
      [(#\&gt; #\&lt; #\^ #\v)
       (set-state-facing! (current-state) (cdr (assoc cmd `((#\&gt; . right)
                                                            (#\&lt; . left)
                                                            (#\^ . up)
                                                            (#\v . down)))))]
      ; Start moving in a random cardinal direction
      [(#\?)
       (set-state-facing! (current-state) (list-ref `(right left up down) (random 4)))]
      ; Pop a value; move right if value=0, left otherwise
      [(#\_)
       (set-state-facing! (current-state) (if (zero? (pop!)) 'right 'left))]
      ; Pop a value; move down if value=0, up otherwise
      [(#\|)
       (set-state-facing! (current-state) (if (zero? (pop!)) 'down 'up))]
      ; Start string mode: push each character's ASCII value all the way up to the next "
      ; Note: uses one fuel
      [(#\quote) ; (should be a quote character but that breaks syntax highlighting)
       (let loop ()
         (move!)
         (define c (grid-@"@"))
         (when (not (equal? c #\quote)) ; ditto
           (push! (char-&gt;integer c))
           (loop)))]
      ; Duplicate value on top of the stack
      [(#\@emoji{:smile:}
       (define v (pop!))
       (push! v)
       (push! v)]
      ; Swap two values on top of the stack
      [(#\\)
       (define a (pop!))
       (define b (pop!))
       (push! a)
       (push! b)]
      ; Pop value from the stack and discard it
      [(#\$)
       (pop!)]
      ; Pop value and output as an integer
      [(#\.)
       (display (pop!))
       (display " ")]
      ; Pop value and output as ASCII character
      [(#\,)
       (display (integer-&gt;char (pop!)))]
      ; Trampoline: Skip next cell
      [(#\#)
       (move!)]
      ; A "put" call (a way to store a value for later use).
      ; Pop y, x and v, then change the character at the position (x,y)
      ; in the program to the character with ASCII value v
      [(#\p)
       (define y (pop!))
       (define x (pop!))
       (define v (pop!))
       (grid-set! (state-grid (current-state))
                  x y
                  (with-handlers ([exn? (λ _ v)])
                    (integer-&gt;char v)))]
      ; A "get" call (a way to retrieve data in storage).
      ; Pop y and x, then push ASCII value of the character at that position in the program
      [(#\g)
       (define y (pop!))
       (define x (pop!))
       (define v (grid-@"@"))
       (push! (if (number? v) v (char-&gt;integer v)))]
      ; Ask user for a number and push it
      [(#\&)
       (display "Enter a number: ")
       (push! (read))]
      ; Ask user for a character and push its ASCII value
      [(#\~)
       (display "Enter a character: ")
       (push! (read-char))
       (newline)]
      ; End program
      [(#\@"@")
       (set-state-running! (current-state) #f)])

    (move!)))</code></pre>
<p>There are a few interesting cases:</p>
<ul>
        <li><code>#\"</code> - nested loop to read the rest of a string (counts as one 'step')</li>
        <li><code>#\#</code> - one <code>move!</code> is called here, the next at the end of the function</li>
        <li><code>#\p</code> - we're extending support out to the full <a href="https://en.wikipedia.org/wiki/Unicode">Unicode</a> character set, but not every integer represents a code point, so for those store the number instead</li>
        <li><code>#\@</code> - trust that the caller will actually check the <code>state-running</code> parameter</li>
</ul>
<h3>Main loop</h3>
<p>Around that, we need a loop that just keeps calling <code>step!</code> until <code>state-running</code> is false. Something like this:</p>
<pre class="scheme"><code>; Run a befunge program
(define (run-befunge [input   (current-input-port)]
                     #:debug  [debug #f]
                     #:fuel   [fuel +inf.0])
  ; Load the grid
  (define grid
    (cond
      [(input-port? input) (read-befunge input)]
      [(string? input) (call-with-input-string input read-befunge)]
      [(vector? input) input]))

  ; Set up initial state (x y facing stack grid running)
  (parameterize ([current-state (state 0 0 'right '() grid #t)])
    (let loop ([step 0])
      (when (and (state-running (current-state))
                 (&lt; step fuel))
        (when debug
          (write-befunge (state-grid (current-state)))
          (printf "~a x ~a, ~a\nstack: ~a\n\n"
                  (state-x (current-state))
                  (state-y (current-state))
                  (state-facing (current-state))
                  (state-stack (current-state))))

        (step!)
        (loop (+ step 1))))))</code></pre>
<p>I went ahead and stuck in a debug view (which will print out the grid, cursor, and stack on each step) and a limited fuel on the case that we don't want to accidently run a program for forever.</p>
<h3>Examples</h3>
<p>And that's all we need. Let's test it with a few sample programs:</p>
<h4>Hello World (Wikipedia)</h4>
<pre class="scheme"><code>&gt; (run-befunge)
&gt;              v ; hello world
v  ,,,,,"Hello"&lt; ; source: wikipedia
&gt;48*,          v
v,,,,,,"World!"&lt;
&gt;25*,@"@"

Hello World!</code></pre>
<h4>Hello World (Wikipedia)</h4>
<pre class="scheme"><code>&gt; (run-befunge)
&gt;25*"!dlrow ,olleH":v  ; hello world v2
                 v:,_@"@" ; source: wikipedia
                 &gt;  ^

Hello, world!</code></pre>
<h4>Fizz Buzz (RosettaCode)</h4>
<pre class="scheme"><code>&gt; (run-befunge)
55*4*v    _   v            ; fizz buzz
v   &lt;&gt;:1-:^                ; source: rosettacode
    |:&lt;$      &lt;    ,*48 &lt;
    @"@"&gt;0"zzif"&gt;:#,_$      v
&gt;:3%!|    &gt;0"zzub"&gt;:#,_$^
     &gt;:5%!|
v "buzz"0&lt;&gt;:.           ^
         |!%5:           &lt;
&gt;:#,_   $&gt;              ^

1  2  fizz 4  buzz fizz 7  8  fizz buzz 11  fizz 13  14  fizzbuzz 16  17  fizz 19  buzz fizz 22  23  fizz buzz 26  fizz 28  29  fizzbuzz 31  32  fizz 34  buzz fizz 37  38  fizz buzz 41  fizz 43  44  fizzbuzz 46  47  fizz 49  buzz fizz 52  53  fizz buzz 56  fizz 58  59  fizzbuzz 61  62  fizz 64  buzz fizz 67  68  fizz buzz 71  fizz 73  74  fizzbuzz 76  77  fizz 79  buzz fizz 82  83  fizz buzz 86  fizz 88  89  fizzbuzz 91  92  fizz 94  buzz fizz 97  98  fizz buzz</code></pre>
<h4>Random digit generator (Wikipedia)</h4>
<pre class="scheme"><code>&gt; (run-befunge #:fuel 1000)
v&gt;&gt;&gt;&gt;. ; random digit generator
 12345 ; source: wikipedia
 ^?^
&gt; ? ?^
 v?v
v6789&gt;

4 3 5 7 1 8 5 1 7 3 3 2 6 3 5 8 5 1 4 9 9 2 6 4 5</code></pre>
<p>Looks pretty good from here!</p>
<h3>Pretty pretty pictures</h3>
<p>One last trick, let's do much the same that we did a <a href="//blog.jverkamp.com/2014/05/28/quadtree-image-compression">bit ago</a> and make a rendering function:</p>
<h4>Hello World (Wikipedia)</h4>
<p><a href="//blog.jverkamp.com/2014/06/10/what-the-befunge%e2%80%bd/hello-world.gif" data-toggle="lightbox"><img src="//blog.jverkamp.com/2014/06/10/what-the-befunge%e2%80%bd/hello-world.gif" /></a></p>
<h4>Random digit generator (Wikipedia)</h4>
<p><a href="//blog.jverkamp.com/2014/06/10/what-the-befunge%e2%80%bd/random.gif" data-toggle="lightbox"><img src="//blog.jverkamp.com/2014/06/10/what-the-befunge%e2%80%bd/random.gif" /></a></p>
<h4>Fizz Buzz (RosettaCode)</h4>
<p>(Limited to 10 in interest of time)</p>
<p><a href="//blog.jverkamp.com/2014/06/10/what-the-befunge%e2%80%bd/fizz-buzz.gif" data-toggle="lightbox"><img src="//blog.jverkamp.com/2014/06/10/what-the-befunge%e2%80%bd/fizz-buzz.gif" /></a></p>
<p>And that's it. Check out the full source on GitHub: <a href="https://github.com/jpverkamp/small-projects/blob/master/blog/befunge.rkt">befunge.rkt</a></p>
                </div>
                <div class="entry-footnotes">
                        <div id="footnotes"><ol></ol></div>
                </div>

                <div id="disqus_thread"></div>
<script type="text/javascript">
var disqus_shortname = "jverkamp";
var disqus_title = "What the (be)funge‽";
var disqus_url = "http://blog.jverkamp.com/2014/06/10/what-the-befunge%e2%80%bd/";
/* * * DON'T EDIT BELOW THIS LINE * * */
(function() {
  var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
  dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js';
  (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
})();
</script>
<noscript>Please enable JavaScript to view the <a href="http://disqus.com/?ref_noscript">comments powered by Disqus.</a></noscript>
<a href="http://disqus.com" class="dsq-brlink">comments powered by <span class="logo-disqus">Disqus</span></a>
        </article>

        <footer class="container" role="contentinfo">
                <nav class="navbar navbar-default" role="navigation"><ul class="nav navbar-nav nav-justified"><li><a href="//blog.jverkamp.com/2014/06/08/x-men-days-of-future-past">← X-Men: Days of Future Past</a></li><li><a href="//blog.jverkamp.com/category/archives">Archives</a></li><li><a href="//blog.jverkamp.com/2014/06/11/call-stack-bracket-matcher">Call stack bracket matcher →</a></li></ul><ul class="nav navbar-nav nav-justified"><li><a href="//blog.jverkamp.com/2014/05/30/braille-unicode-pixelation">← Braille unicode pixelation</a></li><li><a href="//blog.jverkamp.com/category/programming">Programming</a></li><li><a href="//blog.jverkamp.com/2014/06/11/call-stack-bracket-matcher">Call stack bracket matcher →</a></li></ul></nav>

                <div class="legal">
                        <a href="//blog.jverkamp.com/feed/atom.xml">feed <img style="border: 0;" src="//blog.jverkamp.com/rss.png" /></a><br />
                        All posts unless otherwise mentioned are licensed under <a rel="license" href="//creativecommons.org/licenses/by-nc-sa/3.0/deed.en_US"><img alt="Creative Commons License" style="border-width:0" src="//i.creativecommons.org/l/by-nc-sa/3.0/80x15.png" /></a><br />
                        Any source code unless otherwise mentioned is licensed under the <a href="//directory.fsf.org/wiki/License:BSD_3Clause">3 clause BSD license</a>
                </div>
        </footer>

<script>
(function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
(i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
m=s.getElementsByTagName(o)[0];a.defer=1;a.src=g;m.parentNode.insertBefore(a,m)
})(window,document,'script','//www.google-analytics.com/analytics.js','ga');

ga('create', 'UA-53688146-1', 'auto');
ga('send', 'pageview');
</script>
</body>
</html>