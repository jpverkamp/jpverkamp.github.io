<!DOCTYPE html>
<html>
<head>
        
        

        <title>Quadtree image compression | jverkamp.com | John-Paul Verkamp</title>

        <script src="//ajax.googleapis.com/ajax/libs/jquery/1.11.0/jquery.min.js"></script>

        <link rel="stylesheet" href="//netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css" />
        <link rel="stylesheet" href="//netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap-theme.min.css" />
        <script src="//netdna.bootstrapcdn.com/bootstrap/3.1.1/js/bootstrap.min.js"></script>

        <link rel="stylesheet" href="//cdnjs.cloudflare.com/ajax/libs/ekko-lightbox/3.0.3a/ekko-lightbox.min.css" />
        <script src="//cdnjs.cloudflare.com/ajax/libs/ekko-lightbox/3.0.3a/ekko-lightbox.min.js"></script>

        <script src="//cdnjs.cloudflare.com/ajax/libs/jquery.transit/0.9.9/jquery.transit.min.js"></script>

        <!-- Highlight.js for syntax highlighting -->
        <link rel="stylesheet" href="/highlight/styles/tomorrow-night.css" />
        <script src="/highlight/highlight.pack.js"></script>

        <!-- MathJax for LaTeX support -->
        <script src="//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML"></script>

        <!-- nanoGallery for Flickr Galleries -->
        <link rel="stylesheet" href="//cdnjs.cloudflare.com/ajax/libs/nanogallery/4.4.2/css/themes/light/nanogallery_light.css" />
        <script type="text/javascript" src="//cdnjs.cloudflare.com/ajax/libs/nanogallery/4.4.2/jquery.nanogallery.min.js"></script>

        <!-- Any custom CSS or JS that I've written; this should be kept minimal -->
        <link rel="stylesheet" href="/custom.css" />
        <script src="/custom.js"></script>

        <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
        <link rel="alternate" type="application/atom+xml" title="jverkamp.com (Atom 2.0)" href="http://blog.jverkamp.com/feed/" />
</head>
<body>
        <header class="container">
        <nav class="navbar navbar-default" role="navigation">
  <div class="container-fluid">
    <!-- Brand and toggle get grouped for better mobile display -->
    <div class="navbar-header">
      <button type="button" class="navbar-toggle" data-toggle="collapse" data-target="#bs-example-navbar-collapse-1">
        <span class="sr-only">Toggle navigation</span>
        <span class="icon-bar"></span>
        <span class="icon-bar"></span>
        <span class="icon-bar"></span>
      </button>
      <a class="navbar-brand" href="http://blog.jverkamp.com"><span style="color: green;">jv</span>erkamp.com</a>
    </div>

    <!-- Collect the nav links, forms, and other content for toggling -->
    <div class="collapse navbar-collapse" id="bs-example-navbar-collapse-1">
      <ul class="nav navbar-nav"><li class="dropdown"><a href="http://blog.jverkamp.com/category/archives" class="dropdown-toggle">Archives<span class="caret"></span></a><ul class="dropdown-menu"><li><a href="http://blog.jverkamp.com/category/archives/2004">2004</a></li><li><a href="http://blog.jverkamp.com/category/archives/2005">2005</a></li><li><a href="http://blog.jverkamp.com/category/archives/2006">2006</a></li><li><a href="http://blog.jverkamp.com/category/archives/2007">2007</a></li><li><a href="http://blog.jverkamp.com/category/archives/2008">2008</a></li><li><a href="http://blog.jverkamp.com/category/archives/2009">2009</a></li><li><a href="http://blog.jverkamp.com/category/archives/2010">2010</a></li><li><a href="http://blog.jverkamp.com/category/archives/2011">2011</a></li><li><a href="http://blog.jverkamp.com/category/archives/2012">2012</a></li><li><a href="http://blog.jverkamp.com/category/archives/2013">2013</a></li><li><a href="http://blog.jverkamp.com/category/archives/2014">2014</a></li></ul></li><li class="dropdown"><a href="http://blog.jverkamp.com/category/other" class="dropdown-toggle">Other<span class="caret"></span></a><ul class="dropdown-menu"><li><a href="http://blog.jverkamp.com/category/other/board-game-reviews">Board Game Reviews</a></li><li><a href="http://blog.jverkamp.com/category/other/cooking">Cooking</a></li><li><a href="http://blog.jverkamp.com/category/other/movie-reviews">Movie Reviews</a></li></ul></li><li class="dropdown"><a href="http://blog.jverkamp.com/category/photography" class="dropdown-toggle">Photography<span class="caret"></span></a><ul class="dropdown-menu"><li><a href="http://blog.jverkamp.com/category/photography/dp-challenge">DP Challenge</a></li><li><a href="http://blog.jverkamp.com/category/photography/photosets">Photosets</a></li><li><a href="http://blog.jverkamp.com/category/photography/photosynth">Photosynth</a></li></ul></li><li class="dropdown"><a href="http://blog.jverkamp.com/category/programming" class="dropdown-toggle">Programming<span class="caret"></span></a><ul class="dropdown-menu"><li><a href="http://blog.jverkamp.com/category/programming/by-language">By Language</a></li><li><a href="http://blog.jverkamp.com/category/programming/by-project">By Project</a></li><li><a href="http://blog.jverkamp.com/category/programming/by-source">By Source</a></li><li><a href="http://blog.jverkamp.com/category/programming/by-topic">By Topic</a></li><li><a href="http://blog.jverkamp.com/category/programming/libraries">Libraries</a></li></ul></li><li class="dropdown"><a href="http://blog.jverkamp.com/category/research" class="dropdown-toggle">Research<span class="caret"></span></a><ul class="dropdown-menu"><li><a href="http://blog.jverkamp.com/category/research/by-topic">By Topic</a></li><li><a href="http://blog.jverkamp.com/category/research/publications">Publications</a></li></ul></li><li class="dropdown"><a href="http://blog.jverkamp.com/category/writing" class="dropdown-toggle">Writing<span class="caret"></span></a><ul class="dropdown-menu"><li><a href="http://blog.jverkamp.com/category/writing/by-genre">By Genre</a></li><li><a href="http://blog.jverkamp.com/category/writing/nanowrimo">NaNoWriMo</a></li><li><a href="http://blog.jverkamp.com/category/writing/novels">Novels</a></li><li><a href="http://blog.jverkamp.com/category/writing/other">Other</a></li><li><a href="http://blog.jverkamp.com/category/writing/short-stories">Short Stories</a></li></ul></li></ul>

      <form action="http://www.google.com/search" method="get" onSubmit="(function(obj){obj.q.value='site:blog.jverkamp.com '+obj.qfront.value;})(this)" class="navbar-form navbar-right" role="search">
        <div class="form-group">
          <input name="q" type="hidden" />
          <input name="qfront" type="text" class="form-control" placeholder="Search" />
          <button type="submit" class="btn btn-default" value="Search">Search</button>
        </p>
      </form>
    </div><!-- /.navbar-collapse -->
  </div><!-- /.container-fluid -->
</nav>
        </header>

        <article class="container">
                <header>
                        <h1 class="entry-title">Quadtree image compression</h1>

                        <div class="entry-meta">
                                <span class="posted-on"><time class="entry-date" datetime="2014-05-28"><span class="year">2014</span> <span class="month">May</span> <span class="day">28</span></time></span>
                                <span class="tags"><ul class="tag-list list-inline"><li><a href="http://blog.jverkamp.com/category/programming/by-topic/data-structures">Data Structures</a></li><li><a href="http://blog.jverkamp.com/category/programming">Programming</a></li><li><a href="http://blog.jverkamp.com/category/programming/by-language/scheme">Scheme</a></li><li><a href="http://blog.jverkamp.com/category/programming/by-language/racket">Racket</a></li><li><a href="http://blog.jverkamp.com/category/programming/by-topic/graphics">Graphics</a></li></ul></span>
                        </div>

                        <hr />
                </header>
                <div class="entry-content">
                        <p>About two weeks ago, I came across a post via <a href="http://www.reddit.com/r/programming/">/r/programming</a>: <a href="http://www.reddit.com/r/programming/comments/25ptrk/quadtree_art/">Quadtree Art</a><sup><a href="https://github.com/fogleman/Quads">(src)</a></sup>. In a sentence, the goal is to recursively divide an image into a quadtree, at each step expanding the current node with the largest internal variance.</p>
<!--more-->
<p>More specifically, the algorithm is as follows:</p>
<ol>
        <li>Given an image <span>\( \mathbb{I} \)</span></li>
        <li>Split the image into four subimages, <span>\( \mathbb{I}_1 \)</span> - <span>\( \mathbb{I}_4 \)</span>
        <li>For each current node <span>\( \mathbb{I}_i \)</span>, calculate the median color <span>\( \mathbb{A}_i \)</span> and error <span>\( \mathbb{E}_i = \sum \begin{vmatrix} \mathbb{I}(x,y) - \mathbb{A}_i \end{vmatrix} \)</span></li>
        <li>Find the subimage with the largest error, split it into four further subimages</li>
        <li>Repeat from step 3</li>
</ol>
<p>And if you can do all of that, you can get some pretty neat images:</p>
<p><a data-toggle="lightbox" href="http://blog.jverkamp.com/2014/05/28/quadtree-image-compression/pipes-stage1000.jpg"><img src="http://blog.jverkamp.com/2014/05/28/quadtree-image-compression/pipes-stage1000.jpg" /></a></p>
<p>But how do we turn that into code?</p>
<h2>Quadtrees</h2>
<p>Well, first we have to take a step back. We need some way of representing a quadtree. Perhaps a structure something like this:</p>
<pre class="scheme"><code>(struct quadtree (top-left top-right bottom-left bottom-right) #:transparent)</code></pre>
<p>Then, each node will either be a further <code>quadtree</code> or a leaf (any sort of value). If we wanted to have a quadtree of numbers:</p>
<pre>1   | 2 3
    | 4 5
----+-----
6   | 7 8
    | 9 0</pre>
<p>We could do so like this:</p>
<pre class="scheme"><code>&gt; (define qt (quadtree 1 (quadtree 2 3 4 5) 6 (quadtree 7 8 9 0)))
&gt; qt
(quadtree 1 (quadtree 2 3 4 5) 6 (quadtree 7 8 9 0))</code></pre>
<p>Recursive data structures at their finest :).</p>
<p>The next thing we want is a trio of helper functions: <code>quadtree-map</code>, <code>quadtree-reduce</code>, and <code>quadtree-ref</code>. In order, these will apply a function to each node in a quadtree, collapse a quadtree by replacing the structure of the tree with a function (I'll show an example later), or find a specific point within the quad tree.</p>
<p>First, map:</p>
<pre class="scheme"><code>; Map a function over the nodes in a quadtree
(define (quadtree-map f qt)
  (cond
    [(quadtree? qt)
     (quadtree
      (quadtree-map f (quadtree-top-left qt))
      (quadtree-map f (quadtree-top-right qt))
      (quadtree-map f (quadtree-bottom-left qt))
      (quadtree-map f (quadtree-bottom-right qt)))]
    [else (f qt)]))</code></pre>
<p>Easy enough. Saw we want the square of each value in the previous quadtree:</p>
<pre class="scheme"><code>&gt; (quadtree-map sqr qt)
(quadtree 1 (quadtree 4 9 16 25) 36 (quadtree 49 64 81 0))</code></pre>
<p>Next, <code>quadtree-reduce</code>. To think about this one, look at the structure of a quadtree in the above example. Each <code>quadtree</code> call looks an awful lot like a function call. That's really all that a <code>reduce</code> is, is swapping out the call for another function. Something like this:</p>
<pre class="scheme"><code>; Reduce all nodes in a quadtree
(define (quadtree-reduce f qt)
  (cond
    [(quadtree? qt)
     (f (quadtree-reduce f (quadtree-top-left qt))
        (quadtree-reduce f (quadtree-top-right qt))
        (quadtree-reduce f (quadtree-bottom-left qt))
        (quadtree-reduce f (quadtree-bottom-right qt)))]
    [else qt]))</code></pre>
<p>So to add all of the nodes together:</p>
<pre class="scheme"><code>&gt; (quadtree-reduce + qt)
45
&gt; qt
(quadtree 1 (quadtree 2 3 4 5) 6 (quadtree 7 8 9 0))
&gt; (+ 1 (+ 2 3 4 5) 6 (+ 7 8 9 0))
45</code></pre>
<p>Or always take the top right node:</p>
<pre class="scheme"><code>&gt; (quadtree-reduce (λ (tl tr bl br) tr) qt)
3</code></pre>
<p>And finally, reference a specific point. This is the first time that we're dealing with quadtrees as a representation of space. Think of a space, saw 16 meters square. If you take the top right, you have from 0-8 on the y and 8-16 on the x. Take the top left of that and you have 0-4 on the y and 8-12 on the x.</p>
<p>In code:</p>
<pre class="scheme"><code>(struct region (top left width height) #:transparent)

; Recur to a given point within a quadtree
(define (quadtree-ref qt width height x y #:return-region [return-region? #f])
  (let loop ([qt qt] [r (region 0 0 width height)])
    (cond
      [(quadtree? qt)
       (match-define (region top left width height) r)
       (define x-mid (+ left (quotient width 2)))
       (define y-mid (+ top  (quotient height 2)))
       (match (list (if (&lt; y y-mid) 'top 'bottom)
                    (if (&lt; x x-mid) 'left 'right))
         ['(top    left)  (loop (quadtree-top-left     qt) (region top   left  (quotient width 2) (quotient height 2)))]
         ['(bottom left)  (loop (quadtree-bottom-left  qt) (region y-mid left  (quotient width 2) (quotient height 2)))]
         ['(top    right) (loop (quadtree-top-right    qt) (region top   x-mid (quotient width 2) (quotient height 2)))]
         ['(bottom right) (loop (quadtree-bottom-right qt) (region y-mid x-mid (quotient width 2) (quotient height 2)))])]
      [return-region? r]
      [else qt])))</code></pre>
<p>It's a bit more complicated, but should be straight forward enough to read. Perhaps the most interesting part is the use of <code><a href="http://docs.racket-lang.org/search/index.html?q=match-define">match-define</a></code>. Given a struct (such as a <code>region</code>), it can automatically destructure it. Much easier than a whole series of <code>define</code>s.</p>
<p>Whew.</p>
<h2>Rendering quadtrees</h2>
<p>Next, we need to actually turn one of these quadtrees back to an image. It turns out though, that that part is really easy. If we have a quadtree where each node is either recursive or a color (represented as a 4 vector of ARGB), you can render it as such:</p>
<pre class="scheme"><code>; Render a tree where each node is either a quadtree or a vector (color)
(define (render-quadtree qt width height)
  (flomap-&gt;bitmap
   (build-flomap*
    4 width height
    (λ (x y) (quadtree-ref qt width height x y)))))</code></pre>
<p>As an example:</p>
<pre class="scheme"><code>&gt; (render-quadtree
   (quadtree '#(1 1 0 0)
             (quadtree '#(1 0 1 0) '#(1 0 0 1) '#(1 0 1 1) '#(1 1 0 1))
             '#(1 1 1 0)
             (quadtree '#(1 1 1 1) '#(1 0 0 0) '#(1 0 0 0) '#(1 1 1 1)))
   100 100)</code></pre>
<p><a data-toggle="lightbox" href="http://blog.jverkamp.com/2014/05/28/quadtree-image-compression/sample-quadtree.png"><img src="http://blog.jverkamp.com/2014/05/28/quadtree-image-compression/sample-quadtree.png" /></a></p>
<h2>Loading images as quadtrees</h2>
<p>Okay, next step. Loading an image. What we want for an image is the original (so we can calculate the error) and a quadtree storing both average colors for each region (which will be rendered) and the error (so we do not have to recalculate them). Something like this:</p>
<pre class="scheme"><code>(struct qtnode (region color error) #:transparent)
(struct qtimage (flomap nodes))</code></pre>
<p>(<code>qtimage</code> is not <code>#:transparent</code> since the <code>flomap</code> would display every single value... That takes a while to print out.)</p>
<p>That being said, when we first load an image, we're only going to have a single node representing the entire image. Still, we need an average and an error. So let's write that function first. Using the <code><a href="http://docs.racket-lang.org/search/index.html?q=median">median</a></code> function from <code><a href="http://docs.racket-lang.org/search/index.html?q=math/statistics">math/statistics</a></code>, we can find a good representation (another option would be the average). After that, we sum the difference along all channels (note: make sure to use <code>for*/sum</code> here, rather than <code>for/sum</code>...)</p>
<pre class="scheme"><code>; Calculate the average color within a region
(define (region-node fm r)
  (match-define (region top left width height) r)

  (define med
    (for/vector ([k (in-range 4)])
      (with-handlers ([exn? (λ _ (flomap-ref fm k left top))])
        (median &lt; (for/list ([x (in-range left (+ left width))]
                             [y (in-range top (+ top height))])
                    (flomap-ref fm k x y))))))

  (define err
    (for*/sum ([k (in-range 4)]
               [x (in-range left (+ left width))]
               [y (in-range top (+ top height))])
      (abs (- (flomap-ref fm k x y) (vector-ref med k)))))

  (qtnode r med err))</code></pre>
<p>Then you can load an image:</p>
<pre class="scheme"><code>; Load an image in preparation for quadtree splitting
(define (load-image path)
  (define fm (bitmap-&gt;flomap (read-bitmap path)))
  (define-values (width height) (flomap-size fm))
  (define r (region 0 0 width height))
  (define node (region-node fm r))
  (qtimage fm node))</code></pre>
<p>If we want to turn right around and render this image back out, we can do so by pulling out the color part of the quadtree nodes:</p>
<pre class="scheme"><code>; Render an image
(define (render-image img)
  (define-values (width height) (flomap-size (qtimage-flomap img)))
  (render-quadtree (quadtree-map qtnode-color (qtimage-nodes img)) width height))</code></pre>
<p>Given <code>pipes.jpg</code>:</p>
<p><a data-toggle="lightbox" href="http://blog.jverkamp.com/2014/05/28/quadtree-image-compression/pipes.jpg"><img src="http://blog.jverkamp.com/2014/05/28/quadtree-image-compression/pipes.jpg" /></a></p>
<pre class="scheme"><code>&gt; (render-image (load-image "pipes.jpg"))</code></pre>
<p><a data-toggle="lightbox" href="http://blog.jverkamp.com/2014/05/28/quadtree-image-compression/pipes-stage1.jpg"><img src="http://blog.jverkamp.com/2014/05/28/quadtree-image-compression/pipes-stage1.jpg" /></a></p>
<p>Not much to look at yet. We need to start splitting...</p>
<h2>Splitting quadtree images</h2>
<p>A lot of the hard work has already been done. What's left is two parts:</p>
<ol>
<li>Find the region with the largest error</li>
<li>Replace that node with four subnodes, calculating the median color and error for each</li>
</ol>
<p>Translated to code:</p>
<pre class="scheme"><code>; Given an image, split the region with the highest error
(define (split-image img)
  ; Find the maximum error
  (define max-error-node
    (quadtree-reduce
     (λ ns (car (sort ns (λ (na nb) (&gt; (qtnode-error na) (qtnode-error nb))))))
     (qtimage-nodes img)))

  ; Replace nodes with that error with their child nodes, calculating those errors
  (define fm (qtimage-flomap img))
  (qtimage
   fm
   (quadtree-map
    (λ (node)
      (cond
        [(eq? node max-error-node)
         (match-define (region t l w h) (qtnode-region node))
         (define w/2 (quotient w 2))
         (define h/2 (quotient h 2))
         (quadtree
          (let ([r (region t         l         w/2 h/2)]) (region-node fm r))
          (let ([r (region t         (+ l w/2) w/2 h/2)]) (region-node fm r))
          (let ([r (region (+ t h/2) l         w/2 h/2)]) (region-node fm r))
          (let ([r (region (+ t h/2) (+ l w/2) w/2 h/2)]) (region-node fm r)))]
        [else node]))
    (qtimage-nodes img))))</code></pre>
<p>The splitting code is a little ugly and could probably be factored out entirely into a <code>region</code> module all its own. So it goes. What's nice though is that we already have the <code>region-node</code> function, which will give us the color and error for a subnode.</p>
<p>Trying a few splits:</p>
<pre class="scheme"><code>&gt; (render-image (split-image (load-image "pipes.jpg")))</code></pre>
<p><a data-toggle="lightbox" href="http://blog.jverkamp.com/2014/05/28/quadtree-image-compression/pipes-stage2.jpg"><img src="http://blog.jverkamp.com/2014/05/28/quadtree-image-compression/pipes-stage2.jpg" /></a></p>
<pre class="scheme"><code>&gt; (render-image
   (for/fold ([img (load-image "pipes.jpg")]) ([i (in-range 5)])
     (split-image img)))</code></pre>
<p><a data-toggle="lightbox" href="http://blog.jverkamp.com/2014/05/28/quadtree-image-compression/pipes-stage5.jpg"><img src="http://blog.jverkamp.com/2014/05/28/quadtree-image-compression/pipes-stage5.jpg" /></a></p>
<pre class="scheme"><code>&gt; (render-image
   (for/fold ([img (load-image "pipes.jpg")]) ([i (in-range 1000)])
     (split-image img)))</code></pre>
<p><a data-toggle="lightbox" href="http://blog.jverkamp.com/2014/05/28/quadtree-image-compression/pipes-stage1000.jpg"><img src="http://blog.jverkamp.com/2014/05/28/quadtree-image-compression/pipes-stage1000.jpg" /></a></p>
<p>That's really starting to look good... But what if we want to watch the compression live?</p>
<h2>Rendering compression</h2>
<p>This is one of the things I really like about Racket. It really is "batteries included". In this case, we have a pre-built framework for updating and rendering images: <code><a href="http://docs.racket-lang.org/search/index.html?q=big-bang">big-bang</a></code> from <code><a href="http://docs.racket-lang.org/search/index.html?q=2htdp/universe">2htdp/universe</a></code> (among others). All we have to do is pass it an updating and drawing function (<code>render?</code> will allow us to save a GIF):</p>
<pre class="scheme"><code>; Progressively compress an image
(define (compress img)
  (define-values (width height) (flomap-size (qtimage-flomap img)))
  (define base-scene (empty-scene width height))
  (big-bang img
    [on-tick split-image]
    [to-draw (λ (img) (place-image (render-image img) (/ width 2) (/ height 2) base-scene))]
    [record? #t]))</code></pre>
<p>Bam:</p>
<pre class="scheme"><code>&gt; (compress (load-image "pipes.jpg"))</code></pre>
<p><a data-toggle="lightbox" href="http://blog.jverkamp.com/2014/05/28/quadtree-image-compression/pipes.gif"><img src="http://blog.jverkamp.com/2014/05/28/quadtree-image-compression/pipes.gif" /></a></p>
<pre class="scheme"><code>&gt; (compress (load-image "bigen.jpg"))</code></pre>
<p><a data-toggle="lightbox" href="http://blog.jverkamp.com/2014/05/28/quadtree-image-compression/bigben.gif"><img src="http://blog.jverkamp.com/2014/05/28/quadtree-image-compression/bigben.gif" /></a></p>
<pre class="scheme"><code>&gt; (compress (load-image "chess.jpg"))</code></pre>
<p><a data-toggle="lightbox" href="http://blog.jverkamp.com/2014/05/28/quadtree-image-compression/chess.gif"><img src="http://blog.jverkamp.com/2014/05/28/quadtree-image-compression/chess.gif" /></a></p>
<pre class="scheme"><code>&gt; (compress (load-image "flower.jpg"))</code></pre>
<p><a data-toggle="lightbox" href="http://blog.jverkamp.com/2014/05/28/quadtree-image-compression/flower.gif"><img src="http://blog.jverkamp.com/2014/05/28/quadtree-image-compression/flower.gif" /></a></p>
<p>And there you have it. I really like digging into alternative ways of representing data, particularly images. If you have any questions/comments, feel free to drop me a line below. Otherwise, the code is on GitHub as always: <a href="https://github.com/jpverkamp/small-projects/blob/master/blog/quadtree-compression.rkt">quadtree-compression.rkt</a>.</p>
                </div>
                <div class="entry-footnotes">
                        <div id="footnotes"><ol></ol></div>
                </div>

                <div id="disqus_thread"></div>
<script type="text/javascript">
var disqus_shortname = "jverkamp";
var disqus_title = "Quadtree image compression";
var disqus_url = "http://blog.jverkamp.com/2014/05/28/quadtree-image-compression/";
/* * * DON'T EDIT BELOW THIS LINE * * */
(function() {
  var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
  dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js';
  (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
})();
</script>
<noscript>Please enable JavaScript to view the <a href="http://disqus.com/?ref_noscript">comments powered by Disqus.</a></noscript>
<a href="http://disqus.com" class="dsq-brlink">comments powered by <span class="logo-disqus">Disqus</span></a>
        </article>

        <footer class="container" role="contentinfo">
                <nav class="navbar navbar-default" role="navigation"><ul class="nav navbar-nav nav-justified"><li><a href="http://blog.jverkamp.com/2014/05/23/amicable-chains">← Amicable chains</a></li><li><a href="http://blog.jverkamp.com/category/archives">Archives</a></li><li><a href="http://blog.jverkamp.com/2014/05/30/braille-unicode-pixelation">Braille unicode pixelation →</a></li></ul><ul class="nav navbar-nav nav-justified"><li><a href="http://blog.jverkamp.com/2014/05/23/amicable-chains">← Amicable chains</a></li><li><a href="http://blog.jverkamp.com/category/programming">Programming</a></li><li><a href="http://blog.jverkamp.com/2014/05/30/braille-unicode-pixelation">Braille unicode pixelation →</a></li></ul></nav>

                <div class="legal">
                        <a href="http://blog.jverkamp.com/feed/atom.xml">feed <img style="border: 0;" src="http://blog.jverkamp.com/rss.png" /></a><br />
                        All posts unless otherwise mentioned are licensed under <a rel="license" href="http://creativecommons.org/licenses/by-nc-sa/3.0/deed.en_US"><img alt="Creative Commons License" style="border-width:0" src="http://i.creativecommons.org/l/by-nc-sa/3.0/80x15.png" /></a><br />
                        Any source code unless otherwise mentioned is licensed under the <a href="http://directory.fsf.org/wiki/License:BSD_3Clause">3 clause BSD license</a>
                </div>
        </footer>

<script>
(function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
(i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
})(window,document,'script','//www.google-analytics.com/analytics.js','ga');

ga('create', 'UA-53688146-1', 'auto');
ga('send', 'pageview');
</script>
</body>
</html>