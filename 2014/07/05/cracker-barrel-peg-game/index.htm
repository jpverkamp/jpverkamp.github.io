<!DOCTYPE html>
<html>
<head>
        
        

        <title>Cracker Barrel Peg Game | jverkamp.com | John-Paul Verkamp</title>

        <script src="//ajax.googleapis.com/ajax/libs/jquery/1.11.0/jquery.min.js" defer></script>
        <script src="//code.jquery.com/ui/1.11.1/jquery-ui.min.js" defer></script>

        <link rel="stylesheet" href="//netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css" defer />
        <link rel="stylesheet" href="//netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap-theme.min.css" defer />
        <script src="//netdna.bootstrapcdn.com/bootstrap/3.1.1/js/bootstrap.min.js" defer></script>

        <link rel="stylesheet" href="//cdnjs.cloudflare.com/ajax/libs/ekko-lightbox/3.0.3a/ekko-lightbox.min.css" defer />
        <script src="//cdnjs.cloudflare.com/ajax/libs/ekko-lightbox/3.0.3a/ekko-lightbox.min.js" defer></script>

        <script src="//cdnjs.cloudflare.com/ajax/libs/jquery.transit/0.9.9/jquery.transit.min.js" defer></script>

        <!-- Highlight.js for syntax highlighting -->
        <link rel="stylesheet" href="/highlight/styles/obsidian.css" defer />
        <script src="/highlight/highlight.pack.js" defer></script>

        <!-- MathJax for LaTeX support -->
        <script src="//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML" defer></script>

        <!-- nanoGallery for Flickr Galleries -->
        <link rel="stylesheet" href="//cdnjs.cloudflare.com/ajax/libs/nanogallery/4.4.2/css/themes/light/nanogallery_light.css" defer />
        <script type="text/javascript" src="//cdnjs.cloudflare.com/ajax/libs/nanogallery/4.4.2/jquery.nanogallery.min.js" defer ></script>

        <!-- Pretty pretty fonts -->
        <link rel="stylesheet" type="text/css" href="//fonts.googleapis.com/css?family=Calligraffitti" defer />

        <!-- Any custom CSS or JS that I've written; this should be kept minimal -->
        <link rel="stylesheet" href="/custom.css" defer />
        <script src="/custom.js" defer></script>

        <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
        <link rel="alternate" type="application/atom+xml" title="jverkamp.com (Atom 2.0)" href="//blog.jverkamp.com/feed/" />
</head>
<body>
        <header class="container">
        <nav class="navbar navbar-default" role="navigation">
  <div class="container-fluid">
    <!-- Brand and toggle get grouped for better mobile display -->
    <div class="navbar-header">
      <button type="button" class="navbar-toggle" data-toggle="collapse" data-target="#bs-example-navbar-collapse-1">
        <span class="sr-only">Toggle navigation</span>
        <span class="icon-bar"></span>
        <span class="icon-bar"></span>
        <span class="icon-bar"></span>
      </button>
      <a class="navbar-brand" href="//blog.jverkamp.com"><span style="color: green;">jv</span>erkamp.com</a>
    </div>

    <!-- Collect the nav links, forms, and other content for toggling -->
    <div class="collapse navbar-collapse" id="bs-example-navbar-collapse-1">
      <ul class="nav navbar-nav"><li class="dropdown"><a href="//blog.jverkamp.com/category/archives" class="dropdown-toggle">Archives<span class="caret"></span></a><ul class="dropdown-menu"><li><a href="//blog.jverkamp.com/category/archives/2004">2004</a></li><li><a href="//blog.jverkamp.com/category/archives/2005">2005</a></li><li><a href="//blog.jverkamp.com/category/archives/2006">2006</a></li><li><a href="//blog.jverkamp.com/category/archives/2007">2007</a></li><li><a href="//blog.jverkamp.com/category/archives/2008">2008</a></li><li><a href="//blog.jverkamp.com/category/archives/2009">2009</a></li><li><a href="//blog.jverkamp.com/category/archives/2010">2010</a></li><li><a href="//blog.jverkamp.com/category/archives/2011">2011</a></li><li><a href="//blog.jverkamp.com/category/archives/2012">2012</a></li><li><a href="//blog.jverkamp.com/category/archives/2013">2013</a></li><li><a href="//blog.jverkamp.com/category/archives/2014">2014</a></li><li><a href="//blog.jverkamp.com/category/archives/2015">2015</a></li><li><a href="//blog.jverkamp.com/category/archives/2016">2016</a></li></ul></li><li class="dropdown"><a href="//blog.jverkamp.com/category/other" class="dropdown-toggle">Other<span class="caret"></span></a><ul class="dropdown-menu"><li><a href="//blog.jverkamp.com/category/other/board-game-reviews">Board Game Reviews</a></li><li><a href="//blog.jverkamp.com/category/other/book-reviews">Book Reviews</a></li><li><a href="//blog.jverkamp.com/category/other/cooking">Cooking</a></li><li><a href="//blog.jverkamp.com/category/other/movie-reviews">Movie Reviews</a></li></ul></li><li class="dropdown"><a href="//blog.jverkamp.com/category/photography" class="dropdown-toggle">Photography<span class="caret"></span></a><ul class="dropdown-menu"><li><a href="//blog.jverkamp.com/category/photography/dp-challenge">DP Challenge</a></li><li><a href="//blog.jverkamp.com/category/photography/photosets">Photosets</a></li><li><a href="//blog.jverkamp.com/category/photography/photosynth">Photosynth</a></li></ul></li><li class="dropdown"><a href="//blog.jverkamp.com/category/programming" class="dropdown-toggle">Programming<span class="caret"></span></a><ul class="dropdown-menu"><li><a href="//blog.jverkamp.com/category/programming/by-language">By Language</a></li><li><a href="//blog.jverkamp.com/category/programming/by-project">By Project</a></li><li><a href="//blog.jverkamp.com/category/programming/by-source">By Source</a></li><li><a href="//blog.jverkamp.com/category/programming/by-topic">By Topic</a></li><li><a href="//blog.jverkamp.com/category/programming/libraries">Libraries</a></li></ul></li><li class="dropdown"><a href="//blog.jverkamp.com/category/research" class="dropdown-toggle">Research<span class="caret"></span></a><ul class="dropdown-menu"><li><a href="//blog.jverkamp.com/category/research/by-topic">By Topic</a></li><li><a href="//blog.jverkamp.com/category/research/publications">Publications</a></li></ul></li><li class="dropdown"><a href="//blog.jverkamp.com/category/writing" class="dropdown-toggle">Writing<span class="caret"></span></a><ul class="dropdown-menu"><li><a href="//blog.jverkamp.com/category/writing/by-genre">By Genre</a></li><li><a href="//blog.jverkamp.com/category/writing/ideas">Ideas</a></li><li><a href="//blog.jverkamp.com/category/writing/nanowrimo">NaNoWriMo</a></li><li><a href="//blog.jverkamp.com/category/writing/novels">Novels</a></li><li><a href="//blog.jverkamp.com/category/writing/other">Other</a></li><li><a href="//blog.jverkamp.com/category/writing/short-stories">Short Stories</a></li><li><a href="//blog.jverkamp.com/category/writing/writing-excuses">Writing Excuses</a></li></ul></li></ul>

      <form action="//www.google.com/search" method="get" onSubmit="(function(obj){obj.q.value='site:blog.jverkamp.com '+obj.qfront.value;})(this)" class="navbar-form navbar-right" role="search">
        <div class="form-group">
          <input name="q" type="hidden" />
          <input name="qfront" type="text" class="form-control" placeholder="Search" />
          <button type="submit" class="btn btn-default" value="Search">Search</button>
        </p>
      </form>
    </div><!-- /.navbar-collapse -->
  </div><!-- /.container-fluid -->
</nav>
        </header>

        <article class="container">
                <header>
                        <h1 class="entry-title">Cracker Barrel Peg Game</h1>

                        <div class="entry-meta">
                                <span class="posted-on"><time class="entry-date" datetime="2014-07-05"><span class="year">2014</span> <span class="month">July</span> <span class="day">5</span></time></span>
                                <span class="tags"><ul class="tag-list list-inline"><li><a href="//blog.jverkamp.com/category/programming/by-topic/algorithms/backtracking">Backtracking</a></li><li><a href="//blog.jverkamp.com/category/programming/by-topic/games">Games</a></li><li><a href="//blog.jverkamp.com/category/programming/by-topic/graph-theory">Graph Theory</a></li><li><a href="//blog.jverkamp.com/category/programming/by-topic/algorithms/heuristics">Heuristics</a></li><li><a href="//blog.jverkamp.com/category/programming">Programming</a></li><li><a href="//blog.jverkamp.com/category/programming/by-language/racket">Racket</a></li><li><a href="//blog.jverkamp.com/category/programming/by-language/scheme">Scheme</a></li></ul></span>
                        </div>

                        <hr />
                </header>
                <div class="entry-content">
                        <p>Ever been to <a href="http://www.crackerbarrel.com/">Cracker Barrel</a>? Remember that <a href="http://shop.crackerbarrel.com/Peg-Game/dp/B0050PMMQA">peg game</a>? It seems that rather a few people are interested in how to solve it: <a href="https://www.google.com/?q=cracker+barrel+peg+game">Google</a>. Let's do that.</p>
<!--more-->
<p>Let's start with a bit of ground work:</p>
<pre class="scheme"><code>; Puzzles are represented as a 15 element vector (#t for pegs)
; but can be entered as a 15 bit integer (1 for pegs)
(struct puzzle (data) #:transparent)
(define (make-puzzle v)
  (cond
    [(and (integer? v) (&lt;= 0 v 32767))
     (puzzle (list-&gt;vector
              (map (curry eq? #\1)
                   (reverse (string-&gt;list (~a (number-&gt;string v 2)
                                              #:width 15
                                              #:align 'right
                                              #:pad-string "0"))))))]
    [(and (vector? v) (= 15 (vector-length v)))
     (puzzle v)]
    [(and (list? v) (length v 15))
     (puzzle (list-&gt;vector v))]))</code></pre>
<p>It's a bit heavier than it needs to be (in order to support multiple datatypes), but that saved me all sorts of time in testing. It's a lot easier to enter a puzzle like this:</p>
<pre class="scheme"><code>(make-puzzle #b111110010000000)</code></pre>
<p>Rather than:</p>
<pre class="scheme"><code>(make-puzzle '#(#f #f #f #f #f #f #f #t #f #f #t #t #t #t #t))</code></pre>
<p>(Note that the ordering is opposite. The highest bit is the last peg, while the first vector is the first peg. This is so that puzzle 1 is peg 1 and so on.)</p>
<p>Anyways.</p>
<p>Next, we need to be able to visualize what we're working with. You can always see the sequence of pegs, but without putting them in their proper triangular shape, it's a bit hard to tell what exactly is going on. So first, let's render a puzzle as text:</p>
<pre class="scheme"><code>; Render a puzzle to text
(define (render-text puzzle)
  (for ([row (in-range 1 6)])
    (display (~a "" #:width (* 2 (- 6 row))))
    (for ([col (in-range 1 (+ 1 row))])
      (define i (+ (* 1/2 row (- row 1)) col))
      (display (~a (if (vector-ref (puzzle-data puzzle) (- i 1)) i "") #:width 4)))
    (newline)))</code></pre>
<p><code><a href="http://docs.racket-lang.org/search/index.html?q=~a">~a</a></code> is rather handy for formatting like this, making sure that each peg (at least the ones still visible) is exactly four characters wide. The formula in the line defining <code>i</code> should look familiar: it's the sum of the first i integers. Neat.</p>
<pre class="scheme"><code>&gt; (render-text (make-puzzle (random (expt 2 15))))

        2
          5   6
    7   8   9   10
      12  13      15</code></pre>
<p>That's all well and good, but it's the 21st century. We should be able to make pretty pictures as well:</p>
<pre class="scheme"><code>; Render a puzzle to a bitmap
(define (render puzzle)
  (define (bit-set? i) (vector-ref (puzzle-data puzzle) (- i 1)))

  (define imgs
    (for/list ([row (in-range 1 6)])
      (for/list ([col (in-range 1 (+ 1 row))])
        (define i (+ (* 1/2 row (- row 1)) col))
        (define color (if (bit-set? i) "black" "gray"))
        (htdp:overlay (htdp:text (~a i) 12 color)
                      (htdp:circle 10 "outline" color)
                      (htdp:circle 12 "solid" "white")))))

  (define rows (map (λ (row) (if (= 1 (length row))
                                 (first row)
                                 (apply htdp:beside row)))
                    imgs))

  (apply htdp:above rows))</code></pre>
<p>That's a bit more complicated. The basic idea is straight forward enough. First, for each peg we're going to overlay the number as <code><a href="http://docs.racket-lang.org/search/index.html?q=text">text</a></code> on an outlined <code><a href="http://docs.racket-lang.org/search/index.html?q=circle">circle</a></code>. The second, white circle is in order to get a bit of spacing. We'll render each of these into nested lists, each of increasing length. Then we shove each row together with <code><a href="http://docs.racket-lang.org/search/index.html?q=beside">beside</a></code>, then the rows together with <code><a href="http://docs.racket-lang.org/search/index.html?q=above">above</a></code>. All that to make a picture something like this:</p>
<pre class="scheme"><code>&gt; (render (make-puzzle (random (expt 2 15))))</code></pre>
<p><a href="//blog.jverkamp.com/2014/07/05/cracker-barrel-peg-game/sample-render.png" data-toggle="lightbox"><img src="//blog.jverkamp.com/2014/07/05/cracker-barrel-peg-game/sample-render.png" /></a></p>
<p>Looks good! (And it's nice being able to see the locations where there currently isn't a peg as well).</p>
<p>Okay, so now that we have some framework set up, how are we going to attack this problem?</p>
<p>Well, the first thing we need is the ability to make a move. In this case, given two neighboring pegs, jump one over the other:</p>
<pre class="scheme"><code>; Given a peg to move from and the peg to move over, return the new puzzle state
(define (jump p ifrom iover)
  (define from-list '(1  1  2  2  3  3  4  4  4  5  5  6  6  7  8  11 12 13))
  (define over-list '(2  3  4  5  5  6  5  7  8  8  9  9  10 8  9  12 13 14))
  (define to-list   '(4  6  7  9  8  10 6  11 13 12 14 13 15 9  10 13 14 15))

  (for/first ([from (in-list (append from-list to-list))]
              [over (in-list (append over-list over-list))]
              [to   (in-list (append to-list from-list))]
              #:when (and (= from ifrom)
                          (= over iover)
                          (vector-ref (puzzle-data p) (- from 1))
                          (vector-ref (puzzle-data p) (- over 1))
                          (not (vector-ref (puzzle-data p) (- to 1)))))
    (let ([new-data (vector-copy (puzzle-data p))])
      (vector-set! new-data (- from 1) #f)
      (vector-set! new-data (- over 1) #f)
      (vector-set! new-data (- to   1) #t)
      (puzzle new-data))))</code></pre>
<p>That's a bit of an ugly function. Unfortunately, I'm not entirely sure how it could be made better. Still, it works. By virtue of <code><a href="http://docs.racket-lang.org/search/index.html?q=for/first">for/first</a></code>, we'll either get the new puzzle or <code>#f</code> if it's not a valid move.</p>
<p>Next, we take this function and map it over a puzzle in order to generate all possible next states. Something like this:</p>
<pre class="scheme"><code>; Get a list of all next states from a given puzzles
(define (next p)
  (filter identity
          (for*/list ([from (in-range 1 16)]
                      [over (in-range 1 16)])
            (jump p from over))))</code></pre>
<p>This one though, you should see a fairly easy way to optimize. Right now, no matter how many pegs there are in a puzzle, we're going to try every neighboring pair. <code>jump</code> can deal with the weird cases, but we shouldn't have to:</p>
<pre class="scheme"><code>; Get a list of all next states from a given puzzles
(define (next p)
  (filter identity
          (for*/list ([from (in-range 1 16)]
                      #:when (vector-ref (puzzle-data p) (- from 1))
                      [over (in-range 1 16)]
                      #:when (vector-ref (puzzle-data p) (- over 1)))
            (jump p from over))))</code></pre>
<p>That way, the further we get down the puzzle, the fewer cases we will check while still not duplicating <em>too</em> much of the code between the two.</p>
<p>Believe it or not... That's it. That's all we need:</p>
<pre class="scheme"><code>; Solve a puzzle using backtracking
(define (solve p)
  (cond
    [(= 1 (count p))
     (list p)]
    [else
     (let ([n (ormap solve (next p))])
       (and n (cons p n)))]))</code></pre>
<p><code>count</code> returns the number of pegs left on the current board:</p>
<pre class="scheme"><code>; Count how many pegs are left in a puzzle
(define (count p)
  (vector-length (vector-filter identity (puzzle-data p))))</code></pre>
<p>That's it. Give it any peg puzzle and it will solve it. Quickly too. On my machine, it might as well be instantaneous. So how does it work?</p>
<p>Two cases: Either we're done or we're not. If we're done, return the end state. Otherwise, we need to find a state we can move forward from. With <code>ormap</code>, we're going to try each in turn, returning the first thing that isn't <code>#f</code>. Since we're mapping <code>solve</code> (recurring) and almost making progress (<code>next</code> always has at least one less peg), we can rely on the recursion to do it's job. In this case, we'll either find a solution one step down (return that one) or not (check the next one).</p>
<p>Don't believe me? Let's check it out:</p>
<pre class="scheme"><code>&gt; (map render (solve (make-puzzle #b111111111111110)))</code></pre>
<p><a href="//blog.jverkamp.com/2014/07/05/cracker-barrel-peg-game/solve-01.png" data-toggle="lightbox"><img src="//blog.jverkamp.com/2014/07/05/cracker-barrel-peg-game/solve-01.png" /></a> <a href="//blog.jverkamp.com/2014/07/05/cracker-barrel-peg-game/solve-02.png" data-toggle="lightbox"><img src="//blog.jverkamp.com/2014/07/05/cracker-barrel-peg-game/solve-02.png" /></a> <a href="//blog.jverkamp.com/2014/07/05/cracker-barrel-peg-game/solve-03.png" data-toggle="lightbox"><img src="//blog.jverkamp.com/2014/07/05/cracker-barrel-peg-game/solve-03.png" /></a> <a href="//blog.jverkamp.com/2014/07/05/cracker-barrel-peg-game/solve-04.png" data-toggle="lightbox"><img src="//blog.jverkamp.com/2014/07/05/cracker-barrel-peg-game/solve-04.png" /></a> <a href="//blog.jverkamp.com/2014/07/05/cracker-barrel-peg-game/solve-05.png" data-toggle="lightbox"><img src="//blog.jverkamp.com/2014/07/05/cracker-barrel-peg-game/solve-05.png" /></a> <a href="//blog.jverkamp.com/2014/07/05/cracker-barrel-peg-game/solve-06.png" data-toggle="lightbox"><img src="//blog.jverkamp.com/2014/07/05/cracker-barrel-peg-game/solve-06.png" /></a> <a href="//blog.jverkamp.com/2014/07/05/cracker-barrel-peg-game/solve-07.png" data-toggle="lightbox"><img src="//blog.jverkamp.com/2014/07/05/cracker-barrel-peg-game/solve-07.png" /></a> <a href="//blog.jverkamp.com/2014/07/05/cracker-barrel-peg-game/solve-08.png" data-toggle="lightbox"><img src="//blog.jverkamp.com/2014/07/05/cracker-barrel-peg-game/solve-08.png" /></a> <a href="//blog.jverkamp.com/2014/07/05/cracker-barrel-peg-game/solve-09.png" data-toggle="lightbox"><img src="//blog.jverkamp.com/2014/07/05/cracker-barrel-peg-game/solve-09.png" /></a> <a href="//blog.jverkamp.com/2014/07/05/cracker-barrel-peg-game/solve-10.png" data-toggle="lightbox"><img src="//blog.jverkamp.com/2014/07/05/cracker-barrel-peg-game/solve-10.png" /></a> <a href="//blog.jverkamp.com/2014/07/05/cracker-barrel-peg-game/solve-11.png" data-toggle="lightbox"><img src="//blog.jverkamp.com/2014/07/05/cracker-barrel-peg-game/solve-11.png" /></a> <a href="//blog.jverkamp.com/2014/07/05/cracker-barrel-peg-game/solve-12.png" data-toggle="lightbox"><img src="//blog.jverkamp.com/2014/07/05/cracker-barrel-peg-game/solve-12.png" /></a> <a href="//blog.jverkamp.com/2014/07/05/cracker-barrel-peg-game/solve-13.png" data-toggle="lightbox"><img src="//blog.jverkamp.com/2014/07/05/cracker-barrel-peg-game/solve-13.png" /></a> <a href="//blog.jverkamp.com/2014/07/05/cracker-barrel-peg-game/solve-14.png" data-toggle="lightbox"><img src="//blog.jverkamp.com/2014/07/05/cracker-barrel-peg-game/solve-14.png" /></a></p>
<p>Flip the board over and it looks like we're genius. <img alt="smile" class="emoji" src="/emoji/smile.svg" /> Sweet.</p>
<p>That's all for today. I am working on a part two though. As a preview: If you take rotations and reflections into account, there are only four possible starting pegs (1, 2, 4, and 5). But it turns out that not all four are created equal--some are (relatively) easy to solve. Some are not.</p>
<p>If you'd like to check out the full source code (and possibly a preview for next time), you can do so on GitHub: <a href="https://github.com/jpverkamp/small-projects/blob/master/blog/pegs.rkt">pegs.rkt</a></p>
                </div>
                <div class="entry-footnotes">
                        <div id="footnotes"><ol></ol></div>
                </div>

                
        </article>

        <footer class="container" role="contentinfo">
                <nav class="navbar navbar-default" role="navigation"><ul class="nav navbar-nav nav-justified"><li><a href="//blog.jverkamp.com/2014/06/17/factor-trees">← Factor trees</a></li><li><a href="//blog.jverkamp.com/category/archives">Archives</a></li><li><a href="//blog.jverkamp.com/2014/07/09/cracker-barrel-peg-game-part-2">Cracker Barrel Peg Game, Part 2 →</a></li></ul><ul class="nav navbar-nav nav-justified"><li><a href="//blog.jverkamp.com/2014/06/17/factor-trees">← Factor trees</a></li><li><a href="//blog.jverkamp.com/category/programming">Programming</a></li><li><a href="//blog.jverkamp.com/2014/07/09/cracker-barrel-peg-game-part-2">Cracker Barrel Peg Game, Part 2 →</a></li></ul></nav>

                <div class="legal">
                        <a href="//blog.jverkamp.com/feed/atom.xml">feed <img style="border: 0;" src="//blog.jverkamp.com/rss.png" /></a><br />
                        All posts unless otherwise mentioned are licensed under <a rel="license" href="//creativecommons.org/licenses/by-nc-sa/3.0/deed.en_US"><img alt="Creative Commons License" style="border-width:0" src="//i.creativecommons.org/l/by-nc-sa/3.0/80x15.png" /></a><br />
                        Any source code unless otherwise mentioned is licensed under the <a href="//directory.fsf.org/wiki/License:BSD_3Clause">3 clause BSD license</a>
                </div>
        </footer>

<script>
(function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
(i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
m=s.getElementsByTagName(o)[0];a.defer=1;a.src=g;m.parentNode.insertBefore(a,m)
})(window,document,'script','//www.google-analytics.com/analytics.js','ga');

ga('create', 'UA-53688146-1', 'auto');
ga('send', 'pageview');
</script>
</body>
</html>