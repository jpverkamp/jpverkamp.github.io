<!DOCTYPE html>
<html>
<head>
        
        

        <title>Chess Puzzles 1: Get moving! | jverkamp.com | John-Paul Verkamp</title>

        <script src="//ajax.googleapis.com/ajax/libs/jquery/1.11.0/jquery.min.js"></script>

        <link rel="stylesheet" href="//netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css" />
        <link rel="stylesheet" href="//netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap-theme.min.css" />
        <script src="//netdna.bootstrapcdn.com/bootstrap/3.1.1/js/bootstrap.min.js"></script>

        <link rel="stylesheet" href="//cdnjs.cloudflare.com/ajax/libs/ekko-lightbox/3.0.3a/ekko-lightbox.min.css" />
        <script src="//cdnjs.cloudflare.com/ajax/libs/ekko-lightbox/3.0.3a/ekko-lightbox.min.js"></script>

        <script src="//cdnjs.cloudflare.com/ajax/libs/jquery.transit/0.9.9/jquery.transit.min.js"></script>

        <!-- Highlight.js for syntax highlighting -->
        <link rel="stylesheet" href="/highlight/styles/obsidian.css" />
        <script src="/highlight/highlight.pack.js"></script>

        <!-- MathJax for LaTeX support -->
        <script src="//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML"></script>

        <!-- nanoGallery for Flickr Galleries -->
        <link rel="stylesheet" href="//cdnjs.cloudflare.com/ajax/libs/nanogallery/4.4.2/css/themes/light/nanogallery_light.css" />
        <script type="text/javascript" src="//cdnjs.cloudflare.com/ajax/libs/nanogallery/4.4.2/jquery.nanogallery.min.js"></script>

        <!-- Any custom CSS or JS that I've written; this should be kept minimal -->
        <link rel="stylesheet" href="/custom.css" />
        <script src="/custom.js"></script>

        <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
        <link rel="alternate" type="application/atom+xml" title="jverkamp.com (Atom 2.0)" href="http://blog.jverkamp.com/feed/" />
</head>
<body>
        <header class="container">
        <nav class="navbar navbar-default" role="navigation">
  <div class="container-fluid">
    <!-- Brand and toggle get grouped for better mobile display -->
    <div class="navbar-header">
      <button type="button" class="navbar-toggle" data-toggle="collapse" data-target="#bs-example-navbar-collapse-1">
        <span class="sr-only">Toggle navigation</span>
        <span class="icon-bar"></span>
        <span class="icon-bar"></span>
        <span class="icon-bar"></span>
      </button>
      <a class="navbar-brand" href="http://blog.jverkamp.com"><span style="color: green;">jv</span>erkamp.com</a>
    </div>

    <!-- Collect the nav links, forms, and other content for toggling -->
    <div class="collapse navbar-collapse" id="bs-example-navbar-collapse-1">
      <ul class="nav navbar-nav"><li class="dropdown"><a href="http://blog.jverkamp.com/category/archives" class="dropdown-toggle">Archives<span class="caret"></span></a><ul class="dropdown-menu"><li><a href="http://blog.jverkamp.com/category/archives/2004">2004</a></li><li><a href="http://blog.jverkamp.com/category/archives/2005">2005</a></li><li><a href="http://blog.jverkamp.com/category/archives/2006">2006</a></li><li><a href="http://blog.jverkamp.com/category/archives/2007">2007</a></li><li><a href="http://blog.jverkamp.com/category/archives/2008">2008</a></li><li><a href="http://blog.jverkamp.com/category/archives/2009">2009</a></li><li><a href="http://blog.jverkamp.com/category/archives/2010">2010</a></li><li><a href="http://blog.jverkamp.com/category/archives/2011">2011</a></li><li><a href="http://blog.jverkamp.com/category/archives/2012">2012</a></li><li><a href="http://blog.jverkamp.com/category/archives/2013">2013</a></li><li><a href="http://blog.jverkamp.com/category/archives/2014">2014</a></li></ul></li><li class="dropdown"><a href="http://blog.jverkamp.com/category/other" class="dropdown-toggle">Other<span class="caret"></span></a><ul class="dropdown-menu"><li><a href="http://blog.jverkamp.com/category/other/board-game-reviews">Board Game Reviews</a></li><li><a href="http://blog.jverkamp.com/category/other/cooking">Cooking</a></li><li><a href="http://blog.jverkamp.com/category/other/movie-reviews">Movie Reviews</a></li></ul></li><li class="dropdown"><a href="http://blog.jverkamp.com/category/photography" class="dropdown-toggle">Photography<span class="caret"></span></a><ul class="dropdown-menu"><li><a href="http://blog.jverkamp.com/category/photography/dp-challenge">DP Challenge</a></li><li><a href="http://blog.jverkamp.com/category/photography/photosets">Photosets</a></li><li><a href="http://blog.jverkamp.com/category/photography/photosynth">Photosynth</a></li></ul></li><li class="dropdown"><a href="http://blog.jverkamp.com/category/programming" class="dropdown-toggle">Programming<span class="caret"></span></a><ul class="dropdown-menu"><li><a href="http://blog.jverkamp.com/category/programming/by-language">By Language</a></li><li><a href="http://blog.jverkamp.com/category/programming/by-project">By Project</a></li><li><a href="http://blog.jverkamp.com/category/programming/by-source">By Source</a></li><li><a href="http://blog.jverkamp.com/category/programming/by-topic">By Topic</a></li><li><a href="http://blog.jverkamp.com/category/programming/libraries">Libraries</a></li></ul></li><li class="dropdown"><a href="http://blog.jverkamp.com/category/research" class="dropdown-toggle">Research<span class="caret"></span></a><ul class="dropdown-menu"><li><a href="http://blog.jverkamp.com/category/research/by-topic">By Topic</a></li><li><a href="http://blog.jverkamp.com/category/research/publications">Publications</a></li></ul></li><li class="dropdown"><a href="http://blog.jverkamp.com/category/writing" class="dropdown-toggle">Writing<span class="caret"></span></a><ul class="dropdown-menu"><li><a href="http://blog.jverkamp.com/category/writing/by-genre">By Genre</a></li><li><a href="http://blog.jverkamp.com/category/writing/nanowrimo">NaNoWriMo</a></li><li><a href="http://blog.jverkamp.com/category/writing/novels">Novels</a></li><li><a href="http://blog.jverkamp.com/category/writing/other">Other</a></li><li><a href="http://blog.jverkamp.com/category/writing/short-stories">Short Stories</a></li></ul></li></ul>

      <form action="http://www.google.com/search" method="get" onSubmit="(function(obj){obj.q.value='site:blog.jverkamp.com '+obj.qfront.value;})(this)" class="navbar-form navbar-right" role="search">
        <div class="form-group">
          <input name="q" type="hidden" />
          <input name="qfront" type="text" class="form-control" placeholder="Search" />
          <button type="submit" class="btn btn-default" value="Search">Search</button>
        </p>
      </form>
    </div><!-- /.navbar-collapse -->
  </div><!-- /.container-fluid -->
</nav>
        </header>

        <article class="container">
                <header>
                        <h1 class="entry-title">Chess Puzzles 1: Get moving!</h1>

                        <div class="entry-meta">
                                <span class="posted-on"><time class="entry-date" datetime="2014-08-21"><span class="year">2014</span> <span class="month">Aug</span> <span class="day">21</span></time></span>
                                <span class="tags"><ul class="tag-list list-inline"><li><a href="http://blog.jverkamp.com/category/programming/by-topic/chess">Chess</a></li><li><a href="http://blog.jverkamp.com/category/programming">Programming</a></li><li><a href="http://blog.jverkamp.com/category/programming/by-language/scheme">Scheme</a></li><li><a href="http://blog.jverkamp.com/category/programming/by-language/racket">Racket</a></li></ul></span>
                        </div>

                        <hr />
                </header>
                <div class="entry-content">
                        <p>Here's something I haven't done much<span class="footnote"><sup><a href="#footnote-1">[1]</a></sup></span>: chess puzzles! I'm still not sure entirely what I think about the game in general. There is certainly quite a lot of strategy, which I like, but to really get good at chess, there's also some amount of memorizing openings and closings. That's something I'm a little less thrilled with.</p>
<p>Still, it's the perfect sort of came to work out programming exercises with. It's a game of <a href="https://en.wikipedia.org/wiki/perfect_information">perfect information</a>, so you don't have to deal with what a player knows and doesn't. The pieces have well defined, regular moves<span class="footnote"><sup><a href="#footnote-2">[2]</a></sup></span> There's a fairly intense branching factor, but not insurmountable--<a href="https://en.wikipedia.org/wiki/Deep_Blue (chess computer)">Deep Blue</a> proved that.</p>
<p>Anyways, enough chatter. Let's play some chess!</p>
<!--more-->
<p>Okay, first things first, we're going to have to lay some ground work. Despite how straight forward chess pieces are, it will still take a bit of effort to turn that into something that a computer can deal with. So first, let's work out a way of defining chess piece movement.</p>
<p>Here, I'm going a little ambitious. I want to be able to support arbitrary <a href="https://en.wikipedia.org/wiki/fairy_chess pieces">fairy chess pieces</a>. In addition to the more standard pieces, we have  strictly more powerful pieces like the Princess (Knight + Bishop) or the Empress (Knight + Rook). Or we have alternatives, like the Camel (like the Knight, only 3:1 instead of 2:1). Or the Nightrider, which moves like the Knight, but keeps on going. I want to be able to support all of these...</p>
<p>Okay, first things first. A basic struct for points and another to use for a <code>move-sequence</code>:</p>
<pre class="scheme"><code>; Points, with associated methods; can also be used as offsets
(struct pt (x y) #:transparent)

; Move sequences for a piece; used for special flags (eg initial, capturing)
(struct move-sequence (tag moves) #:transparent)</code></pre>
<p>The tags are mostly used for Pawns or the like, since they move one way when capturing and another when not. The rest is going to be a list of moves. So for something like the Rook, we'll have something like this:</p>
<pre class="scheme"><code>(list
 (move-sequence (set) (list (pt 0 1) (pt 0 2) (pt 0 3) (pt 0 4) (pt 0 5) (pt 0 6) (pt 0 7) (pt 0 8)))
 (move-sequence (set) (list (pt -1 0) (pt -2 0) (pt -3 0) (pt -4 0) (pt -5 0) (pt -6 0) (pt -7 0) (pt -8 0)))
 (move-sequence (set) (list (pt 1 0) (pt 2 0) (pt 3 0) (pt 4 0) (pt 5 0) (pt 6 0) (pt 7 0) (pt 8 0)))
 (move-sequence (set) (list (pt 0 -1) (pt 0 -2) (pt 0 -3) (pt 0 -4) (pt 0 -5) (pt 0 -6) (pt 0 -7) (pt 0 -8))))</code></pre>
<p>When we get around to it, the idea is we can run down any of these lists until we run into something. If we run into an enemy piece, we'll allow the move; if not, we won't. Similarly, the Pawn:</p>
<pre class="scheme"><code>(list
 (move-sequence (set 'initial-only 'non-capture) (list (pt 0 2)))
 (move-sequence (set 'non-capture) (list (pt 0 1)))
 (move-sequence (set 'capture-only) (list (pt -1 1)))
 (move-sequence (set 'capture-only) (list (pt 1 1))))</code></pre>
<p>On the other hand though, these are kind of a pain to type in by hand. Let's make some helper functions. First, basic movement:</p>
<pre class="scheme"><code>; A sequence of moves along a specific direction
; Distance is either not specified (exactly 1)
;   a number (exactly that number), n (unlimited)
;   or a range (min/max inclusive)
; Direction is either from the list '(* + &gt; &lt; &lt;&gt; = &gt;= &lt;= X X&gt; X&lt;)
;   or a list of possible single offsets
(define move
  (case-lambda
    [(direction)
     (move 1 1 direction)]
    [(distance direction)
     (if (eq? distance 'n)
         (move 1        +inf.0   direction)
         (move distance distance direction))]
    [(minimum-distance maximum-distance direction)
     (for/list ([offset (in-list (offsets-by-direction direction))])
       (move-sequence
        (set)
        (for*/list ([distance (in-range minimum-distance (+ maximum-distance 1))]
                    [p (in-value (pt* distance offset))])
                    #:break (or (&gt; (abs (pt-x p)) (current-board-size))
                                (&gt; (abs (pt-y p)) (current-board-size)))
          p)))]))</code></pre>
<p>Basically, we have three different ways of specifying moves:</p>
<ul>
    <li><code>(move direction)</code> - moves one square in a given direction (like a pawn)</li>
    <li><code>(move distance direction)</code> - moves either exactly a specific number of tiles or an unlimited number (if <code>distance</code> is <code>n</code>)</li>
    <li><code>(move minimum-distance maximum-distance direction)</code> - a range of movement, so you can move between the minimum and maximum inclusive but no more or less</li>
</ul>
<p>But what does direction mean? If it's specified as a point, that's straight forward enough, but still, we want to be able to specify these things more simply. Let's take a page out of <a href="https://en.wikipedia.org/wiki/Fairy_chess_piece#Parlett.27s_movement_notation">Parlett's movement notation</a>. Specifically the direction specifications:</p>
<ul>
        <li><code>*</code> – orthogonally or diagonally (all eight possible directions)</li>
    <li><code>+</code> – orthogonally (four possible directions)</li>
    <li><code>&gt;</code> – orthogonally forwards</li>
    <li><code>&lt;</code> – orthogonally backwards</li>
    <li><code>&lt;&gt;</code> – orthogonally forwards and backwards</li>
    <li><code>=</code> – orthogonally sideways (used here instead of Parlett's divide symbol.)</li>
    <li><code>&gt;=</code> – orthogonally forwards or sideways</li>
    <li><code>&lt;=</code> – orthogonally backwards or sideways</li>
    <li><code>X</code> – diagonally (four possible directions)</li>
    <li><code>X&gt;</code> – diagonally forwards</li>
    <li><code>X&lt;</code> – diagonally backwards</li>
</ul>
<p>Turn it into code:</p>
<pre class="scheme"><code>; Return a sequence of all possible offsets for a given direction
; Order specified front to back, left to right
(define (offsets-by-direction direction)
  `(,@(if (member direction '(*                  X X&gt;   )) (list (pt -1  1)) '())
    ,@(if (member direction '(* + &gt;   &lt;&gt;   &gt;=           )) (list (pt  0  1)) '())
    ,@(if (member direction '(*                  X X&gt;   )) (list (pt  1  1)) '())
    ,@(if (member direction '(* +        = &gt;= &lt;=        )) (list (pt -1  0)) '())
    ,@(if (member direction '(* +        = &gt;= &lt;=        )) (list (pt  1  0)) '())
    ,@(if (member direction '(*                  X    X&lt;)) (list (pt -1 -1)) '())
    ,@(if (member direction '(* +   &lt; &lt;&gt;      &lt;=        )) (list (pt  0 -1)) '())
    ,@(if (member direction '(*                  X    X&lt;)) (list (pt  1 -1)) '())
    ,@(if (pt? direction)   (list direction) '())
    ,@(if (list? direction) direction        '())))</code></pre>
<p>We're going to set it out now: <code>pt</code> is specified as <code>x, y</code>, not <code>row, column</code>. That's something that will bite you if you don't pay attention, so make sure to be consistent.</p>
<p>That's enough to define most of the pieces we want.</p>
<pre class="scheme"><code>(define King   (move  1 '*))
(define Queen  (move 'n '*))
(define Rook   (move 'n '+))
(define Bishop (move 'n 'X))</code></pre>
<p>Two are still left: the Knight and the Pawn. For the Knight, we need to specify something that will let us jump in arbitrary directions:</p>
<pre class="scheme"><code>; Make a leaper from a given offset
(define (leaper xΔ yΔ)
  (set-&gt;list
   (list-&gt;set
    `(,(pt    xΔ     yΔ )
      ,(pt (- xΔ)    yΔ )
      ,(pt    xΔ  (- yΔ))
      ,(pt (- xΔ) (- yΔ))
      ,(pt    yΔ     xΔ )
      ,(pt (- yΔ)    xΔ )
      ,(pt    yΔ  (- xΔ))
      ,(pt (- yΔ) (- xΔ))))))</code></pre>
<p>The <code>list-&gt;set</code> and set-&gt;list` calls are to avoid duplicates. Otherwise, it's every combination of leaps in a given ratio. So if you want to define a Knight:</p>
<pre class="scheme"><code>(define Knight (move 1 (leaper 1 2)))</code></pre>
<p>If you want to define the Nightrider though, it's just as simple:</p>
<pre class="scheme"><code>(define Nightrider (move 'n (leaper 1 2)))</code></pre>
<p>And... that leaves us the Pawn. It's funny how perhaps the simplest of the pieces is the most complicated to define. But if you think about it, the behavior is also the longest to describe. You can move two spaces on the first move, one space any other move, but only capture diagonally. Something like this:</p>
<pre class="scheme"><code>(define Pawn
  (alternatives
   (on-non-capture (on-initial (move 2 '&gt;)))
   (on-non-capture             (move 1 '&gt;))
   (on-capture                 (move 1 'X&gt;))))</code></pre>
<p>What's that? We don't have <code>on-non-capture</code> / <code>on-capture</code> functions defined? Well, all we have to do is set the <code>tag</code> field we defined earlier. Something like this:</p>
<pre class="scheme"><code>; Set special flags for move lists
(define (set-flag flag movelist*)
  (for/list ([movelist (in-list movelist*)])
    (match-define (move-sequence flags moves) movelist)
    (move-sequence (set-add flags flag) moves)))

(define (on-initial     movelist*) (set-flag 'initial-only movelist*))
(define (on-capture     movelist*) (set-flag 'capture-only movelist*))
(define (on-non-capture movelist*) (set-flag 'non-capture  movelist*))
(define (as-locust      movelist*) (set-flag 'locust       movelist*))</code></pre>
<p>Locusts are something we'll get to eventually. Those are pieces that move like checkers: they capture by jumping. Other than that, we just need the <code>alternatives</code>:</p>
<pre class="scheme"><code>; Merge multiple move lists by allowing any of them
(define (alternatives . list*)
  (apply append list*))</code></pre>
<p>Feels like cheating. And there we have the pawn:</p>
<pre class="scheme"><code>&gt; Pawn
(list
 (move-sequence (set 'initial-only 'non-capture) (list (pt 0 2)))
 (move-sequence (set 'non-capture) (list (pt 0 1)))
 (move-sequence (set 'capture-only) (list (pt -1 1)))
 (move-sequence (set 'capture-only) (list (pt 1 1))))</code></pre>
<p>Sweet.</p>
<p>Okay, what about other kinds of pieces. Say... the Aanca. That's a piece that moves one square orthogonally than diagonally outwards. It's a bit complicated by the fact that we don't want to double back with the diagonals and we need one more function. A sequencer:</p>
<pre class="scheme"><code>; Merge multiple move lists by doing one and then the next, each relative to the previous endpoint
(define (and-then first* rest*)
  (for*/list ([first (in-list first*)]
              [rest  (in-list rest*)])
    (match-define (move-sequence first-flags first-moves) first)
    (match-define (move-sequence rest-flags  rest-moves)  rest)
    (define offset (last first-moves))
    (move-sequence
     (set-union first-flags rest-flags)
     (append first-moves (map (λ (each) (pt+ offset each)) rest-moves)))))</code></pre>
<p>Now we can have the Aanca:</p>
<pre class="scheme"><code>; Move one square like a rook, followed by any number of spaces diagonally outwards
(define Aanca
  (alternatives
   (and-then (move 1 '&gt;) (move 'n 'X&gt;))
   (and-then (move 1 (pt 1 0))  (alternatives (move 'n (pt  1 -1))
                                              (move 'n (pt  1  1))))
   (and-then (move 1 '&lt;) (move 'n 'X&lt;))
   (and-then (move 1 (pt -1 0)) (alternatives (move 'n (pt -1 -1))
                                              (move 'n (pt -1  1))))))</code></pre>
<p>And that's it. We can define a whole pile of the other <a href="https://en.wikipedia.org/wiki/Fairy_chess pieces">Fairy chess pieces</a>:</p>
<pre class="scheme"><code>(define Adjutant     (move  1 '&lt;&gt;))
(define Advisor      (move  1 'X))
(define Alfil        (move  1 (leaper 2 2)))
(define Afilrider    (move 'n (leaper 2 2)))
(define Alibaba      (alternatives (move 'n (leaper 2 2)) (move 'n (leaper 0 2))))
(define Amazon       (alternatives (move 1 (leaper 1 2)) (move 'n '*)))
(define Antelope     (move  1 (leaper 3 4)))
(define Archbishop   (alternatives (move 'n 'X) (move 1 (leaper 1 2))))
(define ArrowPawn    (alternatives (on-non-capture (move 1 '+))
                                   (on-capture (move 1 'X))))
(define Backslider   (move  1 '&lt;))
(define Banshee      (alternatives (move 'n 'X) (move 'n (leaper 1 2))))
(define Bede         (alternatives (move 'n 'X) (move 'n (leaper 0 2))))
(define BerolinaPawn (alternatives (on-non-capture (on-initial (move 2 'X&gt;)))
                                   (on-non-capture (move 1 'X&gt;))
                                   (on-capture (move 1 '&gt;))))
...</code></pre>
<p>(Feel free to submit a <a href="https://github.com/jpverkamp/chess-puzzles/pulls">pull request</a> if you want to add more. :))</p>
<p>Oof. That's a lot of code. I think that's about enough for today.</p>
<p>You can see the full code on GitHub: <a href="https://github.com/jpverkamp/chess-puzzles">jpverkamp/chess-puzzles</a>. Warning though: I'm a bit further ahead code-wise than blog-wise. That way lies spoilers...</p>
<p>Speaking of which:</p>
<p><a data-toggle="lightbox" href="http://blog.jverkamp.com/2014/08/21/chess-puzzles-1-get-moving/chessboard.png"><img src="http://blog.jverkamp.com/2014/08/21/chess-puzzles-1-get-moving/chessboard.png" /></a></p>
<p>:)</p>
                </div>
                <div class="entry-footnotes">
                        <div id="footnotes"><ol><li><a name="footnote-1"></a>Okay, <a href="http://blog.jverkamp.com/category/programming/by-topic/chess">a little</a>.</li><li><a name="footnote-2"></a>For the moment, we'll ignore castling and <a href="https://en.wikipedia.org/wiki/en_passant">en passant</a>.</li></ol></div>
                </div>

                <div id="disqus_thread"></div>
<script type="text/javascript">
var disqus_shortname = "jverkamp";
var disqus_title = "Chess Puzzles 1: Get moving!";
var disqus_url = "http://blog.jverkamp.com/2014/08/21/chess-puzzles-1-get-moving/";
/* * * DON'T EDIT BELOW THIS LINE * * */
(function() {
  var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
  dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js';
  (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
})();
</script>
<noscript>Please enable JavaScript to view the <a href="http://disqus.com/?ref_noscript">comments powered by Disqus.</a></noscript>
<a href="http://disqus.com" class="dsq-brlink">comments powered by <span class="logo-disqus">Disqus</span></a>
        </article>

        <footer class="container" role="contentinfo">
                <nav class="navbar navbar-default" role="navigation"><ul class="nav navbar-nav nav-justified"><li><a href="http://blog.jverkamp.com/2014/08/13/minimal-palindromic-base">← Minimal palindromic base</a></li><li><a href="http://blog.jverkamp.com/category/archives">Archives</a></li></ul><ul class="nav navbar-nav nav-justified"><li><a href="http://blog.jverkamp.com/2014/08/13/minimal-palindromic-base">← Minimal palindromic base</a></li><li><a href="http://blog.jverkamp.com/category/programming">Programming</a></li></ul></nav>

                <div class="legal">
                        <a href="http://blog.jverkamp.com/feed/atom.xml">feed <img style="border: 0;" src="http://blog.jverkamp.com/rss.png" /></a><br />
                        All posts unless otherwise mentioned are licensed under <a rel="license" href="http://creativecommons.org/licenses/by-nc-sa/3.0/deed.en_US"><img alt="Creative Commons License" style="border-width:0" src="http://i.creativecommons.org/l/by-nc-sa/3.0/80x15.png" /></a><br />
                        Any source code unless otherwise mentioned is licensed under the <a href="http://directory.fsf.org/wiki/License:BSD_3Clause">3 clause BSD license</a>
                </div>
        </footer>

<script>
(function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
(i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
})(window,document,'script','//www.google-analytics.com/analytics.js','ga');

ga('create', 'UA-53688146-1', 'auto');
ga('send', 'pageview');
</script>
</body>
</html>