<!DOCTYPE html>
<html>
<head>
        
        

        <title>Graph coloring | jverkamp.com | John-Paul Verkamp</title>

        <script src="//ajax.googleapis.com/ajax/libs/jquery/1.11.0/jquery.min.js"></script>

        <script src="//code.jquery.com/ui/1.11.1/jquery-ui.min.js"></script>

        <link rel="stylesheet" href="//netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css" />
        <link rel="stylesheet" href="//netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap-theme.min.css" />
        <script src="//netdna.bootstrapcdn.com/bootstrap/3.1.1/js/bootstrap.min.js"></script>

        <link rel="stylesheet" href="//cdnjs.cloudflare.com/ajax/libs/ekko-lightbox/3.0.3a/ekko-lightbox.min.css" />
        <script src="//cdnjs.cloudflare.com/ajax/libs/ekko-lightbox/3.0.3a/ekko-lightbox.min.js"></script>

        <script src="//cdnjs.cloudflare.com/ajax/libs/jquery.transit/0.9.9/jquery.transit.min.js"></script>

        <!-- Highlight.js for syntax highlighting -->
        <link rel="stylesheet" href="/highlight/styles/obsidian.css" />
        <script src="/highlight/highlight.pack.js"></script>

        <!-- MathJax for LaTeX support -->
        <script src="//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML"></script>

        <!-- nanoGallery for Flickr Galleries -->
        <link rel="stylesheet" href="//cdnjs.cloudflare.com/ajax/libs/nanogallery/4.4.2/css/themes/light/nanogallery_light.css" />
        <script type="text/javascript" src="//cdnjs.cloudflare.com/ajax/libs/nanogallery/4.4.2/jquery.nanogallery.min.js"></script>

        <!-- Any custom CSS or JS that I've written; this should be kept minimal -->
        <link rel="stylesheet" href="/custom.css" />
        <script src="/custom.js"></script>

        <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
        <link rel="alternate" type="application/atom+xml" title="jverkamp.com (Atom 2.0)" href="http://blog.jverkamp.com/feed/" />
</head>
<body>
        <header class="container">
        <nav class="navbar navbar-default" role="navigation">
  <div class="container-fluid">
    <!-- Brand and toggle get grouped for better mobile display -->
    <div class="navbar-header">
      <button type="button" class="navbar-toggle" data-toggle="collapse" data-target="#bs-example-navbar-collapse-1">
        <span class="sr-only">Toggle navigation</span>
        <span class="icon-bar"></span>
        <span class="icon-bar"></span>
        <span class="icon-bar"></span>
      </button>
      <a class="navbar-brand" href="http://blog.jverkamp.com"><span style="color: green;">jv</span>erkamp.com</a>
    </div>

    <!-- Collect the nav links, forms, and other content for toggling -->
    <div class="collapse navbar-collapse" id="bs-example-navbar-collapse-1">
      <ul class="nav navbar-nav"><li class="dropdown"><a href="http://blog.jverkamp.com/category/archives" class="dropdown-toggle">Archives<span class="caret"></span></a><ul class="dropdown-menu"><li><a href="http://blog.jverkamp.com/category/archives/2004">2004</a></li><li><a href="http://blog.jverkamp.com/category/archives/2005">2005</a></li><li><a href="http://blog.jverkamp.com/category/archives/2006">2006</a></li><li><a href="http://blog.jverkamp.com/category/archives/2007">2007</a></li><li><a href="http://blog.jverkamp.com/category/archives/2008">2008</a></li><li><a href="http://blog.jverkamp.com/category/archives/2009">2009</a></li><li><a href="http://blog.jverkamp.com/category/archives/2010">2010</a></li><li><a href="http://blog.jverkamp.com/category/archives/2011">2011</a></li><li><a href="http://blog.jverkamp.com/category/archives/2012">2012</a></li><li><a href="http://blog.jverkamp.com/category/archives/2013">2013</a></li><li><a href="http://blog.jverkamp.com/category/archives/2014">2014</a></li></ul></li><li class="dropdown"><a href="http://blog.jverkamp.com/category/other" class="dropdown-toggle">Other<span class="caret"></span></a><ul class="dropdown-menu"><li><a href="http://blog.jverkamp.com/category/other/board-game-reviews">Board Game Reviews</a></li><li><a href="http://blog.jverkamp.com/category/other/cooking">Cooking</a></li><li><a href="http://blog.jverkamp.com/category/other/movie-reviews">Movie Reviews</a></li></ul></li><li class="dropdown"><a href="http://blog.jverkamp.com/category/photography" class="dropdown-toggle">Photography<span class="caret"></span></a><ul class="dropdown-menu"><li><a href="http://blog.jverkamp.com/category/photography/dp-challenge">DP Challenge</a></li><li><a href="http://blog.jverkamp.com/category/photography/photosets">Photosets</a></li><li><a href="http://blog.jverkamp.com/category/photography/photosynth">Photosynth</a></li></ul></li><li class="dropdown"><a href="http://blog.jverkamp.com/category/programming" class="dropdown-toggle">Programming<span class="caret"></span></a><ul class="dropdown-menu"><li><a href="http://blog.jverkamp.com/category/programming/by-language">By Language</a></li><li><a href="http://blog.jverkamp.com/category/programming/by-project">By Project</a></li><li><a href="http://blog.jverkamp.com/category/programming/by-source">By Source</a></li><li><a href="http://blog.jverkamp.com/category/programming/by-topic">By Topic</a></li><li><a href="http://blog.jverkamp.com/category/programming/libraries">Libraries</a></li></ul></li><li class="dropdown"><a href="http://blog.jverkamp.com/category/research" class="dropdown-toggle">Research<span class="caret"></span></a><ul class="dropdown-menu"><li><a href="http://blog.jverkamp.com/category/research/by-topic">By Topic</a></li><li><a href="http://blog.jverkamp.com/category/research/publications">Publications</a></li></ul></li><li class="dropdown"><a href="http://blog.jverkamp.com/category/writing" class="dropdown-toggle">Writing<span class="caret"></span></a><ul class="dropdown-menu"><li><a href="http://blog.jverkamp.com/category/writing/by-genre">By Genre</a></li><li><a href="http://blog.jverkamp.com/category/writing/nanowrimo">NaNoWriMo</a></li><li><a href="http://blog.jverkamp.com/category/writing/novels">Novels</a></li><li><a href="http://blog.jverkamp.com/category/writing/other">Other</a></li><li><a href="http://blog.jverkamp.com/category/writing/short-stories">Short Stories</a></li></ul></li></ul>

      <form action="http://www.google.com/search" method="get" onSubmit="(function(obj){obj.q.value='site:blog.jverkamp.com '+obj.qfront.value;})(this)" class="navbar-form navbar-right" role="search">
        <div class="form-group">
          <input name="q" type="hidden" />
          <input name="qfront" type="text" class="form-control" placeholder="Search" />
          <button type="submit" class="btn btn-default" value="Search">Search</button>
        </p>
      </form>
    </div><!-- /.navbar-collapse -->
  </div><!-- /.container-fluid -->
</nav>
        </header>

        <article class="container">
                <header>
                        <h1 class="entry-title">Graph coloring</h1>

                        <div class="entry-meta">
                                <span class="posted-on"><time class="entry-date" datetime="2014-01-15"><span class="year">2014</span> <span class="month">Jan</span> <span class="day">15</span></time></span>
                                <span class="tags"><ul class="tag-list list-inline"><li><a href="http://blog.jverkamp.com/category/programming/by-topic/data-structures">Data Structures</a></li><li><a href="http://blog.jverkamp.com/category/programming/by-topic/graph-theory">Graph Theory</a></li><li><a href="http://blog.jverkamp.com/category/programming/by-topic/data-structures/graphs">Graphs</a></li><li><a href="http://blog.jverkamp.com/category/programming/by-topic/mathematics">Mathematics</a></li><li><a href="http://blog.jverkamp.com/category/programming">Programming</a></li><li><a href="http://blog.jverkamp.com/category/programming/by-language/racket">Racket</a></li><li><a href="http://blog.jverkamp.com/category/programming/by-language/scheme">Scheme</a></li></ul></span>
                        </div>

                        <hr />
                </header>
                <div class="entry-content">
                        <p>Here's <a href="http://www.reddit.com/r/dailyprogrammer/comments/1tj0kl/122313_challenge_130_hard_coloring_frances/">another one</a> from /r/dailyprogrammer:</p>
<blockquote>... Your goal is to color a map of these regions with two requirements: 1) make sure that each adjacent department do not share a color, so you can clearly distinguish each department, and 2) minimize these numbers of colors.</blockquote>
<p>Essentially, <a href="https://en.wikipedia.org/wiki/graph_coloring">graph coloring</a>.</p>
<!--more-->
<p>Of course we'll go ahead and use the <a href="http://blog.jverkamp.com/2014/01/14/graph-radius">yesterday's post</a>. The input format is a little different this time, where each line contains a node then all of the neighbors, but that shouldn't be an issue. We just need a slightly different <code>read-graph</code> function:</p>
<pre class="scheme"><code>; Given a string or input port, read a graph
; First line is number of following lines
; The rest of the lines have a node id than one or more ids of that node's neighbors
(define (read-graph [str/in (current-input-port)])
  (define in (if (string? str/in) (open-input-string str/in) str/in))
  (define node-count (read in))

  (define g (unweighted-graph/undirected '()))

  (for* ([i (in-range node-count)]
         [line (in-lines in)])
    (define nums (map string-&gt;number (string-split line)))
    (when (&gt; (length nums) 1)
      (for ([n (in-list (rest nums))])
        (add-edge! g (first nums) n))))

  g)</code></pre>
<p>After that, we have to figure out what strategy we want to use to color the graph. It turns out that even determining how many colors the best coloring would need is hard<span class="footnote"><sup><a href="#footnote-1">[1]</a></sup></span>. That means that a perfect solution is going to be slow, especially as the problem gets bigger. So how about instead we start out with a very basic <a href="https://en.wikipedia.org/wiki/greedy_algorithm">greedy algorithm</a> and go from there.</p>
<p>Idea the first: Iterate through the nodes of the graph, coloring each one in turn. Use the first available color that hasn't already been assigned.</p>
<pre class="scheme"><code>; Assign a color given a graph, color hash, and node
(define (assign-first-color! g cs n)
  (for/first ([i (in-naturals)]
              #:unless
              (member i (map (λ (n) (hash-ref cs n #f))
                               (neighbors g n))))
      (hash-set! cs n i)))

; Basic greedy coloring: color each node in turn with the first available color
(define (greedy-coloring g [node-order (in-vertices g)])
  (define colors (make-hash))

  ; For each node, try each color
  ; for/first will bail as soon as it is execute once
  (for ([n (in-list node-order)])
    (assign-first-color! g colors n))

  colors)</code></pre>
<p>There's a bit of voodoo magic in the first method, but basically I'm using <code>for/first</code> to short circuit the loop. Previously, I've done much the same thing with <code>let/ec</code>, but this feels more 'Rackety'. Essentially, we run through the colors (represented as numbers) until we find one that isn't a <code>member</code> of the list of all neighboring colors. As soon as we see that, we assign the color and bail out of the loop.</p>
<p>The second function takes the graph and a node ordering (which defaults to whatever is being internally stored in the graph) and repeatedly uses the assignment function to color nodes. To test it out, let's use that same Butterfly graph as yesterday:</p>
<p><a data-toggle="lightbox" href="http://blog.jverkamp.com/2014/01/15/graph-coloring/butterfly.png"><img src="http://blog.jverkamp.com/2014/01/15/graph-coloring/butterfly.png" /></a></p>
<p>Assigning the nodes left to right then top to bottom, we have:</p>
<pre class="scheme"><code>&gt; (define butterfly (read-graph "
5
1 2 3
2 1 3
3 1 2 4 5
4 3 5
5 3 4
"))

&gt; (greedy-coloring butterfly)
'#hash((5 . 1) (4 . 0) (3 . 2) (2 . 1) (1 . 0))</code></pre>
<p><a data-toggle="lightbox" href="http://blog.jverkamp.com/2014/01/15/graph-coloring/butterfly-greedy.png"><img src="http://blog.jverkamp.com/2014/01/15/graph-coloring/butterfly-greedy.png" /></a></p>
<p>So we assigned the central node a color (3) and then each side two colors (0/1). For this particular case, it turns out that's actually optimal. But we can come up with a graph where a simple greedy coloring doesn't work:</p>
<pre class="scheme"><code>&gt; (define loop (read-graph "
6
1 4 6
2 3 5
3 2 6
4 1 5
5 2 4
6 1 3
"))

&gt; (greedy-coloring loop)
'#hash((6 . 2) (5 . 2) (4 . 1) (3 . 1) (2 . 0) (1 . 0))</code></pre>
<p><a data-toggle="lightbox" href="http://blog.jverkamp.com/2014/01/15/graph-coloring/loop-greedy.png"><img src="http://blog.jverkamp.com/2014/01/15/graph-coloring/loop-greedy.png" /></a></p>
<p>Here, we have three different colors for each of the pairs. The problem is, it's fairly obvious that there should be a two coloring. Just color every other node:</p>
<p><a data-toggle="lightbox" href="http://blog.jverkamp.com/2014/01/15/graph-coloring/loop-random.png"><img src="http://blog.jverkamp.com/2014/01/15/graph-coloring/loop-random.png" /></a></p>
<p>So how should we do it? Well one interesting thing about the greedy coloring is that while the default node order doesn't give an optimal coloring, there does exist an ordering that does<span class="footnote"><sup><a href="#footnote-2">[2]</a></sup></span>. So how about we try a bunch of random orderings and take the best? Something like this:</p>
<pre class="scheme"><code>; Try a bunch of random colorings, keeping the best
(define (random-coloring g #:iterations [iterations 1e6])

  (define-values (coloring count)
    (for/fold ([best-coloring #f] [best-count +inf.0])
              ([i (in-range iterations)])
      (define new-coloring (greedy-coloring g (shuffle (in-vertices g))))
      (define new-count (set-count (list-&gt;set (hash-values new-coloring))))

      (if (&lt; new-count best-count)
          (values new-coloring new-count)
          (values best-coloring best-count))))

  coloring)</code></pre>
<p>Give it a try:</p>
<pre class="scheme"><code>&gt; (random-coloring loop #:iterations 100)
'#hash((6 . 1) (5 . 0) (4 . 1) (3 . 0) (2 . 1) (1 . 0))</code></pre>
<p>That's pretty shiny. With just a hundred random trials, we've found a two coloring. Granted, there are only 720 possible permutations for this particularly graph (<span>\( 6! \)</span>), but you could play with the number of iterations.</p>
<p>Still, we should be able to do better.</p>
<p><a href="http://www.reddit.com/r/dailyprogrammer/comments/1tj0kl/122313_challenge_130_hard_coloring_frances/ceb58ch">One interesting comment</a> from the original problem brings up some work from <a href="https://en.wikipedia.org/wiki/Daniel_Brélaz">Daniel Brélaz</a>. Essentially, you repeatedly pick the node that has the most already colored neighbors (those will be the hardest to color), breaking ties by the most uncolored neighbors (most likely to need a new color). The way I'll be implementing that is by assigning a 'brélaz-number' to each node:<div>$$ brelaz(n) = |G| coloredNeighbors(n) + uncoloredNeighbors(n) $$</div>Basically, we have a two digit number, using the size of the graph as the base. If that doesn't make sense, we could certainly make a more direct two stage sorting function, but I think it's sort of elegant. :)</p>
<p>Anyways, here's the entire function:</p>
<pre class="scheme"><code>; Use a Brélaz coloring:
;   Choose the vertex with the most colored neighbors,
;   breaking ties by most uncolored neighbors
(define (brélaz-coloring g)
  (define colors (make-hash))

  ; Used to break ties as mentioned above
  (define (count-colored-neighbors n)
    (length (filter (curry hash-has-key? colors) (neighbors g n))))

  (define (count-uncolored-neighbors n)
    (length (filter (negate (curry hash-has-key? colors)) (neighbors g n))))

  (define graph-size (length (in-vertices g)))
  (define (brélaz-number n)
    (+ (* (count-colored-neighbors n) graph-size)
       (count-uncolored-neighbors n)))

  ; Each time, color the node with the highest current brélaz-number (see above)
  (for ([i (in-range graph-size)])
    (assign-first-color!
     g
     colors
     (first
      (sort
       (filter (negate (curry hash-has-key? colors)) (in-vertices g))
       (λ (n1 n2) (&gt; (brélaz-number n1) (brélaz-number n2)))))))

  colors)

(define brelaz-coloring brélaz-coloring)</code></pre>
<p>How does that do on the previous problem?</p>
<pre class="scheme"><code>&gt; (brélaz-coloring loop)
'#hash((6 . 1) (5 . 0) (4 . 1) (3 . 0) (2 . 1) (1 . 0))</code></pre>
<p><a data-toggle="lightbox" href="http://blog.jverkamp.com/2014/01/15/graph-coloring/loop-brelaz.png"><img src="http://blog.jverkamp.com/2014/01/15/graph-coloring/loop-brelaz.png" /></a></p>
<p>Much better, although either runs quickly enough that on my machine at least you can't even tell the difference. It will make a difference on much bigger graphs though. For example, let's try running the various scans on the actual original problem (a coloring of French regions, available <a href="http://blog.jverkamp.com/2014/01/15/graph-coloring/france.txt">here</a>):</p>
<pre class="scheme"><code>&gt; (define france (with-input-from-file "france.txt" read-graph))
&gt; (greedy-coloring france)
'#hash((46 . 4) (29 . 1) (12 . 3) (72 . 4) (89 . 5) (94 . 4) (79 . 4)
       (11 . 2) (26 . 4) (41 . 3) (56 . 2) (78 . 3) (95 . 4) (27 . 2)
       (10 . 1) (57 . 0) (40 . 2) (92 . 2) (77 . 3) (43 . 4) (58 . 4)
        (9 . 1) (24 . 3) (76 . 1) (93 . 1) (59 . 3) (42 . 2) (25 . 3)
        (8 . 2)  (7 . 3) (22 . 0) (37 . 0) (52 . 3) (82 . 2) (67 . 3)
       (23 . 3)  (6 . 2) (53 . 0) (36 . 1) (66 . 0) (83 . 1) (39 . 1)
       (54 . 2)  (5 . 2) (80 . 2) (65 . 2) (55 . 1) (38 . 1) (21 . 0)
        (4 . 0) (64 . 0) (81 . 1) (86 . 3) (71 . 3)  (3 . 1) (18 . 0)
       (33 . 1) (48 . 0) (70 . 2) (87 . 0) (19 . 2)  (2 . 1) (49 . 2)
       (32 . 1) (84 . 2) (69 . 0) (35 . 1) (50 . 2)  (1 . 2) (16 . 1)
       (68 . 1) (85 . 1) (51 . 0) (34 . 0) (17 . 0) (15 . 1) (30 . 1)
       (45 . 2) (60 . 0) (90 . 0) (75 . 0) (31 . 0) (14 . 0) (61 . 1)
       (44 . 0) (74 . 1) (91 . 1)  (0 . 0) (47 . 0) (62 . 0) (13 . 0)
       (28 . 0) (88 . 0) (73 . 0) (63 . 0))</code></pre>
<p><a data-toggle="lightbox" href="http://blog.jverkamp.com/2014/01/15/graph-coloring/france-greedy.png"><img src="http://blog.jverkamp.com/2014/01/15/graph-coloring/france-greedy.png" /></a></p>
<p>A little messy down there towards the bottom, and not that easy to tell how many colors we have. Looks like six. Let's go ahead and write a function to tell us how many we actually used:</p>
<pre class="scheme"><code>; Calculate the chromatic number of a graph, potentially given a coloring function
(define (chromatic-number g #:coloring-function [coloring perfect-coloring])
  (add1 (apply max (hash-values (coloring g)))))</code></pre>
<p>With the greedy coloring algorithm:</p>
<pre class="scheme"><code>&gt; (chromatic-number france #:coloring-function greedy-coloring)
6</code></pre>
<p>Hmm. Let's see if Brélaz can do better:</p>
<p><a data-toggle="lightbox" href="http://blog.jverkamp.com/2014/01/15/graph-coloring/france-brelaz.png"><img src="http://blog.jverkamp.com/2014/01/15/graph-coloring/france-brelaz.png" /></a></p>
<pre class="scheme"><code>&gt; (chromatic-number france #:coloring-function brélaz-coloring)
4</code></pre>
<p>That's much better! And given the <a href="https://en.wikipedia.org/wiki/four_color theorem">four color theorem</a><span class="footnote"><sup><a href="#footnote-3">[3]</a></sup></span>, that should be an upper bound. Unfortunately, it doesn't seem that the random coloring is doing any better (at least with my random number generator). Even with 100,000 iterations, the best that it found was 5.</p>
<p>But... what if we want to do it perfectly? Well, if we go through <em>every</em> coloring, we're guaranteed to find a correctly solution. Of course in <a href="https://en.wikipedia.org/wiki/Big_O notation">Big-oh</a>, that's <span>\( O(n!) \)</span> which basically is as good as forever... Still, we might as well write the code<footnote>Plus it gives me an excuse to play with Racket's <code><a href="http://docs.racket-lang.org/search/index.html?q=generators">generators</a></code>!). :)</p>
<pre class="scheme"><code>; Try every possible coloring (this is crazy slow)
(define (perfect-coloring g)
  ; Return all permutations of a given list as a sequence
  (define (in-permutations ls)
    (local-require racket/generator)
    (in-generator
     (let loop ([ls ls] [acc '()])
       (cond
         [(null? ls)
          (yield acc)]
         [else
          (for ([a (in-list ls)])
            (loop (remove a ls) (cons a acc)))]))))

  ; Try each coloring in turn
  (define-values (coloring count)
    (for/fold ([best-coloring #f] [best-count +inf.0])
              ([coloring-order (in-permutations (in-vertices g))])

      (define new-coloring (greedy-coloring g coloring-order))
      (define new-count (set-count (list-&gt;set (hash-values new-coloring))))

      (if (&lt; new-count best-count)
          (values new-coloring new-count)
          (values best-coloring best-count))))

  coloring)</code></pre>
<p>Basically, we use a <code><a href="http://docs.racket-lang.org/search/index.html?q=generator">generator</a></code> to create all of the permutations recursively. With that, we keep going until we have a best coloring. For the loop or butterfly, it works fine:</p>
<pre class="scheme"><code>&gt; (chromatic-number loop #:coloring-function perfect-coloring)
2
&gt; (chromatic-number butterfly #:coloring-function perfect-coloring)
3</code></pre>
<p>Anything bigger... be prepared for a wait.</p>
<p>And that's pretty much it. I did want to show off one more neat bit of code, designed to output graph files in the format Graphviz expects in order to generate all of the visualizations on this page. Pretty neat stuff and fairly easy to write:</p>
<pre class="scheme"><code>; Output a graph in graphviz / dot format, potentially with coloring
(define (graphviz g
                  #:coloring-function [coloring #f]
                  #:horizontal [horizontal #f]
                  #:save-as-png [save-as-png #f])
  ; Generate the dot file
  (define dot-file
    (with-output-to-string
      (thunk
        (printf "graph G {\n")

        ; Prefer horizontal layout to vertical
        (when horizontal
          (printf "\trankdir=LR;\n"))

        ; Color nodes using evenly spaced HSV colors
        (when coloring
          (define colors (coloring g))
          (define color-count (add1 (apply max (hash-values colors))))

          (for ([(node color) (in-hash colors)])
            (printf "\t~a [color=\"~a 1.0 1.0\"];\n"
                    node
                    (~a #:max-width 5 (exact-&gt;inexact (/ color color-count))))))

        ; Write out all edges (directional, so only if sorted)
        (for ([edge (in-edges g)])
          (when (&lt; (first edge) (second edge))
            (printf "\t~a -- ~a;\n" (first edge) (second edge))))

        (printf "}\n"))))

  ; Either save via buffer file or just return the dot file text
  (cond
    [save-as-png
     (with-output-to-file #:exists 'replace "output.dot" (thunk (display dot-file)))
     (system (format "dot output.dot -Kneato -Tpng -s0.5 -o ~a" save-as-png))]
    [else
     dot-file]))</code></pre>
<p>If you don't supply a <code>#:save-as-png</code> parameter, you get the graph. Something like this:</p>
<pre class="scheme"><code>&gt; (display (graphviz butterfly #:coloring-function brelaz-coloring))
graph G {
        1 [color="0.333 1.0 1.0"];
        2 [color="0.666 1.0 1.0"];
        3 [color="0.0 1.0 1.0"];
        4 [color="0.333 1.0 1.0"];
        5 [color="0.666 1.0 1.0"];
        1 -- 2;
        1 -- 3;
        2 -- 3;
        3 -- 4;
        3 -- 5;
        4 -- 5;
}</code></pre>
<p>That's one of the things I love about the HSV color space. You can just evenly divide the H parameter and you'll get a bunch of unique colors.</p>
<p>And there you have it. Graph coloring / visualization. I think it's one of my favorite branches of mathematics. There are just so many interesting things you can do with graphs.</p>
<p>The source code is on GitHub, if you'd like to check it out: <a href="https://github.com/jpverkamp/small-projects/blob/master/blog/graph-coloring.rkt">graph-coloring.rkt</a></p>
                </div>
                <div class="entry-footnotes">
                        <div id="footnotes"><ol><li><a name="footnote-1"></a>Technically, <a href="https://en.wikipedia.org/wiki/NP-complete">NP-complete</a>, as noted in <a href="https://en.wikipedia.org/wiki/Karp's_1972 list of 21 NP-complete problems">Karp's 21 NP-complete problems</a></li><li><a name="footnote-2"></a>Exercise for the reader: prove this :)</li><li><a name="footnote-3"></a>And assuming that there aren't any discontinuous regions, which I don't think is actually the case...</li></ol></div>
                </div>

                <div id="disqus_thread"></div>
<script type="text/javascript">
var disqus_shortname = "jverkamp";
var disqus_title = "Graph coloring";
var disqus_url = "http://blog.jverkamp.com/2014/01/15/graph-coloring/";
/* * * DON'T EDIT BELOW THIS LINE * * */
(function() {
  var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
  dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js';
  (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
})();
</script>
<noscript>Please enable JavaScript to view the <a href="http://disqus.com/?ref_noscript">comments powered by Disqus.</a></noscript>
<a href="http://disqus.com" class="dsq-brlink">comments powered by <span class="logo-disqus">Disqus</span></a>
        </article>

        <footer class="container" role="contentinfo">
                <nav class="navbar navbar-default" role="navigation"><ul class="nav navbar-nav nav-justified"><li><a href="http://blog.jverkamp.com/2014/01/14/graph-radius">← Graph radius</a></li><li><a href="http://blog.jverkamp.com/category/archives">Archives</a></li><li><a href="http://blog.jverkamp.com/2014/01/27/factoring-factorials">Factoring factorials →</a></li></ul><ul class="nav navbar-nav nav-justified"><li><a href="http://blog.jverkamp.com/2014/01/14/graph-radius">← Graph radius</a></li><li><a href="http://blog.jverkamp.com/category/programming">Programming</a></li><li><a href="http://blog.jverkamp.com/2014/01/27/factoring-factorials">Factoring factorials →</a></li></ul></nav>

                <div class="legal">
                        <a href="http://blog.jverkamp.com/feed/atom.xml">feed <img style="border: 0;" src="http://blog.jverkamp.com/rss.png" /></a><br />
                        All posts unless otherwise mentioned are licensed under <a rel="license" href="http://creativecommons.org/licenses/by-nc-sa/3.0/deed.en_US"><img alt="Creative Commons License" style="border-width:0" src="http://i.creativecommons.org/l/by-nc-sa/3.0/80x15.png" /></a><br />
                        Any source code unless otherwise mentioned is licensed under the <a href="http://directory.fsf.org/wiki/License:BSD_3Clause">3 clause BSD license</a>
                </div>
        </footer>

<script>
(function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
(i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
})(window,document,'script','//www.google-analytics.com/analytics.js','ga');

ga('create', 'UA-53688146-1', 'auto');
ga('send', 'pageview');
</script>
</body>
</html>