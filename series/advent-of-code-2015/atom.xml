<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Advent of Code 2015 on jverkamp.com</title>
    <link>https://blog.jverkamp.com/series/advent-of-code-2015/</link>
    <description>Recent content in Advent of Code 2015 on jverkamp.com</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 25 Dec 2015 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://blog.jverkamp.com/series/advent-of-code-2015/atom.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Advent of Code: Day 25</title>
      <link>https://blog.jverkamp.com/2015/12/25/advent-of-code-day-25/</link>
      <pubDate>Fri, 25 Dec 2015 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2015/12/25/advent-of-code-day-25/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://adventofcode.com/2015/day/25&#34;&gt;Source&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Part 1:&lt;/strong&gt; Take the relation:&lt;/p&gt;

&lt;div class=&#34;latex-block&#34;&gt;F(n) = \left\{\begin{matrix}
20151225 &amp; \textrm{if}\ n = 1 \\
252533F(n-1) \mod 33554393 &amp; \textrm{otherwise}
\end{matrix}\right.&lt;/div&gt;


&lt;p&gt;Arrange the values according to &lt;a href=&#34;https://en.wikipedia.org/wiki/Cantor%27s%20diagonal%20argument&#34;&gt;Cantor&amp;#39;s diagonal argument&lt;/a&gt;. Find the value at a specific cell.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Advent of Code: Day 24</title>
      <link>https://blog.jverkamp.com/2015/12/24/advent-of-code-day-24/</link>
      <pubDate>Thu, 24 Dec 2015 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2015/12/24/advent-of-code-day-24/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://adventofcode.com/2015/day/24&#34;&gt;Source&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Part 1:&lt;/strong&gt; Split a list of integers into three groups of equal sum. Find the grouping such that the smallest group has the least items, breaking ties by the smallest product for that group.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Advent of Code: Day 23</title>
      <link>https://blog.jverkamp.com/2015/12/23/advent-of-code-day-23/</link>
      <pubDate>Wed, 23 Dec 2015 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2015/12/23/advent-of-code-day-23/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://adventofcode.com/2015/day/23&#34;&gt;Source&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Part 1:&lt;/strong&gt; Create a simple virtual machine with two registers (&lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt;, non-negative integers) and six instructions:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;hlf (a|b)&lt;/code&gt; - divide the given register by half, round down&lt;/li&gt;
&lt;li&gt;&lt;code&gt;tpl (a|b)&lt;/code&gt; - triple the given register&lt;/li&gt;
&lt;li&gt;&lt;code&gt;inc (a|b)&lt;/code&gt; - add 1 to the given register&lt;/li&gt;
&lt;li&gt;&lt;code&gt;jmp [+-]\d+&lt;/code&gt; - jump forward/backwards by the given number of instructions&lt;/li&gt;
&lt;li&gt;&lt;code&gt;jie (a|b), [+-]\d+&lt;/code&gt; - if the given register is even, jump&lt;/li&gt;
&lt;li&gt;&lt;code&gt;jio (a|b), [+-]\d+&lt;/code&gt; - if the given register equals one, jump&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>Advent of Code: Day 22</title>
      <link>https://blog.jverkamp.com/2015/12/22/advent-of-code-day-22/</link>
      <pubDate>Tue, 22 Dec 2015 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2015/12/22/advent-of-code-day-22/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://adventofcode.com/2015/day/22&#34;&gt;Source&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Part 1:&lt;/strong&gt; Simulate an RPG mage battle; finding the winning solution using the least mana. See the &lt;a href=&#34;http://adventofcode.com/2015/day/22&#34;&gt;original writeup&lt;/a&gt; for more details.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Advent of Code: Day 21</title>
      <link>https://blog.jverkamp.com/2015/12/21/advent-of-code-day-21/</link>
      <pubDate>Mon, 21 Dec 2015 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2015/12/21/advent-of-code-day-21/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://adventofcode.com/2015/day/21&#34;&gt;Source&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Part 1:&lt;/strong&gt; Given a shop full of weapons (buy exactly one), armor (buy zero or one), and rings (buy 0, 1, or 2), determine the set of items that will defeat a given enemy for the minimum cost (see the &lt;a href=&#34;http://adventofcode.com/2015/day/21&#34;&gt;original writeup&lt;/a&gt; for more details).&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Advent of Code: Day 20</title>
      <link>https://blog.jverkamp.com/2015/12/20/advent-of-code-day-20/</link>
      <pubDate>Sun, 20 Dec 2015 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2015/12/20/advent-of-code-day-20/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://adventofcode.com/2015/day/20&#34;&gt;Source&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Part 1:&lt;/strong&gt; &lt;em&gt;P(n)&lt;/em&gt; is defined such that for each number &lt;em&gt;i&lt;/em&gt;, add &lt;em&gt;10i&lt;/em&gt; to any number divisible by &lt;em&gt;i&lt;/em&gt;. Find the first value &lt;em&gt;n&lt;/em&gt; such that &lt;em&gt;P(n)&lt;/em&gt; is at least a given target number.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Advent of Code: Day 19</title>
      <link>https://blog.jverkamp.com/2015/12/19/advent-of-code-day-19/</link>
      <pubDate>Sat, 19 Dec 2015 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2015/12/19/advent-of-code-day-19/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://adventofcode.com/2015/day/19&#34;&gt;Source&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Part 1:&lt;/strong&gt; Given a list of list of string replacements and an input string, determine how many unique output strings are possible after one step.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Advent of Code: Day 18</title>
      <link>https://blog.jverkamp.com/2015/12/18/advent-of-code-day-18/</link>
      <pubDate>Fri, 18 Dec 2015 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2015/12/18/advent-of-code-day-18/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://adventofcode.com/2015/day/18&#34;&gt;Source&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Part 1:&lt;/strong&gt; Simulate &lt;a href=&#34;https://en.wikipedia.org/wiki/Conway%27s%20Game%20of%20Life&#34;&gt;Conway&amp;#39;s Game of Life&lt;/a&gt;. Count how many lights are on after 100 iterations.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Advent of Code: Day 17</title>
      <link>https://blog.jverkamp.com/2015/12/17/advent-of-code-day-17/</link>
      <pubDate>Thu, 17 Dec 2015 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2015/12/17/advent-of-code-day-17/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://adventofcode.com/2015/day/17&#34;&gt;Source&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Part 1:&lt;/strong&gt; Given a list of containers of varying sizes and a total volume to contain, determine how many different combinations of containers match exactly the given volume.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Advent of Code: Day 16</title>
      <link>https://blog.jverkamp.com/2015/12/16/advent-of-code-day-16/</link>
      <pubDate>Wed, 16 Dec 2015 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2015/12/16/advent-of-code-day-16/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://adventofcode.com/2015/day/16&#34;&gt;Source&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Part 1:&lt;/strong&gt; Given a list of target values of the form:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;children: 3
cats: 7
samoyeds: 2&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And a list of &amp;lsquo;Aunt Sues&amp;rsquo;, each with known values:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;Sue 1: children: 1, cars: 8, vizslas: 7
Sue 2: akitas: 10, perfumes: 10, children: 5
Sue 3: cars: 5, pomeranians: 4, vizslas: 1&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Determine which Sue has no unset but matching values.&lt;/p&gt;

&lt;p&gt;For example, Sue 1 is invalid because &lt;code&gt;children&lt;/code&gt; is 1 versus 3 and Sue 2 because &lt;code&gt;children&lt;/code&gt; is 5 versus 3. Given only the values above, Sue 3 would be valid since there are no contradictions.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Advent of Code: Day 15</title>
      <link>https://blog.jverkamp.com/2015/12/15/advent-of-code-day-15/</link>
      <pubDate>Tue, 15 Dec 2015 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2015/12/15/advent-of-code-day-15/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://adventofcode.com/2015/day/15&#34;&gt;Source&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Part 1:&lt;/strong&gt; Input is a list of ingredients of the form:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;Frosting: capacity 4, durability -2, flavor 0, texture 0, calories 5
Candy: capacity 0, durability 5, flavor -1, texture 0, calories 8&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;A recipe score is a product of the positive quantity scores (ignoring calories), where each quantity score is the product of the quantity and that product for each product.&lt;/p&gt;

&lt;p&gt;For example, 4 Frosting and 2 Candy above, would have a score of of &lt;code&gt;-2 * 4 + 5 * 2 = 2&lt;/code&gt; for durability and &lt;code&gt;0 * 4 + -1 * 2 = -2&lt;/code&gt; (and thus ignored as we only accept positive scores) for a total thus far of 2.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Advent of Code: Day 14</title>
      <link>https://blog.jverkamp.com/2015/12/14/advent-of-code-day-14/</link>
      <pubDate>Mon, 14 Dec 2015 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2015/12/14/advent-of-code-day-14/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://adventofcode.com/2015/day/14&#34;&gt;Source&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Part 1:&lt;/strong&gt; Given a list of running patterns of the form &lt;code&gt;Comet can fly 14 km/s for 10 seconds, but then must rest for 127 seconds.&lt;/code&gt;, determine who will be in the lead after &lt;code&gt;2503&lt;/code&gt; seconds.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Advent of Code: Day 13</title>
      <link>https://blog.jverkamp.com/2015/12/13/advent-of-code-day-13/</link>
      <pubDate>Sun, 13 Dec 2015 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2015/12/13/advent-of-code-day-13/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://adventofcode.com/2015/day/13&#34;&gt;Source&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Part 1:&lt;/strong&gt; Given a list of seating preferences of the form &lt;code&gt;Alice would gain 54 happiness units by sitting next to Bob.&lt;/code&gt; find the seating arrangement which maximizes total happiness.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Advent of Code: Day 12</title>
      <link>https://blog.jverkamp.com/2015/12/12/advent-of-code-day-12/</link>
      <pubDate>Sat, 12 Dec 2015 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2015/12/12/advent-of-code-day-12/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://adventofcode.com/2015/day/12&#34;&gt;Source&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Part 1:&lt;/strong&gt; Sum all integer values in a &lt;a href=&#34;https://en.wikipedia.org/wiki/JSON&#34;&gt;JSON&lt;/a&gt; object.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Advent of Code: Day 11</title>
      <link>https://blog.jverkamp.com/2015/12/11/advent-of-code-day-11/</link>
      <pubDate>Fri, 11 Dec 2015 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2015/12/11/advent-of-code-day-11/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://adventofcode.com/2015/day/11&#34;&gt;Source&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Part 1:&lt;/strong&gt; Find the next string in &lt;a href=&#34;https://en.wikipedia.org/wiki/Lexicographical_order&#34;&gt;Lexicographical_order&lt;/a&gt; that matches these rules:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Must contain three neighboring, ascending letters (&lt;code&gt;ghi&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Must not contain any of the letters &lt;code&gt;i&lt;/code&gt;, &lt;code&gt;o&lt;/code&gt;, or &lt;code&gt;l&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Must contain two distinct pairs of letters&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>Advent of Code: Day 10</title>
      <link>https://blog.jverkamp.com/2015/12/10/advent-of-code-day-10/</link>
      <pubDate>Thu, 10 Dec 2015 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2015/12/10/advent-of-code-day-10/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://adventofcode.com/2015/day/10&#34;&gt;Source&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Part 1:&lt;/strong&gt; Repeat a &lt;a href=&#34;https://en.wikipedia.org/wiki/Look-and-say%20sequence&#34;&gt;Look-and-say sequence&lt;/a&gt; 40 times. Return the length.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Advent of Code: Day 9</title>
      <link>https://blog.jverkamp.com/2015/12/09/advent-of-code-day-9/</link>
      <pubDate>Wed, 09 Dec 2015 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2015/12/09/advent-of-code-day-9/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://adventofcode.com/2015/day/9&#34;&gt;Source&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Part 1:&lt;/strong&gt; Given a list of distances between cities of the form &lt;code&gt;London to Dublin = 464&lt;/code&gt;, calculate the shortest route that visits each city exactly once.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Advent of Code: Day 8</title>
      <link>https://blog.jverkamp.com/2015/12/08/advent-of-code-day-8/</link>
      <pubDate>Tue, 08 Dec 2015 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2015/12/08/advent-of-code-day-8/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://adventofcode.com/2015/day/8&#34;&gt;Source&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Part 1:&lt;/strong&gt; Given an escaped string of the form &lt;code&gt;&amp;quot;\xa8br\x8bjr\&amp;quot;&amp;quot;&lt;/code&gt;, convert it to the escaped form: &lt;code&gt;br js&lt;/code&gt;. Calculate the total difference of lengths between the former (&lt;code&gt;16&lt;/code&gt;) and the latter (&lt;code&gt;5&lt;/code&gt;).&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Advent of Code: Day 6</title>
      <link>https://blog.jverkamp.com/2015/12/06/advent-of-code-day-6/</link>
      <pubDate>Sun, 06 Dec 2015 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2015/12/06/advent-of-code-day-6/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://adventofcode.com/2015/day/6&#34;&gt;Source&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Part 1:&lt;/strong&gt; Given a 1000 by 1000 grid of lights and a list of instructions of the form &lt;code&gt;(turn on|turn off|toggle) 5,10 through 15,20&lt;/code&gt;, determine how many lights are on.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Advent of Code: Day 5</title>
      <link>https://blog.jverkamp.com/2015/12/05/advent-of-code-day-5/</link>
      <pubDate>Sat, 05 Dec 2015 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2015/12/05/advent-of-code-day-5/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://adventofcode.com/2015/day/5&#34;&gt;Source&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Part 1:&lt;/strong&gt; A &amp;lsquo;nice&amp;rsquo; string contains at least three vowels, one double letter (such as &lt;code&gt;xx&lt;/code&gt;), and none of the strings &lt;code&gt;ab&lt;/code&gt;, &lt;code&gt;cd&lt;/code&gt;, &lt;code&gt;pq&lt;/code&gt;, or &lt;code&gt;xy&lt;/code&gt;. Count nice strings.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Advent of Code: Day 4</title>
      <link>https://blog.jverkamp.com/2015/12/04/advent-of-code-day-4/</link>
      <pubDate>Fri, 04 Dec 2015 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2015/12/04/advent-of-code-day-4/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://adventofcode.com/2015/day/4&#34;&gt;Source&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Part 1:&lt;/strong&gt; Mine Adventcoins. Basically, find the lowest integer such that the string &lt;code&gt;{prefix}{integer}&lt;/code&gt; has an &lt;a href=&#34;https://en.wikipedia.org/wiki/md5&#34;&gt;md5&lt;/a&gt; hash with at least 5 leading zeros. &lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:3&#34;&gt;&lt;a href=&#34;#fn:3&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Advent of Code: Day 3</title>
      <link>https://blog.jverkamp.com/2015/12/03/advent-of-code-day-3/</link>
      <pubDate>Thu, 03 Dec 2015 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2015/12/03/advent-of-code-day-3/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://adventofcode.com/2015/day/3&#34;&gt;Source&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Part 1:&lt;/strong&gt; Given a string of &lt;code&gt;&amp;lt;&amp;gt;^v&lt;/code&gt; characters which mean move west, east, north, or south respectively and starting at the origin, how many unique positions do you pass through?&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Advent of Code: Day 2</title>
      <link>https://blog.jverkamp.com/2015/12/02/advent-of-code-day-2/</link>
      <pubDate>Wed, 02 Dec 2015 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2015/12/02/advent-of-code-day-2/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://adventofcode.com/2015/day/2&#34;&gt;Source&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Part 1:&lt;/strong&gt; A gift requires enough wrapping paper to cover the surface plus an additional amount equal to the area smallest side. Calculate the total wrapping paper needed for a list of dimensions of the form &lt;code&gt;2x3x4&lt;/code&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Advent of Code: Day 1</title>
      <link>https://blog.jverkamp.com/2015/12/01/advent-of-code-day-1/</link>
      <pubDate>Tue, 01 Dec 2015 00:00:02 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2015/12/01/advent-of-code-day-1/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://adventofcode.com/2015/day/1&#34;&gt;Source&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Part 1:&lt;/strong&gt; Given a string of &lt;code&gt;()&lt;/code&gt; characters controlling a simulated elevator, where &lt;code&gt;(&lt;/code&gt; means &amp;lsquo;go up&amp;rsquo; and &lt;code&gt;)&lt;/code&gt; means &amp;lsquo;go down&amp;rsquo;, what floor do you end up on?&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Advent of Code</title>
      <link>https://blog.jverkamp.com/2015/12/01/advent-of-code/</link>
      <pubDate>Tue, 01 Dec 2015 00:00:01 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2015/12/01/advent-of-code/</guid>
      <description>&lt;p&gt;I&amp;rsquo;m always on the lookout for new sources of quick&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; coding puzzles. This holiday season, &lt;a href=&#34;http://adventofcode.com/&#34;&gt;Advent of Code&lt;/a&gt; scratches precisely that itch.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Advent of Code is a series of small programming puzzles for a variety of skill levels. They are self-contained and are just as appropriate for an expert who wants to stay sharp as they are for a beginner who is just learning to code. Each puzzle calls upon different skills and has two parts that build on a theme. &amp;ndash; &lt;a href=&#34;http://adventofcode.com/about&#34;&gt;About - Advent of Code&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I&amp;rsquo;ve been working out each problem thus far in Python (my language of choice; along with Racket). I&amp;rsquo;m backfilling the first seven posts (along with this one), but I&amp;rsquo;ll try to do the rest daily.&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>