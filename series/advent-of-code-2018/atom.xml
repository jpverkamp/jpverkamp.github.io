<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Advent of Code 2018 on jverkamp.com</title>
    <link>https://blog.jverkamp.com/series/advent-of-code-2018/</link>
    <description>Recent content in Advent of Code 2018 on jverkamp.com</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 14 Dec 2018 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://blog.jverkamp.com/series/advent-of-code-2018/atom.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>AoC 2018 Day 14: Functionally Circular Elfs</title>
      <link>https://blog.jverkamp.com/2018/12/14/aoc-2018-day-14-functionally-circular-elfs/</link>
      <pubDate>Fri, 14 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2018/12/14/aoc-2018-day-14-functionally-circular-elfs/</guid>
      <description>&lt;h3 id=&#34;source-chocolate-charts-https-adventofcode-com-2018-day-14&#34;&gt;Source: &lt;a href=&#34;https://adventofcode.com/2018/day/14&#34;&gt;Chocolate Charts&lt;/a&gt;&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Part 1:&lt;/strong&gt; Create an infinite stream of numbers, by starting with [3, 7] with two pointers: 0 and 1. To add values to the list:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Add the current values of the two pointers

&lt;ul&gt;
&lt;li&gt;If the value is less than ten, add that value to the end of the list&lt;/li&gt;
&lt;li&gt;If the value is greater or equal to ten, add 1 and then the ones digits to the end of the list&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Update each pointer by adding the value it is pointing at to its current index plus one&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;With that algorithm, find the ten digits after a given index.&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>AoC 2018 Day 13: Mine Cart Madness</title>
      <link>https://blog.jverkamp.com/2018/12/13/aoc-2018-day-13-mine-cart-madness/</link>
      <pubDate>Thu, 13 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2018/12/13/aoc-2018-day-13-mine-cart-madness/</guid>
      <description>&lt;h3 id=&#34;source-mine-cart-madness-https-adventofcode-com-2018-day-13&#34;&gt;Source: &lt;a href=&#34;https://adventofcode.com/2018/day/13&#34;&gt;Mine Cart Madness&lt;/a&gt;&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Part 1:&lt;/strong&gt; Load a minecart track that looks like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/-&amp;gt;-\        
|   |  /----\
| /-+--+-\  |
| | |  | v  |
\-+-/  \-+--/
  \------/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Assuming minecarts follow the tracks and alternate turning left, going straight, and turning right on each intersection (&lt;code&gt;+&lt;/code&gt;), where does the first collision occur?&lt;/p&gt;

&lt;p&gt;NOTE: Update carts top to bottom, left to right. Carts can collide mid update.&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>AoC 2018 Day 12: Fat Cellular Automaton</title>
      <link>https://blog.jverkamp.com/2018/12/12/aoc-2018-day-12-fat-cellular-automaton/</link>
      <pubDate>Wed, 12 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2018/12/12/aoc-2018-day-12-fat-cellular-automaton/</guid>
      <description>&lt;h3 id=&#34;source-subterranean-sustainability-https-adventofcode-com-2018-day-12&#34;&gt;Source: &lt;a href=&#34;https://adventofcode.com/2018/day/12&#34;&gt;Subterranean Sustainability&lt;/a&gt;&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Part 1:&lt;/strong&gt; Create an infinite 2D &lt;a href=&#34;https://en.wikipedia.org/wiki/cellular%20automaton&#34;&gt;cellular automaton&lt;/a&gt; with transition rules based on two points to each side, starting with initial state at index 0 to the right.&lt;/p&gt;

&lt;p&gt;After 20 generations, what is the sum of indexes of points turned on?&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>AoC 2018 Day 11: Gridlocked Fuel</title>
      <link>https://blog.jverkamp.com/2018/12/11/aoc-2018-day-11-gridlocked-fuel/</link>
      <pubDate>Tue, 11 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2018/12/11/aoc-2018-day-11-gridlocked-fuel/</guid>
      <description>&lt;h3 id=&#34;source-chronal-charge-https-adventofcode-com-2018-day-11&#34;&gt;Source: &lt;a href=&#34;https://adventofcode.com/2018/day/11&#34;&gt;Chronal Charge&lt;/a&gt;&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Part 1:&lt;/strong&gt; Define a grid as follows (x,y coordinates + a constant C):&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;latex-inline&#34;&gt;r(x) = x &amp;#43; 10&lt;/span&gt;
&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;latex-inline&#34;&gt;G(x, y) = hundreds(r(x) * (r(x) * y &amp;#43; C)) - 5&lt;/span&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Find the 3x3 area in a 300x300 grid with the highest total &lt;span class=&#34;latex-inline&#34;&gt;G(x, y)&lt;/span&gt;
.&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>AoC 2018 Day 10: It&#39;s Full of Stars!</title>
      <link>https://blog.jverkamp.com/2018/12/10/aoc-2018-day-10-its-full-of-stars/</link>
      <pubDate>Mon, 10 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2018/12/10/aoc-2018-day-10-its-full-of-stars/</guid>
      <description>&lt;h3 id=&#34;source-the-stars-align-https-adventofcode-com-2018-day-10&#34;&gt;Source: &lt;a href=&#34;https://adventofcode.com/2018/day/10&#34;&gt;The Stars Align&lt;/a&gt;&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Part 1:&lt;/strong&gt; Given a system of moving particles (with position and velocity) find the point where the particles spell a message. What is that message?&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>AoC 2018 Day 9: Marble Madness</title>
      <link>https://blog.jverkamp.com/2018/12/09/aoc-2018-day-9-marble-madness/</link>
      <pubDate>Sun, 09 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2018/12/09/aoc-2018-day-9-marble-madness/</guid>
      <description>&lt;h3 id=&#34;source-marble-mania-https-adventofcode-com-2018-day-9&#34;&gt;Source: &lt;a href=&#34;https://adventofcode.com/2018/day/9&#34;&gt;Marble Mania&lt;/a&gt;&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Part 1:&lt;/strong&gt; Place marbles in a circle such that each marble is placed by skipping one place &lt;em&gt;except&lt;/em&gt; for marbles divisible by 23. For those, don&amp;rsquo;t place them, skip back 7 places, and remove that marble as well. Add these two marbles to your current score.&lt;/p&gt;

&lt;p&gt;Given a specific player count and last marble, what&amp;rsquo;s the highest score?&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>AoC 2018 Day 8: Checksum Treeification</title>
      <link>https://blog.jverkamp.com/2018/12/08/aoc-2018-day-8-checksum-treeification/</link>
      <pubDate>Sat, 08 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2018/12/08/aoc-2018-day-8-checksum-treeification/</guid>
      <description>&lt;h3 id=&#34;source-the-sum-of-its-parts-https-adventofcode-com-2018-day-8&#34;&gt;Source: &lt;a href=&#34;https://adventofcode.com/2018/day/8&#34;&gt;The Sum of Its Parts&lt;/a&gt;&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Part 1:&lt;/strong&gt; A custom tree data structure is defined as:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;child count&lt;/li&gt;
&lt;li&gt;metadata count&lt;/li&gt;
&lt;li&gt;&lt;code&gt;child count&lt;/code&gt; additional subtrees (recursive)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;metadata count&lt;/code&gt; metadata nodes&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Calculate the sum of all metadata nodes.&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>AoC 2018 Day 7: Job Simulator</title>
      <link>https://blog.jverkamp.com/2018/12/07/aoc-2018-day-7-job-simulator/</link>
      <pubDate>Fri, 07 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2018/12/07/aoc-2018-day-7-job-simulator/</guid>
      <description>&lt;h3 id=&#34;source-the-sum-of-its-parts-https-adventofcode-com-2018-day-7&#34;&gt;Source: &lt;a href=&#34;https://adventofcode.com/2018/day/7&#34;&gt;The Sum of Its Parts&lt;/a&gt;&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Part 1:&lt;/strong&gt; Given a list of job dependencies (job A must be before job B), determine the order jobs must be done in. Break ties lexicographically.&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>AoC 2018 Day 6: Infinite Area Simulator</title>
      <link>https://blog.jverkamp.com/2018/12/06/aoc-2018-day-6-infinite-area-simulator/</link>
      <pubDate>Thu, 06 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2018/12/06/aoc-2018-day-6-infinite-area-simulator/</guid>
      <description>&lt;h3 id=&#34;source-chronal-coordinates-https-adventofcode-com-2018-day-6&#34;&gt;Source: &lt;a href=&#34;https://adventofcode.com/2018/day/6&#34;&gt;Chronal Coordinates&lt;/a&gt;&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Part 1:&lt;/strong&gt; Given a list of points, calculate the region of points closest to each point (using &lt;a href=&#34;https://en.wikipedia.org/wiki/Manhattan%20distance&#34;&gt;Manhattan distance&lt;/a&gt;). Return the size of the largest non-infinite region.&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>AoC 2018 Day 5: Alchemical reduction</title>
      <link>https://blog.jverkamp.com/2018/12/05/aoc-2018-day-5-alchemical-reduction/</link>
      <pubDate>Wed, 05 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2018/12/05/aoc-2018-day-5-alchemical-reduction/</guid>
      <description>&lt;h3 id=&#34;source-alchemical-reduction-https-adventofcode-com-2018-day-5&#34;&gt;Source: &lt;a href=&#34;https://adventofcode.com/2018/day/5&#34;&gt;Alchemical Reduction&lt;/a&gt;&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Part 1:&lt;/strong&gt; Given a string, reduce it by removing pairs of letters that are the same letter but different cases. Repeat until you have a minimal string.&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>AoC 2018 Day 4: Sleeping on the job</title>
      <link>https://blog.jverkamp.com/2018/12/04/aoc-2018-day-4-sleeping-on-the-job/</link>
      <pubDate>Tue, 04 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2018/12/04/aoc-2018-day-4-sleeping-on-the-job/</guid>
      <description>&lt;h3 id=&#34;source-repose-record-https-adventofcode-com-2018-day-4&#34;&gt;Source: &lt;a href=&#34;https://adventofcode.com/2018/day/4&#34;&gt;Repose Record&lt;/a&gt;&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Part 1:&lt;/strong&gt; Given a log of guard shifts and times asleep/awake, calculate the guard that was asleep most often and which minute they were most asleep for.&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>AoC 2018 Day 3: Regionification</title>
      <link>https://blog.jverkamp.com/2018/12/03/aoc-2018-day-3-regionification/</link>
      <pubDate>Mon, 03 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2018/12/03/aoc-2018-day-3-regionification/</guid>
      <description>&lt;h3 id=&#34;source-no-matter-how-you-slice-it-https-adventofcode-com-2018-day-3&#34;&gt;Source: &lt;a href=&#34;https://adventofcode.com/2018/day/3&#34;&gt;No Matter How You Slice It&lt;/a&gt;&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Part 1:&lt;/strong&gt; Given a list of overlapping regions defined by (left, top, width, height) count how many integer points occur in more than one region.&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>AoC 2018 Day 2: Counting letters</title>
      <link>https://blog.jverkamp.com/2018/12/02/aoc-2018-day-2-counting-letters/</link>
      <pubDate>Sun, 02 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2018/12/02/aoc-2018-day-2-counting-letters/</guid>
      <description>&lt;h3 id=&#34;source-inventory-management-system-https-adventofcode-com-2018-day-2&#34;&gt;Source: &lt;a href=&#34;https://adventofcode.com/2018/day/2&#34;&gt;Inventory Management System&lt;/a&gt;&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Part 1:&lt;/strong&gt; Given a list of strings, count how many contain exactly two of a letter (&lt;code&gt;a&lt;/code&gt;) and how many contain exactly three of a letter (&lt;code&gt;b&lt;/code&gt;). Calculate &lt;code&gt;a*b&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>AoC 2018 Day 1: Sum-thing to start with</title>
      <link>https://blog.jverkamp.com/2018/12/01/aoc-2018-day-1-sum-thing-to-start-with/</link>
      <pubDate>Sat, 01 Dec 2018 00:00:03 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2018/12/01/aoc-2018-day-1-sum-thing-to-start-with/</guid>
      <description>&lt;h3 id=&#34;source-chronal-calibration-https-adventofcode-com-2018-day-1&#34;&gt;Source: &lt;a href=&#34;https://adventofcode.com/2018/day/1&#34;&gt;Chronal Calibration&lt;/a&gt;&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Part 1:&lt;/strong&gt; Given a list of numbers (positive and negative) calculate the sum.&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>Advent of Code 2018</title>
      <link>https://blog.jverkamp.com/2018/12/01/advent-of-code-2018/</link>
      <pubDate>Sat, 01 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2018/12/01/advent-of-code-2018/</guid>
      <description>&lt;p&gt;Let&amp;rsquo;s do it again! I&amp;rsquo;m starting a day late, but much better than &lt;a href=&#34;https://blog.jverkamp.com/2018/01/08/advent-of-code-2017/&#34;&gt;last year&lt;/a&gt; 😄!&lt;/p&gt;

&lt;p&gt;This time around, I&amp;rsquo;m hoping to solve each problem in both Python and Racket, both to show an example of how the languages differ and &amp;hellip; well, because I can 😇.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;EDIT 2018-12-05&lt;/em&gt;: Yeah&amp;hellip; I&amp;rsquo;m not actually going to do these in both Racket and Python. The solutions are ending up being near direct translations. Since there are probably fewer people solving these in Racket, I&amp;rsquo;ll do that first and Python eventually™.&lt;/p&gt;

&lt;p&gt;As always, these problems are wonderful to try to solve yourself. If you agree, &lt;em&gt;stop reading now&lt;/em&gt;. This post isn&amp;rsquo;t going anywhere.&lt;/p&gt;

&lt;p&gt;If you&amp;rsquo;d like to see the full form of any particular solution, you can do so on GitHub (including previous years and possibly some I haven&amp;rsquo;t written up yet): &lt;a href=&#34;https://github.com/jpverkamp/advent-of-code&#34;&gt;jpverkamp/advent-of-code&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>