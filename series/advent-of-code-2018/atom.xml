<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Advent of Code 2018 on jverkamp.com</title><link>https://blog.jverkamp.com/series/advent-of-code-2018/</link><description>Recent content in Advent of Code 2018 on jverkamp.com</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Fri, 14 Dec 2018 00:00:00 +0000</lastBuildDate><atom:link href="https://blog.jverkamp.com/series/advent-of-code-2018/atom.xml" rel="self" type="application/rss+xml"/><item><title>AoC 2018 Day 14: Functionally Circular Elfs</title><link>https://blog.jverkamp.com/2018/12/14/aoc-2018-day-14-functionally-circular-elfs/</link><pubDate>Fri, 14 Dec 2018 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2018/12/14/aoc-2018-day-14-functionally-circular-elfs/</guid><description>&lt;h3 id="source-chocolate-chartshttpsadventofcodecom2018day14">Source: &lt;a href="https://adventofcode.com/2018/day/14" target="_blank" rel="noopener">Chocolate Charts&lt;/a>&lt;/h3>
&lt;blockquote>
&lt;p>&lt;strong>Part 1:&lt;/strong> Create an infinite stream of numbers, by starting with [3, 7] with two pointers: 0 and 1. To add values to the list:&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;ul>
&lt;li>Add the current values of the two pointers
&lt;ul>
&lt;li>If the value is less than ten, add that value to the end of the list&lt;/li>
&lt;li>If the value is greater or equal to ten, add 1 and then the ones digits to the end of the list&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Update each pointer by adding the value it is pointing at to its current index plus one&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;blockquote>
&lt;p>With that algorithm, find the ten digits after a given index.&lt;/p>
&lt;/blockquote></description></item><item><title>AoC 2018 Day 13: Mine Cart Madness</title><link>https://blog.jverkamp.com/2018/12/13/aoc-2018-day-13-mine-cart-madness/</link><pubDate>Thu, 13 Dec 2018 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2018/12/13/aoc-2018-day-13-mine-cart-madness/</guid><description>&lt;h3 id="source-mine-cart-madnesshttpsadventofcodecom2018day13">Source: &lt;a href="https://adventofcode.com/2018/day/13" target="_blank" rel="noopener">Mine Cart Madness&lt;/a>&lt;/h3>
&lt;blockquote>
&lt;p>&lt;strong>Part 1:&lt;/strong> Load a minecart track that looks like this:&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;pre tabindex="0">&lt;code>&lt;/code>&lt;/pre>&lt;/blockquote>
&lt;p>/-&amp;gt;-\ &lt;br>
| | /&amp;mdash;-&lt;br>
| /-+&amp;ndash;+-\ |
| | | | v |
-+-/ -+&amp;ndash;/
-&amp;mdash;&amp;ndash;/&lt;/p></description></item><item><title>AoC 2018 Day 12: Fat Cellular Automaton</title><link>https://blog.jverkamp.com/2018/12/12/aoc-2018-day-12-fat-cellular-automaton/</link><pubDate>Wed, 12 Dec 2018 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2018/12/12/aoc-2018-day-12-fat-cellular-automaton/</guid><description>&lt;h3 id="source-subterranean-sustainabilityhttpsadventofcodecom2018day12">Source: &lt;a href="https://adventofcode.com/2018/day/12" target="_blank" rel="noopener">Subterranean Sustainability&lt;/a>&lt;/h3>
&lt;blockquote>
&lt;p>&lt;strong>Part 1:&lt;/strong> Create an infinite 2D &lt;a href="https://en.wikipedia.org/wiki/cellular%20automaton">cellular automaton&lt;/a> with transition rules based on two points to each side, starting with initial state at index 0 to the right.&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>After 20 generations, what is the sum of indexes of points turned on?&lt;/p>
&lt;/blockquote></description></item><item><title>AoC 2018 Day 11: Gridlocked Fuel</title><link>https://blog.jverkamp.com/2018/12/11/aoc-2018-day-11-gridlocked-fuel/</link><pubDate>Tue, 11 Dec 2018 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2018/12/11/aoc-2018-day-11-gridlocked-fuel/</guid><description>&lt;h3 id="source-chronal-chargehttpsadventofcodecom2018day11">Source: &lt;a href="https://adventofcode.com/2018/day/11" target="_blank" rel="noopener">Chronal Charge&lt;/a>&lt;/h3>
&lt;blockquote>
&lt;p>&lt;strong>Part 1:&lt;/strong> Define a grid as follows (x,y coordinates + a constant C):&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;ul>
&lt;li>&lt;span class="latex-inline">r(x) = x &amp;#43; 10&lt;/span>
&lt;/li>
&lt;li>&lt;span class="latex-inline">G(x, y) = hundreds(r(x) * (r(x) * y &amp;#43; C)) - 5&lt;/span>
&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;blockquote>
&lt;p>Find the 3x3 area in a 300x300 grid with the highest total &lt;span class="latex-inline">G(x, y)&lt;/span>
.&lt;/p>
&lt;/blockquote></description></item><item><title>AoC 2018 Day 10: It's Full of Stars!</title><link>https://blog.jverkamp.com/2018/12/10/aoc-2018-day-10-its-full-of-stars/</link><pubDate>Mon, 10 Dec 2018 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2018/12/10/aoc-2018-day-10-its-full-of-stars/</guid><description>&lt;h3 id="source-the-stars-alignhttpsadventofcodecom2018day10">Source: &lt;a href="https://adventofcode.com/2018/day/10" target="_blank" rel="noopener">The Stars Align&lt;/a>&lt;/h3>
&lt;blockquote>
&lt;p>&lt;strong>Part 1:&lt;/strong> Given a system of moving particles (with position and velocity) find the point where the particles spell a message. What is that message?&lt;/p>
&lt;/blockquote></description></item><item><title>AoC 2018 Day 9: Marble Madness</title><link>https://blog.jverkamp.com/2018/12/09/aoc-2018-day-9-marble-madness/</link><pubDate>Sun, 09 Dec 2018 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2018/12/09/aoc-2018-day-9-marble-madness/</guid><description>&lt;h3 id="source-marble-maniahttpsadventofcodecom2018day9">Source: &lt;a href="https://adventofcode.com/2018/day/9" target="_blank" rel="noopener">Marble Mania&lt;/a>&lt;/h3>
&lt;blockquote>
&lt;p>&lt;strong>Part 1:&lt;/strong> Place marbles in a circle such that each marble is placed by skipping one place &lt;em>except&lt;/em> for marbles divisible by 23. For those, don&amp;rsquo;t place them, skip back 7 places, and remove that marble as well. Add these two marbles to your current score.&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>Given a specific player count and last marble, what&amp;rsquo;s the highest score?&lt;/p>
&lt;/blockquote></description></item><item><title>AoC 2018 Day 8: Checksum Treeification</title><link>https://blog.jverkamp.com/2018/12/08/aoc-2018-day-8-checksum-treeification/</link><pubDate>Sat, 08 Dec 2018 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2018/12/08/aoc-2018-day-8-checksum-treeification/</guid><description>&lt;h3 id="source-the-sum-of-its-partshttpsadventofcodecom2018day8">Source: &lt;a href="https://adventofcode.com/2018/day/8" target="_blank" rel="noopener">The Sum of Its Parts&lt;/a>&lt;/h3>
&lt;blockquote>
&lt;p>&lt;strong>Part 1:&lt;/strong> A custom tree data structure is defined as:&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;ul>
&lt;li>child count&lt;/li>
&lt;li>metadata count&lt;/li>
&lt;li>&lt;code>child count&lt;/code> additional subtrees (recursive)&lt;/li>
&lt;li>&lt;code>metadata count&lt;/code> metadata nodes&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;blockquote>
&lt;p>Calculate the sum of all metadata nodes.&lt;/p>
&lt;/blockquote></description></item><item><title>AoC 2018 Day 7: Job Simulator</title><link>https://blog.jverkamp.com/2018/12/07/aoc-2018-day-7-job-simulator/</link><pubDate>Fri, 07 Dec 2018 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2018/12/07/aoc-2018-day-7-job-simulator/</guid><description>&lt;h3 id="source-the-sum-of-its-partshttpsadventofcodecom2018day7">Source: &lt;a href="https://adventofcode.com/2018/day/7" target="_blank" rel="noopener">The Sum of Its Parts&lt;/a>&lt;/h3>
&lt;blockquote>
&lt;p>&lt;strong>Part 1:&lt;/strong> Given a list of job dependencies (job A must be before job B), determine the order jobs must be done in. Break ties lexicographically.&lt;/p>
&lt;/blockquote></description></item><item><title>AoC 2018 Day 6: Infinite Area Simulator</title><link>https://blog.jverkamp.com/2018/12/06/aoc-2018-day-6-infinite-area-simulator/</link><pubDate>Thu, 06 Dec 2018 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2018/12/06/aoc-2018-day-6-infinite-area-simulator/</guid><description>&lt;h3 id="source-chronal-coordinateshttpsadventofcodecom2018day6">Source: &lt;a href="https://adventofcode.com/2018/day/6" target="_blank" rel="noopener">Chronal Coordinates&lt;/a>&lt;/h3>
&lt;blockquote>
&lt;p>&lt;strong>Part 1:&lt;/strong> Given a list of points, calculate the region of points closest to each point (using &lt;a href="https://en.wikipedia.org/wiki/Manhattan%20distance">Manhattan distance&lt;/a>). Return the size of the largest non-infinite region.&lt;/p>
&lt;/blockquote></description></item><item><title>AoC 2018 Day 5: Alchemical reduction</title><link>https://blog.jverkamp.com/2018/12/05/aoc-2018-day-5-alchemical-reduction/</link><pubDate>Wed, 05 Dec 2018 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2018/12/05/aoc-2018-day-5-alchemical-reduction/</guid><description>&lt;h3 id="source-alchemical-reductionhttpsadventofcodecom2018day5">Source: &lt;a href="https://adventofcode.com/2018/day/5" target="_blank" rel="noopener">Alchemical Reduction&lt;/a>&lt;/h3>
&lt;blockquote>
&lt;p>&lt;strong>Part 1:&lt;/strong> Given a string, reduce it by removing pairs of letters that are the same letter but different cases. Repeat until you have a minimal string.&lt;/p>
&lt;/blockquote></description></item><item><title>AoC 2018 Day 4: Sleeping on the job</title><link>https://blog.jverkamp.com/2018/12/04/aoc-2018-day-4-sleeping-on-the-job/</link><pubDate>Tue, 04 Dec 2018 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2018/12/04/aoc-2018-day-4-sleeping-on-the-job/</guid><description>&lt;h3 id="source-repose-recordhttpsadventofcodecom2018day4">Source: &lt;a href="https://adventofcode.com/2018/day/4" target="_blank" rel="noopener">Repose Record&lt;/a>&lt;/h3>
&lt;blockquote>
&lt;p>&lt;strong>Part 1:&lt;/strong> Given a log of guard shifts and times asleep/awake, calculate the guard that was asleep most often and which minute they were most asleep for.&lt;/p>
&lt;/blockquote></description></item><item><title>AoC 2018 Day 3: Regionification</title><link>https://blog.jverkamp.com/2018/12/03/aoc-2018-day-3-regionification/</link><pubDate>Mon, 03 Dec 2018 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2018/12/03/aoc-2018-day-3-regionification/</guid><description>&lt;h3 id="source-no-matter-how-you-slice-ithttpsadventofcodecom2018day3">Source: &lt;a href="https://adventofcode.com/2018/day/3" target="_blank" rel="noopener">No Matter How You Slice It&lt;/a>&lt;/h3>
&lt;blockquote>
&lt;p>&lt;strong>Part 1:&lt;/strong> Given a list of overlapping regions defined by (left, top, width, height) count how many integer points occur in more than one region.&lt;/p>
&lt;/blockquote></description></item><item><title>AoC 2018 Day 2: Counting letters</title><link>https://blog.jverkamp.com/2018/12/02/aoc-2018-day-2-counting-letters/</link><pubDate>Sun, 02 Dec 2018 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2018/12/02/aoc-2018-day-2-counting-letters/</guid><description>&lt;h3 id="source-inventory-management-systemhttpsadventofcodecom2018day2">Source: &lt;a href="https://adventofcode.com/2018/day/2" target="_blank" rel="noopener">Inventory Management System&lt;/a>&lt;/h3>
&lt;blockquote>
&lt;p>&lt;strong>Part 1:&lt;/strong> Given a list of strings, count how many contain exactly two of a letter (&lt;code>a&lt;/code>) and how many contain exactly three of a letter (&lt;code>b&lt;/code>). Calculate &lt;code>a*b&lt;/code>.&lt;/p>
&lt;/blockquote></description></item><item><title>AoC 2018 Day 1: Sum-thing to start with</title><link>https://blog.jverkamp.com/2018/12/01/aoc-2018-day-1-sum-thing-to-start-with/</link><pubDate>Sat, 01 Dec 2018 00:00:03 +0000</pubDate><guid>https://blog.jverkamp.com/2018/12/01/aoc-2018-day-1-sum-thing-to-start-with/</guid><description>&lt;h3 id="source-chronal-calibrationhttpsadventofcodecom2018day1">Source: &lt;a href="https://adventofcode.com/2018/day/1" target="_blank" rel="noopener">Chronal Calibration&lt;/a>&lt;/h3>
&lt;blockquote>
&lt;p>&lt;strong>Part 1:&lt;/strong> Given a list of numbers (positive and negative) calculate the sum.&lt;/p>
&lt;/blockquote></description></item><item><title>Advent of Code 2018</title><link>https://blog.jverkamp.com/2018/12/01/advent-of-code-2018/</link><pubDate>Sat, 01 Dec 2018 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2018/12/01/advent-of-code-2018/</guid><description>&lt;p>Let&amp;rsquo;s do it again! I&amp;rsquo;m starting a day late, but much better than &lt;a href="https://blog.jverkamp.com/2018/01/08/advent-of-code-2017/">last year&lt;/a> 😄!&lt;/p>
&lt;p>This time around, I&amp;rsquo;m hoping to solve each problem in both Python and Racket, both to show an example of how the languages differ and &amp;hellip; well, because I can 😇.&lt;/p>
&lt;p>&lt;em>EDIT 2018-12-05&lt;/em>: Yeah&amp;hellip; I&amp;rsquo;m not actually going to do these in both Racket and Python. The solutions are ending up being near direct translations. Since there are probably fewer people solving these in Racket, I&amp;rsquo;ll do that first and Python eventually™.&lt;/p>
&lt;p>As always, these problems are wonderful to try to solve yourself. If you agree, &lt;em>stop reading now&lt;/em>. This post isn&amp;rsquo;t going anywhere.&lt;/p>
&lt;p>If you&amp;rsquo;d like to see the full form of any particular solution, you can do so on GitHub (including previous years and possibly some I haven&amp;rsquo;t written up yet): &lt;a href="https://github.com/jpverkamp/advent-of-code">jpverkamp/advent-of-code&lt;/a>&lt;/p></description></item></channel></rss>