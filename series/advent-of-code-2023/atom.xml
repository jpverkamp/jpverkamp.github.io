<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Advent of Code 2023 on jverkamp.com</title><link>https://blog.jverkamp.com/series/advent-of-code-2023/</link><description>Recent content in Advent of Code 2023 on jverkamp.com</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Fri, 08 Dec 2023 00:00:03 +0000</lastBuildDate><atom:link href="https://blog.jverkamp.com/series/advent-of-code-2023/atom.xml" rel="self" type="application/rss+xml"/><item><title>AoC 2023 Day 8: Mazinator</title><link>https://blog.jverkamp.com/2023/12/08/aoc-2023-day-8-mazinator/</link><pubDate>Fri, 08 Dec 2023 00:00:03 +0000</pubDate><guid>https://blog.jverkamp.com/2023/12/08/aoc-2023-day-8-mazinator/</guid><description>&lt;h2 id="source-day-8-haunted-wastelandhttpsadventofcodecom2023day8">Source: &lt;a href="https://adventofcode.com/2023/day/8" target="_blank" rel="noopener">Day 8: Haunted Wasteland&lt;/a>&lt;/h2>
&lt;h2 id="part-1">Part 1&lt;/h2>
&lt;blockquote>
&lt;p>Given a (repeated) sequence of moves (&lt;code>L&lt;/code> for left and &lt;code>R&lt;/code> for right) and a directed graph where each node has two neighbors (left and right), count how many total steps it takes to get from the node &lt;code>AAA&lt;/code> to the node &lt;code>ZZZ&lt;/code>. The sequence of moves can (and will) need to repeat.&lt;/p>
&lt;/blockquote></description></item><item><title>AoC 2023 Day 7: Pokinator</title><link>https://blog.jverkamp.com/2023/12/07/aoc-2023-day-7-pokinator/</link><pubDate>Thu, 07 Dec 2023 00:00:03 +0000</pubDate><guid>https://blog.jverkamp.com/2023/12/07/aoc-2023-day-7-pokinator/</guid><description>&lt;h2 id="source-day-7-camel-cardshttpsadventofcodecom2023day7">Source: &lt;a href="https://adventofcode.com/2023/day/7" target="_blank" rel="noopener">Day 7: Camel Cards&lt;/a>&lt;/h2>
&lt;nav id="TableOfContents">
&lt;ul>
&lt;li>&lt;a href="#source-day-7-camel-cardshttpsadventofcodecom2023day7">Source: &lt;a href="https://adventofcode.com/2023/day/7">Day 7: Camel Cards&lt;/a>&lt;/a>&lt;/li>
&lt;li>&lt;a href="#part-1">Part 1&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#types-and-parsing">Types and Parsing&lt;/a>&lt;/li>
&lt;li>&lt;a href="#solving-the-problem">Solving the Problem&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#part-2">Part 2&lt;/a>&lt;/li>
&lt;li>&lt;a href="#performance">Performance&lt;/a>&lt;/li>
&lt;/ul>
&lt;/nav>
&lt;h2 id="part-1">Part 1&lt;/h2>
&lt;blockquote>
&lt;p>Simulate a limited poker game with no suits and break otherwise tied hands &lt;a href="https://en.wikipedia.org/wiki/lexicographically">lexicographically&lt;/a> (&lt;code>AAAA2&lt;/code> beats &lt;code>AKAAA&lt;/code>) because the the hands are both four of a kind, the first cards are both &lt;code>A&lt;/code>, but the second &lt;code>A&lt;/code> beats the &lt;code>K&lt;/code>. It doesn&amp;rsquo;t matter that the first hand&amp;rsquo;s off card was a &lt;code>2&lt;/code>&lt;/p>
&lt;p>Order all hands then calculate the sum of the ordering of hands (1 for best etc) times the bet for each.&lt;/p>
&lt;/blockquote></description></item><item><title>AoC 2023 Day 6: Racinator</title><link>https://blog.jverkamp.com/2023/12/06/aoc-2023-day-6-racinator/</link><pubDate>Wed, 06 Dec 2023 00:00:03 +0000</pubDate><guid>https://blog.jverkamp.com/2023/12/06/aoc-2023-day-6-racinator/</guid><description>&lt;h2 id="source-day-6-wait-for-ithttpsadventofcodecom2023day6">Source: &lt;a href="https://adventofcode.com/2023/day/6" target="_blank" rel="noopener">Day 6: Wait For It&lt;/a>&lt;/h2>
&lt;nav id="TableOfContents">
&lt;ul>
&lt;li>&lt;a href="#source-day-6-wait-for-ithttpsadventofcodecom2023day6">Source: &lt;a href="https://adventofcode.com/2023/day/6">Day 6: Wait For It&lt;/a>&lt;/a>&lt;/li>
&lt;li>&lt;a href="#part-1">Part 1&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#types-and-parsing">Types and Parsing&lt;/a>&lt;/li>
&lt;li>&lt;a href="#initial-brute-force-solution">Initial Brute Force Solution&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#part-2">Part 2&lt;/a>&lt;/li>
&lt;li>&lt;a href="#premature-optimization">(Premature) Optimization&lt;/a>&lt;/li>
&lt;/ul>
&lt;/nav>
&lt;h2 id="part-1">Part 1&lt;/h2>
&lt;blockquote>
&lt;p>Simulate charging up race boats with the behavior that waiting X seconds to start means you move at X units per second. Given time allowed and a target distance, determine how many (integer) numbers of seconds will beat the target distance.&lt;/p>
&lt;/blockquote></description></item><item><title>AoC 2023 Day 5: Growinator</title><link>https://blog.jverkamp.com/2023/12/05/aoc-2023-day-5-growinator/</link><pubDate>Tue, 05 Dec 2023 00:00:03 +0000</pubDate><guid>https://blog.jverkamp.com/2023/12/05/aoc-2023-day-5-growinator/</guid><description>&lt;h2 id="source-day-5-if-you-give-a-seed-a-fertilizerhttpsadventofcodecom2023day5">Source: &lt;a href="https://adventofcode.com/2023/day/5" target="_blank" rel="noopener">Day 5: If You Give A Seed A Fertilizer&lt;/a>&lt;/h2>
&lt;nav id="TableOfContents">
&lt;ul>
&lt;li>&lt;a href="#source-day-5-if-you-give-a-seed-a-fertilizerhttpsadventofcodecom2023day5">Source: &lt;a href="https://adventofcode.com/2023/day/5">Day 5: If You Give A Seed A Fertilizer&lt;/a>&lt;/a>&lt;/li>
&lt;li>&lt;a href="#part-1">Part 1&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#types">Types&lt;/a>&lt;/li>
&lt;li>&lt;a href="#parsing">Parsing&lt;/a>&lt;/li>
&lt;li>&lt;a href="#solution">Solution&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#part-2">Part 2&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#solution-1-brute-force">Solution 1: Brute Force&lt;/a>&lt;/li>
&lt;li>&lt;a href="#solution-2-parallel-brute-force">Solution 2: Parallel Brute Force&lt;/a>&lt;/li>
&lt;li>&lt;a href="#solution-3-treat-the-ranges-as--ranges">Solution 3: Treat the Ranges as &amp;hellip; Ranges&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#performance">Performance&lt;/a>&lt;/li>
&lt;/ul>
&lt;/nav>
&lt;h2 id="part-1">Part 1&lt;/h2>
&lt;blockquote>
&lt;p>You are given a set of initial values (seeds) and a series of range maps (where a range of numbers &lt;code>src..src+len&lt;/code> maps to &lt;code>dst..dst+len&lt;/code>). Apply each range map in tur, return the lowest resulting value.&lt;/p>
&lt;/blockquote></description></item><item><title>AoC 2023 Day 4: Scratchinator</title><link>https://blog.jverkamp.com/2023/12/04/aoc-2023-day-4-scratchinator/</link><pubDate>Mon, 04 Dec 2023 00:00:03 +0000</pubDate><guid>https://blog.jverkamp.com/2023/12/04/aoc-2023-day-4-scratchinator/</guid><description>&lt;h2 id="source-day-4-scratchcardshttpsadventofcodecom2023day4">Source: &lt;a href="https://adventofcode.com/2023/day/4" target="_blank" rel="noopener">Day 4: Scratchcards&lt;/a>&lt;/h2>
&lt;nav id="TableOfContents">
&lt;ul>
&lt;li>&lt;a href="#source-day-4-scratchcardshttpsadventofcodecom2023day4">Source: &lt;a href="https://adventofcode.com/2023/day/4">Day 4: Scratchcards&lt;/a>&lt;/a>&lt;/li>
&lt;li>&lt;a href="#part-1">Part 1&lt;/a>&lt;/li>
&lt;li>&lt;a href="#part-2">Part 2&lt;/a>&lt;/li>
&lt;li>&lt;a href="#performance">Performance&lt;/a>&lt;/li>
&lt;/ul>
&lt;/nav>
&lt;h2 id="part-1">Part 1&lt;/h2>
&lt;blockquote>
&lt;p>Simulate &lt;a href="https://en.wikipedia.org/wiki/scratchcards">scratchcards&lt;/a>. Given a list of winning numbers and guessed numbers, count how many guessed numbers are in the winning list. Your score is 1, 2, 4, 8, &amp;hellip; for 1, 2, 3, 4, &amp;hellip; matching numbers.&lt;/p>
&lt;/blockquote></description></item><item><title>AoC 2023 Day 3: Gearinator</title><link>https://blog.jverkamp.com/2023/12/03/aoc-2023-day-3-gearinator/</link><pubDate>Sun, 03 Dec 2023 00:00:03 +0000</pubDate><guid>https://blog.jverkamp.com/2023/12/03/aoc-2023-day-3-gearinator/</guid><description>&lt;h2 id="source-day-3-gear-ratioshttpsadventofcodecom2023day3">Source: &lt;a href="https://adventofcode.com/2023/day/3" target="_blank" rel="noopener">Day 3: Gear Ratios&lt;/a>&lt;/h2>
&lt;nav id="TableOfContents">
&lt;ul>
&lt;li>&lt;a href="#source-day-3-gear-ratioshttpsadventofcodecom2023day3">Source: &lt;a href="https://adventofcode.com/2023/day/3">Day 3: Gear Ratios&lt;/a>&lt;/a>&lt;/li>
&lt;li>&lt;a href="#part-1">Part 1&lt;/a>&lt;/li>
&lt;li>&lt;a href="#part-2">Part 2&lt;/a>&lt;/li>
&lt;li>&lt;a href="#performance">Performance&lt;/a>&lt;/li>
&lt;/ul>
&lt;/nav>
&lt;h2 id="part-1">Part 1&lt;/h2>
&lt;blockquote>
&lt;p>Take as input a 2D grid of numbers or symbols (&lt;code>.&lt;/code> represents empty space). Numbers will be 1 or more digits written horizontally which should be concatenated (&lt;code>.467*&lt;/code> is the number &lt;code>467&lt;/code> followed by the symbol &lt;code>*&lt;/code>).&lt;/p>
&lt;p>Sum all numbers that are adjacent (including diagonally) to at least one symbol.&lt;/p>
&lt;/blockquote></description></item><item><title>AoC 2023 Day 2: Playinator</title><link>https://blog.jverkamp.com/2023/12/02/aoc-2023-day-2-playinator/</link><pubDate>Sat, 02 Dec 2023 00:00:03 +0000</pubDate><guid>https://blog.jverkamp.com/2023/12/02/aoc-2023-day-2-playinator/</guid><description>&lt;h2 id="source-day-2-cube-conundrumhttpsadventofcodecom2023day2">Source: &lt;a href="https://adventofcode.com/2023/day/2" target="_blank" rel="noopener">Day 2: Cube Conundrum&lt;/a>&lt;/h2>
&lt;nav id="TableOfContents">
&lt;ul>
&lt;li>&lt;a href="#source-day-2-cube-conundrumhttpsadventofcodecom2023day2">Source: &lt;a href="https://adventofcode.com/2023/day/2">Day 2: Cube Conundrum&lt;/a>&lt;/a>&lt;/li>
&lt;li>&lt;a href="#part-1">Part 1&lt;/a>&lt;/li>
&lt;li>&lt;a href="#part-2">Part 2&lt;/a>&lt;/li>
&lt;li>&lt;a href="#performance">Performance&lt;/a>&lt;/li>
&lt;/ul>
&lt;/nav>
&lt;h2 id="part-1">Part 1&lt;/h2>
&lt;blockquote>
&lt;p>Play a game where you have some number of red, green, and blue dice in a cup, which you draw and roll (without replacement). Which game is possible with only 12 red, 13 gree, and 14 blue cubes?&lt;/p>
&lt;/blockquote>
&lt;p>Input will look like: &lt;code>Game 1: 3 blue, 4 red; 1 red, 2 green, 6 blue; 2 green&lt;/code>&lt;/p></description></item><item><title>AoC 2023 Day 1: Calibrationinator</title><link>https://blog.jverkamp.com/2023/12/01/aoc-2023-day-1-calibrationinator/</link><pubDate>Fri, 01 Dec 2023 00:00:03 +0000</pubDate><guid>https://blog.jverkamp.com/2023/12/01/aoc-2023-day-1-calibrationinator/</guid><description>&lt;h2 id="source-day-1-trebuchethttpsadventofcodecom2023day1">Source: &lt;a href="https://adventofcode.com/2023/day/1" target="_blank" rel="noopener">Day 1: Trebuchet?!&lt;/a>&lt;/h2>
&lt;nav id="TableOfContents">
&lt;ul>
&lt;li>&lt;a href="#source-day-1-trebuchethttpsadventofcodecom2023day1">Source: &lt;a href="https://adventofcode.com/2023/day/1">Day 1: Trebuchet?!&lt;/a>&lt;/a>&lt;/li>
&lt;li>&lt;a href="#part-1">Part 1&lt;/a>&lt;/li>
&lt;li>&lt;a href="#part-2">Part 2&lt;/a>&lt;/li>
&lt;li>&lt;a href="#performance">Performance&lt;/a>&lt;/li>
&lt;/ul>
&lt;/nav>
&lt;h2 id="part-1">Part 1&lt;/h2>
&lt;blockquote>
&lt;p>Given a list of alphanumeric strings, find the first and last digit on each line (they may be the same). Concatenate each pair and sum them.&lt;/p>
&lt;/blockquote></description></item><item><title>Advent of Code 2023</title><link>https://blog.jverkamp.com/2023/12/01/advent-of-code-2023/</link><pubDate>Fri, 01 Dec 2023 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2023/12/01/advent-of-code-2023/</guid><description>&lt;p>Another year, another &lt;a href="https://blog.jverkamp.com/2015/12/01/advent-of-code/">Advent of Code&lt;/a>.&lt;/p>
&lt;p>Like last year, we&amp;rsquo;re doing Rust. I&amp;rsquo;ve really grown to love the language since last year&amp;hellip; and hopefully I&amp;rsquo;ve learned a bit more about how to write more &amp;lsquo;proper&amp;rsquo; Rust. I know I had some issues last year. Functional&amp;hellip; but it could be better.&lt;/p>
&lt;p>Let&amp;rsquo;s see how it goes!&lt;/p>
&lt;p>For full solutions, as always, I post to GitHub (including previous years and possibly some I haven&amp;rsquo;t written up yet): &lt;a href="https://github.com/jpverkamp/advent-of-code">jpverkamp/advent-of-code&lt;/a>&lt;/p></description></item></channel></rss>