<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Rust Solvers on jverkamp.com</title><link>https://blog.jverkamp.com/series/rust-solvers/</link><description>Recent content in Rust Solvers on jverkamp.com</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Mon, 21 Apr 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://blog.jverkamp.com/series/rust-solvers/atom.xml" rel="self" type="application/rss+xml"/><item><title>Solving Woodworm</title><link>https://blog.jverkamp.com/2025/04/21/solving-woodworm/</link><pubDate>Mon, 21 Apr 2025 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2025/04/21/solving-woodworm/</guid><description>&lt;p>Woodworm is a cute little &lt;a href="https://www.lexaloffle.com/pico-8.php" target="_blank" rel="noopener">PICO-8&lt;/a> puzzle game about a cute little worm&amp;hellip; that eats wood. You can play it for free right now &lt;a href="https://spratt.itch.io/woodworm" target="_blank" rel="noopener">right here&lt;/a>!&lt;/p>
&lt;p>The goal is to turn this:&lt;/p>
&lt;p>&lt;img src="level-1.png" alt="Level 1, before solving">&lt;/p>
&lt;p>Into this:&lt;/p>
&lt;p>&lt;img src="level-1-solved.png" alt="Level 1, after solving">&lt;/p>
&lt;p>There are a few rules to keep in mind:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>The block (and the worm) are affected by gravity&lt;/p>
&lt;/li>
&lt;li>
&lt;p>The block can be split by into multiple pieces by eating it completely apart&lt;/p>
&lt;p>&lt;img src="gravity.png" alt="Demonstrating gravity">&lt;/p>
&lt;/li>
&lt;li>
&lt;p>The worm can crawl up the side of blocks, so long as two (consecutive) segments of the worm are touching walls&lt;/p>
&lt;p>&lt;img src="climbing.png" alt="Demonstrating climbing">&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>And that&amp;rsquo;s really it.&lt;/p>
&lt;p>So let&amp;rsquo;s solve it!&lt;/p></description></item><item><title>Freshly (Frosted) Solved</title><link>https://blog.jverkamp.com/2025/01/23/freshly-frosted-solved/</link><pubDate>Thu, 23 Jan 2025 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2025/01/23/freshly-frosted-solved/</guid><description>And so it begins.
Freshly Frosted
It&amp;rsquo;s a cute little puzzle game about making a donut factory.
It&amp;rsquo;s a lot like Solving Cosmic Express in that it&amp;rsquo;s a &amp;lsquo;puzzle on rails&amp;rsquo;, you are basically routing around the grid from source to target. In the way, we have to go to certain tiles in a certain order (in this case, to apply toppings to our donuts).
Let&amp;rsquo;s do it!
The first section (starting with Basic layout) is the final state of the solution.</description></item><item><title>Solving Cosmic Express</title><link>https://blog.jverkamp.com/2024/09/02/solving-cosmic-express/</link><pubDate>Mon, 02 Sep 2024 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2024/09/02/solving-cosmic-express/</guid><description>&lt;p>Another &lt;a href="https://blog.jverkamp.com/series/rust-solvers/">Rust Solvers&lt;/a> puzzle: &lt;a href="https://store.steampowered.com/app/583270/Cosmic_Express/" target="_blank" rel="noopener">Cosmic Express&lt;/a>. Basically, it&amp;rsquo;s a routefinding puzzle. You have a train that needs a track from entrance to exit, picking up and dropping off cargo on the way.&lt;/p>
&lt;p>It&amp;rsquo;s actual a relatively simple puzzle, so far as things go, but one thing that&amp;rsquo;s interesting from a solving perspective is that branching paths &lt;em>really&lt;/em> don&amp;rsquo;t work great with my solver code. Paths just have a crazy branching factor when compared to (for example) &lt;a href="https://blog.jverkamp.com/2024/06/17/the-golf-peaks-of-solving/">playing one of a handful of cards&lt;/a>.&lt;/p>
&lt;p>But it&amp;rsquo;s still an interesting puzzle!&lt;/p></description></item><item><title>TestIT - Integration Testing for My Rust Solvers</title><link>https://blog.jverkamp.com/2024/08/19/testit-integration-testing-for-my-rust-solvers/</link><pubDate>Mon, 19 Aug 2024 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2024/08/19/testit-integration-testing-for-my-rust-solvers/</guid><description>&lt;p>One of the problems (of a sorts) I&amp;rsquo;ve been having with my series on &lt;a href="https://blog.jverkamp.com/series/rust-solvers/">Rust Solvers&lt;/a> is that, for each input puzzle, I need a way to save one or more &amp;lsquo;known good&amp;rsquo; solutions so that when I change and add new functionality, I can verify that I&amp;rsquo;ve either not changed the solution or found another valid one.&lt;/p>
&lt;p>&lt;a href="https://en.wikipedia.org/wiki/Integration%20tests">Integration tests&lt;/a> as it were.&lt;/p>
&lt;p>So far, I&amp;rsquo;d been building this &lt;a href="https://github.com/jpverkamp/rust-solvers/blob/ab65482417d0edfb9f24887d41ba3c724e4346e3/src/bin/golf-peaks.rs#L1064-L1202" target="_blank" rel="noopener">into each solution&lt;/a>. While this worked perfectly fine, it&amp;rsquo;s a bit annoying to copy and paste to each binary, and then have to edit each test case with the answers.&lt;/p>
&lt;nav id="TableOfContents">
&lt;ul>
&lt;li>&lt;a href="#an-example-run">An example run&lt;/a>&lt;/li>
&lt;li>&lt;a href="#command-line-options">Command line options&lt;/a>&lt;/li>
&lt;li>&lt;a href="#test-file-collection">Test file collection&lt;/a>&lt;/li>
&lt;li>&lt;a href="#parallel-execution--building-the-command">Parallel Execution + Building the Command&lt;/a>&lt;/li>
&lt;li>&lt;a href="#running-each-command-with-a-timeout">Running each command with a timeout&lt;/a>&lt;/li>
&lt;li>&lt;a href="#collecting-the-results">Collecting the results&lt;/a>&lt;/li>
&lt;li>&lt;a href="#summary">Summary&lt;/a>&lt;/li>
&lt;/ul>
&lt;/nav>
&lt;h2 id="an-example-run">An example run&lt;/h2>
&lt;p>Enter: &lt;a href="https://github.com/jpverkamp/testit" target="_blank" rel="noopener">testit&lt;/a>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># First run, without --db/--save for previous runs&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ testit &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> --command &lt;span style="color:#e6db74">&amp;#34;./target/release/golf-peaks&amp;#34;&lt;/span> &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> --files &lt;span style="color:#e6db74">&amp;#34;data/golf-peaks/**/*.txt&amp;#34;&lt;/span> &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> --timeout &lt;span style="color:#ae81ff">60&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>data/golf-peaks/1-1.txt: New success:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>1-↗
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">===&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>data/golf-peaks/1-10.txt: New success:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>1-↘ 3-↙ 2-↘
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">===&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>data/golf-peaks/9-8.txt: New success:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>1/3-↘ 1/2-↖ 1/↗ 2/1-↖ 1/1-↗
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">===&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>data/golf-peaks/9-9.txt: New success:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>1-↗ 1/↘ 1-↘ 4-↗ 3-↘ 1/1-↗
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">===&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>data/golf-peaks/Credits.txt: New success:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>4-↖ 5-↗ 3-↗ 6-↘
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">===&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Summary:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Successes: &lt;span style="color:#ae81ff">121&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#ae81ff">121&lt;/span> new&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Failures: &lt;span style="color:#ae81ff">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Timeouts: &lt;span style="color:#ae81ff">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># Later runs&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ testit &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> --command &lt;span style="color:#e6db74">&amp;#34;./target/release/golf-peaks&amp;#34;&lt;/span> &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> --files &lt;span style="color:#e6db74">&amp;#34;data/golf-peaks/**/*.txt&amp;#34;&lt;/span> &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> --timeout &lt;span style="color:#ae81ff">60&lt;/span> &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> --db testit/golf-peaks.json &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> --save
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Summary:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Successes: &lt;span style="color:#ae81ff">121&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span> new&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Failures: &lt;span style="color:#ae81ff">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Timeouts: &lt;span style="color:#ae81ff">0&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Pretty cool, I do think. 😄&lt;/p></description></item><item><title>The Golf (Peaks) of Solving</title><link>https://blog.jverkamp.com/2024/06/17/the-golf-peaks-of-solving/</link><pubDate>Mon, 17 Jun 2024 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2024/06/17/the-golf-peaks-of-solving/</guid><description>&lt;p>Another day (week? month?), another puzzle game.&lt;/p>
&lt;p>This time around, we&amp;rsquo;re going to solve &lt;a href="https://store.steampowered.com/app/923260/Golf_Peaks/" target="_blank" rel="noopener">Golf Peaks&lt;/a>. I picked this up a while ago on iOS, but only recently on Steam. It&amp;rsquo;s a cute little puzzle game themed around minigolf.&lt;/p>
&lt;p>&lt;img src="1.7-slopes.png" alt="">&lt;/p>
&lt;p>Basically, you&amp;rsquo;re on a grid and you have to get the ball (in the bottom in that screenshot above) to the flag (currently at the top). You have a set list of moves you can take, styled as cards&amp;ndash;all of which either move a certain number of tiles in a specific direction or possibly jump into the air (and fly over obstacles).&lt;/p>
&lt;p>It gets more complicated from there, but hopefully you have the basic idea. 😄&lt;/p></description></item><item><title>Solving Sokobond</title><link>https://blog.jverkamp.com/2024/04/06/solving-sokobond/</link><pubDate>Sat, 06 Apr 2024 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2024/04/06/solving-sokobond/</guid><description>&lt;p>Another solver that I&amp;rsquo;ve been working on, after &lt;a href="https://blog.jverkamp.com/2024/03/28/a-good-snowman-is-hard-to-...-solve/">A Good Snowman Is Hard To &amp;hellip; Solve?&lt;/a>. This time, we have &lt;a href="https://store.steampowered.com/app/290260/Sokobond/" target="_blank" rel="noopener">Sokobond&lt;/a>! It&amp;rsquo;s a &lt;a href="https://en.wikipedia.org/wiki/Sokobon">Sokobon&lt;/a>&amp;hellip; but with chemical bonds! Yeah, that&amp;rsquo;s a really good title.&lt;/p>
&lt;p>The basic idea is you have a field of elements with (chemical accurate) free electrons):&lt;/p>
&lt;p>&lt;img src="basic-image.png" alt="A basic level">&lt;/p>
&lt;p>Here we have 4 hydrogens (1 bond each) and a carbon (4 bonds). It should seem pretty obvious that the carbon should end up with a hydrogen on each end. The one last bit of interest: the element with the dashed border is the one we actually control, that will never change.&lt;/p>
&lt;p>This eventually gets more complicated, adding:&lt;/p>
&lt;ul>
&lt;li>Modifiers that are placed on the map between squares:
&lt;ul>
&lt;li>One that strengthens bonds, turning a single bond into double into triple&lt;/li>
&lt;li>One that weakens bonds, turning triple to double to single or breaking single bonds&lt;/li>
&lt;li>One that rotates bonds as you move by it&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>More elements, eventually hydrogen (1), oxygen (2), nitrogen (3), carbon (4), and helium (0)&lt;/li>
&lt;li>Solutions that require forming multiple elements at the same time&lt;/li>
&lt;/ul>
&lt;p>It&amp;rsquo;s a pretty neat puzzle game with 144 levels of increasing difficulty. Perfect to solve.&lt;/p>
&lt;hr></description></item><item><title>A Good Snowman Is Hard To ... Solve?</title><link>https://blog.jverkamp.com/2024/03/28/a-good-snowman-is-hard-to-...-solve/</link><pubDate>Thu, 28 Mar 2024 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2024/03/28/a-good-snowman-is-hard-to-...-solve/</guid><description>&lt;p>I enjoy puzzle games. I especially enjoy letting computers solve them for me 😄. Once upon a time, I set up a &lt;a href="https://blog.jverkamp.com/2022/10/16/stateful-solvers-and-iterators/">framework for solving random things&lt;/a>. Let&amp;rsquo;s solve some more.&lt;/p>
&lt;p>Today: &lt;a href="https://store.steampowered.com/app/316610/A_Good_Snowman_Is_Hard_To_Build/" target="_blank" rel="noopener">A Good Snowman Is Hard To Build&lt;/a>&lt;/p>
&lt;p>It&amp;rsquo;s a &lt;a href="https://en.wikipedia.org/wiki/Sokoban">Sokoban&lt;/a> about making snowmen! You can push snowballs of three sizes around, collecting snow if you roll over it. You can push smaller snowballs onto bigger ones, stacking them. Or back off, in order to get around one another.&lt;/p>
&lt;p>And that&amp;rsquo;s really it.&lt;/p>
&lt;p>There are some interesting twists (multiple snowmen, the ability to leave and re-enter levels, and even a whole second &amp;lsquo;hard mode&amp;rsquo;), but at a basic level, it&amp;rsquo;s just pushing.&lt;/p></description></item><item><title>Stateful Solvers and Iterators</title><link>https://blog.jverkamp.com/2022/10/16/stateful-solvers-and-iterators/</link><pubDate>Sun, 16 Oct 2022 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2022/10/16/stateful-solvers-and-iterators/</guid><description>&lt;p>&lt;a href="programming/languages/rust/">Rust&lt;/a>, yet again! Let&amp;rsquo;s take what we did last time with &lt;a href="https://blog.jverkamp.com/2022/10/04/solving-sudoku-again/">Solving Sudoku (again)&lt;/a> and improve the code structure a bit more.&lt;/p>
&lt;p>Goals:&lt;/p>
&lt;ul>
&lt;li>Create a &amp;lsquo;Solver&amp;rsquo; struct that can maintain state (such as how many states we&amp;rsquo;ve visited, how much time we&amp;rsquo;ve spent)&lt;/li>
&lt;li>Track the above stats&lt;/li>
&lt;li>Turn the &amp;lsquo;Solver&amp;rsquo; into an iterator which will iterate through given solutions (a single call will give the first solution or you can run through the iterator to get all of them)&lt;/li>
&lt;/ul>
&lt;p>If you&amp;rsquo;d like to follow along, I&amp;rsquo;ve started uploading the code here: &lt;a href="https://github.com/jpverkamp/rust-solvers" target="_blank" rel="noopener">https://github.com/jpverkamp/rust-solvers&lt;/a>&lt;/p></description></item><item><title>Solving Sudoku (again)</title><link>https://blog.jverkamp.com/2022/10/04/solving-sudoku-again/</link><pubDate>Tue, 04 Oct 2022 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2022/10/04/solving-sudoku-again/</guid><description>&lt;p>More &lt;a href="programming/languages/rust/">Rust&lt;/a>! This time, I want to go back to my post on &lt;a href="https://blog.jverkamp.com/2021/06/25/a-generic-brute-force-backtracking-solver/">A Generic Brute Force Backtracking Solver&lt;/a>. For one, because I&amp;rsquo;m learning Rust. For two, because there is a crate specifically for &lt;code>&lt;a href="https://docs.rs/im/latest/im/">im&lt;/a>&lt;/code>
mutable data structures. And for three, because I expect it will be much faster. We shall see!&lt;/p></description></item></channel></rss>