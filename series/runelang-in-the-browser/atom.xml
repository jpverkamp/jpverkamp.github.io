<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Runelang in the Browser on jverkamp.com</title><link>https://blog.jverkamp.com/series/runelang-in-the-browser/</link><description>Recent content in Runelang in the Browser on jverkamp.com</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Thu, 24 Feb 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://blog.jverkamp.com/series/runelang-in-the-browser/atom.xml" rel="self" type="application/rss+xml"/><item><title>Runelang: The Lexer</title><link>https://blog.jverkamp.com/2022/02/24/runelang-the-lexer/</link><pubDate>Thu, 24 Feb 2022 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2022/02/24/runelang-the-lexer/</guid><description>&lt;p>Let&amp;rsquo;s &lt;a href="https://en.wikipedia.org/wiki/Lexical_analysis">LEX&lt;/a>!&lt;/p>
&lt;p>So this is actually one of the easier parts of a programming language. In this case, we need to turn the raw text of a program into a sequence of tokens / lexemes that will be easier to parse. In this case, we want to:&lt;/p>
&lt;ul>
&lt;li>Remove all whitespace and comments&lt;/li>
&lt;li>Store the row and column with the token to make debugging easier&lt;/li>
&lt;/ul>
&lt;p>So let&amp;rsquo;s do it!&lt;/p></description></item><item><title>Runelang: Language Specification</title><link>https://blog.jverkamp.com/2022/02/23/runelang-language-specification/</link><pubDate>Wed, 23 Feb 2022 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2022/02/23/runelang-language-specification/</guid><description>&lt;p>&lt;a href="https://blog.jverkamp.com/2021/01/26/a-dsl-for-rendering-magic-circles-and-runes/">Previously&lt;/a>, I wrote a post about making a DSL in Ruby that could render magic circles/runes. It worked pretty well. I could turn things like this:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-ruby" data-lang="ruby">rune &lt;span style="color:#66d9ef">do&lt;/span>
scale &lt;span style="color:#ae81ff">0&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#ae81ff">9&lt;/span> &lt;span style="color:#66d9ef">do&lt;/span>
circle
polygon &lt;span style="color:#ae81ff">7&lt;/span>
star &lt;span style="color:#ae81ff">14&lt;/span>, &lt;span style="color:#ae81ff">3&lt;/span>
star &lt;span style="color:#ae81ff">7&lt;/span>, &lt;span style="color:#ae81ff">2&lt;/span>
children &lt;span style="color:#ae81ff">7&lt;/span>, &lt;span style="color:#e6db74">scale&lt;/span>: &lt;span style="color:#ae81ff">1&lt;/span>&lt;span style="color:#f92672">/&lt;/span>&lt;span style="color:#ae81ff">8&lt;/span>r, &lt;span style="color:#e6db74">offset&lt;/span>: &lt;span style="color:#ae81ff">1&lt;/span> &lt;span style="color:#66d9ef">do&lt;/span> &lt;span style="color:#f92672">|&lt;/span>i&lt;span style="color:#f92672">|&lt;/span>
circle
invert &lt;span style="color:#66d9ef">do&lt;/span>
text (&lt;span style="color:#ae81ff">0x2641&lt;/span> &lt;span style="color:#f92672">+&lt;/span> i)&lt;span style="color:#f92672">.&lt;/span>chr &lt;span style="color:#66d9ef">Encoding&lt;/span>&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#66d9ef">UTF_8&lt;/span>
&lt;span style="color:#66d9ef">end&lt;/span>
&lt;span style="color:#66d9ef">end&lt;/span>
&lt;span style="color:#66d9ef">end&lt;/span>
scale &lt;span style="color:#ae81ff">0&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#ae81ff">15&lt;/span> &lt;span style="color:#66d9ef">do&lt;/span>
translate &lt;span style="color:#e6db74">x&lt;/span>: &lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">2&lt;/span> &lt;span style="color:#66d9ef">do&lt;/span> circle; moon &lt;span style="color:#ae81ff">0&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#ae81ff">45&lt;/span> &lt;span style="color:#66d9ef">end&lt;/span>
circle
translate &lt;span style="color:#e6db74">x&lt;/span>: &lt;span style="color:#ae81ff">2&lt;/span> &lt;span style="color:#66d9ef">do&lt;/span> circle; moon &lt;span style="color:#ae81ff">0&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#ae81ff">55&lt;/span> &lt;span style="color:#66d9ef">end&lt;/span>
&lt;span style="color:#66d9ef">end&lt;/span>
&lt;span style="color:#66d9ef">end&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Into this:&lt;/p>
&lt;img src="https://blog.jverkamp.com/embeds/2022/old-astrology-and-moons.svg" />
&lt;p>But&amp;hellip; I decided to completely rewrite it. Now it&amp;rsquo;s an entirely separate language:&lt;/p>
&lt;script defer type="module">
import { render } from '/embeds/runelang/runelang/main.js'
import logging from '/embeds/runelang/lib/logging.js'
const log = logging.get("system")
let elInput = document.querySelector('[data-input]')
let elOutput = document.querySelector('[data-output]')
let elLog = document.querySelector('[data-log]')
elInput.value = `
define offsetmoon(x, phase) {
translate(x: x) {
circle
fill("black") moon(phase)
}
}
rune {
scale(0.9) {
circle
polygon(7)
star(14, 3)
star(7, 2)
radial(scale: 1/8, rotate: true) [
circle
invert character(0x2640 + i)
for i in 1..7
]
}
scale(0.15) stroke(2) {
circle
offsetmoon(-2, 0.55)
offsetmoon( 2, -0.55)
}
}
`
logging.register((msg) => {
let node = document.createElement('li')
node.innerText = msg
elLog.prepend(node)
})
logging.setMode('ERROR')
function doRender() {
elLog.innerHTML = ''
let input = elInput.value
try {
let svg = render(input)
elOutput.innerHTML = svg
log.awesome('IT WORKED!')
} catch (exception) {
console.log(exception)
}
}
function debounce(f, timeout = 500) {
let timer
return (...args) => {
clearTimeout(timer)
timer = setTimeout(() => f.apply(this, args), timeout)
}
}
document.addEventListener('keyup', debounce(doRender))
doRender()
&lt;/script>
&lt;style>
textarea[data-input],
div[data-output] {
width: 80%;
height: 600px;
padding: 1em;
}
td {
width: 45%;
vertical-align: top;
}
&lt;/style>
&lt;h3>Output&lt;/h3>
&lt;div data-output>&lt;/div>
&lt;h3>Source&lt;/h3>
&lt;textarea data-input>&lt;/textarea>
&lt;h3>Log (most recent messages first):&lt;/h2>
&lt;ul data-log>&lt;/ul></description></item></channel></rss>