<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Pictogenesis on jverkamp.com</title>
    <link>https://blog.jverkamp.com/series/pictogenesis/</link>
    <description>Recent content in Pictogenesis on jverkamp.com</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 24 Nov 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://blog.jverkamp.com/series/pictogenesis/atom.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Pictogenesis: Register Machine</title>
      <link>https://blog.jverkamp.com/2020/11/24/pictogenesis-register-machine/</link>
      <pubDate>Tue, 24 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2020/11/24/pictogenesis-register-machine/</guid>
      <description>&lt;p&gt;Okay. First &lt;a href=&#34;https://blog.jverkamp.com/2020/11/23/pictogenesis-the-idea/&#34;&gt;Pictogeneis&lt;/a&gt; machine: a register based machine. Today we&amp;rsquo;re going to create a very small language with a small number of registers that can read from the outside world, write colors, and act as temporary variables.&lt;/p&gt;

&lt;p&gt;Something like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-asm&#34; data-lang=&#34;asm&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;gt&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;?&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;t0&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;b&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;y&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;x&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;r&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;add&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;g&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;y&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;x&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;abs&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;b&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;x&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;inv&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;t0&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;g&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;add&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;r&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;g&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;x&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;sub&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;t0&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;b&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;r&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;mul&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;x&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;r&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;b&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;abs&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;y&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;x&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;figure&gt;
    &lt;img src=&#34;https://blog.jverkamp.com/embeds/2020/pictogenesis-register-1.png&#34;/&gt; 
&lt;/figure&gt;


&lt;p&gt;In each case, the first argument is the output and the rest are inputs. So:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# gt? t0 b y x r
if (b &amp;gt; y) {
    t0 = x;
} else {
    t0 = r;
}
 
# add g y x
g = y + x

# abs b x
b = |x|
...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Where &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; are the input point x and y mapped to the range [0, 1]; &lt;code&gt;r&lt;/code&gt;, &lt;code&gt;g&lt;/code&gt;, &lt;code&gt;b&lt;/code&gt; are the output colors in the same range and &lt;code&gt;t{n}&lt;/code&gt; are temporary registers just used during the program.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Pictogenesis: The Idea</title>
      <link>https://blog.jverkamp.com/2020/11/23/pictogenesis-the-idea/</link>
      <pubDate>Mon, 23 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2020/11/23/pictogenesis-the-idea/</guid>
      <description>&lt;p&gt;PICTOGENESIS REBORN!&lt;/p&gt;

&lt;p&gt;I don&amp;rsquo;t know if I ever actually posted it publically, but one of the ideas I&amp;rsquo;ve had percolating for the longest time is combining tiny &lt;a href=&#34;https://en.wikipedia.org/wiki/interpreters&#34;&gt;interpreters&lt;/a&gt; and &lt;a href=&#34;https://en.wikipedia.org/wiki/genetic%20algorithms&#34;&gt;genetic algorithms&lt;/a&gt; to make &lt;a href=&#34;https://en.wikipedia.org/wiki/generative%20art&#34;&gt;generative art&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The basic idea is to generate programs (in various styles) that can take x,y coordinates and return colors. Then apply that to every pixel on an image to make generative art. Once we have, figure out a way to mutate/breed the programs so that we can apply a genetic algorithm to them and make awesome images! Sort of like &lt;a href=&#34;https://electricsheep.org/&#34;&gt;Electric Sheep&lt;/a&gt; (that brings back memories).&lt;/p&gt;

&lt;p&gt;The evolution point of view was actually a pretty tricky problem, since programs can have a number of different representations. I could compile them to bytecode and mutate that, but how do I make most code at least potentially meaningful?&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>