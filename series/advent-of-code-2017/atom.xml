<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Advent of Code 2017 on jverkamp.com</title>
    <link>https://blog.jverkamp.com/series/advent-of-code-2017/</link>
    <description>Recent content in Advent of Code 2017 on jverkamp.com</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 08 Jan 2018 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://blog.jverkamp.com/series/advent-of-code-2017/atom.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Advent of Code 2017</title>
      <link>https://blog.jverkamp.com/2018/01/08/advent-of-code-2017/</link>
      <pubDate>Mon, 08 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2018/01/08/advent-of-code-2017/</guid>
      <description>&lt;p&gt;As I did with &lt;a href=&#34;https://blog.jverkamp.com/2018/01/03/advent-of-code-2016/&#34;&gt;last year&lt;/a&gt; / &lt;a href=&#34;https://blog.jverkamp.com/2018/01/03/advent-of-code-2016/&#34;&gt;yesterday&lt;/a&gt;, I&amp;rsquo;ve written up a series of posts for the Advent of Code 2017 problems. Again, I didn&amp;rsquo;t manage to write them up as I did them, but this time around I least I finished mostly on time.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>AoC 2017 Day 25: Turing</title>
      <link>https://blog.jverkamp.com/2017/12/25/aoc-2017-day-25-turing/</link>
      <pubDate>Mon, 25 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2017/12/25/aoc-2017-day-25-turing/</guid>
      <description>&lt;h3 id=&#34;source-the-halting-problem-http-adventofcode-com-2017-day-25&#34;&gt;Source: &lt;a href=&#34;http://adventofcode.com/2017/day/25&#34;&gt;The Halting Problem&lt;/a&gt;&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Part 1:&lt;/strong&gt; Implement a &lt;a href=&#34;https://en.wikipedia.org/wiki/Turing%20machine&#34;&gt;Turing machine&lt;/a&gt; defined as such:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;Begin in state A.
Perform a diagnostic checksum after 6 steps.

In state A:
  If the current value is 0:
    - Write the value 1.
    - Move one slot to the right.
    - Continue with state B.
  If the current value is 1:
    - Write the value 0.
    - Move one slot to the left.
    - Continue with state B.

...&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;What is the final number of &lt;code&gt;1s&lt;/code&gt; on the tape?&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>AoC 2017 Day 24: Maker Of Bridges</title>
      <link>https://blog.jverkamp.com/2017/12/24/aoc-2017-day-24-maker-of-bridges/</link>
      <pubDate>Sun, 24 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2017/12/24/aoc-2017-day-24-maker-of-bridges/</guid>
      <description>&lt;h3 id=&#34;source-electromagnetic-moat-http-adventofcode-com-2017-day-24&#34;&gt;Source: &lt;a href=&#34;http://adventofcode.com/2017/day/24&#34;&gt;Electromagnetic Moat&lt;/a&gt;&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Part 1:&lt;/strong&gt; Given a series of reversible components of the form &lt;code&gt;3/4&lt;/code&gt; (can connect a &lt;code&gt;3&lt;/code&gt; on one end to a &lt;code&gt;4&lt;/code&gt; on the other), form a bridge of components. The bridge&amp;rsquo;s strength is equal to the sum of component values. So &lt;code&gt;0/3, 3/7, and 7/4&lt;/code&gt; has a strength of &lt;code&gt;0+3 + 3+7 + 7+4 = 24&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;What is the strongest possible bridge?&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>AoC 2017 Day 23: Duetvmc</title>
      <link>https://blog.jverkamp.com/2017/12/23/aoc-2017-day-23-duetvmc/</link>
      <pubDate>Sat, 23 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2017/12/23/aoc-2017-day-23-duetvmc/</guid>
      <description>&lt;h3 id=&#34;source-coprocessor-conflagration-http-adventofcode-com-2017-day-23&#34;&gt;Source: &lt;a href=&#34;http://adventofcode.com/2017/day/23&#34;&gt;Coprocessor Conflagration&lt;/a&gt;&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Part 1:&lt;/strong&gt; Create a variation of the &lt;a href=&#34;https://blog.jverkamp.com/2017/12/18/aoc-2017-day-18-duetvm/&#34;&gt;previous DuetVM&lt;/a&gt; with only the following four instructions:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;set X Y&lt;/code&gt; sets register &lt;code&gt;X&lt;/code&gt; to &lt;code&gt;Y&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sub X Y&lt;/code&gt; set register &lt;code&gt;X&lt;/code&gt; to &lt;code&gt;X - Y&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mul X Y&lt;/code&gt; sets register &lt;code&gt;X&lt;/code&gt; to &lt;code&gt;X * Y&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;jnz X Y&lt;/code&gt; jumps with an offset of the value of &lt;code&gt;Y&lt;/code&gt;, iff &lt;code&gt;X&lt;/code&gt; is not equal to zero&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you run the given program, how many times is &lt;code&gt;mul&lt;/code&gt; invoked?&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>AoC 2017 Day 22: Langton&#39;s Ant</title>
      <link>https://blog.jverkamp.com/2017/12/22/aoc-2017-day-22-langtons-ant/</link>
      <pubDate>Fri, 22 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2017/12/22/aoc-2017-day-22-langtons-ant/</guid>
      <description>&lt;h3 id=&#34;source-sporifica-virus-http-adventofcode-com-2017-day-22&#34;&gt;Source: &lt;a href=&#34;http://adventofcode.com/2017/day/22&#34;&gt;Sporifica Virus&lt;/a&gt;&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Part 1:&lt;/strong&gt; Implement a &lt;a href=&#34;https://en.wikipedia.org/wiki/cellular%20automaton&#34;&gt;cellular automaton&lt;/a&gt; on an infinite grid of &lt;code&gt;.&lt;/code&gt; and &lt;code&gt;#&lt;/code&gt; pixels such that:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Start at &lt;code&gt;(0, 0)&lt;/code&gt;, facing &lt;code&gt;Up&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Repeat:

&lt;ul&gt;
&lt;li&gt;If the cursor is on &lt;code&gt;.&lt;/code&gt; swap it to &lt;code&gt;#&lt;/code&gt; and turn &lt;code&gt;Left&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;If the cursor is on &lt;code&gt;#&lt;/code&gt; swap it to &lt;code&gt;.&lt;/code&gt; and turn &lt;code&gt;Right&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Either way, after turning, move forward once&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;After 10,000 iterations, how many pixels were turned from &lt;code&gt;.&lt;/code&gt; to &lt;code&gt;#&lt;/code&gt;?&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>AoC 2017 Day 21: Fractal Expander</title>
      <link>https://blog.jverkamp.com/2017/12/21/aoc-2017-day-21-fractal-expander/</link>
      <pubDate>Thu, 21 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2017/12/21/aoc-2017-day-21-fractal-expander/</guid>
      <description>&lt;h3 id=&#34;source-fractal-art-http-adventofcode-com-2017-day-21&#34;&gt;Source: &lt;a href=&#34;http://adventofcode.com/2017/day/21&#34;&gt;Fractal Art&lt;/a&gt;&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Part 1:&lt;/strong&gt; Start with an input image made of &lt;code&gt;.&lt;/code&gt; and &lt;code&gt;#&lt;/code&gt; pixels. For &lt;code&gt;n&lt;/code&gt; iterations, break the image into blocks:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;If the current size is even, break the image into 2x2 chunks and replace each with a 3x3 chunk&lt;/li&gt;
&lt;li&gt;If the current size is odd, break the image into 3x3 chunks and replace each with a 4x4 chunk&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The replacement rules will be specified in the following format (example is a 3x3 -&amp;gt; 4x4 rule):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;.#./..#/### =&amp;gt; #..#/..../..../#..#
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In that example, replace this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;.#.
..#
###
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;With this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#..#
....
....
#..#
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Any rotation or reflection of a chunk can be used to match the input of a replacement rule.&lt;/p&gt;

&lt;p&gt;After &lt;code&gt;n = 18&lt;/code&gt; iterations, how many &lt;code&gt;#&lt;/code&gt; pixels are there?&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>AoC 2017 Day 20: Miniature Universe Simulator</title>
      <link>https://blog.jverkamp.com/2017/12/20/aoc-2017-day-20-miniature-universe-simulator/</link>
      <pubDate>Wed, 20 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2017/12/20/aoc-2017-day-20-miniature-universe-simulator/</guid>
      <description>&lt;h3 id=&#34;source-particle-swarm-http-adventofcode-com-2017-day-20&#34;&gt;Source: &lt;a href=&#34;http://adventofcode.com/2017/day/20&#34;&gt;Particle Swarm&lt;/a&gt;&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Part 1:&lt;/strong&gt; Given the initial position, velocity, and acceleration of a large number of particles, which particle will stay the closet to the origin as the simulation runs to infinity?&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>AoC 2017 Day 19: Networkout</title>
      <link>https://blog.jverkamp.com/2017/12/19/aoc-2017-day-19-networkout/</link>
      <pubDate>Tue, 19 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2017/12/19/aoc-2017-day-19-networkout/</guid>
      <description>&lt;h3 id=&#34;source-a-series-of-tubes-http-adventofcode-com-2017-day-19&#34;&gt;Source: &lt;a href=&#34;http://adventofcode.com/2017/day/19&#34;&gt;A Series of Tubes&lt;/a&gt;&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Part 1:&lt;/strong&gt; Take a network diagram of the following form:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;    |          
    |  +--+    
    A  |  C    
F---|--|-E---+
    |  |  |  D
    +B-+  +--+&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Starting at the single node at the top and following the lines, what order would the nodes be visited in?&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>AoC 2017 Day 18: Duetvm</title>
      <link>https://blog.jverkamp.com/2017/12/18/aoc-2017-day-18-duetvm/</link>
      <pubDate>Mon, 18 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2017/12/18/aoc-2017-day-18-duetvm/</guid>
      <description>&lt;h3 id=&#34;source-duet-http-adventofcode-com-2017-day-18&#34;&gt;Source: &lt;a href=&#34;http://adventofcode.com/2017/day/18&#34;&gt;Duet&lt;/a&gt;&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Part 1:&lt;/strong&gt; Create a virtual machine with the following instruction set:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;snd X&lt;/code&gt; plays a sound with a frequency equal to the value of &lt;code&gt;X&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;set X Y&lt;/code&gt; sets register &lt;code&gt;X&lt;/code&gt; to &lt;code&gt;Y&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;add X Y&lt;/code&gt; set register &lt;code&gt;X&lt;/code&gt; to &lt;code&gt;X + Y&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mul X Y&lt;/code&gt; sets register &lt;code&gt;X&lt;/code&gt; to &lt;code&gt;X * Y&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mod X Y&lt;/code&gt; sets register &lt;code&gt;X&lt;/code&gt; to &lt;code&gt;X mod Y&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;rcv X&lt;/code&gt; recovers the frequency of the last sound played, if &lt;code&gt;X&lt;/code&gt; is not zero&lt;/li&gt;
&lt;li&gt;&lt;code&gt;jgz X Y&lt;/code&gt; jumps with an offset of the value of &lt;code&gt;Y&lt;/code&gt;, iff &lt;code&gt;X&lt;/code&gt; is greater than zero&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In most cases, &lt;code&gt;X&lt;/code&gt; and &lt;code&gt;Y&lt;/code&gt; can be either an integer value or a register.&lt;/p&gt;

&lt;p&gt;What is the value recovered by &lt;code&gt;rcv&lt;/code&gt; the first time &lt;code&gt;X&lt;/code&gt; is non-zero?&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>AoC 2017 Day 17: Spinlock</title>
      <link>https://blog.jverkamp.com/2017/12/17/aoc-2017-day-17-spinlock/</link>
      <pubDate>Sun, 17 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2017/12/17/aoc-2017-day-17-spinlock/</guid>
      <description>&lt;h3 id=&#34;source-spinlock-http-adventofcode-com-2017-day-17-same&#34;&gt;Source: &lt;a href=&#34;http://adventofcode.com/2017/day/17&#34;&gt;Spinlock&lt;/a&gt;&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:same&#34;&gt;&lt;a href=&#34;#fn:same&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Part 1:&lt;/strong&gt; Start with a &lt;a href=&#34;https://en.wikipedia.org/wiki/circular%20buffer&#34;&gt;circular buffer&lt;/a&gt; containing &lt;code&gt;[0]&lt;/code&gt; and &lt;code&gt;current_position = 0&lt;/code&gt;. For &lt;code&gt;n&lt;/code&gt; from &lt;code&gt;1&lt;/code&gt; up to &lt;code&gt;2017&lt;/code&gt;:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Step forward &lt;code&gt;steps&lt;/code&gt; (puzzle input)&lt;/li&gt;
&lt;li&gt;Input the next value for &lt;code&gt;n&lt;/code&gt;, set &lt;code&gt;current_position&lt;/code&gt; to &lt;code&gt;n&lt;/code&gt;, increment &lt;code&gt;n&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Repeat&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;What is the value after 2017?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;It&amp;rsquo;s a bit weird to describe, but the given example helps (assume &lt;code&gt;steps = 3&lt;/code&gt;):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;(0)
0 (1)
0 (2) 1
0  2 (3) 1
0  2 (4) 3  1
0 (5) 2  4  3  1
0  5  2  4  3 (6) 1
0  5 (7) 2  4  3  6  1
0  5  7  2  4  3 (8) 6  1
0 (9) 5  7  2  4  3  8  6  1&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>AoC 2017 Day 16: Swing Your Partner</title>
      <link>https://blog.jverkamp.com/2017/12/16/aoc-2017-day-16-swing-your-partner/</link>
      <pubDate>Sat, 16 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2017/12/16/aoc-2017-day-16-swing-your-partner/</guid>
      <description>&lt;h3 id=&#34;source-permutation-promenade-http-adventofcode-com-2017-day-16&#34;&gt;Source: &lt;a href=&#34;http://adventofcode.com/2017/day/16&#34;&gt;Permutation Promenade&lt;/a&gt;&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Part 1:&lt;/strong&gt; Running on the string &lt;code&gt;a...p&lt;/code&gt; apply a series of the following commands:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;sX&lt;/code&gt; rotates the string right by &lt;code&gt;X&lt;/code&gt; positions&lt;/li&gt;
&lt;li&gt;&lt;code&gt;xX/Y&lt;/code&gt; swaps positions &lt;code&gt;X&lt;/code&gt; and &lt;code&gt;Y&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pA/B&lt;/code&gt; swaps the letters &lt;code&gt;A&lt;/code&gt; and &lt;code&gt;B&lt;/code&gt; no matter their positions&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>AoC 2017 Day 15: Two Generators</title>
      <link>https://blog.jverkamp.com/2017/12/15/aoc-2017-day-15-two-generators/</link>
      <pubDate>Fri, 15 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2017/12/15/aoc-2017-day-15-two-generators/</guid>
      <description>&lt;h3 id=&#34;source-dueling-generators-http-adventofcode-com-2017-day-15&#34;&gt;Source: &lt;a href=&#34;http://adventofcode.com/2017/day/15&#34;&gt;Dueling Generators&lt;/a&gt;&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Part 1:&lt;/strong&gt; Create a pair of generators &lt;code&gt;A&lt;/code&gt; and &lt;code&gt;B&lt;/code&gt; where:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;latex-inline&#34;&gt;A_n = 16807 A_{n-1} \mod 2147483647&lt;/span&gt;
&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;latex-inline&#34;&gt;B_n = 48271 B_{n-1} \mod 2147483647&lt;/span&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;How many of the first 40 million values have matching values for the low 16 bits of each generator?&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>AoC 2017 Day 14: Knot Hash Gridinator</title>
      <link>https://blog.jverkamp.com/2017/12/14/aoc-2017-day-14-knot-hash-gridinator/</link>
      <pubDate>Thu, 14 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2017/12/14/aoc-2017-day-14-knot-hash-gridinator/</guid>
      <description>&lt;h3 id=&#34;source-disk-defragmentation-http-adventofcode-com-2017-day-14&#34;&gt;Source: &lt;a href=&#34;http://adventofcode.com/2017/day/14&#34;&gt;Disk Defragmentation&lt;/a&gt;&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Part 1:&lt;/strong&gt; Create a 128x128 grid. Generate each row by taking the &lt;a href=&#34;https://blog.jverkamp.com/2017/12/10/aoc-2017-day-10-knot-cool/&#34;&gt;knot hash&lt;/a&gt; of &lt;code&gt;salt-{index}&lt;/code&gt;. The bits of the hash represent if a tile in the grid is &lt;code&gt;free&lt;/code&gt; (&lt;code&gt;0&lt;/code&gt;) or &lt;code&gt;used&lt;/code&gt; (&lt;code&gt;1&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;Given your salt as input, how many squares are &lt;code&gt;used&lt;/code&gt;?&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>AoC 2017 Day 13: Firewall Puncher</title>
      <link>https://blog.jverkamp.com/2017/12/13/aoc-2017-day-13-firewall-puncher/</link>
      <pubDate>Wed, 13 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2017/12/13/aoc-2017-day-13-firewall-puncher/</guid>
      <description>&lt;h3 id=&#34;source-packet-scanners-http-adventofcode-com-2017-day-13&#34;&gt;Source: &lt;a href=&#34;http://adventofcode.com/2017/day/13&#34;&gt;Packet Scanners&lt;/a&gt;&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Part 1:&lt;/strong&gt; Multiple layers are defined with rules of the form:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;{index}: {depth}&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Each layer will start at position 0, then once per tick will advance towards depth. Once it hits &lt;code&gt;depth-1&lt;/code&gt;, it will return to position 0, taking &lt;code&gt;2*depth-1&lt;/code&gt; per full cycle.&lt;/p&gt;

&lt;p&gt;Calculate the sum of &lt;code&gt;index * depth&lt;/code&gt; for any scanners that are at position &lt;code&gt;0&lt;/code&gt; when you pass through them given an initial starting time.&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>AoC 2017 Day 12: Gridlock</title>
      <link>https://blog.jverkamp.com/2017/12/12/aoc-2017-day-12-gridlock/</link>
      <pubDate>Tue, 12 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2017/12/12/aoc-2017-day-12-gridlock/</guid>
      <description>&lt;h3 id=&#34;source-digital-plumber-http-adventofcode-com-2017-day-12&#34;&gt;Source: &lt;a href=&#34;http://adventofcode.com/2017/day/12&#34;&gt;Digital Plumber&lt;/a&gt;&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Part 1:&lt;/strong&gt; A network of nodes is defined by a list of lines formatted as such:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;2 &amp;lt;-&amp;gt; 0, 3, 4
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In this case, node &lt;code&gt;2&lt;/code&gt; is connected to &lt;code&gt;0&lt;/code&gt;, &lt;code&gt;3&lt;/code&gt;, and &lt;code&gt;4&lt;/code&gt; and vice versa.&lt;/p&gt;

&lt;p&gt;How many nodes are in the group that contains the node &lt;code&gt;0&lt;/code&gt;?&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>AoC 2017 Day 11: It&#39;s Full Of Hexagons</title>
      <link>https://blog.jverkamp.com/2017/12/11/aoc-2017-day-11-its-full-of-hexagons/</link>
      <pubDate>Mon, 11 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2017/12/11/aoc-2017-day-11-its-full-of-hexagons/</guid>
      <description>&lt;h3 id=&#34;source-hex-ed-http-adventofcode-com-2017-day-11-punny&#34;&gt;Source: &lt;a href=&#34;http://adventofcode.com/2017/day/11&#34;&gt;Hex Ed&lt;/a&gt;&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:punny&#34;&gt;&lt;a href=&#34;#fn:punny&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Part 1:&lt;/strong&gt; Work on a hex grid:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  \ n  /
nw +--+ ne
  /    \
-+      +-
  \    /
sw +--+ se
  / s  \
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Given a series of steps (&lt;code&gt;n&lt;/code&gt;, &lt;code&gt;se&lt;/code&gt;, &lt;code&gt;ne&lt;/code&gt;) etc, how many steps away from the origin do you end up?&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>AoC 2017 Day 10: Knot Cool</title>
      <link>https://blog.jverkamp.com/2017/12/10/aoc-2017-day-10-knot-cool/</link>
      <pubDate>Sun, 10 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2017/12/10/aoc-2017-day-10-knot-cool/</guid>
      <description>&lt;h3 id=&#34;source-knot-hash-http-adventofcode-com-2017-day-10&#34;&gt;Source: &lt;a href=&#34;http://adventofcode.com/2017/day/10&#34;&gt;Knot Hash&lt;/a&gt;&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Part 1:&lt;/strong&gt; Starting with a list of the numbers from &lt;code&gt;1&lt;/code&gt; to &lt;code&gt;n&lt;/code&gt; and a list of &lt;code&gt;lengths&lt;/code&gt; (as input):&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Initialize &lt;code&gt;current_position&lt;/code&gt; and &lt;code&gt;skip_size&lt;/code&gt; to &lt;code&gt;0&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;For each &lt;code&gt;length&lt;/code&gt; element in the &lt;code&gt;lengths&lt;/code&gt; list:

&lt;ol&gt;
&lt;li&gt;Reverse the first &lt;code&gt;length&lt;/code&gt; elements of the list (starting at &lt;code&gt;current_position&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Move forward by &lt;code&gt;length&lt;/code&gt; plus &lt;code&gt;skip_size&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Increment &lt;code&gt;skip_size&lt;/code&gt; by 1&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;After applying the above algorithm, what is the product of the first two elements in the list (from the original first position, not the &lt;code&gt;current_position&lt;/code&gt;)?&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>AoC 2017 Day 9: Garbage Gobbler</title>
      <link>https://blog.jverkamp.com/2017/12/09/aoc-2017-day-9-garbage-gobbler/</link>
      <pubDate>Sat, 09 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2017/12/09/aoc-2017-day-9-garbage-gobbler/</guid>
      <description>&lt;h3 id=&#34;source-stream-processing-http-adventofcode-com-2017-day-9&#34;&gt;Source: &lt;a href=&#34;http://adventofcode.com/2017/day/9&#34;&gt;Stream Processing&lt;/a&gt;&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Part 1:&lt;/strong&gt; An input stream can contain:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;groups&lt;/code&gt; are delimited by &lt;code&gt;{&lt;/code&gt; and &lt;code&gt;}&lt;/code&gt;, &lt;code&gt;groups&lt;/code&gt; are nestable and may contain &lt;code&gt;garbage&lt;/code&gt; or data (objects within a &lt;code&gt;group&lt;/code&gt; are &lt;a href=&#34;https://en.wikipedia.org/wiki/comma%20delimited&#34;&gt;comma delimited&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;garbage&lt;/code&gt; is delimited by &lt;code&gt;&amp;lt;&lt;/code&gt; and &lt;code&gt;&amp;gt;&lt;/code&gt;, &lt;code&gt;groups&lt;/code&gt; cannot be nested within &lt;code&gt;garbage&lt;/code&gt;, a &lt;code&gt;!&lt;/code&gt; within &lt;code&gt;garbage&lt;/code&gt; is an &lt;a href=&#34;https://en.wikipedia.org/wiki/escape%20character&#34;&gt;escape character&lt;/a&gt;: &lt;code&gt;!&amp;gt;&lt;/code&gt; does not end a garbage segment&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The score of a single group is equal to how many times it is nested (the innermost group of &lt;code&gt;{{{}}}&lt;/code&gt; has score &lt;code&gt;3&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;The score of a stream is the sum of the scores of all groups in that stream.&lt;/p&gt;

&lt;p&gt;What is the total score of your input?&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>AoC 2017 Day 8: Conditiputer</title>
      <link>https://blog.jverkamp.com/2017/12/08/aoc-2017-day-8-conditiputer/</link>
      <pubDate>Fri, 08 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2017/12/08/aoc-2017-day-8-conditiputer/</guid>
      <description>&lt;h3 id=&#34;source-i-heard-you-like-registers-http-adventofcode-com-2017-day-8-yo&#34;&gt;Source: &lt;a href=&#34;http://adventofcode.com/2017/day/8&#34;&gt;I Heard You Like Registers&lt;/a&gt;&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:yo&#34;&gt;&lt;a href=&#34;#fn:yo&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Part 1:&lt;/strong&gt; Given a set of registers initialized to 0, interpret a series of instruction of the form:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;{register} (inc|dec) {number|register} if {number|register} (&amp;lt;|&amp;lt;=|=|!=|=&amp;gt;|&amp;gt;) {number|register}&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;What is the largest value in any register?&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>AoC 2017 Day 7: Tree</title>
      <link>https://blog.jverkamp.com/2017/12/07/aoc-2017-day-7-tree/</link>
      <pubDate>Thu, 07 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2017/12/07/aoc-2017-day-7-tree/</guid>
      <description>&lt;h3 id=&#34;source-recursive-circus-http-adventofcode-com-2017-day-7&#34;&gt;Source: &lt;a href=&#34;http://adventofcode.com/2017/day/7&#34;&gt;Recursive Circus&lt;/a&gt;&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Part 1:&lt;/strong&gt; A tree is defined as such:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;node (weight) -&amp;gt; child1, child2, ...&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;node (weight)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Where a &lt;code&gt;node&lt;/code&gt; always has a weight, but may or may not have child nodes.&lt;/p&gt;

&lt;p&gt;What is the name of the root &lt;code&gt;node&lt;/code&gt; of the tree (the node without a parent)?&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>AoC 2017 Day 6: Tightrope</title>
      <link>https://blog.jverkamp.com/2017/12/06/aoc-2017-day-6-tightrope/</link>
      <pubDate>Wed, 06 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2017/12/06/aoc-2017-day-6-tightrope/</guid>
      <description>&lt;h3 id=&#34;source-memory-reallocation-http-adventofcode-com-2017-day-6&#34;&gt;Source: &lt;a href=&#34;http://adventofcode.com/2017/day/6&#34;&gt;Memory Reallocation&lt;/a&gt;&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Part 1:&lt;/strong&gt; Start with &lt;code&gt;n&lt;/code&gt; stacks of different sizes. Take the largest block and distribute its items starting with &lt;code&gt;n+1&lt;/code&gt; and looping around. How many iterations of this does it take before you see a state you&amp;rsquo;ve seen before?&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>AoC 2017 Day 5: 21 Jump Street</title>
      <link>https://blog.jverkamp.com/2017/12/05/aoc-2017-day-5-21-jump-street/</link>
      <pubDate>Tue, 05 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2017/12/05/aoc-2017-day-5-21-jump-street/</guid>
      <description>&lt;h3 id=&#34;source-a-maze-of-twisty-trampolines-all-alike-http-adventofcode-com-2017-day-5-cca&#34;&gt;Source: &lt;a href=&#34;http://adventofcode.com/2017/day/5&#34;&gt;A Maze of Twisty Trampolines, All Alike&lt;/a&gt;&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:cca&#34;&gt;&lt;a href=&#34;#fn:cca&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Part 1:&lt;/strong&gt; Interpret a program made entirely of jump instructions: each instruction is how many steps to jump. Any time you use an instruction to jump, increase the value of that jump by 1 for next time. How many total steps does it take to escape (jump out of bounds)?&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>AoC 2017 Day 4: Password Validator</title>
      <link>https://blog.jverkamp.com/2017/12/04/aoc-2017-day-4-password-validator/</link>
      <pubDate>Mon, 04 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2017/12/04/aoc-2017-day-4-password-validator/</guid>
      <description>&lt;h3 id=&#34;source-high-entropy-passphrases-http-adventofcode-com-2017-day-4&#34;&gt;Source: &lt;a href=&#34;http://adventofcode.com/2017/day/4&#34;&gt;High-Entropy Passphrases&lt;/a&gt;&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Part 1:&lt;/strong&gt; Given a list of &lt;a href=&#34;https://en.wikipedia.org/wiki/passphrases&#34;&gt;passphrases&lt;/a&gt;, count how many contain no duplicate words.&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>AoC 2017 Day 3: Spiraly</title>
      <link>https://blog.jverkamp.com/2017/12/03/aoc-2017-day-3-spiraly/</link>
      <pubDate>Sun, 03 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2017/12/03/aoc-2017-day-3-spiraly/</guid>
      <description>&lt;h3 id=&#34;source-spiral-memory-http-adventofcode-com-2017-day-3&#34;&gt;Source: &lt;a href=&#34;http://adventofcode.com/2017/day/3&#34;&gt;Spiral Memory&lt;/a&gt;&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Part 1:&lt;/strong&gt; Create a grid in a spiral pattern like so:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;17  16  15  14  13
18   5   4   3  12
19   6   1   2  11
20   7   8   9  10
21  22  23---&amp;gt; ...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Given a specific index, what is the &lt;a href=&#34;https://en.wikipedia.org/wiki/Manhattan%20Distance&#34;&gt;Manhattan Distance&lt;/a&gt; from that point to the origin (&lt;code&gt;1&lt;/code&gt;)?&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>AoC 2017 Day 2: Check It</title>
      <link>https://blog.jverkamp.com/2017/12/02/aoc-2017-day-2-check-it/</link>
      <pubDate>Sat, 02 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2017/12/02/aoc-2017-day-2-check-it/</guid>
      <description>&lt;h3 id=&#34;source-corruption-checksum-http-adventofcode-com-2017-day-2&#34;&gt;Source: &lt;a href=&#34;http://adventofcode.com/2017/day/2&#34;&gt;Corruption Checksum&lt;/a&gt;&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Part 1:&lt;/strong&gt; The checksum of a list of numbers is the difference between the largest and smallest number in the row. What is the sum of checksums of a file containing many such lists?&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>AoC 2017 Day 1: Ahctpat</title>
      <link>https://blog.jverkamp.com/2017/12/01/aoc-2017-day-1-ahctpat/</link>
      <pubDate>Fri, 01 Dec 2017 00:00:03 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2017/12/01/aoc-2017-day-1-ahctpat/</guid>
      <description>&lt;h3 id=&#34;source-inverse-captcha-http-adventofcode-com-2017-day-1&#34;&gt;Source: &lt;a href=&#34;http://adventofcode.com/2017/day/1&#34;&gt;Inverse Captcha&lt;/a&gt;&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Part 1:&lt;/strong&gt; Given a number, what is the sum of pairs of digits that match (wrapping the last digit around to the first)?&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>AoC 2017: Library Functions</title>
      <link>https://blog.jverkamp.com/2017/12/01/aoc-2017-library-functions/</link>
      <pubDate>Fri, 01 Dec 2017 00:00:02 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2017/12/01/aoc-2017-library-functions/</guid>
      <description>&lt;p&gt;As mentioned in the &lt;a href=&#34;https://blog.jverkamp.com/2018/01/08/advent-of-code-2017/&#34;&gt;main post&lt;/a&gt;, I&amp;rsquo;m structuring my solutions a bit differently this year. Rather than repeating the same relatively lengthy header in each function, we&amp;rsquo;re going to have a few shared files that can be imported or used for every problem.&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>