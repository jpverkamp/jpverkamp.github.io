<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Advent of Code 2017 on jverkamp.com</title><link>https://blog.jverkamp.com/series/advent-of-code-2017/</link><description>Recent content in Advent of Code 2017 on jverkamp.com</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Mon, 08 Jan 2018 00:00:00 +0000</lastBuildDate><atom:link href="https://blog.jverkamp.com/series/advent-of-code-2017/atom.xml" rel="self" type="application/rss+xml"/><item><title>Advent of Code 2017</title><link>https://blog.jverkamp.com/2018/01/08/advent-of-code-2017/</link><pubDate>Mon, 08 Jan 2018 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2018/01/08/advent-of-code-2017/</guid><description>&lt;p>As I did with &lt;a href="https://blog.jverkamp.com/2018/01/03/advent-of-code-2016/">last year&lt;/a> / &lt;a href="https://blog.jverkamp.com/2018/01/03/advent-of-code-2016/">yesterday&lt;/a>, I&amp;rsquo;ve written up a series of posts for the Advent of Code 2017 problems. Again, I didn&amp;rsquo;t manage to write them up as I did them, but this time around I least I finished mostly on time.&lt;/p></description></item><item><title>AoC 2017 Day 25: Turing</title><link>https://blog.jverkamp.com/2017/12/25/aoc-2017-day-25-turing/</link><pubDate>Mon, 25 Dec 2017 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2017/12/25/aoc-2017-day-25-turing/</guid><description>&lt;h3 id="source-the-halting-problemhttpadventofcodecom2017day25">Source: &lt;a href="http://adventofcode.com/2017/day/25" target="_blank" rel="noopener">The Halting Problem&lt;/a>&lt;/h3>
&lt;blockquote>
&lt;p>&lt;strong>Part 1:&lt;/strong> Implement a &lt;a href="https://en.wikipedia.org/wiki/Turing%20machine">Turing machine&lt;/a> defined as such:&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-text" data-lang="text">&lt;/code>&lt;/pre>&lt;/div>&lt;/blockquote>
&lt;p>Begin in state A.
Perform a diagnostic checksum after 6 steps.&lt;/p>
&lt;p>In state A:
If the current value is 0:
- Write the value 1.
- Move one slot to the right.
- Continue with state B.
If the current value is 1:
- Write the value 0.
- Move one slot to the left.
- Continue with state B.&lt;/p>
&lt;p>&amp;hellip;&lt;/p></description></item><item><title>AoC 2017 Day 24: Maker Of Bridges</title><link>https://blog.jverkamp.com/2017/12/24/aoc-2017-day-24-maker-of-bridges/</link><pubDate>Sun, 24 Dec 2017 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2017/12/24/aoc-2017-day-24-maker-of-bridges/</guid><description>&lt;h3 id="source-electromagnetic-moathttpadventofcodecom2017day24">Source: &lt;a href="http://adventofcode.com/2017/day/24" target="_blank" rel="noopener">Electromagnetic Moat&lt;/a>&lt;/h3>
&lt;blockquote>
&lt;p>&lt;strong>Part 1:&lt;/strong> Given a series of reversible components of the form &lt;code>3/4&lt;/code> (can connect a &lt;code>3&lt;/code> on one end to a &lt;code>4&lt;/code> on the other), form a bridge of components. The bridge&amp;rsquo;s strength is equal to the sum of component values. So &lt;code>0/3, 3/7, and 7/4&lt;/code> has a strength of &lt;code>0+3 + 3+7 + 7+4 = 24&lt;/code>.&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>What is the strongest possible bridge?&lt;/p>
&lt;/blockquote></description></item><item><title>AoC 2017 Day 23: Duetvmc</title><link>https://blog.jverkamp.com/2017/12/23/aoc-2017-day-23-duetvmc/</link><pubDate>Sat, 23 Dec 2017 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2017/12/23/aoc-2017-day-23-duetvmc/</guid><description>&lt;h3 id="source-coprocessor-conflagrationhttpadventofcodecom2017day23">Source: &lt;a href="http://adventofcode.com/2017/day/23" target="_blank" rel="noopener">Coprocessor Conflagration&lt;/a>&lt;/h3>
&lt;blockquote>
&lt;p>&lt;strong>Part 1:&lt;/strong> Create a variation of the &lt;a href="https://blog.jverkamp.com/2017/12/18/aoc-2017-day-18-duetvm/">previous DuetVM&lt;/a> with only the following four instructions:&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;ul>
&lt;li>&lt;code>set X Y&lt;/code> sets register &lt;code>X&lt;/code> to &lt;code>Y&lt;/code>&lt;/li>
&lt;li>&lt;code>sub X Y&lt;/code> set register &lt;code>X&lt;/code> to &lt;code>X - Y&lt;/code>&lt;/li>
&lt;li>&lt;code>mul X Y&lt;/code> sets register &lt;code>X&lt;/code> to &lt;code>X * Y&lt;/code>&lt;/li>
&lt;li>&lt;code>jnz X Y&lt;/code> jumps with an offset of the value of &lt;code>Y&lt;/code>, iff &lt;code>X&lt;/code> is not equal to zero&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;blockquote>
&lt;p>If you run the given program, how many times is &lt;code>mul&lt;/code> invoked?&lt;/p>
&lt;/blockquote></description></item><item><title>AoC 2017 Day 22: Langton's Ant</title><link>https://blog.jverkamp.com/2017/12/22/aoc-2017-day-22-langtons-ant/</link><pubDate>Fri, 22 Dec 2017 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2017/12/22/aoc-2017-day-22-langtons-ant/</guid><description>&lt;h3 id="source-sporifica-virushttpadventofcodecom2017day22">Source: &lt;a href="http://adventofcode.com/2017/day/22" target="_blank" rel="noopener">Sporifica Virus&lt;/a>&lt;/h3>
&lt;blockquote>
&lt;p>&lt;strong>Part 1:&lt;/strong> Implement a &lt;a href="https://en.wikipedia.org/wiki/cellular%20automaton">cellular automaton&lt;/a> on an infinite grid of &lt;code>.&lt;/code> and &lt;code>#&lt;/code> pixels such that:&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;ol>
&lt;li>Start at &lt;code>(0, 0)&lt;/code>, facing &lt;code>Up&lt;/code>&lt;/li>
&lt;li>Repeat:&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>If the cursor is on &lt;code>.&lt;/code> swap it to &lt;code>#&lt;/code> and turn &lt;code>Left&lt;/code>&lt;/li>
&lt;li>If the cursor is on &lt;code>#&lt;/code> swap it to &lt;code>.&lt;/code> and turn &lt;code>Right&lt;/code>&lt;/li>
&lt;li>Either way, after turning, move forward once&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;blockquote>
&lt;p>After 10,000 iterations, how many pixels were turned from &lt;code>.&lt;/code> to &lt;code>#&lt;/code>?&lt;/p>
&lt;/blockquote></description></item><item><title>AoC 2017 Day 21: Fractal Expander</title><link>https://blog.jverkamp.com/2017/12/21/aoc-2017-day-21-fractal-expander/</link><pubDate>Thu, 21 Dec 2017 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2017/12/21/aoc-2017-day-21-fractal-expander/</guid><description>&lt;h3 id="source-fractal-arthttpadventofcodecom2017day21">Source: &lt;a href="http://adventofcode.com/2017/day/21" target="_blank" rel="noopener">Fractal Art&lt;/a>&lt;/h3>
&lt;blockquote>
&lt;p>&lt;strong>Part 1:&lt;/strong> Start with an input image made of &lt;code>.&lt;/code> and &lt;code>#&lt;/code> pixels. For &lt;code>n&lt;/code> iterations, break the image into blocks:&lt;/p>
&lt;ul>
&lt;li>If the current size is even, break the image into 2x2 chunks and replace each with a 3x3 chunk&lt;/li>
&lt;li>If the current size is odd, break the image into 3x3 chunks and replace each with a 4x4 chunk&lt;/li>
&lt;/ul>
&lt;p>The replacement rules will be specified in the following format (example is a 3x3 -&amp;gt; 4x4 rule):&lt;/p>
&lt;pre tabindex="0">&lt;code>.#./..#/### =&amp;gt; #..#/..../..../#..#
&lt;/code>&lt;/pre>&lt;p>In that example, replace this:&lt;/p>
&lt;pre tabindex="0">&lt;code>.#.
..#
###
&lt;/code>&lt;/pre>&lt;p>With this:&lt;/p>
&lt;pre tabindex="0">&lt;code>#..#
....
....
#..#
&lt;/code>&lt;/pre>&lt;p>Any rotation or reflection of a chunk can be used to match the input of a replacement rule.&lt;/p>
&lt;p>After &lt;code>n = 18&lt;/code> iterations, how many &lt;code>#&lt;/code> pixels are there?&lt;/p>
&lt;/blockquote></description></item><item><title>AoC 2017 Day 20: Miniature Universe Simulator</title><link>https://blog.jverkamp.com/2017/12/20/aoc-2017-day-20-miniature-universe-simulator/</link><pubDate>Wed, 20 Dec 2017 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2017/12/20/aoc-2017-day-20-miniature-universe-simulator/</guid><description>&lt;h3 id="source-particle-swarmhttpadventofcodecom2017day20">Source: &lt;a href="http://adventofcode.com/2017/day/20" target="_blank" rel="noopener">Particle Swarm&lt;/a>&lt;/h3>
&lt;blockquote>
&lt;p>&lt;strong>Part 1:&lt;/strong> Given the initial position, velocity, and acceleration of a large number of particles, which particle will stay the closet to the origin as the simulation runs to infinity?&lt;/p>
&lt;/blockquote></description></item><item><title>AoC 2017 Day 19: Networkout</title><link>https://blog.jverkamp.com/2017/12/19/aoc-2017-day-19-networkout/</link><pubDate>Tue, 19 Dec 2017 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2017/12/19/aoc-2017-day-19-networkout/</guid><description>&lt;h3 id="source-a-series-of-tubeshttpadventofcodecom2017day19">Source: &lt;a href="http://adventofcode.com/2017/day/19" target="_blank" rel="noopener">A Series of Tubes&lt;/a>&lt;/h3>
&lt;blockquote>
&lt;p>&lt;strong>Part 1:&lt;/strong> Take a network diagram of the following form:&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-text" data-lang="text">&lt;/code>&lt;/pre>&lt;/div>&lt;/blockquote>
&lt;pre>&lt;code>|
| +--+
A | C
&lt;/code>&lt;/pre>
&lt;p>F&amp;mdash;|&amp;ndash;|-E&amp;mdash;+
| | | D
+B-+ +&amp;ndash;+&lt;/p></description></item><item><title>AoC 2017 Day 18: Duetvm</title><link>https://blog.jverkamp.com/2017/12/18/aoc-2017-day-18-duetvm/</link><pubDate>Mon, 18 Dec 2017 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2017/12/18/aoc-2017-day-18-duetvm/</guid><description>&lt;h3 id="source-duethttpadventofcodecom2017day18">Source: &lt;a href="http://adventofcode.com/2017/day/18" target="_blank" rel="noopener">Duet&lt;/a>&lt;/h3>
&lt;blockquote>
&lt;p>&lt;strong>Part 1:&lt;/strong> Create a virtual machine with the following instruction set:&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;ul>
&lt;li>&lt;code>snd X&lt;/code> plays a sound with a frequency equal to the value of &lt;code>X&lt;/code>&lt;/li>
&lt;li>&lt;code>set X Y&lt;/code> sets register &lt;code>X&lt;/code> to &lt;code>Y&lt;/code>&lt;/li>
&lt;li>&lt;code>add X Y&lt;/code> set register &lt;code>X&lt;/code> to &lt;code>X + Y&lt;/code>&lt;/li>
&lt;li>&lt;code>mul X Y&lt;/code> sets register &lt;code>X&lt;/code> to &lt;code>X * Y&lt;/code>&lt;/li>
&lt;li>&lt;code>mod X Y&lt;/code> sets register &lt;code>X&lt;/code> to &lt;code>X mod Y&lt;/code>&lt;/li>
&lt;li>&lt;code>rcv X&lt;/code> recovers the frequency of the last sound played, if &lt;code>X&lt;/code> is not zero&lt;/li>
&lt;li>&lt;code>jgz X Y&lt;/code> jumps with an offset of the value of &lt;code>Y&lt;/code>, iff &lt;code>X&lt;/code> is greater than zero&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;blockquote>
&lt;p>In most cases, &lt;code>X&lt;/code> and &lt;code>Y&lt;/code> can be either an integer value or a register.&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>What is the value recovered by &lt;code>rcv&lt;/code> the first time &lt;code>X&lt;/code> is non-zero?&lt;/p>
&lt;/blockquote></description></item><item><title>AoC 2017 Day 17: Spinlock</title><link>https://blog.jverkamp.com/2017/12/17/aoc-2017-day-17-spinlock/</link><pubDate>Sun, 17 Dec 2017 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2017/12/17/aoc-2017-day-17-spinlock/</guid><description>&lt;h3 id="source-spinlockhttpadventofcodecom2017day17same">Source: &lt;a href="http://adventofcode.com/2017/day/17" target="_blank" rel="noopener">Spinlock&lt;/a>&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>&lt;/h3>
&lt;blockquote>
&lt;p>&lt;strong>Part 1:&lt;/strong> Start with a &lt;a href="https://en.wikipedia.org/wiki/circular%20buffer">circular buffer&lt;/a> containing &lt;code>[0]&lt;/code> and &lt;code>current_position = 0&lt;/code>. For &lt;code>n&lt;/code> from &lt;code>1&lt;/code> up to &lt;code>2017&lt;/code>:&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;ol>
&lt;li>Step forward &lt;code>steps&lt;/code> (puzzle input)&lt;/li>
&lt;li>Input the next value for &lt;code>n&lt;/code>, set &lt;code>current_position&lt;/code> to &lt;code>n&lt;/code>, increment &lt;code>n&lt;/code>&lt;/li>
&lt;li>Repeat&lt;/li>
&lt;/ol>
&lt;/blockquote>
&lt;blockquote>
&lt;p>What is the value after 2017?&lt;/p>
&lt;/blockquote>
&lt;p>It&amp;rsquo;s a bit weird to describe, but the given example helps (assume &lt;code>steps = 3&lt;/code>):&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-text" data-lang="text">&lt;span style="display:flex;">&lt;span>(0)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>0 (1)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>0 (2) 1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>0 2 (3) 1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>0 2 (4) 3 1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>0 (5) 2 4 3 1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>0 5 2 4 3 (6) 1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>0 5 (7) 2 4 3 6 1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>0 5 7 2 4 3 (8) 6 1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>0 (9) 5 7 2 4 3 8 6 1
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>AoC 2017 Day 16: Swing Your Partner</title><link>https://blog.jverkamp.com/2017/12/16/aoc-2017-day-16-swing-your-partner/</link><pubDate>Sat, 16 Dec 2017 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2017/12/16/aoc-2017-day-16-swing-your-partner/</guid><description>&lt;h3 id="source-permutation-promenadehttpadventofcodecom2017day16">Source: &lt;a href="http://adventofcode.com/2017/day/16" target="_blank" rel="noopener">Permutation Promenade&lt;/a>&lt;/h3>
&lt;blockquote>
&lt;p>&lt;strong>Part 1:&lt;/strong> Running on the string &lt;code>a...p&lt;/code> apply a series of the following commands:&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;ul>
&lt;li>&lt;code>sX&lt;/code> rotates the string right by &lt;code>X&lt;/code> positions&lt;/li>
&lt;li>&lt;code>xX/Y&lt;/code> swaps positions &lt;code>X&lt;/code> and &lt;code>Y&lt;/code>&lt;/li>
&lt;li>&lt;code>pA/B&lt;/code> swaps the letters &lt;code>A&lt;/code> and &lt;code>B&lt;/code> no matter their positions&lt;/li>
&lt;/ul>
&lt;/blockquote></description></item><item><title>AoC 2017 Day 15: Two Generators</title><link>https://blog.jverkamp.com/2017/12/15/aoc-2017-day-15-two-generators/</link><pubDate>Fri, 15 Dec 2017 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2017/12/15/aoc-2017-day-15-two-generators/</guid><description>&lt;h3 id="source-dueling-generatorshttpadventofcodecom2017day15">Source: &lt;a href="http://adventofcode.com/2017/day/15" target="_blank" rel="noopener">Dueling Generators&lt;/a>&lt;/h3>
&lt;blockquote>
&lt;p>&lt;strong>Part 1:&lt;/strong> Create a pair of generators &lt;code>A&lt;/code> and &lt;code>B&lt;/code> where:&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;ul>
&lt;li>&lt;span class="latex-inline">A_n = 16807 A_{n-1} \mod 2147483647&lt;/span>
&lt;/li>
&lt;li>&lt;span class="latex-inline">B_n = 48271 B_{n-1} \mod 2147483647&lt;/span>
&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;blockquote>
&lt;p>How many of the first 40 million values have matching values for the low 16 bits of each generator?&lt;/p>
&lt;/blockquote></description></item><item><title>AoC 2017 Day 14: Knot Hash Gridinator</title><link>https://blog.jverkamp.com/2017/12/14/aoc-2017-day-14-knot-hash-gridinator/</link><pubDate>Thu, 14 Dec 2017 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2017/12/14/aoc-2017-day-14-knot-hash-gridinator/</guid><description>&lt;h3 id="source-disk-defragmentationhttpadventofcodecom2017day14">Source: &lt;a href="http://adventofcode.com/2017/day/14" target="_blank" rel="noopener">Disk Defragmentation&lt;/a>&lt;/h3>
&lt;blockquote>
&lt;p>&lt;strong>Part 1:&lt;/strong> Create a 128x128 grid. Generate each row by taking the &lt;a href="https://blog.jverkamp.com/2017/12/10/aoc-2017-day-10-knot-cool/">knot hash&lt;/a> of &lt;code>salt-{index}&lt;/code>. The bits of the hash represent if a tile in the grid is &lt;code>free&lt;/code> (&lt;code>0&lt;/code>) or &lt;code>used&lt;/code> (&lt;code>1&lt;/code>).&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>Given your salt as input, how many squares are &lt;code>used&lt;/code>?&lt;/p>
&lt;/blockquote></description></item><item><title>AoC 2017 Day 13: Firewall Puncher</title><link>https://blog.jverkamp.com/2017/12/13/aoc-2017-day-13-firewall-puncher/</link><pubDate>Wed, 13 Dec 2017 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2017/12/13/aoc-2017-day-13-firewall-puncher/</guid><description>&lt;h3 id="source-packet-scannershttpadventofcodecom2017day13">Source: &lt;a href="http://adventofcode.com/2017/day/13" target="_blank" rel="noopener">Packet Scanners&lt;/a>&lt;/h3>
&lt;blockquote>
&lt;p>&lt;strong>Part 1:&lt;/strong> Multiple layers are defined with rules of the form:&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;ul>
&lt;li>{index}: {depth}&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;blockquote>
&lt;p>Each layer will start at position 0, then once per tick will advance towards depth. Once it hits &lt;code>depth-1&lt;/code>, it will return to position 0, taking &lt;code>2*depth-1&lt;/code> per full cycle.&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>Calculate the sum of &lt;code>index * depth&lt;/code> for any scanners that are at position &lt;code>0&lt;/code> when you pass through them given an initial starting time.&lt;/p>
&lt;/blockquote></description></item><item><title>AoC 2017 Day 12: Gridlock</title><link>https://blog.jverkamp.com/2017/12/12/aoc-2017-day-12-gridlock/</link><pubDate>Tue, 12 Dec 2017 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2017/12/12/aoc-2017-day-12-gridlock/</guid><description>&lt;h3 id="source-digital-plumberhttpadventofcodecom2017day12">Source: &lt;a href="http://adventofcode.com/2017/day/12" target="_blank" rel="noopener">Digital Plumber&lt;/a>&lt;/h3>
&lt;blockquote>
&lt;p>&lt;strong>Part 1:&lt;/strong> A network of nodes is defined by a list of lines formatted as such:&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;pre tabindex="0">&lt;code>&lt;/code>&lt;/pre>&lt;/blockquote>
&lt;p>2 &amp;lt;-&amp;gt; 0, 3, 4&lt;/p></description></item><item><title>AoC 2017 Day 11: It's Full Of Hexagons</title><link>https://blog.jverkamp.com/2017/12/11/aoc-2017-day-11-its-full-of-hexagons/</link><pubDate>Mon, 11 Dec 2017 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2017/12/11/aoc-2017-day-11-its-full-of-hexagons/</guid><description>&lt;h3 id="source-hex-edhttpadventofcodecom2017day11punny">Source: &lt;a href="http://adventofcode.com/2017/day/11" target="_blank" rel="noopener">Hex Ed&lt;/a>&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>&lt;/h3>
&lt;blockquote>
&lt;p>&lt;strong>Part 1:&lt;/strong> Work on a hex grid:&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;pre tabindex="0">&lt;code>&lt;/code>&lt;/pre>&lt;/blockquote>
&lt;p>\ n /
nw +&amp;ndash;+ ne
/ &lt;br>
-+ +-
\ /
sw +&amp;ndash;+ se
/ s \&lt;/p></description></item><item><title>AoC 2017 Day 10: Knot Cool</title><link>https://blog.jverkamp.com/2017/12/10/aoc-2017-day-10-knot-cool/</link><pubDate>Sun, 10 Dec 2017 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2017/12/10/aoc-2017-day-10-knot-cool/</guid><description>&lt;h3 id="source-knot-hashhttpadventofcodecom2017day10">Source: &lt;a href="http://adventofcode.com/2017/day/10" target="_blank" rel="noopener">Knot Hash&lt;/a>&lt;/h3>
&lt;blockquote>
&lt;p>&lt;strong>Part 1:&lt;/strong> Starting with a list of the numbers from &lt;code>1&lt;/code> to &lt;code>n&lt;/code> and a list of &lt;code>lengths&lt;/code> (as input):&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;ol>
&lt;li>Initialize &lt;code>current_position&lt;/code> and &lt;code>skip_size&lt;/code> to &lt;code>0&lt;/code>&lt;/li>
&lt;li>For each &lt;code>length&lt;/code> element in the &lt;code>lengths&lt;/code> list:&lt;/li>
&lt;li>Reverse the first &lt;code>length&lt;/code> elements of the list (starting at &lt;code>current_position&lt;/code>)&lt;/li>
&lt;li>Move forward by &lt;code>length&lt;/code> plus &lt;code>skip_size&lt;/code>&lt;/li>
&lt;li>Increment &lt;code>skip_size&lt;/code> by 1&lt;/li>
&lt;/ol>
&lt;/blockquote>
&lt;blockquote>
&lt;p>After applying the above algorithm, what is the product of the first two elements in the list (from the original first position, not the &lt;code>current_position&lt;/code>)?&lt;/p>
&lt;/blockquote></description></item><item><title>AoC 2017 Day 9: Garbage Gobbler</title><link>https://blog.jverkamp.com/2017/12/09/aoc-2017-day-9-garbage-gobbler/</link><pubDate>Sat, 09 Dec 2017 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2017/12/09/aoc-2017-day-9-garbage-gobbler/</guid><description>&lt;h3 id="source-stream-processinghttpadventofcodecom2017day9">Source: &lt;a href="http://adventofcode.com/2017/day/9" target="_blank" rel="noopener">Stream Processing&lt;/a>&lt;/h3>
&lt;blockquote>
&lt;p>&lt;strong>Part 1:&lt;/strong> An input stream can contain:&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;ul>
&lt;li>&lt;code>groups&lt;/code> are delimited by &lt;code>{&lt;/code> and &lt;code>}&lt;/code>, &lt;code>groups&lt;/code> are nestable and may contain &lt;code>garbage&lt;/code> or data (objects within a &lt;code>group&lt;/code> are &lt;a href="https://en.wikipedia.org/wiki/comma%20delimited">comma delimited&lt;/a>)&lt;/li>
&lt;li>&lt;code>garbage&lt;/code> is delimited by &lt;code>&amp;lt;&lt;/code> and &lt;code>&amp;gt;&lt;/code>, &lt;code>groups&lt;/code> cannot be nested within &lt;code>garbage&lt;/code>, a &lt;code>!&lt;/code> within &lt;code>garbage&lt;/code> is an &lt;a href="https://en.wikipedia.org/wiki/escape%20character">escape character&lt;/a>: &lt;code>!&amp;gt;&lt;/code> does not end a garbage segment&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;blockquote>
&lt;p>The score of a single group is equal to how many times it is nested (the innermost group of &lt;code>{{{}}}&lt;/code> has score &lt;code>3&lt;/code>).&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>The score of a stream is the sum of the scores of all groups in that stream.&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>What is the total score of your input?&lt;/p>
&lt;/blockquote></description></item><item><title>AoC 2017 Day 8: Conditiputer</title><link>https://blog.jverkamp.com/2017/12/08/aoc-2017-day-8-conditiputer/</link><pubDate>Fri, 08 Dec 2017 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2017/12/08/aoc-2017-day-8-conditiputer/</guid><description>&lt;h3 id="source-i-heard-you-like-registershttpadventofcodecom2017day8yo">Source: &lt;a href="http://adventofcode.com/2017/day/8" target="_blank" rel="noopener">I Heard You Like Registers&lt;/a>&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>&lt;/h3>
&lt;blockquote>
&lt;p>&lt;strong>Part 1:&lt;/strong> Given a set of registers initialized to 0, interpret a series of instruction of the form:&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;ul>
&lt;li>&lt;code>{register} (inc|dec) {number|register} if {number|register} (&amp;lt;|&amp;lt;=|=|!=|=&amp;gt;|&amp;gt;) {number|register}&lt;/code>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;blockquote>
&lt;p>What is the largest value in any register?&lt;/p>
&lt;/blockquote></description></item><item><title>AoC 2017 Day 7: Tree</title><link>https://blog.jverkamp.com/2017/12/07/aoc-2017-day-7-tree/</link><pubDate>Thu, 07 Dec 2017 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2017/12/07/aoc-2017-day-7-tree/</guid><description>&lt;h3 id="source-recursive-circushttpadventofcodecom2017day7">Source: &lt;a href="http://adventofcode.com/2017/day/7" target="_blank" rel="noopener">Recursive Circus&lt;/a>&lt;/h3>
&lt;blockquote>
&lt;p>&lt;strong>Part 1:&lt;/strong> A tree is defined as such:&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;ul>
&lt;li>&lt;code>node (weight) -&amp;gt; child1, child2, ...&lt;/code>&lt;/li>
&lt;li>&lt;code>node (weight)&lt;/code>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;blockquote>
&lt;p>Where a &lt;code>node&lt;/code> always has a weight, but may or may not have child nodes.&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>What is the name of the root &lt;code>node&lt;/code> of the tree (the node without a parent)?&lt;/p>
&lt;/blockquote></description></item><item><title>AoC 2017 Day 6: Tightrope</title><link>https://blog.jverkamp.com/2017/12/06/aoc-2017-day-6-tightrope/</link><pubDate>Wed, 06 Dec 2017 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2017/12/06/aoc-2017-day-6-tightrope/</guid><description>&lt;h3 id="source-memory-reallocationhttpadventofcodecom2017day6">Source: &lt;a href="http://adventofcode.com/2017/day/6" target="_blank" rel="noopener">Memory Reallocation&lt;/a>&lt;/h3>
&lt;blockquote>
&lt;p>&lt;strong>Part 1:&lt;/strong> Start with &lt;code>n&lt;/code> stacks of different sizes. Take the largest block and distribute its items starting with &lt;code>n+1&lt;/code> and looping around. How many iterations of this does it take before you see a state you&amp;rsquo;ve seen before?&lt;/p>
&lt;/blockquote></description></item><item><title>AoC 2017 Day 5: 21 Jump Street</title><link>https://blog.jverkamp.com/2017/12/05/aoc-2017-day-5-21-jump-street/</link><pubDate>Tue, 05 Dec 2017 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2017/12/05/aoc-2017-day-5-21-jump-street/</guid><description>&lt;h3 id="source-a-maze-of-twisty-trampolines-all-alikehttpadventofcodecom2017day5cca">Source: &lt;a href="http://adventofcode.com/2017/day/5" target="_blank" rel="noopener">A Maze of Twisty Trampolines, All Alike&lt;/a>&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>&lt;/h3>
&lt;blockquote>
&lt;p>&lt;strong>Part 1:&lt;/strong> Interpret a program made entirely of jump instructions: each instruction is how many steps to jump. Any time you use an instruction to jump, increase the value of that jump by 1 for next time. How many total steps does it take to escape (jump out of bounds)?&lt;/p>
&lt;/blockquote></description></item><item><title>AoC 2017 Day 4: Password Validator</title><link>https://blog.jverkamp.com/2017/12/04/aoc-2017-day-4-password-validator/</link><pubDate>Mon, 04 Dec 2017 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2017/12/04/aoc-2017-day-4-password-validator/</guid><description>&lt;h3 id="source-high-entropy-passphraseshttpadventofcodecom2017day4">Source: &lt;a href="http://adventofcode.com/2017/day/4" target="_blank" rel="noopener">High-Entropy Passphrases&lt;/a>&lt;/h3>
&lt;blockquote>
&lt;p>&lt;strong>Part 1:&lt;/strong> Given a list of &lt;a href="https://en.wikipedia.org/wiki/passphrases">passphrases&lt;/a>, count how many contain no duplicate words.&lt;/p>
&lt;/blockquote></description></item><item><title>AoC 2017 Day 3: Spiraly</title><link>https://blog.jverkamp.com/2017/12/03/aoc-2017-day-3-spiraly/</link><pubDate>Sun, 03 Dec 2017 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2017/12/03/aoc-2017-day-3-spiraly/</guid><description>&lt;h3 id="source-spiral-memoryhttpadventofcodecom2017day3">Source: &lt;a href="http://adventofcode.com/2017/day/3" target="_blank" rel="noopener">Spiral Memory&lt;/a>&lt;/h3>
&lt;blockquote>
&lt;p>&lt;strong>Part 1:&lt;/strong> Create a grid in a spiral pattern like so:&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;pre tabindex="0">&lt;code>&lt;/code>&lt;/pre>&lt;/blockquote>
&lt;p>17 16 15 14 13
18 5 4 3 12
19 6 1 2 11
20 7 8 9 10
21 22 23&amp;mdash;&amp;gt; &amp;hellip;&lt;/p></description></item><item><title>AoC 2017 Day 2: Check It</title><link>https://blog.jverkamp.com/2017/12/02/aoc-2017-day-2-check-it/</link><pubDate>Sat, 02 Dec 2017 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2017/12/02/aoc-2017-day-2-check-it/</guid><description>&lt;h3 id="source-corruption-checksumhttpadventofcodecom2017day2">Source: &lt;a href="http://adventofcode.com/2017/day/2" target="_blank" rel="noopener">Corruption Checksum&lt;/a>&lt;/h3>
&lt;blockquote>
&lt;p>&lt;strong>Part 1:&lt;/strong> The checksum of a list of numbers is the difference between the largest and smallest number in the row. What is the sum of checksums of a file containing many such lists?&lt;/p>
&lt;/blockquote></description></item><item><title>AoC 2017 Day 1: Ahctpat</title><link>https://blog.jverkamp.com/2017/12/01/aoc-2017-day-1-ahctpat/</link><pubDate>Fri, 01 Dec 2017 00:00:03 +0000</pubDate><guid>https://blog.jverkamp.com/2017/12/01/aoc-2017-day-1-ahctpat/</guid><description>&lt;h3 id="source-inverse-captchahttpadventofcodecom2017day1">Source: &lt;a href="http://adventofcode.com/2017/day/1" target="_blank" rel="noopener">Inverse Captcha&lt;/a>&lt;/h3>
&lt;blockquote>
&lt;p>&lt;strong>Part 1:&lt;/strong> Given a number, what is the sum of pairs of digits that match (wrapping the last digit around to the first)?&lt;/p>
&lt;/blockquote></description></item><item><title>AoC 2017: Library Functions</title><link>https://blog.jverkamp.com/2017/12/01/aoc-2017-library-functions/</link><pubDate>Fri, 01 Dec 2017 00:00:02 +0000</pubDate><guid>https://blog.jverkamp.com/2017/12/01/aoc-2017-library-functions/</guid><description>&lt;p>As mentioned in the &lt;a href="https://blog.jverkamp.com/2018/01/08/advent-of-code-2017/">main post&lt;/a>, I&amp;rsquo;m structuring my solutions a bit differently this year. Rather than repeating the same relatively lengthy header in each function, we&amp;rsquo;re going to have a few shared files that can be imported or used for every problem.&lt;/p></description></item></channel></rss>