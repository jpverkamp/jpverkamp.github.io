<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Advent of Code 2016 on jverkamp.com</title>
    <link>https://blog.jverkamp.com/series/advent-of-code-2016/</link>
    <description>Recent content in Advent of Code 2016 on jverkamp.com</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 03 Jan 2018 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://blog.jverkamp.com/series/advent-of-code-2016/atom.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Advent of Code 2016</title>
      <link>https://blog.jverkamp.com/2018/01/03/advent-of-code-2016/</link>
      <pubDate>Wed, 03 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2018/01/03/advent-of-code-2016/</guid>
      <description>&lt;p&gt;As I did &lt;a href=&#34;https://blog.jverkamp.com/2015/12/01/advent-of-code/&#34;&gt;last year&lt;/a&gt;, I&amp;rsquo;m going to solve the Advent of Code problems again this year.&lt;/p&gt;

&lt;p&gt;Or that was the plan. It turns out that instead I put down my blog for almost a year and a half and never quite got around to doing these problems. So I&amp;rsquo;m actually backdating these posts from the early days of 2018 to where they would have been had I solved them on time. They&amp;rsquo;re still interesting problems, so give them a read.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>AoC 2016 Day 25: Assembunny3</title>
      <link>https://blog.jverkamp.com/2016/12/25/aoc-2016-day-25-assembunny3/</link>
      <pubDate>Sun, 25 Dec 2016 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2016/12/25/aoc-2016-day-25-assembunny3/</guid>
      <description>&lt;h3 id=&#34;source-clock-signal-http-adventofcode-com-2016-day-25&#34;&gt;Source: &lt;a href=&#34;http://adventofcode.com/2016/day/25&#34;&gt;Clock Signal&lt;/a&gt;&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Part 1:&lt;/strong&gt; Take the &lt;a href=&#34;https://blog.jverkamp.com/2016/12/12/aoc-2016-day-12-assembunny/&#34;&gt;assembunny interpreter from day 12&lt;/a&gt; and add one new instruction (out &lt;code&gt;x&lt;/code&gt;) which transmits the value &lt;code&gt;x&lt;/code&gt; (either an integer or register). Find the lowest value we can initialize &lt;code&gt;a&lt;/code&gt; to so that the &lt;code&gt;out&lt;/code&gt;put signals form an infinite repeating pattern of &lt;code&gt;0&lt;/code&gt;, &lt;code&gt;1&lt;/code&gt;, &lt;code&gt;0&lt;/code&gt;, &lt;code&gt;1&lt;/code&gt;, &amp;hellip;&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>AoC 2016 Day 24: Venti</title>
      <link>https://blog.jverkamp.com/2016/12/24/aoc-2016-day-24-venti/</link>
      <pubDate>Sat, 24 Dec 2016 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2016/12/24/aoc-2016-day-24-venti/</guid>
      <description>&lt;h3 id=&#34;source-air-duct-spelunking-http-adventofcode-com-2016-day-24&#34;&gt;Source: &lt;a href=&#34;http://adventofcode.com/2016/day/24&#34;&gt;Air Duct Spelunking&lt;/a&gt;&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Part 1:&lt;/strong&gt; Given a map of the form:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;###########
#0.1.....2#
#.#######.#
#4.......3#
###########
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Find the shortest route to visit each of the points, starting at &lt;code&gt;0&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>AoC 2016 Day 23: Assembunny2</title>
      <link>https://blog.jverkamp.com/2016/12/23/aoc-2016-day-23-assembunny2/</link>
      <pubDate>Fri, 23 Dec 2016 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2016/12/23/aoc-2016-day-23-assembunny2/</guid>
      <description>&lt;h3 id=&#34;source-safe-cracking-http-adventofcode-com-2016-day-23&#34;&gt;Source: &lt;a href=&#34;http://adventofcode.com/2016/day/23&#34;&gt;Safe Cracking&lt;/a&gt;&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Part 1:&lt;/strong&gt; Take the &lt;a href=&#34;https://blog.jverkamp.com/2016/12/12/aoc-2016-day-12-assembunny/&#34;&gt;assembunny interpreter from day 12&lt;/a&gt; and add an instruction (tgl &lt;code&gt;X&lt;/code&gt;) that modifies the code at an offset of &lt;code&gt;X&lt;/code&gt; instructions.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;inc&lt;/code&gt; becomes &lt;code&gt;dec&lt;/code&gt;; any other one argument instruction (including &lt;code&gt;tgl&lt;/code&gt;) becomes &lt;code&gt;inc&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;jnz&lt;/code&gt; becomes &lt;code&gt;cpy&lt;/code&gt;; any other two argument instructions become &lt;code&gt;jnz&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Toggling an instruction outside of the program does nothing (it does not halt execution)&lt;/li&gt;
&lt;li&gt;If toggling produces an invalid instruction, ignore it&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Run the given program with the initial register of &lt;code&gt;a = 7&lt;/code&gt;. What is the final value in register &lt;code&gt;a&lt;/code&gt;?&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>AoC 2016 Day 22: Data Mover</title>
      <link>https://blog.jverkamp.com/2016/12/22/aoc-2016-day-22-data-mover/</link>
      <pubDate>Thu, 22 Dec 2016 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2016/12/22/aoc-2016-day-22-data-mover/</guid>
      <description>&lt;h3 id=&#34;source-grid-computing-http-adventofcode-com-2016-day-22&#34;&gt;Source: &lt;a href=&#34;http://adventofcode.com/2016/day/22&#34;&gt;Grid Computing&lt;/a&gt;&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Part 1:&lt;/strong&gt; You are given a grid of nodes and the output of the &lt;a href=&#34;https://en.wikipedia.org/wiki/DF%20%28unix%29&#34;&gt;df command&lt;/a&gt; telling you how much space is on each. How many pairs of nodes are there where the data from some node &lt;code&gt;A&lt;/code&gt; would fit entirely on &lt;code&gt;B&lt;/code&gt;?&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>AoC 2016 Day 21: Scrambler</title>
      <link>https://blog.jverkamp.com/2016/12/21/aoc-2016-day-21-scrambler/</link>
      <pubDate>Wed, 21 Dec 2016 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2016/12/21/aoc-2016-day-21-scrambler/</guid>
      <description>&lt;h3 id=&#34;source-scrambled-letters-and-hash-http-adventofcode-com-2016-day-21&#34;&gt;Source: &lt;a href=&#34;http://adventofcode.com/2016/day/21&#34;&gt;Scrambled Letters and Hash&lt;/a&gt;&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Part 1:&lt;/strong&gt; &lt;a href=&#34;https://blog.jverkamp.com/2016/12/12/aoc-2016-day-12-assembunny/&#34;&gt;Another&lt;/a&gt; &lt;a href=&#34;https://en.wikipedia.org/wiki/virtual%20machine&#34;&gt;virtual machine&lt;/a&gt;, of sorts. Start with the string &lt;code&gt;abcdefgh&lt;/code&gt; and apply a sequence of the following commands to it:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;swap position &lt;code&gt;X&lt;/code&gt; with position &lt;code&gt;Y&lt;/code&gt; = swap two positions&lt;/li&gt;
&lt;li&gt;swap letter &lt;code&gt;X&lt;/code&gt; with letter &lt;code&gt;Y&lt;/code&gt; = swap to letters, no matter where they are&lt;/li&gt;
&lt;li&gt;rotate (left|right) &lt;code&gt;X&lt;/code&gt; steps = rotate forward or backward&lt;/li&gt;
&lt;li&gt;rotate based on position of letter &lt;code&gt;X&lt;/code&gt; = find &lt;code&gt;X&lt;/code&gt;, rotate right based on its position; if the original position was &amp;gt;= 4, rotate one more&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:arbitrary&#34;&gt;&lt;a href=&#34;#fn:arbitrary&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/li&gt;
&lt;li&gt;reverse positions &lt;code&gt;X&lt;/code&gt; through &lt;code&gt;Y&lt;/code&gt; = reverse a subset of the string&lt;/li&gt;
&lt;li&gt;move position &lt;code&gt;X&lt;/code&gt; to position &lt;code&gt;Y&lt;/code&gt; = take a character at a position out of the string and put it somewhere else specific&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>AoC 2016 Day 20: Filter Table</title>
      <link>https://blog.jverkamp.com/2016/12/20/aoc-2016-day-20-filter-table/</link>
      <pubDate>Tue, 20 Dec 2016 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2016/12/20/aoc-2016-day-20-filter-table/</guid>
      <description>&lt;h3 id=&#34;source-firewall-rules-http-adventofcode-com-2016-day-20&#34;&gt;Source: &lt;a href=&#34;http://adventofcode.com/2016/day/20&#34;&gt;Firewall Rules&lt;/a&gt;&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Part 1:&lt;/strong&gt; Given a list of integer ranges (a la &lt;code&gt;5-8&lt;/code&gt;), what is the first value not in any given range?&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>AoC 2016 Day 19: Blist Table</title>
      <link>https://blog.jverkamp.com/2016/12/19/aoc-2016-day-19-blist-table/</link>
      <pubDate>Mon, 19 Dec 2016 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2016/12/19/aoc-2016-day-19-blist-table/</guid>
      <description>&lt;h3 id=&#34;source-an-elephant-named-joseph-http-adventofcode-com-2016-day-19&#34;&gt;Source: &lt;a href=&#34;http://adventofcode.com/2016/day/19&#34;&gt;An Elephant Named Joseph&lt;/a&gt;&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Part 1:&lt;/strong&gt; Create a &lt;a href=&#34;https://en.wikipedia.org/wiki/circular%20list&#34;&gt;circular list&lt;/a&gt; of the numbers &lt;code&gt;1&lt;/code&gt; through &lt;code&gt;n&lt;/code&gt;. Going around the list, each currently remaining number removes the number after it. What is the last remaining number?&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>AoC 2016 Day 18: Its A Trap</title>
      <link>https://blog.jverkamp.com/2016/12/18/aoc-2016-day-18-its-a-trap/</link>
      <pubDate>Sun, 18 Dec 2016 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2016/12/18/aoc-2016-day-18-its-a-trap/</guid>
      <description>&lt;h3 id=&#34;source-like-a-rogue-http-adventofcode-com-2016-day-18&#34;&gt;Source: &lt;a href=&#34;http://adventofcode.com/2016/day/18&#34;&gt;Like a Rogue&lt;/a&gt;&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Part 1:&lt;/strong&gt; Starting with a sequence of &lt;code&gt;.&lt;/code&gt; and &lt;code&gt;^&lt;/code&gt;, generate additional rows using the rules based on the three characters above the new position.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;^^.&lt;/code&gt; -&amp;gt; &lt;code&gt;^&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.^^&lt;/code&gt; -&amp;gt; &lt;code&gt;^&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;^..&lt;/code&gt; -&amp;gt; &lt;code&gt;^&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;..^&lt;/code&gt; -&amp;gt; &lt;code&gt;^&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Otherwise -&amp;gt; &lt;code&gt;.&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;How many safe tiles (&lt;code&gt;.&lt;/code&gt;) are there after 40 generations?&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>AoC 2016 Day 17: Md5 Maze</title>
      <link>https://blog.jverkamp.com/2016/12/17/aoc-2016-day-17-md5-maze/</link>
      <pubDate>Sat, 17 Dec 2016 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2016/12/17/aoc-2016-day-17-md5-maze/</guid>
      <description>&lt;h3 id=&#34;source-two-steps-forward-http-adventofcode-com-2016-day-17&#34;&gt;Source: &lt;a href=&#34;http://adventofcode.com/2016/day/17&#34;&gt;Two Steps Forward&lt;/a&gt;&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Part 1:&lt;/strong&gt; Create a 4x4 grid of rooms with doors &lt;code&gt;U&lt;/code&gt;p, &lt;code&gt;D&lt;/code&gt;own, &lt;code&gt;L&lt;/code&gt;eft, and &lt;code&gt;R&lt;/code&gt;ight from each location. To determine if a door is currently open:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Calculate &lt;code&gt;MD5(salt + sequence)&lt;/code&gt; where sequence is a string containing any combination of &lt;code&gt;UDLR&lt;/code&gt; depending on how you got to this room&lt;/li&gt;
&lt;li&gt;The first four hex values represent the doors &lt;code&gt;U&lt;/code&gt;p, &lt;code&gt;D&lt;/code&gt;own, &lt;code&gt;L&lt;/code&gt;eft, and &lt;code&gt;R&lt;/code&gt;ight respectively: &lt;code&gt;bcdef&lt;/code&gt; means open; anything else is closed&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Find the shortest path from &lt;code&gt;(0, 0)&lt;/code&gt; to &lt;code&gt;(3, 3)&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
  </channel>
</rss>