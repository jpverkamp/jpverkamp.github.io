<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Advent of Code 2016 on jverkamp.com</title>
    <link>https://blog.jverkamp.com/series/advent-of-code-2016/</link>
    <description>Recent content in Advent of Code 2016 on jverkamp.com</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 03 Jan 2018 00:00:00 +0000</lastBuildDate><atom:link href="https://blog.jverkamp.com/series/advent-of-code-2016/atom.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Advent of Code 2016</title>
      <link>https://blog.jverkamp.com/2018/01/03/advent-of-code-2016/</link>
      <pubDate>Wed, 03 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2018/01/03/advent-of-code-2016/</guid>
      <description>&lt;p&gt;As I did &lt;a href=&#34;https://blog.jverkamp.com/2015/12/01/advent-of-code/&#34;&gt;last year&lt;/a&gt;, I&amp;rsquo;m going to solve the Advent of Code problems again this year.&lt;/p&gt;
&lt;p&gt;Or that was the plan. It turns out that instead I put down my blog for almost a year and a half and never quite got around to doing these problems. So I&amp;rsquo;m actually backdating these posts from the early days of 2018 to where they would have been had I solved them on time. They&amp;rsquo;re still interesting problems, so give them a read.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>AoC 2016 Day 25: Assembunny3</title>
      <link>https://blog.jverkamp.com/2016/12/25/aoc-2016-day-25-assembunny3/</link>
      <pubDate>Sun, 25 Dec 2016 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2016/12/25/aoc-2016-day-25-assembunny3/</guid>
      <description>&lt;h3 id=&#34;source-clock-signalhttpadventofcodecom2016day25&#34;&gt;Source: &lt;a href=&#34;http://adventofcode.com/2016/day/25&#34;&gt;Clock Signal&lt;/a&gt;&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Part 1:&lt;/strong&gt; Take the &lt;a href=&#34;https://blog.jverkamp.com/2016/12/12/aoc-2016-day-12-assembunny/&#34;&gt;assembunny interpreter from day 12&lt;/a&gt; and add one new instruction (out &lt;code&gt;x&lt;/code&gt;) which transmits the value &lt;code&gt;x&lt;/code&gt; (either an integer or register). Find the lowest value we can initialize &lt;code&gt;a&lt;/code&gt; to so that the &lt;code&gt;out&lt;/code&gt;put signals form an infinite repeating pattern of &lt;code&gt;0&lt;/code&gt;, &lt;code&gt;1&lt;/code&gt;, &lt;code&gt;0&lt;/code&gt;, &lt;code&gt;1&lt;/code&gt;, &amp;hellip;&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>AoC 2016 Day 24: Venti</title>
      <link>https://blog.jverkamp.com/2016/12/24/aoc-2016-day-24-venti/</link>
      <pubDate>Sat, 24 Dec 2016 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2016/12/24/aoc-2016-day-24-venti/</guid>
      <description>&lt;h3 id=&#34;source-air-duct-spelunkinghttpadventofcodecom2016day24&#34;&gt;Source: &lt;a href=&#34;http://adventofcode.com/2016/day/24&#34;&gt;Air Duct Spelunking&lt;/a&gt;&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Part 1:&lt;/strong&gt; Given a map of the form:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/blockquote&gt;
&lt;p&gt;###########
#0.1&amp;hellip;..2#
#.#######.#
#4&amp;hellip;&amp;hellip;.3#
###########&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>AoC 2016 Day 23: Assembunny2</title>
      <link>https://blog.jverkamp.com/2016/12/23/aoc-2016-day-23-assembunny2/</link>
      <pubDate>Fri, 23 Dec 2016 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2016/12/23/aoc-2016-day-23-assembunny2/</guid>
      <description>&lt;h3 id=&#34;source-safe-crackinghttpadventofcodecom2016day23&#34;&gt;Source: &lt;a href=&#34;http://adventofcode.com/2016/day/23&#34;&gt;Safe Cracking&lt;/a&gt;&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Part 1:&lt;/strong&gt; Take the &lt;a href=&#34;https://blog.jverkamp.com/2016/12/12/aoc-2016-day-12-assembunny/&#34;&gt;assembunny interpreter from day 12&lt;/a&gt; and add an instruction (tgl &lt;code&gt;X&lt;/code&gt;) that modifies the code at an offset of &lt;code&gt;X&lt;/code&gt; instructions.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;inc&lt;/code&gt; becomes &lt;code&gt;dec&lt;/code&gt;; any other one argument instruction (including &lt;code&gt;tgl&lt;/code&gt;) becomes &lt;code&gt;inc&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;jnz&lt;/code&gt; becomes &lt;code&gt;cpy&lt;/code&gt;; any other two argument instructions become &lt;code&gt;jnz&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Toggling an instruction outside of the program does nothing (it does not halt execution)&lt;/li&gt;
&lt;li&gt;If toggling produces an invalid instruction, ignore it&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Run the given program with the initial register of &lt;code&gt;a = 7&lt;/code&gt;. What is the final value in register &lt;code&gt;a&lt;/code&gt;?&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>AoC 2016 Day 22: Data Mover</title>
      <link>https://blog.jverkamp.com/2016/12/22/aoc-2016-day-22-data-mover/</link>
      <pubDate>Thu, 22 Dec 2016 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2016/12/22/aoc-2016-day-22-data-mover/</guid>
      <description>&lt;h3 id=&#34;source-grid-computinghttpadventofcodecom2016day22&#34;&gt;Source: &lt;a href=&#34;http://adventofcode.com/2016/day/22&#34;&gt;Grid Computing&lt;/a&gt;&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Part 1:&lt;/strong&gt; You are given a grid of nodes and the output of the &lt;a href=&#34;https://en.wikipedia.org/wiki/DF%20%28unix%29&#34;&gt;df command&lt;/a&gt; telling you how much space is on each. How many pairs of nodes are there where the data from some node &lt;code&gt;A&lt;/code&gt; would fit entirely on &lt;code&gt;B&lt;/code&gt;?&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>AoC 2016 Day 21: Scrambler</title>
      <link>https://blog.jverkamp.com/2016/12/21/aoc-2016-day-21-scrambler/</link>
      <pubDate>Wed, 21 Dec 2016 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2016/12/21/aoc-2016-day-21-scrambler/</guid>
      <description>&lt;h3 id=&#34;source-scrambled-letters-and-hashhttpadventofcodecom2016day21&#34;&gt;Source: &lt;a href=&#34;http://adventofcode.com/2016/day/21&#34;&gt;Scrambled Letters and Hash&lt;/a&gt;&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Part 1:&lt;/strong&gt; &lt;a href=&#34;https://blog.jverkamp.com/2016/12/12/aoc-2016-day-12-assembunny/&#34;&gt;Another&lt;/a&gt; &lt;a href=&#34;https://en.wikipedia.org/wiki/virtual%20machine&#34;&gt;virtual machine&lt;/a&gt;, of sorts. Start with the string &lt;code&gt;abcdefgh&lt;/code&gt; and apply a sequence of the following commands to it:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;swap position &lt;code&gt;X&lt;/code&gt; with position &lt;code&gt;Y&lt;/code&gt; = swap two positions&lt;/li&gt;
&lt;li&gt;swap letter &lt;code&gt;X&lt;/code&gt; with letter &lt;code&gt;Y&lt;/code&gt; = swap to letters, no matter where they are&lt;/li&gt;
&lt;li&gt;rotate (left|right) &lt;code&gt;X&lt;/code&gt; steps = rotate forward or backward&lt;/li&gt;
&lt;li&gt;rotate based on position of letter &lt;code&gt;X&lt;/code&gt; = find &lt;code&gt;X&lt;/code&gt;, rotate right based on its position; if the original position was &amp;gt;= 4, rotate one more&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/li&gt;
&lt;li&gt;reverse positions &lt;code&gt;X&lt;/code&gt; through &lt;code&gt;Y&lt;/code&gt; = reverse a subset of the string&lt;/li&gt;
&lt;li&gt;move position &lt;code&gt;X&lt;/code&gt; to position &lt;code&gt;Y&lt;/code&gt; = take a character at a position out of the string and put it somewhere else specific&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>AoC 2016 Day 20: Filter Table</title>
      <link>https://blog.jverkamp.com/2016/12/20/aoc-2016-day-20-filter-table/</link>
      <pubDate>Tue, 20 Dec 2016 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2016/12/20/aoc-2016-day-20-filter-table/</guid>
      <description>&lt;h3 id=&#34;source-firewall-ruleshttpadventofcodecom2016day20&#34;&gt;Source: &lt;a href=&#34;http://adventofcode.com/2016/day/20&#34;&gt;Firewall Rules&lt;/a&gt;&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Part 1:&lt;/strong&gt; Given a list of integer ranges (a la &lt;code&gt;5-8&lt;/code&gt;), what is the first value not in any given range?&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>AoC 2016 Day 19: Blist Table</title>
      <link>https://blog.jverkamp.com/2016/12/19/aoc-2016-day-19-blist-table/</link>
      <pubDate>Mon, 19 Dec 2016 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2016/12/19/aoc-2016-day-19-blist-table/</guid>
      <description>&lt;h3 id=&#34;source-an-elephant-named-josephhttpadventofcodecom2016day19&#34;&gt;Source: &lt;a href=&#34;http://adventofcode.com/2016/day/19&#34;&gt;An Elephant Named Joseph&lt;/a&gt;&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Part 1:&lt;/strong&gt; Create a &lt;a href=&#34;https://en.wikipedia.org/wiki/circular%20list&#34;&gt;circular list&lt;/a&gt; of the numbers &lt;code&gt;1&lt;/code&gt; through &lt;code&gt;n&lt;/code&gt;. Going around the list, each currently remaining number removes the number after it. What is the last remaining number?&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>AoC 2016 Day 18: Its A Trap</title>
      <link>https://blog.jverkamp.com/2016/12/18/aoc-2016-day-18-its-a-trap/</link>
      <pubDate>Sun, 18 Dec 2016 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2016/12/18/aoc-2016-day-18-its-a-trap/</guid>
      <description>&lt;h3 id=&#34;source-like-a-roguehttpadventofcodecom2016day18&#34;&gt;Source: &lt;a href=&#34;http://adventofcode.com/2016/day/18&#34;&gt;Like a Rogue&lt;/a&gt;&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Part 1:&lt;/strong&gt; Starting with a sequence of &lt;code&gt;.&lt;/code&gt; and &lt;code&gt;^&lt;/code&gt;, generate additional rows using the rules based on the three characters above the new position.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;^^.&lt;/code&gt; -&amp;gt; &lt;code&gt;^&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.^^&lt;/code&gt; -&amp;gt; &lt;code&gt;^&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;^..&lt;/code&gt; -&amp;gt; &lt;code&gt;^&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;..^&lt;/code&gt; -&amp;gt; &lt;code&gt;^&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Otherwise -&amp;gt; &lt;code&gt;.&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;How many safe tiles (&lt;code&gt;.&lt;/code&gt;) are there after 40 generations?&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>AoC 2016 Day 17: Md5 Maze</title>
      <link>https://blog.jverkamp.com/2016/12/17/aoc-2016-day-17-md5-maze/</link>
      <pubDate>Sat, 17 Dec 2016 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2016/12/17/aoc-2016-day-17-md5-maze/</guid>
      <description>&lt;h3 id=&#34;source-two-steps-forwardhttpadventofcodecom2016day17&#34;&gt;Source: &lt;a href=&#34;http://adventofcode.com/2016/day/17&#34;&gt;Two Steps Forward&lt;/a&gt;&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Part 1:&lt;/strong&gt; Create a 4x4 grid of rooms with doors &lt;code&gt;U&lt;/code&gt;p, &lt;code&gt;D&lt;/code&gt;own, &lt;code&gt;L&lt;/code&gt;eft, and &lt;code&gt;R&lt;/code&gt;ight from each location. To determine if a door is currently open:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Calculate &lt;code&gt;MD5(salt + sequence)&lt;/code&gt; where sequence is a string containing any combination of &lt;code&gt;UDLR&lt;/code&gt; depending on how you got to this room&lt;/li&gt;
&lt;li&gt;The first four hex values represent the doors &lt;code&gt;U&lt;/code&gt;p, &lt;code&gt;D&lt;/code&gt;own, &lt;code&gt;L&lt;/code&gt;eft, and &lt;code&gt;R&lt;/code&gt;ight respectively: &lt;code&gt;bcdef&lt;/code&gt; means open; anything else is closed&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Find the shortest path from &lt;code&gt;(0, 0)&lt;/code&gt; to &lt;code&gt;(3, 3)&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>AoC 2016 Day 16: Dragon Data</title>
      <link>https://blog.jverkamp.com/2016/12/16/aoc-2016-day-16-dragon-data/</link>
      <pubDate>Fri, 16 Dec 2016 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2016/12/16/aoc-2016-day-16-dragon-data/</guid>
      <description>&lt;h3 id=&#34;source-dragon-checksumhttpadventofcodecom2016day16&#34;&gt;Source: &lt;a href=&#34;http://adventofcode.com/2016/day/16&#34;&gt;Dragon Checksum&lt;/a&gt;&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Part 1:&lt;/strong&gt; Generate noise using a modified &lt;a href=&#34;https://en.wikipedia.org/wiki/dragon%20curve&#34;&gt;dragon curve&lt;/a&gt;:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Start with data &lt;code&gt;a&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Create a copy of the data &lt;code&gt;b&lt;/code&gt;, reverse and invert it (0 &amp;lt;-&amp;gt; 1)&lt;/li&gt;
&lt;li&gt;Create the string &lt;code&gt;a0b&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Repeat until you have enough data, truncate at the end if needed.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;From this string calculate a checksum as follows:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/xor&#34;&gt;xor&lt;/a&gt; each pair of bits, concatenate the results&lt;/li&gt;
&lt;li&gt;If the resulting string has an even length, repeat; if it&amp;rsquo;s odd, stop&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Calculate the checksum of a given initial state expanded to &lt;code&gt;272&lt;/code&gt; bits.&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>AoC 2016 Day 15: Capsule Dropper</title>
      <link>https://blog.jverkamp.com/2016/12/15/aoc-2016-day-15-capsule-dropper/</link>
      <pubDate>Thu, 15 Dec 2016 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2016/12/15/aoc-2016-day-15-capsule-dropper/</guid>
      <description>&lt;h3 id=&#34;source-timing-is-everythinghttpadventofcodecom2016day15&#34;&gt;Source: &lt;a href=&#34;http://adventofcode.com/2016/day/15&#34;&gt;Timing is Everything&lt;/a&gt;&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Part 1:&lt;/strong&gt; Given a series of openings one second apart, each with &lt;code&gt;n&lt;/code&gt; positions that advance one position per second, what is the first time you can start the simulation so that you pass each in position &lt;code&gt;0&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>AoC 2016 Day 14: Bad One Time Pads</title>
      <link>https://blog.jverkamp.com/2016/12/14/aoc-2016-day-14-bad-one-time-pads/</link>
      <pubDate>Wed, 14 Dec 2016 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2016/12/14/aoc-2016-day-14-bad-one-time-pads/</guid>
      <description>&lt;h3 id=&#34;source-one-time-padhttpadventofcodecom2016day14&#34;&gt;Source: &lt;a href=&#34;http://adventofcode.com/2016/day/14&#34;&gt;One-Time Pad&lt;/a&gt;&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Part 1:&lt;/strong&gt; Calculate a series of MD5 hashes (the same as &lt;a href=&#34;https://blog.jverkamp.com/2016/12/05/aoc-2016-day-5-password-cracker/&#34;&gt;Day 5&lt;/a&gt;). A hash is considered valid if it contains a triple (three characters in a row) and somewhere in the next 1000 hashes there is a quintuple of that same character.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;What index produces the 64th key?&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>AoC 2016 Day 13: Noisy Puzzle</title>
      <link>https://blog.jverkamp.com/2016/12/13/aoc-2016-day-13-noisy-puzzle/</link>
      <pubDate>Tue, 13 Dec 2016 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2016/12/13/aoc-2016-day-13-noisy-puzzle/</guid>
      <description>&lt;h3 id=&#34;source-a-maze-of-twisty-little-cubicleshttpadventofcodecom2016day13cca&#34;&gt;Source: &lt;a href=&#34;http://adventofcode.com/2016/day/13&#34;&gt;A Maze of Twisty Little Cubicles&lt;/a&gt;&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Part 1:&lt;/strong&gt; Generate a &lt;a href=&#34;https://en.wikipedia.org/wiki/procedurally%20generated&#34;&gt;procedurally generated&lt;/a&gt; maze using the following equation:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;latex-inline&#34;&gt;x^2 &amp;#43; 3x &amp;#43; 2xy &amp;#43; y &amp;#43; y^2 &amp;#43; c&lt;/span&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; are the coordinates of a point and &lt;code&gt;c&lt;/code&gt; is a constant.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Count the number of bits for each point. Even is open spaces, odd is walls.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;What is the shortest route from &lt;code&gt;(0, 0)&lt;/code&gt; to &lt;code&gt;(31, 39)&lt;/code&gt;?&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>AoC 2016 Day 12: Assembunny</title>
      <link>https://blog.jverkamp.com/2016/12/12/aoc-2016-day-12-assembunny/</link>
      <pubDate>Mon, 12 Dec 2016 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2016/12/12/aoc-2016-day-12-assembunny/</guid>
      <description>&lt;h3 id=&#34;source-leonardos-monorailhttpadventofcodecom2016day12&#34;&gt;Source: &lt;a href=&#34;http://adventofcode.com/2016/day/12&#34;&gt;Leonardo&amp;rsquo;s Monorail&lt;/a&gt;&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Part 1:&lt;/strong&gt; Create a &lt;a href=&#34;https://en.wikipedia.org/wiki/virtual%20machine&#34;&gt;virtual machine&lt;/a&gt; that has four registers (&lt;code&gt;a&lt;/code&gt;, &lt;code&gt;b&lt;/code&gt;, &lt;code&gt;c&lt;/code&gt;, and &lt;code&gt;d&lt;/code&gt;) and can process the following instructions:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;cpy x y&lt;/code&gt; - copies &lt;code&gt;x&lt;/code&gt; into &lt;code&gt;y&lt;/code&gt; (&lt;code&gt;x&lt;/code&gt; can be an integer or a register)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;inc x&lt;/code&gt; - increases register &lt;code&gt;x&lt;/code&gt; by one&lt;/li&gt;
&lt;li&gt;&lt;code&gt;dec x&lt;/code&gt; - decreases register &lt;code&gt;x&lt;/code&gt; by one&lt;/li&gt;
&lt;li&gt;&lt;code&gt;jnz x y&lt;/code&gt; - jumps over &lt;code&gt;y&lt;/code&gt; instructions if &lt;code&gt;x&lt;/code&gt; is not zero (&lt;code&gt;x&lt;/code&gt; can be an integer or a register)&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;What is the final value in register &lt;code&gt;a&lt;/code&gt;?&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>AoC 2016 Day 11: Radiation Avoider</title>
      <link>https://blog.jverkamp.com/2016/12/11/aoc-2016-day-11-radiation-avoider/</link>
      <pubDate>Sun, 11 Dec 2016 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2016/12/11/aoc-2016-day-11-radiation-avoider/</guid>
      <description>&lt;h3 id=&#34;source-radioisotope-thermoelectric-generatorshttpadventofcodecom2016day11&#34;&gt;Source: &lt;a href=&#34;http://adventofcode.com/2016/day/11&#34;&gt;Radioisotope Thermoelectric Generators&lt;/a&gt;&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Part 1:&lt;/strong&gt; Input will be a list of the following form:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;The first floor contains a hydrogen-compatible microchip and a lithium-compatible microchip.&lt;/li&gt;
&lt;li&gt;The second floor contains a hydrogen generator.&lt;/li&gt;
&lt;li&gt;The third floor contains a lithium generator.&lt;/li&gt;
&lt;li&gt;The fourth floor contains nothing relevant.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;You have an elevator that can move exactly 1 or 2 items. You can only leave a microchip on a floor with a non-matching generator if a matching generator is also present.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Move all items to the top (4th) floor.&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>AoC 2016 Day 10: Bot Simulator</title>
      <link>https://blog.jverkamp.com/2016/12/10/aoc-2016-day-10-bot-simulator/</link>
      <pubDate>Sat, 10 Dec 2016 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2016/12/10/aoc-2016-day-10-bot-simulator/</guid>
      <description>&lt;h3 id=&#34;source-balance-botshttpadventofcodecom2016day10&#34;&gt;Source: &lt;a href=&#34;http://adventofcode.com/2016/day/10&#34;&gt;Balance Bots&lt;/a&gt;&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Part 1:&lt;/strong&gt; Create a sorting machine using input of the following form:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;value X goes to bot A&lt;/code&gt; - an input to bot &lt;code&gt;A&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;bot A gives low to (bot|output) B and high to (bot|output) C&lt;/code&gt; - a sorter that takes two inputs and sends them to the specified bots or output channels&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Find the bot that compares the values &lt;code&gt;17&lt;/code&gt; and &lt;code&gt;61&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>AoC 2016 Day 9: Decompressinator</title>
      <link>https://blog.jverkamp.com/2016/12/09/aoc-2016-day-9-decompressinator/</link>
      <pubDate>Fri, 09 Dec 2016 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2016/12/09/aoc-2016-day-9-decompressinator/</guid>
      <description>&lt;h3 id=&#34;source-explosives-in-cyberspacehttpadventofcodecom2016day9&#34;&gt;Source: &lt;a href=&#34;http://adventofcode.com/2016/day/9&#34;&gt;Explosives in Cyberspace&lt;/a&gt;&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Part 1:&lt;/strong&gt; A file is compressed by including compression markers of the form &lt;code&gt;(#x#)...&lt;/code&gt; where the first number tells how many characters to copy and the second is how many times to copy them. So &lt;code&gt;A(2x3)HA!&lt;/code&gt; becomes &lt;code&gt;AHAHAHA!&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>AoC 2016 Day 8: Tiny Screen Simulator</title>
      <link>https://blog.jverkamp.com/2016/12/08/aoc-2016-day-8-tiny-screen-simulator/</link>
      <pubDate>Thu, 08 Dec 2016 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2016/12/08/aoc-2016-day-8-tiny-screen-simulator/</guid>
      <description>&lt;h3 id=&#34;source-two-factor-authenticationhttpadventofcodecom2016day8&#34;&gt;Source: &lt;a href=&#34;http://adventofcode.com/2016/day/8&#34;&gt;Two-Factor Authentication&lt;/a&gt;&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Part 1:&lt;/strong&gt; Implement a 50x6 pixel screen with the following commands:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;rect AxB&lt;/code&gt; turn on a rectangle of pixels in the top left corner&lt;/li&gt;
&lt;li&gt;&lt;code&gt;rotate row y=A by B&lt;/code&gt; rotates row &lt;code&gt;A&lt;/code&gt; right by &lt;code&gt;B&lt;/code&gt; pixels&lt;/li&gt;
&lt;li&gt;&lt;code&gt;rotate column x=A by B&lt;/code&gt; rotates column &lt;code&gt;A&lt;/code&gt; down by &lt;code&gt;B&lt;/code&gt; pixels&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;After a given sequence of commands, how many pixels are on?&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>AoC 2016 Day 7: IPv7 Support Counter</title>
      <link>https://blog.jverkamp.com/2016/12/07/aoc-2016-day-7-ipv7-support-counter/</link>
      <pubDate>Wed, 07 Dec 2016 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2016/12/07/aoc-2016-day-7-ipv7-support-counter/</guid>
      <description>&lt;h3 id=&#34;source-internet-protocol-version-7httpadventofcodecom2016day7&#34;&gt;Source: &lt;a href=&#34;http://adventofcode.com/2016/day/7&#34;&gt;Internet Protocol Version 7&lt;/a&gt;&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Part 1:&lt;/strong&gt; The input is a list of strings, potentially containing sequences in square brackets. Find all strings that have an ABBA sequence (two characters followed by the same two in reverse order) outside of any square brackets, but no ABBA sequences in square brackets.&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>AoC 2016 Day 6: Signal Unjammer</title>
      <link>https://blog.jverkamp.com/2016/12/06/aoc-2016-day-6-signal-unjammer/</link>
      <pubDate>Tue, 06 Dec 2016 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2016/12/06/aoc-2016-day-6-signal-unjammer/</guid>
      <description>&lt;h3 id=&#34;source-signals-and-noisehttpadventofcodecom2016day6&#34;&gt;Source: &lt;a href=&#34;http://adventofcode.com/2016/day/6&#34;&gt;Signals and Noise&lt;/a&gt;&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Part 1:&lt;/strong&gt; Given a list of strings, find the most common character in each position.&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>AoC 2016 Day 5: Password Cracker</title>
      <link>https://blog.jverkamp.com/2016/12/05/aoc-2016-day-5-password-cracker/</link>
      <pubDate>Mon, 05 Dec 2016 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2016/12/05/aoc-2016-day-5-password-cracker/</guid>
      <description>&lt;h3 id=&#34;source-how-about-a-nice-game-of-chesshttpadventofcodecom2016day5&#34;&gt;Source: &lt;a href=&#34;http://adventofcode.com/2016/day/5&#34;&gt;How About a Nice Game of Chess?&lt;/a&gt;&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Part 1:&lt;/strong&gt; Generate a series of hashes: MD5(salt + index). For each hash starting with five zeros, write down the sixth character.&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>AoC 2016 Day 4: Room Validator</title>
      <link>https://blog.jverkamp.com/2016/12/04/aoc-2016-day-4-room-validator/</link>
      <pubDate>Sun, 04 Dec 2016 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2016/12/04/aoc-2016-day-4-room-validator/</guid>
      <description>&lt;h3 id=&#34;source-security-through-obscurityhttpadventofcodecom2016day41&#34;&gt;Source: &lt;a href=&#34;http://adventofcode.com/2016/day/4&#34;&gt;Security Through Obscurity&lt;/a&gt;&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Part 1:&lt;/strong&gt; A room is described as a name, a sector ID, and a checksum as follows:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/blockquote&gt;
&lt;p&gt;aaaaa-bbb-z-y-x-123[abxyz]&lt;/p&gt;
&lt;p&gt;name: aaaaa-bbb-z-y-x
sector ID: 123
checksum: abxyz&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>AoC 2016 Day 3: Triangle Validator</title>
      <link>https://blog.jverkamp.com/2016/12/03/aoc-2016-day-3-triangle-validator/</link>
      <pubDate>Sat, 03 Dec 2016 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2016/12/03/aoc-2016-day-3-triangle-validator/</guid>
      <description>&lt;h3 id=&#34;source-squares-with-three-sideshttpadventofcodecom2016day3&#34;&gt;Source: &lt;a href=&#34;http://adventofcode.com/2016/day/3&#34;&gt;Squares With Three Sides&lt;/a&gt;&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Part 1:&lt;/strong&gt; Given a list of sides, determine how many form valid triangles. (Hint: &lt;a href=&#34;https://en.wikipedia.org/wiki/triangle%20inequality&#34;&gt;triangle inequality&lt;/a&gt;)&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>AoC 2016 Day 2: Pin Typer</title>
      <link>https://blog.jverkamp.com/2016/12/02/aoc-2016-day-2-pin-typer/</link>
      <pubDate>Fri, 02 Dec 2016 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2016/12/02/aoc-2016-day-2-pin-typer/</guid>
      <description>&lt;h3 id=&#34;source-bathroom-securityhttpadventofcodecom2016day2&#34;&gt;Source: &lt;a href=&#34;http://adventofcode.com/2016/day/2&#34;&gt;Bathroom Security&lt;/a&gt;&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Part 1:&lt;/strong&gt; Take a keypad with the following layout:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/blockquote&gt;
&lt;p&gt;1 2 3
4 5 6
7 8 9&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>AoC 2016 Day 1: Taxicab Simulator</title>
      <link>https://blog.jverkamp.com/2016/12/01/aoc-2016-day-1-taxicab-simulator/</link>
      <pubDate>Thu, 01 Dec 2016 00:00:02 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2016/12/01/aoc-2016-day-1-taxicab-simulator/</guid>
      <description>&lt;h3 id=&#34;source-no-time-for-a-taxicabhttpadventofcodecom2016day1&#34;&gt;Source: &lt;a href=&#34;http://adventofcode.com/2016/day/1&#34;&gt;No Time for a Taxicab&lt;/a&gt;&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Part 1:&lt;/strong&gt; Starting at &lt;code&gt;0,0&lt;/code&gt; and given a string of &lt;code&gt;L#&lt;/code&gt; / &lt;code&gt;R#&lt;/code&gt; to turn left / right and move &lt;code&gt;#&lt;/code&gt; squares, where do you end up?&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
  </channel>
</rss>
