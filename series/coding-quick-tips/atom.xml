<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Coding Quick Tips on jverkamp.com</title><link>https://blog.jverkamp.com/series/coding-quick-tips/</link><description>Recent content in Coding Quick Tips on jverkamp.com</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Thu, 29 May 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://blog.jverkamp.com/series/coding-quick-tips/atom.xml" rel="self" type="application/rss+xml"/><item><title>Parsing PEM Certificates &amp; ASN.1 in Javascript</title><link>https://blog.jverkamp.com/2025/05/29/parsing-pem-certificates-asn.1-in-javascript/</link><pubDate>Thu, 29 May 2025 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2025/05/29/parsing-pem-certificates-asn.1-in-javascript/</guid><description>&lt;p>I recently had a conversation about parsing HTTPS/TLS/etc certificates client side (so that various values could be compared). There are, of course, &lt;a href="https://asn1js.org/" target="_blank" rel="noopener">libraries&lt;/a> for that, but where&amp;rsquo;s the fun in that? Let&amp;rsquo;s dig in ourselves!&lt;/p>
&lt;p>I thought of course it would be a well specified format and it wouldn&amp;rsquo;t take more than a few minutes to parse&amp;hellip; right?&lt;/p>
&lt;p>Right?&lt;/p>
&lt;nav id="TableOfContents">
 &lt;ul>
 &lt;li>&lt;a href="#parsing">Parsing&lt;/a>&lt;/li>
 &lt;li>&lt;a href="#decoding-some-datatypes">Decoding some datatypes&lt;/a>
 &lt;ul>
 &lt;li>&lt;a href="#object-identifiers--oids">Object Identifiers &amp;ndash; OIDs&lt;/a>&lt;/li>
 &lt;li>&lt;a href="#numbers">Numbers&lt;/a>&lt;/li>
 &lt;li>&lt;a href="#dates">Dates&lt;/a>&lt;/li>
 &lt;/ul>
 &lt;/li>
 &lt;li>&lt;a href="#printing-results">Printing results&lt;/a>&lt;/li>
 &lt;li>&lt;a href="#an-example">An example&lt;/a>&lt;/li>
 &lt;li>&lt;a href="#constants">Constants&lt;/a>&lt;/li>
 &lt;/ul>
&lt;/nav></description></item><item><title>A quick mitmproxy setup</title><link>https://blog.jverkamp.com/2025/02/19/a-quick-mitmproxy-setup/</link><pubDate>Wed, 19 Feb 2025 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2025/02/19/a-quick-mitmproxy-setup/</guid><description>&lt;p>Another quick thing that I set up for the first time in a &lt;em>long&lt;/em> time. It&amp;rsquo;s honestly as much a note for myself as anything, but perhaps you&amp;rsquo;ll find it useful too.&lt;/p>
&lt;p>The problem: We were having intermittent issues with a &lt;a href="https://en.wikipedia.org/wiki/content%20security%20policy">content security policy&lt;/a>. One of the warnings that cropped up was the inclusion of &lt;code>'inline-speculation-rules'&lt;/code> in the policy. This is currently only supported in Chrome and the issue was only appearing in Firefox. I could of course go through the effort of removing the header locally and testing&amp;ndash;but what if I could lie to the browser and change the header on the fly?&lt;/p>
&lt;p>Well, for that, you have a number of options. &lt;a href="https://portswigger.net/burp" target="_blank" rel="noopener">Burp Suite&lt;/a>, &lt;a href="https://www.zaproxy.org/" target="_blank" rel="noopener">ZAP&lt;/a>, &lt;a href="https://www.charlesproxy.com/" target="_blank" rel="noopener">Charles Proxy&lt;/a>. Many more, I&amp;rsquo;m sure. Any of these can modify traffic on the fly like that, but they&amp;rsquo;ll all designed for &lt;em>so much more&lt;/em> than that, making them a bit unwieldy. What I really wanted was something that was a whole lot smaller and did only this one thing (or could be at least configured as such)&lt;/p>
&lt;p>Enter &lt;a href="https://mitmproxy.org/" target="_blank" rel="noopener">&lt;code>mitmproxy&lt;/code>&lt;/a>. I&amp;rsquo;ve used it before, but never quite like this. As the name suggests, &lt;code>mitmproxy&lt;/code> is designed to &lt;a href="https://en.wikipedia.org/wiki/man-in-the-middle">man-in-the-middle&lt;/a> yourself as a proxy&amp;ndash;feed all web requests through it and it can read requests, modify and forward (or block them), read responses, modify or replace them entirely, and all so much more.&lt;/p>
&lt;p>Exactly what I needed!&lt;/p></description></item><item><title>WebCrypto SHA-256 HMAC</title><link>https://blog.jverkamp.com/2025/02/05/webcrypto-sha-256-hmac/</link><pubDate>Wed, 05 Feb 2025 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2025/02/05/webcrypto-sha-256-hmac/</guid><description>&lt;p>A quick random thing I learned that I found helpful (and you might too!):&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">async&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">hmac&lt;/span>(&lt;span style="color:#a6e22e">text&lt;/span>, &lt;span style="color:#a6e22e">secret&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">let&lt;/span> &lt;span style="color:#a6e22e">enc&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> &lt;span style="color:#a6e22e">TextEncoder&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;utf-8&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">let&lt;/span> &lt;span style="color:#a6e22e">algorithm&lt;/span> &lt;span style="color:#f92672">=&lt;/span> { &lt;span style="color:#a6e22e">name&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#34;HMAC&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">hash&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#34;SHA-256&amp;#34;&lt;/span> };
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">let&lt;/span> &lt;span style="color:#a6e22e">key&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">await&lt;/span> &lt;span style="color:#a6e22e">crypto&lt;/span>.&lt;span style="color:#a6e22e">subtle&lt;/span>.&lt;span style="color:#a6e22e">importKey&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;raw&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">enc&lt;/span>.&lt;span style="color:#a6e22e">encode&lt;/span>(&lt;span style="color:#a6e22e">secret&lt;/span>), &lt;span style="color:#a6e22e">algorithm&lt;/span>, &lt;span style="color:#66d9ef">false&lt;/span>, [&lt;span style="color:#e6db74">&amp;#34;sign&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;verify&amp;#34;&lt;/span>]);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">let&lt;/span> &lt;span style="color:#a6e22e">signature&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">await&lt;/span> &lt;span style="color:#a6e22e">crypto&lt;/span>.&lt;span style="color:#a6e22e">subtle&lt;/span>.&lt;span style="color:#a6e22e">sign&lt;/span>(&lt;span style="color:#a6e22e">algorithm&lt;/span>.&lt;span style="color:#a6e22e">name&lt;/span>, &lt;span style="color:#a6e22e">key&lt;/span>, &lt;span style="color:#a6e22e">enc&lt;/span>.&lt;span style="color:#a6e22e">encode&lt;/span>(&lt;span style="color:#a6e22e">text&lt;/span>));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">let&lt;/span> &lt;span style="color:#a6e22e">digest&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">btoa&lt;/span>(String.&lt;span style="color:#a6e22e">fromCharCode&lt;/span>(...&lt;span style="color:#66d9ef">new&lt;/span> &lt;span style="color:#a6e22e">Uint8Array&lt;/span>(&lt;span style="color:#a6e22e">signature&lt;/span>)));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">digest&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This is a function that uses the &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Web_Crypto_API" target="_blank" rel="noopener">Web Crypto API&lt;/a> to calculate a &lt;a href="https://en.wikipedia.org/wiki/SHA-256">SHA-256&lt;/a> &lt;a href="https://en.wikipedia.org/wiki/HMAC">HMAC&lt;/a> of a string given a secret value.&lt;/p>
&lt;p>I mostly worked this out so that I could figure out how &lt;em>exactly&lt;/em> &lt;code>TextEncoder&lt;/code> worked, along with &lt;code>importKey&lt;/code> (to turn a secret into proper key material) and also how to convert that back into a hex digest.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">&amp;gt;&amp;gt;&lt;/span> &lt;span style="color:#66d9ef">await&lt;/span> &lt;span style="color:#a6e22e">hmac&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;lorem ipsum&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;super secret&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">&amp;#34;qArFX93Zi83ccIayhYnuFDpd4pk3eB4rZYDvNteobSU=&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">&amp;gt;&amp;gt;&lt;/span> &lt;span style="color:#66d9ef">await&lt;/span> &lt;span style="color:#a6e22e">hmac&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;lorem ipsum doler sit amet&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;super secret&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">&amp;#34;klTAioH5nNkguNhU2YcJshaZZtJW9DEb+MTqz4NWq8E=&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">&amp;gt;&amp;gt;&lt;/span> &lt;span style="color:#66d9ef">await&lt;/span> &lt;span style="color:#a6e22e">hmac&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;lorem ipsum&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;even more super secret!&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">&amp;#34;RoQLg2uz5KWLMJM72VExH5gZOls5bdZZyzHi678eDWs=&amp;#34;&lt;/span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">&amp;gt;&amp;gt;&lt;/span> &lt;span style="color:#66d9ef">await&lt;/span> &lt;span style="color:#a6e22e">hmac&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;lorem ipsum&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;super secret&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">&amp;#34;qArFX93Zi83ccIayhYnuFDpd4pk3eB4rZYDvNteobSU=&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Disclaimer: This totally counts as rolling your own crypto. Don&amp;rsquo;t do this unless you know what you&amp;rsquo;re doing. &amp;#x1f604;&lt;/p>
&lt;p>Disclaimer disclaimer: I only rarely know what I&amp;rsquo;m doing. &amp;#x1f604; &amp;#x1f604;&lt;/p>
&lt;p>Also, for what it&amp;rsquo;s worth, this is equivalent to the Python standard libraries&amp;rsquo; &lt;code>&lt;a href="https://docs.python.org/3/search.html?q=hmac">hmac&lt;/a>&lt;/code>
 + &lt;code>&lt;a href="https://docs.python.org/3/search.html?q=base64">base64&lt;/a>&lt;/code>
:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">&amp;gt;&amp;gt;&amp;gt;&lt;/span> base64&lt;span style="color:#f92672">.&lt;/span>b64encode(hmac&lt;span style="color:#f92672">.&lt;/span>digest(&lt;span style="color:#e6db74">b&lt;/span>&lt;span style="color:#e6db74">&amp;#39;super secret&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">b&lt;/span>&lt;span style="color:#e6db74">&amp;#39;lorem ipsum&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;SHA256&amp;#39;&lt;/span>))&lt;span style="color:#f92672">.&lt;/span>decode()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">&amp;#39;qArFX93Zi83ccIayhYnuFDpd4pk3eB4rZYDvNteobSU=&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item></channel></rss>