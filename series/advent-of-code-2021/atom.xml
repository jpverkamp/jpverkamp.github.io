<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Advent of Code 2021 on jverkamp.com</title>
    <link>https://blog.jverkamp.com/series/advent-of-code-2021/</link>
    <description>Recent content in Advent of Code 2021 on jverkamp.com</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 05 Dec 2021 00:00:10 +0000</lastBuildDate><atom:link href="https://blog.jverkamp.com/series/advent-of-code-2021/atom.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>AoC 2021 Day 5: Linear Avoidinator</title>
      <link>https://blog.jverkamp.com/2021/12/05/aoc-2021-day-5-linear-avoidinator/</link>
      <pubDate>Sun, 05 Dec 2021 00:00:10 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2021/12/05/aoc-2021-day-5-linear-avoidinator/</guid>
      <description>&lt;h3 id=&#34;source-hydrothermal-venturehttpsadventofcodecom2021day5&#34;&gt;Source: &lt;a href=&#34;https://adventofcode.com/2021/day/5&#34;&gt;Hydrothermal Venture&lt;/a&gt;&lt;/h3&gt;
&lt;h4 id=&#34;part-1-given-a-list-of-lines-find-the-number-of-integer-points-which-are-covered-by-more-than-one-line-ignore-non-vertical-and-non-horizontal-lines&#34;&gt;&lt;strong&gt;Part 1:&lt;/strong&gt; Given a list of lines, find the number of integer points which are covered by more than one line (ignore non-vertical and non-horizontal lines).&lt;/h4&gt;
&lt;p&gt;Okay. Start with the data structures:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@dataclass&lt;/span&gt;(frozen&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;True)
&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Point&lt;/span&gt;:
    x: int
    y: int


&lt;span style=&#34;color:#a6e22e&#34;&gt;@dataclass&lt;/span&gt;(frozen&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;True)
&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Line&lt;/span&gt;:
    p1: Point
    p2: Point

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;is_vertical&lt;/span&gt;(self):
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;p1&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;x &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;p2&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;x

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;is_horizontal&lt;/span&gt;(self):
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;p1&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;y &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;p2&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;y

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;is_orthagonal&lt;/span&gt;(self):
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;is_vertical() &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;is_horizontal()

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;points&lt;/span&gt;(self):
        &lt;span style=&#34;color:#75715e&#34;&gt;# TODO: handle lines that aren&amp;#39;t vertical, horizontal, or diagonal&lt;/span&gt;

        xd &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;p1&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;x &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;p2&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;x &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; (&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;p1&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;x &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;p2&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;x &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
        yd &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;p1&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;y &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;p2&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;y &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; (&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;p1&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;y &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;p2&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;y &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)

        p &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;p1
        &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; p &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;p2:
            &lt;span style=&#34;color:#66d9ef&#34;&gt;yield&lt;/span&gt; p
            p &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Point(p&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;x &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; xd, p&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;y &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; yd)

        &lt;span style=&#34;color:#66d9ef&#34;&gt;yield&lt;/span&gt; p
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Dataclasses are great. They give you constructors and a bunch of other things for free. On top of that, if you specify &lt;code&gt;frozen=True&lt;/code&gt;, making them immutable, you also get &lt;code&gt;hashable&lt;/code&gt; types for free (which I&amp;rsquo;ll use in the problem).&lt;/p&gt;
&lt;p&gt;Perhaps the most interesting bit here is the function that will iterate through the &lt;code&gt;points&lt;/code&gt; in a &lt;code&gt;List&lt;/code&gt;. Specifically, it will figure out the x and y delta (&lt;code&gt;xd&lt;/code&gt; and &lt;code&gt;yd&lt;/code&gt;) and repeatedly add that until you hit the end point.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; this only works for lines that are vertical, horizontal, or diagonal (at 45 degrees). Anything else needs a better &lt;a href=&#34;https://en.wikipedia.org/wiki/line%20drawing%20algorithm&#34;&gt;line drawing algorithm&lt;/a&gt; (of which there are a few). If we need it, I&amp;rsquo;ll implement it.&lt;/p&gt;
&lt;p&gt;Next, use that to parse:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;parse&lt;/span&gt;(file: TextIO) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; List[Line]:
    result &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []

    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; line &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; file:
        x1, y1, x2, y2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [int(v) &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; v &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; line&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;replace(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39; -&amp;gt; &amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;,&amp;#39;&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;,&amp;#39;&lt;/span&gt;)]
        result&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(Line(Point(x1, y1), Point(x2, y2)))

    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; result
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The input format is &lt;code&gt;x1,y1 -&amp;gt; x2,y2&lt;/code&gt;, but it&amp;rsquo;s easier to split and convert if we do it all directly. There are a few other ways we could have done this: splitting on anything non-numeric or using a regular expression / something else for parsing directly. But I think this is clear enough.&lt;/p&gt;
&lt;p&gt;And with all that, the problem is actually pretty short:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;part1&lt;/span&gt;(file: typer&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;FileText):

    lines &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; parse(file)
    counter: MutableMapping[Point, int] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; collections&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Counter()

    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; line &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; lines:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; line&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;is_orthagonal():
            &lt;span style=&#34;color:#66d9ef&#34;&gt;continue&lt;/span&gt;

        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; point &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; line&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;points():
            counter[point] &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(sum(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; count &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; point, count &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; counter&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;items()))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We&amp;rsquo;ll use the built in &lt;code&gt;collections.Counter&lt;/code&gt; datatype, since that&amp;rsquo;s exactly what we&amp;rsquo;re doing: counting things. Then just iterate over every line, skip the non-orthagonal ones, iterate over every point, and count them up. At the end, print the number that we saw more than once. Et voila.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ python3 linear-avoidinator.py part1 input.txt
&lt;span style=&#34;color:#ae81ff&#34;&gt;5632&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>AoC 2021 Day 4: His Name Oh</title>
      <link>https://blog.jverkamp.com/2021/12/04/aoc-2021-day-4-his-name-oh/</link>
      <pubDate>Sat, 04 Dec 2021 00:00:10 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2021/12/04/aoc-2021-day-4-his-name-oh/</guid>
      <description>&lt;h3 id=&#34;source-giant-squidhttpsadventofcodecom2021day4&#34;&gt;Source: &lt;a href=&#34;https://adventofcode.com/2021/day/4&#34;&gt;Giant Squid&lt;/a&gt;&lt;/h3&gt;
&lt;h4 id=&#34;part-1-given-a-set-of-bingo-boards-and-a-list-of-numbers-find-the-first-board-to-win-multiply-the-sum-of-the-un-called-numbers-on-that-board-times-the-last-number-called&#34;&gt;&lt;strong&gt;Part 1:&lt;/strong&gt; Given a set of bingo boards and a list of numbers, find the first board to win. Multiply the sum of the un-called numbers on that board times the last number called.&lt;/h4&gt;</description>
    </item>
    
    <item>
      <title>AoC 2021 Day 3: Binary Contraption</title>
      <link>https://blog.jverkamp.com/2021/12/03/aoc-2021-day-3-binary-contraption/</link>
      <pubDate>Fri, 03 Dec 2021 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2021/12/03/aoc-2021-day-3-binary-contraption/</guid>
      <description>&lt;h3 id=&#34;source-binary-diagnostichttpsadventofcodecom2021day3&#34;&gt;Source: &lt;a href=&#34;https://adventofcode.com/2021/day/3&#34;&gt;Binary Diagnostic&lt;/a&gt;&lt;/h3&gt;
&lt;h4 id=&#34;part-1-given-a-list-of-binary-numbers-calculate-gamma-such-that-each-bit-is-the-most-common-bit-in-that-position-in-the-input-and-epsilon-which-is-the-binary-inverse-of-gamma-return-the-product&#34;&gt;&lt;strong&gt;Part 1:&lt;/strong&gt; Given a list of binary numbers, calculate gamma such that each bit is the most common bit in that position in the input and epsilon which is the binary inverse of gamma. Return the product.&lt;/h4&gt;</description>
    </item>
    
    <item>
      <title>AoC 2021 Day 2: Submarine Simulator</title>
      <link>https://blog.jverkamp.com/2021/12/02/aoc-2021-day-2-submarine-simulator/</link>
      <pubDate>Thu, 02 Dec 2021 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2021/12/02/aoc-2021-day-2-submarine-simulator/</guid>
      <description>&lt;h3 id=&#34;source-divehttpsadventofcodecom2021day2&#34;&gt;Source: &lt;a href=&#34;https://adventofcode.com/2021/day/2&#34;&gt;Dive!&lt;/a&gt;&lt;/h3&gt;
&lt;h4 id=&#34;part-1-simulate-a-submarine-with-3-commands-forward-n-down-n-and-up-n-that-move-forward-increase-depth-and-decrease-depth-in-that-order-calculate-the-product-of-the-final-position-and-depth&#34;&gt;&lt;strong&gt;Part 1:&lt;/strong&gt; Simulate a submarine with 3 commands: &lt;code&gt;forward N&lt;/code&gt;, &lt;code&gt;down N&lt;/code&gt;, and &lt;code&gt;up N&lt;/code&gt; that move forward, increase depth, and decrease depth in that order. Calculate the product of the final position and depth.&lt;/h4&gt;</description>
    </item>
    
    <item>
      <title>AoC 2021 Day 1: Depth Finder</title>
      <link>https://blog.jverkamp.com/2021/12/01/aoc-2021-day-1-depth-finder/</link>
      <pubDate>Wed, 01 Dec 2021 00:00:03 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2021/12/01/aoc-2021-day-1-depth-finder/</guid>
      <description>&lt;h3 id=&#34;source-depth-finderhttpsadventofcodecom2021day1&#34;&gt;Source: &lt;a href=&#34;https://adventofcode.com/2021/day/1&#34;&gt;Depth Finder&lt;/a&gt;&lt;/h3&gt;
&lt;h4 id=&#34;part-1-given-a-list-of-numbers-count-how-many-times-sequential-numbers-increase&#34;&gt;&lt;strong&gt;Part 1:&lt;/strong&gt; Given a list of numbers, count how many times sequential numbers increase.&lt;/h4&gt;</description>
    </item>
    
    <item>
      <title>Advent of Code 2021</title>
      <link>https://blog.jverkamp.com/2021/12/01/advent-of-code-2021/</link>
      <pubDate>Wed, 01 Dec 2021 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2021/12/01/advent-of-code-2021/</guid>
      <description>&lt;p&gt;Been a while since I&amp;rsquo;ve done an advent of code! I&amp;rsquo;ll probably backfill a few years eventually, but for now, let&amp;rsquo;s just write some code!&lt;/p&gt;
&lt;p&gt;As always, these problems are wonderful to try to solve yourself. If you agree, &lt;em&gt;stop reading now&lt;/em&gt;. This post isn&amp;rsquo;t going anywhere.&lt;/p&gt;
&lt;p&gt;If you&amp;rsquo;d like to see the full form of any particular solution, you can do so on GitHub (including previous years and possibly some I haven&amp;rsquo;t written up yet): &lt;a href=&#34;https://github.com/jpverkamp/advent-of-code&#34;&gt;jpverkamp/advent-of-code&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
