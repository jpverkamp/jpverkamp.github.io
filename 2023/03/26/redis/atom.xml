<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Redis on jverkamp.com</title><link>https://blog.jverkamp.com/2023/03/26/redis/</link><description>Recent content in Redis on jverkamp.com</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Sun, 26 Mar 2023 00:00:15 +0000</lastBuildDate><atom:link href="https://blog.jverkamp.com/2023/03/26/redis/atom.xml" rel="self" type="application/rss+xml"/><item><title>Redis in Rust: Evictions and Implementations</title><link>https://blog.jverkamp.com/2023/03/26/redis-in-rust-evictions-and-implementations/</link><pubDate>Sun, 26 Mar 2023 00:00:15 +0000</pubDate><guid>https://blog.jverkamp.com/2023/03/26/redis-in-rust-evictions-and-implementations/</guid><description>&lt;p>Another Redis in Rust series. It&amp;rsquo;s really starting to come together now!&lt;/p>
&lt;p>In this post, updating the state to store expiration times + a thread to handle said eviction + the implementation of a small pile more of the general Redis functions.&lt;/p>
&lt;nav id="TableOfContents">
 &lt;ul>
 &lt;li>&lt;a href="#better-redis-function-definitions">Better Redis function definitions&lt;/a>&lt;/li>
 &lt;li>&lt;a href="#re-parsing-set">Re-parsing SET&lt;/a>&lt;/li>
 &lt;li>&lt;a href="#implementing-ttl-on-the-state">Implementing TTL on the state&lt;/a>&lt;/li>
 &lt;li>&lt;a href="#expiration-thread">Expiration thread&lt;/a>&lt;/li>
 &lt;li>&lt;a href="#a-few-more-examples">A few more examples&lt;/a>
 &lt;ul>
 &lt;li>&lt;a href="#decr">DECR&lt;/a>&lt;/li>
 &lt;li>&lt;a href="#getrange">GETRANGE&lt;/a>&lt;/li>
 &lt;li>&lt;a href="#mget">MGET&lt;/a>&lt;/li>
 &lt;/ul>
 &lt;/li>
 &lt;li>&lt;a href="#github-copilot">Github Copilot&lt;/a>&lt;/li>
 &lt;li>&lt;a href="#full-source">Full source&lt;/a>&lt;/li>
 &lt;li>&lt;a href="#next-steps">Next steps&lt;/a>&lt;/li>
 &lt;/ul>
&lt;/nav></description></item><item><title>Redis in Rust: Testing redis-cli + GET/SET support</title><link>https://blog.jverkamp.com/2023/02/28/redis-in-rust-testing-redis-cli--get/set-support/</link><pubDate>Tue, 28 Feb 2023 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2023/02/28/redis-in-rust-testing-redis-cli--get/set-support/</guid><description>&lt;p>And I&amp;rsquo;m back. It&amp;rsquo;s been a busy month with the [Genuary]([Genuary 2023]) series and life in general, but I&amp;rsquo;m still thinking about Redis in general &amp;#x1f604;.&lt;/p>
&lt;p>Up this time, let&amp;rsquo;s see what the official &lt;code>redis-cli&lt;/code> app does when talking to our client and actually start handling some commands. Specifically, the very basic commands: &lt;code>SET&lt;/code> and &lt;code>GET&lt;/code>. With that, we would actually have a (very very basic) keystore up and running!&lt;/p>
&lt;nav id="TableOfContents">
 &lt;ul>
 &lt;li>&lt;a href="#testing-the-client">Testing the client&lt;/a>&lt;/li>
 &lt;li>&lt;a href="#implementing-commands">Implementing Commands&lt;/a>&lt;/li>
 &lt;li>&lt;a href="#parsing-and-running-a-command">Parsing and running a &lt;code>Command&lt;/code>&lt;/a>&lt;/li>
 &lt;li>&lt;a href="#set-and-get">SET and GET&lt;/a>&lt;/li>
 &lt;li>&lt;a href="#testing-with-our-client">Testing with our client&lt;/a>&lt;/li>
 &lt;li>&lt;a href="#full-source">Full source&lt;/a>&lt;/li>
 &lt;li>&lt;a href="#next-steps">Next steps&lt;/a>&lt;/li>
 &lt;/ul>
&lt;/nav></description></item><item><title>Redis in Rust: A REPL Client [Part 3]</title><link>https://blog.jverkamp.com/2023/02/09/redis-in-rust-a-repl-client-part-3/</link><pubDate>Thu, 09 Feb 2023 01:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2023/02/09/redis-in-rust-a-repl-client-part-3/</guid><description>&lt;p>Okay, we&amp;rsquo;ve got a server and we can ping it. Let&amp;rsquo;s actually make a simple client, so I don&amp;rsquo;t have to do funny things with echo any more. Specifically, let&amp;rsquo;s make a &lt;a href="https://en.wikipedia.org/wiki/REPL">REPL&lt;/a>!&lt;/p>
&lt;nav id="TableOfContents">
 &lt;ul>
 &lt;li>&lt;a href="#a-repl">A REPL&lt;/a>
 &lt;ul>
 &lt;li>&lt;a href="#the-code">The code&lt;/a>&lt;/li>
 &lt;li>&lt;a href="#unsafe">&lt;code>unsafe&lt;/code>&amp;hellip;&lt;/a>&lt;/li>
 &lt;li>&lt;a href="#server">Server&lt;/a>&lt;/li>
 &lt;li>&lt;a href="#client">Client&lt;/a>&lt;/li>
 &lt;/ul>
 &lt;/li>
 &lt;li>&lt;a href="#whats-next">What&amp;rsquo;s next?&lt;/a>&lt;/li>
 &lt;/ul>
&lt;/nav></description></item><item><title>Redis in Rust: An Echo Server [Part 2]</title><link>https://blog.jverkamp.com/2023/02/04/redis-in-rust-an-echo-server-part-2/</link><pubDate>Sat, 04 Feb 2023 23:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2023/02/04/redis-in-rust-an-echo-server-part-2/</guid><description>&lt;p>Following up from &lt;a href="https://blog.jverkamp.com/2023/01/31/cloning-redis-in-rust-resp-part-1/">Cloning Redis in Rust: RESP [Part 1]&lt;/a>, we can parse the protocol. So now&amp;hellip; let&amp;rsquo;s do something with it.&lt;/p>
&lt;p>The obvious(ish) next step, in my mind? Make a server. It&amp;rsquo;s all going to be over the network eventually, so it&amp;rsquo;s either here or storing data. Here it is!&lt;/p>
&lt;p>Specifically, my goal is &lt;em>not&lt;/em> to build the networking and data structures for this project from scratch. Where there are primitives or libraries that will do something like networking for me, I&amp;rsquo;m going to use them.&lt;/p>
&lt;p>Ergo:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://docs.rs/tokio/latest/tokio/" target="_blank" rel="noopener">&lt;code>tokio&lt;/code>&lt;/a> for networking (+ async)&lt;/li>
&lt;li>&lt;a href="https://docs.rs/tracing/latest/tracing/" target="_blank" rel="noopener">&lt;code>tracing&lt;/code>&lt;/a> for logging&lt;/li>
&lt;/ul>
&lt;p>So, how do I write a simple server in Tokio?&lt;/p>
&lt;nav id="TableOfContents">
 &lt;ul>
 &lt;li>&lt;a href="#im-listening">I&amp;rsquo;m listening!&lt;/a>&lt;/li>
 &lt;li>&lt;a href="#what-did-you-say-again">What did you say again?&lt;/a>&lt;/li>
 &lt;li>&lt;a href="#actually-asynchronously">Actually asynchronously&lt;/a>&lt;/li>
 &lt;li>&lt;a href="#doing-the-lumberjack-thing">Doing the lumberjack thing.&lt;/a>&lt;/li>
 &lt;li>&lt;a href="#so-werent-we-doing-something-with-redis">So&amp;hellip; weren&amp;rsquo;t we doing something with Redis?&lt;/a>&lt;/li>
 &lt;li>&lt;a href="#is-that-it">Is that it?&lt;/a>&lt;/li>
 &lt;/ul>
&lt;/nav></description></item><item><title>Cloning Redis in Rust: RESP [Part 1]</title><link>https://blog.jverkamp.com/2023/01/31/cloning-redis-in-rust-resp-part-1/</link><pubDate>Tue, 31 Jan 2023 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2023/01/31/cloning-redis-in-rust-resp-part-1/</guid><description>&lt;p>Recently, I read through &lt;a href="https://blog.jverkamp.com/2023/01/31/build-your-own-redis-with-c/c-/">Build Your Own Redis with C/C&amp;#43;&amp;#43;&lt;/a>. C/C++ are ugly, so let&amp;rsquo;s run through it in Rust!&lt;/p>
&lt;p>My goal: implement some large subset of &lt;a href="https://redis.io/" target="_blank" rel="noopener">Redis&lt;/a> (both server and client) in Rust. For any features I implement, it should be compatible with Redis off the shelf. I should be able to use their client with my server and their server with my client and it should just work.&lt;/p>
&lt;p>No idea if this is going to work out, but it sounds like an interesting problem!&lt;/p>
&lt;p>First task: &lt;a href="https://redis.io/docs/reference/protocol-spec/" target="_blank" rel="noopener">the REdis Serialization Protocol (RESP)&lt;/a>.&lt;/p></description></item><item><title>Directly monitoring Sidekiq in Redis</title><link>https://blog.jverkamp.com/2020/07/14/directly-monitoring-sidekiq-in-redis/</link><pubDate>Tue, 14 Jul 2020 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2020/07/14/directly-monitoring-sidekiq-in-redis/</guid><description>&lt;p>Another thing that came up recently: we have many (many) &lt;a href="https://github.com/mperham/sidekiq" target="_blank" rel="noopener">sidekiq&lt;/a> queues. Each has their own admin interface, but sometimes you just want all of the information in one place. Of course, you could bookmark all of the pages. Or make a single page with a lot of frames (remember &lt;a href="https://en.wikipedia.org/wiki/HTML%20frames">HTML frames&lt;/a>?). Or use their API. But where&amp;rsquo;s the fun in that? Instead, let&amp;rsquo;s dig straight into the redis backend and see what we can see!&lt;/p></description></item><item><title>Automagically storing Python objects in Redis</title><link>https://blog.jverkamp.com/2015/07/16/automagically-storing-python-objects-in-redis/</link><pubDate>Thu, 16 Jul 2015 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2015/07/16/automagically-storing-python-objects-in-redis/</guid><description>&lt;p>When you&amp;rsquo;re starting out on a simple web application, eventually&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup> you will reach the point where you need to store some form of persistant data. Basically, you have three options&lt;sup id="fnref:2">&lt;a href="#fn:2" class="footnote-ref" role="doc-noteref">2&lt;/a>&lt;/sup>:&lt;/p>
&lt;ul>
&lt;li>Store the information in flat files on the file system&lt;/li>
&lt;li>Store the information in a database (&lt;a href="https://www.mysql.com/" target="_blank" rel="noopener">MySQL&lt;/a>, &lt;a href="https://www.sqlite.org/" target="_blank" rel="noopener">SQLite&lt;/a> etc)&lt;/li>
&lt;li>Store the information in a key/value store (&lt;a href="https://www.mongodb.org/" target="_blank" rel="noopener">mongoDB&lt;/a>, &lt;a href="http://redis.io/" target="_blank" rel="noopener">reddis&lt;/a>)&lt;/li>
&lt;/ul>
&lt;p>There are all manner of pros and cons to each, in particular how easy they are to get started in, how well they fit the data you are using, and how well they will scale horizontally (adding more machines rather than bigger ones).&lt;/p></description></item></channel></rss>