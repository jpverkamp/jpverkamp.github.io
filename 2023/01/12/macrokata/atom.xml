<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Macrokata on jverkamp.com</title><link>https://blog.jverkamp.com/2023/01/12/macrokata/</link><description>Recent content in Macrokata on jverkamp.com</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Thu, 12 Jan 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://blog.jverkamp.com/2023/01/12/macrokata/atom.xml" rel="self" type="application/rss+xml"/><item><title>Writing a curry! macro for MacroKata</title><link>https://blog.jverkamp.com/2023/01/12/writing-a-curry-macro-for-macrokata/</link><pubDate>Thu, 12 Jan 2023 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2023/01/12/writing-a-curry-macro-for-macrokata/</guid><description>&lt;p>Recently I&amp;rsquo;ve been wanting to learn more about macros in Rust. It was always one of my favorite parts of Racket, so let&amp;rsquo;s see what we can do.&lt;/p>
&lt;p>In order to do that, I&amp;rsquo;ve been following the excellent &lt;a href="https://tfpk.github.io/macrokata/" target="_blank" rel="noopener">MacroKata&lt;/a> series. It goes all the way through, starting with the very basics, adding in literals and expressions, handling repetition, nesting, and finally recursion.&lt;/p>
&lt;p>What I really want to talk about those is the one that I found most interesting: &lt;code>curry!&lt;/code>.&lt;/p></description></item></channel></rss>