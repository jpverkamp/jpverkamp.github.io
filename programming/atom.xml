<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Programming on jverkamp.com</title>
    <link>https://blog.jverkamp.com/programming/</link>
    <description>Recent content in Programming on jverkamp.com</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 07 Dec 2018 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://blog.jverkamp.com/programming/atom.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>AoC 2018 Day 7: Job Simulator</title>
      <link>https://blog.jverkamp.com/2018/12/07/aoc-2018-day-7-job-simulator/</link>
      <pubDate>Fri, 07 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2018/12/07/aoc-2018-day-7-job-simulator/</guid>
      <description>&lt;h3 id=&#34;source-the-sum-of-its-parts-https-adventofcode-com-2018-day-7&#34;&gt;Source: &lt;a href=&#34;https://adventofcode.com/2018/day/7&#34;&gt;The Sum of Its Parts&lt;/a&gt;&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Part 1:&lt;/strong&gt; Given a list of job dependencies (job A must be before job B), determine the order jobs must be done in. Break ties lexicographically.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>AoC 2018 Day 6: Infinite Area Simulator</title>
      <link>https://blog.jverkamp.com/2018/12/06/aoc-2018-day-6-infinite-area-simulator/</link>
      <pubDate>Thu, 06 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2018/12/06/aoc-2018-day-6-infinite-area-simulator/</guid>
      <description>&lt;h3 id=&#34;source-chronal-coordinates-https-adventofcode-com-2018-day-6&#34;&gt;Source: &lt;a href=&#34;https://adventofcode.com/2018/day/6&#34;&gt;Chronal Coordinates&lt;/a&gt;&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Part 1:&lt;/strong&gt; Given a list of points, calculate the region of points closest to each point (using &lt;a href=&#34;https://en.wikipedia.org/wiki/Manhattan%20distance&#34;&gt;Manhattan distance&lt;/a&gt;). Return the size of the largest non-infinite region.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>AoC 2018 Day 5: Alchemical reduction</title>
      <link>https://blog.jverkamp.com/2018/12/05/aoc-2018-day-5-alchemical-reduction/</link>
      <pubDate>Wed, 05 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2018/12/05/aoc-2018-day-5-alchemical-reduction/</guid>
      <description>&lt;h3 id=&#34;source-alchemical-reduction-https-adventofcode-com-2018-day-5&#34;&gt;Source: &lt;a href=&#34;https://adventofcode.com/2018/day/5&#34;&gt;Alchemical Reduction&lt;/a&gt;&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Part 1:&lt;/strong&gt; Given a string, reduce it by removing pairs of letters that are the same letter but different cases. Repeat until you have a minimal string.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>AoC 2018 Day 4: Sleeping on the job</title>
      <link>https://blog.jverkamp.com/2018/12/04/aoc-2018-day-4-sleeping-on-the-job/</link>
      <pubDate>Tue, 04 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2018/12/04/aoc-2018-day-4-sleeping-on-the-job/</guid>
      <description>&lt;h3 id=&#34;source-repose-record-https-adventofcode-com-2018-day-4&#34;&gt;Source: &lt;a href=&#34;https://adventofcode.com/2018/day/4&#34;&gt;Repose Record&lt;/a&gt;&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Part 1:&lt;/strong&gt; Given a log of guard shifts and times asleep/awake, calculate the guard that was asleep most often and which minute they were most asleep for.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>AoC 2018 Day 3: Regionification</title>
      <link>https://blog.jverkamp.com/2018/12/03/aoc-2018-day-3-regionification/</link>
      <pubDate>Mon, 03 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2018/12/03/aoc-2018-day-3-regionification/</guid>
      <description>&lt;h3 id=&#34;source-no-matter-how-you-slice-it-https-adventofcode-com-2018-day-3&#34;&gt;Source: &lt;a href=&#34;https://adventofcode.com/2018/day/3&#34;&gt;No Matter How You Slice It&lt;/a&gt;&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Part 1:&lt;/strong&gt; Given a list of overlapping regions defined by (left, top, width, height) count how many integer points occur in more than one region.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>AoC 2018 Day 2: Counting letters</title>
      <link>https://blog.jverkamp.com/2018/12/02/aoc-2018-day-2-counting-letters/</link>
      <pubDate>Sun, 02 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2018/12/02/aoc-2018-day-2-counting-letters/</guid>
      <description>&lt;h3 id=&#34;source-inventory-management-system-https-adventofcode-com-2018-day-2&#34;&gt;Source: &lt;a href=&#34;https://adventofcode.com/2018/day/2&#34;&gt;Inventory Management System&lt;/a&gt;&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Part 1:&lt;/strong&gt; Given a list of strings, count how many contain exactly two of a letter (&lt;code&gt;a&lt;/code&gt;) and how many contain exactly three of a letter (&lt;code&gt;b&lt;/code&gt;). Calculate &lt;code&gt;a*b&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>AoC 2018 Day 1: Sum-thing to start with</title>
      <link>https://blog.jverkamp.com/2018/12/01/aoc-2018-day-1-sum-thing-to-start-with/</link>
      <pubDate>Sat, 01 Dec 2018 00:00:03 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2018/12/01/aoc-2018-day-1-sum-thing-to-start-with/</guid>
      <description>&lt;h3 id=&#34;source-chronal-calibration-https-adventofcode-com-2018-day-1&#34;&gt;Source: &lt;a href=&#34;https://adventofcode.com/2018/day/1&#34;&gt;Chronal Calibration&lt;/a&gt;&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Part 1:&lt;/strong&gt; Given a list of numbers (positive and negative) calculate the sum.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Advent of Code 2018</title>
      <link>https://blog.jverkamp.com/2018/12/01/advent-of-code-2018/</link>
      <pubDate>Sat, 01 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2018/12/01/advent-of-code-2018/</guid>
      <description>&lt;p&gt;Let&amp;rsquo;s do it again! I&amp;rsquo;m starting a day late, but much better than &lt;a href=&#34;https://blog.jverkamp.com/2018/01/08/advent-of-code-2017/&#34;&gt;last year&lt;/a&gt; ðŸ˜„!&lt;/p&gt;

&lt;p&gt;This time around, I&amp;rsquo;m hoping to solve each problem in both Python and Racket, both to show an example of how the languages differ and &amp;hellip; well, because I can ðŸ˜‡.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;EDIT 2018-12-05&lt;/em&gt;: Yeah&amp;hellip; I&amp;rsquo;m not actually going to do these in both Racket and Python. The solutions are ending up being near direct translations. Since there are probably fewer people solving these in Racket, I&amp;rsquo;ll do that first and Python eventuallyâ„¢.&lt;/p&gt;

&lt;p&gt;As always, these problems are wonderful to try to solve yourself. If you agree, &lt;em&gt;stop reading now&lt;/em&gt;. This post isn&amp;rsquo;t going anywhere.&lt;/p&gt;

&lt;p&gt;If you&amp;rsquo;d like to see the full form of any particular solution, you can do so on GitHub (including previous years and possibly some I haven&amp;rsquo;t written up yet): &lt;a href=&#34;https://github.com/jpverkamp/advent-of-code&#34;&gt;jpverkamp/advent-of-code&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Simple LocalStorage Notepad</title>
      <link>https://blog.jverkamp.com/2018/09/26/simple-localstorage-notepad/</link>
      <pubDate>Wed, 26 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2018/09/26/simple-localstorage-notepad/</guid>
      <description>&lt;p&gt;I have a large number of keyword bookmarks in whichever browser I happen to be using at the time that I&amp;rsquo;ve been building up over the years&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:todo&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:todo&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;. One of the ones I particular enjoy is &lt;code&gt;text&lt;/code&gt;: &lt;code&gt;data:text/html, &amp;lt;html contenteditable&amp;gt;&lt;/code&gt;. What that does is open a new tab where I can take notes, completely locally. It&amp;rsquo;s really handy&amp;hellip; but there&amp;rsquo;s one big problem: I often accidentally close the tab and lose whatever I had been typing. So I decided to take a few minutes to write up a simple extension of the idea that would save the data to &lt;a href=&#34;https://en.wikipedia.org/wiki/LocalStorage&#34;&gt;LocalStorage&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Adding HSTS to Redirects in Apache</title>
      <link>https://blog.jverkamp.com/2018/07/18/adding-hsts-to-redirects-in-apache/</link>
      <pubDate>Wed, 18 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2018/07/18/adding-hsts-to-redirects-in-apache/</guid>
      <description>&lt;p&gt;TLDR:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-apache&#34; data-lang=&#34;apache&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Use &amp;#39;always&amp;#39; so headers are also set for non-2XX and unset to avoid duplicates&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;IfModule&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;headers_module&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
	header unset Strict-Transport-Security
	header always set Strict-Transport-Security &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;max-age=16070400; includeSubDomains;&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/IfModule&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Slightly&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; longer version:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.eff.org/https-everywhere&#34;&gt;HTTPS everywhere&lt;/a&gt; is a worthwhile goal. Even when you have traffic that isn&amp;rsquo;t super interesting or sensitive by itself, the fact that you&amp;rsquo;re encrypting it makes traffic that really does need to be encrypted safer against tools that grab all of the encrypted traffic they can to decrypt later if/when possible.&lt;/p&gt;

&lt;p&gt;One of the downsides of using HTTPS though is that without certain things in place, many users will still type &lt;code&gt;domain.com&lt;/code&gt; in their address bar from time to time, completely missing out on the &lt;code&gt;https://&lt;/code&gt;. While you can immediately redirect them, that very first request is a risk, since if a &lt;a href=&#34;https://en.wikipedia.org/wiki/man-in-the-middle%20attack&#34;&gt;man-in-the-middle attack&lt;/a&gt; happens to catch that request, they can downgrade the entire connection.&lt;/p&gt;

&lt;p&gt;Enter &lt;a href=&#34;https://en.wikipedia.org/wiki/HTTP%20Strict%20Transport%20Security&#34;&gt;HTTP Strict Transport Security&lt;/a&gt; (HSTS). It&amp;rsquo;s a HTTP header that you can send on the first &lt;code&gt;HTTPS&lt;/code&gt; connection you establish with a compatible client. Once you&amp;rsquo;ve done that, any further requests (until the header&amp;rsquo;s TTL expires without being renewed) will be sent to &lt;code&gt;https://&lt;/code&gt; no matter what the user types. Which solves the first request problem for all sessions&amp;hellip; but it still doesn&amp;rsquo;t fix the very first time you have to get the header. So how do you fix that?&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>