<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Programming on jverkamp.com</title><link>https://blog.jverkamp.com/programming/</link><description>Recent content in Programming on jverkamp.com</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Thu, 28 Dec 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://blog.jverkamp.com/programming/atom.xml" rel="self" type="application/rss+xml"/><item><title>Advent of Code 2023 - Testing and Timing</title><link>https://blog.jverkamp.com/2023/12/28/advent-of-code-2023-testing-and-timing/</link><pubDate>Thu, 28 Dec 2023 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2023/12/28/advent-of-code-2023-testing-and-timing/</guid><description>&lt;p>A quick follow up to &lt;a href="https://blog.jverkamp.com/series/advent-of-code-2023/">Advent of Code 2023&lt;/a>: testing and timing.&lt;/p>
&lt;p>It&amp;rsquo;s been bothering me a bit that I haven&amp;rsquo;t had a generic way to run tests and timing on every problem as I&amp;rsquo;m going.&lt;/p>
&lt;p>So let&amp;rsquo;s fix it!&lt;/p>
&lt;nav id="TableOfContents">
&lt;ul>
&lt;li>&lt;a href="#testing">Testing&lt;/a>&lt;/li>
&lt;li>&lt;a href="#timing">Timing&lt;/a>&lt;/li>
&lt;li>&lt;a href="#summary">Summary&lt;/a>&lt;/li>
&lt;/ul>
&lt;/nav></description></item><item><title>AoC 2023 Day 25: Graph Splitinator</title><link>https://blog.jverkamp.com/2023/12/25/aoc-2023-day-25-graph-splitinator/</link><pubDate>Mon, 25 Dec 2023 00:00:03 +0000</pubDate><guid>https://blog.jverkamp.com/2023/12/25/aoc-2023-day-25-graph-splitinator/</guid><description>&lt;h2 id="source-day-25-snowverloadhttpsadventofcodecom2023day25">Source: &lt;a href="https://adventofcode.com/2023/day/25" target="_blank" rel="noopener">Day 25: Snowverload&lt;/a>&lt;/h2>
&lt;p>&lt;a href="https://github.com/jpverkamp/advent-of-code/tree/master/2023/solutions/day25" target="_blank" rel="noopener">Full solution&lt;/a> for today (spoilers!)&lt;/p>
&lt;nav id="TableOfContents">
&lt;ul>
&lt;li>&lt;a href="#source-day-25-snowverloadhttpsadventofcodecom2023day25">Source: &lt;a href="https://adventofcode.com/2023/day/25">Day 25: Snowverload&lt;/a>&lt;/a>&lt;/li>
&lt;li>&lt;a href="#part-1">Part 1&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#parsing">Parsing&lt;/a>&lt;/li>
&lt;li>&lt;a href="#solution-1-brute-force">Solution 1: Brute Force&lt;/a>&lt;/li>
&lt;li>&lt;a href="#a-dot-graph">A dot graph&lt;/a>&lt;/li>
&lt;li>&lt;a href="#solution-2-calculate-heavy-edges">Solution 2: Calculate &amp;lsquo;heavy&amp;rsquo; edges&lt;/a>&lt;/li>
&lt;li>&lt;a href="#a-better-n">A better N&lt;/a>&lt;/li>
&lt;li>&lt;a href="#performance">Performance&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#part-2">Part 2&lt;/a>&lt;/li>
&lt;/ul>
&lt;/nav>
&lt;h2 id="part-1">Part 1&lt;/h2>
&lt;blockquote>
&lt;p>Given an &lt;a href="https://en.wikipedia.org/wiki/undirected%20graph">undirected graph&lt;/a>, find 3 edges that split the graph into two &lt;a href="https://en.wikipedia.org/wiki/connected%20components">connected components&lt;/a>. Return the product of the component&amp;rsquo;s sizes.&lt;/p>
&lt;/blockquote></description></item><item><title>AoC 2023 Day 24: Collisionator</title><link>https://blog.jverkamp.com/2023/12/24/aoc-2023-day-24-collisionator/</link><pubDate>Sun, 24 Dec 2023 00:00:03 +0000</pubDate><guid>https://blog.jverkamp.com/2023/12/24/aoc-2023-day-24-collisionator/</guid><description>&lt;h2 id="source-day-24-never-tell-me-the-oddshttpsadventofcodecom2023day24">Source: &lt;a href="https://adventofcode.com/2023/day/24" target="_blank" rel="noopener">Day 24: Never Tell Me The Odds&lt;/a>&lt;/h2>
&lt;p>&lt;a href="https://github.com/jpverkamp/advent-of-code/tree/master/2023/solutions/day24" target="_blank" rel="noopener">Full solution&lt;/a> for today (spoilers!)&lt;/p>
&lt;nav id="TableOfContents">
&lt;ul>
&lt;li>&lt;a href="#source-day-24-never-tell-me-the-oddshttpsadventofcodecom2023day24">Source: &lt;a href="https://adventofcode.com/2023/day/24">Day 24: Never Tell Me The Odds&lt;/a>&lt;/a>&lt;/li>
&lt;li>&lt;a href="#part-1">Part 1&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#parsing-and-types">Parsing and Types&lt;/a>&lt;/li>
&lt;li>&lt;a href="#xy-intersections">XY Intersections&lt;/a>&lt;/li>
&lt;li>&lt;a href="#solution">Solution&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#part-2">Part 2&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#solution-1-brute-force">Solution 1: Brute Force&lt;/a>&lt;/li>
&lt;li>&lt;a href="#solution-2-using-z3">Solution 2: Using Z3&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#performance">Performance&lt;/a>&lt;/li>
&lt;/ul>
&lt;/nav>
&lt;h2 id="part-1">Part 1&lt;/h2>
&lt;blockquote>
&lt;p>Given a set of 3D vectors (origin + velocity), count how many times the vectors would intersect. Ignore the Z-coordinate for this part; the collisions do not have to be at the same time.&lt;/p>
&lt;/blockquote></description></item><item><title>AoC 2023 Day 23: Looong Mazinator</title><link>https://blog.jverkamp.com/2023/12/23/aoc-2023-day-23-looong-mazinator/</link><pubDate>Sat, 23 Dec 2023 00:00:03 +0000</pubDate><guid>https://blog.jverkamp.com/2023/12/23/aoc-2023-day-23-looong-mazinator/</guid><description>&lt;h2 id="source-day-23-a-long-walkhttpsadventofcodecom2023day23">Source: &lt;a href="https://adventofcode.com/2023/day/23" target="_blank" rel="noopener">Day 23: A Long Walk&lt;/a>&lt;/h2>
&lt;p>&lt;a href="https://github.com/jpverkamp/advent-of-code/tree/master/2023/solutions/day23" target="_blank" rel="noopener">Full solution&lt;/a> for today (spoilers!)&lt;/p>
&lt;nav id="TableOfContents">
&lt;ul>
&lt;li>&lt;a href="#source-day-23-a-long-walkhttpsadventofcodecom2023day23">Source: &lt;a href="https://adventofcode.com/2023/day/23">Day 23: A Long Walk&lt;/a>&lt;/a>&lt;/li>
&lt;li>&lt;a href="#part-1">Part 1&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#edit-1-petgraph">Edit 1: Petgraph&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#part-2">Part 2&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#solution-1-brute-force">Solution 1: Brute force&lt;/a>&lt;/li>
&lt;li>&lt;a href="#solution-2-a-better-path">Solution 2: A better &lt;code>Path&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="#solution-3-finding-points-of-interest">Solution 3: Finding points of interest&lt;/a>&lt;/li>
&lt;li>&lt;a href="#edit-1-more-petgraph">Edit 1: More petgraph!&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#performance">Performance&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#edit-1-petgraph-performance">Edit 1: Petgraph performance&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/nav>
&lt;h2 id="part-1">Part 1&lt;/h2>
&lt;blockquote>
&lt;p>Find the longest non-overlapping path through a maze with walls (&lt;code>#&lt;/code>) and one way paths (&lt;code>^v&amp;lt;&amp;gt;&lt;/code>).&lt;/p>
&lt;/blockquote></description></item><item><title>AoC 2023 Day 22: Block Dropinator</title><link>https://blog.jverkamp.com/2023/12/22/aoc-2023-day-22-block-dropinator/</link><pubDate>Fri, 22 Dec 2023 00:00:03 +0000</pubDate><guid>https://blog.jverkamp.com/2023/12/22/aoc-2023-day-22-block-dropinator/</guid><description>&lt;h2 id="source-day-22-sand-slabshttpsadventofcodecom2023day22">Source: &lt;a href="https://adventofcode.com/2023/day/22" target="_blank" rel="noopener">Day 22: Sand Slabs&lt;/a>&lt;/h2>
&lt;p>&lt;a href="https://github.com/jpverkamp/advent-of-code/tree/master/2023/solutions/day22" target="_blank" rel="noopener">Full solution&lt;/a> for today (spoilers!)&lt;/p>
&lt;nav id="TableOfContents">
&lt;ul>
&lt;li>&lt;a href="#source-day-22-sand-slabshttpsadventofcodecom2023day22">Source: &lt;a href="https://adventofcode.com/2023/day/22">Day 22: Sand Slabs&lt;/a>&lt;/a>&lt;/li>
&lt;li>&lt;a href="#part-1">Part 1&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#types-and-parsing">Types and Parsing&lt;/a>&lt;/li>
&lt;li>&lt;a href="#solution">Solution&lt;/a>&lt;/li>
&lt;li>&lt;a href="#edit-1-now-with-faster-dropping">Edit 1, Now with faster dropping&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#part-2">Part 2&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#heading">&lt;/a>&lt;/li>
&lt;li>&lt;a href="#trying-other-datatypes">Trying other datatypes&lt;/a>&lt;/li>
&lt;li>&lt;a href="#remove-debugging">Remove debugging&lt;/a>&lt;/li>
&lt;li>&lt;a href="#edit-1-using-fast-drop">Edit 1, Using fast drop&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#performance">Performance&lt;/a>&lt;/li>
&lt;/ul>
&lt;/nav>
&lt;h2 id="part-1">Part 1&lt;/h2>
&lt;blockquote>
&lt;p>Given a series of 3D blocks, allow them to fall until the simulation is stable. Any cube of a block is sufficient to support another block, ignore rotations etc.&lt;/p>
&lt;p>How many blocks are not the sole supporter for any other block?&lt;/p>
&lt;/blockquote></description></item><item><title>AoC 2023 Day 21: Step Step Stepinator</title><link>https://blog.jverkamp.com/2023/12/21/aoc-2023-day-21-step-step-stepinator/</link><pubDate>Thu, 21 Dec 2023 00:00:03 +0000</pubDate><guid>https://blog.jverkamp.com/2023/12/21/aoc-2023-day-21-step-step-stepinator/</guid><description>&lt;h2 id="source-day-21-step-counterhttpsadventofcodecom2023day21">Source: &lt;a href="https://adventofcode.com/2023/day/21" target="_blank" rel="noopener">Day 21: Step Counter&lt;/a>&lt;/h2>
&lt;p>&lt;a href="https://github.com/jpverkamp/advent-of-code/tree/master/2023/solutions/day21" target="_blank" rel="noopener">Full solution&lt;/a> for today (spoilers!)&lt;/p>
&lt;nav id="TableOfContents">
&lt;ul>
&lt;li>&lt;a href="#source-day-21-step-counterhttpsadventofcodecom2023day21">Source: &lt;a href="https://adventofcode.com/2023/day/21">Day 21: Step Counter&lt;/a>&lt;/a>&lt;/li>
&lt;li>&lt;a href="#part-1">Part 1&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#parsing">Parsing&lt;/a>&lt;/li>
&lt;li>&lt;a href="#solution">Solution&lt;/a>&lt;/li>
&lt;li>&lt;a href="#re-calculating-bounds">Re-calculating Bounds&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#part-2">Part 2&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#brute-force">Brute Force&lt;/a>&lt;/li>
&lt;li>&lt;a href="#solution-1">Solution&lt;/a>&lt;/li>
&lt;li>&lt;a href="#another-option">Another option&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#performance">Performance&lt;/a>&lt;/li>
&lt;/ul>
&lt;/nav>
&lt;h2 id="part-1">Part 1&lt;/h2>
&lt;blockquote>
&lt;p>Given a(n infinite) grid of walls &lt;code>#&lt;/code>, count how many points can be reached by exactly 64 steps from a starting point.&lt;/p>
&lt;/blockquote></description></item><item><title>AoC 2023 Day 20: Flip-Flopinator</title><link>https://blog.jverkamp.com/2023/12/20/aoc-2023-day-20-flip-flopinator/</link><pubDate>Wed, 20 Dec 2023 00:00:03 +0000</pubDate><guid>https://blog.jverkamp.com/2023/12/20/aoc-2023-day-20-flip-flopinator/</guid><description>&lt;h2 id="source-day-20-pulse-propagationhttpsadventofcodecom2023day20">Source: &lt;a href="https://adventofcode.com/2023/day/20" target="_blank" rel="noopener">Day 20: Pulse Propagation&lt;/a>&lt;/h2>
&lt;p>&lt;a href="https://github.com/jpverkamp/advent-of-code/tree/master/2023/solutions/day20" target="_blank" rel="noopener">Full solution&lt;/a> for today (spoilers!)&lt;/p>
&lt;nav id="TableOfContents">
&lt;ul>
&lt;li>&lt;a href="#source-day-20-pulse-propagationhttpsadventofcodecom2023day20">Source: &lt;a href="https://adventofcode.com/2023/day/20">Day 20: Pulse Propagation&lt;/a>&lt;/a>&lt;/li>
&lt;li>&lt;a href="#part-1">Part 1&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#types-and-parsing">Types and Parsing&lt;/a>&lt;/li>
&lt;li>&lt;a href="#solution">Solution&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#part-2">Part 2&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#solution-1-brute-force">Solution 1: Brute Force&lt;/a>&lt;/li>
&lt;li>&lt;a href="#a-pretty-picture">A pretty picture&lt;/a>&lt;/li>
&lt;li>&lt;a href="#solution-2-least-common-multiple">Solution 2: Least common multiple&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#performance">Performance&lt;/a>&lt;/li>
&lt;/ul>
&lt;/nav>
&lt;h2 id="part-1">Part 1&lt;/h2>
&lt;blockquote>
&lt;p>Simulate a virtual circuit with &lt;code>high&lt;/code> and &lt;code>low&lt;/code> pulses and four kinds of chips:&lt;/p>
&lt;ul>
&lt;li>Broadcast - Re-transmit all pulses&lt;/li>
&lt;li>Flip-flops - On a &lt;code>low&lt;/code> pulse, toggle internal state; if it was on, send &lt;code>high&lt;/code>; otherwise send &lt;code>low&lt;/code>&lt;/li>
&lt;li>Conjunction - Remember input from each attached module; if all inputs were &lt;code>high&lt;/code>, send a &lt;code>low&lt;/code>, otherwise send &lt;code>high&lt;/code>&lt;/li>
&lt;li>Output - Do nothing; just receive pulses&lt;/li>
&lt;/ul>
&lt;p>Count the product of &lt;code>low&lt;/code> and &lt;code>high&lt;/code> pulses sent after 1000 &lt;code>low&lt;/code> inputs to &lt;code>broadcaster&lt;/code>.&lt;/p>
&lt;/blockquote></description></item><item><title>AoC 2023 Day 19: Assembly Lininator</title><link>https://blog.jverkamp.com/2023/12/19/aoc-2023-day-19-assembly-lininator/</link><pubDate>Tue, 19 Dec 2023 00:00:03 +0000</pubDate><guid>https://blog.jverkamp.com/2023/12/19/aoc-2023-day-19-assembly-lininator/</guid><description>&lt;h2 id="source-day-19-aplentyhttpsadventofcodecom2023day19">Source: &lt;a href="https://adventofcode.com/2023/day/19" target="_blank" rel="noopener">Day 19: Aplenty&lt;/a>&lt;/h2>
&lt;p>&lt;a href="https://github.com/jpverkamp/advent-of-code/tree/master/2023/solutions/day19" target="_blank" rel="noopener">Full solution&lt;/a> for today (spoilers!)&lt;/p>
&lt;nav id="TableOfContents">
&lt;ul>
&lt;li>&lt;a href="#source-day-19-aplentyhttpsadventofcodecom2023day19">Source: &lt;a href="https://adventofcode.com/2023/day/19">Day 19: Aplenty&lt;/a>&lt;/a>&lt;/li>
&lt;li>&lt;a href="#part-1">Part 1&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#types-and-parsing">Types and Parsing&lt;/a>&lt;/li>
&lt;li>&lt;a href="#simulation">Simulation&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#part-2">Part 2&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#brute-force">Brute Force&lt;/a>&lt;/li>
&lt;li>&lt;a href="#ranges">Ranges&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#performance">Performance&lt;/a>&lt;/li>
&lt;/ul>
&lt;/nav>
&lt;h2 id="part-1">Part 1&lt;/h2>
&lt;blockquote>
&lt;p>You are given a series of parts with 4 ratings as such:&lt;/p>
&lt;p>&lt;code>{x=787,m=2655,a=1222,s=2876}&lt;/code>&lt;/p>
&lt;p>In addition, you are given a series of rules describing a graph as such:&lt;/p>
&lt;p>&lt;code>px{a&amp;lt;2006:qkq,m&amp;gt;2090:A,rfg}&lt;/code>&lt;/p>
&lt;p>In this example, if you are at the node &lt;code>px&lt;/code>, if &lt;code>a &amp;lt; 2006&lt;/code>, move to &lt;code>qkq&lt;/code>. Otherwise, if &lt;code>m &amp;gt; 2090&lt;/code> move to &lt;code>A&lt;/code>. If no other case matches, the last defaults to &lt;code>rfg&lt;/code>.&lt;/p>
&lt;p>&lt;code>A&lt;/code> and &lt;code>R&lt;/code> are special cases for accept and reject.&lt;/p>
&lt;p>Calculate the sum of sum of all four ratings for all nodes that end at &lt;code>Accept&lt;/code>.&lt;/p>
&lt;/blockquote></description></item><item><title>AoC 2023 Day 18: Flood Fillinator</title><link>https://blog.jverkamp.com/2023/12/18/aoc-2023-day-18-flood-fillinator/</link><pubDate>Mon, 18 Dec 2023 00:00:03 +0000</pubDate><guid>https://blog.jverkamp.com/2023/12/18/aoc-2023-day-18-flood-fillinator/</guid><description>&lt;h2 id="source-day-18-lavaduct-lagoonhttpsadventofcodecom2023day18">Source: &lt;a href="https://adventofcode.com/2023/day/18" target="_blank" rel="noopener">Day 18: Lavaduct Lagoon&lt;/a>&lt;/h2>
&lt;p>&lt;a href="https://github.com/jpverkamp/advent-of-code/tree/master/2023/solutions/day18" target="_blank" rel="noopener">Full solution&lt;/a> for today (spoilers!)&lt;/p>
&lt;nav id="TableOfContents">
&lt;ul>
&lt;li>&lt;a href="#source-day-18-lavaduct-lagoonhttpsadventofcodecom2023day18">Source: &lt;a href="https://adventofcode.com/2023/day/18">Day 18: Lavaduct Lagoon&lt;/a>&lt;/a>&lt;/li>
&lt;li>&lt;a href="#part-1">Part 1&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#types-and-parsing">Types and Parsing&lt;/a>&lt;/li>
&lt;li>&lt;a href="#solution">Solution&lt;/a>&lt;/li>
&lt;li>&lt;a href="#adding-flood-fill-to-grid">Adding flood fill to Grid&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#part-2">Part 2&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#using-math">Using MATH&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#performance">Performance&lt;/a>&lt;/li>
&lt;/ul>
&lt;/nav>
&lt;h2 id="part-1">Part 1&lt;/h2>
&lt;blockquote>
&lt;p>Given a sequence of direction + distance that draws a polygon, calculate the area.&lt;/p>
&lt;/blockquote></description></item><item><title>AoC 2023 Day 17: A-Starinator</title><link>https://blog.jverkamp.com/2023/12/17/aoc-2023-day-17-a-starinator/</link><pubDate>Sun, 17 Dec 2023 00:00:03 +0000</pubDate><guid>https://blog.jverkamp.com/2023/12/17/aoc-2023-day-17-a-starinator/</guid><description>&lt;h2 id="source-day-17-clumsy-cruciblehttpsadventofcodecom2023day17">Source: &lt;a href="https://adventofcode.com/2023/day/17" target="_blank" rel="noopener">Day 17: Clumsy Crucible&lt;/a>&lt;/h2>
&lt;p>&lt;a href="https://github.com/jpverkamp/advent-of-code/tree/master/2023/solutions/day17" target="_blank" rel="noopener">Full solution&lt;/a> for today (spoilers!)&lt;/p>
&lt;nav id="TableOfContents">
&lt;ul>
&lt;li>&lt;a href="#source-day-17-clumsy-cruciblehttpsadventofcodecom2023day17">Source: &lt;a href="https://adventofcode.com/2023/day/17">Day 17: Clumsy Crucible&lt;/a>&lt;/a>&lt;/li>
&lt;li>&lt;a href="#part-1">Part 1&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#types-and-parsing">Types and Parsing&lt;/a>&lt;/li>
&lt;li>&lt;a href="#attempts">Attempts&lt;/a>&lt;/li>
&lt;li>&lt;a href="#solution">Solution&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#part-2">Part 2&lt;/a>&lt;/li>
&lt;li>&lt;a href="#performance">Performance&lt;/a>&lt;/li>
&lt;/ul>
&lt;/nav>
&lt;h2 id="part-1">Part 1&lt;/h2>
&lt;blockquote>
&lt;p>Given a grid of costs, find the shortest path from top left to bottom right. You may not double back or go straight more than 3 steps in a row.&lt;/p>
&lt;/blockquote></description></item><item><title>AoC 2023 Day 16: Reflectinator</title><link>https://blog.jverkamp.com/2023/12/16/aoc-2023-day-16-reflectinator/</link><pubDate>Sat, 16 Dec 2023 00:00:03 +0000</pubDate><guid>https://blog.jverkamp.com/2023/12/16/aoc-2023-day-16-reflectinator/</guid><description>&lt;h2 id="source-day-16-the-floor-will-be-lavahttpsadventofcodecom2023day16">Source: &lt;a href="https://adventofcode.com/2023/day/16" target="_blank" rel="noopener">Day 16: The Floor Will Be Lava&lt;/a>&lt;/h2>
&lt;p>&lt;video controls src="https://blog.jverkamp.com/embeds/2023/aoc23-16.mp4">&lt;/video>&lt;/p>
&lt;p>&lt;a href="https://github.com/jpverkamp/advent-of-code/tree/master/2023/solutions/day16" target="_blank" rel="noopener">Full solution&lt;/a> for today (spoilers!)&lt;/p>
&lt;nav id="TableOfContents">
&lt;ul>
&lt;li>&lt;a href="#source-day-16-the-floor-will-be-lavahttpsadventofcodecom2023day16">Source: &lt;a href="https://adventofcode.com/2023/day/16">Day 16: The Floor Will Be Lava&lt;/a>&lt;/a>&lt;/li>
&lt;li>&lt;a href="#part-1">Part 1&lt;/a>&lt;/li>
&lt;li>&lt;a href="#part-2">Part 2&lt;/a>&lt;/li>
&lt;li>&lt;a href="#performance">Performance&lt;/a>&lt;/li>
&lt;li>&lt;a href="#grid">Grid&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#implementation">Implementation&lt;/a>&lt;/li>
&lt;li>&lt;a href="#point">Point&lt;/a>&lt;/li>
&lt;li>&lt;a href="#bounds">Bounds&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#edit-1-adding-to_string-and-to_image-for-grid">Edit 1, Adding to_string and to_image for Grid&lt;/a>&lt;/li>
&lt;/ul>
&lt;/nav>
&lt;h2 id="part-1">Part 1&lt;/h2>
&lt;blockquote>
&lt;p>You are given a grid of mirrors (&lt;code>|-\/&lt;/code>) and empty space (&lt;code>.&lt;/code>).&lt;/p>
&lt;p>Diagonal mirrors just relect the light.&lt;/p>
&lt;p>The horizontal and vertical mirrors are splitters, light hitting them head on (like &lt;code>&amp;gt;|&lt;/code>) will split to go both directions. Light hitting edge on will just go through it.&lt;/p>
&lt;p>Starting in the top left going East, how many total tiles will a light beam illuminate?&lt;/p>
&lt;/blockquote></description></item><item><title>AoC 2023 Day 15: Hashinator</title><link>https://blog.jverkamp.com/2023/12/15/aoc-2023-day-15-hashinator/</link><pubDate>Fri, 15 Dec 2023 00:00:03 +0000</pubDate><guid>https://blog.jverkamp.com/2023/12/15/aoc-2023-day-15-hashinator/</guid><description>&lt;h2 id="source-day-15-lens-libraryhttpsadventofcodecom2023day15">Source: &lt;a href="https://adventofcode.com/2023/day/15" target="_blank" rel="noopener">Day 15: Lens Library&lt;/a>&lt;/h2>
&lt;p>&lt;a href="https://github.com/jpverkamp/advent-of-code/tree/master/2023/solutions/day15" target="_blank" rel="noopener">Full solution&lt;/a> for today (spoilers!)&lt;/p>
&lt;nav id="TableOfContents">
&lt;ul>
&lt;li>&lt;a href="#source-day-15-lens-libraryhttpsadventofcodecom2023day15">Source: &lt;a href="https://adventofcode.com/2023/day/15">Day 15: Lens Library&lt;/a>&lt;/a>&lt;/li>
&lt;li>&lt;a href="#part-1">Part 1&lt;/a>&lt;/li>
&lt;li>&lt;a href="#part-2">Part 2&lt;/a>&lt;/li>
&lt;li>&lt;a href="#performance">Performance&lt;/a>&lt;/li>
&lt;/ul>
&lt;/nav>
&lt;h2 id="part-1">Part 1&lt;/h2>
&lt;blockquote>
&lt;p>Hash each input (comma separated) with &lt;code>h(v, c) = (v + c) * 17&lt;/code> (modulo 256 / as a byte). Sum these values.&lt;/p>
&lt;/blockquote></description></item><item><title>AoC 2023 Day 14: Spininator</title><link>https://blog.jverkamp.com/2023/12/14/aoc-2023-day-14-spininator/</link><pubDate>Thu, 14 Dec 2023 00:00:03 +0000</pubDate><guid>https://blog.jverkamp.com/2023/12/14/aoc-2023-day-14-spininator/</guid><description>&lt;h2 id="source-day-14-parabolic-reflector-dishhttpsadventofcodecom2023day14">Source: &lt;a href="https://adventofcode.com/2023/day/14" target="_blank" rel="noopener">Day 14: Parabolic Reflector Dish&lt;/a>&lt;/h2>
&lt;p>&lt;video controls src="https://blog.jverkamp.com/embeds/2023/aoc23-14-direction.mp4">&lt;/video>&lt;/p>
&lt;p>&lt;a href="https://github.com/jpverkamp/advent-of-code/tree/master/2023/solutions/day14" target="_blank" rel="noopener">Full solution&lt;/a> for today (spoilers!)&lt;/p>
&lt;nav id="TableOfContents">
&lt;ul>
&lt;li>&lt;a href="#source-day-14-parabolic-reflector-dishhttpsadventofcodecom2023day14">Source: &lt;a href="https://adventofcode.com/2023/day/14">Day 14: Parabolic Reflector Dish&lt;/a>&lt;/a>&lt;/li>
&lt;li>&lt;a href="#part-1">Part 1&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#types-and-parsing">Types and parsing&lt;/a>&lt;/li>
&lt;li>&lt;a href="#simulation">Simulation&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#part-2">Part 2&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#solution-spinning-each-way">Solution: Spinning each way&lt;/a>&lt;/li>
&lt;li>&lt;a href="#optimization-1-cycle-detection">Optimization 1: Cycle Detection&lt;/a>&lt;/li>
&lt;li>&lt;a href="#optimization-2-data-structures">Optimization 2: Data Structures&lt;/a>&lt;/li>
&lt;li>&lt;a href="#optimization-3-multislide">Optimization 3: Multislide&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#performance">Performance&lt;/a>&lt;/li>
&lt;li>&lt;a href="#edit-1-optimization-4--removing-a-debugging-line">Edit 1, Optimization 4: &amp;hellip; removing a debugging line&lt;/a>&lt;/li>
&lt;li>&lt;a href="#edit-2-optimization-5-pre-sorting-the-rocks">Edit 2, Optimization 5: Pre-sorting the rocks&lt;/a>&lt;/li>
&lt;li>&lt;a href="#edit-3-rendering">Edit 3, Rendering&lt;/a>&lt;/li>
&lt;/ul>
&lt;/nav>
&lt;h2 id="part-1">Part 1&lt;/h2>
&lt;blockquote>
&lt;p>Given a grid of &lt;code>#&lt;/code> and &lt;code>O&lt;/code> (among empty &lt;code>.&lt;/code> points) where &lt;code>O&lt;/code> can move, slide each &lt;code>O&lt;/code> as far north as it can. Score each based on how far north it is.&lt;/p>
&lt;/blockquote></description></item><item><title>AoC 2023 Day 13: Reflectinator</title><link>https://blog.jverkamp.com/2023/12/13/aoc-2023-day-13-reflectinator/</link><pubDate>Wed, 13 Dec 2023 00:00:03 +0000</pubDate><guid>https://blog.jverkamp.com/2023/12/13/aoc-2023-day-13-reflectinator/</guid><description>&lt;h2 id="source-day-13-point-of-incidencehttpsadventofcodecom2023day13">Source: &lt;a href="https://adventofcode.com/2023/day/13" target="_blank" rel="noopener">Day 13: Point of Incidence&lt;/a>&lt;/h2>
&lt;p>&lt;a href="https://github.com/jpverkamp/advent-of-code/tree/master/2023/solutions/day13" target="_blank" rel="noopener">Full solution&lt;/a> for today (spoilers!)&lt;/p>
&lt;nav id="TableOfContents">
&lt;ul>
&lt;li>&lt;a href="#source-day-13-point-of-incidencehttpsadventofcodecom2023day13">Source: &lt;a href="https://adventofcode.com/2023/day/13">Day 13: Point of Incidence&lt;/a>&lt;/a>&lt;/li>
&lt;li>&lt;a href="#part-1">Part 1&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#basic-types-and-parsing">Basic types and parsing&lt;/a>&lt;/li>
&lt;li>&lt;a href="#reflection">Reflection&lt;/a>&lt;/li>
&lt;li>&lt;a href="#solution">Solution&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#part-2">Part 2&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#refactoring">Refactoring&lt;/a>&lt;/li>
&lt;li>&lt;a href="#solution-1">Solution&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#performance">Performance&lt;/a>&lt;/li>
&lt;/ul>
&lt;/nav>
&lt;h2 id="part-1">Part 1&lt;/h2>
&lt;blockquote>
&lt;p>You are given a grid of &lt;code>.&lt;/code> and &lt;code>#&lt;/code>. Find the (single) axis of reflection (between two rows or columns).&lt;/p>
&lt;/blockquote></description></item><item><title>AoC 2023 Day 12: Question Markinator</title><link>https://blog.jverkamp.com/2023/12/12/aoc-2023-day-12-question-markinator/</link><pubDate>Tue, 12 Dec 2023 00:00:03 +0000</pubDate><guid>https://blog.jverkamp.com/2023/12/12/aoc-2023-day-12-question-markinator/</guid><description>&lt;h2 id="source-day-12-hot-springshttpsadventofcodecom2023day12">Source: &lt;a href="https://adventofcode.com/2023/day/12" target="_blank" rel="noopener">Day 12: Hot Springs&lt;/a>&lt;/h2>
&lt;p>&lt;a href="https://github.com/jpverkamp/advent-of-code/tree/master/2023/solutions/day12" target="_blank" rel="noopener">Full solution&lt;/a> for today (spoilers!)&lt;/p>
&lt;nav id="TableOfContents">
&lt;ul>
&lt;li>&lt;a href="#source-day-12-hot-springshttpsadventofcodecom2023day12">Source: &lt;a href="https://adventofcode.com/2023/day/12">Day 12: Hot Springs&lt;/a>&lt;/a>&lt;/li>
&lt;li>&lt;a href="#part-1">Part 1&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#types-and-parsing">Types and Parsing&lt;/a>&lt;/li>
&lt;li>&lt;a href="#solution">Solution&lt;/a>&lt;/li>
&lt;li>&lt;a href="#cleaning-up">Cleaning up&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#part-2">Part 2&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#almost-brute-force">(Almost) Brute Force&lt;/a>&lt;/li>
&lt;li>&lt;a href="#caching">Caching&lt;/a>&lt;/li>
&lt;li>&lt;a href="#a-choice-of-map">A choice of map&lt;/a>&lt;/li>
&lt;li>&lt;a href="#rewriting-it-with-types">Rewriting it with types&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#performance">Performance&lt;/a>&lt;/li>
&lt;/ul>
&lt;/nav>
&lt;h2 id="part-1">Part 1&lt;/h2>
&lt;blockquote>
&lt;p>Given a sequence of &lt;code>#.?&lt;/code> as on, off, and unknown and a sequence of group sizes, determine how many possible arrangements there are that match the given groups.&lt;/p>
&lt;p>More specifically, if you have &lt;code>???.## 1,2&lt;/code> you need a single &lt;code>#&lt;/code> and a set of two &lt;code>##&lt;/code>, there are three possibilities: &lt;code>#...###&lt;/code>, &lt;code>.#..###&lt;/code>, and &lt;code>..#.###&lt;/code>.&lt;/p>
&lt;/blockquote></description></item><item><title>AoC 2023 Day 11: Big Banginator</title><link>https://blog.jverkamp.com/2023/12/11/aoc-2023-day-11-big-banginator/</link><pubDate>Mon, 11 Dec 2023 00:00:03 +0000</pubDate><guid>https://blog.jverkamp.com/2023/12/11/aoc-2023-day-11-big-banginator/</guid><description>&lt;h2 id="source-day-11-cosmic-expansionhttpsadventofcodecom2023day11">Source: &lt;a href="https://adventofcode.com/2023/day/11" target="_blank" rel="noopener">Day 11: Cosmic Expansion&lt;/a>&lt;/h2>
&lt;p>&lt;a href="https://github.com/jpverkamp/advent-of-code/tree/master/2023/solutions/day11" target="_blank" rel="noopener">Full solution&lt;/a> for today (spoilers!)&lt;/p>
&lt;nav id="TableOfContents">
&lt;ul>
&lt;li>&lt;a href="#source-day-11-cosmic-expansionhttpsadventofcodecom2023day11">Source: &lt;a href="https://adventofcode.com/2023/day/11">Day 11: Cosmic Expansion&lt;/a>&lt;/a>&lt;/li>
&lt;li>&lt;a href="#part-1">Part 1&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#parsing">Parsing&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#part-2">Part 2&lt;/a>&lt;/li>
&lt;li>&lt;a href="#performance">Performance&lt;/a>&lt;/li>
&lt;/ul>
&lt;/nav>
&lt;h2 id="part-1">Part 1&lt;/h2>
&lt;blockquote>
&lt;p>Read a grid of &lt;code>#&lt;/code> (stars) and &lt;code>.&lt;/code> (empty space). For each completely empty line or row, add another. Calculate the sum of the &lt;a href="https://en.wikipedia.org/wiki/Manhattan%20distances">Manhattan distances&lt;/a> between all pairs of stars.&lt;/p>
&lt;/blockquote></description></item><item><title>AoC 2023 Day 10: Pipinator</title><link>https://blog.jverkamp.com/2023/12/10/aoc-2023-day-10-pipinator/</link><pubDate>Sun, 10 Dec 2023 00:00:03 +0000</pubDate><guid>https://blog.jverkamp.com/2023/12/10/aoc-2023-day-10-pipinator/</guid><description>&lt;h2 id="source-day-10-pipe-mazehttpsadventofcodecom2023day10">Source: &lt;a href="https://adventofcode.com/2023/day/10" target="_blank" rel="noopener">Day 10: Pipe Maze&lt;/a>&lt;/h2>
&lt;p>&lt;a href="https://github.com/jpverkamp/advent-of-code/tree/master/2023/solutions/day10" target="_blank" rel="noopener">Full solution&lt;/a> for today (spoilers!)&lt;/p>
&lt;nav id="TableOfContents">
&lt;ul>
&lt;li>&lt;a href="#source-day-10-pipe-mazehttpsadventofcodecom2023day10">Source: &lt;a href="https://adventofcode.com/2023/day/10">Day 10: Pipe Maze&lt;/a>&lt;/a>&lt;/li>
&lt;li>&lt;a href="#part-1">Part 1&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#types-and-parsing">Types and Parsing&lt;/a>&lt;/li>
&lt;li>&lt;a href="#iterating">Iterating&lt;/a>&lt;/li>
&lt;li>&lt;a href="#solution">Solution&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#part-2">Part 2&lt;/a>&lt;/li>
&lt;li>&lt;a href="#performance">Performance&lt;/a>&lt;/li>
&lt;/ul>
&lt;/nav>
&lt;h2 id="part-1">Part 1&lt;/h2>
&lt;blockquote>
&lt;p>You are given as input an &lt;a href="https://en.wikipedia.org/wiki/ASCII%20art">ASCII art&lt;/a> pipe diagram with straight pipes &lt;code>|-&lt;/code>, right angle turns &lt;code>LJ7F&lt;/code>, ground &lt;code>.&lt;/code>, and a start tile &lt;code>S&lt;/code>.&lt;/p>
&lt;p>The start tile will be part of a loop of pipes.&lt;/p>
&lt;p>Find the distance to the furthest connected pipe segment from &lt;code>S&lt;/code> (or half the length of the loop).&lt;/p>
&lt;/blockquote></description></item><item><title>AoC 2023 Day 9: Stackinator</title><link>https://blog.jverkamp.com/2023/12/09/aoc-2023-day-9-stackinator/</link><pubDate>Sat, 09 Dec 2023 00:00:03 +0000</pubDate><guid>https://blog.jverkamp.com/2023/12/09/aoc-2023-day-9-stackinator/</guid><description>&lt;h2 id="source-day-9-mirage-maintenancehttpsadventofcodecom2023day9">Source: &lt;a href="https://adventofcode.com/2023/day/9" target="_blank" rel="noopener">Day 9: Mirage Maintenance&lt;/a>&lt;/h2>
&lt;p>&lt;a href="https://github.com/jpverkamp/advent-of-code/tree/master/2023/solutions/day09" target="_blank" rel="noopener">Full solution&lt;/a> for today (spoilers!)&lt;/p>
&lt;nav id="TableOfContents">
&lt;ul>
&lt;li>&lt;a href="#source-day-9-mirage-maintenancehttpsadventofcodecom2023day9">Source: &lt;a href="https://adventofcode.com/2023/day/9">Day 9: Mirage Maintenance&lt;/a>&lt;/a>&lt;/li>
&lt;li>&lt;a href="#part-1">Part 1&lt;/a>&lt;/li>
&lt;li>&lt;a href="#part-2">Part 2&lt;/a>&lt;/li>
&lt;li>&lt;a href="#performance">Performance&lt;/a>&lt;/li>
&lt;/ul>
&lt;/nav>
&lt;h2 id="part-1">Part 1&lt;/h2>
&lt;blockquote>
&lt;p>Given a list of terms, repeatedly calculate the differences of terms until these differences are 0. So:&lt;/p>
&lt;pre>&lt;code>0 3 6 9 12 15
3 3 3 3 3
0 0 0 0
&lt;/code>&lt;/pre>
&lt;p>Calculate the sum of next terms for each sequence (18 for this one).&lt;/p>
&lt;/blockquote></description></item><item><title>AoC 2023 Day 8: Mazinator</title><link>https://blog.jverkamp.com/2023/12/08/aoc-2023-day-8-mazinator/</link><pubDate>Fri, 08 Dec 2023 00:00:03 +0000</pubDate><guid>https://blog.jverkamp.com/2023/12/08/aoc-2023-day-8-mazinator/</guid><description>&lt;h2 id="source-day-8-haunted-wastelandhttpsadventofcodecom2023day8">Source: &lt;a href="https://adventofcode.com/2023/day/8" target="_blank" rel="noopener">Day 8: Haunted Wasteland&lt;/a>&lt;/h2>
&lt;p>&lt;a href="https://github.com/jpverkamp/advent-of-code/tree/master/2023/solutions/day08" target="_blank" rel="noopener">Full solution&lt;/a> for today (spoilers!)&lt;/p>
&lt;nav id="TableOfContents">
&lt;ul>
&lt;li>&lt;a href="#source-day-8-haunted-wastelandhttpsadventofcodecom2023day8">Source: &lt;a href="https://adventofcode.com/2023/day/8">Day 8: Haunted Wasteland&lt;/a>&lt;/a>&lt;/li>
&lt;li>&lt;a href="#part-1">Part 1&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#types-and-parsing">Types and Parsing&lt;/a>&lt;/li>
&lt;li>&lt;a href="#solution">Solution&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#part-2">Part 2&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#brute-force">Brute Force&lt;/a>&lt;/li>
&lt;li>&lt;a href="#detecting-cycles">Detecting Cycles&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#performance">Performance&lt;/a>&lt;/li>
&lt;/ul>
&lt;/nav>
&lt;h2 id="part-1">Part 1&lt;/h2>
&lt;blockquote>
&lt;p>Given a (repeated) sequence of moves (&lt;code>L&lt;/code> for left and &lt;code>R&lt;/code> for right) and a directed graph where each node has two neighbors (left and right), count how many total steps it takes to get from the node &lt;code>AAA&lt;/code> to the node &lt;code>ZZZ&lt;/code>. The sequence of moves can (and will) need to repeat.&lt;/p>
&lt;/blockquote></description></item><item><title>AoC 2023 Day 7: Pokinator</title><link>https://blog.jverkamp.com/2023/12/07/aoc-2023-day-7-pokinator/</link><pubDate>Thu, 07 Dec 2023 00:00:03 +0000</pubDate><guid>https://blog.jverkamp.com/2023/12/07/aoc-2023-day-7-pokinator/</guid><description>&lt;h2 id="source-day-7-camel-cardshttpsadventofcodecom2023day7">Source: &lt;a href="https://adventofcode.com/2023/day/7" target="_blank" rel="noopener">Day 7: Camel Cards&lt;/a>&lt;/h2>
&lt;p>&lt;a href="https://github.com/jpverkamp/advent-of-code/tree/master/2023/solutions/day07" target="_blank" rel="noopener">Full solution&lt;/a> for today (spoilers!)&lt;/p>
&lt;nav id="TableOfContents">
&lt;ul>
&lt;li>&lt;a href="#source-day-7-camel-cardshttpsadventofcodecom2023day7">Source: &lt;a href="https://adventofcode.com/2023/day/7">Day 7: Camel Cards&lt;/a>&lt;/a>&lt;/li>
&lt;li>&lt;a href="#part-1">Part 1&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#types-and-parsing">Types and Parsing&lt;/a>&lt;/li>
&lt;li>&lt;a href="#solving-the-problem">Solving the Problem&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#part-2">Part 2&lt;/a>&lt;/li>
&lt;li>&lt;a href="#performance">Performance&lt;/a>&lt;/li>
&lt;/ul>
&lt;/nav>
&lt;h2 id="part-1">Part 1&lt;/h2>
&lt;blockquote>
&lt;p>Simulate a limited poker game with no suits and break otherwise tied hands &lt;a href="https://en.wikipedia.org/wiki/lexicographically">lexicographically&lt;/a> (&lt;code>AAAA2&lt;/code> beats &lt;code>AKAAA&lt;/code>) because the the hands are both four of a kind, the first cards are both &lt;code>A&lt;/code>, but the second &lt;code>A&lt;/code> beats the &lt;code>K&lt;/code>. It doesn&amp;rsquo;t matter that the first hand&amp;rsquo;s off card was a &lt;code>2&lt;/code>&lt;/p>
&lt;p>Order all hands then calculate the sum of the ordering of hands (1 for best etc) times the bet for each.&lt;/p>
&lt;/blockquote></description></item><item><title>AoC 2023 Day 6: Racinator</title><link>https://blog.jverkamp.com/2023/12/06/aoc-2023-day-6-racinator/</link><pubDate>Wed, 06 Dec 2023 00:00:03 +0000</pubDate><guid>https://blog.jverkamp.com/2023/12/06/aoc-2023-day-6-racinator/</guid><description>&lt;h2 id="source-day-6-wait-for-ithttpsadventofcodecom2023day6">Source: &lt;a href="https://adventofcode.com/2023/day/6" target="_blank" rel="noopener">Day 6: Wait For It&lt;/a>&lt;/h2>
&lt;p>&lt;a href="https://github.com/jpverkamp/advent-of-code/tree/master/2023/solutions/day06" target="_blank" rel="noopener">Full solution&lt;/a> for today (spoilers!)&lt;/p>
&lt;nav id="TableOfContents">
&lt;ul>
&lt;li>&lt;a href="#source-day-6-wait-for-ithttpsadventofcodecom2023day6">Source: &lt;a href="https://adventofcode.com/2023/day/6">Day 6: Wait For It&lt;/a>&lt;/a>&lt;/li>
&lt;li>&lt;a href="#part-1">Part 1&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#types-and-parsing">Types and Parsing&lt;/a>&lt;/li>
&lt;li>&lt;a href="#initial-brute-force-solution">Initial Brute Force Solution&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#part-2">Part 2&lt;/a>&lt;/li>
&lt;li>&lt;a href="#premature-optimization">(Premature) Optimization&lt;/a>&lt;/li>
&lt;/ul>
&lt;/nav>
&lt;h2 id="part-1">Part 1&lt;/h2>
&lt;blockquote>
&lt;p>Simulate charging up race boats with the behavior that waiting X seconds to start means you move at X units per second. Given time allowed and a target distance, determine how many (integer) numbers of seconds will beat the target distance.&lt;/p>
&lt;/blockquote></description></item><item><title>AoC 2023 Day 5: Growinator</title><link>https://blog.jverkamp.com/2023/12/05/aoc-2023-day-5-growinator/</link><pubDate>Tue, 05 Dec 2023 00:00:03 +0000</pubDate><guid>https://blog.jverkamp.com/2023/12/05/aoc-2023-day-5-growinator/</guid><description>&lt;h2 id="source-day-5-if-you-give-a-seed-a-fertilizerhttpsadventofcodecom2023day5">Source: &lt;a href="https://adventofcode.com/2023/day/5" target="_blank" rel="noopener">Day 5: If You Give A Seed A Fertilizer&lt;/a>&lt;/h2>
&lt;p>&lt;a href="https://github.com/jpverkamp/advent-of-code/tree/master/2023/solutions/day05" target="_blank" rel="noopener">Full solution&lt;/a> for today (spoilers!)&lt;/p>
&lt;nav id="TableOfContents">
&lt;ul>
&lt;li>&lt;a href="#source-day-5-if-you-give-a-seed-a-fertilizerhttpsadventofcodecom2023day5">Source: &lt;a href="https://adventofcode.com/2023/day/5">Day 5: If You Give A Seed A Fertilizer&lt;/a>&lt;/a>&lt;/li>
&lt;li>&lt;a href="#part-1">Part 1&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#types">Types&lt;/a>&lt;/li>
&lt;li>&lt;a href="#parsing">Parsing&lt;/a>&lt;/li>
&lt;li>&lt;a href="#solution">Solution&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#part-2">Part 2&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#solution-1-brute-force">Solution 1: Brute Force&lt;/a>&lt;/li>
&lt;li>&lt;a href="#solution-2-parallel-brute-force">Solution 2: Parallel Brute Force&lt;/a>&lt;/li>
&lt;li>&lt;a href="#solution-3-treat-the-ranges-as--ranges">Solution 3: Treat the Ranges as &amp;hellip; Ranges&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#performance">Performance&lt;/a>&lt;/li>
&lt;/ul>
&lt;/nav>
&lt;h2 id="part-1">Part 1&lt;/h2>
&lt;blockquote>
&lt;p>You are given a set of initial values (seeds) and a series of range maps (where a range of numbers &lt;code>src..src+len&lt;/code> maps to &lt;code>dst..dst+len&lt;/code>). Apply each range map in tur, return the lowest resulting value.&lt;/p>
&lt;/blockquote></description></item><item><title>AoC 2023 Day 4: Scratchinator</title><link>https://blog.jverkamp.com/2023/12/04/aoc-2023-day-4-scratchinator/</link><pubDate>Mon, 04 Dec 2023 00:00:03 +0000</pubDate><guid>https://blog.jverkamp.com/2023/12/04/aoc-2023-day-4-scratchinator/</guid><description>&lt;h2 id="source-day-4-scratchcardshttpsadventofcodecom2023day4">Source: &lt;a href="https://adventofcode.com/2023/day/4" target="_blank" rel="noopener">Day 4: Scratchcards&lt;/a>&lt;/h2>
&lt;p>&lt;a href="https://github.com/jpverkamp/advent-of-code/tree/master/2023/solutions/day04" target="_blank" rel="noopener">Full solution&lt;/a> for today (spoilers!). Note: I did slightly change my solutions template after writing this blog post, so the final solution is structured slightly differently than the code in this post. The functionality itself hasn&amp;rsquo;t changed.&lt;/p>
&lt;nav id="TableOfContents">
&lt;ul>
&lt;li>&lt;a href="#source-day-4-scratchcardshttpsadventofcodecom2023day4">Source: &lt;a href="https://adventofcode.com/2023/day/4">Day 4: Scratchcards&lt;/a>&lt;/a>&lt;/li>
&lt;li>&lt;a href="#part-1">Part 1&lt;/a>&lt;/li>
&lt;li>&lt;a href="#part-2">Part 2&lt;/a>&lt;/li>
&lt;li>&lt;a href="#performance">Performance&lt;/a>&lt;/li>
&lt;/ul>
&lt;/nav>
&lt;h2 id="part-1">Part 1&lt;/h2>
&lt;blockquote>
&lt;p>Simulate &lt;a href="https://en.wikipedia.org/wiki/scratchcards">scratchcards&lt;/a>. Given a list of winning numbers and guessed numbers, count how many guessed numbers are in the winning list. Your score is 1, 2, 4, 8, &amp;hellip; for 1, 2, 3, 4, &amp;hellip; matching numbers.&lt;/p>
&lt;/blockquote></description></item><item><title>AoC 2023 Day 3: Gearinator</title><link>https://blog.jverkamp.com/2023/12/03/aoc-2023-day-3-gearinator/</link><pubDate>Sun, 03 Dec 2023 00:00:03 +0000</pubDate><guid>https://blog.jverkamp.com/2023/12/03/aoc-2023-day-3-gearinator/</guid><description>&lt;h2 id="source-day-3-gear-ratioshttpsadventofcodecom2023day3">Source: &lt;a href="https://adventofcode.com/2023/day/3" target="_blank" rel="noopener">Day 3: Gear Ratios&lt;/a>&lt;/h2>
&lt;p>&lt;a href="https://github.com/jpverkamp/advent-of-code/tree/master/2023/solutions/day03" target="_blank" rel="noopener">Full solution&lt;/a> for today (spoilers!). Note: I did slightly change my solutions template after writing this blog post, so the final solution is structured slightly differently than the code in this post. The functionality itself hasn&amp;rsquo;t changed.&lt;/p>
&lt;nav id="TableOfContents">
&lt;ul>
&lt;li>&lt;a href="#source-day-3-gear-ratioshttpsadventofcodecom2023day3">Source: &lt;a href="https://adventofcode.com/2023/day/3">Day 3: Gear Ratios&lt;/a>&lt;/a>&lt;/li>
&lt;li>&lt;a href="#part-1">Part 1&lt;/a>&lt;/li>
&lt;li>&lt;a href="#part-2">Part 2&lt;/a>&lt;/li>
&lt;li>&lt;a href="#performance">Performance&lt;/a>&lt;/li>
&lt;/ul>
&lt;/nav>
&lt;h2 id="part-1">Part 1&lt;/h2>
&lt;blockquote>
&lt;p>Take as input a 2D grid of numbers or symbols (&lt;code>.&lt;/code> represents empty space). Numbers will be 1 or more digits written horizontally which should be concatenated (&lt;code>.467*&lt;/code> is the number &lt;code>467&lt;/code> followed by the symbol &lt;code>*&lt;/code>).&lt;/p>
&lt;p>Sum all numbers that are adjacent (including diagonally) to at least one symbol.&lt;/p>
&lt;/blockquote></description></item><item><title>AoC 2023 Day 2: Playinator</title><link>https://blog.jverkamp.com/2023/12/02/aoc-2023-day-2-playinator/</link><pubDate>Sat, 02 Dec 2023 00:00:03 +0000</pubDate><guid>https://blog.jverkamp.com/2023/12/02/aoc-2023-day-2-playinator/</guid><description>&lt;h2 id="source-day-2-cube-conundrumhttpsadventofcodecom2023day2">Source: &lt;a href="https://adventofcode.com/2023/day/2" target="_blank" rel="noopener">Day 2: Cube Conundrum&lt;/a>&lt;/h2>
&lt;p>&lt;a href="https://github.com/jpverkamp/advent-of-code/tree/master/2023/solutions/day02" target="_blank" rel="noopener">Full solution&lt;/a> for today (spoilers!). Note: I did slightly change my solutions template after writing this blog post, so the final solution is structured slightly differently than the code in this post. The functionality itself hasn&amp;rsquo;t changed.&lt;/p>
&lt;nav id="TableOfContents">
&lt;ul>
&lt;li>&lt;a href="#source-day-2-cube-conundrumhttpsadventofcodecom2023day2">Source: &lt;a href="https://adventofcode.com/2023/day/2">Day 2: Cube Conundrum&lt;/a>&lt;/a>&lt;/li>
&lt;li>&lt;a href="#part-1">Part 1&lt;/a>&lt;/li>
&lt;li>&lt;a href="#part-2">Part 2&lt;/a>&lt;/li>
&lt;li>&lt;a href="#performance">Performance&lt;/a>&lt;/li>
&lt;/ul>
&lt;/nav>
&lt;h2 id="part-1">Part 1&lt;/h2>
&lt;blockquote>
&lt;p>Play a game where you have some number of red, green, and blue dice in a cup, which you draw and roll (without replacement). Which game is possible with only 12 red, 13 gree, and 14 blue cubes?&lt;/p>
&lt;/blockquote>
&lt;p>Input will look like: &lt;code>Game 1: 3 blue, 4 red; 1 red, 2 green, 6 blue; 2 green&lt;/code>&lt;/p></description></item><item><title>AoC 2023 Day 1: Calibrationinator</title><link>https://blog.jverkamp.com/2023/12/01/aoc-2023-day-1-calibrationinator/</link><pubDate>Fri, 01 Dec 2023 00:00:03 +0000</pubDate><guid>https://blog.jverkamp.com/2023/12/01/aoc-2023-day-1-calibrationinator/</guid><description>&lt;h2 id="source-day-1-trebuchethttpsadventofcodecom2023day1">Source: &lt;a href="https://adventofcode.com/2023/day/1" target="_blank" rel="noopener">Day 1: Trebuchet?!&lt;/a>&lt;/h2>
&lt;p>&lt;a href="https://github.com/jpverkamp/advent-of-code/tree/master/2023/solutions/day01" target="_blank" rel="noopener">Full solution&lt;/a> for today (spoilers!). Note: I did slightly change my solutions template after writing this blog post, so the final solution is structured slightly differently than the code in this post. The functionality itself hasn&amp;rsquo;t changed.&lt;/p>
&lt;nav id="TableOfContents">
&lt;ul>
&lt;li>&lt;a href="#source-day-1-trebuchethttpsadventofcodecom2023day1">Source: &lt;a href="https://adventofcode.com/2023/day/1">Day 1: Trebuchet?!&lt;/a>&lt;/a>&lt;/li>
&lt;li>&lt;a href="#part-1">Part 1&lt;/a>&lt;/li>
&lt;li>&lt;a href="#part-2">Part 2&lt;/a>&lt;/li>
&lt;li>&lt;a href="#performance">Performance&lt;/a>&lt;/li>
&lt;/ul>
&lt;/nav>
&lt;h2 id="part-1">Part 1&lt;/h2>
&lt;blockquote>
&lt;p>Given a list of alphanumeric strings, find the first and last digit on each line (they may be the same). Concatenate each pair and sum them.&lt;/p>
&lt;/blockquote></description></item><item><title>Advent of Code 2023</title><link>https://blog.jverkamp.com/2023/12/01/advent-of-code-2023/</link><pubDate>Fri, 01 Dec 2023 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2023/12/01/advent-of-code-2023/</guid><description>&lt;p>Another year, another &lt;a href="https://blog.jverkamp.com/2015/12/01/advent-of-code/">Advent of Code&lt;/a>.&lt;/p>
&lt;p>Like last year, we&amp;rsquo;re doing Rust. I&amp;rsquo;ve really grown to love the language since last year&amp;hellip; and hopefully I&amp;rsquo;ve learned a bit more about how to write more &amp;lsquo;proper&amp;rsquo; Rust. I know I had some issues last year. Functional&amp;hellip; but it could be better.&lt;/p>
&lt;p>Let&amp;rsquo;s see how it goes!&lt;/p>
&lt;p>For full solutions, as always, I post to GitHub (including previous years and possibly some I haven&amp;rsquo;t written up yet): &lt;a href="https://github.com/jpverkamp/advent-of-code">jpverkamp/advent-of-code&lt;/a>&lt;/p></description></item><item><title>Rebuilding Streams with TShark</title><link>https://blog.jverkamp.com/2023/11/14/rebuilding-streams-with-tshark/</link><pubDate>Tue, 14 Nov 2023 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2023/11/14/rebuilding-streams-with-tshark/</guid><description>&lt;p>Another quick post in a list of CTF techniques: filtering streams with &lt;a href="https://www.wireshark.org/docs/man-pages/tshark.html" target="_blank" rel="noopener">tshark&lt;/a>. tshark is the command line half of the packet capture tool &lt;a href="https://www.wireshark.org/" target="_blank" rel="noopener">Wireshark&lt;/a>. The advantage here is it let&amp;rsquo;s you do all manner of filtering on the command line.&lt;/p></description></item><item><title>SQLite Metadata via SQL Injection</title><link>https://blog.jverkamp.com/2023/11/09/sqlite-metadata-via-sql-injection/</link><pubDate>Thu, 09 Nov 2023 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2023/11/09/sqlite-metadata-via-sql-injection/</guid><description>&lt;p>As mentioned in my &lt;a href="https://blog.jverkamp.com/2023/11/07/mongo-db-data-exfiltration-via-search-conditions/">previous post&lt;/a>, I recently participated in a security CTF exercise and wanted to write out a few interesting techniques.&lt;/p>
&lt;p>This is the second: extracting SQL metadata from a SQLite database.&lt;/p></description></item><item><title>Mongo DB Data Exfiltration via Search Conditions</title><link>https://blog.jverkamp.com/2023/11/07/mongo-db-data-exfiltration-via-search-conditions/</link><pubDate>Tue, 07 Nov 2023 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2023/11/07/mongo-db-data-exfiltration-via-search-conditions/</guid><description>&lt;p>I recently participated in a security capture the flag (CTF) exercise through work. The goal was&amp;ndash;in a wide variety of ways&amp;ndash;to find a hidden string of the form &lt;code>flag{...}&lt;/code> somewhere in the problem. Some required exploiting sample websites, some parsing various data formats or captures, some required reverse engineering code or binaries, and (new this year) some required messing with LLMs.&lt;/p>
&lt;p>As I tend to do for just about everything, I ended up writing up my own experiences. I won&amp;rsquo;t share that, since it&amp;rsquo;s fairly tuned to the specific problems and thus 1) not interesting and 2) probably not mine to share, but I did want want to share a few interesting techniques I found/used. If it helps anyone either defend against similar attacks in the real world or (more importantly 😄) someone comes across this while trying to solve a CTF of their own, all the better.&lt;/p>
&lt;p>Okay, first technique: extracting data from a MongoDB database using search conditions.&lt;/p></description></item><item><title>Adding local search to Hugo with Pagefind</title><link>https://blog.jverkamp.com/2023/09/25/adding-local-search-to-hugo-with-pagefind/</link><pubDate>Mon, 25 Sep 2023 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2023/09/25/adding-local-search-to-hugo-with-pagefind/</guid><description>&lt;p>At this point, I have very nearly 2500 posts going back almost 20 years (&amp;hellip; whoa). In a lot of ways, it&amp;rsquo;s a second brain for me. I actually find myself (from time to time) going back and looking up my various old posts.&lt;/p>
&lt;p>Sometimes, I wanted to know how I solved a particular programming problem, sometimes I wanted to know when I went somewhere (by pictures!), and sometimes I wanted to know what a particular book or movie was about.&lt;/p>
&lt;p>So for the longest time, I&amp;rsquo;ve had (up in the corner there) a nice search box. Powered by Google: &lt;del>Don&amp;rsquo;t Be Evil&lt;/del>. Well, today, let&amp;rsquo;s see if we can do better!&lt;/p></description></item><item><title>Crosslinks by Title in Hugo--But Better!</title><link>https://blog.jverkamp.com/2023/08/21/crosslinks-by-title-in-hugo--but-better/</link><pubDate>Mon, 21 Aug 2023 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2023/08/21/crosslinks-by-title-in-hugo--but-better/</guid><description>&lt;p>Once upon a time, I solved &lt;a href="https://blog.jverkamp.com/2021/07/15/crosslinks-by-title-in-hugo/">Crosslinks by Title in Hugo&lt;/a>. Back then, I added a &lt;a href="https://gohugo.io/content-management/shortcodes/" target="_blank" rel="noopener">shortcode&lt;/a> so that I could link to any post by title like this:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-markdown" data-lang="markdown">&lt;span style="display:flex;">&lt;span>{{&amp;lt; &lt;span style="color:#f92672">crosslink&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">&amp;#34;&lt;/span>&lt;span style="color:#a6e22e">Title&lt;/span> &lt;span style="color:#a6e22e">goes&lt;/span> &lt;span style="color:#a6e22e">here&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">&amp;#34;&lt;/span> &amp;gt;}}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>It worked pretty well, but &amp;hellip; it never really felt &amp;lsquo;Markdown&amp;rsquo;y. Which I suppose was the point.&lt;/p>
&lt;p>But more recently, I came across &lt;a href="https://gohugo.io/templates/render-hooks/" target="_blank" rel="noopener">Markdown render hooks&lt;/a>.&lt;/p>
&lt;p>What&amp;rsquo;s that you say? I can write code that will take the parameters to any Markdown link (or image/heading/codeblock) and generate the HTML with a custom template?&lt;/p>
&lt;p>Interesting!&lt;/p></description></item><item><title>StackLang Part IX: Better Testing</title><link>https://blog.jverkamp.com/2023/08/12/stacklang-part-ix-better-testing/</link><pubDate>Sat, 12 Aug 2023 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2023/08/12/stacklang-part-ix-better-testing/</guid><description>Two posts in two days? Madness!
Posts in StackLang: StackLang Part I: The Idea StackLang Part II: The Lexer StackLang Part III: The Parser StackLang Part IV: An Interpreter StackLang Part V: Compiling to C StackLang Part VI: Some Examples StackLang Part VII: New CLI and Datatypes StackLang Part VIII: Compiler Stacks StackLang Part IX: Better Testing But really, it got a bit late yesterday so I figured I&amp;rsquo;d split this into two different posts.</description></item><item><title>StackLang Part VIII: Compiler Stacks</title><link>https://blog.jverkamp.com/2023/08/11/stacklang-part-viii-compiler-stacks/</link><pubDate>Fri, 11 Aug 2023 23:59:00 +0000</pubDate><guid>https://blog.jverkamp.com/2023/08/11/stacklang-part-viii-compiler-stacks/</guid><description>Let&amp;rsquo;s continue StackLang Part VII: New CLI and Datatypes and implement lists stacks in the compiler!
Posts in StackLang: StackLang Part I: The Idea StackLang Part II: The Lexer StackLang Part III: The Parser StackLang Part IV: An Interpreter StackLang Part V: Compiling to C StackLang Part VI: Some Examples StackLang Part VII: New CLI and Datatypes StackLang Part VIII: Compiler Stacks StackLang Part IX: Better Testing In this post:</description></item><item><title>StackLang Part VII: New CLI and Datatypes</title><link>https://blog.jverkamp.com/2023/08/05/stacklang-part-vii-new-cli-and-datatypes/</link><pubDate>Sat, 05 Aug 2023 23:59:00 +0000</pubDate><guid>https://blog.jverkamp.com/2023/08/05/stacklang-part-vii-new-cli-and-datatypes/</guid><description>Another day, another Stacklang!
Posts in StackLang: StackLang Part I: The Idea StackLang Part II: The Lexer StackLang Part III: The Parser StackLang Part IV: An Interpreter StackLang Part V: Compiling to C StackLang Part VI: Some Examples StackLang Part VII: New CLI and Datatypes StackLang Part VIII: Compiler Stacks StackLang Part IX: Better Testing Today, we&amp;rsquo;ve got two main parts to work on:
A new CLI New datatypes (VM only; so far!</description></item><item><title>StackLang Part VI: Some Examples</title><link>https://blog.jverkamp.com/2023/07/16/stacklang-part-vi-some-examples/</link><pubDate>Sun, 16 Jul 2023 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2023/07/16/stacklang-part-vi-some-examples/</guid><description>We&amp;rsquo;ve gone through all sorts of things building up the StackLang language so far:
Posts in StackLang: StackLang Part I: The Idea StackLang Part II: The Lexer StackLang Part III: The Parser StackLang Part IV: An Interpreter StackLang Part V: Compiling to C StackLang Part VI: Some Examples StackLang Part VII: New CLI and Datatypes StackLang Part VIII: Compiler Stacks StackLang Part IX: Better Testing But what can we actually do with it?</description></item><item><title>StackLang Part V: Compiling to C</title><link>https://blog.jverkamp.com/2023/07/12/stacklang-part-v-compiling-to-c/</link><pubDate>Wed, 12 Jul 2023 12:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2023/07/12/stacklang-part-v-compiling-to-c/</guid><description>&lt;p>It&amp;rsquo;s been a bit, but I hope it&amp;rsquo;s worth it. StackLang, part 5: compiling to C!&lt;/p></description></item><item><title>StackLang Part IV: An Interpreter</title><link>https://blog.jverkamp.com/2023/05/01/stacklang-part-iv-an-interpreter/</link><pubDate>Mon, 01 May 2023 23:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2023/05/01/stacklang-part-iv-an-interpreter/</guid><description>&lt;p>StackLang, part 4: an interpreter. Here we go again!&lt;/p>
&lt;p>This time, the goal is to actually get code running&lt;/p></description></item><item><title>StackLang Part III: The Parser</title><link>https://blog.jverkamp.com/2023/04/24/stacklang-part-iii-the-parser/</link><pubDate>Mon, 24 Apr 2023 00:01:00 +0000</pubDate><guid>https://blog.jverkamp.com/2023/04/24/stacklang-part-iii-the-parser/</guid><description>&lt;p>StackLang, part 3: parsing. This is going to be the most complicated one thus far! Onward.&lt;/p></description></item><item><title>StackLang Part II: The Lexer</title><link>https://blog.jverkamp.com/2023/04/16/stacklang-part-ii-the-lexer/</link><pubDate>Sun, 16 Apr 2023 23:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2023/04/16/stacklang-part-ii-the-lexer/</guid><description>&lt;p>StackLang, part 2: lexing.&lt;/p>
&lt;p>It&amp;rsquo;s quite often the simplest part of implementing a programming language (although parsers for s-expression based languages come close), but it&amp;rsquo;s still something that needs done. So here we go!&lt;/p></description></item><item><title>StackLang Part I: The Idea</title><link>https://blog.jverkamp.com/2023/04/14/stacklang-part-i-the-idea/</link><pubDate>Fri, 14 Apr 2023 23:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2023/04/14/stacklang-part-i-the-idea/</guid><description>&lt;p>I enjoy writing programming languages. &lt;a href="https://blog.jverkamp.com/2013/08/21/a-tiny-virtual-machine-in-racket/">Example: Tiny&lt;/a>. Let’s do that again.&lt;/p>
&lt;p>This time, StackLang:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-text" data-lang="text">&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> @[n fact]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> { n 1 - $fact fact n * }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> N 1 &amp;lt;= if
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>} @fact
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>5 $fact fact writeln
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Bit of gibberish there, I suppose, but the goal is to write everything in a postfix/stack based model. So &lt;code>n 1 - $fact fact n *&lt;/code> is equivalent to &lt;code>fact(fact, n - 1) * n&lt;/code> in a more traditional language.&lt;/p>
&lt;p>Over the next few posts, I hope to write up where I am thus far and what’s next.&lt;/p></description></item><item><title>Wildcard Let's Encrypt certificates with Nginx Proxy Manager and Cloudflare</title><link>https://blog.jverkamp.com/2023/03/27/wildcard-lets-encrypt-certificates-with-nginx-proxy-manager-and-cloudflare/</link><pubDate>Mon, 27 Mar 2023 00:02:00 +0000</pubDate><guid>https://blog.jverkamp.com/2023/03/27/wildcard-lets-encrypt-certificates-with-nginx-proxy-manager-and-cloudflare/</guid><description>&lt;p>Another quick snippet that I figured out this weekend. It&amp;rsquo;s not hard, but it&amp;rsquo;s something that I really wanted to do and had to look up where it was, so perhaps it will help you.&lt;/p>
&lt;p>Problem statement:&lt;/p>
&lt;p>I run a bunch of local services in my network. They aren&amp;rsquo;t exposed publicly (I use Wireguard to access them when out and about), so I really don&amp;rsquo;t &lt;em>need&lt;/em> HTTPS. But (rightfully) a number of services behave better when they&amp;rsquo;re behind HTTPS + if there&amp;rsquo;s ever a service that&amp;rsquo;s running amuck (Internet of Things devices?) that&amp;rsquo;s listening, I don&amp;rsquo;t want them to see anything.&lt;/p>
&lt;nav id="TableOfContents">
&lt;ul>
&lt;li>&lt;a href="#options">Options&lt;/a>&lt;/li>
&lt;li>&lt;a href="#start-adding-the-certificate">Start adding the certificate&lt;/a>&lt;/li>
&lt;li>&lt;a href="#generate-a-cloudflare-api-token">Generate a Cloudflare API token&lt;/a>&lt;/li>
&lt;li>&lt;a href="#change-your-proxy-host-to-use-it">Change your proxy host to use it.&lt;/a>&lt;/li>
&lt;/ul>
&lt;/nav>
&lt;h2 id="options">Options&lt;/h2>
&lt;p>Option 1: Use Nginx Proxy Manager to request certificates for each subdomain. It works quickly and well. Problem: All certificates are published to Certificate Transparency Logs. I don&amp;rsquo;t immediately mind exposing what I&amp;rsquo;m running&amp;hellip; but I&amp;rsquo;d still rather now.&lt;/p>
&lt;p>Option 2: Set up wildcard certificates. This requires integration with your DNS provider (since wildcards need a DNS challenge, not TCP).&lt;/p>
&lt;p>Of course (based on the title), we&amp;rsquo;re going with option 2. 😄&lt;/p></description></item><item><title>Automated transcripts from video with Whisper(.cpp)</title><link>https://blog.jverkamp.com/2023/03/27/automated-transcripts-from-video-with-whisper.cpp/</link><pubDate>Mon, 27 Mar 2023 00:01:00 +0000</pubDate><guid>https://blog.jverkamp.com/2023/03/27/automated-transcripts-from-video-with-whisper.cpp/</guid><description>&lt;p>I tend to be something of a digital packrat. If there&amp;rsquo;s interesting data somewhere, I&amp;rsquo;ll collect it &lt;em>just in case&lt;/em> I want to do something with it.&lt;/p>
&lt;p>Helpful? Usually not. But it does lead to some interesting scripts.&lt;/p>
&lt;p>In this case, I have a site that hosts videos. I want to download those videos and get a text based transcription of them. With new AI tools, that shouldn&amp;rsquo;t be hard at all. Let&amp;rsquo;s give it a try!&lt;/p>
&lt;nav id="TableOfContents">
&lt;ul>
&lt;li>&lt;a href="#installing-whispercpp">Installing whisper.cpp&lt;/a>&lt;/li>
&lt;li>&lt;a href="#setting-up-a-python-poetry-project">Setting up a Python Poetry project&lt;/a>&lt;/li>
&lt;li>&lt;a href="#scraping-the-page">Scraping the page&lt;/a>&lt;/li>
&lt;/ul>
&lt;/nav></description></item><item><title>Redis in Rust: Evictions and Implementations</title><link>https://blog.jverkamp.com/2023/03/26/redis-in-rust-evictions-and-implementations/</link><pubDate>Sun, 26 Mar 2023 00:00:15 +0000</pubDate><guid>https://blog.jverkamp.com/2023/03/26/redis-in-rust-evictions-and-implementations/</guid><description>&lt;p>Another Redis in Rust series. It&amp;rsquo;s really starting to come together now!&lt;/p>
&lt;p>In this post, updating the state to store expiration times + a thread to handle said eviction + the implementation of a small pile more of the general Redis functions.&lt;/p>
&lt;nav id="TableOfContents">
&lt;ul>
&lt;li>&lt;a href="#better-redis-function-definitions">Better Redis function definitions&lt;/a>&lt;/li>
&lt;li>&lt;a href="#re-parsing-set">Re-parsing SET&lt;/a>&lt;/li>
&lt;li>&lt;a href="#implementing-ttl-on-the-state">Implementing TTL on the state&lt;/a>&lt;/li>
&lt;li>&lt;a href="#expiration-thread">Expiration thread&lt;/a>&lt;/li>
&lt;li>&lt;a href="#a-few-more-examples">A few more examples&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#decr">DECR&lt;/a>&lt;/li>
&lt;li>&lt;a href="#getrange">GETRANGE&lt;/a>&lt;/li>
&lt;li>&lt;a href="#mget">MGET&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#github-copilot">Github Copilot&lt;/a>&lt;/li>
&lt;li>&lt;a href="#full-source">Full source&lt;/a>&lt;/li>
&lt;li>&lt;a href="#next-steps">Next steps&lt;/a>&lt;/li>
&lt;/ul>
&lt;/nav></description></item><item><title>Keyboard Chords with Hammerspoon</title><link>https://blog.jverkamp.com/2023/03/19/keyboard-chords-with-hammerspoon/</link><pubDate>Sun, 19 Mar 2023 23:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2023/03/19/keyboard-chords-with-hammerspoon/</guid><description>&lt;p>I love keyboard shortcuts. The less I have to switch between keyboard and mouse, the more efficient I (at least feel I) can be!&lt;/p>
&lt;nav id="TableOfContents">
&lt;ul>
&lt;li>&lt;a href="#problem-statement">Problem statement&lt;/a>&lt;/li>
&lt;li>&lt;a href="#hammerspoon-chords">Hammerspoon chords&lt;/a>&lt;/li>
&lt;li>&lt;a href="#capture-chords">Capture chords&lt;/a>&lt;/li>
&lt;li>&lt;a href="#running-programs">Running programs&lt;/a>&lt;/li>
&lt;li>&lt;a href="#wrapping-it-up">Wrapping it up&lt;/a>&lt;/li>
&lt;li>&lt;a href="#next-steps">Next steps&lt;/a>&lt;/li>
&lt;/ul>
&lt;/nav>
&lt;h2 id="problem-statement">Problem statement&lt;/h2>
&lt;p>But there are only so many unique combinations of keys on a standard keyboard. Assume 26 letters, 10 digits, and (for now) 20 other characters, along with 4 &amp;lsquo;modifier&amp;rsquo; keys (⌘ ⌃ ⌥ ⇧) that you can use in any combination of one or more. So &lt;span class="latex-inline">26 * 10 * 20 * (2^4 - 1) = 78,000&lt;/span>
. Like I said. Limited. 😄&lt;/p>
&lt;p>But we can do better!&lt;/p>
&lt;p>Enter the &lt;a href="https://www.hammerspoon.org/docs/hs.hotkey.modal.html" target="_blank" rel="noopener">Hammerspoon hs.hotkey.modal&lt;/a> module!&lt;/p></description></item><item><title>Genuary 2023.31: Break a previous image</title><link>https://blog.jverkamp.com/2023/03/03/genuary-2023.31-break-a-previous-image/</link><pubDate>Fri, 03 Mar 2023 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2023/03/03/genuary-2023.31-break-a-previous-image/</guid><description>&lt;p>&lt;a href="https://genuary.art/" target="_blank" rel="noopener">Genuary&lt;/a>!&lt;/p>
&lt;p>Spend a month making one beautiful thing per day, given a bunch of prompts. A month late, but as they say, &amp;rsquo;the second best time is now'.&lt;/p>
&lt;p>Let&amp;rsquo;s do it!&lt;/p>
&lt;h2 id="31-deliberately-break-one-of-your-previous-images-take-one-of-your-previous-works-and-ruin-it-alternatively-remix-one-of-your-previous-works">31) Deliberately break one of your previous images, take one of your previous works and ruin it. Alternatively, remix one of your previous works.&lt;/h2></description></item><item><title>Genuary 2023.30: Minimalism</title><link>https://blog.jverkamp.com/2023/03/02/genuary-2023.30-minimalism/</link><pubDate>Thu, 02 Mar 2023 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2023/03/02/genuary-2023.30-minimalism/</guid><description>Genuary!
Spend a month making one beautiful thing per day, given a bunch of prompts. A month late, but as they say, &amp;rsquo;the second best time is now'.
Let&amp;rsquo;s do it!
30) Minimalism Demo Script let gui; let params = { lineWidth: 10, minWidth: 50, maxWidth: 100, maxWidthMax: 400, minHeight: 50, maxHeight: 100, maxHeightMax: 400, colorChance: 0.1, colorChanceMin: 0, colorChanceMax: 1, colorChanceStep: 0.01, } let box; let colors = [ &amp;#34;red&amp;#34;, &amp;#34;blue&amp;#34;, &amp;#34;yellow&amp;#34;, ] function setup() { createCanvas(400, 400); box = { x: -params.</description></item><item><title>Genuary 2023.29: Maximalism</title><link>https://blog.jverkamp.com/2023/03/01/genuary-2023.29-maximalism/</link><pubDate>Wed, 01 Mar 2023 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2023/03/01/genuary-2023.29-maximalism/</guid><description>&lt;p>&lt;a href="https://genuary.art/" target="_blank" rel="noopener">Genuary&lt;/a>!&lt;/p>
&lt;p>Spend a month making one beautiful thing per day, given a bunch of prompts. A month late, but as they say, &amp;rsquo;the second best time is now'.&lt;/p>
&lt;p>Let&amp;rsquo;s do it!&lt;/p>
&lt;h2 id="29-maximalism">29) Maximalism&lt;/h2></description></item><item><title>Genuary 2023.28: Generative poetry</title><link>https://blog.jverkamp.com/2023/02/28/genuary-2023.28-generative-poetry/</link><pubDate>Tue, 28 Feb 2023 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2023/02/28/genuary-2023.28-generative-poetry/</guid><description>&lt;p>&lt;a href="https://genuary.art/" target="_blank" rel="noopener">Genuary&lt;/a>!&lt;/p>
&lt;p>Spend a month making one beautiful thing per day, given a bunch of prompts. A month late, but as they say, &amp;rsquo;the second best time is now'.&lt;/p>
&lt;p>Let&amp;rsquo;s do it!&lt;/p>
&lt;h2 id="28-generative-poetry">28) Generative poetry&lt;/h2></description></item><item><title>Redis in Rust: Testing redis-cli + GET/SET support</title><link>https://blog.jverkamp.com/2023/02/28/redis-in-rust-testing-redis-cli--get/set-support/</link><pubDate>Tue, 28 Feb 2023 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2023/02/28/redis-in-rust-testing-redis-cli--get/set-support/</guid><description>&lt;p>And I&amp;rsquo;m back. It&amp;rsquo;s been a busy month with the [Genuary]([Genuary 2023]) series and life in general, but I&amp;rsquo;m still thinking about Redis in general 😄.&lt;/p>
&lt;p>Up this time, let&amp;rsquo;s see what the official &lt;code>redis-cli&lt;/code> app does when talking to our client and actually start handling some commands. Specifically, the very basic commands: &lt;code>SET&lt;/code> and &lt;code>GET&lt;/code>. With that, we would actually have a (very very basic) keystore up and running!&lt;/p>
&lt;nav id="TableOfContents">
&lt;ul>
&lt;li>&lt;a href="#testing-the-client">Testing the client&lt;/a>&lt;/li>
&lt;li>&lt;a href="#implementing-commands">Implementing Commands&lt;/a>&lt;/li>
&lt;li>&lt;a href="#parsing-and-running-a-command">Parsing and running a &lt;code>Command&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="#set-and-get">SET and GET&lt;/a>&lt;/li>
&lt;li>&lt;a href="#testing-with-our-client">Testing with our client&lt;/a>&lt;/li>
&lt;li>&lt;a href="#full-source">Full source&lt;/a>&lt;/li>
&lt;li>&lt;a href="#next-steps">Next steps&lt;/a>&lt;/li>
&lt;/ul>
&lt;/nav></description></item></channel></rss>