<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Programming on jverkamp.com</title>
    <link>https://blog.jverkamp.com/programming/</link>
    <description>Recent content in Programming on jverkamp.com</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 01 Apr 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://blog.jverkamp.com/programming/atom.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Get kitten</title>
      <link>https://blog.jverkamp.com/2020/04/01/get-kitten/</link>
      <pubDate>Wed, 01 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2020/04/01/get-kitten/</guid>
      <description>&lt;p&gt;I upload a lot of images when testing for various things. And of course, I don&amp;rsquo;t want to use any of my own images. So what would I do instead?&lt;/p&gt;

&lt;p&gt;Kittens!&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fish&#34; data-lang=&#34;fish&#34;&gt;$ get-kitten

Downloading a &lt;span style=&#34;color:#ae81ff&#34;&gt;640&lt;/span&gt; x &lt;span style=&#34;color:#ae81ff&#34;&gt;480&lt;/span&gt; kitten
Downloading to kitten-1.jpg

$ open kitten-1.jpg&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;figure&gt;
    &lt;img src=&#34;https://blog.jverkamp.com/embeds/2020/kitten-1.jpg&#34;/&gt; 
&lt;/figure&gt;


&lt;p&gt;Perfect.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Split a file with headers</title>
      <link>https://blog.jverkamp.com/2020/03/30/split-a-file-with-headers/</link>
      <pubDate>Mon, 30 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2020/03/30/split-a-file-with-headers/</guid>
      <description>&lt;p&gt;I have a bunch of files with Arabic content that I need to split into chunks so they can be better run in parallel&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:iknow&#34;&gt;&lt;a href=&#34;#fn:iknow&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;. But by default, when I open them in a text editor, the encoding changes from &lt;code&gt;windows-1256&lt;/code&gt; to &lt;code&gt;utf-8&lt;/code&gt;&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:iknow2&#34;&gt;&lt;a href=&#34;#fn:iknow2&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;. I could use the Unix &lt;code&gt;split&lt;/code&gt; command to break them into chunks, but I need to preserve the headers. So&amp;hellip; how do I fix all this?&lt;/p&gt;

&lt;p&gt;Write a script!&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Wrapping xattr as a racket module</title>
      <link>https://blog.jverkamp.com/2020/01/29/wrapping-xattr-as-a-racket-module/</link>
      <pubDate>Wed, 29 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2020/01/29/wrapping-xattr-as-a-racket-module/</guid>
      <description>&lt;p&gt;I recently came across a question: how do you read &lt;a href=&#34;https://en.wikipedia.org/wiki/extended%20file%20attributes&#34;&gt;extended file attributes&lt;/a&gt; in Racket. Not being actually that familiar with extended file attributes, I searched online. Nothing seems to currently exist (other than &lt;a href=&#34;https://docs.racket-lang.org/fuse/index.html#%28def._%28%28lib._fuse%2Fmain..rkt%29._setxattr%29%29&#34;&gt;in the FUSE module, but that&amp;rsquo;s specific to FUSE&lt;/a&gt;), but there is a system level exectuable that one could wrap to do this. I haven&amp;rsquo;t done &lt;i&gt;much&lt;/i&gt;&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:much&#34;&gt;&lt;a href=&#34;#fn:much&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; with Racket&amp;rsquo;s &lt;code&gt;&lt;a href=&#34;http://docs.racket-lang.org/search/index.html?q=system&#34;&gt;system&lt;/a&gt;&lt;/code&gt;
 or &lt;code&gt;&lt;a href=&#34;http://docs.racket-lang.org/search/index.html?q=system*&#34;&gt;system*&lt;/a&gt;&lt;/code&gt;
 function before, so let&amp;rsquo;s give it a whirl.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Rack::Cors Configuration Tricks</title>
      <link>https://blog.jverkamp.com/2020/01/16/rackcors-configuration-tricks/</link>
      <pubDate>Thu, 16 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2020/01/16/rackcors-configuration-tricks/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://github.com/cyu/rack-cors&#34;&gt;cyu&amp;rsquo;s Rack::Cors middleware&lt;/a&gt; is rather handy if want to control your &lt;a href=&#34;https://en.wikipedia.org/wiki/CORS&#34;&gt;CORS&lt;/a&gt; (Cross-Origin Resource Sharing) settings in a Ruby-on-Rails project. Previously, there was a fairly major issue where &lt;code&gt;:credentials =&amp;gt; true&lt;/code&gt; was the default (which you generally do not want), but there were also some more complicated tweaks that I wanted to make.&lt;/p&gt;

&lt;p&gt;One problem I recently had to deal with was wanting to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Allow CORS connections from arbitrary domains (this site functions as an API)&lt;/li&gt;
&lt;li&gt;Do not allow CORS from http domains at all&lt;/li&gt;
&lt;li&gt;Only allow cookies (&lt;code&gt;Access-Control-Allow-Credentials&lt;/code&gt;) to be sent for sibling subdomains&lt;/li&gt;
&lt;li&gt;Prevent cookies from being sent from specific sibling subdomains (that are actually run by a third party)&lt;/li&gt;
&lt;li&gt;On development (non-production) versions of the site, allow credentials from localhost&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>work-on: A Quick Script for Context Switching</title>
      <link>https://blog.jverkamp.com/2019/05/07/work-on-a-quick-script-for-context-switching/</link>
      <pubDate>Tue, 07 May 2019 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2019/05/07/work-on-a-quick-script-for-context-switching/</guid>
      <description>&lt;p&gt;I work on a lot of projects.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ ls ~/Projects/ | wc -l
      &lt;span style=&#34;color:#ae81ff&#34;&gt;29&lt;/span&gt;

$ ls ~/Projects/work/ | wc -l
      &lt;span style=&#34;color:#ae81ff&#34;&gt;67&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And that&amp;rsquo;s just what I have checked out at the moment. ðŸ˜‡&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Prevent JavaScript links by parsing URLs</title>
      <link>https://blog.jverkamp.com/2019/05/02/prevent-javascript-links-by-parsing-urls/</link>
      <pubDate>Thu, 02 May 2019 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2019/05/02/prevent-javascript-links-by-parsing-urls/</guid>
      <description>&lt;p&gt;If you have a website that allows users to submit URLs, one of the (many many) things people will try to do to break your site is to submit URLs that use the &lt;code&gt;javascript:&lt;/code&gt; protocol (rather than the more expected &lt;code&gt;http:&lt;/code&gt; or &lt;code&gt;https:&lt;/code&gt;). This is almost never something that you want, since it allows users to submit essentially arbitrary code that other users will run on click in the context of your domain (&lt;a href=&#34;https://en.wikipedia.org/wiki/same%20origin%20policy&#34;&gt;same origin policy&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;So how do you fix it?&lt;/p&gt;

&lt;p&gt;First thought would be to try to check the protocol:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;safe_url&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;url&lt;/span&gt;) =&amp;gt; &lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;url&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;match&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;/^javascript:/&lt;/span&gt;)
[Function&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;safe_url&lt;/span&gt;]

&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;safe_url&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;http://www.example.com&amp;#39;&lt;/span&gt;)
&lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;

&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;safe_url&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;javascript:alert(1)&amp;#39;&lt;/span&gt;)
&lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Forcing Secure Cookies Behind an ELB in Ruby/Rails</title>
      <link>https://blog.jverkamp.com/2019/04/30/forcing-secure-cookies-behind-an-elb-in-ruby/rails/</link>
      <pubDate>Tue, 30 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2019/04/30/forcing-secure-cookies-behind-an-elb-in-ruby/rails/</guid>
      <description>&lt;p&gt;As part of general security good practices, you should always (whenever possible):&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;use HTTPS to serve all requests&lt;/li&gt;
&lt;li&gt;serve redirects to upgrade HTTP requests to HTTPS&lt;/li&gt;
&lt;li&gt;set session cookies to &lt;code&gt;secure&lt;/code&gt; and &lt;code&gt;http_only&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;enable HTTP Strict Transport Security (&lt;code&gt;HSTS&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>Tiny Helper Scripts for Command Line MySQL</title>
      <link>https://blog.jverkamp.com/2019/04/27/tiny-helper-scripts-for-command-line-mysql/</link>
      <pubDate>Sat, 27 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2019/04/27/tiny-helper-scripts-for-command-line-mysql/</guid>
      <description>&lt;p&gt;Quite often, I&amp;rsquo;ll find myself wanting to query and manipulate MySQL data entirely on the command line. I could be building up a pipeline or working on a task that I&amp;rsquo;m going to eventually automate but haven&amp;rsquo;t quite gotten to yet. Whenver I have to do something like that, I have a small pile of scripts I&amp;rsquo;ve written over time that help out:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;skiphead&lt;/code&gt;: Skip the first line of output, used to skip over headers in a query response&lt;/li&gt;
&lt;li&gt;&lt;code&gt;skipuntil&lt;/code&gt;: Skip all lines until we see one matching a pattern, used to resume partial tasks&lt;/li&gt;
&lt;li&gt;&lt;code&gt;commaify&lt;/code&gt;: Take a list of single values on the command line and turn them into a comma separated list (for use in &lt;code&gt;IN&lt;/code&gt; clauses)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;csv2json&lt;/code&gt;: a &lt;a href=&#34;https://blog.jverkamp.com/2015/12/11/csv-to-json/&#34;&gt;previously posted&lt;/a&gt; script for converting csv/tab delimited output to json&lt;/li&gt;
&lt;li&gt;&lt;code&gt;jq&lt;/code&gt;: not my script, but used to take the output of csv2json and query it further in ways that would be complicated to do with SQL&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Admitedly, the first two of those are one liners and I could easily remember them, but the advantage of a single command that does it is tab completion. &lt;code&gt;sk&amp;lt;tab&amp;gt;&lt;/code&gt;, arrow to select which one I want, and off we go. I could put them as an alias, but I don&amp;rsquo;t always use the same shell (mostly &lt;a href=&#34;https://fishshell.com/&#34;&gt;fish&lt;/a&gt;, but sometimes Bash or Zsh).&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Listing and Downloading S3 Versions</title>
      <link>https://blog.jverkamp.com/2019/01/04/listing-and-downloading-s3-versions/</link>
      <pubDate>Fri, 04 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2019/01/04/listing-and-downloading-s3-versions/</guid>
      <description>&lt;p&gt;Today I found the need to look through all old versions of a file in S3 that had versioning turned on. You can do it through the AWS Console, but I prefer command line tools. You can do it with &lt;a href=&#34;https://aws.amazon.com/cli/&#34;&gt;awscli&lt;/a&gt;, but the flags are long and I can never quite remember them. So let&amp;rsquo;s write up a quick script using &lt;a href=&#34;https://boto3.amazonaws.com/v1/documentation/api/latest/index.html&#34;&gt;boto3&lt;/a&gt; (and as a bonus, try out &lt;a href=&#34;https://click.palletsprojects.com/en/7.x/&#34;&gt;click&lt;/a&gt;)!&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>AoC 2018 Day 14: Functionally Circular Elfs</title>
      <link>https://blog.jverkamp.com/2018/12/14/aoc-2018-day-14-functionally-circular-elfs/</link>
      <pubDate>Fri, 14 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2018/12/14/aoc-2018-day-14-functionally-circular-elfs/</guid>
      <description>&lt;h3 id=&#34;source-chocolate-charts-https-adventofcode-com-2018-day-14&#34;&gt;Source: &lt;a href=&#34;https://adventofcode.com/2018/day/14&#34;&gt;Chocolate Charts&lt;/a&gt;&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Part 1:&lt;/strong&gt; Create an infinite stream of numbers, by starting with [3, 7] with two pointers: 0 and 1. To add values to the list:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Add the current values of the two pointers

&lt;ul&gt;
&lt;li&gt;If the value is less than ten, add that value to the end of the list&lt;/li&gt;
&lt;li&gt;If the value is greater or equal to ten, add 1 and then the ones digits to the end of the list&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Update each pointer by adding the value it is pointing at to its current index plus one&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;With that algorithm, find the ten digits after a given index.&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
  </channel>
</rss>