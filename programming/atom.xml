<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Programming on jverkamp.com</title>
    <link>https://blog.jverkamp.com/programming/</link>
    <description>Recent content in Programming on jverkamp.com</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 08 Jan 2021 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://blog.jverkamp.com/programming/atom.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Genuary: Triple Nested Loops</title>
      <link>https://blog.jverkamp.com/2021/01/08/genuary-triple-nested-loops/</link>
      <pubDate>Fri, 08 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2021/01/08/genuary-triple-nested-loops/</guid>
      <description>&lt;p&gt;The fine people of &lt;a href=&#34;https://old.reddit.com/r/generative/&#34;&gt;/r/generative&lt;/a&gt; / &lt;a href=&#34;https://genuary2021.github.io/&#34;&gt;Genuary2021&lt;/a&gt; have a series of challenges for generative works for the month of January. I don&amp;rsquo;t think I&amp;rsquo;m going to do all of them, but pick and choose. For example, the very first prompt is:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;// TRIPLE NESTED LOOP&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;My goal was to draw a grid of circles across the X/Y the image and nest them for the third dimension. To make it a little more interesting, I added a few different color modes. &lt;code&gt;seededRandom&lt;/code&gt; is my personal favorite, that was interesting to get working.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>yt-cast: Generating podcasts from YouTube URLs</title>
      <link>https://blog.jverkamp.com/2021/01/05/yt-cast-generating-podcasts-from-youtube-urls/</link>
      <pubDate>Tue, 05 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2021/01/05/yt-cast-generating-podcasts-from-youtube-urls/</guid>
      <description>&lt;p&gt;Today&amp;rsquo;s goal: Turn a collection of YouTube links into a podcast.&lt;/p&gt;

&lt;p&gt;Start with a &lt;code&gt;config.json&lt;/code&gt; like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;{
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;brandon-sanderson&amp;#34;&lt;/span&gt;: [
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://www.youtube.com/watch?v=H4lWbkERlxo&amp;amp;list=PLSH_xM-KC3ZuOZayK68JAAjj5W9ShnFVC&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://www.youtube.com/watch?v=YyaC7NmPsc0&amp;amp;list=PLSH_xM-KC3ZtjKTR2z8rPWxv1pP6bOVzZ&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://www.youtube.com/watch?v=o3V0Zok_kT0&amp;amp;list=PLSH_xM-KC3ZuteHw3G1ZrCDWQrAVgO0ER&amp;#34;&lt;/span&gt;
  ]
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And it will automatically download all referenced YouTube videos, convert them to MP3 (both using &lt;a href=&#34;https://ytdl-org.github.io/youtube-dl/index.html&#34;&gt;youtube-dl&lt;/a&gt;), and serve an RSS feed that&amp;rsquo;s compatible with most podcast programs.&lt;/p&gt;

&lt;p&gt;Tested URLs include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Playlist URLs (like the above)&lt;/li&gt;
&lt;li&gt;Single video URLs&lt;/li&gt;
&lt;li&gt;Channel URLs&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Most youtube URLs should work though.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Pictogenesis: Stack Transpiling</title>
      <link>https://blog.jverkamp.com/2020/12/11/pictogenesis-stack-transpiling/</link>
      <pubDate>Fri, 11 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2020/12/11/pictogenesis-stack-transpiling/</guid>
      <description>&lt;p&gt;Much like &lt;a href=&#34;https://blog.jverkamp.com/2020/12/03/pictogenesis-transpiling/&#34;&gt;transpiling register machines&lt;/a&gt;, now we have a chance to transpile &lt;a href=&#34;https://blog.jverkamp.com/2020/12/09/pictogenesis-stack-machine/&#34;&gt;stack machines&lt;/a&gt;. Unfortunately, it doesn&amp;rsquo;t actually speed up the code nearly so much (the stack is just not as effective of a memory structure in this case), but it&amp;rsquo;s still an interesting bit of code.&lt;/p&gt;

&lt;p&gt;In this case, we turn something like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-asm&#34; data-lang=&#34;asm&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;invsub&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;polT&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;writeG&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;id&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;neg&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;zero&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;?&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;sin&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;invsub&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;ZERO&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;inv&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Into this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;X&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;Y&lt;/span&gt;) {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;x&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;X&lt;/span&gt;;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;y&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Y&lt;/span&gt;;

  &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;stack&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [];
  &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;r&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;undefined&lt;/span&gt;;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;g&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;undefined&lt;/span&gt;;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;b&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;undefined&lt;/span&gt;;

  &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;stack&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;push&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;X&lt;/span&gt;);
  &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;stack&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;push&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;Y&lt;/span&gt;);

  &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;arg0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;arg1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;arg2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;result&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;

  &lt;span style=&#34;color:#75715e&#34;&gt;// invsub
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;arg0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;stack&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;pop&lt;/span&gt;() &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
  &lt;span style=&#34;color:#a6e22e&#34;&gt;result&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;arg0&lt;/span&gt;;
  &lt;span style=&#34;color:#a6e22e&#34;&gt;result&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;result&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1.0&lt;/span&gt;;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;stack&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;push&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;result&lt;/span&gt;);

  &lt;span style=&#34;color:#75715e&#34;&gt;// polT
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;arg0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;stack&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;pop&lt;/span&gt;() &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
  &lt;span style=&#34;color:#a6e22e&#34;&gt;arg1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;stack&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;pop&lt;/span&gt;() &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
  &lt;span style=&#34;color:#a6e22e&#34;&gt;result&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Math.&lt;span style=&#34;color:#a6e22e&#34;&gt;atan2&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;arg0&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;arg1&lt;/span&gt;);
  &lt;span style=&#34;color:#a6e22e&#34;&gt;result&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;result&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1.0&lt;/span&gt;;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;stack&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;push&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;result&lt;/span&gt;);

  &lt;span style=&#34;color:#75715e&#34;&gt;// writeG
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;arg0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;stack&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;pop&lt;/span&gt;() &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;g&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;arg0&lt;/span&gt;;

  &lt;span style=&#34;color:#75715e&#34;&gt;// id
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;arg0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;stack&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;pop&lt;/span&gt;() &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
  &lt;span style=&#34;color:#a6e22e&#34;&gt;result&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;arg0&lt;/span&gt;;
  &lt;span style=&#34;color:#a6e22e&#34;&gt;result&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;result&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1.0&lt;/span&gt;;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;stack&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;push&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;result&lt;/span&gt;);

  &lt;span style=&#34;color:#75715e&#34;&gt;// neg
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;arg0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;stack&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;pop&lt;/span&gt;() &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
  &lt;span style=&#34;color:#a6e22e&#34;&gt;result&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;arg0&lt;/span&gt;;
  &lt;span style=&#34;color:#a6e22e&#34;&gt;result&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;result&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1.0&lt;/span&gt;;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;stack&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;push&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;result&lt;/span&gt;);

  &lt;span style=&#34;color:#75715e&#34;&gt;// zero?
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;arg0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;stack&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;pop&lt;/span&gt;() &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
  &lt;span style=&#34;color:#a6e22e&#34;&gt;arg1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;stack&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;pop&lt;/span&gt;() &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
  &lt;span style=&#34;color:#a6e22e&#34;&gt;arg2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;stack&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;pop&lt;/span&gt;() &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
  &lt;span style=&#34;color:#a6e22e&#34;&gt;result&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;arg0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;===&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;arg1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;arg2&lt;/span&gt;;
  &lt;span style=&#34;color:#a6e22e&#34;&gt;result&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;result&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1.0&lt;/span&gt;;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;stack&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;push&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;result&lt;/span&gt;);

  &lt;span style=&#34;color:#75715e&#34;&gt;// sin
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;arg0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;stack&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;pop&lt;/span&gt;() &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
  &lt;span style=&#34;color:#a6e22e&#34;&gt;result&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Math.&lt;span style=&#34;color:#a6e22e&#34;&gt;sin&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;arg0&lt;/span&gt;);
  &lt;span style=&#34;color:#a6e22e&#34;&gt;result&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;result&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1.0&lt;/span&gt;;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;stack&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;push&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;result&lt;/span&gt;);

  &lt;span style=&#34;color:#75715e&#34;&gt;// invsub
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;arg0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;stack&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;pop&lt;/span&gt;() &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
  &lt;span style=&#34;color:#a6e22e&#34;&gt;result&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;arg0&lt;/span&gt;;
  &lt;span style=&#34;color:#a6e22e&#34;&gt;result&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;result&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1.0&lt;/span&gt;;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;stack&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;push&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;result&lt;/span&gt;);

  &lt;span style=&#34;color:#75715e&#34;&gt;// ZERO
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;result&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
  &lt;span style=&#34;color:#a6e22e&#34;&gt;result&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;result&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1.0&lt;/span&gt;;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;stack&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;push&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;result&lt;/span&gt;);

  &lt;span style=&#34;color:#75715e&#34;&gt;// inv
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;arg0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;stack&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;pop&lt;/span&gt;() &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
  &lt;span style=&#34;color:#a6e22e&#34;&gt;result&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;arg0&lt;/span&gt;;
  &lt;span style=&#34;color:#a6e22e&#34;&gt;result&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;result&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1.0&lt;/span&gt;;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;stack&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;push&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;result&lt;/span&gt;);


  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; [
    &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;r&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;===&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;undefined&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;stack&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;pop&lt;/span&gt;() &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;r&lt;/span&gt;,
    &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;g&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;===&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;undefined&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;stack&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;pop&lt;/span&gt;() &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;g&lt;/span&gt;,
    &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;b&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;===&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;undefined&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;stack&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;pop&lt;/span&gt;() &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;b&lt;/span&gt;,
  ];
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Pictogenesis: Stack Machine</title>
      <link>https://blog.jverkamp.com/2020/12/09/pictogenesis-stack-machine/</link>
      <pubDate>Wed, 09 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2020/12/09/pictogenesis-stack-machine/</guid>
      <description>&lt;p&gt;Okay, enough with &lt;a href=&#34;https://blog.jverkamp.com/2020/11/24/pictogenesis-register-machine/&#34;&gt;register machines&lt;/a&gt;. Let&amp;rsquo;s make something new. This time, a stack based machine!&lt;/p&gt;

&lt;p&gt;Rather than keeping it&amp;rsquo;s memory in a series of memory cells, there will be a single stack of values. All functions can &lt;code&gt;pop&lt;/code&gt; values from the top of the stack or &lt;code&gt;push&lt;/code&gt; them back on. I will add the ability to &lt;code&gt;read&lt;/code&gt; the X/Y value and directly &lt;code&gt;write&lt;/code&gt; R/G/B, but you can&amp;rsquo;t write to the former or read from the latter, so you can&amp;rsquo;t use them as registers. Let&amp;rsquo;s see what that looks like!&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Pictogenesis: Transpiling</title>
      <link>https://blog.jverkamp.com/2020/12/03/pictogenesis-transpiling/</link>
      <pubDate>Thu, 03 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2020/12/03/pictogenesis-transpiling/</guid>
      <description>&lt;p&gt;Okay. That is &lt;em&gt;slow&lt;/em&gt;&amp;hellip; Let&amp;rsquo;s make it faster!&lt;/p&gt;

&lt;p&gt;So the main problem we have is that we&amp;rsquo;re interpreting the code. For every single pixel, for every line of code, we&amp;rsquo;re doing a few housekeeping things and making at least one function call. For a 400x400 image with just 10 lines of code, that&amp;rsquo;s 1.6M function calls. Like I said, &lt;em&gt;slow&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;So let&amp;rsquo;s make it faster!&lt;/p&gt;

&lt;p&gt;My first idea? &lt;a href=&#34;https://en.wikipedia.org/wiki/Transpile&#34;&gt;Transpile&lt;/a&gt; it to Javascript!&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Pictogenesis: Wrapping Modes</title>
      <link>https://blog.jverkamp.com/2020/12/01/pictogenesis-wrapping-modes/</link>
      <pubDate>Tue, 01 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2020/12/01/pictogenesis-wrapping-modes/</guid>
      <description>&lt;p&gt;Now that I&amp;rsquo;ve got &lt;a href=&#34;https://blog.jverkamp.com/2020/11/24/pictogenesis-register-machine/&#34;&gt;register machines&lt;/a&gt; working, one of the next ideas I had was to implement different wrapping modes. Currently, as it stands, &lt;code&gt;X&lt;/code&gt; and &lt;code&gt;Y&lt;/code&gt; are passed into the machine as floating point numbers from [0, 1] across the image and output is expected to be [0, 1] for each of &lt;code&gt;R&lt;/code&gt;, &lt;code&gt;G&lt;/code&gt;, and &lt;code&gt;B&lt;/code&gt;. Any values that end up outside of that range, we truncate down to that range. But some of our mathematical functions (multiplication, exponentiation, negation, etc) tend to generate numbers way out of this range. But they don&amp;rsquo;t have to!&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Pictogenesis: Register Machine</title>
      <link>https://blog.jverkamp.com/2020/11/24/pictogenesis-register-machine/</link>
      <pubDate>Tue, 24 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2020/11/24/pictogenesis-register-machine/</guid>
      <description>&lt;p&gt;Okay. First &lt;a href=&#34;https://blog.jverkamp.com/2020/11/23/pictogenesis-the-idea/&#34;&gt;Pictogeneis&lt;/a&gt; machine: a register based machine. Today we&amp;rsquo;re going to create a very small language with a small number of registers that can read from the outside world, write colors, and act as temporary variables.&lt;/p&gt;

&lt;p&gt;Something like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-asm&#34; data-lang=&#34;asm&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;gt&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;?&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;t0&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;b&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;y&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;x&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;r&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;add&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;g&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;y&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;x&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;abs&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;b&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;x&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;inv&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;t0&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;g&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;add&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;r&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;g&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;x&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;sub&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;t0&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;b&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;r&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;mul&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;x&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;r&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;b&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;abs&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;y&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;x&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;figure&gt;
    &lt;img src=&#34;https://blog.jverkamp.com/embeds/2020/pictogenesis-register-1.png&#34;/&gt; 
&lt;/figure&gt;


&lt;p&gt;In each case, the first argument is the output and the rest are inputs. So:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;#&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;gt&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;t0&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;b&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;y&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;x&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;r&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;b&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;y&lt;/span&gt;) {
    &lt;span style=&#34;color:#a6e22e&#34;&gt;t0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;x&lt;/span&gt;;
} &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {
    &lt;span style=&#34;color:#a6e22e&#34;&gt;t0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;r&lt;/span&gt;;
}
 
&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;#&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;add&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;g&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;y&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;x&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;g&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;y&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;x&lt;/span&gt;

&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;#&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;abs&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;b&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;x&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;b&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;x&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;
...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Where &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; are the input point x and y mapped to the range [0, 1]; &lt;code&gt;r&lt;/code&gt;, &lt;code&gt;g&lt;/code&gt;, &lt;code&gt;b&lt;/code&gt; are the output colors in the same range and &lt;code&gt;t{n}&lt;/code&gt; are temporary registers just used during the program.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Pictogenesis: The Idea</title>
      <link>https://blog.jverkamp.com/2020/11/23/pictogenesis-the-idea/</link>
      <pubDate>Mon, 23 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2020/11/23/pictogenesis-the-idea/</guid>
      <description>&lt;p&gt;PICTOGENESIS REBORN!&lt;/p&gt;

&lt;p&gt;I don&amp;rsquo;t know if I ever actually posted it publically, but one of the ideas I&amp;rsquo;ve had percolating for the longest time is combining tiny &lt;a href=&#34;https://en.wikipedia.org/wiki/interpreters&#34;&gt;interpreters&lt;/a&gt; and &lt;a href=&#34;https://en.wikipedia.org/wiki/genetic%20algorithms&#34;&gt;genetic algorithms&lt;/a&gt; to make &lt;a href=&#34;https://en.wikipedia.org/wiki/generative%20art&#34;&gt;generative art&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The basic idea is to generate programs (in various styles) that can take x,y coordinates and return colors. Then apply that to every pixel on an image to make generative art. Once we have, figure out a way to mutate/breed the programs so that we can apply a genetic algorithm to them and make awesome images! Sort of like &lt;a href=&#34;https://electricsheep.org/&#34;&gt;Electric Sheep&lt;/a&gt; (that brings back memories).&lt;/p&gt;

&lt;p&gt;The evolution point of view was actually a pretty tricky problem, since programs can have a number of different representations. I could compile them to bytecode and mutate that, but how do I make most code at least potentially meaningful?&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Backtracking Worm Coral</title>
      <link>https://blog.jverkamp.com/2020/11/20/backtracking-worm-coral/</link>
      <pubDate>Fri, 20 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2020/11/20/backtracking-worm-coral/</guid>
      <description>&lt;p&gt;Let&amp;rsquo;s take &lt;a href=&#34;https://blog.jverkamp.com/2020/11/19/worm-coral/&#34;&gt;yesterday&amp;rsquo;s Worm Coral&lt;/a&gt; and turn it up to 11!&lt;/p&gt;

&lt;p&gt;Now we have:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Whenever a worm gets stuck, it will &amp;lsquo;backtrack&amp;rsquo;: it will instead expand from the previous position recursively&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;That means that the initial 10 worms should always be able to fill the entire world! Even if one closes off an area, that one can eventually fill it up:&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&#34;https://blog.jverkamp.com/embeds/2020/backtracking-worm-full.png&#34;/&gt; 
&lt;/figure&gt;


&lt;p&gt;I like how occiasionally you get one spindly bit (usually early in the run) that another goes through. It reminds me of &lt;a href=&#34;https://boardgamegeek.com/boardgame/2453/blokus&#34;&gt;Blokus&lt;/a&gt; It does take a while.&lt;/p&gt;

&lt;p&gt;In addition, I wanted to play a bit with simulationism:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Worms can potentially &lt;code&gt;changeColor&lt;/code&gt; each frame&lt;/li&gt;
&lt;li&gt;Every &lt;code&gt;framesPerGeneration&lt;/code&gt; check if each worm dies &lt;code&gt;deathChance&lt;/code&gt; or spawns a child worm (&lt;code&gt;spawnChance&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;If a worm dies, it is removed from the simulation&lt;/li&gt;
&lt;li&gt;If a worm spawns, it creates a new child at it&amp;rsquo;s current location

&lt;ul&gt;
&lt;li&gt;If &lt;code&gt;spawnIncludesHistory&lt;/code&gt; is set, the child can backtrack into the parent&amp;rsquo;s history&lt;/li&gt;
&lt;li&gt;If &lt;code&gt;spawnVariesColor&lt;/code&gt; is set, the child will (potentially, it&amp;rsquo;s random) have a slightly different color&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let&amp;rsquo;s check it out!&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Worm Coral</title>
      <link>https://blog.jverkamp.com/2020/11/19/worm-coral/</link>
      <pubDate>Thu, 19 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2020/11/19/worm-coral/</guid>
      <description>&lt;p&gt;Today, I&amp;rsquo;m going to work on using &lt;a href=&#34;https://blog.jverkamp.com/2020/11/17/p5js-worms/&#34;&gt;worms&lt;/a&gt; to generate coral, similar to what I did way back when I was &lt;a href=&#34;https://blog.jverkamp.com/2015/01/01/generating-omnichromatic-images/&#34;&gt;generating omnichromatic images&lt;/a&gt;.&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&#34;https://blog.jverkamp.com/embeds/2020/worm-coral.png&#34;/&gt; 
&lt;/figure&gt;


&lt;p&gt;In a nutshell:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Spawn n worms&lt;/li&gt;
&lt;li&gt;On each tick:

&lt;ul&gt;
&lt;li&gt;Each worm tries to randomly move one direction&lt;/li&gt;
&lt;li&gt;If it cannot, increment that worm&amp;rsquo;s &lt;code&gt;stuck&lt;/code&gt; counter&lt;/li&gt;
&lt;li&gt;If it can, restart the &lt;code&gt;stuck&lt;/code&gt; counter&lt;/li&gt;
&lt;li&gt;If a worm is &lt;code&gt;stuck&lt;/code&gt; long enough, kill it off and spawn a new worm&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Eventually, we&amp;rsquo;ll fill the entire space with colors that end up looking a bit like coral. I&amp;rsquo;ll probably extend this later, since there are a lot of cool tweaks you can do with this general idea.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>p5js Boids</title>
      <link>https://blog.jverkamp.com/2020/11/18/p5js-boids/</link>
      <pubDate>Wed, 18 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2020/11/18/p5js-boids/</guid>
      <description>&lt;p&gt;Okay, sketch 2: &lt;a href=&#34;https://en.wikipedia.org/wiki/Boids&#34;&gt;Boids&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;The basic idea is to create a bunch of particles (the Boids in this case) and apply to them each a series of simple, limited rules that rely neither on communcation between the Boids nor a global controller and see what behaviors you can generate. Specifically, can you replicate the flocking behavior found in birds, since birds can obviously fly together without hitting one another and also without some lead bird giving orders.&lt;/p&gt;

&lt;p&gt;Something like this:&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&#34;https://blog.jverkamp.com/embeds/2020/boids.png&#34;/&gt; 
&lt;/figure&gt;


&lt;p&gt;For this case, there are three rules:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;seperation&lt;/strong&gt; - Fly away from any Boids that are too close to you (to avoid collision)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;alignment&lt;/strong&gt; - Align yourself to fly in the same direction as any Boids in your field of vision&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;cohesion&lt;/strong&gt; - Fly towards the center point of the Boids you can see&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>p5js Worms</title>
      <link>https://blog.jverkamp.com/2020/11/17/p5js-worms/</link>
      <pubDate>Tue, 17 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2020/11/17/p5js-worms/</guid>
      <description>&lt;p&gt;One thing that I&amp;rsquo;ve been hoping to get into a bit more is the idea of &lt;a href=&#34;https://en.wikipedia.org/wiki/Generative%20Art&#34;&gt;Generative Art&lt;/a&gt;. Essentially, use any of a wide variety of algorithms to generate art. To do that, and so that the art can be generated right in front of you in the browser, I&amp;rsquo;m going to use the &lt;a href=&#34;https://p5js.org/&#34;&gt;p5js&lt;/a&gt; library. It gives you a nice API of graphical primitives and takes a simple &lt;code&gt;setup&lt;/code&gt; and &lt;code&gt;draw&lt;/code&gt; function and does the rest.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Extending my EC2 script</title>
      <link>https://blog.jverkamp.com/2020/08/11/extending-my-ec2-script/</link>
      <pubDate>Tue, 11 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2020/08/11/extending-my-ec2-script/</guid>
      <description>&lt;p&gt;Another quick post.&lt;/p&gt;

&lt;p&gt;What feels like a lifetime ago, I &lt;a href=&#34;https://blog.jverkamp.com/2015/10/30/finding-ec2-instances-by-tag/&#34;&gt;wrote a post&lt;/a&gt; about finding &lt;code&gt;ec2&lt;/code&gt; instances by name. I honestly use that script just about every day, mostly for automatically finding instances to SSH to (a la &lt;a href=&#34;https://blog.jverkamp.com/2017/12/18/ssh-config-proxycommand-tricks/&#34;&gt;SSH config tricks&lt;/a&gt;). But there are a few other quick things I&amp;rsquo;ve done with it:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ec2-script&lt;/code&gt; - Run a script on all instances of a given name&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ec2-disk&lt;/code&gt; - A specialization of &lt;code&gt;ec2-script&lt;/code&gt; to check main disk usage&lt;/li&gt;
&lt;li&gt;&lt;code&gt;terminate&lt;/code&gt; - A script that I use with &lt;code&gt;ec2&lt;/code&gt; to terminate instances from the command line&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ec2-cycle&lt;/code&gt; - Slow cycle a given set of &lt;code&gt;ec2&lt;/code&gt; instances by terminating so many per minute&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;All of which are included in my &lt;a href=&#34;https://github.com/jpverkamp/dotfiles/tree/master/bin&#34;&gt;dotfiles&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Docker Magic - Arbitrary docker runtimes in place</title>
      <link>https://blog.jverkamp.com/2020/08/01/docker-magic-arbitrary-docker-runtimes-in-place/</link>
      <pubDate>Sat, 01 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2020/08/01/docker-magic-arbitrary-docker-runtimes-in-place/</guid>
      <description>&lt;p&gt;A quick post today.&lt;/p&gt;

&lt;p&gt;I find myself working with a surprising number of different languages/environments day to day. In the last week, I&amp;rsquo;ve worked with PHP, Python, Go, Ruby, and Javascript. And different versions of several of those. While I could install something like &lt;a href=&#34;https://virtualenv.pypa.io/en/latest/&#34;&gt;virtualenv&lt;/a&gt; for Python / &lt;a href=&#34;https://github.com/rbenv/rbenv&#34;&gt;rbenv&lt;/a&gt; for Ruby / etc, I already have a tool exactly designed for this sort of thing: Docker!&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>An SPF DNS Server</title>
      <link>https://blog.jverkamp.com/2020/07/16/an-spf-dns-server/</link>
      <pubDate>Thu, 16 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2020/07/16/an-spf-dns-server/</guid>
      <description>&lt;p&gt;The &lt;a href=&#34;https://en.wikipedia.org/wiki/Sender%20Policy%20Framework&#34;&gt;Sender Policy Framework&lt;/a&gt; is one of those things that&amp;rsquo;s really powerful and useful to help prevent phishing and email spam, but can be a royal pain to work with. Specifically, SPF is a series of DNS TXT records&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:history&#34;&gt;&lt;a href=&#34;#fn:history&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; with a specific format that can be looked up by any email service to verify that an email was sent by a server that should be authorized to send email on your behalf. For example&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;v=spf1 ip4:192.0.2.0/24 ip4:198.51.100.123 a -all&amp;#34;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;v=spf1&lt;/code&gt; - tells the client this is an SPF record and should always start the record&lt;/li&gt;
&lt;li&gt;&lt;code&gt;{key}[:{value}]?&lt;/code&gt; - one of many different key/value pairs that can define the record

&lt;ul&gt;
&lt;li&gt;in the case above a &lt;code&gt;ip4&lt;/code&gt; key species an &lt;a href=&#34;https://en.wikipedia.org/wiki/IPv4&#34;&gt;IPv4&lt;/a&gt; address range that can send emails on your behalf (the value can be optional)&lt;/li&gt;
&lt;li&gt;the &lt;code&gt;a&lt;/code&gt; above is another special case where if the sender domain (&lt;code&gt;jp@example.com&lt;/code&gt; would be &lt;code&gt;example.com&lt;/code&gt;) resolves via a &lt;code&gt;DNS A&lt;/code&gt; record to the server that sent the email, it&amp;rsquo;s allows&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-all&lt;/code&gt; is a fallthrough case meaning &amp;lsquo;fail all that didn&amp;rsquo;t match a previous case&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There are a number of other cases, but we&amp;rsquo;ll get to the other interesting ones in a bit.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Directly monitoring Sidekiq in Redis</title>
      <link>https://blog.jverkamp.com/2020/07/14/directly-monitoring-sidekiq-in-redis/</link>
      <pubDate>Tue, 14 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2020/07/14/directly-monitoring-sidekiq-in-redis/</guid>
      <description>&lt;p&gt;Another thing that came up recently: we have many (many) &lt;a href=&#34;https://github.com/mperham/sidekiq&#34;&gt;sidekiq&lt;/a&gt; queues. Each has their own admin interface, but sometimes you just want all of the information in one place. Of course, you could bookmark all of the pages. Or make a single page with a lot of frames (remember &lt;a href=&#34;https://en.wikipedia.org/wiki/HTML%20frames&#34;&gt;HTML frames&lt;/a&gt;?). Or use their API. But where&amp;rsquo;s the fun in that? Instead, let&amp;rsquo;s dig straight into the redis backend and see what we can see!&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>A Smart MySQL Wrapper</title>
      <link>https://blog.jverkamp.com/2020/07/07/a-smart-mysql-wrapper/</link>
      <pubDate>Tue, 07 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2020/07/07/a-smart-mysql-wrapper/</guid>
      <description>&lt;p&gt;One thing that I often need to do is deal with a large collection of database servers in different clusters and in different environments. On top of that, sometimes, I want a UI, sometime I want a CLI to script. And sometimes I&amp;rsquo;m on a VPN and sometimes I&amp;rsquo;m not. All together, it&amp;rsquo;s a rather complicated number of saved connections and CLI switches and everything else. All together, I want:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Specify the cluster, environment, and mode (read/write/adhoc)&lt;/li&gt;
&lt;li&gt;Specify if I want to run via CLI or via UI&lt;/li&gt;
&lt;li&gt;Specify an optional user with safely stored and used passwords&lt;/li&gt;
&lt;li&gt;Automatically connected via SSH tunnel if I&amp;rsquo;m not on VPN, but not if I am (for CLI or VPN)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let&amp;rsquo;s do it!&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>SSRF Protection in Rails</title>
      <link>https://blog.jverkamp.com/2020/06/30/ssrf-protection-in-rails/</link>
      <pubDate>Tue, 30 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2020/06/30/ssrf-protection-in-rails/</guid>
      <description>&lt;p&gt;One of the more subtle bugs that a lot of companies miss is Server Side Request Forgery (SSRF). Like it&amp;rsquo;s cousin CSRF (cross-site request forgery), SSRF involves carefully crafting a request that runs in a way that the original developers didn&amp;rsquo;t expect to do things that shouldn&amp;rsquo;t be done. In the case of CSRF, one site is making a request on behalf of another in a user&amp;rsquo;s browser (cross-site), but in SSRF, a request is being made by a server on behalf of a client, but you can trick it into making a request that wasn&amp;rsquo;t intended.&lt;/p&gt;

&lt;p&gt;For a perhaps more obvious example, consider a website with a service that will render webpages as preview images&amp;ndash;consider sharing links on a social network. A user makes a request such as &lt;code&gt;/render?url=https://www.google.com&lt;/code&gt;. This goes to the server, which will then fetch &lt;a href=&#34;https://www.google.com&#34;&gt;https://www.google.com&lt;/a&gt;, render the page to a screenshot, and then return that as a thumbnail.&lt;/p&gt;

&lt;p&gt;This seems like rather useful functionality, but what if instead, the user gives the url: &lt;code&gt;/render?url=https://secret-internal-site.company.com&lt;/code&gt;. Normally, &lt;code&gt;company.com&lt;/code&gt; would be an internal only domain that cannot be viewed by users, but in this case&amp;ndash;the server is within the corporate network. Off the server goes, helpfully taking and returning a screenshot. Another option&amp;ndash;if you&amp;rsquo;re hosted on AWS&amp;ndash;is the AWS &lt;a href=&#34;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-metadata.html&#34;&gt;metadata endpoint&lt;/a&gt;: &lt;code&gt;http://169.254.169.254/latest/meta-data/&lt;/code&gt;. All sorts of interesting private things there. Or even more insidious, &lt;code&gt;/render?url=file:///etc/password&lt;/code&gt;. That shouldn&amp;rsquo;t work in most cases, since most libraries know better than to rener &lt;code&gt;file://&lt;/code&gt; protocol URLs, but&amp;hellip; not always!&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Observation Server</title>
      <link>https://blog.jverkamp.com/2020/06/10/observation-server/</link>
      <pubDate>Wed, 10 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2020/06/10/observation-server/</guid>
      <description>&lt;p&gt;For a number of years now, I&amp;rsquo;ve been writing down my &amp;lsquo;observations&amp;rsquo;. Essentially, it&amp;rsquo;s a semi-structured set of text files that I keep in Dropbox. One for each day, in a folder by month. I record interesting people I see, things I did worth doing, and things my children did which were adorable.&lt;/p&gt;

&lt;p&gt;After a while, I started wanting to look back, so first, I wrote a relatively simple script that would go back through my archives and send me everything I did 1/2/3/4/etc years ago. That worked well enough, but it ended up generating a lot of emails to go through some days. So the second generation is a server that can format those pages and display them as a nice webpage.&lt;/p&gt;

&lt;p&gt;The most interesting part perhaps was dealing with the tarballs that I keep the archives in (they&amp;rsquo;re plain text, so they compress very well). I wanted to keep them compressed, so I had to decompress them in memory on the fly.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>LD46: Tetris Life Scoring</title>
      <link>https://blog.jverkamp.com/2020/05/12/ld46-tetris-life-scoring/</link>
      <pubDate>Tue, 12 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2020/05/12/ld46-tetris-life-scoring/</guid>
      <description>&lt;p&gt;And so it ends.&lt;/p&gt;

&lt;h1 id=&#34;results&#34;&gt;Results&lt;/h1&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Category&lt;/th&gt;
&lt;th&gt;Place&lt;/th&gt;
&lt;th&gt;Score&lt;/th&gt;
&lt;th&gt;Ratings&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Overal&lt;/td&gt;
&lt;td&gt;282&lt;sup&gt;nd&lt;/sup&gt;&lt;/td&gt;
&lt;td&gt;3.688&lt;/td&gt;
&lt;td&gt;26&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Fun&lt;/td&gt;
&lt;td&gt;408&lt;sup&gt;th&lt;/sup&gt;&lt;/td&gt;
&lt;td&gt;3.438&lt;/td&gt;
&lt;td&gt;26&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Innovation&lt;/td&gt;
&lt;td&gt;17&lt;sup&gt;th&lt;/sup&gt;&lt;/td&gt;
&lt;td&gt;4.28&lt;/td&gt;
&lt;td&gt;27&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Theme&lt;/td&gt;
&lt;td&gt;290&lt;sup&gt;th&lt;/sup&gt;&lt;/td&gt;
&lt;td&gt;3.917&lt;/td&gt;
&lt;td&gt;26&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Graphics&lt;/td&gt;
&lt;td&gt;608&lt;sup&gt;th&lt;/sup&gt;&lt;/td&gt;
&lt;td&gt;3.313&lt;/td&gt;
&lt;td&gt;26&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Audio&lt;/td&gt;
&lt;td&gt;436&lt;sup&gt;th&lt;/sup&gt;&lt;/td&gt;
&lt;td&gt;3.182&lt;/td&gt;
&lt;td&gt;24&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Humor&lt;/td&gt;
&lt;td&gt;761&lt;sup&gt;st&lt;/sup&gt;&lt;/td&gt;
&lt;td&gt;2.205&lt;/td&gt;
&lt;td&gt;24&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Mood&lt;/td&gt;
&lt;td&gt;529&lt;sup&gt;th&lt;/sup&gt;&lt;/td&gt;
&lt;td&gt;3.208&lt;/td&gt;
&lt;td&gt;26&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;</description>
    </item>
    
    <item>
      <title>LD46: My favorites (so far)</title>
      <link>https://blog.jverkamp.com/2020/04/20/ld46-my-favorites-so-far/</link>
      <pubDate>Mon, 20 Apr 2020 12:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2020/04/20/ld46-my-favorites-so-far/</guid>
      <description>&lt;p&gt;As part of &lt;a href=&#34;https://ldjam.com/&#34;&gt;Ludum Dare&lt;/a&gt;, you&amp;rsquo;re supposed to review games. Here are some of my favorites (in the order I reveiwed them, so no particular order).&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>LD46: Tetris Life v1.0</title>
      <link>https://blog.jverkamp.com/2020/04/19/ld46-tetris-life-v1.0/</link>
      <pubDate>Sun, 19 Apr 2020 20:30:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2020/04/19/ld46-tetris-life-v1.0/</guid>
      <description>&lt;iframe width=&#34;320&#34; height=&#34;640&#34; style=&#34;border: 1px solid black;&#34; src=&#34;https://blog.jverkamp.com/embeds/games/ludum-dare/46/v1.0/launcher.html&#34;&gt;&lt;/iframe&gt;

&lt;p&gt;Controls:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Left and right to move the block and forth&lt;/li&gt;
&lt;li&gt;Z and X to rotate it (or crash into things)&lt;/li&gt;
&lt;li&gt;If a block gets stuck, you can hit ENTER to lock it in place&lt;/li&gt;
&lt;li&gt;ESC to quit the current level&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Goals:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;To win: Get the plants to the top of the level&lt;/li&gt;
&lt;li&gt;To lose: Kill off all of the plants #keepitalive&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;EDIT: I have included a v1.1 update that fixes a few minor bugs. Feel free to play either the official v1.0 build or the slightly updated (~10 minutes) v1.1 build with:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Add a ceiling&lt;/li&gt;
&lt;li&gt;Correctly scale target&lt;/li&gt;
&lt;li&gt;Scale control speed by difficulty&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And there you have it. This page will serve as the main entry for Ludum Dare. If you&amp;rsquo;d rather download an executable for Windows/OSX/Linux, you can do so on the GitHub release page:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/jpverkamp/tetris-life/releases/tag/v1.0&#34;&gt;GitHub: Tetris Life v1.0&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Speaking of which, per the Ludum Dare rules (and because I would have anyways), the full source code:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/jpverkamp/tetris-life/&#34;&gt;GitHub: Tetris Life source&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;MIT Licensed. I would appreciate a comment if you do anything cool with it.&lt;/p&gt;

&lt;p&gt;Ludum Dare page, if you&amp;rsquo;d like to see my entry:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://ldjam.com/events/ludum-dare/46/$196712&#34;&gt;Ludum Dare: Tetris Sand&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Some updates since last time:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Music!&lt;/li&gt;
&lt;li&gt;More elements!&lt;/li&gt;
&lt;li&gt;Polish!&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>LD46: I made a GAME!</title>
      <link>https://blog.jverkamp.com/2020/04/19/ld46-i-made-a-game/</link>
      <pubDate>Sun, 19 Apr 2020 15:15:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2020/04/19/ld46-i-made-a-game/</guid>
      <description>&lt;p&gt;I made a game y&amp;rsquo;all!&lt;/p&gt;

&lt;video controls src=&#34;https://blog.jverkamp.com/embeds/2020/ludum-dare-46-i-made-a-game.mp4&#34;&gt;&lt;/video&gt;

&lt;p&gt;Big changes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It&amp;rsquo;s got a menu!&lt;/li&gt;
&lt;li&gt;And a demo mode!&lt;/li&gt;
&lt;li&gt;PLANTS GROW BY THEMSELVES!&lt;/li&gt;
&lt;li&gt;And win/lose screens!&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>LD46: Score, Scaling, and BURNING! Oh my.</title>
      <link>https://blog.jverkamp.com/2020/04/19/ld46-score-scaling-and-burning-oh-my./</link>
      <pubDate>Sun, 19 Apr 2020 13:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2020/04/19/ld46-score-scaling-and-burning-oh-my./</guid>
      <description>&lt;p&gt;Got some sleep and BACK AT IT!&lt;/p&gt;

&lt;video controls src=&#34;https://blog.jverkamp.com/embeds/2020/ludum-dare-46-scaling.mp4&#34;&gt;&lt;/video&gt;

&lt;p&gt;Big changes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;We have scores now!&lt;/li&gt;
&lt;li&gt;And proper scaling (which also fixes the performance issue, at least on my machine, turns out &lt;sup&gt;1&lt;/sup&gt;&amp;frasl;&lt;sub&gt;16&lt;/sub&gt; as many updates helps)&lt;/li&gt;
&lt;li&gt;Proper resetting&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>LD46: IT&#39;S WORKING!</title>
      <link>https://blog.jverkamp.com/2020/04/18/ld46-its-working/</link>
      <pubDate>Sat, 18 Apr 2020 23:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2020/04/18/ld46-its-working/</guid>
      <description>&lt;figure&gt;
    &lt;img src=&#34;https://blog.jverkamp.com/embeds/2020/its-working.gif&#34;/&gt; 
&lt;/figure&gt;


&lt;p&gt;IT&amp;rsquo;S WORKING!&lt;/p&gt;

&lt;video controls src=&#34;https://blog.jverkamp.com/embeds/2020/ludum-dare-46-its-working.mp4&#34;&gt;&lt;/video&gt;

&lt;p&gt;The performance is &lt;strong&gt;terrible&lt;/strong&gt; (sub 10 FPS on a pretty decent desktop and I want to try to run it in a browser&amp;hellip;), but &lt;strong&gt;it&amp;rsquo;s working&lt;/strong&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>LD46: Particles!</title>
      <link>https://blog.jverkamp.com/2020/04/18/ld46-particles/</link>
      <pubDate>Sat, 18 Apr 2020 21:45:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2020/04/18/ld46-particles/</guid>
      <description>&lt;p&gt;I&amp;rsquo;ve got particles working!&lt;/p&gt;

&lt;video controls src=&#34;https://blog.jverkamp.com/embeds/2020/ludum-dare-46-particles.mp4&#34;&gt;&lt;/video&gt;

&lt;p&gt;It&amp;rsquo;s probably not &lt;strong&gt;nearly&lt;/strong&gt; as efficient as it&amp;rsquo;s going to have to be, but it&amp;rsquo;s a start?&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>LD46: Squishy squishy</title>
      <link>https://blog.jverkamp.com/2020/04/18/ld46-squishy-squishy/</link>
      <pubDate>Sat, 18 Apr 2020 16:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2020/04/18/ld46-squishy-squishy/</guid>
      <description>&lt;p&gt;It&amp;rsquo;s so squish!&lt;/p&gt;

&lt;video controls src=&#34;https://blog.jverkamp.com/embeds/2020/ludum-dare-46-squishy.mp4&#34;&gt;&lt;/video&gt;

&lt;p&gt;That is not at all what I intended, but I kind of love it, so for the moment, it stays in.&lt;/p&gt;

&lt;p&gt;To get this far, I had a heck of a time trying to figure out Godot&amp;rsquo;s physics engine, but I&amp;rsquo;m learning quickly!&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>LD46: Tetris is working! (sort of)</title>
      <link>https://blog.jverkamp.com/2020/04/18/ld46-tetris-is-working-sort-of/</link>
      <pubDate>Sat, 18 Apr 2020 12:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2020/04/18/ld46-tetris-is-working-sort-of/</guid>
      <description>&lt;p&gt;Update!&lt;/p&gt;

&lt;video controls src=&#34;https://blog.jverkamp.com/embeds/2020/ludum-dare-46-tetris.mp4&#34;&gt;&lt;/video&gt;

&lt;p&gt;I have basic blocks that fall by themselves and that I can move around with left/right on the keyboard. They will collide with each other and the walls/floor, and once they stick, a new block will spawn.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Ludum Dare 46: Tetris Sand</title>
      <link>https://blog.jverkamp.com/2020/04/17/ludum-dare-46-tetris-sand/</link>
      <pubDate>Fri, 17 Apr 2020 23:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2020/04/17/ludum-dare-46-tetris-sand/</guid>
      <description>&lt;p&gt;It&amp;rsquo;s &lt;a href=&#34;https://blog.jverkamp.com/2014/08/24/sandbox-battle/&#34;&gt;been a while&lt;/a&gt; since I&amp;rsquo;ve last done a &lt;a href=&#34;https://ldjam.com/&#34;&gt;Ludum Dare&lt;/a&gt;. I felt the itch though, so let&amp;rsquo;s do it again.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://ldjam.com/&#34;&gt;Ludum Dare&lt;/a&gt; is an online event where games are made from scratch in a weekend. Check us out every April and October!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The theme this time: &lt;em&gt;Keep it alive&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;I don&amp;rsquo;t know if I&amp;rsquo;ll make it all the way through or actually finish a game. But I&amp;rsquo;m going to give it a try!&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Command line AES with openssl (and tar)</title>
      <link>https://blog.jverkamp.com/2020/04/09/command-line-aes-with-openssl-and-tar/</link>
      <pubDate>Thu, 09 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2020/04/09/command-line-aes-with-openssl-and-tar/</guid>
      <description>&lt;p&gt;I had &lt;a href=&#34;https://github.com/jpverkamp/dotfiles/blob/b708190/bin/aes&#34;&gt;a script&lt;/a&gt; that would take a file and a passphrase and either encrypt it or, if already encrypted, decrypt it. It worked well enough and I got to play with the &lt;code&gt;&lt;a href=&#34;https://docs.python.org/3/search.html?q=struct&#34;&gt;struct&lt;/a&gt;&lt;/code&gt;
 library. But it was home grown&amp;ndash;so not compatible with anything&amp;ndash;and didn&amp;rsquo;t properly validate anything. It worked well enough, but perhaps I could do something better.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Get kitten</title>
      <link>https://blog.jverkamp.com/2020/04/01/get-kitten/</link>
      <pubDate>Wed, 01 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2020/04/01/get-kitten/</guid>
      <description>&lt;p&gt;I upload a lot of images when testing for various things. And of course, I don&amp;rsquo;t want to use any of my own images. So what would I do instead?&lt;/p&gt;

&lt;p&gt;Kittens!&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fish&#34; data-lang=&#34;fish&#34;&gt;$ get-kitten

Downloading a &lt;span style=&#34;color:#ae81ff&#34;&gt;640&lt;/span&gt; x &lt;span style=&#34;color:#ae81ff&#34;&gt;480&lt;/span&gt; kitten
Downloading to kitten-1.jpg

$ open kitten-1.jpg&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;figure&gt;
    &lt;img src=&#34;https://blog.jverkamp.com/embeds/2020/kitten-1.jpg&#34;/&gt; 
&lt;/figure&gt;


&lt;p&gt;Perfect.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Split a file with headers</title>
      <link>https://blog.jverkamp.com/2020/03/30/split-a-file-with-headers/</link>
      <pubDate>Mon, 30 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2020/03/30/split-a-file-with-headers/</guid>
      <description>&lt;p&gt;I have a bunch of files with Arabic content that I need to split into chunks so they can be better run in parallel&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:iknow&#34;&gt;&lt;a href=&#34;#fn:iknow&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;. But by default, when I open them in a text editor, the encoding changes from &lt;code&gt;windows-1256&lt;/code&gt; to &lt;code&gt;utf-8&lt;/code&gt;&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:iknow2&#34;&gt;&lt;a href=&#34;#fn:iknow2&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;. I could use the Unix &lt;code&gt;split&lt;/code&gt; command to break them into chunks, but I need to preserve the headers. So&amp;hellip; how do I fix all this?&lt;/p&gt;

&lt;p&gt;Write a script!&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Wrapping xattr as a racket module</title>
      <link>https://blog.jverkamp.com/2020/01/29/wrapping-xattr-as-a-racket-module/</link>
      <pubDate>Wed, 29 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2020/01/29/wrapping-xattr-as-a-racket-module/</guid>
      <description>&lt;p&gt;I recently came across a question: how do you read &lt;a href=&#34;https://en.wikipedia.org/wiki/extended%20file%20attributes&#34;&gt;extended file attributes&lt;/a&gt; in Racket. Not being actually that familiar with extended file attributes, I searched online. Nothing seems to currently exist (other than &lt;a href=&#34;https://docs.racket-lang.org/fuse/index.html#%28def._%28%28lib._fuse%2Fmain..rkt%29._setxattr%29%29&#34;&gt;in the FUSE module, but that&amp;rsquo;s specific to FUSE&lt;/a&gt;), but there is a system level exectuable that one could wrap to do this. I haven&amp;rsquo;t done &lt;i&gt;much&lt;/i&gt;&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:much&#34;&gt;&lt;a href=&#34;#fn:much&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; with Racket&amp;rsquo;s &lt;code&gt;&lt;a href=&#34;http://docs.racket-lang.org/search/index.html?q=system&#34;&gt;system&lt;/a&gt;&lt;/code&gt;
 or &lt;code&gt;&lt;a href=&#34;http://docs.racket-lang.org/search/index.html?q=system*&#34;&gt;system*&lt;/a&gt;&lt;/code&gt;
 function before, so let&amp;rsquo;s give it a whirl.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Rack::Cors Configuration Tricks</title>
      <link>https://blog.jverkamp.com/2020/01/16/rackcors-configuration-tricks/</link>
      <pubDate>Thu, 16 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2020/01/16/rackcors-configuration-tricks/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://github.com/cyu/rack-cors&#34;&gt;cyu&amp;rsquo;s Rack::Cors middleware&lt;/a&gt; is rather handy if want to control your &lt;a href=&#34;https://en.wikipedia.org/wiki/CORS&#34;&gt;CORS&lt;/a&gt; (Cross-Origin Resource Sharing) settings in a Ruby-on-Rails project. Previously, there was a fairly major issue where &lt;code&gt;:credentials =&amp;gt; true&lt;/code&gt; was the default (which you generally do not want), but there were also some more complicated tweaks that I wanted to make.&lt;/p&gt;

&lt;p&gt;One problem I recently had to deal with was wanting to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Allow CORS connections from arbitrary domains (this site functions as an API)&lt;/li&gt;
&lt;li&gt;Do not allow CORS from http domains at all&lt;/li&gt;
&lt;li&gt;Only allow cookies (&lt;code&gt;Access-Control-Allow-Credentials&lt;/code&gt;) to be sent for sibling subdomains&lt;/li&gt;
&lt;li&gt;Prevent cookies from being sent from specific sibling subdomains (that are actually run by a third party)&lt;/li&gt;
&lt;li&gt;On development (non-production) versions of the site, allow credentials from localhost&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>work-on: A Quick Script for Context Switching</title>
      <link>https://blog.jverkamp.com/2019/05/07/work-on-a-quick-script-for-context-switching/</link>
      <pubDate>Tue, 07 May 2019 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2019/05/07/work-on-a-quick-script-for-context-switching/</guid>
      <description>&lt;p&gt;I work on a lot of projects.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ ls ~/Projects/ | wc -l
      &lt;span style=&#34;color:#ae81ff&#34;&gt;29&lt;/span&gt;

$ ls ~/Projects/work/ | wc -l
      &lt;span style=&#34;color:#ae81ff&#34;&gt;67&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And that&amp;rsquo;s just what I have checked out at the moment. 😇&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Prevent JavaScript links by parsing URLs</title>
      <link>https://blog.jverkamp.com/2019/05/02/prevent-javascript-links-by-parsing-urls/</link>
      <pubDate>Thu, 02 May 2019 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2019/05/02/prevent-javascript-links-by-parsing-urls/</guid>
      <description>&lt;p&gt;If you have a website that allows users to submit URLs, one of the (many many) things people will try to do to break your site is to submit URLs that use the &lt;code&gt;javascript:&lt;/code&gt; protocol (rather than the more expected &lt;code&gt;http:&lt;/code&gt; or &lt;code&gt;https:&lt;/code&gt;). This is almost never something that you want, since it allows users to submit essentially arbitrary code that other users will run on click in the context of your domain (&lt;a href=&#34;https://en.wikipedia.org/wiki/same%20origin%20policy&#34;&gt;same origin policy&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;So how do you fix it?&lt;/p&gt;

&lt;p&gt;First thought would be to try to check the protocol:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;safe_url&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;url&lt;/span&gt;) =&amp;gt; &lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;url&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;match&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;/^javascript:/&lt;/span&gt;)
[Function&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;safe_url&lt;/span&gt;]

&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;safe_url&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;http://www.example.com&amp;#39;&lt;/span&gt;)
&lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;

&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;safe_url&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;javascript:alert(1)&amp;#39;&lt;/span&gt;)
&lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Forcing Secure Cookies Behind an ELB in Ruby/Rails</title>
      <link>https://blog.jverkamp.com/2019/04/30/forcing-secure-cookies-behind-an-elb-in-ruby/rails/</link>
      <pubDate>Tue, 30 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2019/04/30/forcing-secure-cookies-behind-an-elb-in-ruby/rails/</guid>
      <description>&lt;p&gt;As part of general security good practices, you should always (whenever possible):&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;use HTTPS to serve all requests&lt;/li&gt;
&lt;li&gt;serve redirects to upgrade HTTP requests to HTTPS&lt;/li&gt;
&lt;li&gt;set session cookies to &lt;code&gt;secure&lt;/code&gt; and &lt;code&gt;http_only&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;enable HTTP Strict Transport Security (&lt;code&gt;HSTS&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>Tiny Helper Scripts for Command Line MySQL</title>
      <link>https://blog.jverkamp.com/2019/04/27/tiny-helper-scripts-for-command-line-mysql/</link>
      <pubDate>Sat, 27 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2019/04/27/tiny-helper-scripts-for-command-line-mysql/</guid>
      <description>&lt;p&gt;Quite often, I&amp;rsquo;ll find myself wanting to query and manipulate MySQL data entirely on the command line. I could be building up a pipeline or working on a task that I&amp;rsquo;m going to eventually automate but haven&amp;rsquo;t quite gotten to yet. Whenver I have to do something like that, I have a small pile of scripts I&amp;rsquo;ve written over time that help out:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;skiphead&lt;/code&gt;: Skip the first line of output, used to skip over headers in a query response&lt;/li&gt;
&lt;li&gt;&lt;code&gt;skipuntil&lt;/code&gt;: Skip all lines until we see one matching a pattern, used to resume partial tasks&lt;/li&gt;
&lt;li&gt;&lt;code&gt;commaify&lt;/code&gt;: Take a list of single values on the command line and turn them into a comma separated list (for use in &lt;code&gt;IN&lt;/code&gt; clauses)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;csv2json&lt;/code&gt;: a &lt;a href=&#34;https://blog.jverkamp.com/2015/12/11/csv-to-json/&#34;&gt;previously posted&lt;/a&gt; script for converting csv/tab delimited output to json&lt;/li&gt;
&lt;li&gt;&lt;code&gt;jq&lt;/code&gt;: not my script, but used to take the output of csv2json and query it further in ways that would be complicated to do with SQL&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Admitedly, the first two of those are one liners and I could easily remember them, but the advantage of a single command that does it is tab completion. &lt;code&gt;sk&amp;lt;tab&amp;gt;&lt;/code&gt;, arrow to select which one I want, and off we go. I could put them as an alias, but I don&amp;rsquo;t always use the same shell (mostly &lt;a href=&#34;https://fishshell.com/&#34;&gt;fish&lt;/a&gt;, but sometimes Bash or Zsh).&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Listing and Downloading S3 Versions</title>
      <link>https://blog.jverkamp.com/2019/01/04/listing-and-downloading-s3-versions/</link>
      <pubDate>Fri, 04 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2019/01/04/listing-and-downloading-s3-versions/</guid>
      <description>&lt;p&gt;Today I found the need to look through all old versions of a file in S3 that had versioning turned on. You can do it through the AWS Console, but I prefer command line tools. You can do it with &lt;a href=&#34;https://aws.amazon.com/cli/&#34;&gt;awscli&lt;/a&gt;, but the flags are long and I can never quite remember them. So let&amp;rsquo;s write up a quick script using &lt;a href=&#34;https://boto3.amazonaws.com/v1/documentation/api/latest/index.html&#34;&gt;boto3&lt;/a&gt; (and as a bonus, try out &lt;a href=&#34;https://click.palletsprojects.com/en/7.x/&#34;&gt;click&lt;/a&gt;)!&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>AoC 2018 Day 14: Functionally Circular Elfs</title>
      <link>https://blog.jverkamp.com/2018/12/14/aoc-2018-day-14-functionally-circular-elfs/</link>
      <pubDate>Fri, 14 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2018/12/14/aoc-2018-day-14-functionally-circular-elfs/</guid>
      <description>&lt;h3 id=&#34;source-chocolate-charts-https-adventofcode-com-2018-day-14&#34;&gt;Source: &lt;a href=&#34;https://adventofcode.com/2018/day/14&#34;&gt;Chocolate Charts&lt;/a&gt;&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Part 1:&lt;/strong&gt; Create an infinite stream of numbers, by starting with [3, 7] with two pointers: 0 and 1. To add values to the list:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Add the current values of the two pointers

&lt;ul&gt;
&lt;li&gt;If the value is less than ten, add that value to the end of the list&lt;/li&gt;
&lt;li&gt;If the value is greater or equal to ten, add 1 and then the ones digits to the end of the list&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Update each pointer by adding the value it is pointing at to its current index plus one&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;With that algorithm, find the ten digits after a given index.&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>AoC 2018 Day 13: Mine Cart Madness</title>
      <link>https://blog.jverkamp.com/2018/12/13/aoc-2018-day-13-mine-cart-madness/</link>
      <pubDate>Thu, 13 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2018/12/13/aoc-2018-day-13-mine-cart-madness/</guid>
      <description>&lt;h3 id=&#34;source-mine-cart-madness-https-adventofcode-com-2018-day-13&#34;&gt;Source: &lt;a href=&#34;https://adventofcode.com/2018/day/13&#34;&gt;Mine Cart Madness&lt;/a&gt;&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Part 1:&lt;/strong&gt; Load a minecart track that looks like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/-&amp;gt;-\        
|   |  /----\
| /-+--+-\  |
| | |  | v  |
\-+-/  \-+--/
  \------/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Assuming minecarts follow the tracks and alternate turning left, going straight, and turning right on each intersection (&lt;code&gt;+&lt;/code&gt;), where does the first collision occur?&lt;/p&gt;

&lt;p&gt;NOTE: Update carts top to bottom, left to right. Carts can collide mid update.&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>AoC 2018 Day 12: Fat Cellular Automaton</title>
      <link>https://blog.jverkamp.com/2018/12/12/aoc-2018-day-12-fat-cellular-automaton/</link>
      <pubDate>Wed, 12 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2018/12/12/aoc-2018-day-12-fat-cellular-automaton/</guid>
      <description>&lt;h3 id=&#34;source-subterranean-sustainability-https-adventofcode-com-2018-day-12&#34;&gt;Source: &lt;a href=&#34;https://adventofcode.com/2018/day/12&#34;&gt;Subterranean Sustainability&lt;/a&gt;&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Part 1:&lt;/strong&gt; Create an infinite 2D &lt;a href=&#34;https://en.wikipedia.org/wiki/cellular%20automaton&#34;&gt;cellular automaton&lt;/a&gt; with transition rules based on two points to each side, starting with initial state at index 0 to the right.&lt;/p&gt;

&lt;p&gt;After 20 generations, what is the sum of indexes of points turned on?&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>AoC 2018 Day 11: Gridlocked Fuel</title>
      <link>https://blog.jverkamp.com/2018/12/11/aoc-2018-day-11-gridlocked-fuel/</link>
      <pubDate>Tue, 11 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2018/12/11/aoc-2018-day-11-gridlocked-fuel/</guid>
      <description>&lt;h3 id=&#34;source-chronal-charge-https-adventofcode-com-2018-day-11&#34;&gt;Source: &lt;a href=&#34;https://adventofcode.com/2018/day/11&#34;&gt;Chronal Charge&lt;/a&gt;&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Part 1:&lt;/strong&gt; Define a grid as follows (x,y coordinates + a constant C):&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;latex-inline&#34;&gt;r(x) = x &amp;#43; 10&lt;/span&gt;
&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;latex-inline&#34;&gt;G(x, y) = hundreds(r(x) * (r(x) * y &amp;#43; C)) - 5&lt;/span&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Find the 3x3 area in a 300x300 grid with the highest total &lt;span class=&#34;latex-inline&#34;&gt;G(x, y)&lt;/span&gt;
.&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>AoC 2018 Day 10: It&#39;s Full of Stars!</title>
      <link>https://blog.jverkamp.com/2018/12/10/aoc-2018-day-10-its-full-of-stars/</link>
      <pubDate>Mon, 10 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2018/12/10/aoc-2018-day-10-its-full-of-stars/</guid>
      <description>&lt;h3 id=&#34;source-the-stars-align-https-adventofcode-com-2018-day-10&#34;&gt;Source: &lt;a href=&#34;https://adventofcode.com/2018/day/10&#34;&gt;The Stars Align&lt;/a&gt;&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Part 1:&lt;/strong&gt; Given a system of moving particles (with position and velocity) find the point where the particles spell a message. What is that message?&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>AoC 2018 Day 9: Marble Madness</title>
      <link>https://blog.jverkamp.com/2018/12/09/aoc-2018-day-9-marble-madness/</link>
      <pubDate>Sun, 09 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2018/12/09/aoc-2018-day-9-marble-madness/</guid>
      <description>&lt;h3 id=&#34;source-marble-mania-https-adventofcode-com-2018-day-9&#34;&gt;Source: &lt;a href=&#34;https://adventofcode.com/2018/day/9&#34;&gt;Marble Mania&lt;/a&gt;&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Part 1:&lt;/strong&gt; Place marbles in a circle such that each marble is placed by skipping one place &lt;em&gt;except&lt;/em&gt; for marbles divisible by 23. For those, don&amp;rsquo;t place them, skip back 7 places, and remove that marble as well. Add these two marbles to your current score.&lt;/p&gt;

&lt;p&gt;Given a specific player count and last marble, what&amp;rsquo;s the highest score?&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>AoC 2018 Day 8: Checksum Treeification</title>
      <link>https://blog.jverkamp.com/2018/12/08/aoc-2018-day-8-checksum-treeification/</link>
      <pubDate>Sat, 08 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2018/12/08/aoc-2018-day-8-checksum-treeification/</guid>
      <description>&lt;h3 id=&#34;source-the-sum-of-its-parts-https-adventofcode-com-2018-day-8&#34;&gt;Source: &lt;a href=&#34;https://adventofcode.com/2018/day/8&#34;&gt;The Sum of Its Parts&lt;/a&gt;&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Part 1:&lt;/strong&gt; A custom tree data structure is defined as:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;child count&lt;/li&gt;
&lt;li&gt;metadata count&lt;/li&gt;
&lt;li&gt;&lt;code&gt;child count&lt;/code&gt; additional subtrees (recursive)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;metadata count&lt;/code&gt; metadata nodes&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Calculate the sum of all metadata nodes.&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>AoC 2018 Day 7: Job Simulator</title>
      <link>https://blog.jverkamp.com/2018/12/07/aoc-2018-day-7-job-simulator/</link>
      <pubDate>Fri, 07 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2018/12/07/aoc-2018-day-7-job-simulator/</guid>
      <description>&lt;h3 id=&#34;source-the-sum-of-its-parts-https-adventofcode-com-2018-day-7&#34;&gt;Source: &lt;a href=&#34;https://adventofcode.com/2018/day/7&#34;&gt;The Sum of Its Parts&lt;/a&gt;&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Part 1:&lt;/strong&gt; Given a list of job dependencies (job A must be before job B), determine the order jobs must be done in. Break ties lexicographically.&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>AoC 2018 Day 6: Infinite Area Simulator</title>
      <link>https://blog.jverkamp.com/2018/12/06/aoc-2018-day-6-infinite-area-simulator/</link>
      <pubDate>Thu, 06 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2018/12/06/aoc-2018-day-6-infinite-area-simulator/</guid>
      <description>&lt;h3 id=&#34;source-chronal-coordinates-https-adventofcode-com-2018-day-6&#34;&gt;Source: &lt;a href=&#34;https://adventofcode.com/2018/day/6&#34;&gt;Chronal Coordinates&lt;/a&gt;&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Part 1:&lt;/strong&gt; Given a list of points, calculate the region of points closest to each point (using &lt;a href=&#34;https://en.wikipedia.org/wiki/Manhattan%20distance&#34;&gt;Manhattan distance&lt;/a&gt;). Return the size of the largest non-infinite region.&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>AoC 2018 Day 5: Alchemical reduction</title>
      <link>https://blog.jverkamp.com/2018/12/05/aoc-2018-day-5-alchemical-reduction/</link>
      <pubDate>Wed, 05 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2018/12/05/aoc-2018-day-5-alchemical-reduction/</guid>
      <description>&lt;h3 id=&#34;source-alchemical-reduction-https-adventofcode-com-2018-day-5&#34;&gt;Source: &lt;a href=&#34;https://adventofcode.com/2018/day/5&#34;&gt;Alchemical Reduction&lt;/a&gt;&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Part 1:&lt;/strong&gt; Given a string, reduce it by removing pairs of letters that are the same letter but different cases. Repeat until you have a minimal string.&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>AoC 2018 Day 4: Sleeping on the job</title>
      <link>https://blog.jverkamp.com/2018/12/04/aoc-2018-day-4-sleeping-on-the-job/</link>
      <pubDate>Tue, 04 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2018/12/04/aoc-2018-day-4-sleeping-on-the-job/</guid>
      <description>&lt;h3 id=&#34;source-repose-record-https-adventofcode-com-2018-day-4&#34;&gt;Source: &lt;a href=&#34;https://adventofcode.com/2018/day/4&#34;&gt;Repose Record&lt;/a&gt;&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Part 1:&lt;/strong&gt; Given a log of guard shifts and times asleep/awake, calculate the guard that was asleep most often and which minute they were most asleep for.&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
  </channel>
</rss>