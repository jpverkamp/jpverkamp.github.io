<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Programming on jverkamp.com</title><link>https://blog.jverkamp.com/programming/</link><description>Recent content in Programming on jverkamp.com</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Fri, 07 Feb 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://blog.jverkamp.com/programming/atom.xml" rel="self" type="application/rss+xml"/><item><title>WebCrypto SHA-256 HMAC</title><link>https://blog.jverkamp.com/2025/02/05/webcrypto-sha-256-hmac/</link><pubDate>Wed, 05 Feb 2025 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2025/02/05/webcrypto-sha-256-hmac/</guid><description>&lt;p>A quick random thing I learned that I found helpful (and you might too!):&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">async&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">hmac&lt;/span>(&lt;span style="color:#a6e22e">text&lt;/span>, &lt;span style="color:#a6e22e">secret&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">let&lt;/span> &lt;span style="color:#a6e22e">enc&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> &lt;span style="color:#a6e22e">TextEncoder&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;utf-8&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">let&lt;/span> &lt;span style="color:#a6e22e">algorithm&lt;/span> &lt;span style="color:#f92672">=&lt;/span> { &lt;span style="color:#a6e22e">name&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#34;HMAC&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">hash&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#34;SHA-256&amp;#34;&lt;/span> };
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">let&lt;/span> &lt;span style="color:#a6e22e">key&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">await&lt;/span> &lt;span style="color:#a6e22e">crypto&lt;/span>.&lt;span style="color:#a6e22e">subtle&lt;/span>.&lt;span style="color:#a6e22e">importKey&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;raw&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">enc&lt;/span>.&lt;span style="color:#a6e22e">encode&lt;/span>(&lt;span style="color:#a6e22e">secret&lt;/span>), &lt;span style="color:#a6e22e">algorithm&lt;/span>, &lt;span style="color:#66d9ef">false&lt;/span>, [&lt;span style="color:#e6db74">&amp;#34;sign&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;verify&amp;#34;&lt;/span>]);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">let&lt;/span> &lt;span style="color:#a6e22e">signature&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">await&lt;/span> &lt;span style="color:#a6e22e">crypto&lt;/span>.&lt;span style="color:#a6e22e">subtle&lt;/span>.&lt;span style="color:#a6e22e">sign&lt;/span>(&lt;span style="color:#a6e22e">algorithm&lt;/span>.&lt;span style="color:#a6e22e">name&lt;/span>, &lt;span style="color:#a6e22e">key&lt;/span>, &lt;span style="color:#a6e22e">enc&lt;/span>.&lt;span style="color:#a6e22e">encode&lt;/span>(&lt;span style="color:#a6e22e">text&lt;/span>));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">let&lt;/span> &lt;span style="color:#a6e22e">digest&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">btoa&lt;/span>(String.&lt;span style="color:#a6e22e">fromCharCode&lt;/span>(...&lt;span style="color:#66d9ef">new&lt;/span> &lt;span style="color:#a6e22e">Uint8Array&lt;/span>(&lt;span style="color:#a6e22e">signature&lt;/span>)));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">digest&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This is a function that uses the &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Web_Crypto_API" target="_blank" rel="noopener">Web Crypto API&lt;/a> to calculate a &lt;a href="https://en.wikipedia.org/wiki/SHA-256">SHA-256&lt;/a> &lt;a href="https://en.wikipedia.org/wiki/HMAC">HMAC&lt;/a> of a string given a secret value.&lt;/p>
&lt;p>I mostly worked this out so that I could figure out how &lt;em>exactly&lt;/em> &lt;code>TextEncoder&lt;/code> worked, along with &lt;code>importKey&lt;/code> (to turn a secret into proper key material) and also how to convert that back into a hex digest.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">&amp;gt;&amp;gt;&lt;/span> &lt;span style="color:#66d9ef">await&lt;/span> &lt;span style="color:#a6e22e">hmac&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;lorem ipsum&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;super secret&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">&amp;#34;qArFX93Zi83ccIayhYnuFDpd4pk3eB4rZYDvNteobSU=&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">&amp;gt;&amp;gt;&lt;/span> &lt;span style="color:#66d9ef">await&lt;/span> &lt;span style="color:#a6e22e">hmac&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;lorem ipsum doler sit amet&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;super secret&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">&amp;#34;klTAioH5nNkguNhU2YcJshaZZtJW9DEb+MTqz4NWq8E=&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">&amp;gt;&amp;gt;&lt;/span> &lt;span style="color:#66d9ef">await&lt;/span> &lt;span style="color:#a6e22e">hmac&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;lorem ipsum&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;even more super secret!&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">&amp;#34;RoQLg2uz5KWLMJM72VExH5gZOls5bdZZyzHi678eDWs=&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">&amp;gt;&amp;gt;&lt;/span> &lt;span style="color:#66d9ef">await&lt;/span> &lt;span style="color:#a6e22e">hmac&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;lorem ipsum&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;super secret&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">&amp;#34;qArFX93Zi83ccIayhYnuFDpd4pk3eB4rZYDvNteobSU=&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Disclaimer: This totally counts as rolling your own crypto. Don&amp;rsquo;t do this unless you know what you&amp;rsquo;re doing. ðŸ˜„&lt;/p>
&lt;p>Disclaimer disclaimer: I only rarely know what I&amp;rsquo;m doing. ðŸ˜„ ðŸ˜„&lt;/p>
&lt;p>Also, for what it&amp;rsquo;s worth, this is equivalent to the Python standard libraries&amp;rsquo; &lt;code>&lt;a href="https://docs.python.org/3/search.html?q=hmac">hmac&lt;/a>&lt;/code>
+ &lt;code>&lt;a href="https://docs.python.org/3/search.html?q=base64">base64&lt;/a>&lt;/code>
:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">&amp;gt;&amp;gt;&amp;gt;&lt;/span> base64&lt;span style="color:#f92672">.&lt;/span>b64encode(hmac&lt;span style="color:#f92672">.&lt;/span>digest(&lt;span style="color:#e6db74">b&lt;/span>&lt;span style="color:#e6db74">&amp;#39;super secret&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">b&lt;/span>&lt;span style="color:#e6db74">&amp;#39;lorem ipsum&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;SHA256&amp;#39;&lt;/span>))&lt;span style="color:#f92672">.&lt;/span>decode()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">&amp;#39;qArFX93Zi83ccIayhYnuFDpd4pk3eB4rZYDvNteobSU=&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Freshly (Frosted) Solved</title><link>https://blog.jverkamp.com/2025/01/23/freshly-frosted-solved/</link><pubDate>Thu, 23 Jan 2025 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2025/01/23/freshly-frosted-solved/</guid><description>And so it begins.
Freshly Frosted
It&amp;rsquo;s a cute little puzzle game about making a donut factory.
It&amp;rsquo;s a lot like Solving Cosmic Express in that it&amp;rsquo;s a &amp;lsquo;puzzle on rails&amp;rsquo;, you are basically routing around the grid from source to target. In the way, we have to go to certain tiles in a certain order (in this case, to apply toppings to our donuts).
Let&amp;rsquo;s do it!
The first section (starting with Basic layout) is the final state of the solution.</description></item><item><title>AoC 2024 Day 25: Christmas Lockpickinator</title><link>https://blog.jverkamp.com/2024/12/25/aoc-2024-day-25-christmas-lockpickinator/</link><pubDate>Wed, 25 Dec 2024 00:00:03 +0000</pubDate><guid>https://blog.jverkamp.com/2024/12/25/aoc-2024-day-25-christmas-lockpickinator/</guid><description>&lt;h2 id="source-day-25-code-chroniclehttpsadventofcodecom2024day25">Source: &lt;a href="https://adventofcode.com/2024/day/25" target="_blank" rel="noopener">Day 25: Code Chronicle&lt;/a>&lt;/h2>
&lt;p>&lt;a href="https://github.com/jpverkamp/advent-of-code/blob/master/2024/src/day25.rs" target="_blank" rel="noopener">Full solution&lt;/a> for today (spoilers!).&lt;/p>
&lt;nav id="TableOfContents">
&lt;ul>
&lt;li>&lt;a href="#source-day-25-code-chroniclehttpsadventofcodecom2024day25">Source: &lt;a href="https://adventofcode.com/2024/day/25">Day 25: Code Chronicle&lt;/a>&lt;/a>&lt;/li>
&lt;li>&lt;a href="#part-1">Part 1&lt;/a>&lt;/li>
&lt;li>&lt;a href="#part-2">Part 2&lt;/a>&lt;/li>
&lt;li>&lt;a href="#benchmarks">Benchmarks&lt;/a>&lt;/li>
&lt;/ul>
&lt;/nav>
&lt;h2 id="part-1">Part 1&lt;/h2>
&lt;blockquote>
&lt;p>You are given a series of locks and keys (see below). How many unique &lt;code>(lock, key)&lt;/code> are there that do not overlap (they do not have to fit perfectly).&lt;/p>
&lt;p>A lock starts from the top. The entire top row is &lt;code>#&lt;/code> and the entire bottom row is &lt;code>.&lt;/code>.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-text" data-lang="text">&lt;span style="display:flex;">&lt;span>#####
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>.####
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>.####
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>.####
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>.#.#.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>.#...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>.....
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>A key is the opposite:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-text" data-lang="text">&lt;span style="display:flex;">&lt;span>.....
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>.....
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>.....
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>#....
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>#.#..
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>#.#.#
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>#####
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/blockquote></description></item><item><title>AoC 2024 Day 24: Ripple Carrinator</title><link>https://blog.jverkamp.com/2024/12/24/aoc-2024-day-24-ripple-carrinator/</link><pubDate>Tue, 24 Dec 2024 00:00:03 +0000</pubDate><guid>https://blog.jverkamp.com/2024/12/24/aoc-2024-day-24-ripple-carrinator/</guid><description>&lt;h2 id="source-day-24-crossed-wireshttpsadventofcodecom2024day24">Source: &lt;a href="https://adventofcode.com/2024/day/24" target="_blank" rel="noopener">Day 24: Crossed Wires&lt;/a>&lt;/h2>
&lt;p>&lt;a href="https://github.com/jpverkamp/advent-of-code/blob/master/2024/src/day24.rs" target="_blank" rel="noopener">Full solution&lt;/a> for today (spoilers!).&lt;/p>
&lt;nav id="TableOfContents">
&lt;ul>
&lt;li>&lt;a href="#source-day-24-crossed-wireshttpsadventofcodecom2024day24">Source: &lt;a href="https://adventofcode.com/2024/day/24">Day 24: Crossed Wires&lt;/a>&lt;/a>&lt;/li>
&lt;li>&lt;a href="#part-1">Part 1&lt;/a>&lt;/li>
&lt;li>&lt;a href="#part-2">Part 2&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#brute-force">Brute force&lt;/a>&lt;/li>
&lt;li>&lt;a href="#visualizing-the-problem">Visualizing the problem&lt;/a>&lt;/li>
&lt;li>&lt;a href="#actually-solving-it">Actually solving it&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#benchmarks">Benchmarks&lt;/a>&lt;/li>
&lt;/ul>
&lt;/nav>
&lt;h2 id="part-1">Part 1&lt;/h2>
&lt;blockquote>
&lt;p>Given a collection of gates of the form &lt;code>arg0 (AND|OR|XOR) arg2 -&amp;gt; out&lt;/code> and input values of form &lt;code>x**&lt;/code> and &lt;code>y**&lt;/code>, what is the value of &lt;code>z**&lt;/code> interpreted as a binary number?&lt;/p>
&lt;/blockquote></description></item><item><title>AoC 2024 Day 23: LAN Partinator</title><link>https://blog.jverkamp.com/2024/12/23/aoc-2024-day-23-lan-partinator/</link><pubDate>Mon, 23 Dec 2024 00:00:03 +0000</pubDate><guid>https://blog.jverkamp.com/2024/12/23/aoc-2024-day-23-lan-partinator/</guid><description>&lt;h2 id="source-day-23-lan-partyhttpsadventofcodecom2024day23">Source: &lt;a href="https://adventofcode.com/2024/day/23" target="_blank" rel="noopener">Day 23: LAN Party&lt;/a>&lt;/h2>
&lt;p>&lt;a href="https://github.com/jpverkamp/advent-of-code/blob/master/2024/src/day23.rs" target="_blank" rel="noopener">Full solution&lt;/a> for today (spoilers!).&lt;/p>
&lt;nav id="TableOfContents">
&lt;ul>
&lt;li>&lt;a href="#source-day-23-lan-partyhttpsadventofcodecom2024day23">Source: &lt;a href="https://adventofcode.com/2024/day/23">Day 23: LAN Party&lt;/a>&lt;/a>&lt;/li>
&lt;li>&lt;a href="#part-1">Part 1&lt;/a>&lt;/li>
&lt;li>&lt;a href="#part-2">Part 2&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#corrected-version-1-largest-completely-connected">Corrected version 1: Largest completely connected&lt;/a>&lt;/li>
&lt;li>&lt;a href="#corrected-version-2-recursion--memoization">Corrected version 2: Recursion + memoization&lt;/a>&lt;/li>
&lt;li>&lt;a href="#corrected-version-3-ordering-by-most-connected-nodes">Corrected version 3: Ordering by most connected nodes&lt;/a>&lt;/li>
&lt;li>&lt;a href="#this-is-stupid">This is stupid&amp;hellip;&lt;/a>&lt;/li>
&lt;li>&lt;a href="#and-complicated">&amp;hellip;and complicated&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#benchmarks">Benchmarks&lt;/a>&lt;/li>
&lt;/ul>
&lt;/nav>
&lt;h2 id="part-1">Part 1&lt;/h2>
&lt;blockquote>
&lt;p>You are given the edges of an &lt;a href="https://en.wikipedia.org/wiki/undirected%20graph">undirected graph&lt;/a>. Count how many &lt;a href="https://en.wikipedia.org/wiki/complete%20graph">complete&lt;/a> &lt;a href="https://en.wikipedia.org/wiki/subgraphs">subgraphs&lt;/a> of size three exist that contain one or more starting with the letter &lt;code>t&lt;/code>.&lt;/p>
&lt;/blockquote>
&lt;p>Aside: Games with local (but not hotseat) multiplayer have gotten rather rarer over the years&amp;hellip; how many people still know what a &lt;a href="https://en.wikipedia.org/wiki/LAN%20party">LAN party&lt;/a> is/was?&lt;/p></description></item><item><title>AoC 2024 Day 22: Xorshiftinator</title><link>https://blog.jverkamp.com/2024/12/22/aoc-2024-day-22-xorshiftinator/</link><pubDate>Sun, 22 Dec 2024 00:00:03 +0000</pubDate><guid>https://blog.jverkamp.com/2024/12/22/aoc-2024-day-22-xorshiftinator/</guid><description>&lt;h2 id="source-day-22-monkey-markethttpsadventofcodecom2024day22">Source: &lt;a href="https://adventofcode.com/2024/day/22" target="_blank" rel="noopener">Day 22: Monkey Market&lt;/a>&lt;/h2>
&lt;p>&lt;a href="https://github.com/jpverkamp/advent-of-code/blob/master/2024/src/day22.rs" target="_blank" rel="noopener">Full solution&lt;/a> for today (spoilers!).&lt;/p>
&lt;nav id="TableOfContents">
&lt;ul>
&lt;li>&lt;a href="#source-day-22-monkey-markethttpsadventofcodecom2024day22">Source: &lt;a href="https://adventofcode.com/2024/day/22">Day 22: Monkey Market&lt;/a>&lt;/a>&lt;/li>
&lt;li>&lt;a href="#part-1">Part 1&lt;/a>&lt;/li>
&lt;li>&lt;a href="#part-2">Part 2&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#brute-force">Brute force&lt;/a>&lt;/li>
&lt;li>&lt;a href="#scan-for-sequence-scores">Scan for sequence scores&lt;/a>&lt;/li>
&lt;li>&lt;a href="#packing-a-single-u32-instead-of-a-vecdeque">Packing a single &lt;code>u32&lt;/code> instead of a &lt;code>VecDeque&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="#visualizations">Visualizations&lt;/a>&lt;/li>
&lt;li>&lt;a href="#ones-stats">Ones stats&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#benchmarks">Benchmarks&lt;/a>&lt;/li>
&lt;/ul>
&lt;/nav>
&lt;h2 id="part-1">Part 1&lt;/h2>
&lt;blockquote>
&lt;p>Implement a &lt;a href="https://en.wikipedia.org/wiki/PRNG">PRNG&lt;/a> with the following update function:&lt;/p>
&lt;ol>
&lt;li>Multiply by 64, xor with the previous value, &lt;a href="https://en.wikipedia.org/wiki/modulo">modulo&lt;/a> 16777216&lt;/li>
&lt;li>Divide by 32, xor with the previous value (from step 1), modulo 16777216&lt;/li>
&lt;li>Multiply by 2048, xor with the previous value (from step 2), module 16777216&lt;/li>
&lt;/ol>
&lt;p>For each of a series of seeds, sum the 2000th generated number.&lt;/p>
&lt;/blockquote></description></item><item><title>AoC 2024 Day 21: Busy Workinator</title><link>https://blog.jverkamp.com/2024/12/21/aoc-2024-day-21-busy-workinator/</link><pubDate>Sat, 21 Dec 2024 00:00:03 +0000</pubDate><guid>https://blog.jverkamp.com/2024/12/21/aoc-2024-day-21-busy-workinator/</guid><description>&lt;h2 id="source-day-21-keypad-conundrumhttpsadventofcodecom2024day21">Source: &lt;a href="https://adventofcode.com/2024/day/21" target="_blank" rel="noopener">Day 21: Keypad Conundrum&lt;/a>&lt;/h2>
&lt;p>&lt;a href="https://github.com/jpverkamp/advent-of-code/blob/master/2024/src/day21.rs" target="_blank" rel="noopener">Full solution&lt;/a> for today (spoilers!).&lt;/p>
&lt;nav id="TableOfContents">
&lt;ul>
&lt;li>&lt;a href="#source-day-21-keypad-conundrumhttpsadventofcodecom2024day21">Source: &lt;a href="https://adventofcode.com/2024/day/21">Day 21: Keypad Conundrum&lt;/a>&lt;/a>&lt;/li>
&lt;li>&lt;a href="#part-1">Part 1&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#failed-version-1-way-over-engineered">(Failed) Version 1: Way over engineered&lt;/a>&lt;/li>
&lt;li>&lt;a href="#version-2-direct-simulation">Version 2: Direct simulation&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#part-2">Part 2&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#memoization">Memoization&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#benchmarks">Benchmarks&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#tracing">Tracing&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/nav>
&lt;h2 id="part-1">Part 1&lt;/h2>
&lt;blockquote>
&lt;p>You are trying to type a code on a keypad:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-text" data-lang="text">&lt;span style="display:flex;">&lt;span>+---+---+---+
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>| 7 | 8 | 9 |
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>+---+---+---+
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>| 4 | 5 | 6 |
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>+---+---+---+
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>| 1 | 2 | 3 |
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>+---+---+---+
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> | 0 | A |
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> +---+---+
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>But you cannot type directly. Instead, you can control a pointer on the keypad with arrow keys:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-text" data-lang="text">&lt;span style="display:flex;">&lt;span> +---+---+
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> | ^ | A |
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>+---+---+---+
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>| &amp;lt; | v | &amp;gt; |
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>+---+---+---+
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Whenever you type a &lt;code>^&lt;/code> on the arrow keys, the pointer on the keypad will move up one, etc. When you type &lt;code>A&lt;/code>, then the pointer on the keypad will type whatever it is pointing at.&lt;/p>
&lt;p>But that&amp;rsquo;s not enough either. Add a second keypad. And then a third, that is the one you are actually controlling.&lt;/p>
&lt;p>For each output sequence multiple the length of the minimum input sequence needed to generate it by the numeric value of the input sequence (ignoring any &lt;code>A&lt;/code>); sum these.&lt;/p>
&lt;p>Note: Moving off any keypad or into the blank spaces is an error.&lt;/p>
&lt;/blockquote></description></item><item><title>AoC 2024 Day 20: Shadow Catinator</title><link>https://blog.jverkamp.com/2024/12/20/aoc-2024-day-20-shadow-catinator/</link><pubDate>Fri, 20 Dec 2024 00:00:03 +0000</pubDate><guid>https://blog.jverkamp.com/2024/12/20/aoc-2024-day-20-shadow-catinator/</guid><description>&lt;h2 id="source-day-20-race-conditionhttpsadventofcodecom2024day20">Source: &lt;a href="https://adventofcode.com/2024/day/20" target="_blank" rel="noopener">Day 20: Race Condition&lt;/a>&lt;/h2>
&lt;p>&lt;a href="https://github.com/jpverkamp/advent-of-code/blob/master/2024/src/day20.rs" target="_blank" rel="noopener">Full solution&lt;/a> for today (spoilers!).&lt;/p>
&lt;nav id="TableOfContents">
&lt;ul>
&lt;li>&lt;a href="#source-day-20-race-conditionhttpsadventofcodecom2024day20">Source: &lt;a href="https://adventofcode.com/2024/day/20">Day 20: Race Condition&lt;/a>&lt;/a>&lt;/li>
&lt;li>&lt;a href="#part-1">Part 1&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#version-1-entirely-over-complicated">Version 1: Entirely over complicated&amp;hellip;&lt;/a>&lt;/li>
&lt;li>&lt;a href="#version-2-floodfill">Version 2: Floodfill&lt;/a>&lt;/li>
&lt;li>&lt;a href="#version-3-directly-scan-along-the-path">Version 3: Directly scan along the path&lt;/a>&lt;/li>
&lt;li>&lt;a href="#optimization-1-calculate-distances-once-dijkstras-algorithm">Optimization 1: Calculate distances once (Dijkstra&amp;rsquo;s algorithm)&lt;/a>&lt;/li>
&lt;li>&lt;a href="#optimization-2-store-distances-in-a-grid">Optimization 2: Store distances in a &lt;code>Grid&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="#pretty-pictures">Pretty pictures&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#part-2">Part 2&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#optimization-3-store-distances-in-a-grid">Optimization 3: Store distances in a &lt;code>Grid&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="#optimization-4-inverting-the-loop">Optimization 4: Inverting the loop&lt;/a>&lt;/li>
&lt;li>&lt;a href="#prettier-pictures">Prettier pictures&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#benchmarks">Benchmarks&lt;/a>&lt;/li>
&lt;/ul>
&lt;/nav>
&lt;h2 id="part-1">Part 1&lt;/h2>
&lt;blockquote>
&lt;p>Given a maze with exactly one path, find how many single walls you can walk through (remove) that shorten the best path by at least 100 units.&lt;/p>
&lt;/blockquote></description></item><item><title>AoC 2024 Day 19: Regexinator</title><link>https://blog.jverkamp.com/2024/12/19/aoc-2024-day-19-regexinator/</link><pubDate>Thu, 19 Dec 2024 00:00:03 +0000</pubDate><guid>https://blog.jverkamp.com/2024/12/19/aoc-2024-day-19-regexinator/</guid><description>&lt;h2 id="source-day-19-linen-layouthttpsadventofcodecom2024day19">Source: &lt;a href="https://adventofcode.com/2024/day/19" target="_blank" rel="noopener">Day 19: Linen Layout&lt;/a>&lt;/h2>
&lt;p>&lt;a href="https://github.com/jpverkamp/advent-of-code/blob/master/2024/src/day19.rs" target="_blank" rel="noopener">Full solution&lt;/a> for today (spoilers!).&lt;/p>
&lt;nav id="TableOfContents">
&lt;ul>
&lt;li>&lt;a href="#source-day-19-linen-layouthttpsadventofcodecom2024day19">Source: &lt;a href="https://adventofcode.com/2024/day/19">Day 19: Linen Layout&lt;/a>&lt;/a>&lt;/li>
&lt;li>&lt;a href="#part-1">Part 1&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#lets-write-it-ourselves-backtracking">Let&amp;rsquo;s write it ourselves: Backtracking&lt;/a>&lt;/li>
&lt;li>&lt;a href="#optimization-1-simplified-backtracking">Optimization 1: Simplified backtracking&lt;/a>&lt;/li>
&lt;li>&lt;a href="#optimization-2-memoization">Optimization 2: Memoization&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#part-2">Part 2&lt;/a>&lt;/li>
&lt;li>&lt;a href="#benchmarks">Benchmarks&lt;/a>&lt;/li>
&lt;/ul>
&lt;/nav>
&lt;h2 id="part-1">Part 1&lt;/h2>
&lt;blockquote>
&lt;p>Given a comma delimited list of substrings and a list of strings, count how many of the latter strings can be made up of any (repeating) combination of the former.&lt;/p>
&lt;/blockquote></description></item><item><title>AoC 2024 Day 18: Last Chancinator</title><link>https://blog.jverkamp.com/2024/12/18/aoc-2024-day-18-last-chancinator/</link><pubDate>Wed, 18 Dec 2024 00:00:03 +0000</pubDate><guid>https://blog.jverkamp.com/2024/12/18/aoc-2024-day-18-last-chancinator/</guid><description>&lt;h2 id="source-day-18-ram-runhttpsadventofcodecom2024day18">Source: &lt;a href="https://adventofcode.com/2024/day/18" target="_blank" rel="noopener">Day 18: RAM Run&lt;/a>&lt;/h2>
&lt;p>&lt;a href="https://github.com/jpverkamp/advent-of-code/blob/master/2024/src/day18.rs" target="_blank" rel="noopener">Full solution&lt;/a> for today (spoilers!).&lt;/p>
&lt;nav id="TableOfContents">
&lt;ul>
&lt;li>&lt;a href="#source-day-18-ram-runhttpsadventofcodecom2024day18">Source: &lt;a href="https://adventofcode.com/2024/day/18">Day 18: RAM Run&lt;/a>&lt;/a>&lt;/li>
&lt;li>&lt;a href="#part-1">Part 1&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#optimization-1-using-grid">Optimization 1: Using &lt;code>Grid&lt;/code>&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#part-2">Part 2&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#optimization-2-two-neighbors">Optimization 2: Two neighbors&lt;/a>&lt;/li>
&lt;li>&lt;a href="#optimization-3-using-grid">Optimization 3: Using &lt;code>Grid&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="#optimization-4-on-the-best-path">Optimization 4: On the best path&lt;/a>&lt;/li>
&lt;li>&lt;a href="#optimization-5-binary-search">Optimization 5: Binary search&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#benchmarks">Benchmarks&lt;/a>&lt;/li>
&lt;/ul>
&lt;/nav>
&lt;h2 id="part-1">Part 1&lt;/h2>
&lt;blockquote>
&lt;p>You are given a series of points on a &lt;code>71x71&lt;/code> grid. Taking only the first 1024 points, how long is the shortest path from &lt;code>(0, 0)&lt;/code> to &lt;code>(70, 70)&lt;/code>?&lt;/p>
&lt;/blockquote></description></item><item><title>AoC 2024 Day 17: Virtual Machininator</title><link>https://blog.jverkamp.com/2024/12/17/aoc-2024-day-17-virtual-machininator/</link><pubDate>Tue, 17 Dec 2024 00:00:03 +0000</pubDate><guid>https://blog.jverkamp.com/2024/12/17/aoc-2024-day-17-virtual-machininator/</guid><description>&lt;h2 id="source-day-17-chronospatial-computerhttpsadventofcodecom2024day17">Source: &lt;a href="https://adventofcode.com/2024/day/17" target="_blank" rel="noopener">Day 17: Chronospatial Computer&lt;/a>&lt;/h2>
&lt;p>&lt;a href="https://github.com/jpverkamp/advent-of-code/blob/master/2024/src/day17.rs" target="_blank" rel="noopener">Full solution&lt;/a> for today (spoilers!).&lt;/p>
&lt;nav id="TableOfContents">
&lt;ul>
&lt;li>&lt;a href="#source-day-17-chronospatial-computerhttpsadventofcodecom2024day17">Source: &lt;a href="https://adventofcode.com/2024/day/17">Day 17: Chronospatial Computer&lt;/a>&lt;/a>&lt;/li>
&lt;li>&lt;a href="#part-1">Part 1&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#instructions">Instructions&lt;/a>&lt;/li>
&lt;li>&lt;a href="#parameter-specification">Parameter specification&lt;/a>&lt;/li>
&lt;li>&lt;a href="#unit-tests">Unit tests&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#part-2">Part 2&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#so-what-is-our-program-actually-doing">So what is our program actually doing?&lt;/a>&lt;/li>
&lt;li>&lt;a href="#psuedo-code-hash">Psuedo-code hash&lt;/a>&lt;/li>
&lt;li>&lt;a href="#whats-actually-changing">What&amp;rsquo;s actually changing?&lt;/a>&lt;/li>
&lt;li>&lt;a href="#zero-guarantees">Zero guarantees&lt;/a>&lt;/li>
&lt;li>&lt;a href="#the-actual-answer">The actual answer&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#benchmarks">Benchmarks&lt;/a>&lt;/li>
&lt;/ul>
&lt;/nav>
&lt;h2 id="part-1">Part 1&lt;/h2>
&lt;blockquote>
&lt;p>Implement a virtual machine. The machine will have 3 unbounded signed registers, 8 opcodes (see below), a variable parameter scheme (see below that). You will be given the initial values of the 3 registers and a program. Find the final output.&lt;/p>
&lt;/blockquote>
&lt;h3 id="instructions">Instructions&lt;/h3>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Opcode&lt;/th>
&lt;th>Instruction&lt;/th>
&lt;th>Description&lt;/th>
&lt;th>Notes&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>0&lt;/td>
&lt;td>&lt;code>adv reg/val&lt;/code>&lt;/td>
&lt;td>&lt;code>A = A &amp;gt;&amp;gt; OP&lt;/code>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>1&lt;/td>
&lt;td>&lt;code>bxl val&lt;/code>&lt;/td>
&lt;td>&lt;code>B = B ^ OP&lt;/code>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>2&lt;/td>
&lt;td>&lt;code>bst reg/val&lt;/code>&lt;/td>
&lt;td>&lt;code>B = OP &amp;amp; 0b111&lt;/code>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>3&lt;/td>
&lt;td>&lt;code>jnz val&lt;/code>&lt;/td>
&lt;td>If &lt;code>a =/= 0&lt;/code>, jump to &lt;code>LIT&lt;/code>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>4&lt;/td>
&lt;td>&lt;code>bxc ignore&lt;/code>&lt;/td>
&lt;td>&lt;code>B = B ^ C&lt;/code>&lt;/td>
&lt;td>Still takes param, but ignores it&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>5&lt;/td>
&lt;td>&lt;code>out reg/val&lt;/code>&lt;/td>
&lt;td>Output &lt;code>b&lt;/code>&lt;/td>
&lt;td>Only outputs lowest 3 bits&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>6&lt;/td>
&lt;td>&lt;code>bdv reg/val&lt;/code>&lt;/td>
&lt;td>&lt;code>B = A &amp;gt;&amp;gt; OP&lt;/code>&lt;/td>
&lt;td>Same as &lt;code>adv&lt;/code> but writes to &lt;code>b&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>7&lt;/td>
&lt;td>&lt;code>cdv reg/val&lt;/code>&lt;/td>
&lt;td>&lt;code>C = A &amp;gt;&amp;gt; OP&lt;/code>&lt;/td>
&lt;td>Same as &lt;code>adv&lt;/code> but writes to &lt;code>c&lt;/code>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="parameter-specification">Parameter specification&lt;/h3>
&lt;p>For instructions that can take &lt;code>reg/val&lt;/code>, &lt;code>0&lt;/code> to &lt;code>3&lt;/code> (inclusive) are treated as literal values, &lt;code>4&lt;/code> is register &lt;code>A&lt;/code>, &lt;code>5&lt;/code> is &lt;code>B&lt;/code>, &lt;code>6&lt;/code>, is &lt;code>C&lt;/code>, and &lt;code>7&lt;/code> is an error (should never happen).&lt;/p>
&lt;p>For instructions that only take &lt;code>val&lt;/code>, it&amp;rsquo;s always a literal value in the range &lt;code>0&lt;/code> to &lt;code>7&lt;/code> (inclusive).&lt;/p></description></item><item><title>AoC 2024 Day 16: Astarinator</title><link>https://blog.jverkamp.com/2024/12/16/aoc-2024-day-16-astarinator/</link><pubDate>Mon, 16 Dec 2024 00:00:03 +0000</pubDate><guid>https://blog.jverkamp.com/2024/12/16/aoc-2024-day-16-astarinator/</guid><description>&lt;h2 id="source-day-16-reindeer-mazehttpsadventofcodecom2024day16">Source: &lt;a href="https://adventofcode.com/2024/day/16" target="_blank" rel="noopener">Day 16: Reindeer Maze&lt;/a>&lt;/h2>
&lt;p>&lt;a href="https://github.com/jpverkamp/advent-of-code/blob/master/2024/src/day16.rs" target="_blank" rel="noopener">Full solution&lt;/a> for today (spoilers!).&lt;/p>
&lt;nav id="TableOfContents">
&lt;ul>
&lt;li>&lt;a href="#source-day-16-reindeer-mazehttpsadventofcodecom2024day16">Source: &lt;a href="https://adventofcode.com/2024/day/16">Day 16: Reindeer Maze&lt;/a>&lt;/a>&lt;/li>
&lt;li>&lt;a href="#part-1">Part 1&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#optimization-1-a">Optimization 1: A*&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#part-2">Part 2&lt;/a>&lt;/li>
&lt;li>&lt;a href="#benchmarks">Benchmarks&lt;/a>&lt;/li>
&lt;/ul>
&lt;/nav>
&lt;h2 id="part-1">Part 1&lt;/h2>
&lt;blockquote>
&lt;p>Given a maze, what is the shortest path between &lt;code>S&lt;/code> and &lt;code>E&lt;/code> where walking straight costs one and turning costs 1000.&lt;/p>
&lt;/blockquote></description></item><item><title>AoC 2024 Day 15: Sokobaninator</title><link>https://blog.jverkamp.com/2024/12/15/aoc-2024-day-15-sokobaninator/</link><pubDate>Sun, 15 Dec 2024 00:00:03 +0000</pubDate><guid>https://blog.jverkamp.com/2024/12/15/aoc-2024-day-15-sokobaninator/</guid><description>&lt;h2 id="source-day-15-warehouse-woeshttpsadventofcodecom2024day15">Source: &lt;a href="https://adventofcode.com/2024/day/15" target="_blank" rel="noopener">Day 15: Warehouse Woes&lt;/a>&lt;/h2>
&lt;p>&lt;a href="https://github.com/jpverkamp/advent-of-code/blob/master/2024/src/day15.rs" target="_blank" rel="noopener">Full solution&lt;/a> for today (spoilers!).&lt;/p>
&lt;nav id="TableOfContents">
&lt;ul>
&lt;li>&lt;a href="#source-day-15-warehouse-woeshttpsadventofcodecom2024day15">Source: &lt;a href="https://adventofcode.com/2024/day/15">Day 15: Warehouse Woes&lt;/a>&lt;/a>&lt;/li>
&lt;li>&lt;a href="#part-1">Part 1&lt;/a>&lt;/li>
&lt;li>&lt;a href="#part-2">Part 2&lt;/a>&lt;/li>
&lt;li>&lt;a href="#wiiiiiiiider">WIIIIIIIIDER&lt;/a>&lt;/li>
&lt;li>&lt;a href="#benchmarks">Benchmarks&lt;/a>&lt;/li>
&lt;/ul>
&lt;/nav>
&lt;h2 id="part-1">Part 1&lt;/h2>
&lt;blockquote>
&lt;p>Given a warehouse containing floors (&lt;code>.&lt;/code>), walls (&lt;code>#&lt;/code>), boxes (&lt;code>O&lt;/code>), and the player (&lt;code>@&lt;/code>) plus a series of instructions &lt;code>^V&amp;lt;&amp;gt;&lt;/code>, move the player according to the instructions, pushing boxes (which in turn can push more boxes).&lt;/p>
&lt;p>Calculate the sum of &lt;code>y * 100 + x&lt;/code> for each box&amp;rsquo;s final position.&lt;/p>
&lt;/blockquote></description></item><item><title>AoC 2024 Day 14: Chaosinator</title><link>https://blog.jverkamp.com/2024/12/14/aoc-2024-day-14-chaosinator/</link><pubDate>Sat, 14 Dec 2024 00:00:03 +0000</pubDate><guid>https://blog.jverkamp.com/2024/12/14/aoc-2024-day-14-chaosinator/</guid><description>&lt;h2 id="source-day-14-restroom-redoubthttpsadventofcodecom2024day14">Source: &lt;a href="https://adventofcode.com/2024/day/14" target="_blank" rel="noopener">Day 14: Restroom Redoubt&lt;/a>&lt;/h2>
&lt;p>&lt;a href="https://github.com/jpverkamp/advent-of-code/blob/master/2024/src/day14.rs" target="_blank" rel="noopener">Full solution&lt;/a> for today (spoilers!).&lt;/p>
&lt;nav id="TableOfContents">
&lt;ul>
&lt;li>&lt;a href="#source-day-14-restroom-redoubthttpsadventofcodecom2024day14">Source: &lt;a href="https://adventofcode.com/2024/day/14">Day 14: Restroom Redoubt&lt;/a>&lt;/a>&lt;/li>
&lt;li>&lt;a href="#part-1">Part 1&lt;/a>&lt;/li>
&lt;li>&lt;a href="#part-2">Part 2&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#optimization-1-weird-shape-detection">Optimization 1: Weird shape detection&lt;/a>&lt;/li>
&lt;li>&lt;a href="#correction-for-optimization-1-chinese-remainder-theorem">Correction for Optimization 1: Chinese Remainder Theorem&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#benchmarks">Benchmarks&lt;/a>&lt;/li>
&lt;/ul>
&lt;/nav>
&lt;h2 id="part-1">Part 1&lt;/h2>
&lt;blockquote>
&lt;p>Given a series of robots defined with initial &lt;code>position&lt;/code> and &lt;code>velocity&lt;/code> on a 101x103 &lt;a href="https://en.wikipedia.org/wiki/toroidal">toroidal&lt;/a> grid, calculate where the robots will be after 100 iterations. Return the product of the number of robots in each &lt;a href="https://en.wikipedia.org/wiki/quadrant">quadrant&lt;/a> of the final grid, ignoring the middle lines (since they&amp;rsquo;re odd).&lt;/p>
&lt;/blockquote></description></item><item><title>AoC 2024 Day 13: Cramerinator</title><link>https://blog.jverkamp.com/2024/12/13/aoc-2024-day-13-cramerinator/</link><pubDate>Fri, 13 Dec 2024 00:00:03 +0000</pubDate><guid>https://blog.jverkamp.com/2024/12/13/aoc-2024-day-13-cramerinator/</guid><description>&lt;h2 id="source-day-13-claw-contraptionhttpsadventofcodecom2024day13">Source: &lt;a href="https://adventofcode.com/2024/day/13" target="_blank" rel="noopener">Day 13: Claw Contraption&lt;/a>&lt;/h2>
&lt;p>&lt;a href="https://github.com/jpverkamp/advent-of-code/blob/master/2024/src/day13.rs" target="_blank" rel="noopener">Full solution&lt;/a> for today (spoilers!).&lt;/p>
&lt;nav id="TableOfContents">
&lt;ul>
&lt;li>&lt;a href="#source-day-13-claw-contraptionhttpsadventofcodecom2024day13">Source: &lt;a href="https://adventofcode.com/2024/day/13">Day 13: Claw Contraption&lt;/a>&lt;/a>&lt;/li>
&lt;li>&lt;a href="#part-1">Part 1&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#optimization-1-cramers-rule">Optimization 1: Cramer&amp;rsquo;s Rule&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#part-2">Part 2&lt;/a>&lt;/li>
&lt;li>&lt;a href="#benchmarks">Benchmarks&lt;/a>&lt;/li>
&lt;li>&lt;a href="#optimization-2-really-going-off-the-deep-end">Optimization 2: Really going off the deep end&lt;/a>&lt;/li>
&lt;/ul>
&lt;/nav>
&lt;h2 id="part-1">Part 1&lt;/h2>
&lt;blockquote>
&lt;p>Given Button A &lt;code>(ax, ay)&lt;/code>, Button B &lt;code>(bx, by)&lt;/code>, and Prize &lt;code>(px, py)&lt;/code>; how many times must you press Button A (&lt;code>a&lt;/code>) and Button B (&lt;code>b&lt;/code>) to reach the Prize? Sum &lt;code>3a + b&lt;/code> for each machine that has a solution.&lt;/p>
&lt;/blockquote></description></item><item><title>AoC 2024 Day 12: Edginator</title><link>https://blog.jverkamp.com/2024/12/12/aoc-2024-day-12-edginator/</link><pubDate>Thu, 12 Dec 2024 00:00:03 +0000</pubDate><guid>https://blog.jverkamp.com/2024/12/12/aoc-2024-day-12-edginator/</guid><description>&lt;h2 id="source-day-12-garden-groupshttpsadventofcodecom2024day12">Source: &lt;a href="https://adventofcode.com/2024/day/12" target="_blank" rel="noopener">Day 12: Garden Groups&lt;/a>&lt;/h2>
&lt;p>&lt;a href="https://github.com/jpverkamp/advent-of-code/blob/master/2024/src/day12.rs" target="_blank" rel="noopener">Full solution&lt;/a> for today (spoilers!).&lt;/p>
&lt;nav id="TableOfContents">
&lt;ul>
&lt;li>&lt;a href="#source-day-12-garden-groupshttpsadventofcodecom2024day12">Source: &lt;a href="https://adventofcode.com/2024/day/12">Day 12: Garden Groups&lt;/a>&lt;/a>&lt;/li>
&lt;li>&lt;a href="#part-1">Part 1&lt;/a>&lt;/li>
&lt;li>&lt;a href="#part-2">Part 2&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#optimization-1-detect-corners-instead-of-edges">Optimization 1: Detect corners instead of edges&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#benchmarks">Benchmarks&lt;/a>&lt;/li>
&lt;/ul>
&lt;/nav>
&lt;h2 id="part-1">Part 1&lt;/h2>
&lt;blockquote>
&lt;p>Given a &lt;code>Grid&lt;/code> of regions, calculate the sum of the product &lt;code>perimeter * area&lt;/code> for each region.&lt;/p>
&lt;/blockquote></description></item><item><title>AoC 2024 Day 11: Exponential Growthinator</title><link>https://blog.jverkamp.com/2024/12/11/aoc-2024-day-11-exponential-growthinator/</link><pubDate>Wed, 11 Dec 2024 00:00:03 +0000</pubDate><guid>https://blog.jverkamp.com/2024/12/11/aoc-2024-day-11-exponential-growthinator/</guid><description>&lt;h2 id="source-day-11-plutonian-pebbleshttpsadventofcodecom2024day11">Source: &lt;a href="https://adventofcode.com/2024/day/11" target="_blank" rel="noopener">Day 11: Plutonian Pebbles&lt;/a>&lt;/h2>
&lt;p>&lt;a href="https://github.com/jpverkamp/advent-of-code/blob/master/2024/src/day11.rs" target="_blank" rel="noopener">Full solution&lt;/a> for today (spoilers!).&lt;/p>
&lt;nav id="TableOfContents">
&lt;ul>
&lt;li>&lt;a href="#source-day-11-plutonian-pebbleshttpsadventofcodecom2024day11">Source: &lt;a href="https://adventofcode.com/2024/day/11">Day 11: Plutonian Pebbles&lt;/a>&lt;/a>&lt;/li>
&lt;li>&lt;a href="#part-1">Part 1&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#optimization-1-recursion">Optimization 1: Recursion&lt;/a>&lt;/li>
&lt;li>&lt;a href="#optimization-2-memoization">Optimization 2: Memoization&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#part-2">Part 2&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#optimization-attempt-3-association-list-cache">Optimization (attempt) 3: Association list cache&lt;/a>&lt;/li>
&lt;li>&lt;a href="#optimization-attempt-4-btree-cache">Optimization (attempt) 4: &lt;code>BTree&lt;/code> cache&lt;/a>&lt;/li>
&lt;li>&lt;a href="#optimization-5-iterate-over-hashmapvalue-count">Optimization 5: Iterate over &lt;code>HashMap&amp;lt;value, count&amp;gt;&lt;/code>&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#benchmarks">Benchmarks&lt;/a>&lt;/li>
&lt;/ul>
&lt;/nav>
&lt;h2 id="part-1">Part 1&lt;/h2>
&lt;blockquote>
&lt;p>Given a sequence of values &lt;code>v_n&lt;/code>, replace each value with the first matching rule:&lt;/p>
&lt;ul>
&lt;li>&lt;code>if v = 0 -&amp;gt; 1&lt;/code>&lt;/li>
&lt;li>If &lt;code>v&lt;/code> has an even number of digits, split it (so &lt;code>v = 8675&lt;/code> becomes &lt;code>[86, 75]&lt;/code>)&lt;/li>
&lt;li>Otherwise, &lt;code>v -&amp;gt; v * 2024&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>Calculate how many elements are in the sequence after 25 iterations.&lt;/p>
&lt;/blockquote></description></item><item><title>AoC 2024 Day 10: Take-a-Hikinator</title><link>https://blog.jverkamp.com/2024/12/10/aoc-2024-day-10-take-a-hikinator/</link><pubDate>Tue, 10 Dec 2024 00:00:03 +0000</pubDate><guid>https://blog.jverkamp.com/2024/12/10/aoc-2024-day-10-take-a-hikinator/</guid><description>&lt;h2 id="source-day-10-hoof-ithttpsadventofcodecom2024day10">Source: &lt;a href="https://adventofcode.com/2024/day/10" target="_blank" rel="noopener">Day 10: Hoof It&lt;/a>&lt;/h2>
&lt;p>&lt;a href="https://github.com/jpverkamp/advent-of-code/blob/master/2024/src/day10.rs" target="_blank" rel="noopener">Full solution&lt;/a> for today (spoilers!).&lt;/p>
&lt;nav id="TableOfContents">
&lt;ul>
&lt;li>&lt;a href="#source-day-10-hoof-ithttpsadventofcodecom2024day10">Source: &lt;a href="https://adventofcode.com/2024/day/10">Day 10: Hoof It&lt;/a>&lt;/a>&lt;/li>
&lt;li>&lt;a href="#part-1">Part 1&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#optimization-1-using-dynamic-programming">Optimization 1: Using dynamic programming&lt;/a>&lt;/li>
&lt;li>&lt;a href="#optimization-2-smarter-bitmasks">Optimization 2: Smarter bitmasks&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#part-2">Part 2&lt;/a>&lt;/li>
&lt;li>&lt;a href="#benchmarks">Benchmarks&lt;/a>&lt;/li>
&lt;/ul>
&lt;/nav>
&lt;h2 id="part-1">Part 1&lt;/h2>
&lt;blockquote>
&lt;p>Given a heightmap (&lt;code>0&lt;/code> to &lt;code>9&lt;/code>), for each &lt;code>0&lt;/code> count how many &lt;code>9&lt;/code> you can reach on paths that only ever increase height by exactly 1 at a time. Sum these values.&lt;/p>
&lt;/blockquote></description></item><item><title>AoC 2024 Day 9: Defraginator</title><link>https://blog.jverkamp.com/2024/12/09/aoc-2024-day-9-defraginator/</link><pubDate>Mon, 09 Dec 2024 00:00:03 +0000</pubDate><guid>https://blog.jverkamp.com/2024/12/09/aoc-2024-day-9-defraginator/</guid><description>&lt;h2 id="source-day-9-disk-fragmenterhttpsadventofcodecom2024day9">Source: &lt;a href="https://adventofcode.com/2024/day/9" target="_blank" rel="noopener">Day 9: Disk Fragmenter&lt;/a>&lt;/h2>
&lt;p>&lt;a href="https://github.com/jpverkamp/advent-of-code/blob/master/2024/src/day9.rs" target="_blank" rel="noopener">Full solution&lt;/a> for today (spoilers!).&lt;/p>
&lt;nav id="TableOfContents">
&lt;ul>
&lt;li>&lt;a href="#source-day-9-disk-fragmenterhttpsadventofcodecom2024day9">Source: &lt;a href="https://adventofcode.com/2024/day/9">Day 9: Disk Fragmenter&lt;/a>&lt;/a>&lt;/li>
&lt;li>&lt;a href="#part-1">Part 1&lt;/a>&lt;/li>
&lt;li>&lt;a href="#part-2">Part 2&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#optimization-attempt-1-btree-representation">Optimization (attempt) 1: BTree representation&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#optimization-2-track-the-leftmost-empty-space">Optimization 2: Track the leftmost empty space&lt;/a>&lt;/li>
&lt;li>&lt;a href="#benchmarks">Benchmarks&lt;/a>&lt;/li>
&lt;/ul>
&lt;/nav>
&lt;h2 id="part-1">Part 1&lt;/h2>
&lt;blockquote>
&lt;p>Given a disk layout alternating between files and empty spaces, move all files as early on the disk is possible, splitting into multiple blocks. Return a checksum on the disk.&lt;/p>
&lt;p>Alternating means: &lt;code>23331&lt;/code> would mean a 2 block file, 3 empty, a 3 block file, 3 empty, and a 1 block file.&lt;/p>
&lt;p>The checksum is the sum of &lt;code>file_id * block_index&lt;/code> for all occupied blocks. File IDs are assigned sequentially on initial generation.&lt;/p>
&lt;/blockquote></description></item><item><title>AoC 2024 Day 8: Vectorinator</title><link>https://blog.jverkamp.com/2024/12/08/aoc-2024-day-8-vectorinator/</link><pubDate>Sun, 08 Dec 2024 00:00:03 +0000</pubDate><guid>https://blog.jverkamp.com/2024/12/08/aoc-2024-day-8-vectorinator/</guid><description>&lt;h2 id="source-day-8-resonant-collinearityhttpsadventofcodecom2024day8">Source: &lt;a href="https://adventofcode.com/2024/day/8" target="_blank" rel="noopener">Day 8: Resonant Collinearity&lt;/a>&lt;/h2>
&lt;p>&lt;a href="https://github.com/jpverkamp/advent-of-code/blob/master/2024/src/day8.rs" target="_blank" rel="noopener">Full solution&lt;/a> for today (spoilers!).&lt;/p>
&lt;nav id="TableOfContents">
&lt;ul>
&lt;li>&lt;a href="#source-day-8-resonant-collinearityhttpsadventofcodecom2024day8">Source: &lt;a href="https://adventofcode.com/2024/day/8">Day 8: Resonant Collinearity&lt;/a>&lt;/a>&lt;/li>
&lt;li>&lt;a href="#part-1">Part 1&lt;/a>&lt;/li>
&lt;li>&lt;a href="#part-2">Part 2&lt;/a>&lt;/li>
&lt;li>&lt;a href="#benchmarks">Benchmarks&lt;/a>&lt;/li>
&lt;/ul>
&lt;/nav>
&lt;h2 id="part-1">Part 1&lt;/h2>
&lt;blockquote>
&lt;p>Given a grid with either open tiles (&lt;code>.&lt;/code>) or towers (anything else), for each pair of towers, there is an antinode at each of the points that is 2x as far from one tower as the other. How many antinodes are there still within the bounds of the map?&lt;/p>
&lt;/blockquote></description></item><item><title>AoC 2024 Day 7: Mathinator</title><link>https://blog.jverkamp.com/2024/12/07/aoc-2024-day-7-mathinator/</link><pubDate>Sat, 07 Dec 2024 00:00:03 +0000</pubDate><guid>https://blog.jverkamp.com/2024/12/07/aoc-2024-day-7-mathinator/</guid><description>&lt;h2 id="source-day-7-bridge-repairhttpsadventofcodecom2024day7">Source: &lt;a href="https://adventofcode.com/2024/day/7" target="_blank" rel="noopener">Day 7: Bridge Repair&lt;/a>&lt;/h2>
&lt;p>&lt;a href="https://github.com/jpverkamp/advent-of-code/blob/master/2024/src/day7.rs" target="_blank" rel="noopener">Full solution&lt;/a> for today (spoilers!).&lt;/p>
&lt;nav id="TableOfContents">
&lt;ul>
&lt;li>&lt;a href="#source-day-7-bridge-repairhttpsadventofcodecom2024day7">Source: &lt;a href="https://adventofcode.com/2024/day/7">Day 7: Bridge Repair&lt;/a>&lt;/a>&lt;/li>
&lt;li>&lt;a href="#part-1">Part 1&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#optimization-attempt-1-queue">Optimization (attempt) 1: Queue&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#part-2">Part 2&lt;/a>&lt;/li>
&lt;li>&lt;a href="#a-cleaner-way-of-looking-at-it-opset">A &amp;lsquo;cleaner&amp;rsquo; way of looking at it: &lt;code>OpSet&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="#benchmarks">Benchmarks&lt;/a>&lt;/li>
&lt;li>&lt;a href="#future-work">Future work&lt;/a>&lt;/li>
&lt;/ul>
&lt;/nav>
&lt;h2 id="part-1">Part 1&lt;/h2>
&lt;blockquote>
&lt;p>Given a result and a list of numbers, determine if any combination of addition (&lt;code>+&lt;/code>) and/or multiplication (&lt;code>*&lt;/code>) using all the given numbers in order can return the result. Ignore order of operations.&lt;/p>
&lt;/blockquote></description></item><item><title>AoC 2024 Day 6: Wanderinator</title><link>https://blog.jverkamp.com/2024/12/06/aoc-2024-day-6-wanderinator/</link><pubDate>Fri, 06 Dec 2024 00:00:03 +0000</pubDate><guid>https://blog.jverkamp.com/2024/12/06/aoc-2024-day-6-wanderinator/</guid><description>&lt;h2 id="source-day-6-guard-gallivanthttpsadventofcodecom2024day6">Source: &lt;a href="https://adventofcode.com/2024/day/6" target="_blank" rel="noopener">Day 6: Guard Gallivant&lt;/a>&lt;/h2>
&lt;p>&lt;a href="https://github.com/jpverkamp/advent-of-code/blob/master/2024/src/day6.rs" target="_blank" rel="noopener">Full solution&lt;/a> for today (spoilers!).&lt;/p>
&lt;nav id="TableOfContents">
&lt;ul>
&lt;li>&lt;a href="#source-day-6-guard-gallivanthttpsadventofcodecom2024day6">Source: &lt;a href="https://adventofcode.com/2024/day/6">Day 6: Guard Gallivant&lt;/a>&lt;/a>&lt;/li>
&lt;li>&lt;a href="#part-1">Part 1&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#direction">&lt;code>Direction&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="#point">&lt;code>Point&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="#actually-solving-the-problem">Actually solving the problem&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#part-2">Part 2&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#optimization-1-only-checking-the-path">Optimization 1: Only checking the path&lt;/a>&lt;/li>
&lt;li>&lt;a href="#optimization-2-rayon-parallelization">Optimization 2: Rayon parallelization&lt;/a>&lt;/li>
&lt;li>&lt;a href="#optimization-3-avoiding-clone">Optimization 3: Avoiding clone&lt;/a>&lt;/li>
&lt;li>&lt;a href="#optimization-4-no-hash">Optimization 4: No hash&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#benchmarks">Benchmarks&lt;/a>&lt;/li>
&lt;/ul>
&lt;/nav>
&lt;h2 id="part-1">Part 1&lt;/h2>
&lt;blockquote>
&lt;p>You are given a grid of walls (&lt;code>#&lt;/code>), floors (&lt;code>.&lt;/code>), and a guard (&lt;code>^&lt;/code>, initially facing up/north). The guard walks forward until they run into a wall at which point they turn right. How many tiles does the guard reach before leaving the map.&lt;/p>
&lt;/blockquote></description></item><item><title>AoC 2024 Day 5: (Not) Transitivinator</title><link>https://blog.jverkamp.com/2024/12/05/aoc-2024-day-5-not-transitivinator/</link><pubDate>Thu, 05 Dec 2024 00:00:03 +0000</pubDate><guid>https://blog.jverkamp.com/2024/12/05/aoc-2024-day-5-not-transitivinator/</guid><description>&lt;h2 id="source-day-day-5-print-queuehttpsadventofcodecom2024day5">Source: &lt;a href="https://adventofcode.com/2024/day/5" target="_blank" rel="noopener">Day Day 5: Print Queue&lt;/a>&lt;/h2>
&lt;p>&lt;a href="https://github.com/jpverkamp/advent-of-code/blob/master/2024/src/day5.rs" target="_blank" rel="noopener">Full solution&lt;/a> for today (spoilers!).&lt;/p>
&lt;nav id="TableOfContents">
&lt;ul>
&lt;li>&lt;a href="#source-day-day-5-print-queuehttpsadventofcodecom2024day5">Source: &lt;a href="https://adventofcode.com/2024/day/5">Day Day 5: Print Queue&lt;/a>&lt;/a>&lt;/li>
&lt;li>&lt;a href="#part-1">Part 1&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#parsing">Parsing&lt;/a>&lt;/li>
&lt;li>&lt;a href="#is-it-transitive">Is it transitive?&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#part-2">Part 2&lt;/a>&lt;/li>
&lt;li>&lt;a href="#benchmarks">Benchmarks&lt;/a>&lt;/li>
&lt;li>&lt;a href="#optimization-1-drop-the-hashmap">Optimization 1: Drop the &lt;code>hashmap&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="#optimization-2-bitvec">Optimization 2: &lt;code>bitvec&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="#optimization-attempt-3-a-vec-of-pairs">Optimization (attempt) 3: A &lt;code>vec&lt;/code> of pairs&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#optimization-attempt-4-sorted-vec-of-pairs">Optimization (attempt) 4: Sorted &lt;code>vec&lt;/code> of pairs&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#overall-timing-graph">Overall timing graph&lt;/a>&lt;/li>
&lt;/ul>
&lt;/nav>
&lt;h2 id="part-1">Part 1&lt;/h2>
&lt;blockquote>
&lt;p>The input is a list of pairs of the form &lt;code>a|b&lt;/code> which defines that &lt;code>b&lt;/code> must not come before &lt;code>a&lt;/code>, an empty line, and then a list of values &lt;code>a,b,c,d&lt;/code>.&lt;/p>
&lt;p>For each line that is valid for all given &lt;code>a|b&lt;/code> rules, sum the middle number of each list.&lt;/p>
&lt;/blockquote></description></item><item><title>AoC 2024 Day 4: Gridnator</title><link>https://blog.jverkamp.com/2024/12/04/aoc-2024-day-4-gridnator/</link><pubDate>Wed, 04 Dec 2024 00:00:03 +0000</pubDate><guid>https://blog.jverkamp.com/2024/12/04/aoc-2024-day-4-gridnator/</guid><description>&lt;h2 id="source-day-4-ceres-searchhttpsadventofcodecom2024day4">Source: &lt;a href="https://adventofcode.com/2024/day/4" target="_blank" rel="noopener">Day 4: Ceres Search&lt;/a>&lt;/h2>
&lt;p>&lt;a href="https://github.com/jpverkamp/advent-of-code/blob/master/2024/src/day4.rs" target="_blank" rel="noopener">Full solution&lt;/a> for today (spoilers!).&lt;/p>
&lt;nav id="TableOfContents">
&lt;ul>
&lt;li>&lt;a href="#source-day-4-ceres-searchhttpsadventofcodecom2024day4">Source: &lt;a href="https://adventofcode.com/2024/day/4">Day 4: Ceres Search&lt;/a>&lt;/a>&lt;/li>
&lt;li>&lt;a href="#part-1">Part 1&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#grid">&lt;code>Grid&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="#iterating-over-xmas">Iterating over &lt;code>XMAS&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="#optimization-1-less-loops">Optimization 1: Less loops&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#part-2">Part 2&lt;/a>&lt;/li>
&lt;li>&lt;a href="#benchmarks">Benchmarks&lt;/a>&lt;/li>
&lt;/ul>
&lt;/nav>
&lt;h2 id="part-1">Part 1&lt;/h2>
&lt;blockquote>
&lt;p>Given a grid of letters, count how many times &lt;code>XMAS&lt;/code> appears in any direction (horizontally, vertically, diagonally; forward or backward).&lt;/p>
&lt;/blockquote></description></item><item><title>AoC 2024 Day 3: Mulinator</title><link>https://blog.jverkamp.com/2024/12/03/aoc-2024-day-3-mulinator/</link><pubDate>Tue, 03 Dec 2024 00:00:03 +0000</pubDate><guid>https://blog.jverkamp.com/2024/12/03/aoc-2024-day-3-mulinator/</guid><description>&lt;h2 id="source-day-3-mull-it-overhttpsadventofcodecom2024day3">Source: &lt;a href="https://adventofcode.com/2024/day/3" target="_blank" rel="noopener">Day 3: Mull It Over&lt;/a>&lt;/h2>
&lt;p>&lt;a href="https://github.com/jpverkamp/advent-of-code/blob/master/2024/src/day3.rs" target="_blank" rel="noopener">Full solution&lt;/a> for today (spoilers!).&lt;/p>
&lt;nav id="TableOfContents">
&lt;ul>
&lt;li>&lt;a href="#source-day-3-mull-it-overhttpsadventofcodecom2024day3">Source: &lt;a href="https://adventofcode.com/2024/day/3">Day 3: Mull It Over&lt;/a>&lt;/a>&lt;/li>
&lt;li>&lt;a href="#part-1">Part 1&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#optimization-1-use-nom">Optimization 1: Use &lt;code>nom&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="#optimization-2-manual-parsing--state-machine">Optimization 2: Manual parsing / state machine&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#part-2">Part 2&lt;/a>&lt;/li>
&lt;li>&lt;a href="#benchmarks">Benchmarks&lt;/a>&lt;/li>
&lt;/ul>
&lt;/nav>
&lt;h2 id="part-1">Part 1&lt;/h2>
&lt;blockquote>
&lt;p>Given a string containing (among other gibberish) commands of the form &lt;code>mul({A}, {B})&lt;/code> where &lt;code>{A}&lt;/code> and &lt;code>{B}&lt;/code> are integers, calculate the sum of &lt;code>A*B&lt;/code>s.&lt;/p>
&lt;/blockquote></description></item><item><title>AoC 2024 Day 2: Safinator</title><link>https://blog.jverkamp.com/2024/12/02/aoc-2024-day-2-safinator/</link><pubDate>Mon, 02 Dec 2024 00:00:03 +0000</pubDate><guid>https://blog.jverkamp.com/2024/12/02/aoc-2024-day-2-safinator/</guid><description>&lt;h2 id="source-day-2-red-nosed-reportshttpsadventofcodecom2024day2">Source: &lt;a href="https://adventofcode.com/2024/day/2" target="_blank" rel="noopener">Day 2: Red-Nosed Reports&lt;/a>&lt;/h2>
&lt;p>&lt;a href="https://github.com/jpverkamp/advent-of-code/blob/master/2024/src/day2.rs" target="_blank" rel="noopener">Full solution&lt;/a> for today (spoilers!).&lt;/p>
&lt;nav id="TableOfContents">
&lt;ul>
&lt;li>&lt;a href="#source-day-2-red-nosed-reportshttpsadventofcodecom2024day2">Source: &lt;a href="https://adventofcode.com/2024/day/2">Day 2: Red-Nosed Reports&lt;/a>&lt;/a>&lt;/li>
&lt;li>&lt;a href="#part-1">Part 1&lt;/a>&lt;/li>
&lt;li>&lt;a href="#part-2">Part 2&lt;/a>&lt;/li>
&lt;li>&lt;a href="#optimization-1-dont-clone-vec">Optimization 1: Don&amp;rsquo;t clone &lt;code>vec&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="#benchmarks">Benchmarks&lt;/a>&lt;/li>
&lt;/ul>
&lt;/nav>
&lt;h2 id="part-1">Part 1&lt;/h2>
&lt;blockquote>
&lt;p>Count how many given lists of numbers are &lt;code>safe&lt;/code>:&lt;/p>
&lt;ol>
&lt;li>Sorted (either ascending or descending)&lt;/li>
&lt;li>&lt;em>Strictly&lt;/em> increasing/decreasing (no duplicate values)&lt;/li>
&lt;li>No increase/decrease is by more than 3&lt;/li>
&lt;/ol>
&lt;/blockquote></description></item><item><title>AoC 2024 Day 1: Sortinator</title><link>https://blog.jverkamp.com/2024/12/01/aoc-2024-day-1-sortinator/</link><pubDate>Sun, 01 Dec 2024 00:00:03 +0000</pubDate><guid>https://blog.jverkamp.com/2024/12/01/aoc-2024-day-1-sortinator/</guid><description>&lt;h2 id="source-day-1-historian-hysteriahttpsadventofcodecom2024day1">Source: &lt;a href="https://adventofcode.com/2024/day/1" target="_blank" rel="noopener">Day 1: Historian Hysteria&lt;/a>&lt;/h2>
&lt;p>&lt;a href="https://github.com/jpverkamp/advent-of-code/blob/master/2024/src/day1.rs" target="_blank" rel="noopener">Full solution&lt;/a> for today (spoilers!).&lt;/p>
&lt;nav id="TableOfContents">
&lt;ul>
&lt;li>&lt;a href="#source-day-1-historian-hysteriahttpsadventofcodecom2024day1">Source: &lt;a href="https://adventofcode.com/2024/day/1">Day 1: Historian Hysteria&lt;/a>&lt;/a>&lt;/li>
&lt;li>&lt;a href="#part-1">Part 1&lt;/a>&lt;/li>
&lt;li>&lt;a href="#part-2">Part 2&lt;/a>&lt;/li>
&lt;li>&lt;a href="#benchmarks">Benchmarks&lt;/a>&lt;/li>
&lt;/ul>
&lt;/nav>
&lt;h2 id="part-1">Part 1&lt;/h2>
&lt;blockquote>
&lt;p>Given two lists of numbers arranged in columns in a file, find the sum of differences (in sorted order).&lt;/p>
&lt;/blockquote></description></item><item><title>Advent of Code 2024</title><link>https://blog.jverkamp.com/2024/12/01/advent-of-code-2024/</link><pubDate>Sun, 01 Dec 2024 00:00:01 +0000</pubDate><guid>https://blog.jverkamp.com/2024/12/01/advent-of-code-2024/</guid><description>&lt;p>Let&amp;rsquo;s do this (&lt;a href="https://blog.jverkamp.com/2015/12/01/advent-of-code/">Advent of Code&lt;/a>) thing again!&lt;/p>
&lt;p>I&amp;rsquo;m sticking with Rust again. I still use Python when I need to hammer out something quickly, but if I want to do something &lt;em>correctly&lt;/em> (and especially if I want it to be fast), you can&amp;rsquo;t beat Rust.&lt;/p>
&lt;p>Let&amp;rsquo;s see how it goes!&lt;/p>
&lt;p>Full solutions will once again be posted to GitHub (including previous years and possibly some I haven&amp;rsquo;t written up yet): &lt;a href="https://github.com/jpverkamp/advent-of-code">jpverkamp/advent-of-code&lt;/a>&lt;/p></description></item><item><title>Ludum Dare(ish) 56: BugShine</title><link>https://blog.jverkamp.com/2024/10/07/ludum-dareish-56-bugshine/</link><pubDate>Mon, 07 Oct 2024 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2024/10/07/ludum-dareish-56-bugshine/</guid><description>&lt;p>&lt;a href="https://blog.jverkamp.com/series/ludum-dare/">Ludum Dare&lt;/a>? That&amp;rsquo;s been a while!&lt;/p>
&lt;p>I didn&amp;rsquo;t actually enter the game jam. Honestly, I wasn&amp;rsquo;t sure I was going to write anything. But I had a bit of an idea and spent a few hours only on Sunday hammering something out:&lt;/p>
&lt;p>&lt;video width=100% controls src="https://blog.jverkamp.com/embeds/games/ludum-dare/56/bugshine.mp4">&lt;/video>&lt;/p>
&lt;p>Yeah, I did another cellular automata thing ðŸ˜„&lt;/p>
&lt;p>It&amp;rsquo;s not at all complete, but the basic idea is:&lt;/p>
&lt;ul>
&lt;li>Generate a random level&lt;/li>
&lt;li>See it with multiple players (colonies of bugs)&lt;/li>
&lt;li>Each bug will send out waves of &amp;lsquo;shine&amp;rsquo;, expanding their territory&lt;/li>
&lt;li>Take over the map to win&lt;/li>
&lt;/ul>
&lt;p>It&amp;rsquo;s sort of got that?&lt;/p>
&lt;p>I&amp;rsquo;m using Rust as I&amp;rsquo;ve been doing a lot recently.&lt;/p>
&lt;p>The main libraries are:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://docs.rs/pixels/latest/pixels/" target="_blank" rel="noopener">pixels&lt;/a> for the rendering; it gives me direct access to a pixel buffer, which is my favorite&lt;/li>
&lt;li>&lt;a href="https://docs.rs/winit/latest/winit/" target="_blank" rel="noopener">winit&lt;/a> for windowing; this did require the feature &lt;code>rwh_05&lt;/code> to be properly compatible with &lt;code>pixels&lt;/code>, which took a minute to track down&lt;/li>
&lt;/ul>
&lt;p>Other than, that, it&amp;rsquo;s straight custom code which you can see in it&amp;rsquo;s entirety on &lt;a href="https://github.com/jpverkamp/bug-shine" target="_blank" rel="noopener">my github&lt;/a>.&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/jpverkamp/bug-shine/blob/main/src/main.rs" target="_blank" rel="noopener">main.rs&lt;/a> - creates the window and handles input&lt;/li>
&lt;li>&lt;a href="https://github.com/jpverkamp/bug-shine/blob/main/src/world.rs" target="_blank" rel="noopener">world.rs&lt;/a> - runs the simulation mostly in an &lt;code>update&lt;/code> function; with generation in &lt;code>new&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>I think that perhaps the only really interesting bit about the code is how the &amp;lsquo;shine waves&amp;rsquo; work. Basically, I have a grid of the state of each cell, but I also have a &lt;code>Vec&lt;/code> that tracks &amp;lsquo;active&amp;rsquo; pixels. Those are the only ones that can update&amp;ndash;which both helps performance and makes the simulation appear the way it does.&lt;/p>
&lt;p>Overall, a nice quick project. More than anything, it actually convinced me to try setting up something that can render pixel buffers on Rust. And with a (very minimal) GUI, too! Both things I&amp;rsquo;ve been meaning to learn.&lt;/p>
&lt;p>I probably won&amp;rsquo;t do anything more with this code, but it&amp;rsquo;s got the seeds of something more interesting. Keep an eye out. ðŸ˜„&lt;/p>
&lt;p>Onward!&lt;/p>
&lt;figure>&lt;img src="https://blog.jverkamp.com/embeds/games/ludum-dare/56/bugshine.png"/>
&lt;/figure></description></item><item><title>Finish Myself a Grep</title><link>https://blog.jverkamp.com/2024/10/05/finish-myself-a-grep/</link><pubDate>Sat, 05 Oct 2024 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2024/10/05/finish-myself-a-grep/</guid><description>&lt;p>Hey, I said that I would follow up on my post about &lt;a href="https://blog.jverkamp.com/2024/08/28/codecrafters-build-myself-a-grep/">Building Myself a Grep&lt;/a>&amp;hellip; well here it is!&lt;/p>
&lt;p>And I&amp;rsquo;m actually surprised with myself in how far I actually made it!&lt;/p>
&lt;p>You can see the current state of my code &lt;a href="https://github.com/jpverkamp/jp-grep" target="_blank" rel="noopener">on Github&lt;/a>. You can install it from that repo (checked out) with &lt;code>cargo install --path .&lt;/code>&lt;/p>
&lt;p>I mostly worked off the &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_expressions" target="_blank" rel="noopener">MDN documentation&lt;/a>:&lt;/p>
&lt;h2 id="details">Details&lt;/h2>
&lt;nav id="TableOfContents">
&lt;ul>
&lt;li>&lt;a href="#details">Details&lt;/a>&lt;/li>
&lt;li>&lt;a href="#supported-regex-features">Supported Regex Features&lt;/a>&lt;/li>
&lt;li>&lt;a href="#unsupported-regex-features-so-far">Unsupported Regex Features (so far!)&lt;/a>&lt;/li>
&lt;li>&lt;a href="#supported-cli-flags">Supported CLI flags&lt;/a>&lt;/li>
&lt;li>&lt;a href="#unsupported-cli-flags">Unsupported CLI flags&lt;/a>&lt;/li>
&lt;li>&lt;a href="#error-handling">Error handling&lt;/a>&lt;/li>
&lt;li>&lt;a href="#expanding-past-codecrafters">Expanding past CodeCrafters&lt;/a>&lt;/li>
&lt;li>&lt;a href="#collecting-files">Collecting files&lt;/a>&lt;/li>
&lt;li>&lt;a href="#printing-lines">Printing lines&lt;/a>&lt;/li>
&lt;/ul>
&lt;/nav>
&lt;h2 id="supported-regex-features">Supported Regex Features&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>Assertions:&lt;/p>
&lt;ul>
&lt;li>&lt;code>^&lt;/code> and &lt;code>$&lt;/code> for entire patterns&lt;/li>
&lt;li>Parsing look head/behind (not matched)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>Character classes&lt;/p>
&lt;ul>
&lt;li>Single characters: &lt;code>[abc]&lt;/code>&lt;/li>
&lt;li>Ranges: &lt;code>[a-z]&lt;/code>&lt;/li>
&lt;li>Negated classes: &lt;code>[^abc]&lt;/code>&lt;/li>
&lt;li>Wildcards: &lt;code>.&lt;/code>&lt;/li>
&lt;li>Classes: &lt;code>\d&lt;/code>/&lt;code>\D&lt;/code> for digits, &lt;code>\w&lt;/code>/&lt;code>\W&lt;/code> for &amp;lsquo;words&amp;rsquo;, and &lt;code>\s&lt;/code>/&lt;code>\S&lt;/code> for whitespace&lt;/li>
&lt;li>Escape characters: &lt;code>\t\r\n\v\f&lt;/code>&lt;/li>
&lt;li>Control characters: &lt;code>\cX&lt;/code> (I&amp;rsquo;ve never used these)&lt;/li>
&lt;li>Hex and unicode literals: &lt;code>\hXX&lt;/code> and &lt;code>\uXXXX&lt;/code>&lt;/li>
&lt;li>Disjunction: &lt;code>|&lt;/code> (both in capture groups and not)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>Groups and back references&lt;/p>
&lt;ul>
&lt;li>Capture groups: &lt;code>(abc)&lt;/code>&lt;/li>
&lt;li>Named capture groups: &lt;code>(?&amp;lt;name&amp;gt;abc)&lt;/code>&lt;/li>
&lt;li>Non-capturing groups: &lt;code>(?:abc)&lt;/code>&lt;/li>
&lt;li>Flags: &lt;code>(?ims-ims:abc)&lt;/code>
&lt;ul>
&lt;li>Both enabling and disabling&lt;/li>
&lt;li>&lt;code>i&lt;/code> and &lt;code>s&lt;/code> but not &lt;code>m&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Backreferences: &lt;code>\n&lt;/code>&lt;/li>
&lt;li>Named backreferences: &lt;code>\k&amp;lt;name&amp;gt;&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>Quantifiers&lt;/p>
&lt;ul>
&lt;li>&lt;code>*&lt;/code> for zero or more&lt;/li>
&lt;li>&lt;code>+&lt;/code> for one or more&lt;/li>
&lt;li>&lt;code>?&lt;/code> for zero or one&lt;/li>
&lt;li>&lt;code>*?&lt;/code>, &lt;code>+?&lt;/code>, and &lt;code>??&lt;/code> for lazy / non-greedy matches&lt;/li>
&lt;li>&lt;code>abc{n}&lt;/code> exactly n matches&lt;/li>
&lt;li>&lt;code>abc{n,}&lt;/code> at least n matches&lt;/li>
&lt;li>&lt;code>abc{,m}&lt;/code> up to m matches&lt;/li>
&lt;li>&lt;code>abc{n,m}&lt;/code> at least n and up to m matches (inclusive)&lt;/li>
&lt;li>Lazy matches for all of those&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>Most of those were fairly straight forward extensions of previous code. In think the most interesting ones were handling the parsing of all the different things that can go in groups (including flags).&lt;/p>
&lt;p>For each of them, you can check my &lt;a href="https://github.com/jpverkamp/jp-grep/commits/main/" target="_blank" rel="noopener">git commit history&lt;/a> to see how I implemented specific things. It&amp;rsquo;s mostly one commit per feature, but not always.&lt;/p>
&lt;h2 id="unsupported-regex-features-so-far">Unsupported Regex Features (so far!)&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>Assertions:&lt;/p>
&lt;ul>
&lt;li>Word boundaries (&lt;code>\b&lt;/code> and &lt;code>\B&lt;/code>)&lt;/li>
&lt;li>Look ahead/behind (parsed but not matched)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>Character classes&lt;/p>
&lt;ul>
&lt;li>&lt;code>[\b]&lt;/code> for backspace characters&lt;/li>
&lt;li>Long unicode format: &lt;code>\u{XXXXX}&lt;/code>&lt;/li>
&lt;li>Unicode properties: &lt;code>\p{...}&lt;/code>/&lt;code>\P{...}&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>Groups and back references:&lt;/p>
&lt;ul>
&lt;li>&lt;code>m&lt;/code> flag / mode: multiline matches&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>The look ahead/behind is the one I&amp;rsquo;m most interested in supporting. I don&amp;rsquo;t even think it will be that hard, I just honestly missed it.&lt;/p>
&lt;p>The more interesting one will be the &lt;code>m&lt;/code> flag. Currently, I only match lines, so that will be a decently large restructuring. We&amp;rsquo;ll see.&lt;/p>
&lt;h2 id="supported-cli-flags">Supported CLI flags&lt;/h2>
&lt;p>I&amp;rsquo;ve made an awful lot of progress on this one too!&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ jp-grep --help
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>A custom grep implementation; always behaves as egrep
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Usage: jp-grep &lt;span style="color:#f92672">[&lt;/span>OPTIONS&lt;span style="color:#f92672">]&lt;/span> &lt;span style="color:#f92672">[&lt;/span>PATTERN&lt;span style="color:#f92672">]&lt;/span> &lt;span style="color:#f92672">[&lt;/span>PATHS&lt;span style="color:#f92672">]&lt;/span>...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Arguments:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">[&lt;/span>PATTERN&lt;span style="color:#f92672">]&lt;/span> The regular expression to evaluate; may also be specified with -e
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">[&lt;/span>PATHS&lt;span style="color:#f92672">]&lt;/span>... Paths to search &lt;span style="color:#66d9ef">for&lt;/span> matches; &lt;span style="color:#66d9ef">if&lt;/span> none are provided read from stdin
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Options:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> -A, --after-context &amp;lt;AFTER_CONTEXT&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Lines of context to print after each match
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> -B, --before-context &amp;lt;BEFORE_CONTEXT&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Lines of context to print before each match
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> -C, --context &amp;lt;CONTEXT&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Lines to print both before and after
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> -c, --count
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Only print the matching count
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> -E, --extended-regexp
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Extended regex mode &lt;span style="color:#f92672">(&lt;/span>egrep&lt;span style="color:#f92672">)&lt;/span>; this option is ignored &lt;span style="color:#f92672">(&lt;/span>always true&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> -e, --regexp &amp;lt;ADDITIONAL_PATTERNS&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Additional patterns, will &lt;span style="color:#66d9ef">return&lt;/span> a line &lt;span style="color:#66d9ef">if&lt;/span> any match
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> -h, --no-filename
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Never print filenames
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> --help
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Display this help message
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> -i, --ignore-case
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Default to &lt;span style="color:#66d9ef">case&lt;/span> insensitive match
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> -n, --line-number
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Print line numbers before matches and context
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> -r, --recursive
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Recursively add any directories &lt;span style="color:#f92672">(&lt;/span>-R also works&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> -v, --invert-match
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Invert the match; only print lines that don&lt;span style="color:#960050;background-color:#1e0010">&amp;#39;&lt;/span>t match any pattern
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> -V, --version
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Print version
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Of those, the context flags (&lt;code>-A&lt;/code>, &lt;code>-B&lt;/code>, and &lt;code>-C&lt;/code>) were probably the most tricky, since I basically had to implement a &lt;a href="https://en.wikipedia.org/wiki/circular%20buffer">circular buffer&lt;/a> for them. I could have just read the entire file into memory, but from the beginning, I didn&amp;rsquo;t want to do that.&lt;/p>
&lt;p>&lt;code>-E&lt;/code> is a little silly, since that&amp;rsquo;s the only &lt;code>grep&lt;/code> pattern I support (and the only one I actually use in &lt;code>grep&lt;/code>, so that&amp;rsquo;s fair).&lt;/p>
&lt;p>So far as supporting multiple files, recursive search, and stdin, read the section on &lt;a href="#collecting-files">collecting files&lt;/a> later.&lt;/p>
&lt;p>So far as printing (handling line numbers and file names), read the section on &lt;a href="#printing-lines">printing lines&lt;/a>.&lt;/p>
&lt;p>Overall, pretty fun code.&lt;/p>
&lt;h2 id="unsupported-cli-flags">Unsupported CLI flags&lt;/h2>
&lt;p>So far, there are a bunch of flags that I don&amp;rsquo;t support for grep. Of those, there are a bunch that I don&amp;rsquo;t intend to support (like built in compression support and properly dealing with symlinks).&lt;/p>
&lt;p>The things that I would still like to support though are:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Input options:&lt;/p>
&lt;ul>
&lt;li>&lt;code>-f file&lt;/code>/&lt;code>--file=file&lt;/code> - Read patterns from file&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>Output options:&lt;/p>
&lt;ul>
&lt;li>&lt;code>-a&lt;/code>/&lt;code>--text&lt;/code> - Currently I always have this set; I don&amp;rsquo;t treat binary files differently&lt;/li>
&lt;li>&lt;code>-L&lt;/code>/&lt;code>--files-without-match&lt;/code> - only print files that don&amp;rsquo;t match&lt;/li>
&lt;li>&lt;code>-o&lt;/code>/&lt;code>--only-matching&lt;/code> - only print the matching groups; I have the groups for backreferences, use them!&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>File filtering - files to include/exclude (useful with recursive matches):&lt;/p>
&lt;ul>
&lt;li>&lt;code>--exclude pattern&lt;/code>&lt;/li>
&lt;li>&lt;code>--exclude-dir pattern&lt;/code>&lt;/li>
&lt;li>&lt;code>--include pattern&lt;/code>&lt;/li>
&lt;li>&lt;code>--include-dir pattern&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>That&amp;rsquo;s not too bad, all things consider.&lt;/p>
&lt;h2 id="error-handling">Error handling&lt;/h2>
&lt;p>One thing that I actually played a bit with this time around was custom error handling in the parser. Rather than just returning &lt;code>&amp;amp;str&lt;/code> all over the place for &lt;code>Err&lt;/code> types, I made my own:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#[derive(Debug, Clone, Copy, PartialEq, Eq)]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">pub&lt;/span>(&lt;span style="color:#66d9ef">crate&lt;/span>) &lt;span style="color:#66d9ef">enum&lt;/span> &lt;span style="color:#a6e22e">ParserError&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> RemainingInput,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> UnexpectedEnd,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> InvalidCharacter(&lt;span style="color:#66d9ef">char&lt;/span>, &lt;span style="color:#f92672">&amp;amp;&lt;/span>&amp;#39;static &lt;span style="color:#66d9ef">str&lt;/span>),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> InvalidUnicodeCodePoint(&lt;span style="color:#66d9ef">u32&lt;/span>),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> InvalidRange(&lt;span style="color:#66d9ef">char&lt;/span>, &lt;span style="color:#66d9ef">char&lt;/span>),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> InvalidRepeatRange(&lt;span style="color:#66d9ef">u32&lt;/span>, &lt;span style="color:#66d9ef">u32&lt;/span>),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">impl&lt;/span> std::fmt::Display &lt;span style="color:#66d9ef">for&lt;/span> ParserError {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">fn&lt;/span> &lt;span style="color:#a6e22e">fmt&lt;/span>(&lt;span style="color:#f92672">&amp;amp;&lt;/span>self, f: &lt;span style="color:#66d9ef">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">mut&lt;/span> std::fmt::Formatter&lt;span style="color:#f92672">&amp;lt;&lt;/span>&amp;#39;_&lt;span style="color:#f92672">&amp;gt;&lt;/span>) -&amp;gt; &lt;span style="color:#a6e22e">std&lt;/span>::fmt::Result {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">match&lt;/span> self {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ParserError::RemainingInput &lt;span style="color:#f92672">=&amp;gt;&lt;/span> write!(f, &lt;span style="color:#e6db74">&amp;#34;Unexpected input after parsing&amp;#34;&lt;/span>),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ParserError::UnexpectedEnd &lt;span style="color:#f92672">=&amp;gt;&lt;/span> write!(f, &lt;span style="color:#e6db74">&amp;#34;Unexpected end of input&amp;#34;&lt;/span>),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ParserError::InvalidCharacter(c, expected) &lt;span style="color:#f92672">=&amp;gt;&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> write!(f, &lt;span style="color:#e6db74">&amp;#34;Invalid character &amp;#39;{}&amp;#39;, expected {}&amp;#34;&lt;/span>, c, expected)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ParserError::InvalidUnicodeCodePoint(code_point) &lt;span style="color:#f92672">=&amp;gt;&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> write!(f, &lt;span style="color:#e6db74">&amp;#34;Invalid unicode code point: {}&amp;#34;&lt;/span>, code_point)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ParserError::InvalidRange(start, end) &lt;span style="color:#f92672">=&amp;gt;&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> write!(f, &lt;span style="color:#e6db74">&amp;#34;Invalid range: {}-{}&amp;#34;&lt;/span>, start, end)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ParserError::InvalidRepeatRange(start, end) &lt;span style="color:#f92672">=&amp;gt;&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> write!(f, &lt;span style="color:#e6db74">&amp;#34;Invalid range: {}-{}&amp;#34;&lt;/span>, start, end)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#[derive(Debug, Clone, Copy, PartialEq, Eq)]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">pub&lt;/span>(&lt;span style="color:#66d9ef">crate&lt;/span>) &lt;span style="color:#66d9ef">struct&lt;/span> &lt;span style="color:#a6e22e">ParserErrorWithPosition&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">pub&lt;/span> position: &lt;span style="color:#66d9ef">usize&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">pub&lt;/span> error: &lt;span style="color:#a6e22e">ParserError&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The &lt;code>WithPosition&lt;/code> type also lets me pinpoint exactly where in a pattern I failed:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>jp&lt;span style="color:#f92672">-&lt;/span>grep &lt;span style="color:#a6e22e">&amp;#39;this&lt;/span> is some long complicated pattern, &lt;span style="color:#960050;background-color:#1e0010">\&lt;/span>hXX see&lt;span style="color:#f92672">?&lt;/span>&lt;span style="color:#a6e22e">&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Error parsing regex: &lt;span style="color:#a6e22e">Invalid&lt;/span> character &lt;span style="color:#e6db74">&amp;#39;X&amp;#39;&lt;/span>, expected hex digit
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">|&lt;/span> this is some long complicated pattern, &lt;span style="color:#960050;background-color:#1e0010">\&lt;/span>hXX see&lt;span style="color:#f92672">?&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">|&lt;/span> &lt;span style="color:#f92672">^&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>That&amp;rsquo;s pretty neat and I hope helpful! ðŸ˜„&lt;/p>
&lt;h2 id="expanding-past-codecrafters">Expanding past CodeCrafters&lt;/h2>
&lt;p>Overall, I&amp;rsquo;m pretty happy with this project. It&amp;rsquo;s got a pretty decent chunk of code, including&amp;hellip;&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ jp-grep -c -v -e &lt;span style="color:#e6db74">&amp;#39;//&amp;#39;&lt;/span> -e &lt;span style="color:#e6db74">&amp;#39;^\s*$&amp;#39;&lt;/span> **/*.rs
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">1241&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&amp;hellip;over 1000 lines of Rust code, including tests but not blank lines or comments. ðŸ˜„&lt;/p>
&lt;p>I&amp;rsquo;ll probably pick this up at least once more.&lt;/p>
&lt;p>Now&amp;hellip; will I actually use this? Probably not. But it was certainly interesting to write.&lt;/p>
&lt;p>Other than that, was CodeCrafters actually helpful for this? Middling. It was the kick I needed to actually do it (I&amp;rsquo;ve been meaning to write this for &lt;em>years&lt;/em> at this point) and once I was started, I could finish it. On the other hand, the output format they require was a bit annoying at times, I&amp;rsquo;ve mostly moved away from that.&lt;/p>
&lt;p>Still, worth I think. I&amp;rsquo;ll probably continue to do their free programs. Kafka is up next. Whee servers!&lt;/p></description></item><item><title>CodeCrafters: Build Myself an Interpreter</title><link>https://blog.jverkamp.com/2024/09/04/codecrafters-build-myself-an-interpreter/</link><pubDate>Wed, 04 Sep 2024 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2024/09/04/codecrafters-build-myself-an-interpreter/</guid><description>Didn&amp;rsquo;t I just do one of these? Well, yes. Yes I did. But I love building compilers and interpreters, so when I saw this one was in beta (and thus free ðŸ˜‰), I had to try it!
It&amp;rsquo;s directly an implemention of the Lox languages from the Crafting Interpreters website / book (my review), if incomplete. By the end of the lesson, we&amp;rsquo;ll have:
A tokenizer that handles parentheses, braces, operators (single and multiple character), whitespace, identifiers, string literals, numeric literals, and keywords A parser that can take those tokens and build an abstract syntax tree using recursive descent parsing A simple tree walking interpreter for some subset of the language It doesn&amp;rsquo;t handle all of the syntax (yet).</description></item><item><title>Solving Cosmic Express</title><link>https://blog.jverkamp.com/2024/09/02/solving-cosmic-express/</link><pubDate>Mon, 02 Sep 2024 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2024/09/02/solving-cosmic-express/</guid><description>&lt;p>Another &lt;a href="https://blog.jverkamp.com/series/rust-solvers/">Rust Solvers&lt;/a> puzzle: &lt;a href="https://store.steampowered.com/app/583270/Cosmic_Express/" target="_blank" rel="noopener">Cosmic Express&lt;/a>. Basically, it&amp;rsquo;s a routefinding puzzle. You have a train that needs a track from entrance to exit, picking up and dropping off cargo on the way.&lt;/p>
&lt;p>It&amp;rsquo;s actual a relatively simple puzzle, so far as things go, but one thing that&amp;rsquo;s interesting from a solving perspective is that branching paths &lt;em>really&lt;/em> don&amp;rsquo;t work great with my solver code. Paths just have a crazy branching factor when compared to (for example) &lt;a href="https://blog.jverkamp.com/2024/06/17/the-golf-peaks-of-solving/">playing one of a handful of cards&lt;/a>.&lt;/p>
&lt;p>But it&amp;rsquo;s still an interesting puzzle!&lt;/p></description></item><item><title>CodeCrafters: Build Myself a Grep</title><link>https://blog.jverkamp.com/2024/08/28/codecrafters-build-myself-a-grep/</link><pubDate>Wed, 28 Aug 2024 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2024/08/28/codecrafters-build-myself-a-grep/</guid><description>&lt;p>I recently stumbled across &lt;a href="https://codecrafters.io/" target="_blank" rel="noopener">CodeCrafters&lt;/a> again&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>. In a nutshell, they give a number of &amp;lsquo;Build Your Own&amp;hellip;&amp;rsquo; courses, each of which will automatically create a repo for you, guide you through solving the program step by step, and provide some feedback on the way.&lt;/p>
&lt;p>On one hand, it&amp;rsquo;s a freemium (one problem a month is free) / paid service. I wish they had tiers. I really think their monthly fee is a bit steep for what they offer (we&amp;rsquo;ll come back to that). But on the other hand, it&amp;rsquo;s a neat tool and I&amp;rsquo;ve been wanting some more larger programming projects to learn more Rust on, so away we go!&lt;/p>
&lt;p>First up, &lt;a href="https://en.wikipedia.org/wiki/grep">grep&lt;/a>!&lt;/p></description></item><item><title>TestIT - Integration Testing for My Rust Solvers</title><link>https://blog.jverkamp.com/2024/08/19/testit-integration-testing-for-my-rust-solvers/</link><pubDate>Mon, 19 Aug 2024 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2024/08/19/testit-integration-testing-for-my-rust-solvers/</guid><description>&lt;p>One of the problems (of a sorts) I&amp;rsquo;ve been having with my series on &lt;a href="https://blog.jverkamp.com/series/rust-solvers/">Rust Solvers&lt;/a> is that, for each input puzzle, I need a way to save one or more &amp;lsquo;known good&amp;rsquo; solutions so that when I change and add new functionality, I can verify that I&amp;rsquo;ve either not changed the solution or found another valid one.&lt;/p>
&lt;p>&lt;a href="https://en.wikipedia.org/wiki/Integration%20tests">Integration tests&lt;/a> as it were.&lt;/p>
&lt;p>So far, I&amp;rsquo;d been building this &lt;a href="https://github.com/jpverkamp/rust-solvers/blob/ab65482417d0edfb9f24887d41ba3c724e4346e3/src/bin/golf-peaks.rs#L1064-L1202" target="_blank" rel="noopener">into each solution&lt;/a>. While this worked perfectly fine, it&amp;rsquo;s a bit annoying to copy and paste to each binary, and then have to edit each test case with the answers.&lt;/p>
&lt;nav id="TableOfContents">
&lt;ul>
&lt;li>&lt;a href="#an-example-run">An example run&lt;/a>&lt;/li>
&lt;li>&lt;a href="#command-line-options">Command line options&lt;/a>&lt;/li>
&lt;li>&lt;a href="#test-file-collection">Test file collection&lt;/a>&lt;/li>
&lt;li>&lt;a href="#parallel-execution--building-the-command">Parallel Execution + Building the Command&lt;/a>&lt;/li>
&lt;li>&lt;a href="#running-each-command-with-a-timeout">Running each command with a timeout&lt;/a>&lt;/li>
&lt;li>&lt;a href="#collecting-the-results">Collecting the results&lt;/a>&lt;/li>
&lt;li>&lt;a href="#summary">Summary&lt;/a>&lt;/li>
&lt;/ul>
&lt;/nav>
&lt;h2 id="an-example-run">An example run&lt;/h2>
&lt;p>Enter: &lt;a href="https://github.com/jpverkamp/testit" target="_blank" rel="noopener">testit&lt;/a>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># First run, without --db/--save for previous runs&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ testit &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> --command &lt;span style="color:#e6db74">&amp;#34;./target/release/golf-peaks&amp;#34;&lt;/span> &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> --files &lt;span style="color:#e6db74">&amp;#34;data/golf-peaks/**/*.txt&amp;#34;&lt;/span> &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> --timeout &lt;span style="color:#ae81ff">60&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>data/golf-peaks/1-1.txt: New success:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>1-â†—
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">===&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>data/golf-peaks/1-10.txt: New success:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>1-â†˜ 3-â†™ 2-â†˜
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">===&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>data/golf-peaks/9-8.txt: New success:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>1/3-â†˜ 1/2-â†– 1/â†— 2/1-â†– 1/1-â†—
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">===&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>data/golf-peaks/9-9.txt: New success:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>1-â†— 1/â†˜ 1-â†˜ 4-â†— 3-â†˜ 1/1-â†—
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">===&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>data/golf-peaks/Credits.txt: New success:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>4-â†– 5-â†— 3-â†— 6-â†˜
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">===&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Summary:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Successes: &lt;span style="color:#ae81ff">121&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#ae81ff">121&lt;/span> new&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Failures: &lt;span style="color:#ae81ff">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Timeouts: &lt;span style="color:#ae81ff">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># Later runs&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ testit &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> --command &lt;span style="color:#e6db74">&amp;#34;./target/release/golf-peaks&amp;#34;&lt;/span> &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> --files &lt;span style="color:#e6db74">&amp;#34;data/golf-peaks/**/*.txt&amp;#34;&lt;/span> &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> --timeout &lt;span style="color:#ae81ff">60&lt;/span> &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> --db testit/golf-peaks.json &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> --save
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Summary:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Successes: &lt;span style="color:#ae81ff">121&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span> new&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Failures: &lt;span style="color:#ae81ff">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Timeouts: &lt;span style="color:#ae81ff">0&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Pretty cool, I do think. ðŸ˜„&lt;/p></description></item><item><title>The Golf (Peaks) of Solving</title><link>https://blog.jverkamp.com/2024/06/17/the-golf-peaks-of-solving/</link><pubDate>Mon, 17 Jun 2024 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2024/06/17/the-golf-peaks-of-solving/</guid><description>&lt;p>Another day (week? month?), another puzzle game.&lt;/p>
&lt;p>This time around, we&amp;rsquo;re going to solve &lt;a href="https://store.steampowered.com/app/923260/Golf_Peaks/" target="_blank" rel="noopener">Golf Peaks&lt;/a>. I picked this up a while ago on iOS, but only recently on Steam. It&amp;rsquo;s a cute little puzzle game themed around minigolf.&lt;/p>
&lt;p>&lt;img src="1.7-slopes.png" alt="">&lt;/p>
&lt;p>Basically, you&amp;rsquo;re on a grid and you have to get the ball (in the bottom in that screenshot above) to the flag (currently at the top). You have a set list of moves you can take, styled as cards&amp;ndash;all of which either move a certain number of tiles in a specific direction or possibly jump into the air (and fly over obstacles).&lt;/p>
&lt;p>It gets more complicated from there, but hopefully you have the basic idea. ðŸ˜„&lt;/p></description></item><item><title>Solving Sokobond</title><link>https://blog.jverkamp.com/2024/04/06/solving-sokobond/</link><pubDate>Sat, 06 Apr 2024 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2024/04/06/solving-sokobond/</guid><description>&lt;p>Another solver that I&amp;rsquo;ve been working on, after &lt;a href="https://blog.jverkamp.com/2024/03/28/a-good-snowman-is-hard-to-...-solve/">A Good Snowman Is Hard To &amp;hellip; Solve?&lt;/a>. This time, we have &lt;a href="https://store.steampowered.com/app/290260/Sokobond/" target="_blank" rel="noopener">Sokobond&lt;/a>! It&amp;rsquo;s a &lt;a href="https://en.wikipedia.org/wiki/Sokobon">Sokobon&lt;/a>&amp;hellip; but with chemical bonds! Yeah, that&amp;rsquo;s a really good title.&lt;/p>
&lt;p>The basic idea is you have a field of elements with (chemical accurate) free electrons):&lt;/p>
&lt;p>&lt;img src="basic-image.png" alt="A basic level">&lt;/p>
&lt;p>Here we have 4 hydrogens (1 bond each) and a carbon (4 bonds). It should seem pretty obvious that the carbon should end up with a hydrogen on each end. The one last bit of interest: the element with the dashed border is the one we actually control, that will never change.&lt;/p>
&lt;p>This eventually gets more complicated, adding:&lt;/p>
&lt;ul>
&lt;li>Modifiers that are placed on the map between squares:
&lt;ul>
&lt;li>One that strengthens bonds, turning a single bond into double into triple&lt;/li>
&lt;li>One that weakens bonds, turning triple to double to single or breaking single bonds&lt;/li>
&lt;li>One that rotates bonds as you move by it&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>More elements, eventually hydrogen (1), oxygen (2), nitrogen (3), carbon (4), and helium (0)&lt;/li>
&lt;li>Solutions that require forming multiple elements at the same time&lt;/li>
&lt;/ul>
&lt;p>It&amp;rsquo;s a pretty neat puzzle game with 144 levels of increasing difficulty. Perfect to solve.&lt;/p>
&lt;hr></description></item><item><title>A Good Snowman Is Hard To ... Solve?</title><link>https://blog.jverkamp.com/2024/03/28/a-good-snowman-is-hard-to-...-solve/</link><pubDate>Thu, 28 Mar 2024 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2024/03/28/a-good-snowman-is-hard-to-...-solve/</guid><description>&lt;p>I enjoy puzzle games. I especially enjoy letting computers solve them for me ðŸ˜„. Once upon a time, I set up a &lt;a href="https://blog.jverkamp.com/2022/10/16/stateful-solvers-and-iterators/">framework for solving random things&lt;/a>. Let&amp;rsquo;s solve some more.&lt;/p>
&lt;p>Today: &lt;a href="https://store.steampowered.com/app/316610/A_Good_Snowman_Is_Hard_To_Build/" target="_blank" rel="noopener">A Good Snowman Is Hard To Build&lt;/a>&lt;/p>
&lt;p>It&amp;rsquo;s a &lt;a href="https://en.wikipedia.org/wiki/Sokoban">Sokoban&lt;/a> about making snowmen! You can push snowballs of three sizes around, collecting snow if you roll over it. You can push smaller snowballs onto bigger ones, stacking them. Or back off, in order to get around one another.&lt;/p>
&lt;p>And that&amp;rsquo;s really it.&lt;/p>
&lt;p>There are some interesting twists (multiple snowmen, the ability to leave and re-enter levels, and even a whole second &amp;lsquo;hard mode&amp;rsquo;), but at a basic level, it&amp;rsquo;s just pushing.&lt;/p></description></item><item><title>Infinite Craft Bot</title><link>https://blog.jverkamp.com/2024/03/14/infinite-craft-bot/</link><pubDate>Thu, 14 Mar 2024 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2024/03/14/infinite-craft-bot/</guid><description>&lt;p>You&amp;rsquo;ve probably seen &lt;a href="https://neil.fun" target="_blank" rel="noopener">Neil.fun&lt;/a>&amp;rsquo;s &lt;a href="https://neal.fun/infinite-craft/" target="_blank" rel="noopener">Infinite Craft&lt;/a> game somewhere on the internet. If not, in a nutshell:&lt;/p>
&lt;ul>
&lt;li>You start with 4 blocks: &lt;code>Earth&lt;/code>, &lt;code>Fire&lt;/code>, &lt;code>Water&lt;/code>, and &lt;code>Wind&lt;/code>.&lt;/li>
&lt;li>You can combine any two blocks, for example:
&lt;ul>
&lt;li>&lt;code>Earth + Water = Plant&lt;/code>&lt;/li>
&lt;li>&lt;code>Plant + Fire = Smoke&lt;/code>&lt;/li>
&lt;li>&lt;code>Smoke + Smoke = Cloud&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>That&amp;rsquo;s&amp;hellip; pretty much it, from a gameplay perspective. There&amp;rsquo;s not really any goal, other than what you set yourself (try to make Cthulhu!). Although if you manage to find something no one has ever made before, you get a neat little note for it!&lt;/p>
&lt;p>So wait, what do I mean by &amp;lsquo;something no one has ever seen before&amp;rsquo;?&lt;/p>
&lt;p>Well, if two elements have ever been combined by anyone before, you get a cached response. Barring resets of the game (no idea if / how often this has happened, but I assume it has), if &lt;code>A + B = C&lt;/code> for you, &lt;code>A + B = C&lt;/code> for everyone.&lt;/p>
&lt;p>And here&amp;rsquo;s the fun part: if you find a combination no one has ever found before: &lt;code>Neil.fun&lt;/code> will send the combination out to an LLM to generate the new answer. The specific prompt isn&amp;rsquo;t public (so far as I know), but essentially what that means is that you have a basically infinite crafting tree&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>!&lt;/p>
&lt;p>So of course seeing something like this I want to automate it. ðŸ˜„&lt;/p>
&lt;hr></description></item><item><title>Advent of Code 2023 - Testing and Timing</title><link>https://blog.jverkamp.com/2023/12/28/advent-of-code-2023-testing-and-timing/</link><pubDate>Thu, 28 Dec 2023 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2023/12/28/advent-of-code-2023-testing-and-timing/</guid><description>&lt;p>A quick follow up to &lt;a href="https://blog.jverkamp.com/series/advent-of-code-2023/">Advent of Code 2023&lt;/a>: testing and timing.&lt;/p>
&lt;p>It&amp;rsquo;s been bothering me a bit that I haven&amp;rsquo;t had a generic way to run tests and timing on every problem as I&amp;rsquo;m going.&lt;/p>
&lt;p>So let&amp;rsquo;s fix it!&lt;/p>
&lt;nav id="TableOfContents">
&lt;ul>
&lt;li>&lt;a href="#testing">Testing&lt;/a>&lt;/li>
&lt;li>&lt;a href="#timing">Timing&lt;/a>&lt;/li>
&lt;li>&lt;a href="#summary">Summary&lt;/a>&lt;/li>
&lt;/ul>
&lt;/nav></description></item><item><title>AoC 2023 Day 25: Graph Splitinator</title><link>https://blog.jverkamp.com/2023/12/25/aoc-2023-day-25-graph-splitinator/</link><pubDate>Mon, 25 Dec 2023 00:00:03 +0000</pubDate><guid>https://blog.jverkamp.com/2023/12/25/aoc-2023-day-25-graph-splitinator/</guid><description>&lt;h2 id="source-day-25-snowverloadhttpsadventofcodecom2023day25">Source: &lt;a href="https://adventofcode.com/2023/day/25" target="_blank" rel="noopener">Day 25: Snowverload&lt;/a>&lt;/h2>
&lt;p>&lt;a href="https://github.com/jpverkamp/advent-of-code/tree/master/2023/solutions/day25" target="_blank" rel="noopener">Full solution&lt;/a> for today (spoilers!)&lt;/p>
&lt;nav id="TableOfContents">
&lt;ul>
&lt;li>&lt;a href="#source-day-25-snowverloadhttpsadventofcodecom2023day25">Source: &lt;a href="https://adventofcode.com/2023/day/25">Day 25: Snowverload&lt;/a>&lt;/a>&lt;/li>
&lt;li>&lt;a href="#part-1">Part 1&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#parsing">Parsing&lt;/a>&lt;/li>
&lt;li>&lt;a href="#solution-1-brute-force">Solution 1: Brute Force&lt;/a>&lt;/li>
&lt;li>&lt;a href="#a-dot-graph">A dot graph&lt;/a>&lt;/li>
&lt;li>&lt;a href="#solution-2-calculate-heavy-edges">Solution 2: Calculate &amp;lsquo;heavy&amp;rsquo; edges&lt;/a>&lt;/li>
&lt;li>&lt;a href="#a-better-n">A better N&lt;/a>&lt;/li>
&lt;li>&lt;a href="#performance">Performance&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#part-2">Part 2&lt;/a>&lt;/li>
&lt;/ul>
&lt;/nav>
&lt;h2 id="part-1">Part 1&lt;/h2>
&lt;blockquote>
&lt;p>Given an &lt;a href="https://en.wikipedia.org/wiki/undirected%20graph">undirected graph&lt;/a>, find 3 edges that split the graph into two &lt;a href="https://en.wikipedia.org/wiki/connected%20components">connected components&lt;/a>. Return the product of the component&amp;rsquo;s sizes.&lt;/p>
&lt;/blockquote></description></item><item><title>AoC 2023 Day 24: Collisionator</title><link>https://blog.jverkamp.com/2023/12/24/aoc-2023-day-24-collisionator/</link><pubDate>Sun, 24 Dec 2023 00:00:03 +0000</pubDate><guid>https://blog.jverkamp.com/2023/12/24/aoc-2023-day-24-collisionator/</guid><description>&lt;h2 id="source-day-24-never-tell-me-the-oddshttpsadventofcodecom2023day24">Source: &lt;a href="https://adventofcode.com/2023/day/24" target="_blank" rel="noopener">Day 24: Never Tell Me The Odds&lt;/a>&lt;/h2>
&lt;p>&lt;a href="https://github.com/jpverkamp/advent-of-code/tree/master/2023/solutions/day24" target="_blank" rel="noopener">Full solution&lt;/a> for today (spoilers!)&lt;/p>
&lt;nav id="TableOfContents">
&lt;ul>
&lt;li>&lt;a href="#source-day-24-never-tell-me-the-oddshttpsadventofcodecom2023day24">Source: &lt;a href="https://adventofcode.com/2023/day/24">Day 24: Never Tell Me The Odds&lt;/a>&lt;/a>&lt;/li>
&lt;li>&lt;a href="#part-1">Part 1&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#parsing-and-types">Parsing and Types&lt;/a>&lt;/li>
&lt;li>&lt;a href="#xy-intersections">XY Intersections&lt;/a>&lt;/li>
&lt;li>&lt;a href="#solution">Solution&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#part-2">Part 2&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#solution-1-brute-force">Solution 1: Brute Force&lt;/a>&lt;/li>
&lt;li>&lt;a href="#solution-2-using-z3">Solution 2: Using Z3&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#performance">Performance&lt;/a>&lt;/li>
&lt;/ul>
&lt;/nav>
&lt;h2 id="part-1">Part 1&lt;/h2>
&lt;blockquote>
&lt;p>Given a set of 3D vectors (origin + velocity), count how many times the vectors would intersect. Ignore the Z-coordinate for this part; the collisions do not have to be at the same time.&lt;/p>
&lt;/blockquote></description></item><item><title>AoC 2023 Day 23: Looong Mazinator</title><link>https://blog.jverkamp.com/2023/12/23/aoc-2023-day-23-looong-mazinator/</link><pubDate>Sat, 23 Dec 2023 00:00:03 +0000</pubDate><guid>https://blog.jverkamp.com/2023/12/23/aoc-2023-day-23-looong-mazinator/</guid><description>&lt;h2 id="source-day-23-a-long-walkhttpsadventofcodecom2023day23">Source: &lt;a href="https://adventofcode.com/2023/day/23" target="_blank" rel="noopener">Day 23: A Long Walk&lt;/a>&lt;/h2>
&lt;p>&lt;a href="https://github.com/jpverkamp/advent-of-code/tree/master/2023/solutions/day23" target="_blank" rel="noopener">Full solution&lt;/a> for today (spoilers!)&lt;/p>
&lt;nav id="TableOfContents">
&lt;ul>
&lt;li>&lt;a href="#source-day-23-a-long-walkhttpsadventofcodecom2023day23">Source: &lt;a href="https://adventofcode.com/2023/day/23">Day 23: A Long Walk&lt;/a>&lt;/a>&lt;/li>
&lt;li>&lt;a href="#part-1">Part 1&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#edit-1-petgraph">Edit 1: Petgraph&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#part-2">Part 2&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#solution-1-brute-force">Solution 1: Brute force&lt;/a>&lt;/li>
&lt;li>&lt;a href="#solution-2-a-better-path">Solution 2: A better &lt;code>Path&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="#solution-3-finding-points-of-interest">Solution 3: Finding points of interest&lt;/a>&lt;/li>
&lt;li>&lt;a href="#edit-1-more-petgraph">Edit 1: More petgraph!&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#performance">Performance&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#edit-1-petgraph-performance">Edit 1: Petgraph performance&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/nav>
&lt;h2 id="part-1">Part 1&lt;/h2>
&lt;blockquote>
&lt;p>Find the longest non-overlapping path through a maze with walls (&lt;code>#&lt;/code>) and one way paths (&lt;code>^v&amp;lt;&amp;gt;&lt;/code>).&lt;/p>
&lt;/blockquote></description></item><item><title>AoC 2023 Day 22: Block Dropinator</title><link>https://blog.jverkamp.com/2023/12/22/aoc-2023-day-22-block-dropinator/</link><pubDate>Fri, 22 Dec 2023 00:00:03 +0000</pubDate><guid>https://blog.jverkamp.com/2023/12/22/aoc-2023-day-22-block-dropinator/</guid><description>&lt;h2 id="source-day-22-sand-slabshttpsadventofcodecom2023day22">Source: &lt;a href="https://adventofcode.com/2023/day/22" target="_blank" rel="noopener">Day 22: Sand Slabs&lt;/a>&lt;/h2>
&lt;p>&lt;a href="https://github.com/jpverkamp/advent-of-code/tree/master/2023/solutions/day22" target="_blank" rel="noopener">Full solution&lt;/a> for today (spoilers!)&lt;/p>
&lt;nav id="TableOfContents">
&lt;ul>
&lt;li>&lt;a href="#source-day-22-sand-slabshttpsadventofcodecom2023day22">Source: &lt;a href="https://adventofcode.com/2023/day/22">Day 22: Sand Slabs&lt;/a>&lt;/a>&lt;/li>
&lt;li>&lt;a href="#part-1">Part 1&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#types-and-parsing">Types and Parsing&lt;/a>&lt;/li>
&lt;li>&lt;a href="#solution">Solution&lt;/a>&lt;/li>
&lt;li>&lt;a href="#edit-1-now-with-faster-dropping">Edit 1, Now with faster dropping&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#part-2">Part 2&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#heading">&lt;/a>&lt;/li>
&lt;li>&lt;a href="#trying-other-datatypes">Trying other datatypes&lt;/a>&lt;/li>
&lt;li>&lt;a href="#remove-debugging">Remove debugging&lt;/a>&lt;/li>
&lt;li>&lt;a href="#edit-1-using-fast-drop">Edit 1, Using fast drop&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#performance">Performance&lt;/a>&lt;/li>
&lt;/ul>
&lt;/nav>
&lt;h2 id="part-1">Part 1&lt;/h2>
&lt;blockquote>
&lt;p>Given a series of 3D blocks, allow them to fall until the simulation is stable. Any cube of a block is sufficient to support another block, ignore rotations etc.&lt;/p>
&lt;p>How many blocks are not the sole supporter for any other block?&lt;/p>
&lt;/blockquote></description></item><item><title>AoC 2023 Day 21: Step Step Stepinator</title><link>https://blog.jverkamp.com/2023/12/21/aoc-2023-day-21-step-step-stepinator/</link><pubDate>Thu, 21 Dec 2023 00:00:03 +0000</pubDate><guid>https://blog.jverkamp.com/2023/12/21/aoc-2023-day-21-step-step-stepinator/</guid><description>&lt;h2 id="source-day-21-step-counterhttpsadventofcodecom2023day21">Source: &lt;a href="https://adventofcode.com/2023/day/21" target="_blank" rel="noopener">Day 21: Step Counter&lt;/a>&lt;/h2>
&lt;p>&lt;a href="https://github.com/jpverkamp/advent-of-code/tree/master/2023/solutions/day21" target="_blank" rel="noopener">Full solution&lt;/a> for today (spoilers!)&lt;/p>
&lt;nav id="TableOfContents">
&lt;ul>
&lt;li>&lt;a href="#source-day-21-step-counterhttpsadventofcodecom2023day21">Source: &lt;a href="https://adventofcode.com/2023/day/21">Day 21: Step Counter&lt;/a>&lt;/a>&lt;/li>
&lt;li>&lt;a href="#part-1">Part 1&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#parsing">Parsing&lt;/a>&lt;/li>
&lt;li>&lt;a href="#solution">Solution&lt;/a>&lt;/li>
&lt;li>&lt;a href="#re-calculating-bounds">Re-calculating Bounds&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#part-2">Part 2&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#brute-force">Brute Force&lt;/a>&lt;/li>
&lt;li>&lt;a href="#solution-1">Solution&lt;/a>&lt;/li>
&lt;li>&lt;a href="#another-option">Another option&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#performance">Performance&lt;/a>&lt;/li>
&lt;/ul>
&lt;/nav>
&lt;h2 id="part-1">Part 1&lt;/h2>
&lt;blockquote>
&lt;p>Given a(n infinite) grid of walls &lt;code>#&lt;/code>, count how many points can be reached by exactly 64 steps from a starting point.&lt;/p>
&lt;/blockquote></description></item><item><title>AoC 2023 Day 20: Flip-Flopinator</title><link>https://blog.jverkamp.com/2023/12/20/aoc-2023-day-20-flip-flopinator/</link><pubDate>Wed, 20 Dec 2023 00:00:03 +0000</pubDate><guid>https://blog.jverkamp.com/2023/12/20/aoc-2023-day-20-flip-flopinator/</guid><description>&lt;h2 id="source-day-20-pulse-propagationhttpsadventofcodecom2023day20">Source: &lt;a href="https://adventofcode.com/2023/day/20" target="_blank" rel="noopener">Day 20: Pulse Propagation&lt;/a>&lt;/h2>
&lt;p>&lt;a href="https://github.com/jpverkamp/advent-of-code/tree/master/2023/solutions/day20" target="_blank" rel="noopener">Full solution&lt;/a> for today (spoilers!)&lt;/p>
&lt;nav id="TableOfContents">
&lt;ul>
&lt;li>&lt;a href="#source-day-20-pulse-propagationhttpsadventofcodecom2023day20">Source: &lt;a href="https://adventofcode.com/2023/day/20">Day 20: Pulse Propagation&lt;/a>&lt;/a>&lt;/li>
&lt;li>&lt;a href="#part-1">Part 1&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#types-and-parsing">Types and Parsing&lt;/a>&lt;/li>
&lt;li>&lt;a href="#solution">Solution&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#part-2">Part 2&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#solution-1-brute-force">Solution 1: Brute Force&lt;/a>&lt;/li>
&lt;li>&lt;a href="#a-pretty-picture">A pretty picture&lt;/a>&lt;/li>
&lt;li>&lt;a href="#solution-2-least-common-multiple">Solution 2: Least common multiple&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#performance">Performance&lt;/a>&lt;/li>
&lt;/ul>
&lt;/nav>
&lt;h2 id="part-1">Part 1&lt;/h2>
&lt;blockquote>
&lt;p>Simulate a virtual circuit with &lt;code>high&lt;/code> and &lt;code>low&lt;/code> pulses and four kinds of chips:&lt;/p>
&lt;ul>
&lt;li>Broadcast - Re-transmit all pulses&lt;/li>
&lt;li>Flip-flops - On a &lt;code>low&lt;/code> pulse, toggle internal state; if it was on, send &lt;code>high&lt;/code>; otherwise send &lt;code>low&lt;/code>&lt;/li>
&lt;li>Conjunction - Remember input from each attached module; if all inputs were &lt;code>high&lt;/code>, send a &lt;code>low&lt;/code>, otherwise send &lt;code>high&lt;/code>&lt;/li>
&lt;li>Output - Do nothing; just receive pulses&lt;/li>
&lt;/ul>
&lt;p>Count the product of &lt;code>low&lt;/code> and &lt;code>high&lt;/code> pulses sent after 1000 &lt;code>low&lt;/code> inputs to &lt;code>broadcaster&lt;/code>.&lt;/p>
&lt;/blockquote></description></item><item><title>AoC 2023 Day 19: Assembly Lininator</title><link>https://blog.jverkamp.com/2023/12/19/aoc-2023-day-19-assembly-lininator/</link><pubDate>Tue, 19 Dec 2023 00:00:03 +0000</pubDate><guid>https://blog.jverkamp.com/2023/12/19/aoc-2023-day-19-assembly-lininator/</guid><description>&lt;h2 id="source-day-19-aplentyhttpsadventofcodecom2023day19">Source: &lt;a href="https://adventofcode.com/2023/day/19" target="_blank" rel="noopener">Day 19: Aplenty&lt;/a>&lt;/h2>
&lt;p>&lt;a href="https://github.com/jpverkamp/advent-of-code/tree/master/2023/solutions/day19" target="_blank" rel="noopener">Full solution&lt;/a> for today (spoilers!)&lt;/p>
&lt;nav id="TableOfContents">
&lt;ul>
&lt;li>&lt;a href="#source-day-19-aplentyhttpsadventofcodecom2023day19">Source: &lt;a href="https://adventofcode.com/2023/day/19">Day 19: Aplenty&lt;/a>&lt;/a>&lt;/li>
&lt;li>&lt;a href="#part-1">Part 1&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#types-and-parsing">Types and Parsing&lt;/a>&lt;/li>
&lt;li>&lt;a href="#simulation">Simulation&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#part-2">Part 2&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#brute-force">Brute Force&lt;/a>&lt;/li>
&lt;li>&lt;a href="#ranges">Ranges&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#performance">Performance&lt;/a>&lt;/li>
&lt;/ul>
&lt;/nav>
&lt;h2 id="part-1">Part 1&lt;/h2>
&lt;blockquote>
&lt;p>You are given a series of parts with 4 ratings as such:&lt;/p>
&lt;p>&lt;code>{x=787,m=2655,a=1222,s=2876}&lt;/code>&lt;/p>
&lt;p>In addition, you are given a series of rules describing a graph as such:&lt;/p>
&lt;p>&lt;code>px{a&amp;lt;2006:qkq,m&amp;gt;2090:A,rfg}&lt;/code>&lt;/p>
&lt;p>In this example, if you are at the node &lt;code>px&lt;/code>, if &lt;code>a &amp;lt; 2006&lt;/code>, move to &lt;code>qkq&lt;/code>. Otherwise, if &lt;code>m &amp;gt; 2090&lt;/code> move to &lt;code>A&lt;/code>. If no other case matches, the last defaults to &lt;code>rfg&lt;/code>.&lt;/p>
&lt;p>&lt;code>A&lt;/code> and &lt;code>R&lt;/code> are special cases for accept and reject.&lt;/p>
&lt;p>Calculate the sum of sum of all four ratings for all nodes that end at &lt;code>Accept&lt;/code>.&lt;/p>
&lt;/blockquote></description></item><item><title>AoC 2023 Day 18: Flood Fillinator</title><link>https://blog.jverkamp.com/2023/12/18/aoc-2023-day-18-flood-fillinator/</link><pubDate>Mon, 18 Dec 2023 00:00:03 +0000</pubDate><guid>https://blog.jverkamp.com/2023/12/18/aoc-2023-day-18-flood-fillinator/</guid><description>&lt;h2 id="source-day-18-lavaduct-lagoonhttpsadventofcodecom2023day18">Source: &lt;a href="https://adventofcode.com/2023/day/18" target="_blank" rel="noopener">Day 18: Lavaduct Lagoon&lt;/a>&lt;/h2>
&lt;p>&lt;a href="https://github.com/jpverkamp/advent-of-code/tree/master/2023/solutions/day18" target="_blank" rel="noopener">Full solution&lt;/a> for today (spoilers!)&lt;/p>
&lt;nav id="TableOfContents">
&lt;ul>
&lt;li>&lt;a href="#source-day-18-lavaduct-lagoonhttpsadventofcodecom2023day18">Source: &lt;a href="https://adventofcode.com/2023/day/18">Day 18: Lavaduct Lagoon&lt;/a>&lt;/a>&lt;/li>
&lt;li>&lt;a href="#part-1">Part 1&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#types-and-parsing">Types and Parsing&lt;/a>&lt;/li>
&lt;li>&lt;a href="#solution">Solution&lt;/a>&lt;/li>
&lt;li>&lt;a href="#adding-flood-fill-to-grid">Adding flood fill to Grid&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#part-2">Part 2&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#using-math">Using MATH&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#performance">Performance&lt;/a>&lt;/li>
&lt;/ul>
&lt;/nav>
&lt;h2 id="part-1">Part 1&lt;/h2>
&lt;blockquote>
&lt;p>Given a sequence of direction + distance that draws a polygon, calculate the area.&lt;/p>
&lt;/blockquote></description></item><item><title>AoC 2023 Day 17: A-Starinator</title><link>https://blog.jverkamp.com/2023/12/17/aoc-2023-day-17-a-starinator/</link><pubDate>Sun, 17 Dec 2023 00:00:03 +0000</pubDate><guid>https://blog.jverkamp.com/2023/12/17/aoc-2023-day-17-a-starinator/</guid><description>&lt;h2 id="source-day-17-clumsy-cruciblehttpsadventofcodecom2023day17">Source: &lt;a href="https://adventofcode.com/2023/day/17" target="_blank" rel="noopener">Day 17: Clumsy Crucible&lt;/a>&lt;/h2>
&lt;p>&lt;a href="https://github.com/jpverkamp/advent-of-code/tree/master/2023/solutions/day17" target="_blank" rel="noopener">Full solution&lt;/a> for today (spoilers!)&lt;/p>
&lt;nav id="TableOfContents">
&lt;ul>
&lt;li>&lt;a href="#source-day-17-clumsy-cruciblehttpsadventofcodecom2023day17">Source: &lt;a href="https://adventofcode.com/2023/day/17">Day 17: Clumsy Crucible&lt;/a>&lt;/a>&lt;/li>
&lt;li>&lt;a href="#part-1">Part 1&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#types-and-parsing">Types and Parsing&lt;/a>&lt;/li>
&lt;li>&lt;a href="#attempts">Attempts&lt;/a>&lt;/li>
&lt;li>&lt;a href="#solution">Solution&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#part-2">Part 2&lt;/a>&lt;/li>
&lt;li>&lt;a href="#performance">Performance&lt;/a>&lt;/li>
&lt;/ul>
&lt;/nav>
&lt;h2 id="part-1">Part 1&lt;/h2>
&lt;blockquote>
&lt;p>Given a grid of costs, find the shortest path from top left to bottom right. You may not double back or go straight more than 3 steps in a row.&lt;/p>
&lt;/blockquote></description></item><item><title>AoC 2023 Day 16: Reflectinator</title><link>https://blog.jverkamp.com/2023/12/16/aoc-2023-day-16-reflectinator/</link><pubDate>Sat, 16 Dec 2023 00:00:03 +0000</pubDate><guid>https://blog.jverkamp.com/2023/12/16/aoc-2023-day-16-reflectinator/</guid><description>&lt;h2 id="source-day-16-the-floor-will-be-lavahttpsadventofcodecom2023day16">Source: &lt;a href="https://adventofcode.com/2023/day/16" target="_blank" rel="noopener">Day 16: The Floor Will Be Lava&lt;/a>&lt;/h2>
&lt;p>&lt;video controls src="https://blog.jverkamp.com/embeds/2023/aoc23-16.mp4">&lt;/video>&lt;/p>
&lt;p>&lt;a href="https://github.com/jpverkamp/advent-of-code/tree/master/2023/solutions/day16" target="_blank" rel="noopener">Full solution&lt;/a> for today (spoilers!)&lt;/p>
&lt;nav id="TableOfContents">
&lt;ul>
&lt;li>&lt;a href="#source-day-16-the-floor-will-be-lavahttpsadventofcodecom2023day16">Source: &lt;a href="https://adventofcode.com/2023/day/16">Day 16: The Floor Will Be Lava&lt;/a>&lt;/a>&lt;/li>
&lt;li>&lt;a href="#part-1">Part 1&lt;/a>&lt;/li>
&lt;li>&lt;a href="#part-2">Part 2&lt;/a>&lt;/li>
&lt;li>&lt;a href="#performance">Performance&lt;/a>&lt;/li>
&lt;li>&lt;a href="#grid">Grid&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#implementation">Implementation&lt;/a>&lt;/li>
&lt;li>&lt;a href="#point">Point&lt;/a>&lt;/li>
&lt;li>&lt;a href="#bounds">Bounds&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#edit-1-adding-to_string-and-to_image-for-grid">Edit 1, Adding to_string and to_image for Grid&lt;/a>&lt;/li>
&lt;/ul>
&lt;/nav>
&lt;h2 id="part-1">Part 1&lt;/h2>
&lt;blockquote>
&lt;p>You are given a grid of mirrors (&lt;code>|-\/&lt;/code>) and empty space (&lt;code>.&lt;/code>).&lt;/p>
&lt;p>Diagonal mirrors just relect the light.&lt;/p>
&lt;p>The horizontal and vertical mirrors are splitters, light hitting them head on (like &lt;code>&amp;gt;|&lt;/code>) will split to go both directions. Light hitting edge on will just go through it.&lt;/p>
&lt;p>Starting in the top left going East, how many total tiles will a light beam illuminate?&lt;/p>
&lt;/blockquote></description></item><item><title>AoC 2023 Day 15: Hashinator</title><link>https://blog.jverkamp.com/2023/12/15/aoc-2023-day-15-hashinator/</link><pubDate>Fri, 15 Dec 2023 00:00:03 +0000</pubDate><guid>https://blog.jverkamp.com/2023/12/15/aoc-2023-day-15-hashinator/</guid><description>&lt;h2 id="source-day-15-lens-libraryhttpsadventofcodecom2023day15">Source: &lt;a href="https://adventofcode.com/2023/day/15" target="_blank" rel="noopener">Day 15: Lens Library&lt;/a>&lt;/h2>
&lt;p>&lt;a href="https://github.com/jpverkamp/advent-of-code/tree/master/2023/solutions/day15" target="_blank" rel="noopener">Full solution&lt;/a> for today (spoilers!)&lt;/p>
&lt;nav id="TableOfContents">
&lt;ul>
&lt;li>&lt;a href="#source-day-15-lens-libraryhttpsadventofcodecom2023day15">Source: &lt;a href="https://adventofcode.com/2023/day/15">Day 15: Lens Library&lt;/a>&lt;/a>&lt;/li>
&lt;li>&lt;a href="#part-1">Part 1&lt;/a>&lt;/li>
&lt;li>&lt;a href="#part-2">Part 2&lt;/a>&lt;/li>
&lt;li>&lt;a href="#performance">Performance&lt;/a>&lt;/li>
&lt;/ul>
&lt;/nav>
&lt;h2 id="part-1">Part 1&lt;/h2>
&lt;blockquote>
&lt;p>Hash each input (comma separated) with &lt;code>h(v, c) = (v + c) * 17&lt;/code> (modulo 256 / as a byte). Sum these values.&lt;/p>
&lt;/blockquote></description></item></channel></rss>