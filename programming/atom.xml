<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Programming on jverkamp.com</title><link>https://blog.jverkamp.com/programming/</link><description>Recent content in Programming on jverkamp.com</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Wed, 21 Sep 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://blog.jverkamp.com/programming/atom.xml" rel="self" type="application/rss+xml"/><item><title>Lunar Arithmetic in Rust</title><link>https://blog.jverkamp.com/2022/09/21/lunar-arithmetic-in-rust/</link><pubDate>Wed, 21 Sep 2022 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2022/09/21/lunar-arithmetic-in-rust/</guid><description>I&amp;rsquo;ve been playing with various languages / language design a lot recently (inspired by my Runelang series). As I tweak and change what I&amp;rsquo;d like to implement in a language&amp;hellip; I kept finding myself coming back to more or less exactly how Rust looks (albeit without the borrowing). So&amp;hellip; that seems like a pretty good reason to start picking up some Rust.
In another thread of thought, I stumbled upon two OEIS (on-line encyclopedia of integer sequences) sequences: A087061: Array T(n,k) = lunar sum n+k (n &amp;gt;= 0, k &amp;gt;= 0) read by antidiagonals and A087062: Array T(n,k) = lunar product n*k (n &amp;gt;= 1, k &amp;gt;= 1) read by antidiagonals.</description></item><item><title>Runelang: A Summoning Circle Generator</title><link>https://blog.jverkamp.com/2022/08/29/runelang-a-summoning-circle-generator/</link><pubDate>Mon, 29 Aug 2022 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2022/08/29/runelang-a-summoning-circle-generator/</guid><description>&lt;p>Last time we had &lt;a href="https://blog.jverkamp.com/2022/08/25/runelang-a-bind-rune-generator/">Runelang: A Bind Rune Generator&lt;/a>. This time, let&amp;rsquo;s make &amp;lsquo;summoning circles&amp;rsquo;. Basically, we want to make a circle with stars and other circles inscribed and around the borders with various &amp;lsquo;mystic&amp;rsquo; text in the mix. Something like this:&lt;/p>
&lt;ul>
&lt;li>&lt;code>generate_summoning_circle&lt;/code>
&lt;ul>
&lt;li>random chance of boder&lt;/li>
&lt;li>random chance of one or more inscribed stars&lt;/li>
&lt;li>random chance of recurring on the border (calling &lt;code>generate_summoning_circle&lt;/code> again)&lt;/li>
&lt;li>random chance of recurring in the middle&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul></description></item><item><title>Runelang: A Bind Rune Generator</title><link>https://blog.jverkamp.com/2022/08/25/runelang-a-bind-rune-generator/</link><pubDate>Thu, 25 Aug 2022 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2022/08/25/runelang-a-bind-rune-generator/</guid><description>&lt;p>Continuing with my &lt;a href="https://blog.jverkamp.com/series/runelang-in-the-browser/">Runelang in the Browser&lt;/a> series, I had the idea to automatically generate runes. So basically reversing the parsing step, rather than to take what I&amp;rsquo;ve written and make it look good, to write something that Runelang can parse&amp;ndash;and still look good.&lt;/p>
&lt;p>In a nutshell, I want to write a series of functions that can recursively call one another to render runes:&lt;/p>
&lt;ul>
&lt;li>&lt;code>generate_bind_rune&lt;/code>
&lt;ul>
&lt;li>&lt;em>n&lt;/em> times &lt;code>generate_bind_rune_arm&lt;/code>
&lt;ul>
&lt;li>&lt;em>m&lt;/em> times generate bars, circles, and other decrations&lt;/li>
&lt;li>add a fork at the end&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul></description></item><item><title>Runelang: Evaluation</title><link>https://blog.jverkamp.com/2022/07/16/runelang-evaluation/</link><pubDate>Sat, 16 Jul 2022 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2022/07/16/runelang-evaluation/</guid><description>&lt;p>As they say, life is what happens when you&amp;rsquo;re making other plans. But I&amp;rsquo;m back, so let&amp;rsquo;s talk some more about &lt;a href="https://blog.jverkamp.com/series/runelang-in-the-browser/">Runelang&lt;/a>. In the interest of not dragging on months without finishing, we&amp;rsquo;re going to go ahead and push through the rest of the project. Onward!&lt;/p></description></item><item><title>Runelang: The Parser (Part 2: Expressions)</title><link>https://blog.jverkamp.com/2022/03/18/runelang-the-parser-part-2-expressions/</link><pubDate>Fri, 18 Mar 2022 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2022/03/18/runelang-the-parser-part-2-expressions/</guid><description>&lt;p>&lt;a href="https://blog.jverkamp.com/2022/03/15/runelang-the-parser-part-1/">Earlier this week&lt;/a>, we started parsing, getting through groups, nodes, params, and lists. A pretty good start, but it also leaves out two very powerful things (expressions and defines), one of which we absolutely do need to start actually evaluating things: expressions. Since we use them in every param, we pretty much need to know how to parse them, so let&amp;rsquo;s do it!&lt;/p></description></item><item><title>Runelang: The Parser (Part 1)</title><link>https://blog.jverkamp.com/2022/03/15/runelang-the-parser-part-1/</link><pubDate>Tue, 15 Mar 2022 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2022/03/15/runelang-the-parser-part-1/</guid><description>&lt;p>I&amp;rsquo;m still here! And less sick now.&lt;/p>
&lt;p>Last time(s), we &lt;a href="https://blog.jverkamp.com/2022/02/23/runelang-language-specification/">described&lt;/a> and &lt;a href="https://blog.jverkamp.com/2022/02/24/runelang-the-lexer/">lexed&lt;/a>) Runelang! This time around, let&amp;rsquo;s take the lexed tokens and go one step further and parse them!&lt;/p>
&lt;p>So, how do we go about this? With a &lt;a href="https://en.wikipedia.org/wiki/recursive%20descent%20parser">recursive descent parser&lt;/a>!&lt;/p>
&lt;ul>
&lt;li>Start with a list/stream of tokens&lt;/li>
&lt;li>Using the first &lt;em>k&lt;/em> (in a &lt;a href="https://en.wikipedia.org/wiki/LL%28k%29%20parser">LL(k) parser&lt;/a>) elements of the list, identify which sort of object we are parsing (a &lt;code>group&lt;/code> / &lt;code>identifier&lt;/code> / &lt;code>literal&lt;/code> / &lt;code>expression&lt;/code> / etc)&lt;/li>
&lt;li>Call a parsing function for that object type (&lt;code>parseGroup&lt;/code> etc) that will:
&lt;ul>
&lt;li>Recursively parse the given object type (this may in turn call more parse functions)&lt;/li>
&lt;li>Advance the token stream &amp;lsquo;consuming&amp;rsquo; any tokens used in this group so the new &amp;lsquo;first&amp;rsquo; element is the next object&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul></description></item><item><title>Runelang: The Lexer</title><link>https://blog.jverkamp.com/2022/02/24/runelang-the-lexer/</link><pubDate>Thu, 24 Feb 2022 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2022/02/24/runelang-the-lexer/</guid><description>&lt;p>Let&amp;rsquo;s &lt;a href="https://en.wikipedia.org/wiki/Lexical_analysis">LEX&lt;/a>!&lt;/p>
&lt;p>So this is actually one of the easier parts of a programming language. In this case, we need to turn the raw text of a program into a sequence of tokens / lexemes that will be easier to parse. In this case, we want to:&lt;/p>
&lt;ul>
&lt;li>Remove all whitespace and comments&lt;/li>
&lt;li>Store the row and column with the token to make debugging easier&lt;/li>
&lt;/ul>
&lt;p>So let&amp;rsquo;s do it!&lt;/p></description></item><item><title>Runelang: Language Specification</title><link>https://blog.jverkamp.com/2022/02/23/runelang-language-specification/</link><pubDate>Wed, 23 Feb 2022 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2022/02/23/runelang-language-specification/</guid><description>&lt;p>&lt;a href="https://blog.jverkamp.com/2021/01/26/a-dsl-for-rendering-magic-circles-and-runes/">Previously&lt;/a>, I wrote a post about making a DSL in Ruby that could render magic circles/runes. It worked pretty well. I could turn things like this:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-ruby" data-lang="ruby">&lt;span style="display:flex;">&lt;span>rune &lt;span style="color:#66d9ef">do&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> scale &lt;span style="color:#ae81ff">0&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#ae81ff">9&lt;/span> &lt;span style="color:#66d9ef">do&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> circle
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> polygon &lt;span style="color:#ae81ff">7&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> star &lt;span style="color:#ae81ff">14&lt;/span>, &lt;span style="color:#ae81ff">3&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> star &lt;span style="color:#ae81ff">7&lt;/span>, &lt;span style="color:#ae81ff">2&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> children &lt;span style="color:#ae81ff">7&lt;/span>, &lt;span style="color:#e6db74">scale&lt;/span>: &lt;span style="color:#ae81ff">1&lt;/span>&lt;span style="color:#f92672">/&lt;/span>&lt;span style="color:#ae81ff">8&lt;/span>r, &lt;span style="color:#e6db74">offset&lt;/span>: &lt;span style="color:#ae81ff">1&lt;/span> &lt;span style="color:#66d9ef">do&lt;/span> &lt;span style="color:#f92672">|&lt;/span>i&lt;span style="color:#f92672">|&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> circle
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> invert &lt;span style="color:#66d9ef">do&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> text (&lt;span style="color:#ae81ff">0x2641&lt;/span> &lt;span style="color:#f92672">+&lt;/span> i)&lt;span style="color:#f92672">.&lt;/span>chr &lt;span style="color:#66d9ef">Encoding&lt;/span>&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#66d9ef">UTF_8&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> scale &lt;span style="color:#ae81ff">0&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#ae81ff">15&lt;/span> &lt;span style="color:#66d9ef">do&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> translate &lt;span style="color:#e6db74">x&lt;/span>: &lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">2&lt;/span> &lt;span style="color:#66d9ef">do&lt;/span> circle; moon &lt;span style="color:#ae81ff">0&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#ae81ff">45&lt;/span> &lt;span style="color:#66d9ef">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> circle
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> translate &lt;span style="color:#e6db74">x&lt;/span>: &lt;span style="color:#ae81ff">2&lt;/span> &lt;span style="color:#66d9ef">do&lt;/span> circle; moon &lt;span style="color:#ae81ff">0&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#ae81ff">55&lt;/span> &lt;span style="color:#66d9ef">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">end&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Into this:&lt;/p>
&lt;img src="https://blog.jverkamp.com/embeds/2022/old-astrology-and-moons.svg" />
&lt;p>But&amp;hellip; I decided to completely rewrite it. Now it&amp;rsquo;s an entirely separate language:&lt;/p>
&lt;script defer type="module">
import { render } from '/embeds/runelang/runelang/main.js'
import logging from '/embeds/runelang/lib/logging.js'
const log = logging.get("system")
let elInput = document.querySelector('[data-input]')
let elOutput = document.querySelector('[data-output]')
let elLog = document.querySelector('[data-log]')
elInput.value = `
define offsetmoon(x, phase) {
translate(x: x) {
circle
fill("black") moon(phase)
}
}
rune {
scale(0.9) {
circle
polygon(7)
star(14, 3)
star(7, 2)
radial(scale: 1/8, rotate: true) [
circle
invert character(0x2640 + i)
for i in 1..7
]
}
scale(0.15) stroke(2) {
circle
offsetmoon(-2, 0.55)
offsetmoon( 2, -0.55)
}
}
`
logging.register((msg) => {
let node = document.createElement('li')
node.innerText = msg
elLog.prepend(node)
})
logging.setMode('ERROR')
function doRender() {
elLog.innerHTML = ''
let input = elInput.value
try {
let svg = render(input)
elOutput.innerHTML = svg
log.awesome('IT WORKED!')
} catch (exception) {
console.log(exception)
}
}
function debounce(f, timeout = 500) {
let timer
return (...args) => {
clearTimeout(timer)
timer = setTimeout(() => f.apply(this, args), timeout)
}
}
document.addEventListener('keyup', debounce(doRender))
doRender()
&lt;/script>
&lt;style>
textarea[data-input],
div[data-output] {
width: 80%;
height: 600px;
padding: 1em;
}
td {
width: 45%;
vertical-align: top;
}
&lt;/style>
&lt;h3>Output&lt;/h3>
&lt;div data-output>&lt;/div>
&lt;h3>Source&lt;/h3>
&lt;textarea data-input>&lt;/textarea>
&lt;h3>Log (most recent messages first):&lt;/h2>
&lt;ul data-log>&lt;/ul></description></item><item><title>Go is faster than Python? (an example parsing huge JSON logs)</title><link>https://blog.jverkamp.com/2022/02/11/go-is-faster-than-python-an-example-parsing-huge-json-logs/</link><pubDate>Fri, 11 Feb 2022 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2022/02/11/go-is-faster-than-python-an-example-parsing-huge-json-logs/</guid><description>&lt;p>Recently at work I came across a problem where I had to go through a year&amp;rsquo;s worth of logs and corelate two different fields across all of our requests. On the good side, we have the logs stored as JSON objects (archived from Datadog which collects them). On the down side&amp;hellip; it&amp;rsquo;s kind of a huge amount of data. Not as much as I&amp;rsquo;ve dealt with at previous jobs/in some academic problems, but we&amp;rsquo;re still talking on the order of terabytes.&lt;/p>
&lt;p>On one hand, write up a quick Python script, fire and forget. It takes maybe ten minutes to write the code and (for this specific example) half an hour to run it on the specific cloud instance the logs lived on. So we&amp;rsquo;ll start with that. But then I got thinking&amp;hellip; Python is supposed to be super slow right? Can I do better?&lt;/p>
&lt;p>(Note: This problem is mostly disk bound. So Python actually for the most part does just fine.)&lt;/p></description></item><item><title>A CLI Tool for Bulk Processing Github Dependabot Alerts (with GraphQL!)</title><link>https://blog.jverkamp.com/2022/02/03/a-cli-tool-for-bulk-processing-github-dependabot-alerts-with-graphql/</link><pubDate>Thu, 03 Feb 2022 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2022/02/03/a-cli-tool-for-bulk-processing-github-dependabot-alerts-with-graphql/</guid><description>&lt;p>Dependabot is &amp;hellip; &lt;em>somewhat useful&lt;/em>. When it comes to letting you know that there are critical issues in your dependencies that can be fixed simply by upgrading the package (they did all the work for you*). The biggest problem is that it can just be &lt;em>insanely&lt;/em> noisy. In a busy repo with multiple Node.JS codebases (especially), you can get dozens to even hundreds of reports a week. And for each one, you optimally would update the code&amp;hellip; but sometimes it&amp;rsquo;s just not practical. So you have to decide which updates you actually apply.&lt;/p>
&lt;p>So. How do we do it?&lt;/p>
&lt;p>Well the traditional rest based Github APIs don&amp;rsquo;t expose the dependabot data, &lt;em>but&lt;/em> the newer GraphQL one does! I&amp;rsquo;ll admit, I haven&amp;rsquo;t used as much GraphQL as I probably should, it&amp;rsquo;s&amp;hellip; a bit more complicated than REST. But it does expose what I need.&lt;/p></description></item><item><title>A simple Flask Logging/Echo Server</title><link>https://blog.jverkamp.com/2022/02/01/a-simple-flask-logging/echo-server/</link><pubDate>Tue, 01 Feb 2022 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2022/02/01/a-simple-flask-logging/echo-server/</guid><description>&lt;p>A very simple server that can be used to catch all incoming HTTP requests and just echo them back + log their contents. I needed it to test what a webhook actually returned to me, but I&amp;rsquo;m sure that there are a number of other things it could be dropped in for.&lt;/p>
&lt;p>It will take in any GET/POST/PATCH/DELETE HTTP request with any path/params/data (optionally JSON), pack that data into a JSON object, and both log that to a file (with a UUID1 based name) plus return this object to the request.&lt;/p>
&lt;p>Warning: Off hand, there is already a potential security problem in this regarding DoS. It will happily try to log anything you throw at it, no matter how big and will store those in memory first. So long running requests / large requests / many requests will quickly eat up your RAM/disk. So&amp;hellip; don&amp;rsquo;t leave this running unattended? At least not without additional configuration.&lt;/p>
&lt;p>That&amp;rsquo;s it! Hope it&amp;rsquo;s helpful.&lt;/p></description></item><item><title>Pulling more than 5000 logs from datadog</title><link>https://blog.jverkamp.com/2022/01/25/pulling-more-than-5000-logs-from-datadog/</link><pubDate>Tue, 25 Jan 2022 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2022/01/25/pulling-more-than-5000-logs-from-datadog/</guid><description>&lt;p>&lt;a href="https://www.datadoghq.com/">Datadog&lt;/a> is pretty awesome. I wish I had it at my previous job, but better late than never. In particular, I&amp;rsquo;ve used it a lot for digging through recent logs to try to construct various events for various (security related) reasons.&lt;/p>
&lt;p>One of the problems I&amp;rsquo;ve come into though is that eventually you&amp;rsquo;re going to hit the limits of what datadog can do. In particular, I was trying to reconstruct user&amp;rsquo;s sessions and then check if they made one specific sequence of calls or another one. So far as I know, that isn&amp;rsquo;t directly possible, so instead, I wanted to download a subset of the datadog logs and process them locally.&lt;/p>
&lt;p>Easy enough, yes? Well: &lt;a href="https://stackoverflow.com/questions/67281698/datadog-export-logs-more-than-5-000">https://stackoverflow.com/questions/67281698/datadog-export-logs-more-than-5-000&lt;/a>&lt;/p>
&lt;p>Turns out, you just can&amp;rsquo;t export more than 5000 logs directly. &lt;em>But&lt;/em>&amp;hellip; they have an API with pagination!&lt;/p></description></item><item><title>AoC 2021 Day 25: Cucumbinator</title><link>https://blog.jverkamp.com/2021/12/25/aoc-2021-day-25-cucumbinator/</link><pubDate>Sat, 25 Dec 2021 00:00:03 +0000</pubDate><guid>https://blog.jverkamp.com/2021/12/25/aoc-2021-day-25-cucumbinator/</guid><description>&lt;h3 id="source-sea-cucumberhttpsadventofcodecom2021day25">Source: &lt;a href="https://adventofcode.com/2021/day/25">Sea Cucumber&lt;/a>&lt;/h3>
&lt;h4 id="part-1-load-a-grid-of-empty-cells--east-movers--and-south-movers-v-each-step-move-all-east-movers-than-all-south-movers-only-if-they-can-this-iteration-wrap-eastwest-and-northsouth-how-many-steps-does-it-take-the-movers-to-get-stuck">&lt;strong>Part 1:&lt;/strong> Load a grid of empty cells (&lt;code>.&lt;/code>), east movers (&lt;code>&amp;gt;&lt;/code>), and south movers (&lt;code>v&lt;/code>). Each step, move all east movers than all south movers (only if they can this iteration). Wrap east/west and north/south. How many steps does it take the movers to get stuck?&lt;/h4></description></item><item><title>AoC 2021 Day 24: Aluinator</title><link>https://blog.jverkamp.com/2021/12/24/aoc-2021-day-24-aluinator/</link><pubDate>Fri, 24 Dec 2021 00:00:03 +0000</pubDate><guid>https://blog.jverkamp.com/2021/12/24/aoc-2021-day-24-aluinator/</guid><description>&lt;h3 id="source-arithmetic-logic-unithttpsadventofcodecom2021day24">Source: &lt;a href="https://adventofcode.com/2021/day/24">Arithmetic Logic Unit&lt;/a>&lt;/h3>
&lt;h4 id="part-1-simulate-an-alu-with-4-registers-w-x-y-and-z-and-instructions-defined-below-find-the-largest-14-digit-number-with-no-0-digits-which-result-in-z0">&lt;strong>Part 1:&lt;/strong> Simulate an ALU with 4 registers (&lt;code>w&lt;/code>, &lt;code>x&lt;/code>, &lt;code>y&lt;/code>, and &lt;code>z&lt;/code>) and instructions defined below. Find the largest 14 digit number with no 0 digits which result in &lt;code>z=0&lt;/code>.&lt;/h4></description></item><item><title>AoC 2021 Day 23: Amphipodinator</title><link>https://blog.jverkamp.com/2021/12/23/aoc-2021-day-23-amphipodinator/</link><pubDate>Thu, 23 Dec 2021 00:00:03 +0000</pubDate><guid>https://blog.jverkamp.com/2021/12/23/aoc-2021-day-23-amphipodinator/</guid><description>&lt;h3 id="source-amphipodhttpsadventofcodecom2021day23">Source: &lt;a href="https://adventofcode.com/2021/day/23">Amphipod&lt;/a>&lt;/h3>
&lt;h4 id="part-1-given-4-rooms-full-of-amphipods-with-various-energy-costs-for-movement-a1-b10-c100-d1000-and-a-hallway-how-much-energy-does-it-take-at-minimum-to-sort-the-amphipods-into-their-own-rooms-with-the-following-conditions">&lt;strong>Part 1:&lt;/strong> Given 4 rooms full of amphipods with various energy costs for movement (a=1, b=10, c=100, d=1000) and a hallway, how much energy does it take (at minimum) to sort the amphipods into their own rooms with the following conditions:&lt;/h4></description></item><item><title>AoC 2021 Day 22: Cubinator</title><link>https://blog.jverkamp.com/2021/12/22/aoc-2021-day-22-cubinator/</link><pubDate>Wed, 22 Dec 2021 00:00:05 +0000</pubDate><guid>https://blog.jverkamp.com/2021/12/22/aoc-2021-day-22-cubinator/</guid><description>&lt;h3 id="source-reactor-reboothttpsadventofcodecom2021day22">Source: &lt;a href="https://adventofcode.com/2021/day/22">Reactor Reboot&lt;/a>&lt;/h3>
&lt;h4 id="part-1-given-a-series-of-3d-cubes-that-either-turn-on-all-or-turn-off-all-points-in-their-region-calculate-how-many-points-in-the-region--5050-5050-5050-are-on-at-the-end">&lt;strong>Part 1:&lt;/strong> Given a series of 3D cubes that either turn ON all or turn OFF all points in their region, calculate how many points in the region (-50..50,-50..50,-50..50) are ON at the end.&lt;/h4></description></item><item><title>AoC 2021 Day 21: Dicinator</title><link>https://blog.jverkamp.com/2021/12/21/aoc-2021-day-21-dicinator/</link><pubDate>Tue, 21 Dec 2021 00:00:05 +0000</pubDate><guid>https://blog.jverkamp.com/2021/12/21/aoc-2021-day-21-dicinator/</guid><description>&lt;h3 id="source-dirac-dicehttpsadventofcodecom2021day21">Source: &lt;a href="https://adventofcode.com/2021/day/21">Dirac Dice&lt;/a>&lt;/h3>
&lt;h4 id="part-1-play-a-simple-game-describe-below-with-a-loaded-d100-that-always-rolls-1-2-3--99-100-1--return-the-score-of-the-losing-player-times-the-number-of-times-the-die-was-rolled">&lt;strong>Part 1:&lt;/strong> Play a simple game (describe below) with a loaded D100 (that always rolls 1, 2, 3, &amp;hellip; 99, 100, 1, &amp;hellip;). Return the score of the losing player times the number of times the die was rolled.&lt;/h4></description></item><item><title>AoC 2021 Day 20: Enhancinator</title><link>https://blog.jverkamp.com/2021/12/20/aoc-2021-day-20-enhancinator/</link><pubDate>Mon, 20 Dec 2021 00:00:05 +0000</pubDate><guid>https://blog.jverkamp.com/2021/12/20/aoc-2021-day-20-enhancinator/</guid><description>&lt;h3 id="source-trench-maphttpsadventofcodecom2021day20">Source: &lt;a href="https://adventofcode.com/2021/day/20">Trench Map&lt;/a>&lt;/h3>
&lt;h4 id="part-1-given-a-9-1-hahahugoshortcode-s0-hbhb-update-function-take-the-pixel-and-8-surrounding-pixels-as-a-9-bit-index-into-the-function-and-a-binary-image-apply-the-function-twice-and-count-the-number-of-lit-pixels-assume-that-the-canvas-is-infinite">&lt;strong>Part 1:&lt;/strong> Given a 9-&amp;gt;1 &lt;a href="https://en.wikipedia.org/wiki/cellular%20automota">cellular automota&lt;/a> update function (take the pixel and 8 surrounding pixels as a 9-bit index into the function) and a binary image, apply the function twice and count the number of &amp;rsquo;lit&amp;rsquo; pixels. Assume that the canvas is infinite.&lt;/h4></description></item><item><title>AoC 2021 Day 19: Point Matchinator</title><link>https://blog.jverkamp.com/2021/12/19/aoc-2021-day-19-point-matchinator/</link><pubDate>Sun, 19 Dec 2021 00:00:05 +0000</pubDate><guid>https://blog.jverkamp.com/2021/12/19/aoc-2021-day-19-point-matchinator/</guid><description>&lt;h3 id="source-snailfishhttpsadventofcodecom2021day19">Source: &lt;a href="https://adventofcode.com/2021/day/19">Snailfish&lt;/a>&lt;/h3>
&lt;h4 id="part-1-you-will-be-given-a-series-of-scanners-each-of-which-will-tell-you-the-location-from-their-point-of-view-of-a-series-of-beacons-each-scanner-may-be-flipped-or-rotated-in-increments-of-90-degrees-in-any-direction-determine-where-each-scanner-and-beacon-is-by-overlaying-the-maps-with-at-least-pairwise-12-matches">&lt;strong>Part 1:&lt;/strong> You will be given a series of Scanners, each of which will tell you the location (from their point of view) of a series of Beacons. Each Scanner may be flipped or rotated in increments of 90 degrees in any direction. Determine where each Scanner and Beacon is by overlaying the maps (with at least pairwise 12 matches).&lt;/h4></description></item><item><title>AoC 2021 Day 18: Pairs of Pairs</title><link>https://blog.jverkamp.com/2021/12/18/aoc-2021-day-18-pairs-of-pairs/</link><pubDate>Sat, 18 Dec 2021 00:00:05 +0000</pubDate><guid>https://blog.jverkamp.com/2021/12/18/aoc-2021-day-18-pairs-of-pairs/</guid><description>&lt;h3 id="source-snailfishhttpsadventofcodecom2021day18">Source: &lt;a href="https://adventofcode.com/2021/day/18">Snailfish&lt;/a>&lt;/h3>
&lt;h4 id="part-1-given-the-following-definition-of-snailfish-numbers-add-a-series-of-snailfish-numbers-and-return-the-magnitude-of-the-result">&lt;strong>Part 1:&lt;/strong> Given the following definition of Snailfish numbers, add a series of Snailfish numbers and return the magnitude of the result.&lt;/h4></description></item><item><title>AoC 2021 Day 17: Pew-Pewinator</title><link>https://blog.jverkamp.com/2021/12/17/aoc-2021-day-17-pew-pewinator/</link><pubDate>Fri, 17 Dec 2021 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2021/12/17/aoc-2021-day-17-pew-pewinator/</guid><description>&lt;h3 id="source-trick-shothttpsadventofcodecom2021day17">Source: &lt;a href="https://adventofcode.com/2021/day/17">Trick Shot&lt;/a>&lt;/h3>
&lt;h4 id="part-1-simulate-a-projectile-with-an-integer-initial-velocity-x-y-air-resistance-that-tries-to-reduce-x-velocity-to-0-and-gravity-that-increases-y-velocity-by-1-each-time-given-a-target-range-find-the-highest-point-reached-by-a-projectile-that-ends-a-tick-not-one-that-crosses-over-within-the-target-area">&lt;strong>Part 1:&lt;/strong> Simulate a projectile with an integer initial velocity (x, y), air resistance that tries to reduce x-velocity to 0, and gravity that increases y-velocity by 1 each time. Given a target range, find the highest point reached by a projectile that ends a tick (not one that crosses over) within the target area.&lt;/h4></description></item><item><title>AoC 2021 Day 16: Depacketinator</title><link>https://blog.jverkamp.com/2021/12/16/aoc-2021-day-16-depacketinator/</link><pubDate>Thu, 16 Dec 2021 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2021/12/16/aoc-2021-day-16-depacketinator/</guid><description>&lt;h3 id="source-packet-decoderhttpsadventofcodecom2021day16">Source: &lt;a href="https://adventofcode.com/2021/day/16">Packet Decoder&lt;/a>&lt;/h3>
&lt;h4 id="part-1-given-a-recursive-binary-packet-definition-see-below-parse-the-given-packet-return-the-sum-of-each-packets-version">&lt;strong>Part 1:&lt;/strong> Given a recursive binary packet definition (see below), parse the given packet. Return the sum of each packet&amp;rsquo;s &lt;code>version&lt;/code>.&lt;/h4></description></item><item><title>AoC 2021 Day 15: Low Ceiling Simulator</title><link>https://blog.jverkamp.com/2021/12/15/aoc-2021-day-15-low-ceiling-simulator/</link><pubDate>Wed, 15 Dec 2021 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2021/12/15/aoc-2021-day-15-low-ceiling-simulator/</guid><description>&lt;h3 id="source-chitonhttpsadventofcodecom2021day15">Source: &lt;a href="https://adventofcode.com/2021/day/15">Chiton&lt;/a>&lt;/h3>
&lt;h4 id="part-1-given-a-grid-of-weights-find-the-minimum-path-from-top-left-to-top-right-return-the-total-weight-along-that-path">&lt;strong>Part 1:&lt;/strong> Given a grid of weights, find the minimum path from top left to top right. Return the total weight along that path.&lt;/h4></description></item><item><title>AoC 2021 Day 14: Polymerizationinator</title><link>https://blog.jverkamp.com/2021/12/14/aoc-2021-day-14-polymerizationinator/</link><pubDate>Tue, 14 Dec 2021 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2021/12/14/aoc-2021-day-14-polymerizationinator/</guid><description>&lt;h3 id="source-extended-polymerizationhttpsadventofcodecom2021day14">Source: &lt;a href="https://adventofcode.com/2021/day/14">Extended Polymerization&lt;/a>&lt;/h3>
&lt;h4 id="part-1-given-a-complete-function-fa-b---c-where-any-string-ab-becomes-acb-and-an-input-string-apply-the-function-at-the-same-time-to-every-overlapping-pair-of-letters-repeat-this-time-times-report-the-difference-in-counts-between-the-most-and-least-common-letters-in-the-final-situation">&lt;strong>Part 1:&lt;/strong> Given a complete function &lt;code>f(a, b) -&amp;gt; c&lt;/code> where any string &lt;code>ab&lt;/code> becomes &lt;code>acb&lt;/code> and an input string, apply the function at the same time to every (overlapping) pair of letters. Repeat this time times. Report the difference in counts between the most and least common letters in the final situation.&lt;/h4></description></item><item><title>AoC 2021 Day 13: Foldinator</title><link>https://blog.jverkamp.com/2021/12/13/aoc-2021-day-13-foldinator/</link><pubDate>Mon, 13 Dec 2021 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2021/12/13/aoc-2021-day-13-foldinator/</guid><description>&lt;h3 id="source-transparent-origamihttpsadventofcodecom2021day13">Source: &lt;a href="https://adventofcode.com/2021/day/13">Transparent Origami&lt;/a>&lt;/h3>
&lt;h4 id="part-1-given-a-set-of-points-and-a-sequence-of-fold-lines-where-you-either-fold-the-bottom-over-the-top-or-right-over-left-determine-how-many-points-exist-after-the-first-fold">&lt;strong>Part 1:&lt;/strong> Given a set of points and a sequence of &amp;lsquo;fold&amp;rsquo; lines (where you either fold the bottom over the top or right over left), determine how many points exist after the first fold.&lt;/h4></description></item><item><title>AoC 2021 Day 12: Submarine Spider</title><link>https://blog.jverkamp.com/2021/12/12/aoc-2021-day-12-submarine-spider/</link><pubDate>Sun, 12 Dec 2021 00:00:15 +0000</pubDate><guid>https://blog.jverkamp.com/2021/12/12/aoc-2021-day-12-submarine-spider/</guid><description>&lt;h3 id="source-passage-pathinghttpsadventofcodecom2021day12">Source: &lt;a href="https://adventofcode.com/2021/day/12">Passage Pathing&lt;/a>&lt;/h3>
&lt;h4 id="part-1-given-a-list-of-edges-in-a-bi-directional-graph-count-the-number-of-paths-from-start-to-end-such-that-nodes-named-with-lowercase-letters-are-visited-once-and-nodes-with-uppercase-letters-can-be-visited-any-number-of-times">&lt;strong>Part 1:&lt;/strong> Given a list of edges in a bi-directional graph, count the number of paths from &lt;code>start&lt;/code> to &lt;code>end&lt;/code> such that nodes named with lowercase letters are visited once, and nodes with uppercase letters can be visited any number of times.&lt;/h4></description></item><item><title>AoC 2021 Day 11: Octopus Flashinator</title><link>https://blog.jverkamp.com/2021/12/11/aoc-2021-day-11-octopus-flashinator/</link><pubDate>Sat, 11 Dec 2021 00:00:15 +0000</pubDate><guid>https://blog.jverkamp.com/2021/12/11/aoc-2021-day-11-octopus-flashinator/</guid><description>&lt;h3 id="source-dumbo-octopushttpsadventofcodecom2021day11">Source: &lt;a href="https://adventofcode.com/2021/day/11">Dumbo Octopus&lt;/a>&lt;/h3>
&lt;h4 id="part-1-simulate-a-grid-of-numbers-such-that-on-each-tick-advance-all-numbers-by-1-any-number-that-increases-over-9-will-flash-and-add-1-to-all-neighbors-recursively-but-each-cell-can-only-flash-once-and-then-reset-to-0-count-the-number-of-flashes-in-the-first-100-ticks">&lt;strong>Part 1:&lt;/strong> Simulate a grid of numbers such that on each tick: advance all numbers by 1, any number that increases over 9 will &amp;lsquo;flash&amp;rsquo; and add 1 to all neighbors (recursively, but each cell can only flash once) and then reset to 0. Count the number of flashes in the first 100 ticks.&lt;/h4></description></item><item><title>AoC 2021 Day 10: Chunkinator</title><link>https://blog.jverkamp.com/2021/12/10/aoc-2021-day-10-chunkinator/</link><pubDate>Fri, 10 Dec 2021 00:00:15 +0000</pubDate><guid>https://blog.jverkamp.com/2021/12/10/aoc-2021-day-10-chunkinator/</guid><description>&lt;h3 id="source-syntax-scoringhttpsadventofcodecom2021day10">Source: &lt;a href="https://adventofcode.com/2021/day/10">Syntax Scoring&lt;/a>&lt;/h3>
&lt;h4 id="part-1-given-a-sequence-of----and--with-nesting-allowed-find-the-first-syntax-error-where-the-wrong-closing-symbol-is-used-scoring-3-57-1197-and-25137-respectively-for-each-error-calculate-the-total-error-score">&lt;strong>Part 1:&lt;/strong> Given a sequence of () [] {}, and &amp;lt;&amp;gt; with nesting allowed. Find the first syntax error (where the wrong closing symbol is used). Scoring 3, 57, 1197, and 25137 respectively for each error, calculate the total error score.&lt;/h4></description></item><item><title>AoC 2021 Day 9: Local Minimum Deminifier</title><link>https://blog.jverkamp.com/2021/12/09/aoc-2021-day-9-local-minimum-deminifier/</link><pubDate>Thu, 09 Dec 2021 00:00:15 +0000</pubDate><guid>https://blog.jverkamp.com/2021/12/09/aoc-2021-day-9-local-minimum-deminifier/</guid><description>&lt;h3 id="source-smoke-basinhttpsadventofcodecom2021day9">Source: &lt;a href="https://adventofcode.com/2021/day/9">Smoke Basin&lt;/a>&lt;/h3>
&lt;h4 id="part-1-given-a-heightmap-find-all-local-minimums-return-the-sum-of-minimum-height--1-for-each-local-minimum">&lt;strong>Part 1:&lt;/strong> Given a heightmap, find all local minimums. Return the sum of (minimum height + 1) for each local minimum.&lt;/h4></description></item><item><title>AoC 2021 Day 8: Seven Segment Demystifier</title><link>https://blog.jverkamp.com/2021/12/08/aoc-2021-day-8-seven-segment-demystifier/</link><pubDate>Wed, 08 Dec 2021 00:00:10 +0000</pubDate><guid>https://blog.jverkamp.com/2021/12/08/aoc-2021-day-8-seven-segment-demystifier/</guid><description>&lt;h3 id="source-seven-segment-searchhttpsadventofcodecom2021day8">Source: &lt;a href="https://adventofcode.com/2021/day/8">Seven Segment Search&lt;/a>&lt;/h3>
&lt;h4 id="part-1-simulate-a-hahahugoshortcode-s0-hbhb-where-you-do-not-know-which-input-wire-controls-which-segment-given-the-wires-used-in-all-ten-digits-and-four-output-digits-count-how-many-times-1-4-7-and-8-are-outputted">&lt;strong>Part 1:&lt;/strong> Simulate a &lt;a href="https://en.wikipedia.org/wiki/seven%20segment%20displey">seven segment displey&lt;/a> where you do not know which input wire controls which segment. Given the wires used in all ten digits and four output digits, count how many times 1, 4, 7, and 8 are outputted.&lt;/h4></description></item><item><title>AoC 2021 Day 7: Brachyura Aligner</title><link>https://blog.jverkamp.com/2021/12/07/aoc-2021-day-7-brachyura-aligner/</link><pubDate>Tue, 07 Dec 2021 00:00:10 +0000</pubDate><guid>https://blog.jverkamp.com/2021/12/07/aoc-2021-day-7-brachyura-aligner/</guid><description>&lt;h3 id="source-the-treachery-of-whaleshttpsadventofcodecom2021day7">Source: &lt;a href="https://adventofcode.com/2021/day/7">The Treachery of Whales&lt;/a>&lt;/h3>
&lt;h4 id="part-1-given-a-list-of-numbers-find-the-minimum-integer-i-such-the-sum-difference-of-each-number-and-i-is-minimized">&lt;strong>Part 1:&lt;/strong> Given a list of numbers, find the minimum integer &lt;code>I&lt;/code> such the sum difference of each number and I is minimized.&lt;/h4></description></item><item><title>AoC 2021 Day 6: We All Glow Down Here</title><link>https://blog.jverkamp.com/2021/12/06/aoc-2021-day-6-we-all-glow-down-here/</link><pubDate>Mon, 06 Dec 2021 00:00:10 +0000</pubDate><guid>https://blog.jverkamp.com/2021/12/06/aoc-2021-day-6-we-all-glow-down-here/</guid><description>&lt;h3 id="source-latternfishhttpsadventofcodecom2021day6">Source: &lt;a href="https://adventofcode.com/2021/day/6">Latternfish&lt;/a>&lt;/h3>
&lt;h4 id="part-1-simulate-a-population-of-lanternfish-each-fish-is-immortal-starts-having-children-after-9-days-and-has-another-child-after-7-more-days-calculate-the-number-of-fish-after-80-days">&lt;strong>Part 1:&lt;/strong> Simulate a population of lanternfish. Each fish is immortal, starts having children after 9 days, and has another child after 7 more days. Calculate the number of fish after 80 days.&lt;/h4></description></item><item><title>AoC 2021 Day 5: Linear Avoidinator</title><link>https://blog.jverkamp.com/2021/12/05/aoc-2021-day-5-linear-avoidinator/</link><pubDate>Sun, 05 Dec 2021 00:00:10 +0000</pubDate><guid>https://blog.jverkamp.com/2021/12/05/aoc-2021-day-5-linear-avoidinator/</guid><description>&lt;h3 id="source-hydrothermal-venturehttpsadventofcodecom2021day5">Source: &lt;a href="https://adventofcode.com/2021/day/5">Hydrothermal Venture&lt;/a>&lt;/h3>
&lt;h4 id="part-1-given-a-list-of-lines-find-the-number-of-integer-points-which-are-covered-by-more-than-one-line-ignore-non-vertical-and-non-horizontal-lines">&lt;strong>Part 1:&lt;/strong> Given a list of lines, find the number of integer points which are covered by more than one line (ignore non-vertical and non-horizontal lines).&lt;/h4>
&lt;p>Okay. Start with the data structures:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">@dataclass&lt;/span>(frozen&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#66d9ef">True&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Point&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> x: int
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> y: int
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">@dataclass&lt;/span>(frozen&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#66d9ef">True&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Line&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> p1: Point
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> p2: Point
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">is_vertical&lt;/span>(self):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> self&lt;span style="color:#f92672">.&lt;/span>p1&lt;span style="color:#f92672">.&lt;/span>x &lt;span style="color:#f92672">==&lt;/span> self&lt;span style="color:#f92672">.&lt;/span>p2&lt;span style="color:#f92672">.&lt;/span>x
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">is_horizontal&lt;/span>(self):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> self&lt;span style="color:#f92672">.&lt;/span>p1&lt;span style="color:#f92672">.&lt;/span>y &lt;span style="color:#f92672">==&lt;/span> self&lt;span style="color:#f92672">.&lt;/span>p2&lt;span style="color:#f92672">.&lt;/span>y
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">is_orthagonal&lt;/span>(self):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> self&lt;span style="color:#f92672">.&lt;/span>is_vertical() &lt;span style="color:#f92672">or&lt;/span> self&lt;span style="color:#f92672">.&lt;/span>is_horizontal()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">points&lt;/span>(self):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># TODO: handle lines that aren&amp;#39;t vertical, horizontal, or diagonal&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> xd &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> self&lt;span style="color:#f92672">.&lt;/span>p1&lt;span style="color:#f92672">.&lt;/span>x &lt;span style="color:#f92672">==&lt;/span> self&lt;span style="color:#f92672">.&lt;/span>p2&lt;span style="color:#f92672">.&lt;/span>x &lt;span style="color:#66d9ef">else&lt;/span> (&lt;span style="color:#ae81ff">1&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> self&lt;span style="color:#f92672">.&lt;/span>p1&lt;span style="color:#f92672">.&lt;/span>x &lt;span style="color:#f92672">&amp;lt;&lt;/span> self&lt;span style="color:#f92672">.&lt;/span>p2&lt;span style="color:#f92672">.&lt;/span>x &lt;span style="color:#66d9ef">else&lt;/span> &lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> yd &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> self&lt;span style="color:#f92672">.&lt;/span>p1&lt;span style="color:#f92672">.&lt;/span>y &lt;span style="color:#f92672">==&lt;/span> self&lt;span style="color:#f92672">.&lt;/span>p2&lt;span style="color:#f92672">.&lt;/span>y &lt;span style="color:#66d9ef">else&lt;/span> (&lt;span style="color:#ae81ff">1&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> self&lt;span style="color:#f92672">.&lt;/span>p1&lt;span style="color:#f92672">.&lt;/span>y &lt;span style="color:#f92672">&amp;lt;&lt;/span> self&lt;span style="color:#f92672">.&lt;/span>p2&lt;span style="color:#f92672">.&lt;/span>y &lt;span style="color:#66d9ef">else&lt;/span> &lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> p &lt;span style="color:#f92672">=&lt;/span> self&lt;span style="color:#f92672">.&lt;/span>p1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">while&lt;/span> p &lt;span style="color:#f92672">!=&lt;/span> self&lt;span style="color:#f92672">.&lt;/span>p2:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">yield&lt;/span> p
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> p &lt;span style="color:#f92672">=&lt;/span> Point(p&lt;span style="color:#f92672">.&lt;/span>x &lt;span style="color:#f92672">+&lt;/span> xd, p&lt;span style="color:#f92672">.&lt;/span>y &lt;span style="color:#f92672">+&lt;/span> yd)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">yield&lt;/span> p
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Dataclasses are great. They give you constructors and a bunch of other things for free. On top of that, if you specify &lt;code>frozen=True&lt;/code>, making them immutable, you also get &lt;code>hashable&lt;/code> types for free (which I&amp;rsquo;ll use in the problem).&lt;/p>
&lt;p>Perhaps the most interesting bit here is the function that will iterate through the &lt;code>points&lt;/code> in a &lt;code>List&lt;/code>. Specifically, it will figure out the x and y delta (&lt;code>xd&lt;/code> and &lt;code>yd&lt;/code>) and repeatedly add that until you hit the end point.&lt;/p>
&lt;p>&lt;strong>Note:&lt;/strong> this only works for lines that are vertical, horizontal, or diagonal (at 45 degrees). Anything else needs a better &lt;a href="https://en.wikipedia.org/wiki/line%20drawing%20algorithm">line drawing algorithm&lt;/a> (of which there are a few). If we need it, I&amp;rsquo;ll implement it.&lt;/p>
&lt;p>Next, use that to parse:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">parse&lt;/span>(file: TextIO) &lt;span style="color:#f92672">-&amp;gt;&lt;/span> List[Line]:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> result &lt;span style="color:#f92672">=&lt;/span> []
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> line &lt;span style="color:#f92672">in&lt;/span> file:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> x1, y1, x2, y2 &lt;span style="color:#f92672">=&lt;/span> [int(v) &lt;span style="color:#66d9ef">for&lt;/span> v &lt;span style="color:#f92672">in&lt;/span> line&lt;span style="color:#f92672">.&lt;/span>replace(&lt;span style="color:#e6db74">&amp;#39; -&amp;gt; &amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;,&amp;#39;&lt;/span>)&lt;span style="color:#f92672">.&lt;/span>split(&lt;span style="color:#e6db74">&amp;#39;,&amp;#39;&lt;/span>)]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> result&lt;span style="color:#f92672">.&lt;/span>append(Line(Point(x1, y1), Point(x2, y2)))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> result
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The input format is &lt;code>x1,y1 -&amp;gt; x2,y2&lt;/code>, but it&amp;rsquo;s easier to split and convert if we do it all directly. There are a few other ways we could have done this: splitting on anything non-numeric or using a regular expression / something else for parsing directly. But I think this is clear enough.&lt;/p>
&lt;p>And with all that, the problem is actually pretty short:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">part1&lt;/span>(file: typer&lt;span style="color:#f92672">.&lt;/span>FileText):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> lines &lt;span style="color:#f92672">=&lt;/span> parse(file)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> counter: MutableMapping[Point, int] &lt;span style="color:#f92672">=&lt;/span> collections&lt;span style="color:#f92672">.&lt;/span>Counter()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> line &lt;span style="color:#f92672">in&lt;/span> lines:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#f92672">not&lt;/span> line&lt;span style="color:#f92672">.&lt;/span>is_orthagonal():
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">continue&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> point &lt;span style="color:#f92672">in&lt;/span> line&lt;span style="color:#f92672">.&lt;/span>points():
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> counter[point] &lt;span style="color:#f92672">+=&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print(sum(&lt;span style="color:#ae81ff">1&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> count &lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span> &lt;span style="color:#66d9ef">else&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#66d9ef">for&lt;/span> point, count &lt;span style="color:#f92672">in&lt;/span> counter&lt;span style="color:#f92672">.&lt;/span>items()))
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>We&amp;rsquo;ll use the built in &lt;code>collections.Counter&lt;/code> datatype, since that&amp;rsquo;s exactly what we&amp;rsquo;re doing: counting things. Then just iterate over every line, skip the non-orthagonal ones, iterate over every point, and count them up. At the end, print the number that we saw more than once. Et voila.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ python3 linear-avoidinator.py part1 input.txt
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">5632&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>AoC 2021 Day 4: His Name Oh</title><link>https://blog.jverkamp.com/2021/12/04/aoc-2021-day-4-his-name-oh/</link><pubDate>Sat, 04 Dec 2021 00:00:10 +0000</pubDate><guid>https://blog.jverkamp.com/2021/12/04/aoc-2021-day-4-his-name-oh/</guid><description>&lt;h3 id="source-giant-squidhttpsadventofcodecom2021day4">Source: &lt;a href="https://adventofcode.com/2021/day/4">Giant Squid&lt;/a>&lt;/h3>
&lt;h4 id="part-1-given-a-set-of-bingo-boards-and-a-list-of-numbers-find-the-first-board-to-win-multiply-the-sum-of-the-un-called-numbers-on-that-board-times-the-last-number-called">&lt;strong>Part 1:&lt;/strong> Given a set of bingo boards and a list of numbers, find the first board to win. Multiply the sum of the un-called numbers on that board times the last number called.&lt;/h4></description></item><item><title>AoC 2021 Day 3: Binary Contraption</title><link>https://blog.jverkamp.com/2021/12/03/aoc-2021-day-3-binary-contraption/</link><pubDate>Fri, 03 Dec 2021 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2021/12/03/aoc-2021-day-3-binary-contraption/</guid><description>&lt;h3 id="source-binary-diagnostichttpsadventofcodecom2021day3">Source: &lt;a href="https://adventofcode.com/2021/day/3">Binary Diagnostic&lt;/a>&lt;/h3>
&lt;h4 id="part-1-given-a-list-of-binary-numbers-calculate-gamma-such-that-each-bit-is-the-most-common-bit-in-that-position-in-the-input-and-epsilon-which-is-the-binary-inverse-of-gamma-return-the-product">&lt;strong>Part 1:&lt;/strong> Given a list of binary numbers, calculate gamma such that each bit is the most common bit in that position in the input and epsilon which is the binary inverse of gamma. Return the product.&lt;/h4></description></item><item><title>AoC 2021 Day 2: Submarine Simulator</title><link>https://blog.jverkamp.com/2021/12/02/aoc-2021-day-2-submarine-simulator/</link><pubDate>Thu, 02 Dec 2021 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2021/12/02/aoc-2021-day-2-submarine-simulator/</guid><description>&lt;h3 id="source-divehttpsadventofcodecom2021day2">Source: &lt;a href="https://adventofcode.com/2021/day/2">Dive!&lt;/a>&lt;/h3>
&lt;h4 id="part-1-simulate-a-submarine-with-3-commands-forward-n-down-n-and-up-n-that-move-forward-increase-depth-and-decrease-depth-in-that-order-calculate-the-product-of-the-final-position-and-depth">&lt;strong>Part 1:&lt;/strong> Simulate a submarine with 3 commands: &lt;code>forward N&lt;/code>, &lt;code>down N&lt;/code>, and &lt;code>up N&lt;/code> that move forward, increase depth, and decrease depth in that order. Calculate the product of the final position and depth.&lt;/h4></description></item><item><title>AoC 2021 Day 1: Depth Finder</title><link>https://blog.jverkamp.com/2021/12/01/aoc-2021-day-1-depth-finder/</link><pubDate>Wed, 01 Dec 2021 00:00:03 +0000</pubDate><guid>https://blog.jverkamp.com/2021/12/01/aoc-2021-day-1-depth-finder/</guid><description>&lt;h3 id="source-depth-finderhttpsadventofcodecom2021day1">Source: &lt;a href="https://adventofcode.com/2021/day/1">Depth Finder&lt;/a>&lt;/h3>
&lt;h4 id="part-1-given-a-list-of-numbers-count-how-many-times-sequential-numbers-increase">&lt;strong>Part 1:&lt;/strong> Given a list of numbers, count how many times sequential numbers increase.&lt;/h4></description></item><item><title>Advent of Code 2021</title><link>https://blog.jverkamp.com/2021/12/01/advent-of-code-2021/</link><pubDate>Wed, 01 Dec 2021 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2021/12/01/advent-of-code-2021/</guid><description>&lt;p>Been a while since I&amp;rsquo;ve done an advent of code! I&amp;rsquo;ll probably backfill a few years eventually, but for now, let&amp;rsquo;s just write some code!&lt;/p>
&lt;p>As always, these problems are wonderful to try to solve yourself. If you agree, &lt;em>stop reading now&lt;/em>. This post isn&amp;rsquo;t going anywhere.&lt;/p>
&lt;p>If you&amp;rsquo;d like to see the full form of any particular solution, you can do so on GitHub (including previous years and possibly some I haven&amp;rsquo;t written up yet): &lt;a href="https://github.com/jpverkamp/advent-of-code">jpverkamp/advent-of-code&lt;/a>&lt;/p></description></item><item><title>Neural Network Cellular Automata</title><link>https://blog.jverkamp.com/2021/09/06/neural-network-cellular-automata/</link><pubDate>Mon, 06 Sep 2021 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2021/09/06/neural-network-cellular-automata/</guid><description>&lt;p>Okay. A &lt;a href="https://old.reddit.com/r/cellular_automata/comments/ph1zez/random_neural_network_based_cellular_automata/">random post&lt;/a> on the &lt;a href="https://old.reddit.com/r/cellular_automata/">/r/cellular_automata subreddit&lt;/a> inspired me.&lt;/p>
&lt;p>Let&amp;rsquo;s generate a cellular automata where each pixel updates based on a neural network given as input:&lt;/p>
&lt;ul>
&lt;li>The x/y coordinates (scaled to the range 0-1)&lt;/li>
&lt;li>An optional random value (to make it more dynamic)&lt;/li>
&lt;li>A variety of neighboring data, such as:
&lt;ul>
&lt;li>The number of neighbors that are &amp;lsquo;active&amp;rsquo; (&amp;gt; 50% white), ranges 0-8 scaled to 0-1. This should allow &lt;a href="https://en.wikipedia.org/wiki/Conway%27s%20Game%20of%20Life">Conway&amp;#39;s Game of Life&lt;/a>&lt;/li>
&lt;li>The RGB values of all neighbors (allows a superset of the above)&lt;/li>
&lt;li>Gradients, subtract color value of the left from the right so that you get edges and side to side movement&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>Let&amp;rsquo;s do it!&lt;/p></description></item><item><title>Solving Snakebird</title><link>https://blog.jverkamp.com/2021/08/18/solving-snakebird/</link><pubDate>Wed, 18 Aug 2021 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2021/08/18/solving-snakebird/</guid><description>&lt;p>&lt;a href="https://store.steampowered.com/app/357300/Snakebird/">Snakebird!&lt;/a>&lt;/p>
&lt;figure>&lt;img src="https://blog.jverkamp.com/embeds/2021/snakebird-0.png"/>
&lt;/figure>
&lt;p>A cute little puzzle game, where you move around snake(birds). Move any number of snakes around the level, eating fruit, and getting to the exit. The main gotchas are that you have gravity to content with&amp;ndash;your snake will easily fall off the edge of the world&amp;ndash;and each time you eat a fruit, your snake gets bigger. This can help get longer to get into hard to reach places or it can cause trouble when you trap yourself in corners.&lt;/p>
&lt;p>Let&amp;rsquo;s use the new &lt;a href="2021-08-17-immutable.js-solvers">immutable.js solver&lt;/a> to solve these problems!&lt;/p></description></item><item><title>Immutable.js Solvers</title><link>https://blog.jverkamp.com/2021/08/17/immutable.js-solvers/</link><pubDate>Tue, 17 Aug 2021 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2021/08/17/immutable.js-solvers/</guid><description>&lt;p>A bit ago I wrote about writing a &lt;a href="https://blog.jverkamp.com/2021/06/25/a-generic-brute-force-backtracking-solver/">generic brute force solver&lt;/a> (wow, was that really two months ago?). It got &amp;hellip; complicate. Mostly, because every time I wrote a &lt;code>step&lt;/code> function, I had to be careful to undo the same. Wouldn&amp;rsquo;t it be nice if we could just write a step function and get backtracking for &amp;lsquo;free&amp;rsquo;?&lt;/p>
&lt;p>Well, with immutability you can!&lt;/p></description></item><item><title>Splitting Images</title><link>https://blog.jverkamp.com/2021/08/10/splitting-images/</link><pubDate>Tue, 10 Aug 2021 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2021/08/10/splitting-images/</guid><description>&lt;p>I recently came across a problem where I had a single image with a transparent background containing multiple images that I wanted to split into their component parts. For example, split this:&lt;/p>
&lt;figure class="border">&lt;img src="https://blog.jverkamp.com/embeds/2021/hi.png"/>
&lt;/figure>
&lt;p>Into these:&lt;/p>
&lt;p>&lt;figure class="border">&lt;img src="https://blog.jverkamp.com/embeds/2021/hi_1.png"/>
&lt;/figure>
&lt;figure class="border">&lt;img src="https://blog.jverkamp.com/embeds/2021/hi_2.png"/>
&lt;/figure>
&lt;figure class="border">&lt;img src="https://blog.jverkamp.com/embeds/2021/hi_3.png"/>
&lt;/figure>
&lt;figure class="border">&lt;img src="https://blog.jverkamp.com/embeds/2021/hi_4.png"/>
&lt;/figure>
&lt;figure class="border">&lt;img src="https://blog.jverkamp.com/embeds/2021/hi_5.png"/>
&lt;/figure>
&lt;/p></description></item><item><title>raco pkg install noise</title><link>https://blog.jverkamp.com/2021/08/05/raco-pkg-install-noise/</link><pubDate>Thu, 05 Aug 2021 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2021/08/05/raco-pkg-install-noise/</guid><description>&lt;p>What feels like a million years and a lifetime ago, I wrote up a &lt;a href="https://blog.jverkamp.com/2013/04/11/perlin-and-simplex-noise-in-racket/">library for perlin and simple noise in Racket&lt;/a>. Inspired by &lt;a href="https://github.com/soegaard/sketching">Jens Axel Søgaard&amp;rsquo;s new Sketching library&lt;/a> (processing in Racket) and a conversation thereabout, I figure it&amp;rsquo;s about time to push noise to the &lt;code>raco&lt;/code> package manager!&lt;/p></description></item><item><title>Crosslinks by Title in Hugo</title><link>https://blog.jverkamp.com/2021/07/15/crosslinks-by-title-in-hugo/</link><pubDate>Thu, 15 Jul 2021 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2021/07/15/crosslinks-by-title-in-hugo/</guid><description>&lt;p>Another quick Hugo post. One thing I miss about my previous blogging platform(s) was the ability to generate quick links between posts just by using the title of the post. So rather than this:&lt;/p>
&lt;a href="https://blog.jverkamp.com/2021/07/15/crosslinks-by-title-in-hugo/">a cool post&lt;/a>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-markdown" data-lang="markdown">&lt;span style="display:flex;">&lt;span>This is [&lt;span style="color:#f92672">a cool post&lt;/span>](&lt;span style="color:#a6e22e">{{&amp;lt; ref &amp;#34;2021-07-15-crosslinks-by-title-in-hugo&amp;#34; &amp;gt;}}&lt;/span>), go read it.
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>You could do this:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-markdown" data-lang="markdown">&lt;span style="display:flex;">&lt;span>This is {{&amp;lt; &lt;span style="color:#f92672">crosslink&lt;/span> &lt;span style="color:#a6e22e">title&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Crosslinks by Title in Hugo&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">text&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;a cool post&amp;#34;&lt;/span> &amp;gt;}}.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Or shorter: {{&amp;lt; &lt;span style="color:#f92672">crosslink&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">&amp;#34;&lt;/span>&lt;span style="color:#a6e22e">Crosslinks&lt;/span> &lt;span style="color:#a6e22e">by&lt;/span> &lt;span style="color:#a6e22e">Title&lt;/span> &lt;span style="color:#a6e22e">in&lt;/span> &lt;span style="color:#a6e22e">Hugo&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">&amp;#34;&lt;/span> &amp;gt;}}.
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>And it should just work.&lt;/p></description></item><item><title>Ordering Board Game Geek GeekLists by Rank</title><link>https://blog.jverkamp.com/2021/06/28/ordering-board-game-geek-geeklists-by-rank/</link><pubDate>Mon, 28 Jun 2021 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2021/06/28/ordering-board-game-geek-geeklists-by-rank/</guid><description>&lt;p>A quick script.&lt;/p>
&lt;p>I play a lot of board games. With the whole COVID-19 mess, I&amp;rsquo;ve been playing a lot on &lt;a href="https://boardgamearena.com/">Board Game Arena&lt;/a>, which is a wonderful site. But one thing that&amp;rsquo;s a bit lacking is having ratings / metadata about games to great games I&amp;rsquo;ve just not heard about before. Where can you get lots of that data? &lt;a href="https://boardgamegeek.com/">Board Game Geek&lt;/a>!&lt;/p>
&lt;p>The problem though, is merging the two. So, how do we do it? Well, this time around, I&amp;rsquo;m going to start with &lt;a href="https://boardgamegeek.com/geeklist/252354/list-games-board-game-arena">this GeekList&lt;/a> that someone else maintains of BGA games on BGG. Which has the games, but no ranks. And apparently there are no ways to rank those by BGG (for some reason). But that&amp;rsquo;s easy when you know a bit of scripting!&lt;/p></description></item><item><title>Generating a Book Bingo Chart in Hugo</title><link>https://blog.jverkamp.com/2021/06/26/generating-a-book-bingo-chart-in-hugo/</link><pubDate>Sat, 26 Jun 2021 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2021/06/26/generating-a-book-bingo-chart-in-hugo/</guid><description>&lt;p>Another &lt;a href="https://blog.jverkamp.com/2021/04/01/2021-book-bingo/">r/Fantasy 2021 Book Bingo&lt;/a> post! How in the world am I generating this (updating) chart in Hugo?&lt;/p>
&lt;h1>2021 Book Bingo&lt;/h1>
&lt;table class="bingo">&lt;tr>&lt;td>&lt;a href="https://blog.jverkamp.com/2021/03/26/attack-on-titan-vol.-1/">
&lt;figure>
&lt;img src="https://blog.jverkamp.com/embeds/books/attack-on-titan-vol-1.jpg">
&lt;figcaption>Attack on Titan, Vol. 1&lt;/figcaption>
&lt;/figure>
&lt;/a>&lt;p>(Hard Mode)&lt;/p>&lt;hr>&lt;p>5 SFF Short Stories (Hard: An entire anthology or collection)&lt;/p>
&lt;/td>&lt;td>&lt;a href="https://blog.jverkamp.com/2022/03/08/the-poppy-war/">
&lt;figure>
&lt;img src="https://blog.jverkamp.com/embeds/books/the-poppy-war.jpg">
&lt;figcaption>The Poppy War&lt;/figcaption>
&lt;/figure>
&lt;/a>&lt;p>(Hard Mode)&lt;/p>&lt;hr>&lt;p>Set in Asia (Hard: by an Asian author)&lt;/p>
&lt;/td>&lt;td>&lt;a href="https://blog.jverkamp.com/2022/03/26/the-changeling/">
&lt;figure>
&lt;img src="https://blog.jverkamp.com/embeds/books/the-changeling.jpg">
&lt;figcaption>The Changeling&lt;/figcaption>
&lt;/figure>
&lt;/a>&lt;p>(Hard Mode)&lt;/p>&lt;hr>&lt;p>&lt;a href="https://www.reddit.com/r/Fantasy/wiki/index/a-to-z-genre-guide">r/Fantasy A to Z Genre Guide&lt;/a> (Hard: by a BIPOC author)&lt;/p>
&lt;/td>&lt;td>&lt;a href="https://blog.jverkamp.com/2021/07/18/the-house-in-the-cerulean-sea/">
&lt;figure>
&lt;img src="https://blog.jverkamp.com/embeds/books/the-house-in-the-cerulean-sea.jpg">
&lt;figcaption>The House in the Cerulean Sea&lt;/figcaption>
&lt;/figure>
&lt;/a>&lt;p>(Hard Mode)&lt;/p>&lt;hr>&lt;p>Found Family (Hard: featuring an LGBTQ+ character)&lt;/p>
&lt;/td>&lt;td>&lt;a href="https://blog.jverkamp.com/2022/03/31/the-scorpio-races/">
&lt;figure>
&lt;img src="https://blog.jverkamp.com/embeds/books/the-scorpio-races.jpg">
&lt;figcaption>The Scorpio Races&lt;/figcaption>
&lt;/figure>
&lt;/a>&lt;p>(Hard Mode)&lt;/p>&lt;hr>&lt;p>First person POV (Hard: Multiple)&lt;/p>
&lt;/td>&lt;/tr>&lt;tr>&lt;td>&lt;a href="https://blog.jverkamp.com/2022/02/04/the-wyrmling-horde/">
&lt;figure>
&lt;img src="https://blog.jverkamp.com/embeds/books/the-wyrmling-horde.jpg">
&lt;figcaption>The Wyrmling Horde&lt;/figcaption>
&lt;/figure>
&lt;/a>&lt;hr>&lt;p>&lt;strike>r/Fantasy Book Club (Hard: with participation)&lt;/strike>&lt;br>&lt;br>Replaced with: Sequel: Not the First Book in the Series (2017)&lt;/p>
&lt;/td>&lt;td>&lt;a href="https://blog.jverkamp.com/2021/04/25/the-borrowers-afield/">
&lt;figure>
&lt;img src="https://blog.jverkamp.com/embeds/books/the-borrowers-afield.jpg">
&lt;figcaption>The Borrowers Afield&lt;/figcaption>
&lt;/figure>
&lt;/a>&lt;p>(Hard Mode)&lt;/p>&lt;hr>&lt;p>New to you author (Hard: haven&amp;rsquo;t heard much about)&lt;/p>
&lt;/td>&lt;td>&lt;a href="https://blog.jverkamp.com/2021/06/09/mexican-gothic/">
&lt;figure>
&lt;img src="https://blog.jverkamp.com/embeds/books/mexican-gothic.jpg">
&lt;figcaption>Mexican Gothic&lt;/figcaption>
&lt;/figure>
&lt;/a>&lt;p>(Hard Mode)&lt;/p>&lt;hr>&lt;p>Gothic Fantasy (Hard: not in the &lt;a href="https://bookriot.com/gothic-fantasy/">Book Riot article&lt;/a>)&lt;/p>
&lt;/td>&lt;td>&lt;a href="https://blog.jverkamp.com/2021/08/24/transmetropolitan-vol.-1-back-on-the-street/">
&lt;figure>
&lt;img src="https://blog.jverkamp.com/embeds/books/transmetropolitan-vol-1-back-on-the-street.jpg">
&lt;figcaption>Transmetropolitan, Vol. 1: Back on the Street&lt;/figcaption>
&lt;/figure>
&lt;/a>&lt;p>(Hard Mode)&lt;/p>&lt;hr>&lt;p>Backlist book (Hard: published before 2000)&lt;/p>
&lt;/td>&lt;td>&lt;a href="https://blog.jverkamp.com/2021/10/01/red-sister/">
&lt;figure>
&lt;img src="https://blog.jverkamp.com/embeds/books/red-sister.jpg">
&lt;figcaption>Red Sister&lt;/figcaption>
&lt;/figure>
&lt;/a>&lt;p>(Hard Mode)&lt;/p>&lt;hr>&lt;p>Revenge-seeking character (Hard: revenge as the major book plot)&lt;/p>
&lt;/td>&lt;/tr>&lt;tr>&lt;td>&lt;a href="https://blog.jverkamp.com/2021/06/19/six-wakes/">
&lt;figure>
&lt;img src="https://blog.jverkamp.com/embeds/books/six-wakes.jpg">
&lt;figcaption>Six Wakes&lt;/figcaption>
&lt;/figure>
&lt;/a>&lt;p>(Hard Mode)&lt;/p>&lt;hr>&lt;p>Mystery plot (Hard: not primary world urban fantasy)&lt;/p>
&lt;/td>&lt;td>&lt;a href="https://blog.jverkamp.com/2021/04/13/wild-sign/">
&lt;figure>
&lt;img src="https://blog.jverkamp.com/embeds/books/wild-sign.jpg">
&lt;figcaption>Wild Sign&lt;/figcaption>
&lt;/figure>
&lt;/a>&lt;p>(Hard Mode)&lt;/p>&lt;hr>&lt;p>Comfort read (Hard: that isn&amp;rsquo;t a reread)&lt;/p>
&lt;/td>&lt;td>&lt;a href="https://blog.jverkamp.com/2021/04/26/tales-of-nezura-book-1-the-zevolra/">
&lt;figure>
&lt;img src="https://blog.jverkamp.com/embeds/books/tales-of-nezura-book-1-the-zevolra.jpg">
&lt;figcaption>Tales of Nezura: Book 1: The Zevolra&lt;/figcaption>
&lt;/figure>
&lt;/a>&lt;p>(Hard Mode)&lt;/p>&lt;hr>&lt;p>Debut novel (Hard: published in 2021)&lt;/p>
&lt;/td>&lt;td>&lt;a href="https://blog.jverkamp.com/2021/10/14/hellblazer-vol.-1-original-sins/">
&lt;figure>
&lt;img src="https://blog.jverkamp.com/embeds/books/hellblazer-vol-1-original-sins.jpg">
&lt;figcaption>Hellblazer, Vol. 1: Original Sins&lt;/figcaption>
&lt;/figure>
&lt;/a>&lt;p>(Hard Mode)&lt;/p>&lt;hr>&lt;p>Cat squasher (500+ pages; Hard: 800+ pages)&lt;/p>
&lt;/td>&lt;td>&lt;a href="https://blog.jverkamp.com/2022/03/07/daemon-voices/">
&lt;figure>
&lt;img src="https://blog.jverkamp.com/embeds/books/daemon-voices.jpg">
&lt;figcaption>Daemon Voices&lt;/figcaption>
&lt;/figure>
&lt;/a>&lt;p>(Hard Mode)&lt;/p>&lt;hr>&lt;p>SFF-related nonfiction (Hard: published in the last 5 years)&lt;/p>
&lt;/td>&lt;/tr>&lt;tr>&lt;td>&lt;a href="https://blog.jverkamp.com/2022/03/31/cece-rios-and-the-desert-of-souls/">
&lt;figure>
&lt;img src="https://blog.jverkamp.com/embeds/books/cece-rios-and-the-desert-of-souls.jpg">
&lt;figcaption>Cece Rios and the Desert of Souls&lt;/figcaption>
&lt;/figure>
&lt;/a>&lt;p>(Hard Mode)&lt;/p>&lt;hr>&lt;p>Latinx or Latin American author (Hard: with fewer than 1000 Goodreads ratings)&lt;/p>
&lt;/td>&lt;td>&lt;a href="https://blog.jverkamp.com/2022/03/10/black-rain-and-paper-cranes/">
&lt;figure>
&lt;img src="https://blog.jverkamp.com/embeds/books/black-rain-and-paper-cranes.jpg">
&lt;figcaption>Black Rain and Paper Cranes&lt;/figcaption>
&lt;/figure>
&lt;/a>&lt;p>(Hard Mode)&lt;/p>&lt;hr>&lt;p>Self published (Hard: with fewer than 50 Goodreads ratings)&lt;/p>
&lt;/td>&lt;td>&lt;a href="https://blog.jverkamp.com/2021/07/01/annihilation/">
&lt;figure>
&lt;img src="https://blog.jverkamp.com/embeds/books/annihilation.jpg">
&lt;figcaption>Annihilation&lt;/figcaption>
&lt;/figure>
&lt;/a>&lt;p>(Hard Mode)&lt;/p>&lt;hr>&lt;p>Forest setting (Hard: for the entire book)&lt;/p>
&lt;/td>&lt;td>&lt;a href="https://blog.jverkamp.com/2021/07/13/gideon-the-ninth/">
&lt;figure>
&lt;img src="https://blog.jverkamp.com/embeds/books/gideon-the-ninth.jpg">
&lt;figcaption>Gideon the Ninth&lt;/figcaption>
&lt;/figure>
&lt;/a>&lt;p>(Hard Mode)&lt;/p>&lt;hr>&lt;p>Genre mashup (Hard: of three or more genres)&lt;/p>
&lt;/td>&lt;td>&lt;a href="https://blog.jverkamp.com/2021/04/21/the-midnight-library/">
&lt;figure>
&lt;img src="https://blog.jverkamp.com/embeds/books/the-midnight-library.jpg">
&lt;figcaption>The Midnight Library&lt;/figcaption>
&lt;/figure>
&lt;/a>&lt;p>(Hard Mode)&lt;/p>&lt;hr>&lt;p>Has chapter titles of more than one word (Hard: for every chapter)&lt;/p>
&lt;/td>&lt;/tr>&lt;tr>&lt;td>&lt;a href="https://blog.jverkamp.com/2021/12/08/an-alchemy-of-masques-and-mirrors/">
&lt;figure>
&lt;img src="https://blog.jverkamp.com/embeds/books/an-alchemy-of-masques-and-mirrors.jpg">
&lt;figcaption>An Alchemy of Masques and Mirrors&lt;/figcaption>
&lt;/figure>
&lt;/a>&lt;p>(Hard Mode)&lt;/p>&lt;hr>&lt;p>___ of ___ (Hard: and ___)&lt;/p>
&lt;/td>&lt;td>&lt;a href="https://blog.jverkamp.com/2021/06/15/project-hail-mary/">
&lt;figure>
&lt;img src="https://blog.jverkamp.com/embeds/books/project-hail-mary.jpg">
&lt;figcaption>Project Hail Mary&lt;/figcaption>
&lt;/figure>
&lt;/a>&lt;p>(Hard Mode)&lt;/p>&lt;hr>&lt;p>First contact (Hard: that doesn&amp;rsquo;t lead to war)&lt;/p>
&lt;/td>&lt;td>&lt;a href="https://blog.jverkamp.com/2022/03/29/black-sun/">
&lt;figure>
&lt;img src="https://blog.jverkamp.com/embeds/books/black-sun.jpg">
&lt;figcaption>Black Sun&lt;/figcaption>
&lt;/figure>
&lt;/a>&lt;hr>&lt;p>Trans or Nonbinary (Hard: protagonist)&lt;/p>
&lt;/td>&lt;td>&lt;a href="https://blog.jverkamp.com/2022/03/31/the-long-way-to-a-small-angry-planet/">
&lt;figure>
&lt;img src="https://blog.jverkamp.com/embeds/books/the-long-way-to-a-small-angry-planet.jpg">
&lt;figcaption>The Long Way to a Small, Angry Planet&lt;/figcaption>
&lt;/figure>
&lt;/a>&lt;p>(Hard Mode)&lt;/p>&lt;hr>&lt;p>Debut author (Hard: with an AMA)&lt;/p>
&lt;/td>&lt;td>&lt;a href="https://blog.jverkamp.com/2021/04/11/a-great-and-terrible-beauty/">
&lt;figure>
&lt;img src="https://blog.jverkamp.com/embeds/books/a-great-and-terrible-beauty.jpg">
&lt;figcaption>A Great and Terrible Beauty&lt;/figcaption>
&lt;/figure>
&lt;/a>&lt;p>(Hard Mode)&lt;/p>&lt;hr>&lt;p>Witches (Hard: as the main protagonist)&lt;/p>
&lt;/td>&lt;/tr>&lt;/table></description></item><item><title>A Generic Brute Force Backtracking Solver</title><link>https://blog.jverkamp.com/2021/06/25/a-generic-brute-force-backtracking-solver/</link><pubDate>Fri, 25 Jun 2021 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2021/06/25/a-generic-brute-force-backtracking-solver/</guid><description>&lt;p>One of the projects I&amp;rsquo;ve had vaguely in the back of my head is a sort of generic puzzle solver. I really love puzzles, but of the pencil and paper and video game varieties. So I think it would be awesome to write out a definition of a puzzle (say how to play Sudoku), give it input, and have it give me an answer back.&lt;/p>
&lt;p>Well, I finally got around to trying it!&lt;/p></description></item><item><title>Categorizing r/Fantasy Book Bingo Books</title><link>https://blog.jverkamp.com/2021/06/24/categorizing-r/fantasy-book-bingo-books/</link><pubDate>Thu, 24 Jun 2021 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2021/06/24/categorizing-r/fantasy-book-bingo-books/</guid><description>&lt;p>I&amp;rsquo;ve been working through the &lt;a href="https://blog.jverkamp.com/2021/04/01/2021-book-bingo/">r/Fantasy 2021 Book Bingo&lt;/a> this year:&lt;/p>
&lt;h1>2021 Book Bingo&lt;/h1>
&lt;table class="bingo">&lt;tr>&lt;td>&lt;a href="https://blog.jverkamp.com/2021/03/26/attack-on-titan-vol.-1/">
&lt;figure>
&lt;img src="https://blog.jverkamp.com/embeds/books/attack-on-titan-vol-1.jpg">
&lt;figcaption>Attack on Titan, Vol. 1&lt;/figcaption>
&lt;/figure>
&lt;/a>&lt;p>(Hard Mode)&lt;/p>&lt;hr>&lt;p>5 SFF Short Stories (Hard: An entire anthology or collection)&lt;/p>
&lt;/td>&lt;td>&lt;a href="https://blog.jverkamp.com/2022/03/08/the-poppy-war/">
&lt;figure>
&lt;img src="https://blog.jverkamp.com/embeds/books/the-poppy-war.jpg">
&lt;figcaption>The Poppy War&lt;/figcaption>
&lt;/figure>
&lt;/a>&lt;p>(Hard Mode)&lt;/p>&lt;hr>&lt;p>Set in Asia (Hard: by an Asian author)&lt;/p>
&lt;/td>&lt;td>&lt;a href="https://blog.jverkamp.com/2022/03/26/the-changeling/">
&lt;figure>
&lt;img src="https://blog.jverkamp.com/embeds/books/the-changeling.jpg">
&lt;figcaption>The Changeling&lt;/figcaption>
&lt;/figure>
&lt;/a>&lt;p>(Hard Mode)&lt;/p>&lt;hr>&lt;p>&lt;a href="https://www.reddit.com/r/Fantasy/wiki/index/a-to-z-genre-guide">r/Fantasy A to Z Genre Guide&lt;/a> (Hard: by a BIPOC author)&lt;/p>
&lt;/td>&lt;td>&lt;a href="https://blog.jverkamp.com/2021/07/18/the-house-in-the-cerulean-sea/">
&lt;figure>
&lt;img src="https://blog.jverkamp.com/embeds/books/the-house-in-the-cerulean-sea.jpg">
&lt;figcaption>The House in the Cerulean Sea&lt;/figcaption>
&lt;/figure>
&lt;/a>&lt;p>(Hard Mode)&lt;/p>&lt;hr>&lt;p>Found Family (Hard: featuring an LGBTQ+ character)&lt;/p>
&lt;/td>&lt;td>&lt;a href="https://blog.jverkamp.com/2022/03/31/the-scorpio-races/">
&lt;figure>
&lt;img src="https://blog.jverkamp.com/embeds/books/the-scorpio-races.jpg">
&lt;figcaption>The Scorpio Races&lt;/figcaption>
&lt;/figure>
&lt;/a>&lt;p>(Hard Mode)&lt;/p>&lt;hr>&lt;p>First person POV (Hard: Multiple)&lt;/p>
&lt;/td>&lt;/tr>&lt;tr>&lt;td>&lt;a href="https://blog.jverkamp.com/2022/02/04/the-wyrmling-horde/">
&lt;figure>
&lt;img src="https://blog.jverkamp.com/embeds/books/the-wyrmling-horde.jpg">
&lt;figcaption>The Wyrmling Horde&lt;/figcaption>
&lt;/figure>
&lt;/a>&lt;hr>&lt;p>&lt;strike>r/Fantasy Book Club (Hard: with participation)&lt;/strike>&lt;br>&lt;br>Replaced with: Sequel: Not the First Book in the Series (2017)&lt;/p>
&lt;/td>&lt;td>&lt;a href="https://blog.jverkamp.com/2021/04/25/the-borrowers-afield/">
&lt;figure>
&lt;img src="https://blog.jverkamp.com/embeds/books/the-borrowers-afield.jpg">
&lt;figcaption>The Borrowers Afield&lt;/figcaption>
&lt;/figure>
&lt;/a>&lt;p>(Hard Mode)&lt;/p>&lt;hr>&lt;p>New to you author (Hard: haven&amp;rsquo;t heard much about)&lt;/p>
&lt;/td>&lt;td>&lt;a href="https://blog.jverkamp.com/2021/06/09/mexican-gothic/">
&lt;figure>
&lt;img src="https://blog.jverkamp.com/embeds/books/mexican-gothic.jpg">
&lt;figcaption>Mexican Gothic&lt;/figcaption>
&lt;/figure>
&lt;/a>&lt;p>(Hard Mode)&lt;/p>&lt;hr>&lt;p>Gothic Fantasy (Hard: not in the &lt;a href="https://bookriot.com/gothic-fantasy/">Book Riot article&lt;/a>)&lt;/p>
&lt;/td>&lt;td>&lt;a href="https://blog.jverkamp.com/2021/08/24/transmetropolitan-vol.-1-back-on-the-street/">
&lt;figure>
&lt;img src="https://blog.jverkamp.com/embeds/books/transmetropolitan-vol-1-back-on-the-street.jpg">
&lt;figcaption>Transmetropolitan, Vol. 1: Back on the Street&lt;/figcaption>
&lt;/figure>
&lt;/a>&lt;p>(Hard Mode)&lt;/p>&lt;hr>&lt;p>Backlist book (Hard: published before 2000)&lt;/p>
&lt;/td>&lt;td>&lt;a href="https://blog.jverkamp.com/2021/10/01/red-sister/">
&lt;figure>
&lt;img src="https://blog.jverkamp.com/embeds/books/red-sister.jpg">
&lt;figcaption>Red Sister&lt;/figcaption>
&lt;/figure>
&lt;/a>&lt;p>(Hard Mode)&lt;/p>&lt;hr>&lt;p>Revenge-seeking character (Hard: revenge as the major book plot)&lt;/p>
&lt;/td>&lt;/tr>&lt;tr>&lt;td>&lt;a href="https://blog.jverkamp.com/2021/06/19/six-wakes/">
&lt;figure>
&lt;img src="https://blog.jverkamp.com/embeds/books/six-wakes.jpg">
&lt;figcaption>Six Wakes&lt;/figcaption>
&lt;/figure>
&lt;/a>&lt;p>(Hard Mode)&lt;/p>&lt;hr>&lt;p>Mystery plot (Hard: not primary world urban fantasy)&lt;/p>
&lt;/td>&lt;td>&lt;a href="https://blog.jverkamp.com/2021/04/13/wild-sign/">
&lt;figure>
&lt;img src="https://blog.jverkamp.com/embeds/books/wild-sign.jpg">
&lt;figcaption>Wild Sign&lt;/figcaption>
&lt;/figure>
&lt;/a>&lt;p>(Hard Mode)&lt;/p>&lt;hr>&lt;p>Comfort read (Hard: that isn&amp;rsquo;t a reread)&lt;/p>
&lt;/td>&lt;td>&lt;a href="https://blog.jverkamp.com/2021/04/26/tales-of-nezura-book-1-the-zevolra/">
&lt;figure>
&lt;img src="https://blog.jverkamp.com/embeds/books/tales-of-nezura-book-1-the-zevolra.jpg">
&lt;figcaption>Tales of Nezura: Book 1: The Zevolra&lt;/figcaption>
&lt;/figure>
&lt;/a>&lt;p>(Hard Mode)&lt;/p>&lt;hr>&lt;p>Debut novel (Hard: published in 2021)&lt;/p>
&lt;/td>&lt;td>&lt;a href="https://blog.jverkamp.com/2021/10/14/hellblazer-vol.-1-original-sins/">
&lt;figure>
&lt;img src="https://blog.jverkamp.com/embeds/books/hellblazer-vol-1-original-sins.jpg">
&lt;figcaption>Hellblazer, Vol. 1: Original Sins&lt;/figcaption>
&lt;/figure>
&lt;/a>&lt;p>(Hard Mode)&lt;/p>&lt;hr>&lt;p>Cat squasher (500+ pages; Hard: 800+ pages)&lt;/p>
&lt;/td>&lt;td>&lt;a href="https://blog.jverkamp.com/2022/03/07/daemon-voices/">
&lt;figure>
&lt;img src="https://blog.jverkamp.com/embeds/books/daemon-voices.jpg">
&lt;figcaption>Daemon Voices&lt;/figcaption>
&lt;/figure>
&lt;/a>&lt;p>(Hard Mode)&lt;/p>&lt;hr>&lt;p>SFF-related nonfiction (Hard: published in the last 5 years)&lt;/p>
&lt;/td>&lt;/tr>&lt;tr>&lt;td>&lt;a href="https://blog.jverkamp.com/2022/03/31/cece-rios-and-the-desert-of-souls/">
&lt;figure>
&lt;img src="https://blog.jverkamp.com/embeds/books/cece-rios-and-the-desert-of-souls.jpg">
&lt;figcaption>Cece Rios and the Desert of Souls&lt;/figcaption>
&lt;/figure>
&lt;/a>&lt;p>(Hard Mode)&lt;/p>&lt;hr>&lt;p>Latinx or Latin American author (Hard: with fewer than 1000 Goodreads ratings)&lt;/p>
&lt;/td>&lt;td>&lt;a href="https://blog.jverkamp.com/2022/03/10/black-rain-and-paper-cranes/">
&lt;figure>
&lt;img src="https://blog.jverkamp.com/embeds/books/black-rain-and-paper-cranes.jpg">
&lt;figcaption>Black Rain and Paper Cranes&lt;/figcaption>
&lt;/figure>
&lt;/a>&lt;p>(Hard Mode)&lt;/p>&lt;hr>&lt;p>Self published (Hard: with fewer than 50 Goodreads ratings)&lt;/p>
&lt;/td>&lt;td>&lt;a href="https://blog.jverkamp.com/2021/07/01/annihilation/">
&lt;figure>
&lt;img src="https://blog.jverkamp.com/embeds/books/annihilation.jpg">
&lt;figcaption>Annihilation&lt;/figcaption>
&lt;/figure>
&lt;/a>&lt;p>(Hard Mode)&lt;/p>&lt;hr>&lt;p>Forest setting (Hard: for the entire book)&lt;/p>
&lt;/td>&lt;td>&lt;a href="https://blog.jverkamp.com/2021/07/13/gideon-the-ninth/">
&lt;figure>
&lt;img src="https://blog.jverkamp.com/embeds/books/gideon-the-ninth.jpg">
&lt;figcaption>Gideon the Ninth&lt;/figcaption>
&lt;/figure>
&lt;/a>&lt;p>(Hard Mode)&lt;/p>&lt;hr>&lt;p>Genre mashup (Hard: of three or more genres)&lt;/p>
&lt;/td>&lt;td>&lt;a href="https://blog.jverkamp.com/2021/04/21/the-midnight-library/">
&lt;figure>
&lt;img src="https://blog.jverkamp.com/embeds/books/the-midnight-library.jpg">
&lt;figcaption>The Midnight Library&lt;/figcaption>
&lt;/figure>
&lt;/a>&lt;p>(Hard Mode)&lt;/p>&lt;hr>&lt;p>Has chapter titles of more than one word (Hard: for every chapter)&lt;/p>
&lt;/td>&lt;/tr>&lt;tr>&lt;td>&lt;a href="https://blog.jverkamp.com/2021/12/08/an-alchemy-of-masques-and-mirrors/">
&lt;figure>
&lt;img src="https://blog.jverkamp.com/embeds/books/an-alchemy-of-masques-and-mirrors.jpg">
&lt;figcaption>An Alchemy of Masques and Mirrors&lt;/figcaption>
&lt;/figure>
&lt;/a>&lt;p>(Hard Mode)&lt;/p>&lt;hr>&lt;p>___ of ___ (Hard: and ___)&lt;/p>
&lt;/td>&lt;td>&lt;a href="https://blog.jverkamp.com/2021/06/15/project-hail-mary/">
&lt;figure>
&lt;img src="https://blog.jverkamp.com/embeds/books/project-hail-mary.jpg">
&lt;figcaption>Project Hail Mary&lt;/figcaption>
&lt;/figure>
&lt;/a>&lt;p>(Hard Mode)&lt;/p>&lt;hr>&lt;p>First contact (Hard: that doesn&amp;rsquo;t lead to war)&lt;/p>
&lt;/td>&lt;td>&lt;a href="https://blog.jverkamp.com/2022/03/29/black-sun/">
&lt;figure>
&lt;img src="https://blog.jverkamp.com/embeds/books/black-sun.jpg">
&lt;figcaption>Black Sun&lt;/figcaption>
&lt;/figure>
&lt;/a>&lt;hr>&lt;p>Trans or Nonbinary (Hard: protagonist)&lt;/p>
&lt;/td>&lt;td>&lt;a href="https://blog.jverkamp.com/2022/03/31/the-long-way-to-a-small-angry-planet/">
&lt;figure>
&lt;img src="https://blog.jverkamp.com/embeds/books/the-long-way-to-a-small-angry-planet.jpg">
&lt;figcaption>The Long Way to a Small, Angry Planet&lt;/figcaption>
&lt;/figure>
&lt;/a>&lt;p>(Hard Mode)&lt;/p>&lt;hr>&lt;p>Debut author (Hard: with an AMA)&lt;/p>
&lt;/td>&lt;td>&lt;a href="https://blog.jverkamp.com/2021/04/11/a-great-and-terrible-beauty/">
&lt;figure>
&lt;img src="https://blog.jverkamp.com/embeds/books/a-great-and-terrible-beauty.jpg">
&lt;figcaption>A Great and Terrible Beauty&lt;/figcaption>
&lt;/figure>
&lt;/a>&lt;p>(Hard Mode)&lt;/p>&lt;hr>&lt;p>Witches (Hard: as the main protagonist)&lt;/p>
&lt;/td>&lt;/tr>&lt;/table></description></item><item><title>Partitioning a Linked List</title><link>https://blog.jverkamp.com/2021/04/20/partitioning-a-linked-list/</link><pubDate>Tue, 20 Apr 2021 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2021/04/20/partitioning-a-linked-list/</guid><description>&lt;p>One more fairly standard tech interview problem (for better or for worse, you&amp;rsquo;re likely to see one of these if you go for a programming job):&lt;/p>
&lt;blockquote>
&lt;p>Given a &lt;a href="https://en.wikipedia.org/wiki/linked%20list">linked list&lt;/a> and an element &lt;code>x&lt;/code>. Partition the list so that all elements less than &lt;code>x&lt;/code> are before elements greater than or equal to &lt;code>x&lt;/code>, but do not otherwise change the order of the elements.&lt;/p>
&lt;/blockquote></description></item><item><title>Dynamic Programming over a Matrix</title><link>https://blog.jverkamp.com/2021/04/13/dynamic-programming-over-a-matrix/</link><pubDate>Tue, 13 Apr 2021 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2021/04/13/dynamic-programming-over-a-matrix/</guid><description>Another LeetCode problem.
Given an MxN matrix of numbers, find the longest path of strictly increasing numbers.
So for example in this matrix:
994 668 211 You can start with the 1 in the bottom center, go left to the two, then up to the 6, and 9. That&amp;rsquo;s the longest path, so return a 4.
In this 3x3 case, it&amp;rsquo;s really easy to just brute force. Calculate all possible paths.</description></item></channel></rss>