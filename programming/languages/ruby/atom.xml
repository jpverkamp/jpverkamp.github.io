<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Ruby on jverkamp.com</title>
    <link>https://blog.jverkamp.com/programming/languages/ruby/</link>
    <description>Recent content in Ruby on jverkamp.com</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language><atom:link href="https://blog.jverkamp.com/programming/languages/ruby/atom.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>A DSL for rendering magic circles and runes</title>
      <link>https://blog.jverkamp.com/2021/01/26/a-dsl-for-rendering-magic-circles-and-runes/</link>
      <pubDate>Tue, 26 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2021/01/26/a-dsl-for-rendering-magic-circles-and-runes/</guid>
      <description>&lt;p&gt;Let&amp;rsquo;s make magic circles/runes!&lt;/p&gt;
&lt;p&gt;Turn this:&lt;/p&gt;



&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;rune &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;
    scale &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; 
        circle
        polygon &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;
        star &lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;
        star &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
        children &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;scale&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;r, &lt;span style=&#34;color:#e6db74&#34;&gt;offset&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;i&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;
            circle
            invert &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;
                text (&lt;span style=&#34;color:#ae81ff&#34;&gt;0x2641&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; i)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;chr &lt;span style=&#34;color:#66d9ef&#34;&gt;Encoding&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;UTF_8&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
    scale &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;
        translate &lt;span style=&#34;color:#e6db74&#34;&gt;x&lt;/span&gt;: &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; circle; moon &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;45&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
        circle
        translate &lt;span style=&#34;color:#e6db74&#34;&gt;x&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; circle; moon &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;55&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Into this:&lt;/p&gt;
&lt;div style=&#34;width: 400px&#34;&gt;

&lt;svg xmlns=&#34;http://www.w3.org/2000/svg&#34; viewBox=&#34;-100 -100 200 200&#34;&gt;
  &lt;g transform=&#34;rotate(180)&#34; stroke=&#34;black&#34; fill=&#34;white&#34;&gt;
    &lt;g transform=&#34;scale(0.9)&#34;&gt;
      &lt;circle cx=&#34;0&#34; cy=&#34;0&#34; r=&#34;100&#34; vector-effect=&#34;non-scaling-stroke&#34; /&gt;
      &lt;polygon points=&#34;6.123233995736766e-15,100.0 -78.18314824680299,62.34898018587336 -97.49279121818236,-22.252093395631427 -43.38837391175583,-90.09688679024191 43.38837391175579,-90.09688679024192 97.49279121818235,-22.252093395631466 78.183148246803,62.34898018587334&#34; vector-effect=&#34;non-scaling-stroke&#34; /&gt;
      &lt;polygon points=&#34;6.123233995736766e-15,100.0 -97.49279121818236,22.25209339563145 -43.38837391175583,-90.09688679024191 78.18314824680297,-62.34898018587337 78.183148246803,62.34898018587334 -43.38837391175581,90.09688679024191 -97.49279121818236,-22.252093395631427 -1.8369701987210297e-14,-100.0 97.49279121818235,-22.252093395631466 43.38837391175584,90.09688679024191 -78.18314824680299,62.34898018587336 -78.18314824680299,-62.34898018587334 43.38837391175579,-90.09688679024192 97.49279121818236,22.252093395631416&#34; vector-effect=&#34;non-scaling-stroke&#34; /&gt;
      &lt;polygon points=&#34;6.123233995736766e-15,100.0 -97.49279121818236,-22.252093395631427 43.38837391175579,-90.09688679024192 78.183148246803,62.34898018587334 -78.18314824680299,62.34898018587336 -43.38837391175583,-90.09688679024191 97.49279121818235,-22.252093395631466&#34; vector-effect=&#34;non-scaling-stroke&#34; /&gt;
      &lt;g&gt;
        &lt;g transform=&#34;rotate(0.0) translate(0 100.0) scale(0.125)&#34;&gt;
          &lt;circle cx=&#34;0&#34; cy=&#34;0&#34; r=&#34;100&#34; vector-effect=&#34;non-scaling-stroke&#34; /&gt;
          &lt;g transform=&#34;rotate(180.0)&#34;&gt;
            &lt;text stroke=&#34;none&#34; fill=&#34;black&#34; font-size=&#34;100.0px&#34; text-anchor=&#34;middle&#34; dominant-baseline=&#34;central&#34;&gt;
              ♁
            &lt;/text&gt;
          &lt;/g&gt;
        &lt;/g&gt;
        &lt;g transform=&#34;rotate(51.42857142857143) translate(0 100.0) scale(0.125)&#34;&gt;
          &lt;circle cx=&#34;0&#34; cy=&#34;0&#34; r=&#34;100&#34; vector-effect=&#34;non-scaling-stroke&#34; /&gt;
          &lt;g transform=&#34;rotate(180.0)&#34;&gt;
            &lt;text stroke=&#34;none&#34; fill=&#34;black&#34; font-size=&#34;100.0px&#34; text-anchor=&#34;middle&#34; dominant-baseline=&#34;central&#34;&gt;
              ♂
            &lt;/text&gt;
          &lt;/g&gt;
        &lt;/g&gt;
        &lt;g transform=&#34;rotate(102.85714285714286) translate(0 100.0) scale(0.125)&#34;&gt;
          &lt;circle cx=&#34;0&#34; cy=&#34;0&#34; r=&#34;100&#34; vector-effect=&#34;non-scaling-stroke&#34; /&gt;
          &lt;g transform=&#34;rotate(180.0)&#34;&gt;
            &lt;text stroke=&#34;none&#34; fill=&#34;black&#34; font-size=&#34;100.0px&#34; text-anchor=&#34;middle&#34; dominant-baseline=&#34;central&#34;&gt;
              ♃
            &lt;/text&gt;
          &lt;/g&gt;
        &lt;/g&gt;
        &lt;g transform=&#34;rotate(154.28571428571428) translate(0 100.0) scale(0.125)&#34;&gt;
          &lt;circle cx=&#34;0&#34; cy=&#34;0&#34; r=&#34;100&#34; vector-effect=&#34;non-scaling-stroke&#34; /&gt;
          &lt;g transform=&#34;rotate(180.0)&#34;&gt;
            &lt;text stroke=&#34;none&#34; fill=&#34;black&#34; font-size=&#34;100.0px&#34; text-anchor=&#34;middle&#34; dominant-baseline=&#34;central&#34;&gt;
              ♄
            &lt;/text&gt;
          &lt;/g&gt;
        &lt;/g&gt;
        &lt;g transform=&#34;rotate(205.71428571428572) translate(0 100.0) scale(0.125)&#34;&gt;
          &lt;circle cx=&#34;0&#34; cy=&#34;0&#34; r=&#34;100&#34; vector-effect=&#34;non-scaling-stroke&#34; /&gt;
          &lt;g transform=&#34;rotate(180.0)&#34;&gt;
            &lt;text stroke=&#34;none&#34; fill=&#34;black&#34; font-size=&#34;100.0px&#34; text-anchor=&#34;middle&#34; dominant-baseline=&#34;central&#34;&gt;
              ♅
            &lt;/text&gt;
          &lt;/g&gt;
        &lt;/g&gt;
        &lt;g transform=&#34;rotate(257.14285714285717) translate(0 100.0) scale(0.125)&#34;&gt;
          &lt;circle cx=&#34;0&#34; cy=&#34;0&#34; r=&#34;100&#34; vector-effect=&#34;non-scaling-stroke&#34; /&gt;
          &lt;g transform=&#34;rotate(180.0)&#34;&gt;
            &lt;text stroke=&#34;none&#34; fill=&#34;black&#34; font-size=&#34;100.0px&#34; text-anchor=&#34;middle&#34; dominant-baseline=&#34;central&#34;&gt;
              ♆
            &lt;/text&gt;
          &lt;/g&gt;
        &lt;/g&gt;
        &lt;g transform=&#34;rotate(308.57142857142856) translate(0 100.0) scale(0.125)&#34;&gt;
          &lt;circle cx=&#34;0&#34; cy=&#34;0&#34; r=&#34;100&#34; vector-effect=&#34;non-scaling-stroke&#34; /&gt;
          &lt;g transform=&#34;rotate(180.0)&#34;&gt;
            &lt;text stroke=&#34;none&#34; fill=&#34;black&#34; font-size=&#34;100.0px&#34; text-anchor=&#34;middle&#34; dominant-baseline=&#34;central&#34;&gt;
              ♇
            &lt;/text&gt;
          &lt;/g&gt;
        &lt;/g&gt;
      &lt;/g&gt;
    &lt;/g&gt;
    &lt;g transform=&#34;scale(0.15)&#34;&gt;
      &lt;g transform=&#34;translate(-200.0,0.0)&#34;&gt;
        &lt;circle cx=&#34;0&#34; cy=&#34;0&#34; r=&#34;100&#34; vector-effect=&#34;non-scaling-stroke&#34; /&gt;
        &lt;g transform=&#34;rotate(90.0)&#34;&gt;
          &lt;path d=&#34;M 98.7688 15.6434 A 100 100, 0, 1, 0, -98.7688 15.6434 A 100 100, 0, 0, 1, 98.7688 15.6434&#34; vector-effect=&#34;non-scaling-stroke&#34; /&gt;
        &lt;/g&gt;
      &lt;/g&gt;
      &lt;circle cx=&#34;0&#34; cy=&#34;0&#34; r=&#34;100&#34; vector-effect=&#34;non-scaling-stroke&#34; /&gt;
      &lt;g transform=&#34;translate(200.0,0.0)&#34;&gt;
        &lt;circle cx=&#34;0&#34; cy=&#34;0&#34; r=&#34;100&#34; vector-effect=&#34;non-scaling-stroke&#34; /&gt;
        &lt;g transform=&#34;rotate(90.0)&#34;&gt;
          &lt;path d=&#34;M 98.7688 -15.6434 A 100 100, 0, 0, 1, -98.7688 -15.6434 A 100 100, 0, 1, 0, 98.7688 -15.6434&#34; vector-effect=&#34;non-scaling-stroke&#34; /&gt;
        &lt;/g&gt;
      &lt;/g&gt;
    &lt;/g&gt;
  &lt;/g&gt;
&lt;/svg&gt;


&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Directly monitoring Sidekiq in Redis</title>
      <link>https://blog.jverkamp.com/2020/07/14/directly-monitoring-sidekiq-in-redis/</link>
      <pubDate>Tue, 14 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2020/07/14/directly-monitoring-sidekiq-in-redis/</guid>
      <description>&lt;p&gt;Another thing that came up recently: we have many (many) &lt;a href=&#34;https://github.com/mperham/sidekiq&#34;&gt;sidekiq&lt;/a&gt; queues. Each has their own admin interface, but sometimes you just want all of the information in one place. Of course, you could bookmark all of the pages. Or make a single page with a lot of frames (remember &lt;a href=&#34;https://en.wikipedia.org/wiki/HTML%20frames&#34;&gt;HTML frames&lt;/a&gt;?). Or use their API. But where&amp;rsquo;s the fun in that? Instead, let&amp;rsquo;s dig straight into the redis backend and see what we can see!&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>SSRF Protection in Rails</title>
      <link>https://blog.jverkamp.com/2020/06/30/ssrf-protection-in-rails/</link>
      <pubDate>Tue, 30 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2020/06/30/ssrf-protection-in-rails/</guid>
      <description>&lt;p&gt;One of the more subtle bugs that a lot of companies miss is Server Side Request Forgery (SSRF). Like it&amp;rsquo;s cousin CSRF (cross-site request forgery), SSRF involves carefully crafting a request that runs in a way that the original developers didn&amp;rsquo;t expect to do things that shouldn&amp;rsquo;t be done. In the case of CSRF, one site is making a request on behalf of another in a user&amp;rsquo;s browser (cross-site), but in SSRF, a request is being made by a server on behalf of a client, but you can trick it into making a request that wasn&amp;rsquo;t intended.&lt;/p&gt;
&lt;p&gt;For a perhaps more obvious example, consider a website with a service that will render webpages as preview images&amp;ndash;consider sharing links on a social network. A user makes a request such as &lt;code&gt;/render?url=https://www.google.com&lt;/code&gt;. This goes to the server, which will then fetch &lt;a href=&#34;https://www.google.com&#34;&gt;https://www.google.com&lt;/a&gt;, render the page to a screenshot, and then return that as a thumbnail.&lt;/p&gt;
&lt;p&gt;This seems like rather useful functionality, but what if instead, the user gives the url: &lt;code&gt;/render?url=https://secret-internal-site.company.com&lt;/code&gt;. Normally, &lt;code&gt;company.com&lt;/code&gt; would be an internal only domain that cannot be viewed by users, but in this case&amp;ndash;the server is within the corporate network. Off the server goes, helpfully taking and returning a screenshot. Another option&amp;ndash;if you&amp;rsquo;re hosted on AWS&amp;ndash;is the AWS &lt;a href=&#34;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-metadata.html&#34;&gt;metadata endpoint&lt;/a&gt;: &lt;code&gt;http://169.254.169.254/latest/meta-data/&lt;/code&gt;. All sorts of interesting private things there. Or even more insidious, &lt;code&gt;/render?url=file:///etc/password&lt;/code&gt;. That shouldn&amp;rsquo;t work in most cases, since most libraries know better than to rener &lt;code&gt;file://&lt;/code&gt; protocol URLs, but&amp;hellip; not always!&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Rack::Cors Configuration Tricks</title>
      <link>https://blog.jverkamp.com/2020/01/16/rackcors-configuration-tricks/</link>
      <pubDate>Thu, 16 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2020/01/16/rackcors-configuration-tricks/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://github.com/cyu/rack-cors&#34;&gt;cyu&amp;rsquo;s Rack::Cors middleware&lt;/a&gt; is rather handy if want to control your &lt;a href=&#34;https://en.wikipedia.org/wiki/CORS&#34;&gt;CORS&lt;/a&gt; (Cross-Origin Resource Sharing) settings in a Ruby-on-Rails project. Previously, there was a fairly major issue where &lt;code&gt;:credentials =&amp;gt; true&lt;/code&gt; was the default (which you generally do not want), but there were also some more complicated tweaks that I wanted to make.&lt;/p&gt;
&lt;p&gt;One problem I recently had to deal with was wanting to:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Allow CORS connections from arbitrary domains (this site functions as an API)&lt;/li&gt;
&lt;li&gt;Do not allow CORS from http domains at all&lt;/li&gt;
&lt;li&gt;Only allow cookies (&lt;code&gt;Access-Control-Allow-Credentials&lt;/code&gt;) to be sent for sibling subdomains&lt;/li&gt;
&lt;li&gt;Prevent cookies from being sent from specific sibling subdomains (that are actually run by a third party)&lt;/li&gt;
&lt;li&gt;On development (non-production) versions of the site, allow credentials from localhost&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>Prevent JavaScript links by parsing URLs</title>
      <link>https://blog.jverkamp.com/2019/05/02/prevent-javascript-links-by-parsing-urls/</link>
      <pubDate>Thu, 02 May 2019 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2019/05/02/prevent-javascript-links-by-parsing-urls/</guid>
      <description>&lt;p&gt;If you have a website that allows users to submit URLs, one of the (many many) things people will try to do to break your site is to submit URLs that use the &lt;code&gt;javascript:&lt;/code&gt; protocol (rather than the more expected &lt;code&gt;http:&lt;/code&gt; or &lt;code&gt;https:&lt;/code&gt;). This is almost never something that you want, since it allows users to submit essentially arbitrary code that other users will run on click in the context of your domain (&lt;a href=&#34;https://en.wikipedia.org/wiki/same%20origin%20policy&#34;&gt;same origin policy&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;So how do you fix it?&lt;/p&gt;
&lt;p&gt;First thought would be to try to check the protocol:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;safe_url&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;url&lt;/span&gt;) =&amp;gt; &lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;url&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;match&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;/^javascript:/&lt;/span&gt;)
[Function&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;safe_url&lt;/span&gt;]

&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;safe_url&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;http://www.example.com&amp;#39;&lt;/span&gt;)
&lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;

&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;safe_url&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;javascript:alert(1)&amp;#39;&lt;/span&gt;)
&lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Forcing Secure Cookies Behind an ELB in Ruby/Rails</title>
      <link>https://blog.jverkamp.com/2019/04/30/forcing-secure-cookies-behind-an-elb-in-ruby/rails/</link>
      <pubDate>Tue, 30 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2019/04/30/forcing-secure-cookies-behind-an-elb-in-ruby/rails/</guid>
      <description>&lt;p&gt;As part of general security good practices, you should always (whenever possible):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;use HTTPS to serve all requests&lt;/li&gt;
&lt;li&gt;serve redirects to upgrade HTTP requests to HTTPS&lt;/li&gt;
&lt;li&gt;set session cookies to &lt;code&gt;secure&lt;/code&gt; and &lt;code&gt;http_only&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;enable HTTP Strict Transport Security (&lt;code&gt;HSTS&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
  </channel>
</rss>
