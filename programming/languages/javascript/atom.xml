<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>JavaScript on jverkamp.com</title>
    <link>https://blog.jverkamp.com/programming/languages/javascript/</link>
    <description>Recent content in JavaScript on jverkamp.com</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language><atom:link href="https://blog.jverkamp.com/programming/languages/javascript/atom.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Solving Snakebird</title>
      <link>https://blog.jverkamp.com/2021/08/18/solving-snakebird/</link>
      <pubDate>Wed, 18 Aug 2021 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2021/08/18/solving-snakebird/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://store.steampowered.com/app/357300/Snakebird/&#34;&gt;Snakebird!&lt;/a&gt;&lt;/p&gt;
&lt;figure&gt;
    &lt;img src=&#34;https://blog.jverkamp.com/embeds/2021/snakebird-0.png&#34;/&gt; 
&lt;/figure&gt;

&lt;p&gt;A cute little puzzle game, where you move around snake(birds). Move any number of snakes around the level, eating fruit, and getting to the exit. The main gotchas are that you have gravity to content with&amp;ndash;your snake will easily fall off the edge of the world&amp;ndash;and each time you eat a fruit, your snake gets bigger. This can help get longer to get into hard to reach places or it can cause trouble when you trap yourself in corners.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s use the new &lt;a href=&#34;2021-08-17-immutable.js-solvers&#34;&gt;immutable.js solver&lt;/a&gt; to solve these problems!&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Immutable.js Solvers</title>
      <link>https://blog.jverkamp.com/2021/08/17/immutable.js-solvers/</link>
      <pubDate>Tue, 17 Aug 2021 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2021/08/17/immutable.js-solvers/</guid>
      <description>&lt;p&gt;A bit ago I wrote about writing a &lt;a href=&#34;https://blog.jverkamp.com/2021/06/25/a-generic-brute-force-backtracking-solver/&#34;&gt;generic brute force solver&lt;/a&gt; (wow, was that really two months ago?). It got &amp;hellip; complicate. Mostly, because every time I wrote a &lt;code&gt;step&lt;/code&gt; function, I had to be careful to undo the same. Wouldn&amp;rsquo;t it be nice if we could just write a step function and get backtracking for &amp;lsquo;free&amp;rsquo;?&lt;/p&gt;
&lt;p&gt;Well, with immutability you can!&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>A Generic Brute Force Backtracking Solver</title>
      <link>https://blog.jverkamp.com/2021/06/25/a-generic-brute-force-backtracking-solver/</link>
      <pubDate>Fri, 25 Jun 2021 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2021/06/25/a-generic-brute-force-backtracking-solver/</guid>
      <description>&lt;p&gt;One of the projects I&amp;rsquo;ve had vaguely in the back of my head is a sort of generic puzzle solver. I really love puzzles, but of the pencil and paper and video game varieties. So I think it would be awesome to write out a definition of a puzzle (say how to play Sudoku), give it input, and have it give me an answer back.&lt;/p&gt;
&lt;p&gt;Well, I finally got around to trying it!&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>GMail Oldest First</title>
      <link>https://blog.jverkamp.com/2021/01/25/gmail-oldest-first/</link>
      <pubDate>Mon, 25 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2021/01/25/gmail-oldest-first/</guid>
      <description>&lt;p&gt;It&amp;rsquo;s been &lt;a href=&#34;https://blog.jverkamp.com/2016/01/02/inlining-plaintext-attachments-in-gmail/&#34;&gt;rather a while&lt;/a&gt; since I last worked on a userscript, but there&amp;rsquo;s been a problem I&amp;rsquo;ve been trying to solve for some time.&lt;/p&gt;
&lt;p&gt;I want to have my GMail in order from oldest to newest. While you can do this for all messages, you can&amp;rsquo;t do it within a single page.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Genuary: Triple Nested Loops</title>
      <link>https://blog.jverkamp.com/2021/01/08/genuary-triple-nested-loops/</link>
      <pubDate>Fri, 08 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2021/01/08/genuary-triple-nested-loops/</guid>
      <description>&lt;p&gt;The fine people of &lt;a href=&#34;https://old.reddit.com/r/generative/&#34;&gt;/r/generative&lt;/a&gt; / &lt;a href=&#34;https://genuary2021.github.io/&#34;&gt;Genuary2021&lt;/a&gt; have a series of challenges for generative works for the month of January. I don&amp;rsquo;t think I&amp;rsquo;m going to do all of them, but pick and choose. For example, the very first prompt is:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;// TRIPLE NESTED LOOP&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;My goal was to draw a grid of circles across the X/Y the image and nest them for the third dimension. To make it a little more interesting, I added a few different color modes. &lt;code&gt;seededRandom&lt;/code&gt; is my personal favorite, that was interesting to get working.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Pictogenesis: Stack Transpiling</title>
      <link>https://blog.jverkamp.com/2020/12/11/pictogenesis-stack-transpiling/</link>
      <pubDate>Fri, 11 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2020/12/11/pictogenesis-stack-transpiling/</guid>
      <description>&lt;p&gt;Much like &lt;a href=&#34;https://blog.jverkamp.com/2020/12/03/pictogenesis-transpiling/&#34;&gt;transpiling register machines&lt;/a&gt;, now we have a chance to transpile &lt;a href=&#34;https://blog.jverkamp.com/2020/12/09/pictogenesis-stack-machine/&#34;&gt;stack machines&lt;/a&gt;. Unfortunately, it doesn&amp;rsquo;t actually speed up the code nearly so much (the stack is just not as effective of a memory structure in this case), but it&amp;rsquo;s still an interesting bit of code.&lt;/p&gt;
&lt;p&gt;In this case, we turn something like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-asm&#34; data-lang=&#34;asm&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;invsub&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;polT&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;writeG&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;id&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;neg&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;zero&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;?&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;sin&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;invsub&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;ZERO&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;inv&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Into this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;X&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;Y&lt;/span&gt;) {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;x&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;X&lt;/span&gt;;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;y&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Y&lt;/span&gt;;

  &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;stack&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [];
  &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;r&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;undefined&lt;/span&gt;;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;g&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;undefined&lt;/span&gt;;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;b&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;undefined&lt;/span&gt;;

  &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;stack&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;push&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;X&lt;/span&gt;);
  &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;stack&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;push&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;Y&lt;/span&gt;);

  &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;arg0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;arg1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;arg2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;result&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;

  &lt;span style=&#34;color:#75715e&#34;&gt;// invsub
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;arg0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;stack&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;pop&lt;/span&gt;() &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
  &lt;span style=&#34;color:#a6e22e&#34;&gt;result&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;arg0&lt;/span&gt;;
  &lt;span style=&#34;color:#a6e22e&#34;&gt;result&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;result&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1.0&lt;/span&gt;;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;stack&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;push&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;result&lt;/span&gt;);

  &lt;span style=&#34;color:#75715e&#34;&gt;// polT
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;arg0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;stack&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;pop&lt;/span&gt;() &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
  &lt;span style=&#34;color:#a6e22e&#34;&gt;arg1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;stack&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;pop&lt;/span&gt;() &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
  &lt;span style=&#34;color:#a6e22e&#34;&gt;result&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Math.&lt;span style=&#34;color:#a6e22e&#34;&gt;atan2&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;arg0&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;arg1&lt;/span&gt;);
  &lt;span style=&#34;color:#a6e22e&#34;&gt;result&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;result&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1.0&lt;/span&gt;;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;stack&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;push&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;result&lt;/span&gt;);

  &lt;span style=&#34;color:#75715e&#34;&gt;// writeG
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;arg0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;stack&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;pop&lt;/span&gt;() &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;g&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;arg0&lt;/span&gt;;

  &lt;span style=&#34;color:#75715e&#34;&gt;// id
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;arg0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;stack&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;pop&lt;/span&gt;() &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
  &lt;span style=&#34;color:#a6e22e&#34;&gt;result&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;arg0&lt;/span&gt;;
  &lt;span style=&#34;color:#a6e22e&#34;&gt;result&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;result&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1.0&lt;/span&gt;;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;stack&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;push&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;result&lt;/span&gt;);

  &lt;span style=&#34;color:#75715e&#34;&gt;// neg
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;arg0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;stack&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;pop&lt;/span&gt;() &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
  &lt;span style=&#34;color:#a6e22e&#34;&gt;result&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;arg0&lt;/span&gt;;
  &lt;span style=&#34;color:#a6e22e&#34;&gt;result&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;result&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1.0&lt;/span&gt;;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;stack&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;push&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;result&lt;/span&gt;);

  &lt;span style=&#34;color:#75715e&#34;&gt;// zero?
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;arg0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;stack&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;pop&lt;/span&gt;() &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
  &lt;span style=&#34;color:#a6e22e&#34;&gt;arg1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;stack&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;pop&lt;/span&gt;() &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
  &lt;span style=&#34;color:#a6e22e&#34;&gt;arg2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;stack&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;pop&lt;/span&gt;() &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
  &lt;span style=&#34;color:#a6e22e&#34;&gt;result&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;arg0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;===&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;arg1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;arg2&lt;/span&gt;;
  &lt;span style=&#34;color:#a6e22e&#34;&gt;result&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;result&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1.0&lt;/span&gt;;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;stack&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;push&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;result&lt;/span&gt;);

  &lt;span style=&#34;color:#75715e&#34;&gt;// sin
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;arg0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;stack&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;pop&lt;/span&gt;() &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
  &lt;span style=&#34;color:#a6e22e&#34;&gt;result&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Math.&lt;span style=&#34;color:#a6e22e&#34;&gt;sin&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;arg0&lt;/span&gt;);
  &lt;span style=&#34;color:#a6e22e&#34;&gt;result&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;result&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1.0&lt;/span&gt;;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;stack&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;push&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;result&lt;/span&gt;);

  &lt;span style=&#34;color:#75715e&#34;&gt;// invsub
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;arg0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;stack&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;pop&lt;/span&gt;() &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
  &lt;span style=&#34;color:#a6e22e&#34;&gt;result&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;arg0&lt;/span&gt;;
  &lt;span style=&#34;color:#a6e22e&#34;&gt;result&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;result&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1.0&lt;/span&gt;;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;stack&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;push&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;result&lt;/span&gt;);

  &lt;span style=&#34;color:#75715e&#34;&gt;// ZERO
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;result&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
  &lt;span style=&#34;color:#a6e22e&#34;&gt;result&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;result&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1.0&lt;/span&gt;;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;stack&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;push&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;result&lt;/span&gt;);

  &lt;span style=&#34;color:#75715e&#34;&gt;// inv
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;arg0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;stack&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;pop&lt;/span&gt;() &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
  &lt;span style=&#34;color:#a6e22e&#34;&gt;result&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;arg0&lt;/span&gt;;
  &lt;span style=&#34;color:#a6e22e&#34;&gt;result&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;result&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1.0&lt;/span&gt;;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;stack&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;push&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;result&lt;/span&gt;);


  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; [
    &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;r&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;===&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;undefined&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;stack&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;pop&lt;/span&gt;() &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;r&lt;/span&gt;,
    &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;g&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;===&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;undefined&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;stack&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;pop&lt;/span&gt;() &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;g&lt;/span&gt;,
    &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;b&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;===&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;undefined&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;stack&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;pop&lt;/span&gt;() &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;b&lt;/span&gt;,
  ];
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Pictogenesis: Stack Machine</title>
      <link>https://blog.jverkamp.com/2020/12/09/pictogenesis-stack-machine/</link>
      <pubDate>Wed, 09 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2020/12/09/pictogenesis-stack-machine/</guid>
      <description>&lt;p&gt;Okay, enough with &lt;a href=&#34;https://blog.jverkamp.com/2020/11/24/pictogenesis-register-machine/&#34;&gt;register machines&lt;/a&gt;. Let&amp;rsquo;s make something new. This time, a stack based machine!&lt;/p&gt;
&lt;p&gt;Rather than keeping it&amp;rsquo;s memory in a series of memory cells, there will be a single stack of values. All functions can &lt;code&gt;pop&lt;/code&gt; values from the top of the stack or &lt;code&gt;push&lt;/code&gt; them back on. I will add the ability to &lt;code&gt;read&lt;/code&gt; the X/Y value and directly &lt;code&gt;write&lt;/code&gt; R/G/B, but you can&amp;rsquo;t write to the former or read from the latter, so you can&amp;rsquo;t use them as registers. Let&amp;rsquo;s see what that looks like!&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Pictogenesis: Transpiling</title>
      <link>https://blog.jverkamp.com/2020/12/03/pictogenesis-transpiling/</link>
      <pubDate>Thu, 03 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2020/12/03/pictogenesis-transpiling/</guid>
      <description>&lt;p&gt;Okay. That is &lt;em&gt;slow&lt;/em&gt;&amp;hellip; Let&amp;rsquo;s make it faster!&lt;/p&gt;
&lt;p&gt;So the main problem we have is that we&amp;rsquo;re interpreting the code. For every single pixel, for every line of code, we&amp;rsquo;re doing a few housekeeping things and making at least one function call. For a 400x400 image with just 10 lines of code, that&amp;rsquo;s 1.6M function calls. Like I said, &lt;em&gt;slow&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;So let&amp;rsquo;s make it faster!&lt;/p&gt;
&lt;p&gt;My first idea? &lt;a href=&#34;https://en.wikipedia.org/wiki/Transpile&#34;&gt;Transpile&lt;/a&gt; it to Javascript!&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Pictogenesis: Wrapping Modes</title>
      <link>https://blog.jverkamp.com/2020/12/01/pictogenesis-wrapping-modes/</link>
      <pubDate>Tue, 01 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2020/12/01/pictogenesis-wrapping-modes/</guid>
      <description>&lt;p&gt;Now that I&amp;rsquo;ve got &lt;a href=&#34;https://blog.jverkamp.com/2020/11/24/pictogenesis-register-machine/&#34;&gt;register machines&lt;/a&gt; working, one of the next ideas I had was to implement different wrapping modes. Currently, as it stands, &lt;code&gt;X&lt;/code&gt; and &lt;code&gt;Y&lt;/code&gt; are passed into the machine as floating point numbers from [0, 1] across the image and output is expected to be [0, 1] for each of &lt;code&gt;R&lt;/code&gt;, &lt;code&gt;G&lt;/code&gt;, and &lt;code&gt;B&lt;/code&gt;. Any values that end up outside of that range, we truncate down to that range. But some of our mathematical functions (multiplication, exponentiation, negation, etc) tend to generate numbers way out of this range. But they don&amp;rsquo;t have to!&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Pictogenesis: Register Machine</title>
      <link>https://blog.jverkamp.com/2020/11/24/pictogenesis-register-machine/</link>
      <pubDate>Tue, 24 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2020/11/24/pictogenesis-register-machine/</guid>
      <description>&lt;p&gt;Okay. First &lt;a href=&#34;https://blog.jverkamp.com/2020/11/23/pictogenesis-the-idea/&#34;&gt;Pictogeneis&lt;/a&gt; machine: a register based machine. Today we&amp;rsquo;re going to create a very small language with a small number of registers that can read from the outside world, write colors, and act as temporary variables.&lt;/p&gt;
&lt;p&gt;Something like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-asm&#34; data-lang=&#34;asm&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;gt&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;?&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;t0&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;b&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;y&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;x&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;r&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;add&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;g&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;y&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;x&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;abs&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;b&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;x&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;inv&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;t0&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;g&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;add&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;r&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;g&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;x&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;sub&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;t0&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;b&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;r&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;mul&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;x&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;r&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;b&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;abs&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;y&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;x&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;figure&gt;
    &lt;img src=&#34;https://blog.jverkamp.com/embeds/2020/pictogenesis-register-1.png&#34;/&gt; 
&lt;/figure&gt;

&lt;p&gt;In each case, the first argument is the output and the rest are inputs. So:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;#&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;gt&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;t0&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;b&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;y&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;x&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;r&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;b&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;y&lt;/span&gt;) {
    &lt;span style=&#34;color:#a6e22e&#34;&gt;t0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;x&lt;/span&gt;;
} &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {
    &lt;span style=&#34;color:#a6e22e&#34;&gt;t0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;r&lt;/span&gt;;
}
 
&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;#&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;add&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;g&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;y&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;x&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;g&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;y&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;x&lt;/span&gt;

&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;#&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;abs&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;b&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;x&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;b&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;x&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;
...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Where &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; are the input point x and y mapped to the range [0, 1]; &lt;code&gt;r&lt;/code&gt;, &lt;code&gt;g&lt;/code&gt;, &lt;code&gt;b&lt;/code&gt; are the output colors in the same range and &lt;code&gt;t{n}&lt;/code&gt; are temporary registers just used during the program.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Pictogenesis: The Idea</title>
      <link>https://blog.jverkamp.com/2020/11/23/pictogenesis-the-idea/</link>
      <pubDate>Mon, 23 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2020/11/23/pictogenesis-the-idea/</guid>
      <description>&lt;p&gt;PICTOGENESIS REBORN!&lt;/p&gt;
&lt;p&gt;I don&amp;rsquo;t know if I ever actually posted it publically, but one of the ideas I&amp;rsquo;ve had percolating for the longest time is combining tiny &lt;a href=&#34;https://en.wikipedia.org/wiki/interpreters&#34;&gt;interpreters&lt;/a&gt; and &lt;a href=&#34;https://en.wikipedia.org/wiki/genetic%20algorithms&#34;&gt;genetic algorithms&lt;/a&gt; to make &lt;a href=&#34;https://en.wikipedia.org/wiki/generative%20art&#34;&gt;generative art&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The basic idea is to generate programs (in various styles) that can take x,y coordinates and return colors. Then apply that to every pixel on an image to make generative art. Once we have, figure out a way to mutate/breed the programs so that we can apply a genetic algorithm to them and make awesome images! Sort of like &lt;a href=&#34;https://electricsheep.org/&#34;&gt;Electric Sheep&lt;/a&gt; (that brings back memories).&lt;/p&gt;
&lt;p&gt;The evolution point of view was actually a pretty tricky problem, since programs can have a number of different representations. I could compile them to bytecode and mutate that, but how do I make most code at least potentially meaningful?&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Backtracking Worm Coral</title>
      <link>https://blog.jverkamp.com/2020/11/20/backtracking-worm-coral/</link>
      <pubDate>Fri, 20 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2020/11/20/backtracking-worm-coral/</guid>
      <description>&lt;p&gt;Let&amp;rsquo;s take &lt;a href=&#34;https://blog.jverkamp.com/2020/11/19/worm-coral/&#34;&gt;yesterday&amp;rsquo;s Worm Coral&lt;/a&gt; and turn it up to 11!&lt;/p&gt;
&lt;p&gt;Now we have:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Whenever a worm gets stuck, it will &amp;lsquo;backtrack&amp;rsquo;: it will instead expand from the previous position recursively&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;That means that the initial 10 worms should always be able to fill the entire world! Even if one closes off an area, that one can eventually fill it up:&lt;/p&gt;
&lt;figure&gt;
    &lt;img src=&#34;https://blog.jverkamp.com/embeds/2020/backtracking-worm-full.png&#34;/&gt; 
&lt;/figure&gt;

&lt;p&gt;I like how occiasionally you get one spindly bit (usually early in the run) that another goes through. It reminds me of &lt;a href=&#34;https://boardgamegeek.com/boardgame/2453/blokus&#34;&gt;Blokus&lt;/a&gt; It does take a while.&lt;/p&gt;
&lt;p&gt;In addition, I wanted to play a bit with simulationism:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Worms can potentially &lt;code&gt;changeColor&lt;/code&gt; each frame&lt;/li&gt;
&lt;li&gt;Every &lt;code&gt;framesPerGeneration&lt;/code&gt; check if each worm dies &lt;code&gt;deathChance&lt;/code&gt; or spawns a child worm (&lt;code&gt;spawnChance&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;If a worm dies, it is removed from the simulation&lt;/li&gt;
&lt;li&gt;If a worm spawns, it creates a new child at it&amp;rsquo;s current location
&lt;ul&gt;
&lt;li&gt;If &lt;code&gt;spawnIncludesHistory&lt;/code&gt; is set, the child can backtrack into the parent&amp;rsquo;s history&lt;/li&gt;
&lt;li&gt;If &lt;code&gt;spawnVariesColor&lt;/code&gt; is set, the child will (potentially, it&amp;rsquo;s random) have a slightly different color&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Let&amp;rsquo;s check it out!&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Worm Coral</title>
      <link>https://blog.jverkamp.com/2020/11/19/worm-coral/</link>
      <pubDate>Thu, 19 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2020/11/19/worm-coral/</guid>
      <description>&lt;p&gt;Today, I&amp;rsquo;m going to work on using &lt;a href=&#34;https://blog.jverkamp.com/2020/11/17/p5js-worms/&#34;&gt;worms&lt;/a&gt; to generate coral, similar to what I did way back when I was &lt;a href=&#34;https://blog.jverkamp.com/2015/01/01/generating-omnichromatic-images/&#34;&gt;generating omnichromatic images&lt;/a&gt;.&lt;/p&gt;
&lt;figure&gt;
    &lt;img src=&#34;https://blog.jverkamp.com/embeds/2020/worm-coral.png&#34;/&gt; 
&lt;/figure&gt;

&lt;p&gt;In a nutshell:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Spawn n worms&lt;/li&gt;
&lt;li&gt;On each tick:
&lt;ul&gt;
&lt;li&gt;Each worm tries to randomly move one direction&lt;/li&gt;
&lt;li&gt;If it cannot, increment that worm&amp;rsquo;s &lt;code&gt;stuck&lt;/code&gt; counter&lt;/li&gt;
&lt;li&gt;If it can, restart the &lt;code&gt;stuck&lt;/code&gt; counter&lt;/li&gt;
&lt;li&gt;If a worm is &lt;code&gt;stuck&lt;/code&gt; long enough, kill it off and spawn a new worm&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Eventually, we&amp;rsquo;ll fill the entire space with colors that end up looking a bit like coral. I&amp;rsquo;ll probably extend this later, since there are a lot of cool tweaks you can do with this general idea.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>p5js Boids</title>
      <link>https://blog.jverkamp.com/2020/11/18/p5js-boids/</link>
      <pubDate>Wed, 18 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2020/11/18/p5js-boids/</guid>
      <description>&lt;p&gt;Okay, sketch 2: &lt;a href=&#34;https://en.wikipedia.org/wiki/Boids&#34;&gt;Boids&lt;/a&gt;!&lt;/p&gt;
&lt;p&gt;The basic idea is to create a bunch of particles (the Boids in this case) and apply to them each a series of simple, limited rules that rely neither on communcation between the Boids nor a global controller and see what behaviors you can generate. Specifically, can you replicate the flocking behavior found in birds, since birds can obviously fly together without hitting one another and also without some lead bird giving orders.&lt;/p&gt;
&lt;p&gt;Something like this:&lt;/p&gt;
&lt;figure&gt;
    &lt;img src=&#34;https://blog.jverkamp.com/embeds/2020/boids.png&#34;/&gt; 
&lt;/figure&gt;

&lt;p&gt;For this case, there are three rules:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;seperation&lt;/strong&gt; - Fly away from any Boids that are too close to you (to avoid collision)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;alignment&lt;/strong&gt; - Align yourself to fly in the same direction as any Boids in your field of vision&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;cohesion&lt;/strong&gt; - Fly towards the center point of the Boids you can see&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>p5js Worms</title>
      <link>https://blog.jverkamp.com/2020/11/17/p5js-worms/</link>
      <pubDate>Tue, 17 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2020/11/17/p5js-worms/</guid>
      <description>&lt;p&gt;One thing that I&amp;rsquo;ve been hoping to get into a bit more is the idea of &lt;a href=&#34;https://en.wikipedia.org/wiki/Generative%20Art&#34;&gt;Generative Art&lt;/a&gt;. Essentially, use any of a wide variety of algorithms to generate art. To do that, and so that the art can be generated right in front of you in the browser, I&amp;rsquo;m going to use the &lt;a href=&#34;https://p5js.org/&#34;&gt;p5js&lt;/a&gt; library. It gives you a nice API of graphical primitives and takes a simple &lt;code&gt;setup&lt;/code&gt; and &lt;code&gt;draw&lt;/code&gt; function and does the rest.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Prevent JavaScript links by parsing URLs</title>
      <link>https://blog.jverkamp.com/2019/05/02/prevent-javascript-links-by-parsing-urls/</link>
      <pubDate>Thu, 02 May 2019 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2019/05/02/prevent-javascript-links-by-parsing-urls/</guid>
      <description>&lt;p&gt;If you have a website that allows users to submit URLs, one of the (many many) things people will try to do to break your site is to submit URLs that use the &lt;code&gt;javascript:&lt;/code&gt; protocol (rather than the more expected &lt;code&gt;http:&lt;/code&gt; or &lt;code&gt;https:&lt;/code&gt;). This is almost never something that you want, since it allows users to submit essentially arbitrary code that other users will run on click in the context of your domain (&lt;a href=&#34;https://en.wikipedia.org/wiki/same%20origin%20policy&#34;&gt;same origin policy&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;So how do you fix it?&lt;/p&gt;
&lt;p&gt;First thought would be to try to check the protocol:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;safe_url&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;url&lt;/span&gt;) =&amp;gt; &lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;url&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;match&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;/^javascript:/&lt;/span&gt;)
[Function&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;safe_url&lt;/span&gt;]

&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;safe_url&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;http://www.example.com&amp;#39;&lt;/span&gt;)
&lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;

&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;safe_url&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;javascript:alert(1)&amp;#39;&lt;/span&gt;)
&lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Listing and Downloading S3 Versions</title>
      <link>https://blog.jverkamp.com/2019/01/04/listing-and-downloading-s3-versions/</link>
      <pubDate>Fri, 04 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2019/01/04/listing-and-downloading-s3-versions/</guid>
      <description>&lt;p&gt;Today I found the need to look through all old versions of a file in S3 that had versioning turned on. You can do it through the AWS Console, but I prefer command line tools. You can do it with &lt;a href=&#34;https://aws.amazon.com/cli/&#34;&gt;awscli&lt;/a&gt;, but the flags are long and I can never quite remember them. So let&amp;rsquo;s write up a quick script using &lt;a href=&#34;https://boto3.amazonaws.com/v1/documentation/api/latest/index.html&#34;&gt;boto3&lt;/a&gt; (and as a bonus, try out &lt;a href=&#34;https://click.palletsprojects.com/en/7.x/&#34;&gt;click&lt;/a&gt;)!&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Simple LocalStorage Notepad</title>
      <link>https://blog.jverkamp.com/2018/09/26/simple-localstorage-notepad/</link>
      <pubDate>Wed, 26 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2018/09/26/simple-localstorage-notepad/</guid>
      <description>&lt;p&gt;I have a large number of keyword bookmarks in whichever browser I happen to be using at the time that I&amp;rsquo;ve been building up over the years&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;. One of the ones I particular enjoy is &lt;code&gt;text&lt;/code&gt;: &lt;code&gt;data:text/html, &amp;lt;html contenteditable&amp;gt;&lt;/code&gt;. What that does is open a new tab where I can take notes, completely locally. It&amp;rsquo;s really handy&amp;hellip; but there&amp;rsquo;s one big problem: I often accidentally close the tab and lose whatever I had been typing. So I decided to take a few minutes to write up a simple extension of the idea that would save the data to &lt;a href=&#34;https://en.wikipedia.org/wiki/LocalStorage&#34;&gt;LocalStorage&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Inlining plaintext attachments in Gmail</title>
      <link>https://blog.jverkamp.com/2016/01/02/inlining-plaintext-attachments-in-gmail/</link>
      <pubDate>Sat, 02 Jan 2016 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2016/01/02/inlining-plaintext-attachments-in-gmail/</guid>
      <description>&lt;p&gt;When you send a text message to a Gmail email address (at least from an iPhone using AT&amp;amp;T), you get something like this:&lt;/p&gt;
&lt;figure&gt;
    &lt;img src=&#34;https://blog.jverkamp.com/embeds/2016/gpti-before.png&#34;/&gt; 
&lt;/figure&gt;

&lt;p&gt;It&amp;rsquo;s vaguely annoying to have to click through every single time just to see what the message is, especially when various extensions (such as &lt;a href=&#34;https://github.com/gorhill/uMatrix&#34;&gt;uMatrix&lt;/a&gt;) break overlay rendering or when you have multiple attachments.&lt;/p&gt;
&lt;p&gt;Much better would be to just display the plaintext attachments inline:&lt;/p&gt;
&lt;figure&gt;
    &lt;img src=&#34;https://blog.jverkamp.com/embeds/2016/gpti-after.png&#34;/&gt; 
&lt;/figure&gt;</description>
    </item>
    
    <item>
      <title>Sandbox Battle!</title>
      <link>https://blog.jverkamp.com/2014/08/24/sandbox-battle/</link>
      <pubDate>Sun, 24 Aug 2014 18:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2014/08/24/sandbox-battle/</guid>
      <description>&lt;figure&gt;
    &lt;img src=&#34;https://blog.jverkamp.com/embeds/2014/title.png&#34;/&gt; 
&lt;/figure&gt;</description>
    </item>
    
    <item>
      <title>Ludum Dare 30: Demo mode</title>
      <link>https://blog.jverkamp.com/2014/08/24/ludum-dare-30-demo-mode/</link>
      <pubDate>Sun, 24 Aug 2014 12:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2014/08/24/ludum-dare-30-demo-mode/</guid>
      <description>&lt;p&gt;Quick update this morning: I managed to get a &amp;lsquo;demo mode&amp;rsquo; working. Now when you first start the game, the boxes will be whizzing around in the background giving you an idea of what you&amp;rsquo;re about to get yourself into!&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Ludum Dare 30: Programmer art and simple AI</title>
      <link>https://blog.jverkamp.com/2014/08/23/ludum-dare-30-programmer-art-and-simple-ai/</link>
      <pubDate>Sat, 23 Aug 2014 23:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2014/08/23/ludum-dare-30-programmer-art-and-simple-ai/</guid>
      <description>&lt;p&gt;A few hours later and we&amp;rsquo;ve already finished (or at least made good progress on) two of the goals that I was hoping for:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;AI players; at the very least one that moves randomly, but optimally several different kinds&lt;/li&gt;
&lt;li&gt;Pending the previous, a selector on the options screen that can turn each player either off, on, or to any of the current AIs&lt;/li&gt;
&lt;li&gt;Stylings around the page; probably some sort of thick border that bleeds a little in and out, looking different per player&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>Ludum Dare 30: 24 hours</title>
      <link>https://blog.jverkamp.com/2014/08/23/ludum-dare-30-24-hours/</link>
      <pubDate>Sat, 23 Aug 2014 18:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2014/08/23/ludum-dare-30-24-hours/</guid>
      <description>&lt;p&gt;Here we are, 24 hours into the competition.&lt;/p&gt;
&lt;p&gt;A lot of the last few hours has been spent doing a fair amount of restructing. Before, I had a single &amp;lsquo;thread&amp;rsquo;&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; for each of the tiles, along with another thread listening for user input. Unfortunately though, that lead to all sorts of race conditions.
Specifically, whenever two tiles overlapped, it was often the case that one was doing the falling step (which copies from one internal buffer to another) while the other was in the swap step (which copies from tile to another). Then after the first finished, it would copy the second buffer over&amp;hellip; overwriting anything that had been swapped.&lt;/p&gt;
&lt;p&gt;Oops.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Ludum Dare 30: Hints of a game</title>
      <link>https://blog.jverkamp.com/2014/08/23/ludum-dare-30-hints-of-a-game/</link>
      <pubDate>Sat, 23 Aug 2014 12:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2014/08/23/ludum-dare-30-hints-of-a-game/</guid>
      <description>&lt;p&gt;We&amp;rsquo;re getting there. 18 hours in and I have the first hints of what might actually be a game&amp;hellip;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Ludum Dare 30: Sandbox Battle</title>
      <link>https://blog.jverkamp.com/2014/08/22/ludum-dare-30-sandbox-battle/</link>
      <pubDate>Fri, 22 Aug 2014 23:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2014/08/22/ludum-dare-30-sandbox-battle/</guid>
      <description>&lt;p&gt;And here we are again. &lt;a href=&#34;https://blog.jverkamp.com/2013/05/21/ludum-dare-26-vtanks-results/&#34;&gt;Ludum Dare&lt;/a&gt;. Taken directly from their about page&amp;hellip;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Ludum Dare is a regular accelerated game development Event.  Participants develop games from scratch in a weekend, based on a theme suggested by community.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;More specifically, the goal is to make a game from scratch in 48 hours. You&amp;rsquo;re allowed to use publicly available frameworks and code libraries, but no art or other assets. Previously, I missed the original start time. So although I made my game in 48 hours, it didn&amp;rsquo;t qualify. This time around, I&amp;rsquo;m starting on time.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>CSRF protection injection with jQuery and Zend</title>
      <link>https://blog.jverkamp.com/2014/01/13/csrf-protection-injection-with-jquery-and-zend/</link>
      <pubDate>Mon, 13 Jan 2014 14:00:24 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2014/01/13/csrf-protection-injection-with-jquery-and-zend/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Csrf&#34;&gt;Cross-site request forgery&lt;/a&gt; attacks are among the most common vulnerabilities against websites, listed as &lt;a href=&#34;https://www.owasp.org/index.php/Top_10_2013-A8-Cross-Site_Request_Forgery_(CSRF)&#34;&gt;number 8&lt;/a&gt; on &lt;a href=&#34;https://www.owasp.org/index.php/Top_10_2013-Top_10&#34;&gt;OWASP&amp;rsquo;s 2013 Top 10 list&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Approximating Pi with Buffon&#39;s Needle</title>
      <link>https://blog.jverkamp.com/2013/03/18/approximating-pi-with-buffons-needle/</link>
      <pubDate>Mon, 18 Mar 2013 14:00:14 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2013/03/18/approximating-pi-with-buffons-needle/</guid>
      <description>&lt;p&gt;I&amp;rsquo;m a bit late for Pi Day, but Programming Praxis had &lt;a href=&#34;http://programmingpraxis.com/2013/03/15/buffons-needle/&#34; title=&#34;Buffon&#39;s Needle&#34;&gt;a neat problem on Friday&lt;/a&gt; that I wanted to check out:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Suppose we have a floor made of parallel strips of wood, each the same width, and we drop a needle onto the floor. What is the probability that the needle will lie across a line between two strips?&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>Partitioning the Dutch national flag</title>
      <link>https://blog.jverkamp.com/2013/03/06/partitioning-the-dutch-national-flag/</link>
      <pubDate>Wed, 06 Mar 2013 14:00:08 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2013/03/06/partitioning-the-dutch-national-flag/</guid>
      <description>&lt;p&gt;&lt;a title=&#34;Dutch National Flag&#34; href=&#34;http://programmingpraxis.com/2013/03/05/dutch-national-flag/&#34;&gt;Yesterday&amp;rsquo;s post&lt;/a&gt; from Programming Praxis asks us to solve a problem known as the Dutch National Flag problem (attributed to &lt;a href=&#34;https://en.wikipedia.org/wiki/Edsgar%20Dijkstra&#34;&gt;Edsgar Dijkstra&lt;/a&gt;): &lt;em&gt;sort an array of red, white and blue symbols so that all reds come together, followed by all whites, followed finally by all blues&lt;/em&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Evaluating prefix/infix/postfix expressions</title>
      <link>https://blog.jverkamp.com/2012/10/08/evaluating-prefix/infix/postfix-expressions/</link>
      <pubDate>Mon, 08 Oct 2012 14:00:30 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2012/10/08/evaluating-prefix/infix/postfix-expressions/</guid>
      <description>In yesterday&amp;rsquo;s post, I talked about three different ways to write expressions: prefix, infix, and postfix expressions. I also promised to write up a web-based example that would show the guts of each algorithm in action. Well, here it is!
Use the three buttons at the top to switch between the different machines. Enter an expression in the box and click run to evaluate it. The only things that are supported at the moment are numbers (integers or floating point) and the operators +, -, *, and /, although the code is extensible enough that adding more shouldn&amp;rsquo;t be an issue.</description>
    </item>
    
    <item>
      <title>Elementary cellular automaton</title>
      <link>https://blog.jverkamp.com/2012/10/03/elementary-cellular-automaton/</link>
      <pubDate>Wed, 03 Oct 2012 14:00:47 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2012/10/03/elementary-cellular-automaton/</guid>
      <description>&lt;p&gt;Today we&amp;rsquo;re going to be playing with an HTML5 canvas again (previously we made &lt;a href=&#34;https://blog.jverkamp.com/2012/09/26/line-art-with-an-html5-canvas/&#34;&gt;line art&lt;/a&gt; and &lt;a href=&#34;https://blog.jverkamp.com/2012/09/27/html5-bugs/&#34;&gt;bugs&lt;/a&gt;). This time, the goal is to make a tool where you can explore &lt;a href=&#34;http://mathworld.wolfram.com/ElementaryCellularAutomaton.html&#34; title=&#34;Wolfram Mathworld: Elementary Cellular Automaton&#34;&gt;elementary cellular automaton&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>The Birthday Paradox</title>
      <link>https://blog.jverkamp.com/2012/10/01/the-birthday-paradox/</link>
      <pubDate>Mon, 01 Oct 2012 14:00:40 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2012/10/01/the-birthday-paradox/</guid>
      <description>&lt;p&gt;Probability can be a bit counter-intuitive at times. Take for example, the &lt;a href=&#34;https://en.wikipedia.org/wiki/Birthday%20paradox&#34;&gt;birthday problem / paradox&lt;/a&gt;: how many people do you need in a room to have a 50/50 chance that two share the same birthday?&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>HTML5 Bugs</title>
      <link>https://blog.jverkamp.com/2012/09/27/html5-bugs/</link>
      <pubDate>Thu, 27 Sep 2012 14:00:13 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2012/09/27/html5-bugs/</guid>
      <description>&lt;p&gt;In the spirit of &lt;a href=&#34;https://blog.jverkamp.com/2012/09/26/line-art-with-an-html5-canvas/&#34;&gt;yesterday&amp;rsquo;s post&lt;/a&gt; about HTML5&amp;rsquo;s &lt;code&gt;canvas&lt;/code&gt;, I&amp;rsquo;ve got another post. This time, it&amp;rsquo;s a little buggy. 😄&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Line art with an HTML5 canvas</title>
      <link>https://blog.jverkamp.com/2012/09/26/line-art-with-an-html5-canvas/</link>
      <pubDate>Wed, 26 Sep 2012 14:00:16 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2012/09/26/line-art-with-an-html5-canvas/</guid>
      <description>&lt;p&gt;Let&amp;rsquo;s play with &lt;a href=&#34;http://www.w3schools.com/html/html5_canvas.asp&#34; title=&#34;W3 Schools: HTML5 canvas&#34;&gt;HTML5 canvas&lt;/a&gt; elements!&lt;/p&gt;
&lt;p&gt;Basically, I want to draw some simple line diagrams. Go from top to bottom on one side while going from right to left along the top or bottom. It sounds complicated, but perhaps it&amp;rsquo;s easier to explain with a drawing:&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Playing with loaded dice</title>
      <link>https://blog.jverkamp.com/2012/09/20/playing-with-loaded-dice/</link>
      <pubDate>Thu, 20 Sep 2012 14:00:45 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2012/09/20/playing-with-loaded-dice/</guid>
      <description>&lt;p&gt;A couple of months ago, I posted &lt;a href=&#34;https://blog.jverkamp.com/2012/07/04/analyzing-the-dice-game/&#34;&gt;a simple simulation&lt;/a&gt; of a loaded dice game &lt;a title=&#34;How to use math and win free drinks from your friends&#34; href=&#34;http://lifehacker.com/5923186/how-to-use-math-and-win-free-drinks-from-your-friends&#34;&gt;posted by Lifehacker&lt;/a&gt; (originally from &lt;a href=&#34;http://www.datagenetics.com/blog/july12012/index.html&#34; title=&#34;DataGenetics: Intransitive Dice&#34;&gt;DataGenetics&lt;/a&gt;). Today I wanted to take a chance to give everyone a chance to actually play the game.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Who wants to win the lottery?</title>
      <link>https://blog.jverkamp.com/2012/09/17/who-wants-to-win-the-lottery/</link>
      <pubDate>Mon, 17 Sep 2012 14:00:59 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2012/09/17/who-wants-to-win-the-lottery/</guid>
      <description>&lt;p&gt;So everyone would love to win the lottery right? Just think of what you could do if you had even $1 million dollars to spend. You could buy a dozen tacos a day at Taco Bell for the rest of your life. And your children&amp;rsquo;s lives. And their children&amp;rsquo;s lives. &lt;a href=&#34;http://www.wolframalpha.com/input/?i=1+million+dollars+%2F+%2812+dollar+per+day%29+in+years&#34; title=&#34;Wolfram Alpha: 1 million tacos&#34;&gt;228 years&lt;/a&gt; to be more precise. Or you could pay to send the entire family from &lt;a href=&#34;http://www.amazon.com/gp/product/B0001EFTH4/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=1789&amp;creative=9325&amp;creativeASIN=B0001EFTH4&amp;linkCode=as2&amp;tag=jverkampcom-20&#34; title=&#34;Amazon: Cheaper by the Dozen&#34;&gt;Cheaper by the Dozen&lt;/a&gt; to the average state university&amp;ndash;even if they each took an &lt;a href=&#34;http://www.wolframalpha.com/input/?i=%241+million+%2F+%2413%2C600+%2F+12&#34; title=&#34;Wolfram Alpha: $1 million in tuition&#34;&gt;additional two years&lt;/a&gt; to graduate. And that&amp;rsquo;s just for $1 million. Payouts are usually much higher than that&amp;hellip;&lt;/p&gt;
&lt;p&gt;So what&amp;rsquo;s the catch?&lt;/p&gt;
&lt;p&gt;(If you came here just for the Powerball simulation, it&amp;rsquo;s down at the bottom of the page. &lt;a href=&#34;http://blog.jverkamp.com/2012/09/17/who-wants-to-win-the-lottery/#lotteryGametime&#34;&gt;Click here&lt;/a&gt; to go straight there.)&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
