<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>JavaScript on jverkamp.com</title><link>https://blog.jverkamp.com/programming/languages/javascript/</link><description>Recent content in JavaScript on jverkamp.com</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://blog.jverkamp.com/programming/languages/javascript/atom.xml" rel="self" type="application/rss+xml"/><item><title>Genuary 2023.20: Art Deco</title><link>https://blog.jverkamp.com/2023/02/20/genuary-2023.20-art-deco/</link><pubDate>Mon, 20 Feb 2023 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2023/02/20/genuary-2023.20-art-deco/</guid><description>&lt;p>&lt;a href="https://genuary.art/">Genuary&lt;/a>!&lt;/p>
&lt;p>Spend a month making one beautiful thing per day, given a bunch of prompts. A month late, but as they say, &amp;rsquo;the second best time is now'.&lt;/p>
&lt;p>Let&amp;rsquo;s do it!&lt;/p>
&lt;h2 id="20-art-deco">20) Art Deco&lt;/h2>
&lt;p>Wikipedia: &lt;a href="https://en.wikipedia.org/wiki/Art%20Deco">Art Deco&lt;/a>&lt;/p></description></item><item><title>Genuary 2023.19: Black and white</title><link>https://blog.jverkamp.com/2023/02/19/genuary-2023.19-black-and-white/</link><pubDate>Sun, 19 Feb 2023 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2023/02/19/genuary-2023.19-black-and-white/</guid><description>&lt;p>&lt;a href="https://genuary.art/">Genuary&lt;/a>!&lt;/p>
&lt;h2 id="19-black-and-white">19) Black and white&lt;/h2></description></item><item><title>Genuary 2023.18: Definitely not a grid</title><link>https://blog.jverkamp.com/2023/02/18/genuary-2023.18-definitely-not-a-grid/</link><pubDate>Sat, 18 Feb 2023 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2023/02/18/genuary-2023.18-definitely-not-a-grid/</guid><description>&lt;p>&lt;a href="https://genuary.art/">Genuary&lt;/a>!&lt;/p>
&lt;h2 id="18-definitely-not-a-grid">18) Definitely not a grid&lt;/h2></description></item><item><title>Genuary 2023.17: A grid inside a grid inside a grid</title><link>https://blog.jverkamp.com/2023/02/17/genuary-2023.17-a-grid-inside-a-grid-inside-a-grid/</link><pubDate>Fri, 17 Feb 2023 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2023/02/17/genuary-2023.17-a-grid-inside-a-grid-inside-a-grid/</guid><description>&lt;p>&lt;a href="https://genuary.art/">Genuary&lt;/a>!&lt;/p>
&lt;p>Spend a month making one beautiful thing per day, given a bunch of prompts. A month late, but as they say, &amp;rsquo;the second best time is now'.&lt;/p>
&lt;p>Let&amp;rsquo;s do it!&lt;/p>
&lt;h2 id="17-a-grid-inside-a-grid-inside-a-grid">17) A grid inside a grid inside a grid&lt;/h2></description></item><item><title>Genuary 2023.16: Reflections of a Reflection</title><link>https://blog.jverkamp.com/2023/02/16/genuary-2023.16-reflections-of-a-reflection/</link><pubDate>Thu, 16 Feb 2023 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2023/02/16/genuary-2023.16-reflections-of-a-reflection/</guid><description>&lt;p>&lt;a href="https://genuary.art/">Genuary&lt;/a>!&lt;/p>
&lt;h2 id="16-reflection-of-a-reflection">16) Reflection of a reflection&lt;/h2></description></item><item><title>Genuary 2023.15: Sine Waves</title><link>https://blog.jverkamp.com/2023/02/15/genuary-2023.15-sine-waves/</link><pubDate>Wed, 15 Feb 2023 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2023/02/15/genuary-2023.15-sine-waves/</guid><description>&lt;p>&lt;a href="https://genuary.art/">Genuary&lt;/a>!&lt;/p>
&lt;p>Spend a month making one beautiful thing per day, given a bunch of prompts. A month late, but as they say, &amp;rsquo;the second best time is now'.&lt;/p>
&lt;p>Let&amp;rsquo;s do it!&lt;/p>
&lt;h2 id="15-sine-waves">15) Sine waves&lt;/h2>
&lt;blockquote>
&lt;p>&lt;a href="https://www.desmos.com/calculator/nhbzwkhij3">Fun with sine waves: 1D wobbly noise&lt;/a>&lt;/p>
&lt;/blockquote></description></item><item><title>Genuary 2023.14: Asemic Writing</title><link>https://blog.jverkamp.com/2023/02/14/genuary-2023.14-asemic-writing/</link><pubDate>Tue, 14 Feb 2023 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2023/02/14/genuary-2023.14-asemic-writing/</guid><description>&lt;p>&lt;a href="https://genuary.art/">Genuary&lt;/a>!&lt;/p>
&lt;p>Spend a month making one beautiful thing per day, given a bunch of prompts. A month late, but as they say, &amp;rsquo;the second best time is now'.&lt;/p>
&lt;p>Let&amp;rsquo;s do it!&lt;/p>
&lt;h2 id="14-asemic-writing">14) Asemic writing&lt;/h2>
&lt;p>Wikipedia: &lt;a href="https://en.wikipedia.org/wiki/Asemic%20writing">Asemic writing&lt;/a>&lt;/p>
&lt;p>Use the same Wikipedia code as &lt;a href="https://blog.jverkamp.com/2023/02/13/genuary-2023.13-something-youve-always-wanted-to-learn/">yesterday&lt;/a> to get a random page, render each word as a line that meanders based on the letters of the word. Shiny. ðŸ˜„&lt;/p></description></item><item><title>Genuary 2023.13: Something you've always wanted to learn</title><link>https://blog.jverkamp.com/2023/02/13/genuary-2023.13-something-youve-always-wanted-to-learn/</link><pubDate>Mon, 13 Feb 2023 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2023/02/13/genuary-2023.13-something-youve-always-wanted-to-learn/</guid><description>&lt;p>&lt;a href="https://genuary.art/">Genuary&lt;/a>!&lt;/p>
&lt;p>Spend a month making one beautiful thing per day, given a bunch of prompts. A month late, but as they say, &amp;rsquo;the second best time is now'.&lt;/p>
&lt;p>Let&amp;rsquo;s do it!&lt;/p>
&lt;h2 id="13-something-youve-always-wanted-to-learn">13) Something youâ€™ve always wanted to learn&lt;/h2>
&lt;p>META! LEARN EVERYTHING!&lt;/p>
&lt;p>Fetch a random page from Wikipedia and scroll it by super quick, see how fast you can speed read it. And heck, you might just learn something. I know I did!&lt;/p>
&lt;div class="tab">
&lt;button id="iframedemo" class="tablinks default" data-tabset="a88f" onclick="changeTab(event, 'a88f', 'iframedemo')">Demo&lt;/button>
&lt;button id="defaultscript" class="tablinks" data-tabset="a88f" onclick="changeTab(event, 'a88f', 'defaultscript')">Script&lt;/button>
&lt;/div>
&lt;div class="tabcontent" data-tabset="a88f" id="iframedemo">
&lt;iframe
marginwidth="0"
width="440.00000000000006" height="462.00000000000006" frameBorder="0"
srcdoc="
&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;
&amp;lt;script src=&amp;#34;https://blog.jverkamp.com/p5_12556498581193807062.min.92daa6da454d82d6d0c80d955df5c3aff2ac308264efd8726cd9434a9c4b4640.js&amp;#34; integrity=&amp;#34;sha256-ktqm2kVNgtbQyA2VXfXDr/KsMIJk79hybNlDSpxLRkA=&amp;#34; defer&amp;gt;&amp;lt;/script&amp;gt;&amp;lt;script src=&amp;#34;https://blog.jverkamp.com/quicksettings_13755902899324222893.min.2a42b2a52ef781cfc8b23b19463b94ebca971666c0b532a26ff6710cd844f344.js&amp;#34; integrity=&amp;#34;sha256-KkKypS73gc/IsjsZRjuU68qXFmbAtTKib/ZxDNhE80Q=&amp;#34; defer&amp;gt;&amp;lt;/script&amp;gt;&amp;lt;script src=&amp;#34;https://blog.jverkamp.com/p5.gui_14323647330486362791.min.25f90c9eb43149e2901f61d0b6b09a63dcd04667ea2a8a040eb494b20a2f8ab4.js&amp;#34; integrity=&amp;#34;sha256-JfkMnrQxSeKQH2HQtrCaY9zQRmfqKooEDrSUsgovirQ=&amp;#34; defer&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;style&amp;gt;canvas { border: 1px solid black; border-radius: 1em; }&amp;lt;/style&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
&lt;script>
let url;
let titleToRender;
let wordsToRender;
let wordIndex;
let nextButton;
let wikiButton;
const CHAR_SIZE = 60;
function oldSetup() {
createCanvas(400, 400);
frameRate(10);
nextButton = createButton(&amp;#34;next&amp;#34;);
nextButton.mousePressed(renderRandomPage);
wikiButton = createButton(&amp;#34;open&amp;#34;);
wikiButton.mousePressed(() =&amp;gt; {
window.open(url, &amp;#39;_blank&amp;#39;);
});
wordsToRender = [];
wordIndex = 0;
renderRandomPage();
}
function draw() {
if (wordIndex &amp;gt; wordsToRender.length) {
noLoop();
}
clear();
textSize(CHAR_SIZE);
for (let i = 0; i &amp;lt; height / CHAR_SIZE; i&amp;#43;&amp;#43;) {
if (i == 3) {
fill(&amp;#34;black&amp;#34;);
} else {
fill(&amp;#34;lightgray&amp;#34;);
}
text(
wordsToRender[wordIndex &amp;#43; i],
10,
CHAR_SIZE * (i &amp;#43; 1)
);
}
stroke(&amp;#34;black&amp;#34;);
line(
width - 10,
10,
width - 10,
height - 10
);
circle(
width - 10,
1.0 * wordIndex / wordsToRender.length * (height - 20),
20
);
wordIndex&amp;#43;&amp;#43;;
}
function renderRandomPage() {
wikiButton.attribute(&amp;#39;disabled&amp;#39;, &amp;#39;&amp;#39;);
// https://stackoverflow.com/a/70225116
async function go() {
let title;
{
let json = await httpGet(`https://en.wikipedia.org/w/api.php?action=query&amp;amp;format=json&amp;amp;generator=random&amp;amp;grnlimit=1&amp;amp;grnnamespace=0&amp;amp;prop=info&amp;amp;origin=*`, &amp;#39;json&amp;#39;);
let pages = json.query.pages;
let id = Object.keys(pages)[0];
title = pages[id].title;
url = `https://en.wikipedia.org/wiki/${title}`;
}
let body;
{
let json = await httpGet(`https://en.wikipedia.org/w/api.php?action=query&amp;amp;format=json&amp;amp;titles=${title}&amp;amp;prop=extracts&amp;amp;explaintext&amp;amp;origin=*`, &amp;#39;json&amp;#39;);
let pages = json.query.pages;
let id = Object.keys(pages)[0];
body = pages[id].extract;
}
return [title, body];
}
background(255);
text(&amp;#34;Loading...&amp;#34;, 10, 20);
go().then(([title, body]) =&amp;gt; {
titleToRender = title;
wordsToRender = body.trim().split(/\s&amp;#43;/);
wordIndex = 0;
wikiButton.removeAttribute(&amp;#39;disabled&amp;#39;);
loop();
});
}
const START_PAUSED = false;
function setup() {
// Load saved settings from the browser hash fragment
if (parent.location.hash &amp;amp;&amp;amp; typeof params !== &amp;#34;undefined&amp;#34;) {
try {
var settings = JSON.parse(atob(parent.location.hash.substring(1)));
Object.keys(params).forEach((key) =&amp;gt; params[key] = key in settings ? settings[key] : params[key]);
} catch(ex) {
}
}
oldSetup();
if (START_PAUSED) {
noLoop();
}
createButton(&amp;#34;play/pause&amp;#34;).mousePressed(() =&amp;gt; {
if (isLooping()) {
noLoop();
} else {
loop();
}
});
createButton(&amp;#34;save&amp;#34;).mousePressed(() =&amp;gt; {
saveCanvas(&amp;#39;photo&amp;#39;, &amp;#39;png&amp;#39;)
});
createButton(&amp;#34;clear&amp;#34;).mousePressed(() =&amp;gt; {
if (typeof reset !== &amp;#39;undefined&amp;#39;) {
reset();
} else {
clear();
}
});
createButton(&amp;#34;reload&amp;#34;).mousePressed(() =&amp;gt; {
window.location.reload();
});
if (typeof params !== &amp;#34;undefined&amp;#34;) {
for (var el of document.querySelectorAll(&amp;#39;input&amp;#39;)) {
if (el.id &amp;amp;&amp;amp; el.id.startsWith(&amp;#39;qs_&amp;#39;)) {
el.addEventListener(&amp;#39;change&amp;#39;, () =&amp;gt; {
parent.location.hash = btoa(JSON.stringify(params));
});
}
}
}
}
&lt;/script>
&amp;lt;noscript&amp;gt;To display this p5.js sketch, JavaScript must be enabled.&amp;lt;/noscript&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
"
>&lt;/iframe>
&lt;/div>
&lt;div class="tabcontent" data-tabset="a88f" id="defaultscript">
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">let&lt;/span> &lt;span style="color:#a6e22e">url&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">let&lt;/span> &lt;span style="color:#a6e22e">titleToRender&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">let&lt;/span> &lt;span style="color:#a6e22e">wordsToRender&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">let&lt;/span> &lt;span style="color:#a6e22e">wordIndex&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">let&lt;/span> &lt;span style="color:#a6e22e">nextButton&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">let&lt;/span> &lt;span style="color:#a6e22e">wikiButton&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">CHAR_SIZE&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">60&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">setup&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">createCanvas&lt;/span>(&lt;span style="color:#ae81ff">400&lt;/span>, &lt;span style="color:#ae81ff">400&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">frameRate&lt;/span>(&lt;span style="color:#ae81ff">10&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">nextButton&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">createButton&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;next&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">nextButton&lt;/span>.&lt;span style="color:#a6e22e">mousePressed&lt;/span>(&lt;span style="color:#a6e22e">renderRandomPage&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">wikiButton&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">createButton&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;open&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">wikiButton&lt;/span>.&lt;span style="color:#a6e22e">mousePressed&lt;/span>(() =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> window.&lt;span style="color:#a6e22e">open&lt;/span>(&lt;span style="color:#a6e22e">url&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;_blank&amp;#39;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> });
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">wordsToRender&lt;/span> &lt;span style="color:#f92672">=&lt;/span> [];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">wordIndex&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">renderRandomPage&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">draw&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (&lt;span style="color:#a6e22e">wordIndex&lt;/span> &lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#a6e22e">wordsToRender&lt;/span>.&lt;span style="color:#a6e22e">length&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">noLoop&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">clear&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">textSize&lt;/span>(&lt;span style="color:#a6e22e">CHAR_SIZE&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> (&lt;span style="color:#66d9ef">let&lt;/span> &lt;span style="color:#a6e22e">i&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>; &lt;span style="color:#a6e22e">i&lt;/span> &lt;span style="color:#f92672">&amp;lt;&lt;/span> &lt;span style="color:#a6e22e">height&lt;/span> &lt;span style="color:#f92672">/&lt;/span> &lt;span style="color:#a6e22e">CHAR_SIZE&lt;/span>; &lt;span style="color:#a6e22e">i&lt;/span>&lt;span style="color:#f92672">++&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (&lt;span style="color:#a6e22e">i&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#ae81ff">3&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">fill&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;black&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#66d9ef">else&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">fill&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;lightgray&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">text&lt;/span>(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">wordsToRender&lt;/span>[&lt;span style="color:#a6e22e">wordIndex&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#a6e22e">i&lt;/span>],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">10&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">CHAR_SIZE&lt;/span> &lt;span style="color:#f92672">*&lt;/span> (&lt;span style="color:#a6e22e">i&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> );
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">stroke&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;black&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">line&lt;/span>(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">width&lt;/span> &lt;span style="color:#f92672">-&lt;/span> &lt;span style="color:#ae81ff">10&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">10&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">width&lt;/span> &lt;span style="color:#f92672">-&lt;/span> &lt;span style="color:#ae81ff">10&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">height&lt;/span> &lt;span style="color:#f92672">-&lt;/span> &lt;span style="color:#ae81ff">10&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> );
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">circle&lt;/span>(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">width&lt;/span> &lt;span style="color:#f92672">-&lt;/span> &lt;span style="color:#ae81ff">10&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">1.0&lt;/span> &lt;span style="color:#f92672">*&lt;/span> &lt;span style="color:#a6e22e">wordIndex&lt;/span> &lt;span style="color:#f92672">/&lt;/span> &lt;span style="color:#a6e22e">wordsToRender&lt;/span>.&lt;span style="color:#a6e22e">length&lt;/span> &lt;span style="color:#f92672">*&lt;/span> (&lt;span style="color:#a6e22e">height&lt;/span> &lt;span style="color:#f92672">-&lt;/span> &lt;span style="color:#ae81ff">20&lt;/span>),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">20&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> );
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">wordIndex&lt;/span>&lt;span style="color:#f92672">++&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">renderRandomPage&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">wikiButton&lt;/span>.&lt;span style="color:#a6e22e">attribute&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;disabled&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;&amp;#39;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// https://stackoverflow.com/a/70225116
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">async&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">go&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">let&lt;/span> &lt;span style="color:#a6e22e">title&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">let&lt;/span> &lt;span style="color:#a6e22e">json&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">await&lt;/span> &lt;span style="color:#a6e22e">httpGet&lt;/span>(&lt;span style="color:#e6db74">`https://en.wikipedia.org/w/api.php?action=query&amp;amp;format=json&amp;amp;generator=random&amp;amp;grnlimit=1&amp;amp;grnnamespace=0&amp;amp;prop=info&amp;amp;origin=*`&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;json&amp;#39;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">let&lt;/span> &lt;span style="color:#a6e22e">pages&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">json&lt;/span>.&lt;span style="color:#a6e22e">query&lt;/span>.&lt;span style="color:#a6e22e">pages&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">let&lt;/span> &lt;span style="color:#a6e22e">id&lt;/span> &lt;span style="color:#f92672">=&lt;/span> Object.&lt;span style="color:#a6e22e">keys&lt;/span>(&lt;span style="color:#a6e22e">pages&lt;/span>)[&lt;span style="color:#ae81ff">0&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">title&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">pages&lt;/span>[&lt;span style="color:#a6e22e">id&lt;/span>].&lt;span style="color:#a6e22e">title&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">url&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">`https://en.wikipedia.org/wiki/&lt;/span>&lt;span style="color:#e6db74">${&lt;/span>&lt;span style="color:#a6e22e">title&lt;/span>&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">`&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">let&lt;/span> &lt;span style="color:#a6e22e">body&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">let&lt;/span> &lt;span style="color:#a6e22e">json&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">await&lt;/span> &lt;span style="color:#a6e22e">httpGet&lt;/span>(&lt;span style="color:#e6db74">`https://en.wikipedia.org/w/api.php?action=query&amp;amp;format=json&amp;amp;titles=&lt;/span>&lt;span style="color:#e6db74">${&lt;/span>&lt;span style="color:#a6e22e">title&lt;/span>&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">&amp;amp;prop=extracts&amp;amp;explaintext&amp;amp;origin=*`&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;json&amp;#39;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">let&lt;/span> &lt;span style="color:#a6e22e">pages&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">json&lt;/span>.&lt;span style="color:#a6e22e">query&lt;/span>.&lt;span style="color:#a6e22e">pages&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">let&lt;/span> &lt;span style="color:#a6e22e">id&lt;/span> &lt;span style="color:#f92672">=&lt;/span> Object.&lt;span style="color:#a6e22e">keys&lt;/span>(&lt;span style="color:#a6e22e">pages&lt;/span>)[&lt;span style="color:#ae81ff">0&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">body&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">pages&lt;/span>[&lt;span style="color:#a6e22e">id&lt;/span>].&lt;span style="color:#a6e22e">extract&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> [&lt;span style="color:#a6e22e">title&lt;/span>, &lt;span style="color:#a6e22e">body&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">background&lt;/span>(&lt;span style="color:#ae81ff">255&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">text&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Loading...&amp;#34;&lt;/span>, &lt;span style="color:#ae81ff">10&lt;/span>, &lt;span style="color:#ae81ff">20&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">go&lt;/span>().&lt;span style="color:#a6e22e">then&lt;/span>(([&lt;span style="color:#a6e22e">title&lt;/span>, &lt;span style="color:#a6e22e">body&lt;/span>]) =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">titleToRender&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">title&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">wordsToRender&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">body&lt;/span>.&lt;span style="color:#a6e22e">trim&lt;/span>().&lt;span style="color:#a6e22e">split&lt;/span>(&lt;span style="color:#e6db74">/\s+/&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">wordIndex&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">wikiButton&lt;/span>.&lt;span style="color:#a6e22e">removeAttribute&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;disabled&amp;#39;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">loop&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> });
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;/div></description></item><item><title>Genuary 2023.12: Tessellation</title><link>https://blog.jverkamp.com/2023/02/12/genuary-2023.12-tessellation/</link><pubDate>Sun, 12 Feb 2023 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2023/02/12/genuary-2023.12-tessellation/</guid><description>&lt;p>&lt;a href="https://genuary.art/">Genuary&lt;/a>!&lt;/p>
&lt;p>Spend a month making one beautiful thing per day, given a bunch of prompts. A month late, but as they say, &amp;rsquo;the second best time is now'.&lt;/p>
&lt;p>Let&amp;rsquo;s do it!&lt;/p>
&lt;h2 id="12-tessellation">12) Tessellation&lt;/h2>
&lt;p>Wikipedia: &lt;a href="https://en.wikipedia.org/wiki/Tessellation">Tessellation&lt;/a>
(&lt;a href="https://en.wikipedia.org/wiki/">List&lt;/a>)&lt;/p>
&lt;p>This was not at all the direction I ended to go, but it got really interesting, so I decided to keep it.&lt;/p>
&lt;p>What I remember doing years and years ago, I think roughly around the time of Windows 95 (I feel old) or perhaps even pre-Windows was using a tesselation program that would give you a basic shape and then allow you to pull the edges in a way it would propagate to automatically keep the tesselation valid. It was pretty awesome&amp;hellip; but I have no idea what it was called any more.&lt;/p>
&lt;p>It might have been &lt;a href="http://www.tessellations.org/software-shodor.shtml">Shodor on Tessellations.org&lt;/a>, or perhaps &lt;a href="http://www.tessellations.org/software-tesselmania0.shtml">TesselMania!&lt;/a>. Been a while.&lt;/p>
&lt;p>In any case, enjoy!&lt;/p>
&lt;div class="tab">
&lt;button id="iframedemo" class="tablinks default" data-tabset="ce1d" onclick="changeTab(event, 'ce1d', 'iframedemo')">Demo&lt;/button>
&lt;button id="defaultscript" class="tablinks" data-tabset="ce1d" onclick="changeTab(event, 'ce1d', 'defaultscript')">Script&lt;/button>
&lt;/div>
&lt;div class="tabcontent" data-tabset="ce1d" id="iframedemo">
&lt;iframe
marginwidth="0"
width="660" height="462.00000000000006" frameBorder="0"
srcdoc="
&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;
&amp;lt;script src=&amp;#34;https://blog.jverkamp.com/p5_12556498581193807062.min.92daa6da454d82d6d0c80d955df5c3aff2ac308264efd8726cd9434a9c4b4640.js&amp;#34; integrity=&amp;#34;sha256-ktqm2kVNgtbQyA2VXfXDr/KsMIJk79hybNlDSpxLRkA=&amp;#34; defer&amp;gt;&amp;lt;/script&amp;gt;&amp;lt;script src=&amp;#34;https://blog.jverkamp.com/quicksettings_13755902899324222893.min.2a42b2a52ef781cfc8b23b19463b94ebca971666c0b532a26ff6710cd844f344.js&amp;#34; integrity=&amp;#34;sha256-KkKypS73gc/IsjsZRjuU68qXFmbAtTKib/ZxDNhE80Q=&amp;#34; defer&amp;gt;&amp;lt;/script&amp;gt;&amp;lt;script src=&amp;#34;https://blog.jverkamp.com/p5.gui_14323647330486362791.min.25f90c9eb43149e2901f61d0b6b09a63dcd04667ea2a8a040eb494b20a2f8ab4.js&amp;#34; integrity=&amp;#34;sha256-JfkMnrQxSeKQH2HQtrCaY9zQRmfqKooEDrSUsgovirQ=&amp;#34; defer&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;style&amp;gt;canvas { border: 1px solid black; border-radius: 1em; }&amp;lt;/style&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
&lt;script>
const SIZE = 40;
let gui;
let params = {
scale: 1.0, scaleMin: 0.25, scaleMax: 3.0, scaleStep: 0.01,
drawBorders: true,
applyRotation: true,
fastFlux: true,
varyRotations: true,
}
let g;
let buffer;
let bufferMask;
let lastRedrawBuffer;
function oldSetup() {
createCanvas(400, 400);
g = createGraphics(width, height);
buffer = createGraphics(2 * SIZE, 2 * SIZE);
for (let i = 0; i &amp;lt; 100; i&amp;#43;&amp;#43;) {
buffer.fill(
255 * random(),
255 * random(),
255 * random(),
255 * random()
);
buffer.rect(
random(4 * SIZE) - 2 * SIZE,
random(4 * SIZE) - 2 * SIZE,
random(2 * SIZE),
random(2 * SIZE)
)
}
redrawBuffer();
bufferMask = createGraphics(2 * SIZE, 2 * SIZE);
bufferMask.push();
{
bufferMask.translate(SIZE, SIZE);
bufferMask.scale(params.scale);
bufferMask.stroke(&amp;#34;black&amp;#34;);
bufferMask.fill(&amp;#34;black&amp;#34;);
ngon(bufferMask, 6, SIZE);
}
bufferMask.pop();
gui = createGuiPanel(&amp;#39;params&amp;#39;);
gui.addObject(params);
gui.setPosition(420, 0);
}
function draw() {
g.background(255);
if (params.fastFlux) {
drawOneToBuffer();
} else {
if (millis() - lastRedrawBuffer &amp;gt; 1000) {
redrawBuffer();
}
}
let masked = buffer.get();
masked.mask(bufferMask);
g.push();
{
g.stroke(&amp;#34;black&amp;#34;);
g.fill(&amp;#34;green&amp;#34;);
g.translate(200, 200);
g.scale(params.scale);
g.stroke(&amp;#34;black&amp;#34;);
g.noFill();
if (params.drawBorders) {
g.stroke(&amp;#34;black&amp;#34;);
g.strokeWeight(2);
ngon(g, 6, SIZE);
}
g.push();
{
g.translate(-SIZE, -SIZE);
g.image(masked, 0, 0);
}
g.pop();
for (let xd = -10; xd &amp;lt; 10; xd&amp;#43;&amp;#43;) {
for (let yd = -50; yd &amp;lt; 50; yd&amp;#43;&amp;#43;) {
if (xd == 0 &amp;amp;&amp;amp; yd == 0) continue;
g.push();
{
let rowOffset = abs(yd) % 2 == 1 ? 1.5 * SIZE : 0;
// Major thanks to:
// https://www.redblobgames.com/grids/hexagons/
g.translate(
rowOffset &amp;#43; 3.0 * xd * SIZE,
sqrt(3) / 2 * yd * SIZE
);
if (params.applyRotation) {
let n = noise(
xd,
yd,
params.varyRotations ? frameCount / 500.0 : 0
);
g.rotate(TWO_PI / 6.0 * parseInt(n * 6));
}
g.push();
{
g.translate(-SIZE, -SIZE);
g.image(masked, 0, 0);
}
g.pop();
if (params.drawBorders) {
g.stroke(&amp;#34;black&amp;#34;);
g.strokeWeight(2);
ngon(g, 6, SIZE);
}
}
g.pop();
}
}
}
g.pop();
image(g, 0, 0);
}
function ngon(g, n, size) {
g.beginShape();
for (let i = 0; i &amp;lt; n; i&amp;#43;&amp;#43;) {
let x = size * cos(TWO_PI * i / n);
let y = size * sin(TWO_PI * i / n);
g.vertex(x, y);
}
g.endShape(CLOSE);
}
function redrawBuffer() {
buffer.background(255);
for (let i = 0; i &amp;lt; 100; i&amp;#43;&amp;#43;) {
drawOneToBuffer();
}
lastRedrawBuffer = millis();
}
function drawOneToBuffer() {
buffer.fill(
255 * random(),
255 * random(),
255 * random(),
255 * random()
);
buffer.rect(
random(4 * SIZE) - 2 * SIZE,
random(4 * SIZE) - 2 * SIZE,
random(2 * SIZE),
random(2 * SIZE)
);
}
const START_PAUSED = false;
function setup() {
// Load saved settings from the browser hash fragment
if (parent.location.hash &amp;amp;&amp;amp; typeof params !== &amp;#34;undefined&amp;#34;) {
try {
var settings = JSON.parse(atob(parent.location.hash.substring(1)));
Object.keys(params).forEach((key) =&amp;gt; params[key] = key in settings ? settings[key] : params[key]);
} catch(ex) {
}
}
oldSetup();
if (START_PAUSED) {
noLoop();
}
createButton(&amp;#34;play/pause&amp;#34;).mousePressed(() =&amp;gt; {
if (isLooping()) {
noLoop();
} else {
loop();
}
});
createButton(&amp;#34;save&amp;#34;).mousePressed(() =&amp;gt; {
saveCanvas(&amp;#39;photo&amp;#39;, &amp;#39;png&amp;#39;)
});
createButton(&amp;#34;clear&amp;#34;).mousePressed(() =&amp;gt; {
if (typeof reset !== &amp;#39;undefined&amp;#39;) {
reset();
} else {
clear();
}
});
createButton(&amp;#34;reload&amp;#34;).mousePressed(() =&amp;gt; {
window.location.reload();
});
if (typeof params !== &amp;#34;undefined&amp;#34;) {
for (var el of document.querySelectorAll(&amp;#39;input&amp;#39;)) {
if (el.id &amp;amp;&amp;amp; el.id.startsWith(&amp;#39;qs_&amp;#39;)) {
el.addEventListener(&amp;#39;change&amp;#39;, () =&amp;gt; {
parent.location.hash = btoa(JSON.stringify(params));
});
}
}
}
}
&lt;/script>
&amp;lt;noscript&amp;gt;To display this p5.js sketch, JavaScript must be enabled.&amp;lt;/noscript&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
"
>&lt;/iframe>
&lt;/div>
&lt;div class="tabcontent" data-tabset="ce1d" id="defaultscript">
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">SIZE&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">40&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">let&lt;/span> &lt;span style="color:#a6e22e">gui&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">let&lt;/span> &lt;span style="color:#a6e22e">params&lt;/span> &lt;span style="color:#f92672">=&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">scale&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#ae81ff">1.0&lt;/span>, &lt;span style="color:#a6e22e">scaleMin&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#ae81ff">0.25&lt;/span>, &lt;span style="color:#a6e22e">scaleMax&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#ae81ff">3.0&lt;/span>, &lt;span style="color:#a6e22e">scaleStep&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#ae81ff">0.01&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">drawBorders&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#66d9ef">true&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">applyRotation&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#66d9ef">true&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">fastFlux&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#66d9ef">true&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">varyRotations&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#66d9ef">true&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">let&lt;/span> &lt;span style="color:#a6e22e">g&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">let&lt;/span> &lt;span style="color:#a6e22e">buffer&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">let&lt;/span> &lt;span style="color:#a6e22e">bufferMask&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">let&lt;/span> &lt;span style="color:#a6e22e">lastRedrawBuffer&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">setup&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">createCanvas&lt;/span>(&lt;span style="color:#ae81ff">400&lt;/span>, &lt;span style="color:#ae81ff">400&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">g&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">createGraphics&lt;/span>(&lt;span style="color:#a6e22e">width&lt;/span>, &lt;span style="color:#a6e22e">height&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">buffer&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">createGraphics&lt;/span>(&lt;span style="color:#ae81ff">2&lt;/span> &lt;span style="color:#f92672">*&lt;/span> &lt;span style="color:#a6e22e">SIZE&lt;/span>, &lt;span style="color:#ae81ff">2&lt;/span> &lt;span style="color:#f92672">*&lt;/span> &lt;span style="color:#a6e22e">SIZE&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> (&lt;span style="color:#66d9ef">let&lt;/span> &lt;span style="color:#a6e22e">i&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>; &lt;span style="color:#a6e22e">i&lt;/span> &lt;span style="color:#f92672">&amp;lt;&lt;/span> &lt;span style="color:#ae81ff">100&lt;/span>; &lt;span style="color:#a6e22e">i&lt;/span>&lt;span style="color:#f92672">++&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">buffer&lt;/span>.&lt;span style="color:#a6e22e">fill&lt;/span>(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">255&lt;/span> &lt;span style="color:#f92672">*&lt;/span> &lt;span style="color:#a6e22e">random&lt;/span>(),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">255&lt;/span> &lt;span style="color:#f92672">*&lt;/span> &lt;span style="color:#a6e22e">random&lt;/span>(),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">255&lt;/span> &lt;span style="color:#f92672">*&lt;/span> &lt;span style="color:#a6e22e">random&lt;/span>(),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">255&lt;/span> &lt;span style="color:#f92672">*&lt;/span> &lt;span style="color:#a6e22e">random&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> );
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">buffer&lt;/span>.&lt;span style="color:#a6e22e">rect&lt;/span>(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">random&lt;/span>(&lt;span style="color:#ae81ff">4&lt;/span> &lt;span style="color:#f92672">*&lt;/span> &lt;span style="color:#a6e22e">SIZE&lt;/span>) &lt;span style="color:#f92672">-&lt;/span> &lt;span style="color:#ae81ff">2&lt;/span> &lt;span style="color:#f92672">*&lt;/span> &lt;span style="color:#a6e22e">SIZE&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">random&lt;/span>(&lt;span style="color:#ae81ff">4&lt;/span> &lt;span style="color:#f92672">*&lt;/span> &lt;span style="color:#a6e22e">SIZE&lt;/span>) &lt;span style="color:#f92672">-&lt;/span> &lt;span style="color:#ae81ff">2&lt;/span> &lt;span style="color:#f92672">*&lt;/span> &lt;span style="color:#a6e22e">SIZE&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">random&lt;/span>(&lt;span style="color:#ae81ff">2&lt;/span> &lt;span style="color:#f92672">*&lt;/span> &lt;span style="color:#a6e22e">SIZE&lt;/span>),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">random&lt;/span>(&lt;span style="color:#ae81ff">2&lt;/span> &lt;span style="color:#f92672">*&lt;/span> &lt;span style="color:#a6e22e">SIZE&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">redrawBuffer&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">bufferMask&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">createGraphics&lt;/span>(&lt;span style="color:#ae81ff">2&lt;/span> &lt;span style="color:#f92672">*&lt;/span> &lt;span style="color:#a6e22e">SIZE&lt;/span>, &lt;span style="color:#ae81ff">2&lt;/span> &lt;span style="color:#f92672">*&lt;/span> &lt;span style="color:#a6e22e">SIZE&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">bufferMask&lt;/span>.&lt;span style="color:#a6e22e">push&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">bufferMask&lt;/span>.&lt;span style="color:#a6e22e">translate&lt;/span>(&lt;span style="color:#a6e22e">SIZE&lt;/span>, &lt;span style="color:#a6e22e">SIZE&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">bufferMask&lt;/span>.&lt;span style="color:#a6e22e">scale&lt;/span>(&lt;span style="color:#a6e22e">params&lt;/span>.&lt;span style="color:#a6e22e">scale&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">bufferMask&lt;/span>.&lt;span style="color:#a6e22e">stroke&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;black&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">bufferMask&lt;/span>.&lt;span style="color:#a6e22e">fill&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;black&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">ngon&lt;/span>(&lt;span style="color:#a6e22e">bufferMask&lt;/span>, &lt;span style="color:#ae81ff">6&lt;/span>, &lt;span style="color:#a6e22e">SIZE&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">bufferMask&lt;/span>.&lt;span style="color:#a6e22e">pop&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">gui&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">createGuiPanel&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;params&amp;#39;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">gui&lt;/span>.&lt;span style="color:#a6e22e">addObject&lt;/span>(&lt;span style="color:#a6e22e">params&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">gui&lt;/span>.&lt;span style="color:#a6e22e">setPosition&lt;/span>(&lt;span style="color:#ae81ff">420&lt;/span>, &lt;span style="color:#ae81ff">0&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">draw&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">g&lt;/span>.&lt;span style="color:#a6e22e">background&lt;/span>(&lt;span style="color:#ae81ff">255&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (&lt;span style="color:#a6e22e">params&lt;/span>.&lt;span style="color:#a6e22e">fastFlux&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">drawOneToBuffer&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#66d9ef">else&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (&lt;span style="color:#a6e22e">millis&lt;/span>() &lt;span style="color:#f92672">-&lt;/span> &lt;span style="color:#a6e22e">lastRedrawBuffer&lt;/span> &lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#ae81ff">1000&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">redrawBuffer&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">let&lt;/span> &lt;span style="color:#a6e22e">masked&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">buffer&lt;/span>.&lt;span style="color:#a6e22e">get&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">masked&lt;/span>.&lt;span style="color:#a6e22e">mask&lt;/span>(&lt;span style="color:#a6e22e">bufferMask&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">g&lt;/span>.&lt;span style="color:#a6e22e">push&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">g&lt;/span>.&lt;span style="color:#a6e22e">stroke&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;black&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">g&lt;/span>.&lt;span style="color:#a6e22e">fill&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;green&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">g&lt;/span>.&lt;span style="color:#a6e22e">translate&lt;/span>(&lt;span style="color:#ae81ff">200&lt;/span>, &lt;span style="color:#ae81ff">200&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">g&lt;/span>.&lt;span style="color:#a6e22e">scale&lt;/span>(&lt;span style="color:#a6e22e">params&lt;/span>.&lt;span style="color:#a6e22e">scale&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">g&lt;/span>.&lt;span style="color:#a6e22e">stroke&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;black&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">g&lt;/span>.&lt;span style="color:#a6e22e">noFill&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (&lt;span style="color:#a6e22e">params&lt;/span>.&lt;span style="color:#a6e22e">drawBorders&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">g&lt;/span>.&lt;span style="color:#a6e22e">stroke&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;black&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">g&lt;/span>.&lt;span style="color:#a6e22e">strokeWeight&lt;/span>(&lt;span style="color:#ae81ff">2&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">ngon&lt;/span>(&lt;span style="color:#a6e22e">g&lt;/span>, &lt;span style="color:#ae81ff">6&lt;/span>, &lt;span style="color:#a6e22e">SIZE&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">g&lt;/span>.&lt;span style="color:#a6e22e">push&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">g&lt;/span>.&lt;span style="color:#a6e22e">translate&lt;/span>(&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#a6e22e">SIZE&lt;/span>, &lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#a6e22e">SIZE&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">g&lt;/span>.&lt;span style="color:#a6e22e">image&lt;/span>(&lt;span style="color:#a6e22e">masked&lt;/span>, &lt;span style="color:#ae81ff">0&lt;/span>, &lt;span style="color:#ae81ff">0&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">g&lt;/span>.&lt;span style="color:#a6e22e">pop&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> (&lt;span style="color:#66d9ef">let&lt;/span> &lt;span style="color:#a6e22e">xd&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">10&lt;/span>; &lt;span style="color:#a6e22e">xd&lt;/span> &lt;span style="color:#f92672">&amp;lt;&lt;/span> &lt;span style="color:#ae81ff">10&lt;/span>; &lt;span style="color:#a6e22e">xd&lt;/span>&lt;span style="color:#f92672">++&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> (&lt;span style="color:#66d9ef">let&lt;/span> &lt;span style="color:#a6e22e">yd&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">50&lt;/span>; &lt;span style="color:#a6e22e">yd&lt;/span> &lt;span style="color:#f92672">&amp;lt;&lt;/span> &lt;span style="color:#ae81ff">50&lt;/span>; &lt;span style="color:#a6e22e">yd&lt;/span>&lt;span style="color:#f92672">++&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (&lt;span style="color:#a6e22e">xd&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#a6e22e">yd&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>) &lt;span style="color:#66d9ef">continue&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">g&lt;/span>.&lt;span style="color:#a6e22e">push&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">let&lt;/span> &lt;span style="color:#a6e22e">rowOffset&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">abs&lt;/span>(&lt;span style="color:#a6e22e">yd&lt;/span>) &lt;span style="color:#f92672">%&lt;/span> &lt;span style="color:#ae81ff">2&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span> &lt;span style="color:#f92672">?&lt;/span> &lt;span style="color:#ae81ff">1.5&lt;/span> &lt;span style="color:#f92672">*&lt;/span> &lt;span style="color:#a6e22e">SIZE&lt;/span> &lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Major thanks to:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// https://www.redblobgames.com/grids/hexagons/
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">g&lt;/span>.&lt;span style="color:#a6e22e">translate&lt;/span>(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">rowOffset&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">3.0&lt;/span> &lt;span style="color:#f92672">*&lt;/span> &lt;span style="color:#a6e22e">xd&lt;/span> &lt;span style="color:#f92672">*&lt;/span> &lt;span style="color:#a6e22e">SIZE&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">sqrt&lt;/span>(&lt;span style="color:#ae81ff">3&lt;/span>) &lt;span style="color:#f92672">/&lt;/span> &lt;span style="color:#ae81ff">2&lt;/span> &lt;span style="color:#f92672">*&lt;/span> &lt;span style="color:#a6e22e">yd&lt;/span> &lt;span style="color:#f92672">*&lt;/span> &lt;span style="color:#a6e22e">SIZE&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> );
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (&lt;span style="color:#a6e22e">params&lt;/span>.&lt;span style="color:#a6e22e">applyRotation&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">let&lt;/span> &lt;span style="color:#a6e22e">n&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">noise&lt;/span>(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">xd&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">yd&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">params&lt;/span>.&lt;span style="color:#a6e22e">varyRotations&lt;/span> &lt;span style="color:#f92672">?&lt;/span> &lt;span style="color:#a6e22e">frameCount&lt;/span> &lt;span style="color:#f92672">/&lt;/span> &lt;span style="color:#ae81ff">500.0&lt;/span> &lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> );
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">g&lt;/span>.&lt;span style="color:#a6e22e">rotate&lt;/span>(&lt;span style="color:#a6e22e">TWO_PI&lt;/span> &lt;span style="color:#f92672">/&lt;/span> &lt;span style="color:#ae81ff">6.0&lt;/span> &lt;span style="color:#f92672">*&lt;/span> parseInt(&lt;span style="color:#a6e22e">n&lt;/span> &lt;span style="color:#f92672">*&lt;/span> &lt;span style="color:#ae81ff">6&lt;/span>));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">g&lt;/span>.&lt;span style="color:#a6e22e">push&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">g&lt;/span>.&lt;span style="color:#a6e22e">translate&lt;/span>(&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#a6e22e">SIZE&lt;/span>, &lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#a6e22e">SIZE&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">g&lt;/span>.&lt;span style="color:#a6e22e">image&lt;/span>(&lt;span style="color:#a6e22e">masked&lt;/span>, &lt;span style="color:#ae81ff">0&lt;/span>, &lt;span style="color:#ae81ff">0&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">g&lt;/span>.&lt;span style="color:#a6e22e">pop&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (&lt;span style="color:#a6e22e">params&lt;/span>.&lt;span style="color:#a6e22e">drawBorders&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">g&lt;/span>.&lt;span style="color:#a6e22e">stroke&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;black&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">g&lt;/span>.&lt;span style="color:#a6e22e">strokeWeight&lt;/span>(&lt;span style="color:#ae81ff">2&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">ngon&lt;/span>(&lt;span style="color:#a6e22e">g&lt;/span>, &lt;span style="color:#ae81ff">6&lt;/span>, &lt;span style="color:#a6e22e">SIZE&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">g&lt;/span>.&lt;span style="color:#a6e22e">pop&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">g&lt;/span>.&lt;span style="color:#a6e22e">pop&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">image&lt;/span>(&lt;span style="color:#a6e22e">g&lt;/span>, &lt;span style="color:#ae81ff">0&lt;/span>, &lt;span style="color:#ae81ff">0&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">ngon&lt;/span>(&lt;span style="color:#a6e22e">g&lt;/span>, &lt;span style="color:#a6e22e">n&lt;/span>, &lt;span style="color:#a6e22e">size&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">g&lt;/span>.&lt;span style="color:#a6e22e">beginShape&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> (&lt;span style="color:#66d9ef">let&lt;/span> &lt;span style="color:#a6e22e">i&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>; &lt;span style="color:#a6e22e">i&lt;/span> &lt;span style="color:#f92672">&amp;lt;&lt;/span> &lt;span style="color:#a6e22e">n&lt;/span>; &lt;span style="color:#a6e22e">i&lt;/span>&lt;span style="color:#f92672">++&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">let&lt;/span> &lt;span style="color:#a6e22e">x&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">size&lt;/span> &lt;span style="color:#f92672">*&lt;/span> &lt;span style="color:#a6e22e">cos&lt;/span>(&lt;span style="color:#a6e22e">TWO_PI&lt;/span> &lt;span style="color:#f92672">*&lt;/span> &lt;span style="color:#a6e22e">i&lt;/span> &lt;span style="color:#f92672">/&lt;/span> &lt;span style="color:#a6e22e">n&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">let&lt;/span> &lt;span style="color:#a6e22e">y&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">size&lt;/span> &lt;span style="color:#f92672">*&lt;/span> &lt;span style="color:#a6e22e">sin&lt;/span>(&lt;span style="color:#a6e22e">TWO_PI&lt;/span> &lt;span style="color:#f92672">*&lt;/span> &lt;span style="color:#a6e22e">i&lt;/span> &lt;span style="color:#f92672">/&lt;/span> &lt;span style="color:#a6e22e">n&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">g&lt;/span>.&lt;span style="color:#a6e22e">vertex&lt;/span>(&lt;span style="color:#a6e22e">x&lt;/span>, &lt;span style="color:#a6e22e">y&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">g&lt;/span>.&lt;span style="color:#a6e22e">endShape&lt;/span>(&lt;span style="color:#a6e22e">CLOSE&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">redrawBuffer&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">buffer&lt;/span>.&lt;span style="color:#a6e22e">background&lt;/span>(&lt;span style="color:#ae81ff">255&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> (&lt;span style="color:#66d9ef">let&lt;/span> &lt;span style="color:#a6e22e">i&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>; &lt;span style="color:#a6e22e">i&lt;/span> &lt;span style="color:#f92672">&amp;lt;&lt;/span> &lt;span style="color:#ae81ff">100&lt;/span>; &lt;span style="color:#a6e22e">i&lt;/span>&lt;span style="color:#f92672">++&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">drawOneToBuffer&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">lastRedrawBuffer&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">millis&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">drawOneToBuffer&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">buffer&lt;/span>.&lt;span style="color:#a6e22e">fill&lt;/span>(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">255&lt;/span> &lt;span style="color:#f92672">*&lt;/span> &lt;span style="color:#a6e22e">random&lt;/span>(),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">255&lt;/span> &lt;span style="color:#f92672">*&lt;/span> &lt;span style="color:#a6e22e">random&lt;/span>(),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">255&lt;/span> &lt;span style="color:#f92672">*&lt;/span> &lt;span style="color:#a6e22e">random&lt;/span>(),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">255&lt;/span> &lt;span style="color:#f92672">*&lt;/span> &lt;span style="color:#a6e22e">random&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> );
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">buffer&lt;/span>.&lt;span style="color:#a6e22e">rect&lt;/span>(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">random&lt;/span>(&lt;span style="color:#ae81ff">4&lt;/span> &lt;span style="color:#f92672">*&lt;/span> &lt;span style="color:#a6e22e">SIZE&lt;/span>) &lt;span style="color:#f92672">-&lt;/span> &lt;span style="color:#ae81ff">2&lt;/span> &lt;span style="color:#f92672">*&lt;/span> &lt;span style="color:#a6e22e">SIZE&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">random&lt;/span>(&lt;span style="color:#ae81ff">4&lt;/span> &lt;span style="color:#f92672">*&lt;/span> &lt;span style="color:#a6e22e">SIZE&lt;/span>) &lt;span style="color:#f92672">-&lt;/span> &lt;span style="color:#ae81ff">2&lt;/span> &lt;span style="color:#f92672">*&lt;/span> &lt;span style="color:#a6e22e">SIZE&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">random&lt;/span>(&lt;span style="color:#ae81ff">2&lt;/span> &lt;span style="color:#f92672">*&lt;/span> &lt;span style="color:#a6e22e">SIZE&lt;/span>),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">random&lt;/span>(&lt;span style="color:#ae81ff">2&lt;/span> &lt;span style="color:#f92672">*&lt;/span> &lt;span style="color:#a6e22e">SIZE&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> );
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;/div></description></item><item><title>Genuary 2023.11: Suprematism</title><link>https://blog.jverkamp.com/2023/02/11/genuary-2023.11-suprematism/</link><pubDate>Sat, 11 Feb 2023 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2023/02/11/genuary-2023.11-suprematism/</guid><description>&lt;p>&lt;a href="https://genuary.art/">Genuary&lt;/a>!&lt;/p>
&lt;p>Spend a month making one beautiful thing per day, given a bunch of prompts. A month late, but as they say, &amp;rsquo;the second best time is now'.&lt;/p>
&lt;p>Let&amp;rsquo;s do it!&lt;/p>
&lt;h2 id="11-suprematism">11) Suprematism&lt;/h2>
&lt;p>Wikipedia: &lt;a href="https://en.wikipedia.org/wiki/Suprematism">Suprematism&lt;/a>&lt;/p></description></item><item><title>Genuary 2023.10: Generative Music</title><link>https://blog.jverkamp.com/2023/02/10/genuary-2023.10-generative-music/</link><pubDate>Fri, 10 Feb 2023 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2023/02/10/genuary-2023.10-generative-music/</guid><description>&lt;p>&lt;a href="https://genuary.art/">Genuary&lt;/a>!&lt;/p>
&lt;p>Spend a month making one beautiful thing per day, given a bunch of prompts. A month late, but as they say, &amp;rsquo;the second best time is now'.&lt;/p>
&lt;p>Let&amp;rsquo;s do it!&lt;/p>
&lt;h2 id="10-generative-music">10) Generative music&lt;/h2>
&lt;p>Wikipedia: &lt;a href="https://en.wikipedia.org/wiki/">Generative music&lt;/a>&lt;/p>
&lt;p>&lt;strong>NOTE: Because of limitations in JavaScript autoplaying sound, you must click to start.&lt;/strong>&lt;/p>
&lt;p>&lt;strong>NOTE: This currently doesn&amp;rsquo;t work in Safari. Something funny with the p5.sound addon. I&amp;rsquo;m working on it.&lt;/strong>&lt;/p></description></item><item><title>Genuary 2023.09: Plants</title><link>https://blog.jverkamp.com/2023/02/09/genuary-2023.09-plants/</link><pubDate>Thu, 09 Feb 2023 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2023/02/09/genuary-2023.09-plants/</guid><description>&lt;p>&lt;a href="https://genuary.art/">Genuary&lt;/a>!&lt;/p>
&lt;p>Spend a month making one beautiful thing per day, given a bunch of prompts. A month late, but as they say, &amp;rsquo;the second best time is now'.&lt;/p>
&lt;p>Let&amp;rsquo;s do it!&lt;/p>
&lt;h2 id="9-plants">9) Plants&lt;/h2></description></item><item><title>Genuary 2023.08: Signed Distance Functions</title><link>https://blog.jverkamp.com/2023/02/08/genuary-2023.08-signed-distance-functions/</link><pubDate>Wed, 08 Feb 2023 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2023/02/08/genuary-2023.08-signed-distance-functions/</guid><description>&lt;p>&lt;a href="https://genuary.art/">Genuary&lt;/a>!&lt;/p>
&lt;p>Spend a month making one beautiful thing per day, given a bunch of prompts. A month late, but as they say, &amp;rsquo;the second best time is now'.&lt;/p>
&lt;p>Let&amp;rsquo;s do it!&lt;/p>
&lt;h2 id="8-signed-distance-functions">8) Signed Distance Functions&lt;/h2></description></item><item><title>Genuary 2023.07: Sample a color palette</title><link>https://blog.jverkamp.com/2023/02/07/genuary-2023.07-sample-a-color-palette/</link><pubDate>Tue, 07 Feb 2023 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2023/02/07/genuary-2023.07-sample-a-color-palette/</guid><description>&lt;p>&lt;a href="https://genuary.art/">Genuary&lt;/a>!&lt;/p>
&lt;p>Spend a month making one beautiful thing per day, given a bunch of prompts. A month late, but as they say, &amp;rsquo;the second best time is now'.&lt;/p>
&lt;p>Let&amp;rsquo;s do it!&lt;/p>
&lt;h2 id="7-sample-a-color-palette-from-your-favorite-moviealbum-cover">7) Sample a color palette from your favorite movie/album cover&lt;/h2></description></item><item><title>Genuary 2023.06: Steal like an artist</title><link>https://blog.jverkamp.com/2023/02/06/genuary-2023.06-steal-like-an-artist/</link><pubDate>Mon, 06 Feb 2023 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2023/02/06/genuary-2023.06-steal-like-an-artist/</guid><description>&lt;p>&lt;a href="https://genuary.art/">Genuary&lt;/a>!&lt;/p>
&lt;p>Spend a month making one beautiful thing per day, given a bunch of prompts. A month late, but as they say, &amp;rsquo;the second best time is now'.&lt;/p>
&lt;p>Let&amp;rsquo;s do it!&lt;/p>
&lt;h2 id="6-steal-like-an-artist">6) Steal Like An Artist&lt;/h2></description></item><item><title>Genuary 2023.05: Debug view</title><link>https://blog.jverkamp.com/2023/02/05/genuary-2023.05-debug-view/</link><pubDate>Sun, 05 Feb 2023 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2023/02/05/genuary-2023.05-debug-view/</guid><description>Genuary!
Spend a month making one beautiful thing per day, given a bunch of prompts. A month late, but as they say, &amp;rsquo;the second best time is now'.
Let&amp;rsquo;s do it!
5) Debug view I like Boids. Here are some Boids with debug vectors drawn showing the three forces acting on them (red to stay away from one another, green to move in the same direction as their friends, blue to move towards the center of their friends).</description></item><item><title>Genuary 2023.04: Intersections</title><link>https://blog.jverkamp.com/2023/02/04/genuary-2023.04-intersections/</link><pubDate>Sat, 04 Feb 2023 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2023/02/04/genuary-2023.04-intersections/</guid><description>&lt;p>&lt;a href="https://genuary.art/">Genuary&lt;/a>!&lt;/p>
&lt;p>Spend a month making one beautiful thing per day, given a bunch of prompts. A month late, but as they say, &amp;rsquo;the second best time is now'.&lt;/p>
&lt;p>Let&amp;rsquo;s do it!&lt;/p>
&lt;h2 id="4-intersections">4) Intersections&lt;/h2></description></item><item><title>Genuary 2023.03: Glitch art</title><link>https://blog.jverkamp.com/2023/02/03/genuary-2023.03-glitch-art/</link><pubDate>Fri, 03 Feb 2023 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2023/02/03/genuary-2023.03-glitch-art/</guid><description>&lt;p>&lt;a href="https://genuary.art/">Genuary&lt;/a>!&lt;/p>
&lt;p>Spend a month making one beautiful thing per day, given a bunch of prompts. A month late, but as they say, &amp;rsquo;the second best time is now'.&lt;/p>
&lt;p>Let&amp;rsquo;s do it!&lt;/p>
&lt;h2 id="3-glitch-art">3) Glitch Art&lt;/h2></description></item><item><title>Genuary 2023.02: Made in 10 minutes</title><link>https://blog.jverkamp.com/2023/02/02/genuary-2023.02-made-in-10-minutes/</link><pubDate>Thu, 02 Feb 2023 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2023/02/02/genuary-2023.02-made-in-10-minutes/</guid><description>&lt;p>&lt;a href="https://genuary.art/">Genuary&lt;/a>!&lt;/p>
&lt;p>Spend a month making one beautiful thing per day, given a bunch of prompts. A month late, but as they say, &amp;rsquo;the second best time is now'.&lt;/p>
&lt;p>Let&amp;rsquo;s do it!&lt;/p>
&lt;h2 id="2-made-in-10-minutes">2) Made in 10 minutes&lt;/h2></description></item><item><title>Genuary 2023.01: Perfect loop</title><link>https://blog.jverkamp.com/2023/02/01/genuary-2023.01-perfect-loop/</link><pubDate>Wed, 01 Feb 2023 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2023/02/01/genuary-2023.01-perfect-loop/</guid><description>&lt;p>&lt;a href="https://genuary.art/">Genuary&lt;/a>!&lt;/p>
&lt;p>Spend a month making one beautiful thing per day, given a bunch of prompts. A month late, but as they say, &amp;rsquo;the second best time is now'.&lt;/p>
&lt;p>Let&amp;rsquo;s do it!&lt;/p>
&lt;h2 id="1-perfect-loop--infinite-loop--endless-gifs">1) Perfect loop / Infinite loop / endless GIFs&lt;/h2></description></item><item><title>Local JS/CSS with Hugo Pipe</title><link>https://blog.jverkamp.com/2023/01/19/local-js/css-with-hugo-pipe/</link><pubDate>Thu, 19 Jan 2023 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2023/01/19/local-js/css-with-hugo-pipe/</guid><description>&lt;p>I recently stumbled across a post that reminded me that &lt;a href="https://gohugo.io/hugo-pipes/introduction/">Hugo has pipes&lt;/a>. You can use them to automatically download files and include them as local. This seems like a pretty good idea for JS/CSS (you can argue caching versus security/locality all you want), but I&amp;rsquo;m going to give it a try.&lt;/p></description></item><item><title>Runelang: A Summoning Circle Generator</title><link>https://blog.jverkamp.com/2022/08/29/runelang-a-summoning-circle-generator/</link><pubDate>Mon, 29 Aug 2022 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2022/08/29/runelang-a-summoning-circle-generator/</guid><description>&lt;p>Last time we had &lt;a href="https://blog.jverkamp.com/2022/08/25/runelang-a-bind-rune-generator/">Runelang: A Bind Rune Generator&lt;/a>. This time, let&amp;rsquo;s make &amp;lsquo;summoning circles&amp;rsquo;. Basically, we want to make a circle with stars and other circles inscribed and around the borders with various &amp;lsquo;mystic&amp;rsquo; text in the mix. Something like this:&lt;/p>
&lt;ul>
&lt;li>&lt;code>generate_summoning_circle&lt;/code>
&lt;ul>
&lt;li>random chance of boder&lt;/li>
&lt;li>random chance of one or more inscribed stars&lt;/li>
&lt;li>random chance of recurring on the border (calling &lt;code>generate_summoning_circle&lt;/code> again)&lt;/li>
&lt;li>random chance of recurring in the middle&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul></description></item><item><title>Runelang: A Bind Rune Generator</title><link>https://blog.jverkamp.com/2022/08/25/runelang-a-bind-rune-generator/</link><pubDate>Thu, 25 Aug 2022 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2022/08/25/runelang-a-bind-rune-generator/</guid><description>&lt;p>Continuing with my &lt;a href="https://blog.jverkamp.com/series/runelang-in-the-browser/">Runelang in the Browser&lt;/a> series, I had the idea to automatically generate runes. So basically reversing the parsing step, rather than to take what I&amp;rsquo;ve written and make it look good, to write something that Runelang can parse&amp;ndash;and still look good.&lt;/p>
&lt;p>In a nutshell, I want to write a series of functions that can recursively call one another to render runes:&lt;/p>
&lt;ul>
&lt;li>&lt;code>generate_bind_rune&lt;/code>
&lt;ul>
&lt;li>&lt;em>n&lt;/em> times &lt;code>generate_bind_rune_arm&lt;/code>
&lt;ul>
&lt;li>&lt;em>m&lt;/em> times generate bars, circles, and other decrations&lt;/li>
&lt;li>add a fork at the end&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul></description></item><item><title>Runelang: Evaluation</title><link>https://blog.jverkamp.com/2022/07/16/runelang-evaluation/</link><pubDate>Sat, 16 Jul 2022 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2022/07/16/runelang-evaluation/</guid><description>&lt;p>As they say, life is what happens when you&amp;rsquo;re making other plans. But I&amp;rsquo;m back, so let&amp;rsquo;s talk some more about &lt;a href="https://blog.jverkamp.com/series/runelang-in-the-browser/">Runelang&lt;/a>. In the interest of not dragging on months without finishing, we&amp;rsquo;re going to go ahead and push through the rest of the project. Onward!&lt;/p></description></item><item><title>Runelang: The Parser (Part 2: Expressions)</title><link>https://blog.jverkamp.com/2022/03/18/runelang-the-parser-part-2-expressions/</link><pubDate>Fri, 18 Mar 2022 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2022/03/18/runelang-the-parser-part-2-expressions/</guid><description>&lt;p>&lt;a href="https://blog.jverkamp.com/2022/03/15/runelang-the-parser-part-1/">Earlier this week&lt;/a>, we started parsing, getting through groups, nodes, params, and lists. A pretty good start, but it also leaves out two very powerful things (expressions and defines), one of which we absolutely do need to start actually evaluating things: expressions. Since we use them in every param, we pretty much need to know how to parse them, so let&amp;rsquo;s do it!&lt;/p></description></item><item><title>Runelang: The Parser (Part 1)</title><link>https://blog.jverkamp.com/2022/03/15/runelang-the-parser-part-1/</link><pubDate>Tue, 15 Mar 2022 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2022/03/15/runelang-the-parser-part-1/</guid><description>&lt;p>I&amp;rsquo;m still here! And less sick now.&lt;/p>
&lt;p>Last time(s), we &lt;a href="https://blog.jverkamp.com/2022/02/23/runelang-language-specification/">described&lt;/a> and &lt;a href="https://blog.jverkamp.com/2022/02/24/runelang-the-lexer/">lexed&lt;/a>) Runelang! This time around, let&amp;rsquo;s take the lexed tokens and go one step further and parse them!&lt;/p>
&lt;p>So, how do we go about this? With a &lt;a href="https://en.wikipedia.org/wiki/recursive%20descent%20parser">recursive descent parser&lt;/a>!&lt;/p>
&lt;ul>
&lt;li>Start with a list/stream of tokens&lt;/li>
&lt;li>Using the first &lt;em>k&lt;/em> (in a &lt;a href="https://en.wikipedia.org/wiki/LL%28k%29%20parser">LL(k) parser&lt;/a>) elements of the list, identify which sort of object we are parsing (a &lt;code>group&lt;/code> / &lt;code>identifier&lt;/code> / &lt;code>literal&lt;/code> / &lt;code>expression&lt;/code> / etc)&lt;/li>
&lt;li>Call a parsing function for that object type (&lt;code>parseGroup&lt;/code> etc) that will:
&lt;ul>
&lt;li>Recursively parse the given object type (this may in turn call more parse functions)&lt;/li>
&lt;li>Advance the token stream &amp;lsquo;consuming&amp;rsquo; any tokens used in this group so the new &amp;lsquo;first&amp;rsquo; element is the next object&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul></description></item><item><title>Runelang: The Lexer</title><link>https://blog.jverkamp.com/2022/02/24/runelang-the-lexer/</link><pubDate>Thu, 24 Feb 2022 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2022/02/24/runelang-the-lexer/</guid><description>&lt;p>Let&amp;rsquo;s &lt;a href="https://en.wikipedia.org/wiki/Lexical_analysis">LEX&lt;/a>!&lt;/p>
&lt;p>So this is actually one of the easier parts of a programming language. In this case, we need to turn the raw text of a program into a sequence of tokens / lexemes that will be easier to parse. In this case, we want to:&lt;/p>
&lt;ul>
&lt;li>Remove all whitespace and comments&lt;/li>
&lt;li>Store the row and column with the token to make debugging easier&lt;/li>
&lt;/ul>
&lt;p>So let&amp;rsquo;s do it!&lt;/p></description></item><item><title>Runelang: Language Specification</title><link>https://blog.jverkamp.com/2022/02/23/runelang-language-specification/</link><pubDate>Wed, 23 Feb 2022 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2022/02/23/runelang-language-specification/</guid><description>&lt;p>&lt;a href="https://blog.jverkamp.com/2021/01/26/a-dsl-for-rendering-magic-circles-and-runes/">Previously&lt;/a>, I wrote a post about making a DSL in Ruby that could render magic circles/runes. It worked pretty well. I could turn things like this:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-ruby" data-lang="ruby">&lt;span style="display:flex;">&lt;span>rune &lt;span style="color:#66d9ef">do&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> scale &lt;span style="color:#ae81ff">0&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#ae81ff">9&lt;/span> &lt;span style="color:#66d9ef">do&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> circle
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> polygon &lt;span style="color:#ae81ff">7&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> star &lt;span style="color:#ae81ff">14&lt;/span>, &lt;span style="color:#ae81ff">3&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> star &lt;span style="color:#ae81ff">7&lt;/span>, &lt;span style="color:#ae81ff">2&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> children &lt;span style="color:#ae81ff">7&lt;/span>, &lt;span style="color:#e6db74">scale&lt;/span>: &lt;span style="color:#ae81ff">1&lt;/span>&lt;span style="color:#f92672">/&lt;/span>&lt;span style="color:#ae81ff">8&lt;/span>r, &lt;span style="color:#e6db74">offset&lt;/span>: &lt;span style="color:#ae81ff">1&lt;/span> &lt;span style="color:#66d9ef">do&lt;/span> &lt;span style="color:#f92672">|&lt;/span>i&lt;span style="color:#f92672">|&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> circle
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> invert &lt;span style="color:#66d9ef">do&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> text (&lt;span style="color:#ae81ff">0x2641&lt;/span> &lt;span style="color:#f92672">+&lt;/span> i)&lt;span style="color:#f92672">.&lt;/span>chr &lt;span style="color:#66d9ef">Encoding&lt;/span>&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#66d9ef">UTF_8&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> scale &lt;span style="color:#ae81ff">0&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#ae81ff">15&lt;/span> &lt;span style="color:#66d9ef">do&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> translate &lt;span style="color:#e6db74">x&lt;/span>: &lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">2&lt;/span> &lt;span style="color:#66d9ef">do&lt;/span> circle; moon &lt;span style="color:#ae81ff">0&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#ae81ff">45&lt;/span> &lt;span style="color:#66d9ef">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> circle
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> translate &lt;span style="color:#e6db74">x&lt;/span>: &lt;span style="color:#ae81ff">2&lt;/span> &lt;span style="color:#66d9ef">do&lt;/span> circle; moon &lt;span style="color:#ae81ff">0&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#ae81ff">55&lt;/span> &lt;span style="color:#66d9ef">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">end&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Into this:&lt;/p>
&lt;img src="https://blog.jverkamp.com/embeds/2022/old-astrology-and-moons.svg" />
&lt;p>But&amp;hellip; I decided to completely rewrite it. Now it&amp;rsquo;s an entirely separate language:&lt;/p>
&lt;script defer type="module">
import { render } from '/embeds/runelang/runelang/main.js'
import logging from '/embeds/runelang/lib/logging.js'
const log = logging.get("system")
let elInput = document.querySelector('[data-input]')
let elOutput = document.querySelector('[data-output]')
let elLog = document.querySelector('[data-log]')
elInput.value = `
define offsetmoon(x, phase) {
translate(x: x) {
circle
fill("black") moon(phase)
}
}
rune {
scale(0.9) {
circle
polygon(7)
star(14, 3)
star(7, 2)
radial(scale: 1/8, rotate: true) [
circle
invert character(0x2640 + i)
for i in 1..7
]
}
scale(0.15) stroke(2) {
circle
offsetmoon(-2, 0.55)
offsetmoon( 2, -0.55)
}
}
`
logging.register((msg) => {
let node = document.createElement('li')
node.innerText = msg
elLog.prepend(node)
})
logging.setMode('ERROR')
function doRender() {
elLog.innerHTML = ''
let input = elInput.value
try {
let svg = render(input)
elOutput.innerHTML = svg
log.awesome('IT WORKED!')
} catch (exception) {
console.log(exception)
}
}
function debounce(f, timeout = 500) {
let timer
return (...args) => {
clearTimeout(timer)
timer = setTimeout(() => f.apply(this, args), timeout)
}
}
document.addEventListener('keyup', debounce(doRender))
doRender()
&lt;/script>
&lt;style>
textarea[data-input],
div[data-output] {
width: 80%;
height: 600px;
padding: 1em;
}
td {
width: 45%;
vertical-align: top;
}
&lt;/style>
&lt;h3>Output&lt;/h3>
&lt;div data-output>&lt;/div>
&lt;h3>Source&lt;/h3>
&lt;textarea data-input>&lt;/textarea>
&lt;h3>Log (most recent messages first):&lt;/h2>
&lt;ul data-log>&lt;/ul></description></item><item><title>Neural Network Cellular Automata</title><link>https://blog.jverkamp.com/2021/09/06/neural-network-cellular-automata/</link><pubDate>Mon, 06 Sep 2021 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2021/09/06/neural-network-cellular-automata/</guid><description>&lt;p>Okay. A &lt;a href="https://old.reddit.com/r/cellular_automata/comments/ph1zez/random_neural_network_based_cellular_automata/">random post&lt;/a> on the &lt;a href="https://old.reddit.com/r/cellular_automata/">/r/cellular_automata subreddit&lt;/a> inspired me.&lt;/p>
&lt;p>Let&amp;rsquo;s generate a cellular automata where each pixel updates based on a neural network given as input:&lt;/p>
&lt;ul>
&lt;li>The x/y coordinates (scaled to the range 0-1)&lt;/li>
&lt;li>An optional random value (to make it more dynamic)&lt;/li>
&lt;li>A variety of neighboring data, such as:
&lt;ul>
&lt;li>The number of neighbors that are &amp;lsquo;active&amp;rsquo; (&amp;gt; 50% white), ranges 0-8 scaled to 0-1. This should allow &lt;a href="https://en.wikipedia.org/wiki/Conway%27s%20Game%20of%20Life">Conway&amp;#39;s Game of Life&lt;/a>&lt;/li>
&lt;li>The RGB values of all neighbors (allows a superset of the above)&lt;/li>
&lt;li>Gradients, subtract color value of the left from the right so that you get edges and side to side movement&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>Let&amp;rsquo;s do it!&lt;/p></description></item><item><title>Solving Snakebird</title><link>https://blog.jverkamp.com/2021/08/18/solving-snakebird/</link><pubDate>Wed, 18 Aug 2021 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2021/08/18/solving-snakebird/</guid><description>&lt;p>&lt;a href="https://store.steampowered.com/app/357300/Snakebird/">Snakebird!&lt;/a>&lt;/p>
&lt;figure>&lt;img src="https://blog.jverkamp.com/embeds/2021/snakebird-0.png"/>
&lt;/figure>
&lt;p>A cute little puzzle game, where you move around snake(birds). Move any number of snakes around the level, eating fruit, and getting to the exit. The main gotchas are that you have gravity to content with&amp;ndash;your snake will easily fall off the edge of the world&amp;ndash;and each time you eat a fruit, your snake gets bigger. This can help get longer to get into hard to reach places or it can cause trouble when you trap yourself in corners.&lt;/p>
&lt;p>Let&amp;rsquo;s use the new &lt;a href="2021-08-17-immutable.js-solvers">immutable.js solver&lt;/a> to solve these problems!&lt;/p></description></item><item><title>Immutable.js Solvers</title><link>https://blog.jverkamp.com/2021/08/17/immutable.js-solvers/</link><pubDate>Tue, 17 Aug 2021 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2021/08/17/immutable.js-solvers/</guid><description>&lt;p>A bit ago I wrote about writing a &lt;a href="https://blog.jverkamp.com/2021/06/25/a-generic-brute-force-backtracking-solver/">generic brute force solver&lt;/a> (wow, was that really two months ago?). It got &amp;hellip; complicate. Mostly, because every time I wrote a &lt;code>step&lt;/code> function, I had to be careful to undo the same. Wouldn&amp;rsquo;t it be nice if we could just write a step function and get backtracking for &amp;lsquo;free&amp;rsquo;?&lt;/p>
&lt;p>Well, with immutability you can!&lt;/p></description></item><item><title>A Generic Brute Force Backtracking Solver</title><link>https://blog.jverkamp.com/2021/06/25/a-generic-brute-force-backtracking-solver/</link><pubDate>Fri, 25 Jun 2021 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2021/06/25/a-generic-brute-force-backtracking-solver/</guid><description>&lt;p>One of the projects I&amp;rsquo;ve had vaguely in the back of my head is a sort of generic puzzle solver. I really love puzzles, but of the pencil and paper and video game varieties. So I think it would be awesome to write out a definition of a puzzle (say how to play Sudoku), give it input, and have it give me an answer back.&lt;/p>
&lt;p>Well, I finally got around to trying it!&lt;/p></description></item><item><title>GMail Oldest First</title><link>https://blog.jverkamp.com/2021/01/25/gmail-oldest-first/</link><pubDate>Mon, 25 Jan 2021 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2021/01/25/gmail-oldest-first/</guid><description>&lt;p>It&amp;rsquo;s been &lt;a href="https://blog.jverkamp.com/2016/01/02/inlining-plaintext-attachments-in-gmail/">rather a while&lt;/a> since I last worked on a userscript, but there&amp;rsquo;s been a problem I&amp;rsquo;ve been trying to solve for some time.&lt;/p>
&lt;p>I want to have my GMail in order from oldest to newest. While you can do this for all messages, you can&amp;rsquo;t do it within a single page.&lt;/p></description></item><item><title>Genuary: Triple Nested Loops</title><link>https://blog.jverkamp.com/2021/01/08/genuary-triple-nested-loops/</link><pubDate>Fri, 08 Jan 2021 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2021/01/08/genuary-triple-nested-loops/</guid><description>&lt;p>The fine people of &lt;a href="https://old.reddit.com/r/generative/">/r/generative&lt;/a> / &lt;a href="https://genuary2021.github.io/">Genuary2021&lt;/a> have a series of challenges for generative works for the month of January. I don&amp;rsquo;t think I&amp;rsquo;m going to do all of them, but pick and choose. For example, the very first prompt is:&lt;/p>
&lt;blockquote>
&lt;p>&lt;code>// TRIPLE NESTED LOOP&lt;/code>&lt;/p>
&lt;/blockquote>
&lt;p>My goal was to draw a grid of circles across the X/Y the image and nest them for the third dimension. To make it a little more interesting, I added a few different color modes. &lt;code>seededRandom&lt;/code> is my personal favorite, that was interesting to get working.&lt;/p></description></item><item><title>Pictogenesis: Stack Transpiling</title><link>https://blog.jverkamp.com/2020/12/11/pictogenesis-stack-transpiling/</link><pubDate>Fri, 11 Dec 2020 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2020/12/11/pictogenesis-stack-transpiling/</guid><description>&lt;p>Much like &lt;a href="https://blog.jverkamp.com/2020/12/03/pictogenesis-transpiling/">transpiling register machines&lt;/a>, now we have a chance to transpile &lt;a href="https://blog.jverkamp.com/2020/12/09/pictogenesis-stack-machine/">stack machines&lt;/a>. Unfortunately, it doesn&amp;rsquo;t actually speed up the code nearly so much (the stack is just not as effective of a memory structure in this case), but it&amp;rsquo;s still an interesting bit of code.&lt;/p>
&lt;p>In this case, we turn something like this:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-asm" data-lang="asm">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">invsub&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">polT&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">writeG&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">id&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">neg&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">zero&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">?&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">sin&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">invsub&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">ZERO&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">inv&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Into this:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">function&lt;/span>(&lt;span style="color:#a6e22e">X&lt;/span>, &lt;span style="color:#a6e22e">Y&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">x&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">X&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">y&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">Y&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">stack&lt;/span> &lt;span style="color:#f92672">=&lt;/span> [];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">r&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">undefined&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">g&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">undefined&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">b&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">undefined&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">stack&lt;/span>.&lt;span style="color:#a6e22e">push&lt;/span>(&lt;span style="color:#a6e22e">X&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">stack&lt;/span>.&lt;span style="color:#a6e22e">push&lt;/span>(&lt;span style="color:#a6e22e">Y&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">arg0&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">arg1&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">arg2&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">result&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// invsub
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">arg0&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">stack&lt;/span>.&lt;span style="color:#a6e22e">pop&lt;/span>() &lt;span style="color:#f92672">||&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">result&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span> &lt;span style="color:#f92672">-&lt;/span> &lt;span style="color:#a6e22e">arg0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">result&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">result&lt;/span> &lt;span style="color:#f92672">%&lt;/span> &lt;span style="color:#ae81ff">1.0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">stack&lt;/span>.&lt;span style="color:#a6e22e">push&lt;/span>(&lt;span style="color:#a6e22e">result&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// polT
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">arg0&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">stack&lt;/span>.&lt;span style="color:#a6e22e">pop&lt;/span>() &lt;span style="color:#f92672">||&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">arg1&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">stack&lt;/span>.&lt;span style="color:#a6e22e">pop&lt;/span>() &lt;span style="color:#f92672">||&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">result&lt;/span> &lt;span style="color:#f92672">=&lt;/span> Math.&lt;span style="color:#a6e22e">atan2&lt;/span>(&lt;span style="color:#a6e22e">arg0&lt;/span>, &lt;span style="color:#a6e22e">arg1&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">result&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">result&lt;/span> &lt;span style="color:#f92672">%&lt;/span> &lt;span style="color:#ae81ff">1.0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">stack&lt;/span>.&lt;span style="color:#a6e22e">push&lt;/span>(&lt;span style="color:#a6e22e">result&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// writeG
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">arg0&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">stack&lt;/span>.&lt;span style="color:#a6e22e">pop&lt;/span>() &lt;span style="color:#f92672">||&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">g&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">arg0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// id
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">arg0&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">stack&lt;/span>.&lt;span style="color:#a6e22e">pop&lt;/span>() &lt;span style="color:#f92672">||&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">result&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">arg0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">result&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">result&lt;/span> &lt;span style="color:#f92672">%&lt;/span> &lt;span style="color:#ae81ff">1.0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">stack&lt;/span>.&lt;span style="color:#a6e22e">push&lt;/span>(&lt;span style="color:#a6e22e">result&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// neg
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">arg0&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">stack&lt;/span>.&lt;span style="color:#a6e22e">pop&lt;/span>() &lt;span style="color:#f92672">||&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">result&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#a6e22e">arg0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">result&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">result&lt;/span> &lt;span style="color:#f92672">%&lt;/span> &lt;span style="color:#ae81ff">1.0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">stack&lt;/span>.&lt;span style="color:#a6e22e">push&lt;/span>(&lt;span style="color:#a6e22e">result&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// zero?
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">arg0&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">stack&lt;/span>.&lt;span style="color:#a6e22e">pop&lt;/span>() &lt;span style="color:#f92672">||&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">arg1&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">stack&lt;/span>.&lt;span style="color:#a6e22e">pop&lt;/span>() &lt;span style="color:#f92672">||&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">arg2&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">stack&lt;/span>.&lt;span style="color:#a6e22e">pop&lt;/span>() &lt;span style="color:#f92672">||&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">result&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">arg0&lt;/span> &lt;span style="color:#f92672">===&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#f92672">?&lt;/span> &lt;span style="color:#a6e22e">arg1&lt;/span> &lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">arg2&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">result&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">result&lt;/span> &lt;span style="color:#f92672">%&lt;/span> &lt;span style="color:#ae81ff">1.0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">stack&lt;/span>.&lt;span style="color:#a6e22e">push&lt;/span>(&lt;span style="color:#a6e22e">result&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// sin
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">arg0&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">stack&lt;/span>.&lt;span style="color:#a6e22e">pop&lt;/span>() &lt;span style="color:#f92672">||&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">result&lt;/span> &lt;span style="color:#f92672">=&lt;/span> Math.&lt;span style="color:#a6e22e">sin&lt;/span>(&lt;span style="color:#a6e22e">arg0&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">result&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">result&lt;/span> &lt;span style="color:#f92672">%&lt;/span> &lt;span style="color:#ae81ff">1.0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">stack&lt;/span>.&lt;span style="color:#a6e22e">push&lt;/span>(&lt;span style="color:#a6e22e">result&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// invsub
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">arg0&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">stack&lt;/span>.&lt;span style="color:#a6e22e">pop&lt;/span>() &lt;span style="color:#f92672">||&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">result&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span> &lt;span style="color:#f92672">-&lt;/span> &lt;span style="color:#a6e22e">arg0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">result&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">result&lt;/span> &lt;span style="color:#f92672">%&lt;/span> &lt;span style="color:#ae81ff">1.0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">stack&lt;/span>.&lt;span style="color:#a6e22e">push&lt;/span>(&lt;span style="color:#a6e22e">result&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// ZERO
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">result&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">result&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">result&lt;/span> &lt;span style="color:#f92672">%&lt;/span> &lt;span style="color:#ae81ff">1.0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">stack&lt;/span>.&lt;span style="color:#a6e22e">push&lt;/span>(&lt;span style="color:#a6e22e">result&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// inv
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">arg0&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">stack&lt;/span>.&lt;span style="color:#a6e22e">pop&lt;/span>() &lt;span style="color:#f92672">||&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">result&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span> &lt;span style="color:#f92672">/&lt;/span> &lt;span style="color:#a6e22e">arg0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">result&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">result&lt;/span> &lt;span style="color:#f92672">%&lt;/span> &lt;span style="color:#ae81ff">1.0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">stack&lt;/span>.&lt;span style="color:#a6e22e">push&lt;/span>(&lt;span style="color:#a6e22e">result&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> [
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">r&lt;/span> &lt;span style="color:#f92672">===&lt;/span> &lt;span style="color:#66d9ef">undefined&lt;/span> &lt;span style="color:#f92672">?&lt;/span> &lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">stack&lt;/span>.&lt;span style="color:#a6e22e">pop&lt;/span>() &lt;span style="color:#f92672">||&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">r&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">g&lt;/span> &lt;span style="color:#f92672">===&lt;/span> &lt;span style="color:#66d9ef">undefined&lt;/span> &lt;span style="color:#f92672">?&lt;/span> &lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">stack&lt;/span>.&lt;span style="color:#a6e22e">pop&lt;/span>() &lt;span style="color:#f92672">||&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">g&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">b&lt;/span> &lt;span style="color:#f92672">===&lt;/span> &lt;span style="color:#66d9ef">undefined&lt;/span> &lt;span style="color:#f92672">?&lt;/span> &lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">stack&lt;/span>.&lt;span style="color:#a6e22e">pop&lt;/span>() &lt;span style="color:#f92672">||&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">b&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Pictogenesis: Stack Machine</title><link>https://blog.jverkamp.com/2020/12/09/pictogenesis-stack-machine/</link><pubDate>Wed, 09 Dec 2020 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2020/12/09/pictogenesis-stack-machine/</guid><description>&lt;p>Okay, enough with &lt;a href="https://blog.jverkamp.com/2020/11/24/pictogenesis-register-machine/">register machines&lt;/a>. Let&amp;rsquo;s make something new. This time, a stack based machine!&lt;/p>
&lt;p>Rather than keeping it&amp;rsquo;s memory in a series of memory cells, there will be a single stack of values. All functions can &lt;code>pop&lt;/code> values from the top of the stack or &lt;code>push&lt;/code> them back on. I will add the ability to &lt;code>read&lt;/code> the X/Y value and directly &lt;code>write&lt;/code> R/G/B, but you can&amp;rsquo;t write to the former or read from the latter, so you can&amp;rsquo;t use them as registers. Let&amp;rsquo;s see what that looks like!&lt;/p></description></item><item><title>Pictogenesis:Â Transpiling</title><link>https://blog.jverkamp.com/2020/12/03/pictogenesis-transpiling/</link><pubDate>Thu, 03 Dec 2020 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2020/12/03/pictogenesis-transpiling/</guid><description>&lt;p>Okay. That is &lt;em>slow&lt;/em>&amp;hellip; Let&amp;rsquo;s make it faster!&lt;/p>
&lt;p>So the main problem we have is that we&amp;rsquo;re interpreting the code. For every single pixel, for every line of code, we&amp;rsquo;re doing a few housekeeping things and making at least one function call. For a 400x400 image with just 10 lines of code, that&amp;rsquo;s 1.6M function calls. Like I said, &lt;em>slow&lt;/em>.&lt;/p>
&lt;p>So let&amp;rsquo;s make it faster!&lt;/p>
&lt;p>My first idea? &lt;a href="https://en.wikipedia.org/wiki/Transpile">Transpile&lt;/a> it to Javascript!&lt;/p></description></item><item><title>Pictogenesis: Wrapping Modes</title><link>https://blog.jverkamp.com/2020/12/01/pictogenesis-wrapping-modes/</link><pubDate>Tue, 01 Dec 2020 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2020/12/01/pictogenesis-wrapping-modes/</guid><description>&lt;p>Now that I&amp;rsquo;ve got &lt;a href="https://blog.jverkamp.com/2020/11/24/pictogenesis-register-machine/">register machines&lt;/a> working, one of the next ideas I had was to implement different wrapping modes. Currently, as it stands, &lt;code>X&lt;/code> and &lt;code>Y&lt;/code> are passed into the machine as floating point numbers from [0, 1] across the image and output is expected to be [0, 1] for each of &lt;code>R&lt;/code>, &lt;code>G&lt;/code>, and &lt;code>B&lt;/code>. Any values that end up outside of that range, we truncate down to that range. But some of our mathematical functions (multiplication, exponentiation, negation, etc) tend to generate numbers way out of this range. But they don&amp;rsquo;t have to!&lt;/p></description></item><item><title>Pictogenesis: Register Machine</title><link>https://blog.jverkamp.com/2020/11/24/pictogenesis-register-machine/</link><pubDate>Tue, 24 Nov 2020 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2020/11/24/pictogenesis-register-machine/</guid><description>&lt;p>Okay. First &lt;a href="https://blog.jverkamp.com/2020/11/23/pictogenesis-the-idea/">Pictogeneis&lt;/a> machine: a register based machine. Today we&amp;rsquo;re going to create a very small language with a small number of registers that can read from the outside world, write colors, and act as temporary variables.&lt;/p>
&lt;p>Something like this:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-asm" data-lang="asm">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">gt&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">?&lt;/span> &lt;span style="color:#66d9ef">t0&lt;/span> &lt;span style="color:#66d9ef">b&lt;/span> &lt;span style="color:#66d9ef">y&lt;/span> &lt;span style="color:#66d9ef">x&lt;/span> &lt;span style="color:#66d9ef">r&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">add&lt;/span> &lt;span style="color:#66d9ef">g&lt;/span> &lt;span style="color:#66d9ef">y&lt;/span> &lt;span style="color:#66d9ef">x&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">abs&lt;/span> &lt;span style="color:#66d9ef">b&lt;/span> &lt;span style="color:#66d9ef">x&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">inv&lt;/span> &lt;span style="color:#66d9ef">t0&lt;/span> &lt;span style="color:#66d9ef">g&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">add&lt;/span> &lt;span style="color:#66d9ef">r&lt;/span> &lt;span style="color:#66d9ef">g&lt;/span> &lt;span style="color:#66d9ef">x&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">sub&lt;/span> &lt;span style="color:#66d9ef">t0&lt;/span> &lt;span style="color:#66d9ef">b&lt;/span> &lt;span style="color:#66d9ef">r&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">mul&lt;/span> &lt;span style="color:#66d9ef">x&lt;/span> &lt;span style="color:#66d9ef">r&lt;/span> &lt;span style="color:#66d9ef">b&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">abs&lt;/span> &lt;span style="color:#66d9ef">y&lt;/span> &lt;span style="color:#66d9ef">x&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;figure>&lt;img src="https://blog.jverkamp.com/embeds/2020/pictogenesis-register-1.png"/>
&lt;/figure>
&lt;p>In each case, the first argument is the output and the rest are inputs. So:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">#&lt;/span> &lt;span style="color:#a6e22e">gt&lt;/span>&lt;span style="color:#f92672">?&lt;/span> &lt;span style="color:#a6e22e">t0&lt;/span> &lt;span style="color:#a6e22e">b&lt;/span> &lt;span style="color:#a6e22e">y&lt;/span> &lt;span style="color:#a6e22e">x&lt;/span> &lt;span style="color:#a6e22e">r&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">if&lt;/span> (&lt;span style="color:#a6e22e">b&lt;/span> &lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#a6e22e">y&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">t0&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">x&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>} &lt;span style="color:#66d9ef">else&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">t0&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">r&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">#&lt;/span> &lt;span style="color:#a6e22e">add&lt;/span> &lt;span style="color:#a6e22e">g&lt;/span> &lt;span style="color:#a6e22e">y&lt;/span> &lt;span style="color:#a6e22e">x&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">g&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">y&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#a6e22e">x&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">#&lt;/span> &lt;span style="color:#a6e22e">abs&lt;/span> &lt;span style="color:#a6e22e">b&lt;/span> &lt;span style="color:#a6e22e">x&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">b&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#f92672">|&lt;/span>&lt;span style="color:#a6e22e">x&lt;/span>&lt;span style="color:#f92672">|&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>...
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Where &lt;code>x&lt;/code> and &lt;code>y&lt;/code> are the input point x and y mapped to the range [0, 1]; &lt;code>r&lt;/code>, &lt;code>g&lt;/code>, &lt;code>b&lt;/code> are the output colors in the same range and &lt;code>t{n}&lt;/code> are temporary registers just used during the program.&lt;/p></description></item><item><title>Pictogenesis: The Idea</title><link>https://blog.jverkamp.com/2020/11/23/pictogenesis-the-idea/</link><pubDate>Mon, 23 Nov 2020 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2020/11/23/pictogenesis-the-idea/</guid><description>&lt;p>PICTOGENESIS REBORN!&lt;/p>
&lt;p>I don&amp;rsquo;t know if I ever actually posted it publically, but one of the ideas I&amp;rsquo;ve had percolating for the longest time is combining tiny &lt;a href="https://en.wikipedia.org/wiki/interpreters">interpreters&lt;/a> and &lt;a href="https://en.wikipedia.org/wiki/genetic%20algorithms">genetic algorithms&lt;/a> to make &lt;a href="https://en.wikipedia.org/wiki/generative%20art">generative art&lt;/a>.&lt;/p>
&lt;p>The basic idea is to generate programs (in various styles) that can take x,y coordinates and return colors. Then apply that to every pixel on an image to make generative art. Once we have, figure out a way to mutate/breed the programs so that we can apply a genetic algorithm to them and make awesome images! Sort of like &lt;a href="https://electricsheep.org/">Electric Sheep&lt;/a> (that brings back memories).&lt;/p>
&lt;p>The evolution point of view was actually a pretty tricky problem, since programs can have a number of different representations. I could compile them to bytecode and mutate that, but how do I make most code at least potentially meaningful?&lt;/p></description></item><item><title>Backtracking Worm Coral</title><link>https://blog.jverkamp.com/2020/11/20/backtracking-worm-coral/</link><pubDate>Fri, 20 Nov 2020 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2020/11/20/backtracking-worm-coral/</guid><description>&lt;p>Let&amp;rsquo;s take &lt;a href="https://blog.jverkamp.com/2020/11/19/worm-coral/">yesterday&amp;rsquo;s Worm Coral&lt;/a> and turn it up to 11!&lt;/p>
&lt;p>Now we have:&lt;/p>
&lt;ul>
&lt;li>Whenever a worm gets stuck, it will &amp;lsquo;backtrack&amp;rsquo;: it will instead expand from the previous position recursively&lt;/li>
&lt;/ul>
&lt;p>That means that the initial 10 worms should always be able to fill the entire world! Even if one closes off an area, that one can eventually fill it up:&lt;/p>
&lt;figure>&lt;img src="https://blog.jverkamp.com/embeds/2020/backtracking-worm-full.png"/>
&lt;/figure>
&lt;p>I like how occasionally you get one spindly bit (usually early in the run) that another goes through. It reminds me of &lt;a href="https://boardgamegeek.com/boardgame/2453/blokus">Blokus&lt;/a> It does take a while.&lt;/p>
&lt;p>In addition, I wanted to play a bit with simulationism:&lt;/p>
&lt;ul>
&lt;li>Worms can potentially &lt;code>changeColor&lt;/code> each frame&lt;/li>
&lt;li>Every &lt;code>framesPerGeneration&lt;/code> check if each worm dies &lt;code>deathChance&lt;/code> or spawns a child worm (&lt;code>spawnChance&lt;/code>)&lt;/li>
&lt;li>If a worm dies, it is removed from the simulation&lt;/li>
&lt;li>If a worm spawns, it creates a new child at it&amp;rsquo;s current location
&lt;ul>
&lt;li>If &lt;code>spawnIncludesHistory&lt;/code> is set, the child can backtrack into the parent&amp;rsquo;s history&lt;/li>
&lt;li>If &lt;code>spawnVariesColor&lt;/code> is set, the child will (potentially, it&amp;rsquo;s random) have a slightly different color&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>Let&amp;rsquo;s check it out!&lt;/p></description></item><item><title>Worm Coral</title><link>https://blog.jverkamp.com/2020/11/19/worm-coral/</link><pubDate>Thu, 19 Nov 2020 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2020/11/19/worm-coral/</guid><description>&lt;p>Today, I&amp;rsquo;m going to work on using &lt;a href="https://blog.jverkamp.com/2020/11/17/p5js-worms/">worms&lt;/a> to generate coral, similar to what I did way back when I was &lt;a href="https://blog.jverkamp.com/2015/01/01/generating-omnichromatic-images/">generating omnichromatic images&lt;/a>.&lt;/p>
&lt;figure>&lt;img src="https://blog.jverkamp.com/embeds/2020/worm-coral.png"/>
&lt;/figure>
&lt;p>In a nutshell:&lt;/p>
&lt;ul>
&lt;li>Spawn n worms&lt;/li>
&lt;li>On each tick:
&lt;ul>
&lt;li>Each worm tries to randomly move one direction&lt;/li>
&lt;li>If it cannot, increment that worm&amp;rsquo;s &lt;code>stuck&lt;/code> counter&lt;/li>
&lt;li>If it can, restart the &lt;code>stuck&lt;/code> counter&lt;/li>
&lt;li>If a worm is &lt;code>stuck&lt;/code> long enough, kill it off and spawn a new worm&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>Eventually, we&amp;rsquo;ll fill the entire space with colors that end up looking a bit like coral. I&amp;rsquo;ll probably extend this later, since there are a lot of cool tweaks you can do with this general idea.&lt;/p></description></item><item><title>p5js Boids</title><link>https://blog.jverkamp.com/2020/11/18/p5js-boids/</link><pubDate>Wed, 18 Nov 2020 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2020/11/18/p5js-boids/</guid><description>&lt;p>Okay, sketch 2: &lt;a href="https://en.wikipedia.org/wiki/Boids">Boids&lt;/a>!&lt;/p>
&lt;p>The basic idea is to create a bunch of particles (the Boids in this case) and apply to them each a series of simple, limited rules that rely neither on communcation between the Boids nor a global controller and see what behaviors you can generate. Specifically, can you replicate the flocking behavior found in birds, since birds can obviously fly together without hitting one another and also without some lead bird giving orders.&lt;/p>
&lt;p>Something like this:&lt;/p>
&lt;figure>&lt;img src="https://blog.jverkamp.com/embeds/2020/boids.png"/>
&lt;/figure>
&lt;p>For this case, there are three rules:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>seperation&lt;/strong> - Fly away from any Boids that are too close to you (to avoid collision)&lt;/li>
&lt;li>&lt;strong>alignment&lt;/strong> - Align yourself to fly in the same direction as any Boids in your field of vision&lt;/li>
&lt;li>&lt;strong>cohesion&lt;/strong> - Fly towards the center point of the Boids you can see&lt;/li>
&lt;/ul></description></item><item><title>p5js Worms</title><link>https://blog.jverkamp.com/2020/11/17/p5js-worms/</link><pubDate>Tue, 17 Nov 2020 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2020/11/17/p5js-worms/</guid><description>&lt;p>One thing that I&amp;rsquo;ve been hoping to get into a bit more is the idea of &lt;a href="https://en.wikipedia.org/wiki/Generative%20Art">Generative Art&lt;/a>. Essentially, use any of a wide variety of algorithms to generate art. To do that, and so that the art can be generated right in front of you in the browser, I&amp;rsquo;m going to use the &lt;a href="https://p5js.org/">p5js&lt;/a> library. It gives you a nice API of graphical primitives and takes a simple &lt;code>setup&lt;/code> and &lt;code>draw&lt;/code> function and does the rest.&lt;/p></description></item><item><title>Prevent JavaScript links by parsing URLs</title><link>https://blog.jverkamp.com/2019/05/02/prevent-javascript-links-by-parsing-urls/</link><pubDate>Thu, 02 May 2019 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2019/05/02/prevent-javascript-links-by-parsing-urls/</guid><description>&lt;p>If you have a website that allows users to submit URLs, one of the (many many) things people will try to do to break your site is to submit URLs that use the &lt;code>javascript:&lt;/code> protocol (rather than the more expected &lt;code>http:&lt;/code> or &lt;code>https:&lt;/code>). This is almost never something that you want, since it allows users to submit essentially arbitrary code that other users will run on click in the context of your domain (&lt;a href="https://en.wikipedia.org/wiki/same%20origin%20policy">same origin policy&lt;/a>).&lt;/p>
&lt;p>So how do you fix it?&lt;/p>
&lt;p>First thought would be to try to check the protocol:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#a6e22e">safe_url&lt;/span> &lt;span style="color:#f92672">=&lt;/span> (&lt;span style="color:#a6e22e">url&lt;/span>) =&amp;gt; &lt;span style="color:#f92672">!&lt;/span>&lt;span style="color:#a6e22e">url&lt;/span>.&lt;span style="color:#a6e22e">match&lt;/span>(&lt;span style="color:#e6db74">/^javascript:/&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>[Function&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">safe_url&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#a6e22e">safe_url&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;http://www.example.com&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#a6e22e">safe_url&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;javascript:alert(1)&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">false&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Listing and Downloading S3 Versions</title><link>https://blog.jverkamp.com/2019/01/04/listing-and-downloading-s3-versions/</link><pubDate>Fri, 04 Jan 2019 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2019/01/04/listing-and-downloading-s3-versions/</guid><description>&lt;p>Today I found the need to look through all old versions of a file in S3 that had versioning turned on. You can do it through the AWS Console, but I prefer command line tools. You can do it with &lt;a href="https://aws.amazon.com/cli/">awscli&lt;/a>, but the flags are long and I can never quite remember them. So let&amp;rsquo;s write up a quick script using &lt;a href="https://boto3.amazonaws.com/v1/documentation/api/latest/index.html">boto3&lt;/a> (and as a bonus, try out &lt;a href="https://click.palletsprojects.com/en/7.x/">click&lt;/a>)!&lt;/p></description></item><item><title>Simple LocalStorage Notepad</title><link>https://blog.jverkamp.com/2018/09/26/simple-localstorage-notepad/</link><pubDate>Wed, 26 Sep 2018 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2018/09/26/simple-localstorage-notepad/</guid><description>&lt;p>I have a large number of keyword bookmarks in whichever browser I happen to be using at the time that I&amp;rsquo;ve been building up over the years&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>. One of the ones I particular enjoy is &lt;code>text&lt;/code>: &lt;code>data:text/html, &amp;lt;html contenteditable&amp;gt;&lt;/code>. What that does is open a new tab where I can take notes, completely locally. It&amp;rsquo;s really handy&amp;hellip; but there&amp;rsquo;s one big problem: I often accidentally close the tab and lose whatever I had been typing. So I decided to take a few minutes to write up a simple extension of the idea that would save the data to &lt;a href="https://en.wikipedia.org/wiki/LocalStorage">LocalStorage&lt;/a>.&lt;/p></description></item><item><title>Inlining plaintext attachments in Gmail</title><link>https://blog.jverkamp.com/2016/01/02/inlining-plaintext-attachments-in-gmail/</link><pubDate>Sat, 02 Jan 2016 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2016/01/02/inlining-plaintext-attachments-in-gmail/</guid><description>&lt;p>When you send a text message to a Gmail email address (at least from an iPhone using AT&amp;amp;T), you get something like this:&lt;/p>
&lt;figure>&lt;img src="https://blog.jverkamp.com/embeds/2016/gpti-before.png"/>
&lt;/figure>
&lt;p>It&amp;rsquo;s vaguely annoying to have to click through every single time just to see what the message is, especially when various extensions (such as &lt;a href="https://github.com/gorhill/uMatrix">uMatrix&lt;/a>) break overlay rendering or when you have multiple attachments.&lt;/p>
&lt;p>Much better would be to just display the plaintext attachments inline:&lt;/p>
&lt;figure>&lt;img src="https://blog.jverkamp.com/embeds/2016/gpti-after.png"/>
&lt;/figure></description></item><item><title>Sandbox Battle!</title><link>https://blog.jverkamp.com/2014/08/24/sandbox-battle/</link><pubDate>Sun, 24 Aug 2014 18:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2014/08/24/sandbox-battle/</guid><description>&lt;figure>&lt;img src="https://blog.jverkamp.com/embeds/2014/title.png"/>
&lt;/figure></description></item><item><title>Ludum Dare 30: Demo mode</title><link>https://blog.jverkamp.com/2014/08/24/ludum-dare-30-demo-mode/</link><pubDate>Sun, 24 Aug 2014 12:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2014/08/24/ludum-dare-30-demo-mode/</guid><description>&lt;p>Quick update this morning: I managed to get a &amp;lsquo;demo mode&amp;rsquo; working. Now when you first start the game, the boxes will be whizzing around in the background giving you an idea of what you&amp;rsquo;re about to get yourself into!&lt;/p></description></item></channel></rss>