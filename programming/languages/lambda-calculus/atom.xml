<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Lambda Calculus on jverkamp.com</title>
    <link>https://blog.jverkamp.com/programming/languages/lambda-calculus/</link>
    <description>Recent content in Lambda Calculus on jverkamp.com</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language><atom:link href="https://blog.jverkamp.com/programming/languages/lambda-calculus/atom.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Functions as lists</title>
      <link>https://blog.jverkamp.com/2013/10/09/functions-as-lists/</link>
      <pubDate>Wed, 09 Oct 2013 14:00:15 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2013/10/09/functions-as-lists/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://programmingpraxis.com/2013/10/08/functional-style-linked-lists/&#34;&gt;Yesterday&amp;rsquo;s challenge&lt;/a&gt; from Programming Praxis challenges us to rebuild a data structure near and dear to any Lisper&amp;rsquo;s/Schemer&amp;rsquo;s/Racketer&amp;rsquo;s&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;/functional programmer&amp;rsquo;s heart: lists. The idea presented in &lt;a href=&#34;http://programmingpraxis.com/2013/10/08/functional-style-linked-lists/2/&#34;&gt;their sample solution&lt;/a&gt;Â uses two element vectors, directly mimicking the general internal structure of Scheme&amp;rsquo;s lists. How about we do something a bit stranger? ðŸ˜„&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
