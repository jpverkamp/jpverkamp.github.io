<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Scheme on jverkamp.com</title>
    <link>https://blog.jverkamp.com/programming/languages/scheme/</link>
    <description>Recent content in Scheme on jverkamp.com</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 29 Jan 2015 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://blog.jverkamp.com/programming/languages/scheme/atom.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>iOS Backups in Racket: Apps</title>
      <link>https://blog.jverkamp.com/2015/01/29/ios-backups-in-racket-apps/</link>
      <pubDate>Thu, 29 Jan 2015 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2015/01/29/ios-backups-in-racket-apps/</guid>
      <description>&lt;p&gt;So far we&amp;rsquo;ve read &lt;a href=&#34;https://blog.jverkamp.com/2015/01/22/ios-backups-in-racket-groundwork/&#34;&gt;backup files&lt;/a&gt;, parsed &lt;a href=&#34;https://blog.jverkamp.com/2015/01/23/ios-backups-in-racket-contacts/&#34;&gt;contacts&lt;/a&gt;, and parsed &lt;a href=&#34;https://blog.jverkamp.com/2015/01/27/ios-backups-in-racket-messages/&#34;&gt;messages&lt;/a&gt;. Today we&amp;rsquo;re going to dig a little deeper and start parsing apps specifically.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>iOS Backups in Racket: Messages</title>
      <link>https://blog.jverkamp.com/2015/01/27/ios-backups-in-racket-messages/</link>
      <pubDate>Tue, 27 Jan 2015 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2015/01/27/ios-backups-in-racket-messages/</guid>
      <description>&lt;p&gt;So far we&amp;rsquo;ve &lt;a href=&#34;https://blog.jverkamp.com/2015/01/22/ios-backups-in-racket-groundwork/&#34;&gt;laid the groundwork&lt;/a&gt;, loading local iOS backups and parsed out &lt;a href=&#34;https://blog.jverkamp.com/2015/01/23/ios-backups-in-racket-contacts/&#34;&gt;contacts&lt;/a&gt;. Today let&amp;rsquo;s take another step down the rabbit hole and figure out how messages are stored.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>iOS Backups in Racket: Contacts</title>
      <link>https://blog.jverkamp.com/2015/01/23/ios-backups-in-racket-contacts/</link>
      <pubDate>Fri, 23 Jan 2015 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2015/01/23/ios-backups-in-racket-contacts/</guid>
      <description>&lt;p&gt;After &lt;a href=&#34;https://blog.jverkamp.com/2015/01/22/ios-backups-in-racket-groundwork/&#34;&gt;yesterday&amp;rsquo;s post&lt;/a&gt; laying the groundwork for looking into &lt;a href=&#34;https://blog.jverkamp.com/2015/01/29/ios-backups-in-racket-apps/&#34;&gt;iOS Backups&lt;/a&gt;, today why don&amp;rsquo;t we actually start digging into one of the more interesting files: your list of contacts.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>iOS Backups in Racket: Groundwork</title>
      <link>https://blog.jverkamp.com/2015/01/22/ios-backups-in-racket-groundwork/</link>
      <pubDate>Thu, 22 Jan 2015 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2015/01/22/ios-backups-in-racket-groundwork/</guid>
      <description>&lt;p&gt;For the last little while, I&amp;rsquo;ve been spending my spare programming time working on a slightly larger project than I normally do: a &lt;a href=&#34;https://blog.jverkamp.com/2014/06/11/call-stack-bracket-matcher/&#34;&gt;Racket&lt;/a&gt; library for reading iOS backups.&lt;/p&gt;

&lt;p&gt;Basically, I want to take the mess that is an iOS backup (not particularly designed to be easy to read by other programs) and extract some information from it, backing it up in a more easily readable format.&lt;/p&gt;

&lt;p&gt;Specifically, I would like to be able to backup:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Contact information: Even thought they&amp;rsquo;re mostly from Facebook, it will be useful for the other parts&lt;/li&gt;
&lt;li&gt;Messages: These are taking up a large portion of my phone&amp;rsquo;s hard drive, mostly due to attachments. Back them up just in case&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/li&gt;
&lt;li&gt;Photos: I&amp;rsquo;m already backing these up, but it would be nice to have it in the same process&lt;/li&gt;
&lt;li&gt;Application data:&lt;/li&gt;
&lt;li&gt;List of applications over time&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.moves-app.com/&#34;&gt;Moves&lt;/a&gt;: GPS location&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.downcastapp.com/&#34;&gt;Downcast&lt;/a&gt;: List of current podcasts&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.sleepcycle.com/&#34;&gt;Sleep Cycle&lt;/a&gt;: Sleep data&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.boardgamescorer.com/&#34;&gt;Boardgame Scorer&lt;/a&gt;: High scores for board games&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>Let it snow!</title>
      <link>https://blog.jverkamp.com/2015/01/09/let-it-snow/</link>
      <pubDate>Fri, 09 Jan 2015 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2015/01/09/let-it-snow/</guid>
      <description>&lt;p&gt;♫ Oh the weather outside is frightful&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;&amp;hellip; ♫&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&#34;https://blog.jverkamp.com/embeds/2015/snowflake.gif&#34;/&gt; 
&lt;/figure&gt;</description>
    </item>
    
    <item>
      <title>Generating omnichromatic images</title>
      <link>https://blog.jverkamp.com/2015/01/01/generating-omnichromatic-images/</link>
      <pubDate>Thu, 01 Jan 2015 00:10:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2015/01/01/generating-omnichromatic-images/</guid>
      <description>&lt;p&gt;Inspired half by a &lt;a href=&#34;https://codegolf.stackexchange.com/questions/22144/images-with-all-colors&#34;&gt;post on the Code Golf StackExchange&lt;/a&gt; and half by the corresponding website &lt;a href=&#34;http://allrgb.com/&#34;&gt;allrgb.com&lt;/a&gt;, today&amp;rsquo;s post tasks us with making images like this:&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&#34;https://blog.jverkamp.com/embeds/2015/grow-minimum_gray-code_400x200.png&#34;/&gt; 
&lt;/figure&gt;


&lt;p&gt;So what&amp;rsquo;s so interesting about that picture?&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Palette Swapping</title>
      <link>https://blog.jverkamp.com/2014/12/23/palette-swapping/</link>
      <pubDate>Tue, 23 Dec 2014 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2014/12/23/palette-swapping/</guid>
      <description>&lt;p&gt;Today&amp;rsquo;s task comes from the &lt;a href=&#34;https://codegolf.stackexchange.com/&#34;&gt;Code Golf StackExchange&lt;/a&gt;. The idea behind &lt;a href=&#34;https://en.wikipedia.org/wiki/code%20golf&#34;&gt;code golf&lt;/a&gt; is to write a program with as few characters as possible, often rendering the code nigh on unreadable. Luckily, the same StackExchange also host popularity contests, one of which is the inspiration behind today&amp;rsquo;s post:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;You are given two true color images, the Source and the Palette. They do not necessarily have the same dimensions but it is guaranteed that their areas are the same, i.e. they have the same number of pixels.
Your task is to create an algorithm that makes the most accurate looking copy of the Source by only using the pixels in the Palette. Each pixel in the Palette must be used exactly once in a unique position in this copy. The copy must have the same dimensions as the Source.
&amp;ndash; &lt;a href=&#34;https://codegolf.stackexchange.com/questions/33172/american-gothic-in-the-palette-of-mona-lisa-rearrange-the-pixels&#34;&gt;American Gothic in the palette of Mona Lisa: Rearrange the pixels&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>A &#34;one&#34; line echo server using let in Racket</title>
      <link>https://blog.jverkamp.com/2014/11/13/a-one-line-echo-server-using-let-in-racket/</link>
      <pubDate>Thu, 13 Nov 2014 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2014/11/13/a-one-line-echo-server-using-let-in-racket/</guid>
      <description>&lt;p&gt;A recent post on Reddit caught my attention: &lt;a href=&#34;https://www.reddit.com/r/Python/comments/2m6d4z/a_one_line_echo_server_using_let_in_python/&#34;&gt;A “One” Line Echo Server Using “let” in Python&lt;/a&gt; (&lt;a href=&#34;http://sigusr2.net/one-line-echo-server-using-let-python.html&#34;&gt;original article&lt;/a&gt;). The basic idea is that you can use Python&amp;rsquo;s &lt;code&gt;lambda&lt;/code&gt; with default arguments as a &lt;code&gt;let&lt;/code&gt;, which in turn allows you to write a simple &lt;a href=&#34;https://en.wikipedia.org/wiki/echo%20server&#34;&gt;echo server&lt;/a&gt; in &lt;del&gt;one line&lt;/del&gt; a nicely functional style.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Clockception</title>
      <link>https://blog.jverkamp.com/2014/11/04/clockception/</link>
      <pubDate>Tue, 04 Nov 2014 09:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2014/11/04/clockception/</guid>
      <description>&lt;p&gt;Let&amp;rsquo;s talk about clocks.&lt;/p&gt;

&lt;p&gt;We can draw traditional analog clocks&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;:&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&#34;https://blog.jverkamp.com/embeds/2014/analog.png&#34;/&gt; 
&lt;/figure&gt;


&lt;p&gt;We can draw nice digital clocks:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;┌─┐  │ │ ─┐ ┌─┐
│ │└─┤    │ │ │
└─┘  │ │ ─┴─└─┘
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Or we can go downright mad and make clocks out of clocks:&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&#34;https://blog.jverkamp.com/embeds/2014/clockception.png&#34;/&gt; 
&lt;/figure&gt;


&lt;p&gt;Even animated!&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&#34;https://blog.jverkamp.com/embeds/2014/animated.gif&#34;/&gt; 
&lt;/figure&gt;</description>
    </item>
    
    <item>
      <title>Tile Puzzle</title>
      <link>https://blog.jverkamp.com/2014/10/28/tile-puzzle/</link>
      <pubDate>Tue, 28 Oct 2014 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2014/10/28/tile-puzzle/</guid>
      <description>&lt;p&gt;It&amp;rsquo;s been a while&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;, but I&amp;rsquo;m back. Today&amp;rsquo;s post is inspired by a post from /r/dailyprogrammer almost a month ago now: &lt;a href=&#34;https://www.reddit.com/r/dailyprogrammer/comments/2ip1gj/10082014_challenge_183_intermediate_edge_matching/&#34;&gt;Challenge #183 [Intermediate] Edge Matching Tile Puzzle&lt;/a&gt;. Basically, we&amp;rsquo;re going to solve puzzles like this:&lt;/p&gt;

&lt;p&gt;&lt;figure&gt;
    &lt;img src=&#34;https://blog.jverkamp.com/embeds/2014/unsolved-3x3.png&#34;/&gt; 
&lt;/figure&gt;

&lt;figure&gt;
    &lt;img src=&#34;https://blog.jverkamp.com/embeds/2014/solved-3x3.png&#34;/&gt; 
&lt;/figure&gt;
&lt;/p&gt;

&lt;p&gt;If you look carefully, the tiles are the same between the two, although they might be rotated.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Regular Expression Fractals</title>
      <link>https://blog.jverkamp.com/2014/10/05/regular-expression-fractals/</link>
      <pubDate>Sun, 05 Oct 2014 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2014/10/05/regular-expression-fractals/</guid>
      <description>&lt;p&gt;Oops, turns out I haven&amp;rsquo;t had a post in a good long while. Before it gets even longer, I figure that I should take one off my backlog and just write it up, even if it is a little on the shorter side.&lt;/p&gt;

&lt;p&gt;Today&amp;rsquo;s post was inspired by this post on /r/dailyprogrammer a month ago today:
&lt;a href=&#34;https://www.reddit.com/r/dailyprogrammer/comments/2fkh8u/9052014_challenge_178_hard_regular_expression/&#34;&gt;Challenge #178 [Hard] Regular Expression Fractals&lt;/a&gt;. The basic idea is that you are going to take a rectangular region and divide it into four quadrants, again and again, recording the path as you go (images from that post):&lt;/p&gt;

&lt;p&gt;&lt;figure&gt;
    &lt;img src=&#34;https://blog.jverkamp.com/embeds/2014/step-1.png&#34;/&gt; 
&lt;/figure&gt;

&lt;figure&gt;
    &lt;img src=&#34;https://blog.jverkamp.com/embeds/2014/step-2.png&#34;/&gt; 
&lt;/figure&gt;

&lt;figure&gt;
    &lt;img src=&#34;https://blog.jverkamp.com/embeds/2014/step-3.png&#34;/&gt; 
&lt;/figure&gt;
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Invader Fractals</title>
      <link>https://blog.jverkamp.com/2014/09/17/invader-fractals/</link>
      <pubDate>Wed, 17 Sep 2014 09:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2014/09/17/invader-fractals/</guid>
      <description>&lt;p&gt;First we had &lt;a href=&#34;https://blog.jverkamp.com/2014/09/14/procedural-invaders/&#34;&gt;Procedural Invaders&lt;/a&gt;. Then we used them fill up space with &lt;a href=&#34;https://blog.jverkamp.com/2014/09/16/fractal-invaders/&#34;&gt;Fractal Invaders&lt;/a&gt;. But we&amp;rsquo;re not &lt;em&gt;quite&lt;/em&gt; done yet! This time, let&amp;rsquo;s mix things up a bit and make Invader Fractals.&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&#34;https://blog.jverkamp.com/embeds/2014/invader-fractal-3.png&#34;/&gt; 
&lt;/figure&gt;</description>
    </item>
    
    <item>
      <title>Fractal Invaders</title>
      <link>https://blog.jverkamp.com/2014/09/16/fractal-invaders/</link>
      <pubDate>Tue, 16 Sep 2014 09:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2014/09/16/fractal-invaders/</guid>
      <description>&lt;p&gt;Today&amp;rsquo;s post is a follow up to Sunday&amp;rsquo;s post &lt;a href=&#34;https://blog.jverkamp.com/2014/09/14/procedural-invaders/&#34;&gt;Procedural Invaders&lt;/a&gt;. This time around, we&amp;rsquo;re going to work through two different space filling algorithms in order to eventually generate something like this:&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&#34;https://blog.jverkamp.com/embeds/2014/fractal-invaders-100x100.png&#34;/&gt; 
&lt;/figure&gt;</description>
    </item>
    
    <item>
      <title>Look and Say</title>
      <link>https://blog.jverkamp.com/2014/09/15/look-and-say/</link>
      <pubDate>Mon, 15 Sep 2014 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2014/09/15/look-and-say/</guid>
      <description>&lt;p&gt;Random quick post today&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;. Basically, we want to write code to generate what&amp;rsquo;s known as &lt;a href=&#34;https://en.wikipedia.org/wiki/Look%20and%20Say%20sequence&#34;&gt;Look and Say sequence&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;To generate a member of the sequence from the previous member, read off the digits of the previous member, counting the number of digits in groups of the same digit. For example:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;1 is read off as &amp;ldquo;one 1&amp;rdquo; or 11.&lt;/li&gt;
&lt;li&gt;11 is read off as &amp;ldquo;two 1s&amp;rdquo; or 21.&lt;/li&gt;
&lt;li&gt;21 is read off as &amp;ldquo;one 2, then one 1&amp;rdquo; or 1211.&lt;/li&gt;
&lt;li&gt;1211 is read off as &amp;ldquo;one 1, then one 2, then two 1s&amp;rdquo; or 111221.&lt;/li&gt;
&lt;li&gt;111221 is read off as &amp;ldquo;three 1s, then two 2s, then one 1&amp;rdquo; or 312211.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>Procedural Invaders</title>
      <link>https://blog.jverkamp.com/2014/09/14/procedural-invaders/</link>
      <pubDate>Sun, 14 Sep 2014 09:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2014/09/14/procedural-invaders/</guid>
      <description>&lt;p&gt;Today&amp;rsquo;s post comes from a long line of &amp;lsquo;inspired by posts&amp;rsquo; all pretty much leading back (so far as I can tell) to this post by j.tarbell: &lt;a href=&#34;http://www.complexification.net/gallery/machines/invaderfractal/&#34;&gt;invader.procedural&lt;/a&gt; from 2003.&lt;/p&gt;

&lt;p&gt;The basic idea is that we want to generate &amp;lsquo;invaders&amp;rsquo; in the style of &lt;a href=&#34;https://en.wikipedia.org/wiki/space%20invaders&#34;&gt;space invaders&lt;/a&gt;. Except we don&amp;rsquo;t want 10 or 20, we want tens of thousands. So how do we do it? Well, take a look at this:&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&#34;https://blog.jverkamp.com/embeds/2014/procedural-invader-big.png&#34;/&gt; 
&lt;/figure&gt;</description>
    </item>
    
    <item>
      <title>Chess Puzzles: Knight&#39;s Tour</title>
      <link>https://blog.jverkamp.com/2014/09/04/chess-puzzles-knights-tour/</link>
      <pubDate>Thu, 04 Sep 2014 20:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2014/09/04/chess-puzzles-knights-tour/</guid>
      <description>&lt;p&gt;Onwards and upwards! For today&amp;rsquo;s chess puzzle, let&amp;rsquo;s take a first crack at the &lt;a href=&#34;https://en.wikipedia.org/wiki/Knight%27s%20Tour&#34;&gt;Knight&amp;#39;s Tour&lt;/a&gt;&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&#34;https://blog.jverkamp.com/embeds/2014/tour-5-solution.gif&#34;/&gt; 
&lt;/figure&gt;</description>
    </item>
    
    <item>
      <title>Chess Puzzles: N Queens</title>
      <link>https://blog.jverkamp.com/2014/09/03/chess-puzzles-n-queens/</link>
      <pubDate>Wed, 03 Sep 2014 20:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2014/09/03/chess-puzzles-n-queens/</guid>
      <description>&lt;p&gt;After two weeks, it seems only right that we actually get around to a real chess puzzle. First on the list: &lt;a href=&#34;https://en.wikipedia.org/wiki/the%20eight%20queens%20puzzle&#34;&gt;Eight queens puzzle&lt;/a&gt;.&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&#34;https://blog.jverkamp.com/embeds/2014/8-queens-solution.png&#34;/&gt; 
&lt;/figure&gt;


&lt;p&gt;Specifically, how do you place n queens on an n by n chess board such that no pair of queens can attack one another?&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Chess Puzzles 2: Board?</title>
      <link>https://blog.jverkamp.com/2014/08/28/chess-puzzles-2-board/</link>
      <pubDate>Thu, 28 Aug 2014 20:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2014/08/28/chess-puzzles-2-board/</guid>
      <description>&lt;p&gt;Now that we&amp;rsquo;ve got &lt;a href=&#34;https://blog.jverkamp.com/2013/05/21/ludum-dare-26-vtanks-results/&#34;&gt;Ludum Dare&lt;/a&gt; out of the way, back to chess! &lt;a href=&#34;https://blog.jverkamp.com/2014/08/21/chess-puzzles-1-get-moving/&#34;&gt;Last time&lt;/a&gt;, we defined all of the pieces, which is all well and good, but what we really need is a board. More specifically, we want something that can:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Represent an 8x8 chess board, storing the location of pieces (including the owner of each)&lt;/li&gt;
&lt;li&gt;Add logic for collisions, so that when moving a piece, you cannot move through others or capture allies&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/li&gt;
&lt;li&gt;Add rendering code to display the current chess board (must be flexible enough to handle arbitrary glyphs for &lt;a href=&#34;https://en.wikipedia.org/wiki/fairy%20chess&#34;&gt;fairy chess&lt;/a&gt; pieces)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I think that&amp;rsquo;s about enough for the moment. Let&amp;rsquo;s do it!&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Chess Puzzles 1: Get moving!</title>
      <link>https://blog.jverkamp.com/2014/08/21/chess-puzzles-1-get-moving/</link>
      <pubDate>Thu, 21 Aug 2014 20:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2014/08/21/chess-puzzles-1-get-moving/</guid>
      <description>&lt;p&gt;Here&amp;rsquo;s something I haven&amp;rsquo;t done much&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;: chess puzzles! I&amp;rsquo;m still not sure entirely what I think about the game in general. There is certainly quite a lot of strategy, which I like, but to really get good at chess, there&amp;rsquo;s also some amount of memorizing openings and closings. That&amp;rsquo;s something I&amp;rsquo;m a little less thrilled with.&lt;/p&gt;

&lt;p&gt;Still, it&amp;rsquo;s the perfect sort of came to work out programming exercises with. It&amp;rsquo;s a game of &lt;a href=&#34;https://en.wikipedia.org/wiki/perfect%20information&#34;&gt;perfect information&lt;/a&gt;, so you don&amp;rsquo;t have to deal with what a player knows and doesn&amp;rsquo;t. The pieces have well defined, regular moves&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34;&gt;2&lt;/a&gt;&lt;/sup&gt; There&amp;rsquo;s a fairly intense branching factor, but not insurmountable&amp;ndash;&lt;a href=&#34;https://en.wikipedia.org/wiki/Deep%20Blue&#34;&gt;Deep Blue (chess computer)&lt;/a&gt; proved that.&lt;/p&gt;

&lt;p&gt;Anyways, enough chatter. Let&amp;rsquo;s play some chess!&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Minimal palindromic base</title>
      <link>https://blog.jverkamp.com/2014/08/13/minimal-palindromic-base/</link>
      <pubDate>Wed, 13 Aug 2014 17:00:55 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2014/08/13/minimal-palindromic-base/</guid>
      <description>&lt;p&gt;What&amp;rsquo;s this? Two posts in one day? Well, &lt;a href=&#34;https://blog.jverkamp.com/2014/08/08/onwards-and-upwards/&#34;&gt;writing a static blog generator&lt;/a&gt; can do that. 😄&lt;/p&gt;

&lt;p&gt;Another easily phrased challenge:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;We have a simple little problem today: Given an integer n &amp;gt; 2, find the minimum b &amp;gt; 1 for which n base b is a palindrome.&lt;/p&gt;

&lt;p&gt;&amp;ndash; &lt;a href=&#34;http://programmingpraxis.com/2014/08/05/minimal-palindromic-base/&#34;&gt;Minimal Palindromic Base&lt;/a&gt; via Programming Praxis&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>Number words</title>
      <link>https://blog.jverkamp.com/2014/08/13/number-words/</link>
      <pubDate>Wed, 13 Aug 2014 14:00:55 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2014/08/13/number-words/</guid>
      <description>&lt;p&gt;Today&amp;rsquo;s five minute post brought to you via &lt;a href=&#34;http://programmingpraxis.com/2014/07/25/number-words/&#34;&gt;Programming Praxis&lt;/a&gt; / &lt;a href=&#34;http://www.careercup.com/question?id=5120347909128192&#34;&gt;Career Cup&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Given a positive integer, return all the ways that the integer can be represented by letters using the mapping 1 -&amp;gt; A, 2 -&amp;gt; B, …, 26 -&amp;gt; Z. For instance, the number 1234 can be represented by the words ABCD, AWD and LCD.&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>Langton&#39;s ant</title>
      <link>https://blog.jverkamp.com/2014/08/07/langtons-ant/</link>
      <pubDate>Thu, 07 Aug 2014 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2014/08/07/langtons-ant/</guid>
      <description>&lt;p&gt;Here&amp;rsquo;s another post from /r/DailyProgrammer: &lt;a href=&#34;http://www.reddit.com/r/dailyprogrammer/comments/2c4ka3/7302014_challenge_173_intermediate_advanced/&#34;&gt;Advanced Langton&amp;rsquo;s Ant&lt;/a&gt;. I&amp;rsquo;m a bit behind the times (see tomorrow&amp;rsquo;s post), but it&amp;rsquo;s still an interesting enough exercise, so let&amp;rsquo;s go for it!&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&#34;https://blog.jverkamp.com/embeds/2014/LR.gif&#34;/&gt; 
&lt;/figure&gt;</description>
    </item>
    
    <item>
      <title>Cracker Barrel Peg Game, Part 3</title>
      <link>https://blog.jverkamp.com/2014/07/10/cracker-barrel-peg-game-part-3/</link>
      <pubDate>Thu, 10 Jul 2014 09:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2014/07/10/cracker-barrel-peg-game-part-3/</guid>
      <description>&lt;p&gt;If you were paying attention when I posted part 2 to GitHub (&lt;a href=&#34;https://github.com/jpverkamp/small-projects/blob/master/blog/pegs.rkt&#34;&gt;pegs.rkt&lt;/a&gt;), you might have noticed a function I hadn&amp;rsquo;t talked about: &lt;code&gt;play&lt;/code&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Cracker Barrel Peg Game, Part 2</title>
      <link>https://blog.jverkamp.com/2014/07/09/cracker-barrel-peg-game-part-2/</link>
      <pubDate>Wed, 09 Jul 2014 09:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2014/07/09/cracker-barrel-peg-game-part-2/</guid>
      <description>&lt;p&gt;Hey, remember that post a few days ago about the &lt;a href=&#34;https://blog.jverkamp.com/2014/07/10/cracker-barrel-peg-game-part-3/&#34;&gt;Cracker Barrel peg game&lt;/a&gt;? Right at the end, I mentioned that there would be a part two, all about how to bend the puzzle at least a bit to your advantage. Basically, rather than finding the first solution to the peg game, we&amp;rsquo;re going to find &lt;em&gt;all&lt;/em&gt; of them. From there, we can determine which moves are easier to win from, which are harder, and which are downright impossible. Let&amp;rsquo;s do it!&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Cracker Barrel Peg Game</title>
      <link>https://blog.jverkamp.com/2014/07/05/cracker-barrel-peg-game/</link>
      <pubDate>Sat, 05 Jul 2014 09:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2014/07/05/cracker-barrel-peg-game/</guid>
      <description>&lt;p&gt;Ever been to &lt;a href=&#34;http://www.crackerbarrel.com/&#34;&gt;Cracker Barrel&lt;/a&gt;? Remember that &lt;a href=&#34;http://shop.crackerbarrel.com/Peg-Game/dp/B0050PMMQA&#34;&gt;peg game&lt;/a&gt;? It seems that rather a few people are interested in how to solve it: &lt;a href=&#34;https://www.google.com/?q=cracker+barrel+peg+game&#34;&gt;Google&lt;/a&gt;. Let&amp;rsquo;s do that.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Factor trees</title>
      <link>https://blog.jverkamp.com/2014/06/17/factor-trees/</link>
      <pubDate>Tue, 17 Jun 2014 14:00:59 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2014/06/17/factor-trees/</guid>
      <description>&lt;p&gt;Another five minute challenge&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;, this time from &lt;a href=&#34;http://www.reddit.com/r/dailyprogrammer/comments/284uhh/6142014_challenge_166b_intermediate_prime_factor/&#34;&gt;/r/dailyprogrammer&lt;/a&gt;: given any positive integer, create and render a factor tree.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Call stack bracket matcher</title>
      <link>https://blog.jverkamp.com/2014/06/11/call-stack-bracket-matcher/</link>
      <pubDate>Wed, 11 Jun 2014 14:00:55 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2014/06/11/call-stack-bracket-matcher/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://programmingpraxis.com/2014/06/10/balanced-delimiters-2/&#34;&gt;Five minute post&lt;/a&gt; from Programming Praxis:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Write a function to return true/false after looking at a string. Examples of strings that pass:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;{}, [], (), a(b)c, abc[d], a(b)c{d[e]}&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Examples of strings that don’t pass:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;{], (], a(b]c, abc[d}, a(b)c{d[e}]&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>What the (be)funge‽</title>
      <link>https://blog.jverkamp.com/2014/06/10/what-the-befunge/</link>
      <pubDate>Tue, 10 Jun 2014 14:00:29 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2014/06/10/what-the-befunge/</guid>
      <description>&lt;p&gt;Here&amp;rsquo;s a fun little bit of code for you:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;55&lt;/span&gt;*4*v    _   v
v   &amp;lt;&amp;gt;:1-:^
    |:&amp;lt;$      &amp;lt;    ,*48 &amp;lt;
    @&amp;gt;0&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;zzif&amp;#34;&lt;/span&gt;&amp;gt;:#,_$      v
&amp;gt;:3%!|    &amp;gt;0&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;zzub&amp;#34;&lt;/span&gt;&amp;gt;:#,_$^
     &amp;gt;:5%!|
v &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;buzz&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&amp;lt;&amp;gt;:.           ^
         |!%5:           &amp;lt;
&amp;gt;:#,_   $&amp;gt;              ^&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Gibberish you say? No! &lt;a href=&#34;https://en.wikipedia.org/wiki/Befunge&#34;&gt;Befuge&lt;/a&gt;!&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Braille unicode pixelation</title>
      <link>https://blog.jverkamp.com/2014/05/30/braille-unicode-pixelation/</link>
      <pubDate>Fri, 30 May 2014 14:00:11 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2014/05/30/braille-unicode-pixelation/</guid>
      <description>&lt;p&gt;What would you do if you were on a machine that had no higher level graphics, but you still wanted to display images?&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Quadtree image compression</title>
      <link>https://blog.jverkamp.com/2014/05/28/quadtree-image-compression/</link>
      <pubDate>Wed, 28 May 2014 14:00:28 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2014/05/28/quadtree-image-compression/</guid>
      <description>&lt;p&gt;About two weeks ago, I came across a post via &lt;a href=&#34;http://www.reddit.com/r/programming/&#34;&gt;/r/programming&lt;/a&gt;: &lt;a href=&#34;http://www.reddit.com/r/programming/comments/25ptrk/quadtree_art/&#34;&gt;Quadtree Art&lt;/a&gt;&lt;sup&gt;&lt;a href=&#34;https://github.com/fogleman/Quads&#34;&gt;(src)&lt;/a&gt;&lt;/sup&gt;. In a sentence, the goal is to recursively divide an image into a quadtree, at each step expanding the current node with the largest internal variance.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Amicable chains</title>
      <link>https://blog.jverkamp.com/2014/05/23/amicable-chains/</link>
      <pubDate>Fri, 23 May 2014 14:00:37 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2014/05/23/amicable-chains/</guid>
      <description>&lt;p&gt;Mathematicians are an odd bunch. Names for just about everyhing. There are &lt;a href=&#34;https://en.wikipedia.org/wiki/Amicable%20number&#34;&gt;amicable numbers&lt;/a&gt; and &lt;a href=&#34;https://en.wikipedia.org/wiki/perfect%20number&#34;&gt;perfect number&lt;/a&gt;, &lt;a href=&#34;https://en.wikipedia.org/wiki/sociable%20number&#34;&gt;sociable number&lt;/a&gt; and &lt;a href=&#34;https://en.wikipedia.org/wiki/Betrothed%20number&#34;&gt;betrothed numbers&lt;/a&gt;. There are &lt;a href=&#34;https://en.wikipedia.org/wiki/sublime%20number&#34;&gt;sublime number&lt;/a&gt;, &lt;a href=&#34;https://en.wikipedia.org/wiki/frugal%20number&#34;&gt;frugal number&lt;/a&gt;, and &lt;a href=&#34;https://en.wikipedia.org/wiki/quasiperfect%20number&#34;&gt;quasiperfect number&lt;/a&gt;. Heck, there are &lt;a href=&#34;https://en.wikipedia.org/wiki/powerful%20number&#34;&gt;powerful number&lt;/a&gt;, &lt;a href=&#34;https://en.wikipedia.org/wiki/smooth%20number&#34;&gt;smooth number&lt;/a&gt;, and even &lt;a href=&#34;https://en.wikipedia.org/wiki/Sphenic%20number&#34;&gt;sphenic numbers&lt;/a&gt;. Rather a lot to deal with all told&amp;hellip; So let&amp;rsquo;s just focus on two of them: &lt;a href=&#34;https://en.wikipedia.org/wiki/Perfect%20number&#34;&gt;perfect numbers&lt;/a&gt; and &lt;a href=&#34;https://en.wikipedia.org/wiki/Amicable%20number&#34;&gt;amicable numbers&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Phone networks</title>
      <link>https://blog.jverkamp.com/2014/05/21/phone-networks/</link>
      <pubDate>Wed, 21 May 2014 14:00:47 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2014/05/21/phone-networks/</guid>
      <description>&lt;p&gt;Another day, &lt;a href=&#34;http://www.reddit.com/r/dailyprogrammer/comments/25576s/592014_challenge_161_hard_phone_network/&#34;&gt;another challenge from /r/dailyprogrammer&lt;/a&gt;. It&amp;rsquo;s almost two weeks old now, but I&amp;rsquo;ve just now had a chance to get around it.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Your company has built its own telephone network. This allows all your remote locations to talk to each other. It is your job to implement the program to establish calls between locations.&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>Novel compression</title>
      <link>https://blog.jverkamp.com/2014/05/19/novel-compression/</link>
      <pubDate>Mon, 19 May 2014 14:00:56 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2014/05/19/novel-compression/</guid>
      <description>&lt;p&gt;Last week on /r/dailyprogrammer, there was a neat trio of posts all about a new compression algorithm:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.reddit.com/r/dailyprogrammer/comments/25clki/5122014_challenge_162_easy_novel_compression_pt_1/&#34;&gt;Novel Compression, pt. 1: Unpacking the Data&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.reddit.com/r/dailyprogrammer/comments/25hlo9/5142014_challenge_162_intermediate_novel/&#34;&gt;Novel Compression, pt. 2: Compressing the Data&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.reddit.com/r/dailyprogrammer/comments/25o2bd/5162014_challenge_162_hard_novel_compression_pt_3/&#34;&gt;Novel Compression, pt. 3: Putting it all together&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;More specifically, we&amp;rsquo;re going to represent compressed text with the following rules:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;If the chunk is just a number (eg. 37), word number 37 from the dictionary (zero-indexed, so 0 is the 1st word) is printed lower-case.&lt;/li&gt;
&lt;li&gt;If the chunk is a number followed by a caret (eg. 37^), then word 37 from the dictionary will be printed lower-case, with the first letter capitalised.&lt;/li&gt;
&lt;li&gt;If the chunk is a number followed by an exclamation point (eg. 37!), then word 37 from the dictionary will be printed upper-case.&lt;/li&gt;
&lt;li&gt;If it&amp;rsquo;s a hyphen (-), then instead of putting a space in-between the previous and next words, put a hyphen instead.&lt;/li&gt;
&lt;li&gt;If it&amp;rsquo;s any of the following symbols: . , ? ! ; : (&lt;strong&gt;edit:&lt;/strong&gt; also &amp;lsquo; and &amp;ldquo;), then put that symbol at the end of the previous outputted word.&lt;/li&gt;
&lt;li&gt;If it&amp;rsquo;s a letter R (upper or lower), print a new line.&lt;/li&gt;
&lt;li&gt;If it&amp;rsquo;s a letter E (upper or lower), the end of input has been reached.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;edit:&lt;/strong&gt; any other block of text, represent as a literal &amp;lsquo;word&amp;rsquo; in the dictionary&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Got it? Let&amp;rsquo;s go!&lt;/p&gt;

&lt;p&gt;(If you&amp;rsquo;d like to follow along: &lt;a href=&#34;https://github.com/jpverkamp/small-projects/blob/master/blog/novel-compression.rkt&#34;&gt;full source&lt;/a&gt;)&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Trigonometric Triangle Trouble</title>
      <link>https://blog.jverkamp.com/2014/05/02/trigonometric-triangle-trouble/</link>
      <pubDate>Fri, 02 May 2014 14:00:26 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2014/05/02/trigonometric-triangle-trouble/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://www.reddit.com/r/dailyprogrammer/comments/24hr25/522014_challenge_160_hard_trigonometric_triangle/&#34;&gt;Yesterday&amp;rsquo;s post&lt;/a&gt; at &lt;a href=&#34;http://www.reddit.com/r/dailyprogrammer/&#34;&gt;/r/dailyprogrammer&lt;/a&gt; managed to pique my interest&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;A triangle on a flat plane is described by its angles and side lengths, and you don&amp;rsquo;t need all of the angles and side lengths to work out everything about the triangle. (This is the same as last time.) However, this time, the triangle will not necessarily have a right angle. This is where more trigonometry comes in. Break out your trig again, people.&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>Gorellian sorting</title>
      <link>https://blog.jverkamp.com/2014/04/01/gorellian-sorting/</link>
      <pubDate>Tue, 01 Apr 2014 14:00:09 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2014/04/01/gorellian-sorting/</guid>
      <description>&lt;p&gt;It&amp;rsquo;s been a while, so I figured I should get in a quick coding post. From /r/dailyprogrammer, we have &lt;a href=&#34;http://www.reddit.com/r/dailyprogrammer/comments/20sjif/4192014_challenge_154_intermediate_gorellian/&#34;&gt;this challenge&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The Gorellians, at the far end of our galaxy, have discovered various samples of English text from our electronic transmissions, but they did not find the order of our alphabet. Being a very organized and orderly species, they want to have a way of ordering words, even in the strange symbols of English. Hence they must determine their own order.&lt;/p&gt;

&lt;p&gt;For instance, if they agree on the alphabetical order:
UVWXYZNOPQRSTHIJKLMABCDEFG&lt;/p&gt;

&lt;p&gt;Then the following words would be in sorted order based on the above alphabet order:
WHATEVER
ZONE
HOW
HOWEVER
HILL
ANY
ANTLER
COW&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>Caesar cipher</title>
      <link>https://blog.jverkamp.com/2014/03/12/caesar-cipher/</link>
      <pubDate>Wed, 12 Mar 2014 14:00:10 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2014/03/12/caesar-cipher/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://programmingpraxis.com/2014/03/11/caesar-cipher/&#34;&gt;Here&amp;rsquo;s&lt;/a&gt; a 5 minute&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; coding challenge from Programming Praxis:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;A &lt;a href=&#34;https://en.wikipedia.org/wiki/Caesar%20cipher&#34;&gt;caeser cipher&lt;/a&gt;, named after Julius Caesar, who either invented the cipher or was an early user of it, is a simple substitution cipher in which letters are substituted at a fixed distance along the alphabet, which cycles; children’s magic decoder rings implement a caesar cipher. Non-alphabetic characters are passed unchanged. For instance, the plaintext PROGRAMMINGPRAXIS is rendered as the ciphertext SURJUDPPLQJSUDALV with a shift of 3 positions.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;figure&gt;
    &lt;img src=&#34;https://blog.jverkamp.com/embeds/2014/caesar-shift.png&#34;/&gt; 
&lt;/figure&gt;

&amp;ndash; Source: &lt;a href=&#34;https://en.wikipedia.org/wiki/File:Caesar%20cipher%20left%20shift%20of%203.svg&#34;&gt;Wikipedia&lt;/a&gt;, public domain&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Brownian trees</title>
      <link>https://blog.jverkamp.com/2014/03/11/brownian-trees/</link>
      <pubDate>Tue, 11 Mar 2014 14:00:06 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2014/03/11/brownian-trees/</guid>
      <description>&lt;p&gt;Pretty pretty picture time&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;:&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&#34;https://blog.jverkamp.com/embeds/2014/brownian-tree.png&#34;/&gt; 
&lt;/figure&gt;</description>
    </item>
    
    <item>
      <title>Dis/re-emvowelification</title>
      <link>https://blog.jverkamp.com/2014/02/27/dis/re-emvowelification/</link>
      <pubDate>Thu, 27 Feb 2014 14:00:21 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2014/02/27/dis/re-emvowelification/</guid>
      <description>&lt;p&gt;So far this week we&amp;rsquo;ve had a pair of related posts at the DailyProgrammer subreddit&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.reddit.com/r/dailyprogrammer/comments/1ystvb/022414_challenge_149_easy_disemvoweler/&#34;&gt;[02/24/14] Challenge #149 [Easy] Disemvoweler&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.reddit.com/r/dailyprogrammer/comments/1yzlde/022614_challenge_150_intermediate_reemvoweler_1/&#34;&gt;[02/26/14] Challenge #150 [Intermediate] Re-emvoweler 1&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Basically, if you&amp;rsquo;re given a string with vowels, take them out. If you&amp;rsquo;re given one without vowels, put them back in. One of the two is certainly easier than the other&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;. :)&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Crossing hands</title>
      <link>https://blog.jverkamp.com/2014/02/27/crossing-hands/</link>
      <pubDate>Thu, 27 Feb 2014 04:55:39 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2014/02/27/crossing-hands/</guid>
      <description>&lt;p&gt;Thirty second programming problem &lt;a href=&#34;http://programmingpraxis.com/2014/02/25/crossing-hands/&#34;&gt;from Programming Praxis&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Your task is to write a progam that determines how many times the hands cross in one twelve-hour period, and compute a list of those times.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Ready?&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://upload.wikimedia.org/wikipedia/commons/thumb/b/b7/BahnhofsuhrZuerich_RZ.jpg/220px-BahnhofsuhrZuerich_RZ.jpg&#34; /&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Exploring parallelism in Racket with SHA-512 mining</title>
      <link>https://blog.jverkamp.com/2014/02/16/exploring-parallelism-in-racket-with-sha-512-mining/</link>
      <pubDate>Sun, 16 Feb 2014 14:00:30 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2014/02/16/exploring-parallelism-in-racket-with-sha-512-mining/</guid>
      <description>&lt;p&gt;While I&amp;rsquo;ve been getting a fair few programming exercises from Reddit&amp;rsquo;s &lt;a href=&#34;http://www.reddit.com/r/dailyprogrammer&#34;&gt;/r/dailyprogrammer&lt;/a&gt;, more recently I&amp;rsquo;ve started following a few other sub-Reddits, such as &lt;a href=&#34;http://www.reddit.com/r/programming&#34;&gt;/r/programming&lt;/a&gt; and &lt;a href=&#34;http://www.reddit.com/r/netsec&#34;&gt;/r/netsec&lt;/a&gt;. While browsing the former, I came across this intriguing gem of a problem: &lt;a tabindex=&#34;1&#34; href=&#34;http://www.h11e.com/&#34;&gt;HashChallenge: can you find the lowest value SHA-512 hash?&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Factoring factorials</title>
      <link>https://blog.jverkamp.com/2014/01/27/factoring-factorials/</link>
      <pubDate>Mon, 27 Jan 2014 14:00:22 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2014/01/27/factoring-factorials/</guid>
      <description>&lt;p&gt;There was &lt;a href=&#34;http://programmingpraxis.com/2014/01/24/factoring-factorials/&#34;&gt;a new post&lt;/a&gt; on Programming Praxis a few days ago that seemed pretty neat:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Given a positive integer n, compute the prime factorization, including multiplicities, of n! = 1 · 2 · … · n. You should be able to handle very large n, which means that you should not compute the factorial before computing the factors, as the intermediate result will be extremely large.&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>Graph coloring</title>
      <link>https://blog.jverkamp.com/2014/01/15/graph-coloring/</link>
      <pubDate>Wed, 15 Jan 2014 14:00:14 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2014/01/15/graph-coloring/</guid>
      <description>&lt;p&gt;Here&amp;rsquo;s &lt;a href=&#34;http://www.reddit.com/r/dailyprogrammer/comments/1tj0kl/122313_challenge_130_hard_coloring_frances/&#34;&gt;another one&lt;/a&gt; from /r/dailyprogrammer:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&amp;hellip; Your goal is to color a map of these regions with two requirements: 1) make sure that each adjacent department do not share a color, so you can clearly distinguish each department, and 2) minimize these numbers of colors.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Essentially, &lt;a href=&#34;https://en.wikipedia.org/wiki/graph%20coloring&#34;&gt;graph coloring&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Graph radius</title>
      <link>https://blog.jverkamp.com/2014/01/14/graph-radius/</link>
      <pubDate>Tue, 14 Jan 2014 14:00:41 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2014/01/14/graph-radius/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://www.reddit.com/r/dailyprogrammer/comments/1tiz4z/122313_challenge_140_intermediate_graph_radius/&#34;&gt;Here&amp;rsquo;s&lt;/a&gt; a quick problem from the DailyProgrammer subreddit. Basically, we want to calculate the radius of a graph:&lt;/p&gt;

&lt;blockquote&gt;
&lt;span class=&#34;latex-inline&#34;&gt;radius(g) = \min\limits_{n_0 \in g} \max\limits_{n_1 \in g} d_g(n_0, n_1)&lt;/span&gt;

&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>Overlapping circles</title>
      <link>https://blog.jverkamp.com/2014/01/03/overlapping-circles/</link>
      <pubDate>Fri, 03 Jan 2014 14:00:16 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2014/01/03/overlapping-circles/</guid>
      <description>&lt;p&gt;Here&amp;rsquo;s a quick little programming task that I came to via &lt;a href=&#34;http://l2program.co.uk/671/overlapping-circles&#34;&gt;a post&lt;/a&gt; on L2Program (who in turn seems to have found it on Reddit). The basic idea is to take a given list of circles and to determine the area enclosed (while correctly accounting for overlap).&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Edges to adjacency</title>
      <link>https://blog.jverkamp.com/2013/12/23/edges-to-adjacency/</link>
      <pubDate>Mon, 23 Dec 2013 14:00:02 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2013/12/23/edges-to-adjacency/</guid>
      <description>&lt;p&gt;Another quick one, this time &lt;a href=&#34;http://www.reddit.com/r/dailyprogrammer/comments/1t6dlf/121813_challenge_140_intermediate_adjacency_matrix/&#34;&gt;from /r/dailyprogrammer&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Your goal is to write a program that takes in a list of edge-node relationships, and print a directed adjacency matrix for it. Our convention will follow that rows point to columns. Follow the examples for clarification of this convention.&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>Rock-paper-scissors</title>
      <link>https://blog.jverkamp.com/2013/12/21/rock-paper-scissors/</link>
      <pubDate>Sat, 21 Dec 2013 04:55:29 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2013/12/21/rock-paper-scissors/</guid>
      <description>&lt;p&gt;Quick and to the point: let&amp;rsquo;s write a program to play rock-paper-scissors&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Twitter puddle</title>
      <link>https://blog.jverkamp.com/2013/11/30/twitter-puddle/</link>
      <pubDate>Sat, 30 Nov 2013 04:55:28 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2013/11/30/twitter-puddle/</guid>
      <description>&lt;p&gt;This one has been sitting in my backlog for a while and its been a while since I&amp;rsquo;ve gotten to write a programming post&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;, but now seems as good time as ever: &lt;a href=&#34;http://programmingpraxis.com/2013/11/15/twitter-puddle/&#34;&gt;Twitter puzzle&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Making music, part 3: Making noise</title>
      <link>https://blog.jverkamp.com/2013/11/12/making-music-part-3-making-noise/</link>
      <pubDate>Tue, 12 Nov 2013 14:00:25 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2013/11/12/making-music-part-3-making-noise/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://blog.jverkamp.com/2013/11/07/making-music-part-2-taking-shape/&#34;&gt;Last week&lt;/a&gt; we parsed some music. That post was in a bit of a hurry, so we had to leave off a fair few important pieces (like ties and slurs for one; chords for a rather bigger one). We&amp;rsquo;ll get to them soon, but for now we want to actually get something playing back.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Making music, part 2: Taking shape</title>
      <link>https://blog.jverkamp.com/2013/11/07/making-music-part-2-taking-shape/</link>
      <pubDate>Thu, 07 Nov 2013 14:00:55 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2013/11/07/making-music-part-2-taking-shape/</guid>
      <description>&lt;p&gt;It&amp;rsquo;s been a bit, but as you may have noticed life is a bit mad at the moment. But I&amp;rsquo;ve still made some progress.&lt;/p&gt;

&lt;p&gt;When we left off &lt;a href=&#34;https://blog.jverkamp.com/2013/10/29/making-music-part-1-reading-abc-notation/&#34;&gt;last time&lt;/a&gt;, we&amp;rsquo;d finished the first step towards making some lovely music with Racket: &lt;a href=&#34;https://en.wikipedia.org/wiki/tokenization&#34;&gt;tokenization&lt;/a&gt;. Now we want to take those songs and form them into something actually approaching music.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Making music, part 1: Reading ABC notation</title>
      <link>https://blog.jverkamp.com/2013/10/29/making-music-part-1-reading-abc-notation/</link>
      <pubDate>Tue, 29 Oct 2013 14:00:12 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2013/10/29/making-music-part-1-reading-abc-notation/</guid>
      <description>&lt;p&gt;It&amp;rsquo;s been a bit since I&amp;rsquo;ve had time to post&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;, but I&amp;rsquo;ve got an interesting new project that I&amp;rsquo;ve been working on. It&amp;rsquo;s a bit more complicated, ergo spread out over a few posts, but those tend to be the more interesting posts anyway, eh?&lt;/p&gt;

&lt;p&gt;The basic idea is that I want to be able to write and play music in Racket. One end goal would be to make a library available for the C211 class to give them something else to work with (in addition to &lt;a href=&#34;//blog.jverkamp.com&#34;/wombat-ide/c211-image-api/&#34;&gt;images&lt;/a&gt; and &lt;a href=&#34;//blog.jverkamp.com&#34;/wombat-ide/c211-turtle-api/&#34;&gt;turtles&lt;/a&gt;). To that end, here&amp;rsquo;s my current plan of attack&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Write a &lt;a href=&#34;https://en.wikipedia.org/wiki/Lexical%20analysis&#34;&gt;lexer&lt;/a&gt; for &lt;a href=&#34;https://en.wikipedia.org/wiki/ABC%20notation&#34;&gt;ABC notation&lt;/a&gt; to turn raw text into a list of tokens&lt;/li&gt;
&lt;li&gt;Write a parser to turn those tokens into a song (for example dealing with the interactions between key signature/accidentals and meter/note duration)&lt;/li&gt;
&lt;li&gt;Use the &lt;a href=&#34;http://pkg.racket-lang.org/#[rsound]&#34;&gt;rsound&lt;/a&gt; library on &lt;a href=&#34;http://pkg.racket-lang.org/&#34;&gt;Planet2 / pkg&lt;/a&gt; to play back individuals notes and chords&lt;/li&gt;
&lt;li&gt;Tie it all together to play a parsed song in ABC notation using the rsound library&lt;/li&gt;
&lt;li&gt;&lt;em&gt;(maybe)&lt;/em&gt;: Use the rsound library to save ABC files as WAV audio&lt;/li&gt;
&lt;li&gt;&lt;em&gt;(maybe)&lt;/em&gt;: Figure out the format and save ABC files as MIDI&lt;/li&gt;
&lt;li&gt;&lt;em&gt;(maybe)&lt;/em&gt;: Render songs as music sheets/li&amp;gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Sounds like fun! Let&amp;rsquo;s get started.&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>