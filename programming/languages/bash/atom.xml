<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Bash on jverkamp.com</title><link>https://blog.jverkamp.com/programming/languages/bash/</link><description>Recent content in Bash on jverkamp.com</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://blog.jverkamp.com/programming/languages/bash/atom.xml" rel="self" type="application/rss+xml"/><item><title>Command line AES with openssl (and tar)</title><link>https://blog.jverkamp.com/2020/04/09/command-line-aes-with-openssl-and-tar/</link><pubDate>Thu, 09 Apr 2020 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2020/04/09/command-line-aes-with-openssl-and-tar/</guid><description>&lt;p>I had &lt;a href="https://github.com/jpverkamp/dotfiles/blob/b708190/bin/aes" target="_blank" rel="noopener">a script&lt;/a> that would take a file and a passphrase and either encrypt it or, if already encrypted, decrypt it. It worked well enough and I got to play with the &lt;code>&lt;a href="https://docs.python.org/3/search.html?q=struct">struct&lt;/a>&lt;/code>
library. But it was home grown&amp;ndash;so not compatible with anything&amp;ndash;and didn&amp;rsquo;t properly validate anything. It worked well enough, but perhaps I could do something better.&lt;/p></description></item><item><title>Get kitten</title><link>https://blog.jverkamp.com/2020/04/01/get-kitten/</link><pubDate>Wed, 01 Apr 2020 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2020/04/01/get-kitten/</guid><description>&lt;p>I upload a lot of images when testing for various things. And of course, I don&amp;rsquo;t want to use any of my own images. So what would I do instead?&lt;/p>
&lt;p>Kittens!&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-fish" data-lang="fish">&lt;span style="display:flex;">&lt;span>$ get-kitten
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">Downloading&lt;/span> a &lt;span style="color:#ae81ff">640&lt;/span> x &lt;span style="color:#ae81ff">480&lt;/span> kitten
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">Downloading&lt;/span> to kitten-&lt;span style="color:#ae81ff">1&lt;/span>.jpg
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ open kitten-&lt;span style="color:#ae81ff">1&lt;/span>.jpg
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;figure>&lt;img src="https://blog.jverkamp.com/embeds/2020/kitten-1.jpg"/>
&lt;/figure>
&lt;p>Perfect.&lt;/p></description></item><item><title>Split a file with headers</title><link>https://blog.jverkamp.com/2020/03/30/split-a-file-with-headers/</link><pubDate>Mon, 30 Mar 2020 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2020/03/30/split-a-file-with-headers/</guid><description>&lt;p>I have a bunch of files with Arabic content that I need to split into chunks so they can be better run in parallel&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>. But by default, when I open them in a text editor, the encoding changes from &lt;code>windows-1256&lt;/code> to &lt;code>utf-8&lt;/code>&lt;sup id="fnref:2">&lt;a href="#fn:2" class="footnote-ref" role="doc-noteref">2&lt;/a>&lt;/sup>. I could use the Unix &lt;code>split&lt;/code> command to break them into chunks, but I need to preserve the headers. So&amp;hellip; how do I fix all this?&lt;/p>
&lt;p>Write a script!&lt;/p></description></item><item><title>work-on: A Quick Script for Context Switching</title><link>https://blog.jverkamp.com/2019/05/07/work-on-a-quick-script-for-context-switching/</link><pubDate>Tue, 07 May 2019 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2019/05/07/work-on-a-quick-script-for-context-switching/</guid><description>&lt;p>I work on a lot of projects.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ ls ~/Projects/ | wc -l
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">29&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ ls ~/Projects/work/ | wc -l
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">67&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>And that&amp;rsquo;s just what I have checked out at the moment. ðŸ˜‡&lt;/p></description></item><item><title>Tiny Helper Scripts for Command Line MySQL</title><link>https://blog.jverkamp.com/2019/04/27/tiny-helper-scripts-for-command-line-mysql/</link><pubDate>Sat, 27 Apr 2019 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2019/04/27/tiny-helper-scripts-for-command-line-mysql/</guid><description>&lt;p>Quite often, I&amp;rsquo;ll find myself wanting to query and manipulate MySQL data entirely on the command line. I could be building up a pipeline or working on a task that I&amp;rsquo;m going to eventually automate but haven&amp;rsquo;t quite gotten to yet. Whenver I have to do something like that, I have a small pile of scripts I&amp;rsquo;ve written over time that help out:&lt;/p>
&lt;ul>
&lt;li>&lt;code>skiphead&lt;/code>: Skip the first line of output, used to skip over headers in a query response&lt;/li>
&lt;li>&lt;code>skipuntil&lt;/code>: Skip all lines until we see one matching a pattern, used to resume partial tasks&lt;/li>
&lt;li>&lt;code>commaify&lt;/code>: Take a list of single values on the command line and turn them into a comma separated list (for use in &lt;code>IN&lt;/code> clauses)&lt;/li>
&lt;li>&lt;code>csv2json&lt;/code>: a &lt;a href="https://blog.jverkamp.com/2015/12/11/csv-to-json/">previously posted&lt;/a> script for converting csv/tab delimited output to json&lt;/li>
&lt;li>&lt;code>jq&lt;/code>: not my script, but used to take the output of csv2json and query it further in ways that would be complicated to do with SQL&lt;/li>
&lt;/ul>
&lt;p>Admitedly, the first two of those are one liners and I could easily remember them, but the advantage of a single command that does it is tab completion. &lt;code>sk&amp;lt;tab&amp;gt;&lt;/code>, arrow to select which one I want, and off we go. I could put them as an alias, but I don&amp;rsquo;t always use the same shell (mostly &lt;a href="https://fishshell.com/" target="_blank" rel="noopener">fish&lt;/a>, but sometimes Bash or Zsh).&lt;/p></description></item><item><title>Creating a temporary SMTP server to 'catch' domain validation emails</title><link>https://blog.jverkamp.com/2018/07/09/creating-a-temporary-smtp-server-to-catch-domain-validation-emails/</link><pubDate>Mon, 09 Jul 2018 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2018/07/09/creating-a-temporary-smtp-server-to-catch-domain-validation-emails/</guid><description>&lt;p>One problem that has come up a time or two is dealing with email-based domain validation (specifically in this case for the issuance of TLS certificates) on domains that aren&amp;rsquo;t actually configured to receive email. Yes, in a perfect world, it would be easier to switch to DNS-based validation (since we have to have control of the DNS for the domain, we need it later), but let&amp;rsquo;s just assume that&amp;rsquo;s not an option. So, how do we &amp;lsquo;catch&amp;rsquo; the activation email so we can prove we can receive email on that domain?&lt;/p></description></item><item><title>Parsing AWS instance data with jq</title><link>https://blog.jverkamp.com/2015/04/01/parsing-aws-instance-data-with-jq/</link><pubDate>Wed, 01 Apr 2015 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2015/04/01/parsing-aws-instance-data-with-jq/</guid><description>&lt;p>Semi-random amusing code snippet of the day:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>aws ec2 describe-instances | jq &lt;span style="color:#e6db74">&amp;lt;&amp;lt; EOF
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> .[][].Instances[]
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> | select(.Tags[]?.Value == &amp;#34;production&amp;#34;)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> | .PrivateIpAddress
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">EOF&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item></channel></rss>