<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Bash on jverkamp.com</title>
    <link>https://blog.jverkamp.com/programming/languages/bash/</link>
    <description>Recent content in Bash on jverkamp.com</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language><atom:link href="https://blog.jverkamp.com/programming/languages/bash/atom.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Command line AES with openssl (and tar)</title>
      <link>https://blog.jverkamp.com/2020/04/09/command-line-aes-with-openssl-and-tar/</link>
      <pubDate>Thu, 09 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2020/04/09/command-line-aes-with-openssl-and-tar/</guid>
      <description>&lt;p&gt;I had &lt;a href=&#34;https://github.com/jpverkamp/dotfiles/blob/b708190/bin/aes&#34;&gt;a script&lt;/a&gt; that would take a file and a passphrase and either encrypt it or, if already encrypted, decrypt it. It worked well enough and I got to play with the &lt;code&gt;&lt;a href=&#34;https://docs.python.org/3/search.html?q=struct&#34;&gt;struct&lt;/a&gt;&lt;/code&gt;
 library. But it was home grown&amp;ndash;so not compatible with anything&amp;ndash;and didn&amp;rsquo;t properly validate anything. It worked well enough, but perhaps I could do something better.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Get kitten</title>
      <link>https://blog.jverkamp.com/2020/04/01/get-kitten/</link>
      <pubDate>Wed, 01 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2020/04/01/get-kitten/</guid>
      <description>&lt;p&gt;I upload a lot of images when testing for various things. And of course, I don&amp;rsquo;t want to use any of my own images. So what would I do instead?&lt;/p&gt;
&lt;p&gt;Kittens!&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fish&#34; data-lang=&#34;fish&#34;&gt;$ get-kitten

Downloading a &lt;span style=&#34;color:#ae81ff&#34;&gt;640&lt;/span&gt; x &lt;span style=&#34;color:#ae81ff&#34;&gt;480&lt;/span&gt; kitten
Downloading to kitten-1.jpg

$ open kitten-1.jpg
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;figure&gt;
    &lt;img src=&#34;https://blog.jverkamp.com/embeds/2020/kitten-1.jpg&#34;/&gt; 
&lt;/figure&gt;

&lt;p&gt;Perfect.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Split a file with headers</title>
      <link>https://blog.jverkamp.com/2020/03/30/split-a-file-with-headers/</link>
      <pubDate>Mon, 30 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2020/03/30/split-a-file-with-headers/</guid>
      <description>&lt;p&gt;I have a bunch of files with Arabic content that I need to split into chunks so they can be better run in parallel&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;. But by default, when I open them in a text editor, the encoding changes from &lt;code&gt;windows-1256&lt;/code&gt; to &lt;code&gt;utf-8&lt;/code&gt;&lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;. I could use the Unix &lt;code&gt;split&lt;/code&gt; command to break them into chunks, but I need to preserve the headers. So&amp;hellip; how do I fix all this?&lt;/p&gt;
&lt;p&gt;Write a script!&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>work-on: A Quick Script for Context Switching</title>
      <link>https://blog.jverkamp.com/2019/05/07/work-on-a-quick-script-for-context-switching/</link>
      <pubDate>Tue, 07 May 2019 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2019/05/07/work-on-a-quick-script-for-context-switching/</guid>
      <description>&lt;p&gt;I work on a lot of projects.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ ls ~/Projects/ | wc -l
      &lt;span style=&#34;color:#ae81ff&#34;&gt;29&lt;/span&gt;

$ ls ~/Projects/work/ | wc -l
      &lt;span style=&#34;color:#ae81ff&#34;&gt;67&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And that&amp;rsquo;s just what I have checked out at the moment. ðŸ˜‡&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Tiny Helper Scripts for Command Line MySQL</title>
      <link>https://blog.jverkamp.com/2019/04/27/tiny-helper-scripts-for-command-line-mysql/</link>
      <pubDate>Sat, 27 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2019/04/27/tiny-helper-scripts-for-command-line-mysql/</guid>
      <description>&lt;p&gt;Quite often, I&amp;rsquo;ll find myself wanting to query and manipulate MySQL data entirely on the command line. I could be building up a pipeline or working on a task that I&amp;rsquo;m going to eventually automate but haven&amp;rsquo;t quite gotten to yet. Whenver I have to do something like that, I have a small pile of scripts I&amp;rsquo;ve written over time that help out:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;skiphead&lt;/code&gt;: Skip the first line of output, used to skip over headers in a query response&lt;/li&gt;
&lt;li&gt;&lt;code&gt;skipuntil&lt;/code&gt;: Skip all lines until we see one matching a pattern, used to resume partial tasks&lt;/li&gt;
&lt;li&gt;&lt;code&gt;commaify&lt;/code&gt;: Take a list of single values on the command line and turn them into a comma separated list (for use in &lt;code&gt;IN&lt;/code&gt; clauses)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;csv2json&lt;/code&gt;: a &lt;a href=&#34;https://blog.jverkamp.com/2015/12/11/csv-to-json/&#34;&gt;previously posted&lt;/a&gt; script for converting csv/tab delimited output to json&lt;/li&gt;
&lt;li&gt;&lt;code&gt;jq&lt;/code&gt;: not my script, but used to take the output of csv2json and query it further in ways that would be complicated to do with SQL&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Admitedly, the first two of those are one liners and I could easily remember them, but the advantage of a single command that does it is tab completion. &lt;code&gt;sk&amp;lt;tab&amp;gt;&lt;/code&gt;, arrow to select which one I want, and off we go. I could put them as an alias, but I don&amp;rsquo;t always use the same shell (mostly &lt;a href=&#34;https://fishshell.com/&#34;&gt;fish&lt;/a&gt;, but sometimes Bash or Zsh).&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Creating a temporary SMTP server to &#39;catch&#39; domain validation emails</title>
      <link>https://blog.jverkamp.com/2018/07/09/creating-a-temporary-smtp-server-to-catch-domain-validation-emails/</link>
      <pubDate>Mon, 09 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2018/07/09/creating-a-temporary-smtp-server-to-catch-domain-validation-emails/</guid>
      <description>&lt;p&gt;One problem that has come up a time or two is dealing with email-based domain validation (specifically in this case for the issuance of TLS certificates) on domains that aren&amp;rsquo;t actually configured to receive email. Yes, in a perfect world, it would be easier to switch to DNS-based validation (since we have to have control of the DNS for the domain, we need it later), but let&amp;rsquo;s just assume that&amp;rsquo;s not an option. So, how do we &amp;lsquo;catch&amp;rsquo; the activation email so we can prove we can receive email on that domain?&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Parsing AWS instance data with jq</title>
      <link>https://blog.jverkamp.com/2015/04/01/parsing-aws-instance-data-with-jq/</link>
      <pubDate>Wed, 01 Apr 2015 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2015/04/01/parsing-aws-instance-data-with-jq/</guid>
      <description>&lt;p&gt;Semi-random amusing code snippet of the day:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;aws ec2 describe-instances | jq &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;&amp;lt; EOF
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    .[][].Instances[]
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    | select(.Tags[]?.Value == &amp;#34;production&amp;#34;)
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    | .PrivateIpAddress
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;EOF&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
  </channel>
</rss>
