<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Rust on jverkamp.com</title><link>https://blog.jverkamp.com/programming/languages/rust/</link><description>Recent content in Rust on jverkamp.com</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://blog.jverkamp.com/programming/languages/rust/atom.xml" rel="self" type="application/rss+xml"/><item><title>CodeCrafters: Build Myself an Interpreter</title><link>https://blog.jverkamp.com/2024/09/04/codecrafters-build-myself-an-interpreter/</link><pubDate>Wed, 04 Sep 2024 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2024/09/04/codecrafters-build-myself-an-interpreter/</guid><description>Didn&amp;rsquo;t I just do one of these? Well, yes. Yes I did. But I love building compilers and interpreters, so when I saw this one was in beta (and thus free ðŸ˜‰), I had to try it!
It&amp;rsquo;s directly an implemention of the Lox languages from the Crafting Interpreters website / book (my review), if incomplete. By the end of the lesson, we&amp;rsquo;ll have:
A tokenizer that handles parentheses, braces, operators (single and multiple character), whitespace, identifiers, string literals, numeric literals, and keywords A parser that can take those tokens and build an abstract syntax tree using recursive descent parsing A simple tree walking interpreter for some subset of the language It doesn&amp;rsquo;t handle all of the syntax (yet).</description></item><item><title>Solving Cosmic Encounter</title><link>https://blog.jverkamp.com/2024/09/02/solving-cosmic-encounter/</link><pubDate>Mon, 02 Sep 2024 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2024/09/02/solving-cosmic-encounter/</guid><description>&lt;p>Another &lt;a href="https://blog.jverkamp.com/series/rust-solvers/">Rust Solvers&lt;/a> puzzle: &lt;a href="https://store.steampowered.com/app/583270/Cosmic_Express/" target="_blank" rel="noopener">Cosmic Express&lt;/a>. Basically, it&amp;rsquo;s a routefinding puzzle. You have a train that needs a track from entrance to exit, picking up and dropping off cargo on the way.&lt;/p>
&lt;p>It&amp;rsquo;s actual a relatively simple puzzle, so far as things go, but one thing that&amp;rsquo;s interesting from a solving perspective is that branching paths &lt;em>really&lt;/em> don&amp;rsquo;t work great with my solver code. Paths just have a crazy branching factor when compared to (for example) &lt;a href="https://blog.jverkamp.com/2024/06/17/the-golf-peaks-of-solving/">playing one of a handful of cards&lt;/a>.&lt;/p>
&lt;p>But it&amp;rsquo;s still an interesting puzzle!&lt;/p></description></item><item><title>CodeCrafters: Build Myself a Grep</title><link>https://blog.jverkamp.com/2024/08/28/codecrafters-build-myself-a-grep/</link><pubDate>Wed, 28 Aug 2024 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2024/08/28/codecrafters-build-myself-a-grep/</guid><description>&lt;p>I recently stumbled across &lt;a href="https://codecrafters.io/" target="_blank" rel="noopener">CodeCrafters&lt;/a> again&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>. In a nutshell, they give a number of &amp;lsquo;Build Your Own&amp;hellip;&amp;rsquo; courses, each of which will automatically create a repo for you, guide you through solving the program step by step, and provide some feedback on the way.&lt;/p>
&lt;p>On one hand, it&amp;rsquo;s a freemium (one problem a month is free) / paid service. I wish they had tiers. I really think their monthly fee is a bit steep for what they offer (we&amp;rsquo;ll come back to that). But on the other hand, it&amp;rsquo;s a neat tool and I&amp;rsquo;ve been wanting some more larger programming projects to learn more Rust on, so away we go!&lt;/p>
&lt;p>First up, &lt;a href="https://en.wikipedia.org/wiki/grep">grep&lt;/a>!&lt;/p></description></item><item><title>TestIT - Integration Testing for My Rust Solvers</title><link>https://blog.jverkamp.com/2024/08/19/testit-integration-testing-for-my-rust-solvers/</link><pubDate>Mon, 19 Aug 2024 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2024/08/19/testit-integration-testing-for-my-rust-solvers/</guid><description>&lt;p>One of the problems (of a sorts) I&amp;rsquo;ve been having with my series on &lt;a href="https://blog.jverkamp.com/series/rust-solvers/">Rust Solvers&lt;/a> is that, for each input puzzle, I need a way to save one or more &amp;lsquo;known good&amp;rsquo; solutions so that when I change and add new functionality, I can verify that I&amp;rsquo;ve either not changed the solution or found another valid one.&lt;/p>
&lt;p>&lt;a href="https://en.wikipedia.org/wiki/Integration%20tests">Integration tests&lt;/a> as it were.&lt;/p>
&lt;p>So far, I&amp;rsquo;d been building this &lt;a href="https://github.com/jpverkamp/rust-solvers/blob/ab65482417d0edfb9f24887d41ba3c724e4346e3/src/bin/golf-peaks.rs#L1064-L1202" target="_blank" rel="noopener">into each solution&lt;/a>. While this worked perfectly fine, it&amp;rsquo;s a bit annoying to copy and paste to each binary, and then have to edit each test case with the answers.&lt;/p>
&lt;nav id="TableOfContents">
&lt;ul>
&lt;li>&lt;a href="#an-example-run">An example run&lt;/a>&lt;/li>
&lt;li>&lt;a href="#command-line-options">Command line options&lt;/a>&lt;/li>
&lt;li>&lt;a href="#test-file-collection">Test file collection&lt;/a>&lt;/li>
&lt;li>&lt;a href="#parallel-execution--building-the-command">Parallel Execution + Building the Command&lt;/a>&lt;/li>
&lt;li>&lt;a href="#running-each-command-with-a-timeout">Running each command with a timeout&lt;/a>&lt;/li>
&lt;li>&lt;a href="#collecting-the-results">Collecting the results&lt;/a>&lt;/li>
&lt;li>&lt;a href="#summary">Summary&lt;/a>&lt;/li>
&lt;/ul>
&lt;/nav>
&lt;h2 id="an-example-run">An example run&lt;/h2>
&lt;p>Enter: &lt;a href="https://github.com/jpverkamp/testit" target="_blank" rel="noopener">testit&lt;/a>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># First run, without --db/--save for previous runs&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ testit &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> --command &lt;span style="color:#e6db74">&amp;#34;./target/release/golf-peaks&amp;#34;&lt;/span> &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> --files &lt;span style="color:#e6db74">&amp;#34;data/golf-peaks/**/*.txt&amp;#34;&lt;/span> &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> --timeout &lt;span style="color:#ae81ff">60&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>data/golf-peaks/1-1.txt: New success:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>1-â†—
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">===&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>data/golf-peaks/1-10.txt: New success:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>1-â†˜ 3-â†™ 2-â†˜
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">===&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>data/golf-peaks/9-8.txt: New success:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>1/3-â†˜ 1/2-â†– 1/â†— 2/1-â†– 1/1-â†—
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">===&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>data/golf-peaks/9-9.txt: New success:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>1-â†— 1/â†˜ 1-â†˜ 4-â†— 3-â†˜ 1/1-â†—
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">===&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>data/golf-peaks/Credits.txt: New success:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>4-â†– 5-â†— 3-â†— 6-â†˜
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">===&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Summary:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Successes: &lt;span style="color:#ae81ff">121&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#ae81ff">121&lt;/span> new&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Failures: &lt;span style="color:#ae81ff">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Timeouts: &lt;span style="color:#ae81ff">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># Later runs&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ testit &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> --command &lt;span style="color:#e6db74">&amp;#34;./target/release/golf-peaks&amp;#34;&lt;/span> &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> --files &lt;span style="color:#e6db74">&amp;#34;data/golf-peaks/**/*.txt&amp;#34;&lt;/span> &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> --timeout &lt;span style="color:#ae81ff">60&lt;/span> &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> --db testit/golf-peaks.json &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> --save
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Summary:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Successes: &lt;span style="color:#ae81ff">121&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span> new&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Failures: &lt;span style="color:#ae81ff">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Timeouts: &lt;span style="color:#ae81ff">0&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Pretty cool, I do think. ðŸ˜„&lt;/p></description></item><item><title>The Golf (Peaks) of Solving</title><link>https://blog.jverkamp.com/2024/06/17/the-golf-peaks-of-solving/</link><pubDate>Mon, 17 Jun 2024 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2024/06/17/the-golf-peaks-of-solving/</guid><description>&lt;p>Another day (week? month?), another puzzle game.&lt;/p>
&lt;p>This time around, we&amp;rsquo;re going to solve &lt;a href="https://store.steampowered.com/app/923260/Golf_Peaks/" target="_blank" rel="noopener">Golf Peaks&lt;/a>. I picked this up a while ago on iOS, but only recently on Steam. It&amp;rsquo;s a cute little puzzle game themed around minigolf.&lt;/p>
&lt;p>&lt;img src="1.7-slopes.png" alt="">&lt;/p>
&lt;p>Basically, you&amp;rsquo;re on a grid and you have to get the ball (in the bottom in that screenshot above) to the flag (currently at the top). You have a set list of moves you can take, styled as cards&amp;ndash;all of which either move a certain number of tiles in a specific direction or possibly jump into the air (and fly over obstacles).&lt;/p>
&lt;p>It gets more complicated from there, but hopefully you have the basic idea. ðŸ˜„&lt;/p></description></item><item><title>Solving Sokobond</title><link>https://blog.jverkamp.com/2024/04/06/solving-sokobond/</link><pubDate>Sat, 06 Apr 2024 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2024/04/06/solving-sokobond/</guid><description>&lt;p>Another solver that I&amp;rsquo;ve been working on, after &lt;a href="https://blog.jverkamp.com/2024/03/28/a-good-snowman-is-hard-to-...-solve/">A Good Snowman Is Hard To &amp;hellip; Solve?&lt;/a>. This time, we have &lt;a href="https://store.steampowered.com/app/290260/Sokobond/" target="_blank" rel="noopener">Sokobond&lt;/a>! It&amp;rsquo;s a &lt;a href="https://en.wikipedia.org/wiki/Sokobon">Sokobon&lt;/a>&amp;hellip; but with chemical bonds! Yeah, that&amp;rsquo;s a really good title.&lt;/p>
&lt;p>The basic idea is you have a field of elements with (chemical accurate) free electrons):&lt;/p>
&lt;p>&lt;img src="basic-image.png" alt="A basic level">&lt;/p>
&lt;p>Here we have 4 hydrogens (1 bond each) and a carbon (4 bonds). It should seem pretty obvious that the carbon should end up with a hydrogen on each end. The one last bit of interest: the element with the dashed border is the one we actually control, that will never change.&lt;/p>
&lt;p>This eventually gets more complicated, adding:&lt;/p>
&lt;ul>
&lt;li>Modifiers that are placed on the map between squares:
&lt;ul>
&lt;li>One that strengthens bonds, turning a single bond into double into triple&lt;/li>
&lt;li>One that weakens bonds, turning triple to double to single or breaking single bonds&lt;/li>
&lt;li>One that rotates bonds as you move by it&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>More elements, eventually hydrogen (1), oxygen (2), nitrogen (3), carbon (4), and helium (0)&lt;/li>
&lt;li>Solutions that require forming multiple elements at the same time&lt;/li>
&lt;/ul>
&lt;p>It&amp;rsquo;s a pretty neat puzzle game with 144 levels of increasing difficulty. Perfect to solve.&lt;/p>
&lt;hr></description></item><item><title>A Good Snowman Is Hard To ... Solve?</title><link>https://blog.jverkamp.com/2024/03/28/a-good-snowman-is-hard-to-...-solve/</link><pubDate>Thu, 28 Mar 2024 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2024/03/28/a-good-snowman-is-hard-to-...-solve/</guid><description>&lt;p>I enjoy puzzle games. I especially enjoy letting computers solve them for me ðŸ˜„. Once upon a time, I set up a &lt;a href="https://blog.jverkamp.com/2022/10/16/stateful-solvers-and-iterators/">framework for solving random things&lt;/a>. Let&amp;rsquo;s solve some more.&lt;/p>
&lt;p>Today: &lt;a href="https://store.steampowered.com/app/316610/A_Good_Snowman_Is_Hard_To_Build/" target="_blank" rel="noopener">A Good Snowman Is Hard To Build&lt;/a>&lt;/p>
&lt;p>It&amp;rsquo;s a &lt;a href="https://en.wikipedia.org/wiki/Sokoban">Sokoban&lt;/a> about making snowmen! You can push snowballs of three sizes around, collecting snow if you roll over it. You can push smaller snowballs onto bigger ones, stacking them. Or back off, in order to get around one another.&lt;/p>
&lt;p>And that&amp;rsquo;s really it.&lt;/p>
&lt;p>There are some interesting twists (multiple snowmen, the ability to leave and re-enter levels, and even a whole second &amp;lsquo;hard mode&amp;rsquo;), but at a basic level, it&amp;rsquo;s just pushing.&lt;/p></description></item><item><title>Advent of Code 2023 - Testing and Timing</title><link>https://blog.jverkamp.com/2023/12/28/advent-of-code-2023-testing-and-timing/</link><pubDate>Thu, 28 Dec 2023 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2023/12/28/advent-of-code-2023-testing-and-timing/</guid><description>&lt;p>A quick follow up to &lt;a href="https://blog.jverkamp.com/series/advent-of-code-2023/">Advent of Code 2023&lt;/a>: testing and timing.&lt;/p>
&lt;p>It&amp;rsquo;s been bothering me a bit that I haven&amp;rsquo;t had a generic way to run tests and timing on every problem as I&amp;rsquo;m going.&lt;/p>
&lt;p>So let&amp;rsquo;s fix it!&lt;/p>
&lt;nav id="TableOfContents">
&lt;ul>
&lt;li>&lt;a href="#testing">Testing&lt;/a>&lt;/li>
&lt;li>&lt;a href="#timing">Timing&lt;/a>&lt;/li>
&lt;li>&lt;a href="#summary">Summary&lt;/a>&lt;/li>
&lt;/ul>
&lt;/nav></description></item><item><title>AoC 2023 Day 25: Graph Splitinator</title><link>https://blog.jverkamp.com/2023/12/25/aoc-2023-day-25-graph-splitinator/</link><pubDate>Mon, 25 Dec 2023 00:00:03 +0000</pubDate><guid>https://blog.jverkamp.com/2023/12/25/aoc-2023-day-25-graph-splitinator/</guid><description>&lt;h2 id="source-day-25-snowverloadhttpsadventofcodecom2023day25">Source: &lt;a href="https://adventofcode.com/2023/day/25" target="_blank" rel="noopener">Day 25: Snowverload&lt;/a>&lt;/h2>
&lt;p>&lt;a href="https://github.com/jpverkamp/advent-of-code/tree/master/2023/solutions/day25" target="_blank" rel="noopener">Full solution&lt;/a> for today (spoilers!)&lt;/p>
&lt;nav id="TableOfContents">
&lt;ul>
&lt;li>&lt;a href="#source-day-25-snowverloadhttpsadventofcodecom2023day25">Source: &lt;a href="https://adventofcode.com/2023/day/25">Day 25: Snowverload&lt;/a>&lt;/a>&lt;/li>
&lt;li>&lt;a href="#part-1">Part 1&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#parsing">Parsing&lt;/a>&lt;/li>
&lt;li>&lt;a href="#solution-1-brute-force">Solution 1: Brute Force&lt;/a>&lt;/li>
&lt;li>&lt;a href="#a-dot-graph">A dot graph&lt;/a>&lt;/li>
&lt;li>&lt;a href="#solution-2-calculate-heavy-edges">Solution 2: Calculate &amp;lsquo;heavy&amp;rsquo; edges&lt;/a>&lt;/li>
&lt;li>&lt;a href="#a-better-n">A better N&lt;/a>&lt;/li>
&lt;li>&lt;a href="#performance">Performance&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#part-2">Part 2&lt;/a>&lt;/li>
&lt;/ul>
&lt;/nav>
&lt;h2 id="part-1">Part 1&lt;/h2>
&lt;blockquote>
&lt;p>Given an &lt;a href="https://en.wikipedia.org/wiki/undirected%20graph">undirected graph&lt;/a>, find 3 edges that split the graph into two &lt;a href="https://en.wikipedia.org/wiki/connected%20components">connected components&lt;/a>. Return the product of the component&amp;rsquo;s sizes.&lt;/p>
&lt;/blockquote></description></item><item><title>AoC 2023 Day 24: Collisionator</title><link>https://blog.jverkamp.com/2023/12/24/aoc-2023-day-24-collisionator/</link><pubDate>Sun, 24 Dec 2023 00:00:03 +0000</pubDate><guid>https://blog.jverkamp.com/2023/12/24/aoc-2023-day-24-collisionator/</guid><description>&lt;h2 id="source-day-24-never-tell-me-the-oddshttpsadventofcodecom2023day24">Source: &lt;a href="https://adventofcode.com/2023/day/24" target="_blank" rel="noopener">Day 24: Never Tell Me The Odds&lt;/a>&lt;/h2>
&lt;p>&lt;a href="https://github.com/jpverkamp/advent-of-code/tree/master/2023/solutions/day24" target="_blank" rel="noopener">Full solution&lt;/a> for today (spoilers!)&lt;/p>
&lt;nav id="TableOfContents">
&lt;ul>
&lt;li>&lt;a href="#source-day-24-never-tell-me-the-oddshttpsadventofcodecom2023day24">Source: &lt;a href="https://adventofcode.com/2023/day/24">Day 24: Never Tell Me The Odds&lt;/a>&lt;/a>&lt;/li>
&lt;li>&lt;a href="#part-1">Part 1&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#parsing-and-types">Parsing and Types&lt;/a>&lt;/li>
&lt;li>&lt;a href="#xy-intersections">XY Intersections&lt;/a>&lt;/li>
&lt;li>&lt;a href="#solution">Solution&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#part-2">Part 2&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#solution-1-brute-force">Solution 1: Brute Force&lt;/a>&lt;/li>
&lt;li>&lt;a href="#solution-2-using-z3">Solution 2: Using Z3&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#performance">Performance&lt;/a>&lt;/li>
&lt;/ul>
&lt;/nav>
&lt;h2 id="part-1">Part 1&lt;/h2>
&lt;blockquote>
&lt;p>Given a set of 3D vectors (origin + velocity), count how many times the vectors would intersect. Ignore the Z-coordinate for this part; the collisions do not have to be at the same time.&lt;/p>
&lt;/blockquote></description></item><item><title>AoC 2023 Day 23: Looong Mazinator</title><link>https://blog.jverkamp.com/2023/12/23/aoc-2023-day-23-looong-mazinator/</link><pubDate>Sat, 23 Dec 2023 00:00:03 +0000</pubDate><guid>https://blog.jverkamp.com/2023/12/23/aoc-2023-day-23-looong-mazinator/</guid><description>&lt;h2 id="source-day-23-a-long-walkhttpsadventofcodecom2023day23">Source: &lt;a href="https://adventofcode.com/2023/day/23" target="_blank" rel="noopener">Day 23: A Long Walk&lt;/a>&lt;/h2>
&lt;p>&lt;a href="https://github.com/jpverkamp/advent-of-code/tree/master/2023/solutions/day23" target="_blank" rel="noopener">Full solution&lt;/a> for today (spoilers!)&lt;/p>
&lt;nav id="TableOfContents">
&lt;ul>
&lt;li>&lt;a href="#source-day-23-a-long-walkhttpsadventofcodecom2023day23">Source: &lt;a href="https://adventofcode.com/2023/day/23">Day 23: A Long Walk&lt;/a>&lt;/a>&lt;/li>
&lt;li>&lt;a href="#part-1">Part 1&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#edit-1-petgraph">Edit 1: Petgraph&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#part-2">Part 2&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#solution-1-brute-force">Solution 1: Brute force&lt;/a>&lt;/li>
&lt;li>&lt;a href="#solution-2-a-better-path">Solution 2: A better &lt;code>Path&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="#solution-3-finding-points-of-interest">Solution 3: Finding points of interest&lt;/a>&lt;/li>
&lt;li>&lt;a href="#edit-1-more-petgraph">Edit 1: More petgraph!&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#performance">Performance&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#edit-1-petgraph-performance">Edit 1: Petgraph performance&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/nav>
&lt;h2 id="part-1">Part 1&lt;/h2>
&lt;blockquote>
&lt;p>Find the longest non-overlapping path through a maze with walls (&lt;code>#&lt;/code>) and one way paths (&lt;code>^v&amp;lt;&amp;gt;&lt;/code>).&lt;/p>
&lt;/blockquote></description></item><item><title>AoC 2023 Day 22: Block Dropinator</title><link>https://blog.jverkamp.com/2023/12/22/aoc-2023-day-22-block-dropinator/</link><pubDate>Fri, 22 Dec 2023 00:00:03 +0000</pubDate><guid>https://blog.jverkamp.com/2023/12/22/aoc-2023-day-22-block-dropinator/</guid><description>&lt;h2 id="source-day-22-sand-slabshttpsadventofcodecom2023day22">Source: &lt;a href="https://adventofcode.com/2023/day/22" target="_blank" rel="noopener">Day 22: Sand Slabs&lt;/a>&lt;/h2>
&lt;p>&lt;a href="https://github.com/jpverkamp/advent-of-code/tree/master/2023/solutions/day22" target="_blank" rel="noopener">Full solution&lt;/a> for today (spoilers!)&lt;/p>
&lt;nav id="TableOfContents">
&lt;ul>
&lt;li>&lt;a href="#source-day-22-sand-slabshttpsadventofcodecom2023day22">Source: &lt;a href="https://adventofcode.com/2023/day/22">Day 22: Sand Slabs&lt;/a>&lt;/a>&lt;/li>
&lt;li>&lt;a href="#part-1">Part 1&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#types-and-parsing">Types and Parsing&lt;/a>&lt;/li>
&lt;li>&lt;a href="#solution">Solution&lt;/a>&lt;/li>
&lt;li>&lt;a href="#edit-1-now-with-faster-dropping">Edit 1, Now with faster dropping&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#part-2">Part 2&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#heading">&lt;/a>&lt;/li>
&lt;li>&lt;a href="#trying-other-datatypes">Trying other datatypes&lt;/a>&lt;/li>
&lt;li>&lt;a href="#remove-debugging">Remove debugging&lt;/a>&lt;/li>
&lt;li>&lt;a href="#edit-1-using-fast-drop">Edit 1, Using fast drop&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#performance">Performance&lt;/a>&lt;/li>
&lt;/ul>
&lt;/nav>
&lt;h2 id="part-1">Part 1&lt;/h2>
&lt;blockquote>
&lt;p>Given a series of 3D blocks, allow them to fall until the simulation is stable. Any cube of a block is sufficient to support another block, ignore rotations etc.&lt;/p>
&lt;p>How many blocks are not the sole supporter for any other block?&lt;/p>
&lt;/blockquote></description></item><item><title>AoC 2023 Day 21: Step Step Stepinator</title><link>https://blog.jverkamp.com/2023/12/21/aoc-2023-day-21-step-step-stepinator/</link><pubDate>Thu, 21 Dec 2023 00:00:03 +0000</pubDate><guid>https://blog.jverkamp.com/2023/12/21/aoc-2023-day-21-step-step-stepinator/</guid><description>&lt;h2 id="source-day-21-step-counterhttpsadventofcodecom2023day21">Source: &lt;a href="https://adventofcode.com/2023/day/21" target="_blank" rel="noopener">Day 21: Step Counter&lt;/a>&lt;/h2>
&lt;p>&lt;a href="https://github.com/jpverkamp/advent-of-code/tree/master/2023/solutions/day21" target="_blank" rel="noopener">Full solution&lt;/a> for today (spoilers!)&lt;/p>
&lt;nav id="TableOfContents">
&lt;ul>
&lt;li>&lt;a href="#source-day-21-step-counterhttpsadventofcodecom2023day21">Source: &lt;a href="https://adventofcode.com/2023/day/21">Day 21: Step Counter&lt;/a>&lt;/a>&lt;/li>
&lt;li>&lt;a href="#part-1">Part 1&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#parsing">Parsing&lt;/a>&lt;/li>
&lt;li>&lt;a href="#solution">Solution&lt;/a>&lt;/li>
&lt;li>&lt;a href="#re-calculating-bounds">Re-calculating Bounds&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#part-2">Part 2&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#brute-force">Brute Force&lt;/a>&lt;/li>
&lt;li>&lt;a href="#solution-1">Solution&lt;/a>&lt;/li>
&lt;li>&lt;a href="#another-option">Another option&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#performance">Performance&lt;/a>&lt;/li>
&lt;/ul>
&lt;/nav>
&lt;h2 id="part-1">Part 1&lt;/h2>
&lt;blockquote>
&lt;p>Given a(n infinite) grid of walls &lt;code>#&lt;/code>, count how many points can be reached by exactly 64 steps from a starting point.&lt;/p>
&lt;/blockquote></description></item><item><title>AoC 2023 Day 20: Flip-Flopinator</title><link>https://blog.jverkamp.com/2023/12/20/aoc-2023-day-20-flip-flopinator/</link><pubDate>Wed, 20 Dec 2023 00:00:03 +0000</pubDate><guid>https://blog.jverkamp.com/2023/12/20/aoc-2023-day-20-flip-flopinator/</guid><description>&lt;h2 id="source-day-20-pulse-propagationhttpsadventofcodecom2023day20">Source: &lt;a href="https://adventofcode.com/2023/day/20" target="_blank" rel="noopener">Day 20: Pulse Propagation&lt;/a>&lt;/h2>
&lt;p>&lt;a href="https://github.com/jpverkamp/advent-of-code/tree/master/2023/solutions/day20" target="_blank" rel="noopener">Full solution&lt;/a> for today (spoilers!)&lt;/p>
&lt;nav id="TableOfContents">
&lt;ul>
&lt;li>&lt;a href="#source-day-20-pulse-propagationhttpsadventofcodecom2023day20">Source: &lt;a href="https://adventofcode.com/2023/day/20">Day 20: Pulse Propagation&lt;/a>&lt;/a>&lt;/li>
&lt;li>&lt;a href="#part-1">Part 1&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#types-and-parsing">Types and Parsing&lt;/a>&lt;/li>
&lt;li>&lt;a href="#solution">Solution&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#part-2">Part 2&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#solution-1-brute-force">Solution 1: Brute Force&lt;/a>&lt;/li>
&lt;li>&lt;a href="#a-pretty-picture">A pretty picture&lt;/a>&lt;/li>
&lt;li>&lt;a href="#solution-2-least-common-multiple">Solution 2: Least common multiple&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#performance">Performance&lt;/a>&lt;/li>
&lt;/ul>
&lt;/nav>
&lt;h2 id="part-1">Part 1&lt;/h2>
&lt;blockquote>
&lt;p>Simulate a virtual circuit with &lt;code>high&lt;/code> and &lt;code>low&lt;/code> pulses and four kinds of chips:&lt;/p>
&lt;ul>
&lt;li>Broadcast - Re-transmit all pulses&lt;/li>
&lt;li>Flip-flops - On a &lt;code>low&lt;/code> pulse, toggle internal state; if it was on, send &lt;code>high&lt;/code>; otherwise send &lt;code>low&lt;/code>&lt;/li>
&lt;li>Conjunction - Remember input from each attached module; if all inputs were &lt;code>high&lt;/code>, send a &lt;code>low&lt;/code>, otherwise send &lt;code>high&lt;/code>&lt;/li>
&lt;li>Output - Do nothing; just receive pulses&lt;/li>
&lt;/ul>
&lt;p>Count the product of &lt;code>low&lt;/code> and &lt;code>high&lt;/code> pulses sent after 1000 &lt;code>low&lt;/code> inputs to &lt;code>broadcaster&lt;/code>.&lt;/p>
&lt;/blockquote></description></item><item><title>AoC 2023 Day 19: Assembly Lininator</title><link>https://blog.jverkamp.com/2023/12/19/aoc-2023-day-19-assembly-lininator/</link><pubDate>Tue, 19 Dec 2023 00:00:03 +0000</pubDate><guid>https://blog.jverkamp.com/2023/12/19/aoc-2023-day-19-assembly-lininator/</guid><description>&lt;h2 id="source-day-19-aplentyhttpsadventofcodecom2023day19">Source: &lt;a href="https://adventofcode.com/2023/day/19" target="_blank" rel="noopener">Day 19: Aplenty&lt;/a>&lt;/h2>
&lt;p>&lt;a href="https://github.com/jpverkamp/advent-of-code/tree/master/2023/solutions/day19" target="_blank" rel="noopener">Full solution&lt;/a> for today (spoilers!)&lt;/p>
&lt;nav id="TableOfContents">
&lt;ul>
&lt;li>&lt;a href="#source-day-19-aplentyhttpsadventofcodecom2023day19">Source: &lt;a href="https://adventofcode.com/2023/day/19">Day 19: Aplenty&lt;/a>&lt;/a>&lt;/li>
&lt;li>&lt;a href="#part-1">Part 1&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#types-and-parsing">Types and Parsing&lt;/a>&lt;/li>
&lt;li>&lt;a href="#simulation">Simulation&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#part-2">Part 2&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#brute-force">Brute Force&lt;/a>&lt;/li>
&lt;li>&lt;a href="#ranges">Ranges&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#performance">Performance&lt;/a>&lt;/li>
&lt;/ul>
&lt;/nav>
&lt;h2 id="part-1">Part 1&lt;/h2>
&lt;blockquote>
&lt;p>You are given a series of parts with 4 ratings as such:&lt;/p>
&lt;p>&lt;code>{x=787,m=2655,a=1222,s=2876}&lt;/code>&lt;/p>
&lt;p>In addition, you are given a series of rules describing a graph as such:&lt;/p>
&lt;p>&lt;code>px{a&amp;lt;2006:qkq,m&amp;gt;2090:A,rfg}&lt;/code>&lt;/p>
&lt;p>In this example, if you are at the node &lt;code>px&lt;/code>, if &lt;code>a &amp;lt; 2006&lt;/code>, move to &lt;code>qkq&lt;/code>. Otherwise, if &lt;code>m &amp;gt; 2090&lt;/code> move to &lt;code>A&lt;/code>. If no other case matches, the last defaults to &lt;code>rfg&lt;/code>.&lt;/p>
&lt;p>&lt;code>A&lt;/code> and &lt;code>R&lt;/code> are special cases for accept and reject.&lt;/p>
&lt;p>Calculate the sum of sum of all four ratings for all nodes that end at &lt;code>Accept&lt;/code>.&lt;/p>
&lt;/blockquote></description></item><item><title>AoC 2023 Day 18: Flood Fillinator</title><link>https://blog.jverkamp.com/2023/12/18/aoc-2023-day-18-flood-fillinator/</link><pubDate>Mon, 18 Dec 2023 00:00:03 +0000</pubDate><guid>https://blog.jverkamp.com/2023/12/18/aoc-2023-day-18-flood-fillinator/</guid><description>&lt;h2 id="source-day-18-lavaduct-lagoonhttpsadventofcodecom2023day18">Source: &lt;a href="https://adventofcode.com/2023/day/18" target="_blank" rel="noopener">Day 18: Lavaduct Lagoon&lt;/a>&lt;/h2>
&lt;p>&lt;a href="https://github.com/jpverkamp/advent-of-code/tree/master/2023/solutions/day18" target="_blank" rel="noopener">Full solution&lt;/a> for today (spoilers!)&lt;/p>
&lt;nav id="TableOfContents">
&lt;ul>
&lt;li>&lt;a href="#source-day-18-lavaduct-lagoonhttpsadventofcodecom2023day18">Source: &lt;a href="https://adventofcode.com/2023/day/18">Day 18: Lavaduct Lagoon&lt;/a>&lt;/a>&lt;/li>
&lt;li>&lt;a href="#part-1">Part 1&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#types-and-parsing">Types and Parsing&lt;/a>&lt;/li>
&lt;li>&lt;a href="#solution">Solution&lt;/a>&lt;/li>
&lt;li>&lt;a href="#adding-flood-fill-to-grid">Adding flood fill to Grid&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#part-2">Part 2&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#using-math">Using MATH&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#performance">Performance&lt;/a>&lt;/li>
&lt;/ul>
&lt;/nav>
&lt;h2 id="part-1">Part 1&lt;/h2>
&lt;blockquote>
&lt;p>Given a sequence of direction + distance that draws a polygon, calculate the area.&lt;/p>
&lt;/blockquote></description></item><item><title>AoC 2023 Day 17: A-Starinator</title><link>https://blog.jverkamp.com/2023/12/17/aoc-2023-day-17-a-starinator/</link><pubDate>Sun, 17 Dec 2023 00:00:03 +0000</pubDate><guid>https://blog.jverkamp.com/2023/12/17/aoc-2023-day-17-a-starinator/</guid><description>&lt;h2 id="source-day-17-clumsy-cruciblehttpsadventofcodecom2023day17">Source: &lt;a href="https://adventofcode.com/2023/day/17" target="_blank" rel="noopener">Day 17: Clumsy Crucible&lt;/a>&lt;/h2>
&lt;p>&lt;a href="https://github.com/jpverkamp/advent-of-code/tree/master/2023/solutions/day17" target="_blank" rel="noopener">Full solution&lt;/a> for today (spoilers!)&lt;/p>
&lt;nav id="TableOfContents">
&lt;ul>
&lt;li>&lt;a href="#source-day-17-clumsy-cruciblehttpsadventofcodecom2023day17">Source: &lt;a href="https://adventofcode.com/2023/day/17">Day 17: Clumsy Crucible&lt;/a>&lt;/a>&lt;/li>
&lt;li>&lt;a href="#part-1">Part 1&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#types-and-parsing">Types and Parsing&lt;/a>&lt;/li>
&lt;li>&lt;a href="#attempts">Attempts&lt;/a>&lt;/li>
&lt;li>&lt;a href="#solution">Solution&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#part-2">Part 2&lt;/a>&lt;/li>
&lt;li>&lt;a href="#performance">Performance&lt;/a>&lt;/li>
&lt;/ul>
&lt;/nav>
&lt;h2 id="part-1">Part 1&lt;/h2>
&lt;blockquote>
&lt;p>Given a grid of costs, find the shortest path from top left to bottom right. You may not double back or go straight more than 3 steps in a row.&lt;/p>
&lt;/blockquote></description></item><item><title>AoC 2023 Day 16: Reflectinator</title><link>https://blog.jverkamp.com/2023/12/16/aoc-2023-day-16-reflectinator/</link><pubDate>Sat, 16 Dec 2023 00:00:03 +0000</pubDate><guid>https://blog.jverkamp.com/2023/12/16/aoc-2023-day-16-reflectinator/</guid><description>&lt;h2 id="source-day-16-the-floor-will-be-lavahttpsadventofcodecom2023day16">Source: &lt;a href="https://adventofcode.com/2023/day/16" target="_blank" rel="noopener">Day 16: The Floor Will Be Lava&lt;/a>&lt;/h2>
&lt;p>&lt;video controls src="https://blog.jverkamp.com/embeds/2023/aoc23-16.mp4">&lt;/video>&lt;/p>
&lt;p>&lt;a href="https://github.com/jpverkamp/advent-of-code/tree/master/2023/solutions/day16" target="_blank" rel="noopener">Full solution&lt;/a> for today (spoilers!)&lt;/p>
&lt;nav id="TableOfContents">
&lt;ul>
&lt;li>&lt;a href="#source-day-16-the-floor-will-be-lavahttpsadventofcodecom2023day16">Source: &lt;a href="https://adventofcode.com/2023/day/16">Day 16: The Floor Will Be Lava&lt;/a>&lt;/a>&lt;/li>
&lt;li>&lt;a href="#part-1">Part 1&lt;/a>&lt;/li>
&lt;li>&lt;a href="#part-2">Part 2&lt;/a>&lt;/li>
&lt;li>&lt;a href="#performance">Performance&lt;/a>&lt;/li>
&lt;li>&lt;a href="#grid">Grid&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#implementation">Implementation&lt;/a>&lt;/li>
&lt;li>&lt;a href="#point">Point&lt;/a>&lt;/li>
&lt;li>&lt;a href="#bounds">Bounds&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#edit-1-adding-to_string-and-to_image-for-grid">Edit 1, Adding to_string and to_image for Grid&lt;/a>&lt;/li>
&lt;/ul>
&lt;/nav>
&lt;h2 id="part-1">Part 1&lt;/h2>
&lt;blockquote>
&lt;p>You are given a grid of mirrors (&lt;code>|-\/&lt;/code>) and empty space (&lt;code>.&lt;/code>).&lt;/p>
&lt;p>Diagonal mirrors just relect the light.&lt;/p>
&lt;p>The horizontal and vertical mirrors are splitters, light hitting them head on (like &lt;code>&amp;gt;|&lt;/code>) will split to go both directions. Light hitting edge on will just go through it.&lt;/p>
&lt;p>Starting in the top left going East, how many total tiles will a light beam illuminate?&lt;/p>
&lt;/blockquote></description></item><item><title>AoC 2023 Day 15: Hashinator</title><link>https://blog.jverkamp.com/2023/12/15/aoc-2023-day-15-hashinator/</link><pubDate>Fri, 15 Dec 2023 00:00:03 +0000</pubDate><guid>https://blog.jverkamp.com/2023/12/15/aoc-2023-day-15-hashinator/</guid><description>&lt;h2 id="source-day-15-lens-libraryhttpsadventofcodecom2023day15">Source: &lt;a href="https://adventofcode.com/2023/day/15" target="_blank" rel="noopener">Day 15: Lens Library&lt;/a>&lt;/h2>
&lt;p>&lt;a href="https://github.com/jpverkamp/advent-of-code/tree/master/2023/solutions/day15" target="_blank" rel="noopener">Full solution&lt;/a> for today (spoilers!)&lt;/p>
&lt;nav id="TableOfContents">
&lt;ul>
&lt;li>&lt;a href="#source-day-15-lens-libraryhttpsadventofcodecom2023day15">Source: &lt;a href="https://adventofcode.com/2023/day/15">Day 15: Lens Library&lt;/a>&lt;/a>&lt;/li>
&lt;li>&lt;a href="#part-1">Part 1&lt;/a>&lt;/li>
&lt;li>&lt;a href="#part-2">Part 2&lt;/a>&lt;/li>
&lt;li>&lt;a href="#performance">Performance&lt;/a>&lt;/li>
&lt;/ul>
&lt;/nav>
&lt;h2 id="part-1">Part 1&lt;/h2>
&lt;blockquote>
&lt;p>Hash each input (comma separated) with &lt;code>h(v, c) = (v + c) * 17&lt;/code> (modulo 256 / as a byte). Sum these values.&lt;/p>
&lt;/blockquote></description></item><item><title>AoC 2023 Day 14: Spininator</title><link>https://blog.jverkamp.com/2023/12/14/aoc-2023-day-14-spininator/</link><pubDate>Thu, 14 Dec 2023 00:00:03 +0000</pubDate><guid>https://blog.jverkamp.com/2023/12/14/aoc-2023-day-14-spininator/</guid><description>&lt;h2 id="source-day-14-parabolic-reflector-dishhttpsadventofcodecom2023day14">Source: &lt;a href="https://adventofcode.com/2023/day/14" target="_blank" rel="noopener">Day 14: Parabolic Reflector Dish&lt;/a>&lt;/h2>
&lt;p>&lt;video controls src="https://blog.jverkamp.com/embeds/2023/aoc23-14-direction.mp4">&lt;/video>&lt;/p>
&lt;p>&lt;a href="https://github.com/jpverkamp/advent-of-code/tree/master/2023/solutions/day14" target="_blank" rel="noopener">Full solution&lt;/a> for today (spoilers!)&lt;/p>
&lt;nav id="TableOfContents">
&lt;ul>
&lt;li>&lt;a href="#source-day-14-parabolic-reflector-dishhttpsadventofcodecom2023day14">Source: &lt;a href="https://adventofcode.com/2023/day/14">Day 14: Parabolic Reflector Dish&lt;/a>&lt;/a>&lt;/li>
&lt;li>&lt;a href="#part-1">Part 1&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#types-and-parsing">Types and parsing&lt;/a>&lt;/li>
&lt;li>&lt;a href="#simulation">Simulation&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#part-2">Part 2&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#solution-spinning-each-way">Solution: Spinning each way&lt;/a>&lt;/li>
&lt;li>&lt;a href="#optimization-1-cycle-detection">Optimization 1: Cycle Detection&lt;/a>&lt;/li>
&lt;li>&lt;a href="#optimization-2-data-structures">Optimization 2: Data Structures&lt;/a>&lt;/li>
&lt;li>&lt;a href="#optimization-3-multislide">Optimization 3: Multislide&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#performance">Performance&lt;/a>&lt;/li>
&lt;li>&lt;a href="#edit-1-optimization-4--removing-a-debugging-line">Edit 1, Optimization 4: &amp;hellip; removing a debugging line&lt;/a>&lt;/li>
&lt;li>&lt;a href="#edit-2-optimization-5-pre-sorting-the-rocks">Edit 2, Optimization 5: Pre-sorting the rocks&lt;/a>&lt;/li>
&lt;li>&lt;a href="#edit-3-rendering">Edit 3, Rendering&lt;/a>&lt;/li>
&lt;/ul>
&lt;/nav>
&lt;h2 id="part-1">Part 1&lt;/h2>
&lt;blockquote>
&lt;p>Given a grid of &lt;code>#&lt;/code> and &lt;code>O&lt;/code> (among empty &lt;code>.&lt;/code> points) where &lt;code>O&lt;/code> can move, slide each &lt;code>O&lt;/code> as far north as it can. Score each based on how far north it is.&lt;/p>
&lt;/blockquote></description></item><item><title>AoC 2023 Day 13: Reflectinator</title><link>https://blog.jverkamp.com/2023/12/13/aoc-2023-day-13-reflectinator/</link><pubDate>Wed, 13 Dec 2023 00:00:03 +0000</pubDate><guid>https://blog.jverkamp.com/2023/12/13/aoc-2023-day-13-reflectinator/</guid><description>&lt;h2 id="source-day-13-point-of-incidencehttpsadventofcodecom2023day13">Source: &lt;a href="https://adventofcode.com/2023/day/13" target="_blank" rel="noopener">Day 13: Point of Incidence&lt;/a>&lt;/h2>
&lt;p>&lt;a href="https://github.com/jpverkamp/advent-of-code/tree/master/2023/solutions/day13" target="_blank" rel="noopener">Full solution&lt;/a> for today (spoilers!)&lt;/p>
&lt;nav id="TableOfContents">
&lt;ul>
&lt;li>&lt;a href="#source-day-13-point-of-incidencehttpsadventofcodecom2023day13">Source: &lt;a href="https://adventofcode.com/2023/day/13">Day 13: Point of Incidence&lt;/a>&lt;/a>&lt;/li>
&lt;li>&lt;a href="#part-1">Part 1&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#basic-types-and-parsing">Basic types and parsing&lt;/a>&lt;/li>
&lt;li>&lt;a href="#reflection">Reflection&lt;/a>&lt;/li>
&lt;li>&lt;a href="#solution">Solution&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#part-2">Part 2&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#refactoring">Refactoring&lt;/a>&lt;/li>
&lt;li>&lt;a href="#solution-1">Solution&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#performance">Performance&lt;/a>&lt;/li>
&lt;/ul>
&lt;/nav>
&lt;h2 id="part-1">Part 1&lt;/h2>
&lt;blockquote>
&lt;p>You are given a grid of &lt;code>.&lt;/code> and &lt;code>#&lt;/code>. Find the (single) axis of reflection (between two rows or columns).&lt;/p>
&lt;/blockquote></description></item><item><title>AoC 2023 Day 12: Question Markinator</title><link>https://blog.jverkamp.com/2023/12/12/aoc-2023-day-12-question-markinator/</link><pubDate>Tue, 12 Dec 2023 00:00:03 +0000</pubDate><guid>https://blog.jverkamp.com/2023/12/12/aoc-2023-day-12-question-markinator/</guid><description>&lt;h2 id="source-day-12-hot-springshttpsadventofcodecom2023day12">Source: &lt;a href="https://adventofcode.com/2023/day/12" target="_blank" rel="noopener">Day 12: Hot Springs&lt;/a>&lt;/h2>
&lt;p>&lt;a href="https://github.com/jpverkamp/advent-of-code/tree/master/2023/solutions/day12" target="_blank" rel="noopener">Full solution&lt;/a> for today (spoilers!)&lt;/p>
&lt;nav id="TableOfContents">
&lt;ul>
&lt;li>&lt;a href="#source-day-12-hot-springshttpsadventofcodecom2023day12">Source: &lt;a href="https://adventofcode.com/2023/day/12">Day 12: Hot Springs&lt;/a>&lt;/a>&lt;/li>
&lt;li>&lt;a href="#part-1">Part 1&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#types-and-parsing">Types and Parsing&lt;/a>&lt;/li>
&lt;li>&lt;a href="#solution">Solution&lt;/a>&lt;/li>
&lt;li>&lt;a href="#cleaning-up">Cleaning up&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#part-2">Part 2&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#almost-brute-force">(Almost) Brute Force&lt;/a>&lt;/li>
&lt;li>&lt;a href="#caching">Caching&lt;/a>&lt;/li>
&lt;li>&lt;a href="#a-choice-of-map">A choice of map&lt;/a>&lt;/li>
&lt;li>&lt;a href="#rewriting-it-with-types">Rewriting it with types&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#performance">Performance&lt;/a>&lt;/li>
&lt;/ul>
&lt;/nav>
&lt;h2 id="part-1">Part 1&lt;/h2>
&lt;blockquote>
&lt;p>Given a sequence of &lt;code>#.?&lt;/code> as on, off, and unknown and a sequence of group sizes, determine how many possible arrangements there are that match the given groups.&lt;/p>
&lt;p>More specifically, if you have &lt;code>???.## 1,2&lt;/code> you need a single &lt;code>#&lt;/code> and a set of two &lt;code>##&lt;/code>, there are three possibilities: &lt;code>#...###&lt;/code>, &lt;code>.#..###&lt;/code>, and &lt;code>..#.###&lt;/code>.&lt;/p>
&lt;/blockquote></description></item><item><title>AoC 2023 Day 11: Big Banginator</title><link>https://blog.jverkamp.com/2023/12/11/aoc-2023-day-11-big-banginator/</link><pubDate>Mon, 11 Dec 2023 00:00:03 +0000</pubDate><guid>https://blog.jverkamp.com/2023/12/11/aoc-2023-day-11-big-banginator/</guid><description>&lt;h2 id="source-day-11-cosmic-expansionhttpsadventofcodecom2023day11">Source: &lt;a href="https://adventofcode.com/2023/day/11" target="_blank" rel="noopener">Day 11: Cosmic Expansion&lt;/a>&lt;/h2>
&lt;p>&lt;a href="https://github.com/jpverkamp/advent-of-code/tree/master/2023/solutions/day11" target="_blank" rel="noopener">Full solution&lt;/a> for today (spoilers!)&lt;/p>
&lt;nav id="TableOfContents">
&lt;ul>
&lt;li>&lt;a href="#source-day-11-cosmic-expansionhttpsadventofcodecom2023day11">Source: &lt;a href="https://adventofcode.com/2023/day/11">Day 11: Cosmic Expansion&lt;/a>&lt;/a>&lt;/li>
&lt;li>&lt;a href="#part-1">Part 1&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#parsing">Parsing&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#part-2">Part 2&lt;/a>&lt;/li>
&lt;li>&lt;a href="#performance">Performance&lt;/a>&lt;/li>
&lt;/ul>
&lt;/nav>
&lt;h2 id="part-1">Part 1&lt;/h2>
&lt;blockquote>
&lt;p>Read a grid of &lt;code>#&lt;/code> (stars) and &lt;code>.&lt;/code> (empty space). For each completely empty line or row, add another. Calculate the sum of the &lt;a href="https://en.wikipedia.org/wiki/Manhattan%20distances">Manhattan distances&lt;/a> between all pairs of stars.&lt;/p>
&lt;/blockquote></description></item><item><title>AoC 2023 Day 10: Pipinator</title><link>https://blog.jverkamp.com/2023/12/10/aoc-2023-day-10-pipinator/</link><pubDate>Sun, 10 Dec 2023 00:00:03 +0000</pubDate><guid>https://blog.jverkamp.com/2023/12/10/aoc-2023-day-10-pipinator/</guid><description>&lt;h2 id="source-day-10-pipe-mazehttpsadventofcodecom2023day10">Source: &lt;a href="https://adventofcode.com/2023/day/10" target="_blank" rel="noopener">Day 10: Pipe Maze&lt;/a>&lt;/h2>
&lt;p>&lt;a href="https://github.com/jpverkamp/advent-of-code/tree/master/2023/solutions/day10" target="_blank" rel="noopener">Full solution&lt;/a> for today (spoilers!)&lt;/p>
&lt;nav id="TableOfContents">
&lt;ul>
&lt;li>&lt;a href="#source-day-10-pipe-mazehttpsadventofcodecom2023day10">Source: &lt;a href="https://adventofcode.com/2023/day/10">Day 10: Pipe Maze&lt;/a>&lt;/a>&lt;/li>
&lt;li>&lt;a href="#part-1">Part 1&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#types-and-parsing">Types and Parsing&lt;/a>&lt;/li>
&lt;li>&lt;a href="#iterating">Iterating&lt;/a>&lt;/li>
&lt;li>&lt;a href="#solution">Solution&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#part-2">Part 2&lt;/a>&lt;/li>
&lt;li>&lt;a href="#performance">Performance&lt;/a>&lt;/li>
&lt;/ul>
&lt;/nav>
&lt;h2 id="part-1">Part 1&lt;/h2>
&lt;blockquote>
&lt;p>You are given as input an &lt;a href="https://en.wikipedia.org/wiki/ASCII%20art">ASCII art&lt;/a> pipe diagram with straight pipes &lt;code>|-&lt;/code>, right angle turns &lt;code>LJ7F&lt;/code>, ground &lt;code>.&lt;/code>, and a start tile &lt;code>S&lt;/code>.&lt;/p>
&lt;p>The start tile will be part of a loop of pipes.&lt;/p>
&lt;p>Find the distance to the furthest connected pipe segment from &lt;code>S&lt;/code> (or half the length of the loop).&lt;/p>
&lt;/blockquote></description></item><item><title>AoC 2023 Day 9: Stackinator</title><link>https://blog.jverkamp.com/2023/12/09/aoc-2023-day-9-stackinator/</link><pubDate>Sat, 09 Dec 2023 00:00:03 +0000</pubDate><guid>https://blog.jverkamp.com/2023/12/09/aoc-2023-day-9-stackinator/</guid><description>&lt;h2 id="source-day-9-mirage-maintenancehttpsadventofcodecom2023day9">Source: &lt;a href="https://adventofcode.com/2023/day/9" target="_blank" rel="noopener">Day 9: Mirage Maintenance&lt;/a>&lt;/h2>
&lt;p>&lt;a href="https://github.com/jpverkamp/advent-of-code/tree/master/2023/solutions/day09" target="_blank" rel="noopener">Full solution&lt;/a> for today (spoilers!)&lt;/p>
&lt;nav id="TableOfContents">
&lt;ul>
&lt;li>&lt;a href="#source-day-9-mirage-maintenancehttpsadventofcodecom2023day9">Source: &lt;a href="https://adventofcode.com/2023/day/9">Day 9: Mirage Maintenance&lt;/a>&lt;/a>&lt;/li>
&lt;li>&lt;a href="#part-1">Part 1&lt;/a>&lt;/li>
&lt;li>&lt;a href="#part-2">Part 2&lt;/a>&lt;/li>
&lt;li>&lt;a href="#performance">Performance&lt;/a>&lt;/li>
&lt;/ul>
&lt;/nav>
&lt;h2 id="part-1">Part 1&lt;/h2>
&lt;blockquote>
&lt;p>Given a list of terms, repeatedly calculate the differences of terms until these differences are 0. So:&lt;/p>
&lt;pre>&lt;code>0 3 6 9 12 15
3 3 3 3 3
0 0 0 0
&lt;/code>&lt;/pre>
&lt;p>Calculate the sum of next terms for each sequence (18 for this one).&lt;/p>
&lt;/blockquote></description></item><item><title>AoC 2023 Day 8: Mazinator</title><link>https://blog.jverkamp.com/2023/12/08/aoc-2023-day-8-mazinator/</link><pubDate>Fri, 08 Dec 2023 00:00:03 +0000</pubDate><guid>https://blog.jverkamp.com/2023/12/08/aoc-2023-day-8-mazinator/</guid><description>&lt;h2 id="source-day-8-haunted-wastelandhttpsadventofcodecom2023day8">Source: &lt;a href="https://adventofcode.com/2023/day/8" target="_blank" rel="noopener">Day 8: Haunted Wasteland&lt;/a>&lt;/h2>
&lt;p>&lt;a href="https://github.com/jpverkamp/advent-of-code/tree/master/2023/solutions/day08" target="_blank" rel="noopener">Full solution&lt;/a> for today (spoilers!)&lt;/p>
&lt;nav id="TableOfContents">
&lt;ul>
&lt;li>&lt;a href="#source-day-8-haunted-wastelandhttpsadventofcodecom2023day8">Source: &lt;a href="https://adventofcode.com/2023/day/8">Day 8: Haunted Wasteland&lt;/a>&lt;/a>&lt;/li>
&lt;li>&lt;a href="#part-1">Part 1&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#types-and-parsing">Types and Parsing&lt;/a>&lt;/li>
&lt;li>&lt;a href="#solution">Solution&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#part-2">Part 2&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#brute-force">Brute Force&lt;/a>&lt;/li>
&lt;li>&lt;a href="#detecting-cycles">Detecting Cycles&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#performance">Performance&lt;/a>&lt;/li>
&lt;/ul>
&lt;/nav>
&lt;h2 id="part-1">Part 1&lt;/h2>
&lt;blockquote>
&lt;p>Given a (repeated) sequence of moves (&lt;code>L&lt;/code> for left and &lt;code>R&lt;/code> for right) and a directed graph where each node has two neighbors (left and right), count how many total steps it takes to get from the node &lt;code>AAA&lt;/code> to the node &lt;code>ZZZ&lt;/code>. The sequence of moves can (and will) need to repeat.&lt;/p>
&lt;/blockquote></description></item><item><title>AoC 2023 Day 7: Pokinator</title><link>https://blog.jverkamp.com/2023/12/07/aoc-2023-day-7-pokinator/</link><pubDate>Thu, 07 Dec 2023 00:00:03 +0000</pubDate><guid>https://blog.jverkamp.com/2023/12/07/aoc-2023-day-7-pokinator/</guid><description>&lt;h2 id="source-day-7-camel-cardshttpsadventofcodecom2023day7">Source: &lt;a href="https://adventofcode.com/2023/day/7" target="_blank" rel="noopener">Day 7: Camel Cards&lt;/a>&lt;/h2>
&lt;p>&lt;a href="https://github.com/jpverkamp/advent-of-code/tree/master/2023/solutions/day07" target="_blank" rel="noopener">Full solution&lt;/a> for today (spoilers!)&lt;/p>
&lt;nav id="TableOfContents">
&lt;ul>
&lt;li>&lt;a href="#source-day-7-camel-cardshttpsadventofcodecom2023day7">Source: &lt;a href="https://adventofcode.com/2023/day/7">Day 7: Camel Cards&lt;/a>&lt;/a>&lt;/li>
&lt;li>&lt;a href="#part-1">Part 1&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#types-and-parsing">Types and Parsing&lt;/a>&lt;/li>
&lt;li>&lt;a href="#solving-the-problem">Solving the Problem&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#part-2">Part 2&lt;/a>&lt;/li>
&lt;li>&lt;a href="#performance">Performance&lt;/a>&lt;/li>
&lt;/ul>
&lt;/nav>
&lt;h2 id="part-1">Part 1&lt;/h2>
&lt;blockquote>
&lt;p>Simulate a limited poker game with no suits and break otherwise tied hands &lt;a href="https://en.wikipedia.org/wiki/lexicographically">lexicographically&lt;/a> (&lt;code>AAAA2&lt;/code> beats &lt;code>AKAAA&lt;/code>) because the the hands are both four of a kind, the first cards are both &lt;code>A&lt;/code>, but the second &lt;code>A&lt;/code> beats the &lt;code>K&lt;/code>. It doesn&amp;rsquo;t matter that the first hand&amp;rsquo;s off card was a &lt;code>2&lt;/code>&lt;/p>
&lt;p>Order all hands then calculate the sum of the ordering of hands (1 for best etc) times the bet for each.&lt;/p>
&lt;/blockquote></description></item><item><title>AoC 2023 Day 6: Racinator</title><link>https://blog.jverkamp.com/2023/12/06/aoc-2023-day-6-racinator/</link><pubDate>Wed, 06 Dec 2023 00:00:03 +0000</pubDate><guid>https://blog.jverkamp.com/2023/12/06/aoc-2023-day-6-racinator/</guid><description>&lt;h2 id="source-day-6-wait-for-ithttpsadventofcodecom2023day6">Source: &lt;a href="https://adventofcode.com/2023/day/6" target="_blank" rel="noopener">Day 6: Wait For It&lt;/a>&lt;/h2>
&lt;p>&lt;a href="https://github.com/jpverkamp/advent-of-code/tree/master/2023/solutions/day06" target="_blank" rel="noopener">Full solution&lt;/a> for today (spoilers!)&lt;/p>
&lt;nav id="TableOfContents">
&lt;ul>
&lt;li>&lt;a href="#source-day-6-wait-for-ithttpsadventofcodecom2023day6">Source: &lt;a href="https://adventofcode.com/2023/day/6">Day 6: Wait For It&lt;/a>&lt;/a>&lt;/li>
&lt;li>&lt;a href="#part-1">Part 1&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#types-and-parsing">Types and Parsing&lt;/a>&lt;/li>
&lt;li>&lt;a href="#initial-brute-force-solution">Initial Brute Force Solution&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#part-2">Part 2&lt;/a>&lt;/li>
&lt;li>&lt;a href="#premature-optimization">(Premature) Optimization&lt;/a>&lt;/li>
&lt;/ul>
&lt;/nav>
&lt;h2 id="part-1">Part 1&lt;/h2>
&lt;blockquote>
&lt;p>Simulate charging up race boats with the behavior that waiting X seconds to start means you move at X units per second. Given time allowed and a target distance, determine how many (integer) numbers of seconds will beat the target distance.&lt;/p>
&lt;/blockquote></description></item><item><title>AoC 2023 Day 5: Growinator</title><link>https://blog.jverkamp.com/2023/12/05/aoc-2023-day-5-growinator/</link><pubDate>Tue, 05 Dec 2023 00:00:03 +0000</pubDate><guid>https://blog.jverkamp.com/2023/12/05/aoc-2023-day-5-growinator/</guid><description>&lt;h2 id="source-day-5-if-you-give-a-seed-a-fertilizerhttpsadventofcodecom2023day5">Source: &lt;a href="https://adventofcode.com/2023/day/5" target="_blank" rel="noopener">Day 5: If You Give A Seed A Fertilizer&lt;/a>&lt;/h2>
&lt;p>&lt;a href="https://github.com/jpverkamp/advent-of-code/tree/master/2023/solutions/day05" target="_blank" rel="noopener">Full solution&lt;/a> for today (spoilers!)&lt;/p>
&lt;nav id="TableOfContents">
&lt;ul>
&lt;li>&lt;a href="#source-day-5-if-you-give-a-seed-a-fertilizerhttpsadventofcodecom2023day5">Source: &lt;a href="https://adventofcode.com/2023/day/5">Day 5: If You Give A Seed A Fertilizer&lt;/a>&lt;/a>&lt;/li>
&lt;li>&lt;a href="#part-1">Part 1&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#types">Types&lt;/a>&lt;/li>
&lt;li>&lt;a href="#parsing">Parsing&lt;/a>&lt;/li>
&lt;li>&lt;a href="#solution">Solution&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#part-2">Part 2&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#solution-1-brute-force">Solution 1: Brute Force&lt;/a>&lt;/li>
&lt;li>&lt;a href="#solution-2-parallel-brute-force">Solution 2: Parallel Brute Force&lt;/a>&lt;/li>
&lt;li>&lt;a href="#solution-3-treat-the-ranges-as--ranges">Solution 3: Treat the Ranges as &amp;hellip; Ranges&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#performance">Performance&lt;/a>&lt;/li>
&lt;/ul>
&lt;/nav>
&lt;h2 id="part-1">Part 1&lt;/h2>
&lt;blockquote>
&lt;p>You are given a set of initial values (seeds) and a series of range maps (where a range of numbers &lt;code>src..src+len&lt;/code> maps to &lt;code>dst..dst+len&lt;/code>). Apply each range map in tur, return the lowest resulting value.&lt;/p>
&lt;/blockquote></description></item><item><title>AoC 2023 Day 4: Scratchinator</title><link>https://blog.jverkamp.com/2023/12/04/aoc-2023-day-4-scratchinator/</link><pubDate>Mon, 04 Dec 2023 00:00:03 +0000</pubDate><guid>https://blog.jverkamp.com/2023/12/04/aoc-2023-day-4-scratchinator/</guid><description>&lt;h2 id="source-day-4-scratchcardshttpsadventofcodecom2023day4">Source: &lt;a href="https://adventofcode.com/2023/day/4" target="_blank" rel="noopener">Day 4: Scratchcards&lt;/a>&lt;/h2>
&lt;p>&lt;a href="https://github.com/jpverkamp/advent-of-code/tree/master/2023/solutions/day04" target="_blank" rel="noopener">Full solution&lt;/a> for today (spoilers!). Note: I did slightly change my solutions template after writing this blog post, so the final solution is structured slightly differently than the code in this post. The functionality itself hasn&amp;rsquo;t changed.&lt;/p>
&lt;nav id="TableOfContents">
&lt;ul>
&lt;li>&lt;a href="#source-day-4-scratchcardshttpsadventofcodecom2023day4">Source: &lt;a href="https://adventofcode.com/2023/day/4">Day 4: Scratchcards&lt;/a>&lt;/a>&lt;/li>
&lt;li>&lt;a href="#part-1">Part 1&lt;/a>&lt;/li>
&lt;li>&lt;a href="#part-2">Part 2&lt;/a>&lt;/li>
&lt;li>&lt;a href="#performance">Performance&lt;/a>&lt;/li>
&lt;/ul>
&lt;/nav>
&lt;h2 id="part-1">Part 1&lt;/h2>
&lt;blockquote>
&lt;p>Simulate &lt;a href="https://en.wikipedia.org/wiki/scratchcards">scratchcards&lt;/a>. Given a list of winning numbers and guessed numbers, count how many guessed numbers are in the winning list. Your score is 1, 2, 4, 8, &amp;hellip; for 1, 2, 3, 4, &amp;hellip; matching numbers.&lt;/p>
&lt;/blockquote></description></item><item><title>AoC 2023 Day 3: Gearinator</title><link>https://blog.jverkamp.com/2023/12/03/aoc-2023-day-3-gearinator/</link><pubDate>Sun, 03 Dec 2023 00:00:03 +0000</pubDate><guid>https://blog.jverkamp.com/2023/12/03/aoc-2023-day-3-gearinator/</guid><description>&lt;h2 id="source-day-3-gear-ratioshttpsadventofcodecom2023day3">Source: &lt;a href="https://adventofcode.com/2023/day/3" target="_blank" rel="noopener">Day 3: Gear Ratios&lt;/a>&lt;/h2>
&lt;p>&lt;a href="https://github.com/jpverkamp/advent-of-code/tree/master/2023/solutions/day03" target="_blank" rel="noopener">Full solution&lt;/a> for today (spoilers!). Note: I did slightly change my solutions template after writing this blog post, so the final solution is structured slightly differently than the code in this post. The functionality itself hasn&amp;rsquo;t changed.&lt;/p>
&lt;nav id="TableOfContents">
&lt;ul>
&lt;li>&lt;a href="#source-day-3-gear-ratioshttpsadventofcodecom2023day3">Source: &lt;a href="https://adventofcode.com/2023/day/3">Day 3: Gear Ratios&lt;/a>&lt;/a>&lt;/li>
&lt;li>&lt;a href="#part-1">Part 1&lt;/a>&lt;/li>
&lt;li>&lt;a href="#part-2">Part 2&lt;/a>&lt;/li>
&lt;li>&lt;a href="#performance">Performance&lt;/a>&lt;/li>
&lt;/ul>
&lt;/nav>
&lt;h2 id="part-1">Part 1&lt;/h2>
&lt;blockquote>
&lt;p>Take as input a 2D grid of numbers or symbols (&lt;code>.&lt;/code> represents empty space). Numbers will be 1 or more digits written horizontally which should be concatenated (&lt;code>.467*&lt;/code> is the number &lt;code>467&lt;/code> followed by the symbol &lt;code>*&lt;/code>).&lt;/p>
&lt;p>Sum all numbers that are adjacent (including diagonally) to at least one symbol.&lt;/p>
&lt;/blockquote></description></item><item><title>AoC 2023 Day 2: Playinator</title><link>https://blog.jverkamp.com/2023/12/02/aoc-2023-day-2-playinator/</link><pubDate>Sat, 02 Dec 2023 00:00:03 +0000</pubDate><guid>https://blog.jverkamp.com/2023/12/02/aoc-2023-day-2-playinator/</guid><description>&lt;h2 id="source-day-2-cube-conundrumhttpsadventofcodecom2023day2">Source: &lt;a href="https://adventofcode.com/2023/day/2" target="_blank" rel="noopener">Day 2: Cube Conundrum&lt;/a>&lt;/h2>
&lt;p>&lt;a href="https://github.com/jpverkamp/advent-of-code/tree/master/2023/solutions/day02" target="_blank" rel="noopener">Full solution&lt;/a> for today (spoilers!). Note: I did slightly change my solutions template after writing this blog post, so the final solution is structured slightly differently than the code in this post. The functionality itself hasn&amp;rsquo;t changed.&lt;/p>
&lt;nav id="TableOfContents">
&lt;ul>
&lt;li>&lt;a href="#source-day-2-cube-conundrumhttpsadventofcodecom2023day2">Source: &lt;a href="https://adventofcode.com/2023/day/2">Day 2: Cube Conundrum&lt;/a>&lt;/a>&lt;/li>
&lt;li>&lt;a href="#part-1">Part 1&lt;/a>&lt;/li>
&lt;li>&lt;a href="#part-2">Part 2&lt;/a>&lt;/li>
&lt;li>&lt;a href="#performance">Performance&lt;/a>&lt;/li>
&lt;/ul>
&lt;/nav>
&lt;h2 id="part-1">Part 1&lt;/h2>
&lt;blockquote>
&lt;p>Play a game where you have some number of red, green, and blue dice in a cup, which you draw and roll (without replacement). Which game is possible with only 12 red, 13 gree, and 14 blue cubes?&lt;/p>
&lt;/blockquote>
&lt;p>Input will look like: &lt;code>Game 1: 3 blue, 4 red; 1 red, 2 green, 6 blue; 2 green&lt;/code>&lt;/p></description></item><item><title>AoC 2023 Day 1: Calibrationinator</title><link>https://blog.jverkamp.com/2023/12/01/aoc-2023-day-1-calibrationinator/</link><pubDate>Fri, 01 Dec 2023 00:00:03 +0000</pubDate><guid>https://blog.jverkamp.com/2023/12/01/aoc-2023-day-1-calibrationinator/</guid><description>&lt;h2 id="source-day-1-trebuchethttpsadventofcodecom2023day1">Source: &lt;a href="https://adventofcode.com/2023/day/1" target="_blank" rel="noopener">Day 1: Trebuchet?!&lt;/a>&lt;/h2>
&lt;p>&lt;a href="https://github.com/jpverkamp/advent-of-code/tree/master/2023/solutions/day01" target="_blank" rel="noopener">Full solution&lt;/a> for today (spoilers!). Note: I did slightly change my solutions template after writing this blog post, so the final solution is structured slightly differently than the code in this post. The functionality itself hasn&amp;rsquo;t changed.&lt;/p>
&lt;nav id="TableOfContents">
&lt;ul>
&lt;li>&lt;a href="#source-day-1-trebuchethttpsadventofcodecom2023day1">Source: &lt;a href="https://adventofcode.com/2023/day/1">Day 1: Trebuchet?!&lt;/a>&lt;/a>&lt;/li>
&lt;li>&lt;a href="#part-1">Part 1&lt;/a>&lt;/li>
&lt;li>&lt;a href="#part-2">Part 2&lt;/a>&lt;/li>
&lt;li>&lt;a href="#performance">Performance&lt;/a>&lt;/li>
&lt;/ul>
&lt;/nav>
&lt;h2 id="part-1">Part 1&lt;/h2>
&lt;blockquote>
&lt;p>Given a list of alphanumeric strings, find the first and last digit on each line (they may be the same). Concatenate each pair and sum them.&lt;/p>
&lt;/blockquote></description></item><item><title>Advent of Code 2023</title><link>https://blog.jverkamp.com/2023/12/01/advent-of-code-2023/</link><pubDate>Fri, 01 Dec 2023 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2023/12/01/advent-of-code-2023/</guid><description>&lt;p>Another year, another &lt;a href="https://blog.jverkamp.com/2015/12/01/advent-of-code/">Advent of Code&lt;/a>.&lt;/p>
&lt;p>Like last year, we&amp;rsquo;re doing Rust. I&amp;rsquo;ve really grown to love the language since last year&amp;hellip; and hopefully I&amp;rsquo;ve learned a bit more about how to write more &amp;lsquo;proper&amp;rsquo; Rust. I know I had some issues last year. Functional&amp;hellip; but it could be better.&lt;/p>
&lt;p>Let&amp;rsquo;s see how it goes!&lt;/p>
&lt;p>For full solutions, as always, I post to GitHub (including previous years and possibly some I haven&amp;rsquo;t written up yet): &lt;a href="https://github.com/jpverkamp/advent-of-code">jpverkamp/advent-of-code&lt;/a>&lt;/p></description></item><item><title>StackLang Part V: Compiling to C</title><link>https://blog.jverkamp.com/2023/07/12/stacklang-part-v-compiling-to-c/</link><pubDate>Wed, 12 Jul 2023 12:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2023/07/12/stacklang-part-v-compiling-to-c/</guid><description>&lt;p>It&amp;rsquo;s been a bit, but I hope it&amp;rsquo;s worth it. StackLang, part 5: compiling to C!&lt;/p></description></item><item><title>StackLang Part IV: An Interpreter</title><link>https://blog.jverkamp.com/2023/05/01/stacklang-part-iv-an-interpreter/</link><pubDate>Mon, 01 May 2023 23:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2023/05/01/stacklang-part-iv-an-interpreter/</guid><description>&lt;p>StackLang, part 4: an interpreter. Here we go again!&lt;/p>
&lt;p>This time, the goal is to actually get code running&lt;/p></description></item><item><title>StackLang Part III: The Parser</title><link>https://blog.jverkamp.com/2023/04/24/stacklang-part-iii-the-parser/</link><pubDate>Mon, 24 Apr 2023 00:01:00 +0000</pubDate><guid>https://blog.jverkamp.com/2023/04/24/stacklang-part-iii-the-parser/</guid><description>&lt;p>StackLang, part 3: parsing. This is going to be the most complicated one thus far! Onward.&lt;/p></description></item><item><title>StackLang Part II: The Lexer</title><link>https://blog.jverkamp.com/2023/04/16/stacklang-part-ii-the-lexer/</link><pubDate>Sun, 16 Apr 2023 23:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2023/04/16/stacklang-part-ii-the-lexer/</guid><description>&lt;p>StackLang, part 2: lexing.&lt;/p>
&lt;p>It&amp;rsquo;s quite often the simplest part of implementing a programming language (although parsers for s-expression based languages come close), but it&amp;rsquo;s still something that needs done. So here we go!&lt;/p></description></item><item><title>StackLang Part I: The Idea</title><link>https://blog.jverkamp.com/2023/04/14/stacklang-part-i-the-idea/</link><pubDate>Fri, 14 Apr 2023 23:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2023/04/14/stacklang-part-i-the-idea/</guid><description>&lt;p>I enjoy writing programming languages. &lt;a href="https://blog.jverkamp.com/2013/08/21/a-tiny-virtual-machine-in-racket/">Example: Tiny&lt;/a>. Letâ€™s do that again.&lt;/p>
&lt;p>This time, StackLang:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-text" data-lang="text">&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> @[n fact]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> { n 1 - $fact fact n * }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> N 1 &amp;lt;= if
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>} @fact
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>5 $fact fact writeln
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Bit of gibberish there, I suppose, but the goal is to write everything in a postfix/stack based model. So &lt;code>n 1 - $fact fact n *&lt;/code> is equivalent to &lt;code>fact(fact, n - 1) * n&lt;/code> in a more traditional language.&lt;/p>
&lt;p>Over the next few posts, I hope to write up where I am thus far and whatâ€™s next.&lt;/p></description></item><item><title>Redis in Rust: Evictions and Implementations</title><link>https://blog.jverkamp.com/2023/03/26/redis-in-rust-evictions-and-implementations/</link><pubDate>Sun, 26 Mar 2023 00:00:15 +0000</pubDate><guid>https://blog.jverkamp.com/2023/03/26/redis-in-rust-evictions-and-implementations/</guid><description>&lt;p>Another Redis in Rust series. It&amp;rsquo;s really starting to come together now!&lt;/p>
&lt;p>In this post, updating the state to store expiration times + a thread to handle said eviction + the implementation of a small pile more of the general Redis functions.&lt;/p>
&lt;nav id="TableOfContents">
&lt;ul>
&lt;li>&lt;a href="#better-redis-function-definitions">Better Redis function definitions&lt;/a>&lt;/li>
&lt;li>&lt;a href="#re-parsing-set">Re-parsing SET&lt;/a>&lt;/li>
&lt;li>&lt;a href="#implementing-ttl-on-the-state">Implementing TTL on the state&lt;/a>&lt;/li>
&lt;li>&lt;a href="#expiration-thread">Expiration thread&lt;/a>&lt;/li>
&lt;li>&lt;a href="#a-few-more-examples">A few more examples&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#decr">DECR&lt;/a>&lt;/li>
&lt;li>&lt;a href="#getrange">GETRANGE&lt;/a>&lt;/li>
&lt;li>&lt;a href="#mget">MGET&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#github-copilot">Github Copilot&lt;/a>&lt;/li>
&lt;li>&lt;a href="#full-source">Full source&lt;/a>&lt;/li>
&lt;li>&lt;a href="#next-steps">Next steps&lt;/a>&lt;/li>
&lt;/ul>
&lt;/nav></description></item><item><title>Redis in Rust: Testing redis-cli + GET/SET support</title><link>https://blog.jverkamp.com/2023/02/28/redis-in-rust-testing-redis-cli--get/set-support/</link><pubDate>Tue, 28 Feb 2023 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2023/02/28/redis-in-rust-testing-redis-cli--get/set-support/</guid><description>&lt;p>And I&amp;rsquo;m back. It&amp;rsquo;s been a busy month with the [Genuary]([Genuary 2023]) series and life in general, but I&amp;rsquo;m still thinking about Redis in general ðŸ˜„.&lt;/p>
&lt;p>Up this time, let&amp;rsquo;s see what the official &lt;code>redis-cli&lt;/code> app does when talking to our client and actually start handling some commands. Specifically, the very basic commands: &lt;code>SET&lt;/code> and &lt;code>GET&lt;/code>. With that, we would actually have a (very very basic) keystore up and running!&lt;/p>
&lt;nav id="TableOfContents">
&lt;ul>
&lt;li>&lt;a href="#testing-the-client">Testing the client&lt;/a>&lt;/li>
&lt;li>&lt;a href="#implementing-commands">Implementing Commands&lt;/a>&lt;/li>
&lt;li>&lt;a href="#parsing-and-running-a-command">Parsing and running a &lt;code>Command&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="#set-and-get">SET and GET&lt;/a>&lt;/li>
&lt;li>&lt;a href="#testing-with-our-client">Testing with our client&lt;/a>&lt;/li>
&lt;li>&lt;a href="#full-source">Full source&lt;/a>&lt;/li>
&lt;li>&lt;a href="#next-steps">Next steps&lt;/a>&lt;/li>
&lt;/ul>
&lt;/nav></description></item><item><title>Redis in Rust: A REPL Client [Part 3]</title><link>https://blog.jverkamp.com/2023/02/09/redis-in-rust-a-repl-client-part-3/</link><pubDate>Thu, 09 Feb 2023 01:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2023/02/09/redis-in-rust-a-repl-client-part-3/</guid><description>&lt;p>Okay, we&amp;rsquo;ve got a server and we can ping it. Let&amp;rsquo;s actually make a simple client, so I don&amp;rsquo;t have to do funny things with echo any more. Specifically, let&amp;rsquo;s make a &lt;a href="https://en.wikipedia.org/wiki/REPL">REPL&lt;/a>!&lt;/p>
&lt;nav id="TableOfContents">
&lt;ul>
&lt;li>&lt;a href="#a-repl">A REPL&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#the-code">The code&lt;/a>&lt;/li>
&lt;li>&lt;a href="#unsafe">&lt;code>unsafe&lt;/code>&amp;hellip;&lt;/a>&lt;/li>
&lt;li>&lt;a href="#server">Server&lt;/a>&lt;/li>
&lt;li>&lt;a href="#client">Client&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#whats-next">What&amp;rsquo;s next?&lt;/a>&lt;/li>
&lt;/ul>
&lt;/nav></description></item><item><title>Redis in Rust: An Echo Server [Part 2]</title><link>https://blog.jverkamp.com/2023/02/04/redis-in-rust-an-echo-server-part-2/</link><pubDate>Sat, 04 Feb 2023 23:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2023/02/04/redis-in-rust-an-echo-server-part-2/</guid><description>&lt;p>Following up from &lt;a href="https://blog.jverkamp.com/2023/01/31/cloning-redis-in-rust-resp-part-1/">Cloning Redis in Rust: RESP [Part 1]&lt;/a>, we can parse the protocol. So now&amp;hellip; let&amp;rsquo;s do something with it.&lt;/p>
&lt;p>The obvious(ish) next step, in my mind? Make a server. It&amp;rsquo;s all going to be over the network eventually, so it&amp;rsquo;s either here or storing data. Here it is!&lt;/p>
&lt;p>Specifically, my goal is &lt;em>not&lt;/em> to build the networking and data structures for this project from scratch. Where there are primitives or libraries that will do something like networking for me, I&amp;rsquo;m going to use them.&lt;/p>
&lt;p>Ergo:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://docs.rs/tokio/latest/tokio/" target="_blank" rel="noopener">&lt;code>tokio&lt;/code>&lt;/a> for networking (+ async)&lt;/li>
&lt;li>&lt;a href="https://docs.rs/tracing/latest/tracing/" target="_blank" rel="noopener">&lt;code>tracing&lt;/code>&lt;/a> for logging&lt;/li>
&lt;/ul>
&lt;p>So, how do I write a simple server in Tokio?&lt;/p>
&lt;nav id="TableOfContents">
&lt;ul>
&lt;li>&lt;a href="#im-listening">I&amp;rsquo;m listening!&lt;/a>&lt;/li>
&lt;li>&lt;a href="#what-did-you-say-again">What did you say again?&lt;/a>&lt;/li>
&lt;li>&lt;a href="#actually-asynchronously">Actually asynchronously&lt;/a>&lt;/li>
&lt;li>&lt;a href="#doing-the-lumberjack-thing">Doing the lumberjack thing.&lt;/a>&lt;/li>
&lt;li>&lt;a href="#so-werent-we-doing-something-with-redis">So&amp;hellip; weren&amp;rsquo;t we doing something with Redis?&lt;/a>&lt;/li>
&lt;li>&lt;a href="#is-that-it">Is that it?&lt;/a>&lt;/li>
&lt;/ul>
&lt;/nav></description></item><item><title>Cloning Redis in Rust: RESP [Part 1]</title><link>https://blog.jverkamp.com/2023/01/31/cloning-redis-in-rust-resp-part-1/</link><pubDate>Tue, 31 Jan 2023 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2023/01/31/cloning-redis-in-rust-resp-part-1/</guid><description>&lt;p>Recently, I read through &lt;a href="https://blog.jverkamp.com/2023/01/31/build-your-own-redis-with-c/c-/">Build Your Own Redis with C/C&amp;#43;&amp;#43;&lt;/a>. C/C++ are ugly, so let&amp;rsquo;s run through it in Rust!&lt;/p>
&lt;p>My goal: implement some large subset of &lt;a href="https://redis.io/" target="_blank" rel="noopener">Redis&lt;/a> (both server and client) in Rust. For any features I implement, it should be compatible with Redis off the shelf. I should be able to use their client with my server and their server with my client and it should just work.&lt;/p>
&lt;p>No idea if this is going to work out, but it sounds like an interesting problem!&lt;/p>
&lt;p>First task: &lt;a href="https://redis.io/docs/reference/protocol-spec/" target="_blank" rel="noopener">the REdis Serialization Protocol (RESP)&lt;/a>.&lt;/p></description></item><item><title>Proc Macro Workshop: derive(Builder) [Part 2]</title><link>https://blog.jverkamp.com/2023/01/17/proc-macro-workshop-derivebuilder-part-2/</link><pubDate>Tue, 17 Jan 2023 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2023/01/17/proc-macro-workshop-derivebuilder-part-2/</guid><description>&lt;p>Okay, in &lt;a href="https://blog.jverkamp.com/2023/01/15/proc-macro-workshop-derivebuilder-part-1/">Proc Macro Workshop: derive(Builder) [Part 1]&lt;/a> we created a &lt;code>derive(Builder)&lt;/code> macro to implement the &lt;a href="https://en.wikipedia.org/wiki/builder%20pattern">builder pattern&lt;/a>. We created a new &lt;code>*Builder&lt;/code> struct, created methods to set each field in a chain, and allowed some fields to be optional.&lt;/p>
&lt;p>So what&amp;rsquo;s left? (Be sure to start with &lt;a href="https://blog.jverkamp.com/2023/01/15/proc-macro-workshop-derivebuilder-part-1/">Part 1&lt;/a> if you haven&amp;rsquo;t read that!)&lt;/p>
&lt;nav id="TableOfContents">
&lt;ul>
&lt;li>&lt;a href="#7-repeated-fields">7. Repeated fields&lt;/a>&lt;/li>
&lt;li>&lt;a href="#8-unrecognized-attributes">8. Unrecognized attributes&lt;/a>&lt;/li>
&lt;li>&lt;a href="#9-redefined-prelude-types">9. Redefined prelude types&lt;/a>&lt;/li>
&lt;li>&lt;a href="#whats-next">What&amp;rsquo;s next?&lt;/a>&lt;/li>
&lt;/ul>
&lt;/nav>
&lt;p>Let&amp;rsquo;s do this!&lt;/p></description></item><item><title>A Justfile for my blog</title><link>https://blog.jverkamp.com/2023/01/16/a-justfile-for-my-blog/</link><pubDate>Mon, 16 Jan 2023 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2023/01/16/a-justfile-for-my-blog/</guid><description>&lt;p>For a while now, I&amp;rsquo;ve been using &lt;a href="https://www.gnu.org/software/make/manual/make.html" target="_blank" rel="noopener">make&lt;/a> as my task runner for my blog. &lt;code>make run&lt;/code> to run locally, &lt;code>make deploy&lt;/code> to build and push to GitHub pages.&lt;/p>
&lt;p>But&amp;hellip; the syntax isn&amp;rsquo;t great for some things and I&amp;rsquo;ve been working a lot with Rust. So let&amp;rsquo;s see what &lt;a href="https://github.com/casey/just" target="_blank" rel="noopener">just&lt;/a> can do!&lt;/p></description></item><item><title>Proc Macro Workshop: derive(Builder) [Part 1]</title><link>https://blog.jverkamp.com/2023/01/15/proc-macro-workshop-derivebuilder-part-1/</link><pubDate>Sun, 15 Jan 2023 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2023/01/15/proc-macro-workshop-derivebuilder-part-1/</guid><description>&lt;p>While continuing to learn a bit more about macros in Rust (&lt;a href="https://blog.jverkamp.com/2023/01/12/writing-a-curry-macro-for-macrokata/">previous post&lt;/a>), I really want to move beyond the simple declarative macros and get into something a bit more interesting. Enter &lt;a href="https://doc.rust-lang.org/reference/procedural-macros.html" target="_blank" rel="noopener">procedural macros&lt;/a>. In a nutshell, procedural macros in Rust, rather than relying entirely on pattern matching and expansion are fully Rust functions.&lt;/p>
&lt;p>They take a specific input (a stream of tokens) and output a specific output (a new stream of tokens), but in between they can do just about anything a full Rust function can do. And what&amp;rsquo;s better yet&amp;hellip; they operate at compile time. And because they operate on tokens (rather than a full AST), you can do things that just aren&amp;rsquo;t syntactically valid in normal Rust. Things like&amp;hellip; &lt;a href="https://en.wikipedia.org/wiki/variadic%20functions">variadic functions&lt;/a> (a la &lt;code>print!&lt;/code> or &lt;code>var!&lt;/code>) or even crazier things like &lt;a href="https://docs.rs/inline-python/latest/inline_python/" target="_blank" rel="noopener">embedding Python in Rust&lt;/a> for &amp;hellip; reasons.&lt;/p>
&lt;p>Today specifically, I&amp;rsquo;ve started working through the &lt;a href="https://github.com/dtolnay/proc-macro-workshop" target="_blank" rel="noopener">prod-macro-workshop&lt;/a> repo. It&amp;rsquo;s a series of five examples macros with test cases and some guidance set up to help you get up to speed. I&amp;rsquo;m going to be working through the first of these: &lt;code>derive(Builder)&lt;/code>. Now don&amp;rsquo;t get me wrong. I really have no idea what I&amp;rsquo;m doing, so don&amp;rsquo;t take this as an example of &lt;em>how to write a macro&lt;/em>. But perhaps by writing this out, it will help me learn it better&amp;hellip; and if you happen to learn something as well, all the better!&lt;/p></description></item><item><title>Writing a curry! macro for MacroKata</title><link>https://blog.jverkamp.com/2023/01/12/writing-a-curry-macro-for-macrokata/</link><pubDate>Thu, 12 Jan 2023 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2023/01/12/writing-a-curry-macro-for-macrokata/</guid><description>&lt;p>Recently I&amp;rsquo;ve been wanting to learn more about macros in Rust. It was always one of my favorite parts of Racket, so let&amp;rsquo;s see what we can do.&lt;/p>
&lt;p>In order to do that, I&amp;rsquo;ve been following the excellent &lt;a href="https://tfpk.github.io/macrokata/" target="_blank" rel="noopener">MacroKata&lt;/a> series. It goes all the way through, starting with the very basics, adding in literals and expressions, handling repetition, nesting, and finally recursion.&lt;/p>
&lt;p>What I really want to talk about those is the one that I found most interesting: &lt;code>curry!&lt;/code>.&lt;/p></description></item><item><title>AoC 2022 Day 25: Snafuinator</title><link>https://blog.jverkamp.com/2022/12/25/aoc-2022-day-25-snafuinator/</link><pubDate>Sun, 25 Dec 2022 00:00:03 +0000</pubDate><guid>https://blog.jverkamp.com/2022/12/25/aoc-2022-day-25-snafuinator/</guid><description>&lt;h2 id="source-full-of-hot-airhttpsadventofcodecom2022day25">Source: &lt;a href="https://adventofcode.com/2022/day/25" target="_blank" rel="noopener">Full of Hot Air&lt;/a>&lt;/h2>
&lt;h2 id="part-1">Part 1&lt;/h2>
&lt;blockquote>
&lt;p>Let a Snafu number be a base 5 number with the curious property that in addition to the digits 0, 1, and 2, it has the numbers &lt;code>-&lt;/code> as &lt;code>-1&lt;/code> and &lt;code>=&lt;/code> as &lt;code>-2&lt;/code>. Sum up a list of Snafu numbers.&lt;/p>
&lt;/blockquote></description></item><item><title>AoC 2022 Day 24: Blizzinator</title><link>https://blog.jverkamp.com/2022/12/24/aoc-2022-day-24-blizzinator/</link><pubDate>Sat, 24 Dec 2022 00:00:03 +0000</pubDate><guid>https://blog.jverkamp.com/2022/12/24/aoc-2022-day-24-blizzinator/</guid><description>&lt;h2 id="source-blizzard-basinhttpsadventofcodecom2022day24">Source: &lt;a href="https://adventofcode.com/2022/day/24" target="_blank" rel="noopener">Blizzard Basin&lt;/a>&lt;/h2>
&lt;h2 id="part-1">Part 1&lt;/h2>
&lt;blockquote>
&lt;p>Given a map with a series of moving walls (that wrap when the hit the edges of the simulation), calculate the fastest route from the top left to the bottom right.&lt;/p>
&lt;/blockquote></description></item></channel></rss>