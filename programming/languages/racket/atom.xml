<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Racket on jverkamp.com</title><link>https://blog.jverkamp.com/programming/languages/racket/</link><description>Recent content in Racket on jverkamp.com</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://blog.jverkamp.com/programming/languages/racket/atom.xml" rel="self" type="application/rss+xml"/><item><title>raco pkg install noise</title><link>https://blog.jverkamp.com/2021/08/05/raco-pkg-install-noise/</link><pubDate>Thu, 05 Aug 2021 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2021/08/05/raco-pkg-install-noise/</guid><description>&lt;p>What feels like a million years and a lifetime ago, I wrote up a &lt;a href="https://blog.jverkamp.com/2013/04/11/perlin-and-simplex-noise-in-racket/">library for perlin and simple noise in Racket&lt;/a>. Inspired by &lt;a href="https://github.com/soegaard/sketching">Jens Axel SÃ¸gaard&amp;rsquo;s new Sketching library&lt;/a> (processing in Racket) and a conversation thereabout, I figure it&amp;rsquo;s about time to push noise to the &lt;code>raco&lt;/code> package manager!&lt;/p></description></item><item><title>Wrapping xattr as a racket module</title><link>https://blog.jverkamp.com/2020/01/29/wrapping-xattr-as-a-racket-module/</link><pubDate>Wed, 29 Jan 2020 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2020/01/29/wrapping-xattr-as-a-racket-module/</guid><description>&lt;p>I recently came across a question: how do you read &lt;a href="https://en.wikipedia.org/wiki/extended%20file%20attributes">extended file attributes&lt;/a> in Racket. Not being actually that familiar with extended file attributes, I searched online. Nothing seems to currently exist (other than &lt;a href="https://docs.racket-lang.org/fuse/index.html#%28def._%28%28lib._fuse%2Fmain..rkt%29._setxattr%29%29">in the FUSE module, but that&amp;rsquo;s specific to FUSE&lt;/a>), but there is a system level exectuable that one could wrap to do this. I haven&amp;rsquo;t done &lt;i>much&lt;/i>&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup> with Racket&amp;rsquo;s &lt;code>&lt;a href="http://docs.racket-lang.org/search/index.html?q=system">system&lt;/a>&lt;/code>
or &lt;code>&lt;a href="http://docs.racket-lang.org/search/index.html?q=system*">system*&lt;/a>&lt;/code>
function before, so let&amp;rsquo;s give it a whirl.&lt;/p></description></item><item><title>AoC 2018 Day 14: Functionally Circular Elfs</title><link>https://blog.jverkamp.com/2018/12/14/aoc-2018-day-14-functionally-circular-elfs/</link><pubDate>Fri, 14 Dec 2018 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2018/12/14/aoc-2018-day-14-functionally-circular-elfs/</guid><description>&lt;h3 id="source-chocolate-chartshttpsadventofcodecom2018day14">Source: &lt;a href="https://adventofcode.com/2018/day/14">Chocolate Charts&lt;/a>&lt;/h3>
&lt;blockquote>
&lt;p>&lt;strong>Part 1:&lt;/strong> Create an infinite stream of numbers, by starting with [3, 7] with two pointers: 0 and 1. To add values to the list:&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;ul>
&lt;li>Add the current values of the two pointers
&lt;ul>
&lt;li>If the value is less than ten, add that value to the end of the list&lt;/li>
&lt;li>If the value is greater or equal to ten, add 1 and then the ones digits to the end of the list&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Update each pointer by adding the value it is pointing at to its current index plus one&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;blockquote>
&lt;p>With that algorithm, find the ten digits after a given index.&lt;/p>
&lt;/blockquote></description></item><item><title>AoC 2018 Day 13: Mine Cart Madness</title><link>https://blog.jverkamp.com/2018/12/13/aoc-2018-day-13-mine-cart-madness/</link><pubDate>Thu, 13 Dec 2018 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2018/12/13/aoc-2018-day-13-mine-cart-madness/</guid><description>&lt;h3 id="source-mine-cart-madnesshttpsadventofcodecom2018day13">Source: &lt;a href="https://adventofcode.com/2018/day/13">Mine Cart Madness&lt;/a>&lt;/h3>
&lt;blockquote>
&lt;p>&lt;strong>Part 1:&lt;/strong> Load a minecart track that looks like this:&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;pre tabindex="0">&lt;code>&lt;/code>&lt;/pre>&lt;/blockquote>
&lt;p>/-&amp;gt;-\ &lt;br>
| | /&amp;mdash;-&lt;br>
| /-+&amp;ndash;+-\ |
| | | | v |
-+-/ -+&amp;ndash;/
-&amp;mdash;&amp;ndash;/&lt;/p></description></item><item><title>AoC 2018 Day 12: Fat Cellular Automaton</title><link>https://blog.jverkamp.com/2018/12/12/aoc-2018-day-12-fat-cellular-automaton/</link><pubDate>Wed, 12 Dec 2018 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2018/12/12/aoc-2018-day-12-fat-cellular-automaton/</guid><description>&lt;h3 id="source-subterranean-sustainabilityhttpsadventofcodecom2018day12">Source: &lt;a href="https://adventofcode.com/2018/day/12">Subterranean Sustainability&lt;/a>&lt;/h3>
&lt;blockquote>
&lt;p>&lt;strong>Part 1:&lt;/strong> Create an infinite 2D &lt;a href="https://en.wikipedia.org/wiki/cellular%20automaton">cellular automaton&lt;/a> with transition rules based on two points to each side, starting with initial state at index 0 to the right.&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>After 20 generations, what is the sum of indexes of points turned on?&lt;/p>
&lt;/blockquote></description></item><item><title>AoC 2018 Day 11: Gridlocked Fuel</title><link>https://blog.jverkamp.com/2018/12/11/aoc-2018-day-11-gridlocked-fuel/</link><pubDate>Tue, 11 Dec 2018 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2018/12/11/aoc-2018-day-11-gridlocked-fuel/</guid><description>&lt;h3 id="source-chronal-chargehttpsadventofcodecom2018day11">Source: &lt;a href="https://adventofcode.com/2018/day/11">Chronal Charge&lt;/a>&lt;/h3>
&lt;blockquote>
&lt;p>&lt;strong>Part 1:&lt;/strong> Define a grid as follows (x,y coordinates + a constant C):&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;ul>
&lt;li>&lt;span class="latex-inline">r(x) = x &amp;#43; 10&lt;/span>
&lt;/li>
&lt;li>&lt;span class="latex-inline">G(x, y) = hundreds(r(x) * (r(x) * y &amp;#43; C)) - 5&lt;/span>
&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;blockquote>
&lt;p>Find the 3x3 area in a 300x300 grid with the highest total &lt;span class="latex-inline">G(x, y)&lt;/span>
.&lt;/p>
&lt;/blockquote></description></item><item><title>AoC 2018 Day 10: It's Full of Stars!</title><link>https://blog.jverkamp.com/2018/12/10/aoc-2018-day-10-its-full-of-stars/</link><pubDate>Mon, 10 Dec 2018 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2018/12/10/aoc-2018-day-10-its-full-of-stars/</guid><description>&lt;h3 id="source-the-stars-alignhttpsadventofcodecom2018day10">Source: &lt;a href="https://adventofcode.com/2018/day/10">The Stars Align&lt;/a>&lt;/h3>
&lt;blockquote>
&lt;p>&lt;strong>Part 1:&lt;/strong> Given a system of moving particles (with position and velocity) find the point where the particles spell a message. What is that message?&lt;/p>
&lt;/blockquote></description></item><item><title>AoC 2018 Day 9: Marble Madness</title><link>https://blog.jverkamp.com/2018/12/09/aoc-2018-day-9-marble-madness/</link><pubDate>Sun, 09 Dec 2018 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2018/12/09/aoc-2018-day-9-marble-madness/</guid><description>&lt;h3 id="source-marble-maniahttpsadventofcodecom2018day9">Source: &lt;a href="https://adventofcode.com/2018/day/9">Marble Mania&lt;/a>&lt;/h3>
&lt;blockquote>
&lt;p>&lt;strong>Part 1:&lt;/strong> Place marbles in a circle such that each marble is placed by skipping one place &lt;em>except&lt;/em> for marbles divisible by 23. For those, don&amp;rsquo;t place them, skip back 7 places, and remove that marble as well. Add these two marbles to your current score.&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>Given a specific player count and last marble, what&amp;rsquo;s the highest score?&lt;/p>
&lt;/blockquote></description></item><item><title>AoC 2018 Day 8: Checksum Treeification</title><link>https://blog.jverkamp.com/2018/12/08/aoc-2018-day-8-checksum-treeification/</link><pubDate>Sat, 08 Dec 2018 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2018/12/08/aoc-2018-day-8-checksum-treeification/</guid><description>&lt;h3 id="source-the-sum-of-its-partshttpsadventofcodecom2018day8">Source: &lt;a href="https://adventofcode.com/2018/day/8">The Sum of Its Parts&lt;/a>&lt;/h3>
&lt;blockquote>
&lt;p>&lt;strong>Part 1:&lt;/strong> A custom tree data structure is defined as:&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;ul>
&lt;li>child count&lt;/li>
&lt;li>metadata count&lt;/li>
&lt;li>&lt;code>child count&lt;/code> additional subtrees (recursive)&lt;/li>
&lt;li>&lt;code>metadata count&lt;/code> metadata nodes&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;blockquote>
&lt;p>Calculate the sum of all metadata nodes.&lt;/p>
&lt;/blockquote></description></item><item><title>AoC 2018 Day 7: Job Simulator</title><link>https://blog.jverkamp.com/2018/12/07/aoc-2018-day-7-job-simulator/</link><pubDate>Fri, 07 Dec 2018 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2018/12/07/aoc-2018-day-7-job-simulator/</guid><description>&lt;h3 id="source-the-sum-of-its-partshttpsadventofcodecom2018day7">Source: &lt;a href="https://adventofcode.com/2018/day/7">The Sum of Its Parts&lt;/a>&lt;/h3>
&lt;blockquote>
&lt;p>&lt;strong>Part 1:&lt;/strong> Given a list of job dependencies (job A must be before job B), determine the order jobs must be done in. Break ties lexicographically.&lt;/p>
&lt;/blockquote></description></item><item><title>AoC 2018 Day 6: Infinite Area Simulator</title><link>https://blog.jverkamp.com/2018/12/06/aoc-2018-day-6-infinite-area-simulator/</link><pubDate>Thu, 06 Dec 2018 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2018/12/06/aoc-2018-day-6-infinite-area-simulator/</guid><description>&lt;h3 id="source-chronal-coordinateshttpsadventofcodecom2018day6">Source: &lt;a href="https://adventofcode.com/2018/day/6">Chronal Coordinates&lt;/a>&lt;/h3>
&lt;blockquote>
&lt;p>&lt;strong>Part 1:&lt;/strong> Given a list of points, calculate the region of points closest to each point (using &lt;a href="https://en.wikipedia.org/wiki/Manhattan%20distance">Manhattan distance&lt;/a>). Return the size of the largest non-infinite region.&lt;/p>
&lt;/blockquote></description></item><item><title>AoC 2018 Day 5: Alchemical reduction</title><link>https://blog.jverkamp.com/2018/12/05/aoc-2018-day-5-alchemical-reduction/</link><pubDate>Wed, 05 Dec 2018 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2018/12/05/aoc-2018-day-5-alchemical-reduction/</guid><description>&lt;h3 id="source-alchemical-reductionhttpsadventofcodecom2018day5">Source: &lt;a href="https://adventofcode.com/2018/day/5">Alchemical Reduction&lt;/a>&lt;/h3>
&lt;blockquote>
&lt;p>&lt;strong>Part 1:&lt;/strong> Given a string, reduce it by removing pairs of letters that are the same letter but different cases. Repeat until you have a minimal string.&lt;/p>
&lt;/blockquote></description></item><item><title>AoC 2018 Day 4: Sleeping on the job</title><link>https://blog.jverkamp.com/2018/12/04/aoc-2018-day-4-sleeping-on-the-job/</link><pubDate>Tue, 04 Dec 2018 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2018/12/04/aoc-2018-day-4-sleeping-on-the-job/</guid><description>&lt;h3 id="source-repose-recordhttpsadventofcodecom2018day4">Source: &lt;a href="https://adventofcode.com/2018/day/4">Repose Record&lt;/a>&lt;/h3>
&lt;blockquote>
&lt;p>&lt;strong>Part 1:&lt;/strong> Given a log of guard shifts and times asleep/awake, calculate the guard that was asleep most often and which minute they were most asleep for.&lt;/p>
&lt;/blockquote></description></item><item><title>AoC 2018 Day 3: Regionification</title><link>https://blog.jverkamp.com/2018/12/03/aoc-2018-day-3-regionification/</link><pubDate>Mon, 03 Dec 2018 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2018/12/03/aoc-2018-day-3-regionification/</guid><description>&lt;h3 id="source-no-matter-how-you-slice-ithttpsadventofcodecom2018day3">Source: &lt;a href="https://adventofcode.com/2018/day/3">No Matter How You Slice It&lt;/a>&lt;/h3>
&lt;blockquote>
&lt;p>&lt;strong>Part 1:&lt;/strong> Given a list of overlapping regions defined by (left, top, width, height) count how many integer points occur in more than one region.&lt;/p>
&lt;/blockquote></description></item><item><title>AoC 2018 Day 2: Counting letters</title><link>https://blog.jverkamp.com/2018/12/02/aoc-2018-day-2-counting-letters/</link><pubDate>Sun, 02 Dec 2018 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2018/12/02/aoc-2018-day-2-counting-letters/</guid><description>&lt;h3 id="source-inventory-management-systemhttpsadventofcodecom2018day2">Source: &lt;a href="https://adventofcode.com/2018/day/2">Inventory Management System&lt;/a>&lt;/h3>
&lt;blockquote>
&lt;p>&lt;strong>Part 1:&lt;/strong> Given a list of strings, count how many contain exactly two of a letter (&lt;code>a&lt;/code>) and how many contain exactly three of a letter (&lt;code>b&lt;/code>). Calculate &lt;code>a*b&lt;/code>.&lt;/p>
&lt;/blockquote></description></item><item><title>AoC 2018 Day 1: Sum-thing to start with</title><link>https://blog.jverkamp.com/2018/12/01/aoc-2018-day-1-sum-thing-to-start-with/</link><pubDate>Sat, 01 Dec 2018 00:00:03 +0000</pubDate><guid>https://blog.jverkamp.com/2018/12/01/aoc-2018-day-1-sum-thing-to-start-with/</guid><description>&lt;h3 id="source-chronal-calibrationhttpsadventofcodecom2018day1">Source: &lt;a href="https://adventofcode.com/2018/day/1">Chronal Calibration&lt;/a>&lt;/h3>
&lt;blockquote>
&lt;p>&lt;strong>Part 1:&lt;/strong> Given a list of numbers (positive and negative) calculate the sum.&lt;/p>
&lt;/blockquote></description></item><item><title>Advent of Code 2018</title><link>https://blog.jverkamp.com/2018/12/01/advent-of-code-2018/</link><pubDate>Sat, 01 Dec 2018 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2018/12/01/advent-of-code-2018/</guid><description>&lt;p>Let&amp;rsquo;s do it again! I&amp;rsquo;m starting a day late, but much better than &lt;a href="https://blog.jverkamp.com/2018/01/08/advent-of-code-2017/">last year&lt;/a> ð!&lt;/p>
&lt;p>This time around, I&amp;rsquo;m hoping to solve each problem in both Python and Racket, both to show an example of how the languages differ and &amp;hellip; well, because I can ð.&lt;/p>
&lt;p>&lt;em>EDIT 2018-12-05&lt;/em>: Yeah&amp;hellip; I&amp;rsquo;m not actually going to do these in both Racket and Python. The solutions are ending up being near direct translations. Since there are probably fewer people solving these in Racket, I&amp;rsquo;ll do that first and Python eventuallyâ¢.&lt;/p>
&lt;p>As always, these problems are wonderful to try to solve yourself. If you agree, &lt;em>stop reading now&lt;/em>. This post isn&amp;rsquo;t going anywhere.&lt;/p>
&lt;p>If you&amp;rsquo;d like to see the full form of any particular solution, you can do so on GitHub (including previous years and possibly some I haven&amp;rsquo;t written up yet): &lt;a href="https://github.com/jpverkamp/advent-of-code">jpverkamp/advent-of-code&lt;/a>&lt;/p></description></item><item><title>Tupper's self-referential formula</title><link>https://blog.jverkamp.com/2015/05/07/tuppers-self-referential-formula/</link><pubDate>Thu, 07 May 2015 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2015/05/07/tuppers-self-referential-formula/</guid><description>&lt;p>Quick post today. Let&amp;rsquo;s implement &lt;a href="https://en.wikipedia.org/wiki/Tupper%27s%20self-referential%20formula">Tupper&amp;#39;s self-referential formula&lt;/a> in Racket!&lt;/p>
&lt;div class="latex-block">\frac{1}{2} &lt; \left \lfloor mod \left ( \left \lfloor \frac{y}{17} 2^{-17 \lfloor x \rfloor - mod(\lfloor y \rfloor, 2)} \right \rfloor, 2 \right ) \right \rfloor&lt;/div>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-racket" data-lang="racket">(tupper &lt;span style="color:#ae81ff">960939379918958884971672962127852754715004339660129306651505519271702802395266424689642842174350718121267153782770623355993237280874144307891325963941337723487857735749823926629715517173716995165232890538221612403238855866184013235585136048828693337902491454229288667081096184496091705183454067827731551705405381627380967602565625016981482083418783163849115590225610003652351370343874461848378737238198224849863465033159410054974700593138339226497249461751545728366702369745461014655997933798537483143786841806593422227898388722980000748404719&lt;/span>)
&lt;/code>&lt;/pre>&lt;/div>&lt;figure>&lt;img src="https://blog.jverkamp.com/embeds/2015/tupper.png"/>
&lt;/figure>
&lt;p>That&amp;rsquo;s the result of graphing the above function at a point rather far away from the origin. Specifically, where &lt;code>y&lt;/code> is around that crazy big number. Look familiar?&lt;/p></description></item><item><title>A Quick Look at RC4</title><link>https://blog.jverkamp.com/2015/04/14/a-quick-look-at-rc4/</link><pubDate>Tue, 14 Apr 2015 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2015/04/14/a-quick-look-at-rc4/</guid><description>&lt;p>In cryptography work, &lt;a href="https://en.wikipedia.org/wiki/RC4">RC4&lt;/a> (Rivest Cipher 4) is well known as both one of the easiest to implement and fastest to run &lt;a href="https://en.wikipedia.org/wiki/symmetric%20encryption">symmetric encryption&lt;/a> algorithms. Unfortunately, over time there have been a number of attacks on RC4, both in poorly written protocols (such as in the case of &lt;a href="https://en.wikipedia.org/wiki/WEP">WEP&lt;/a>) or statistical attacks against the protocol itself.&lt;/p>
&lt;p>Still, for how well it formed, it&amp;rsquo;s an amazingly simple algorithm, so I decided to try my hand at implementing it.&lt;/p></description></item><item><title>Generating perfect portmanteaus</title><link>https://blog.jverkamp.com/2015/04/07/generating-perfect-portmanteaus/</link><pubDate>Tue, 07 Apr 2015 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2015/04/07/generating-perfect-portmanteaus/</guid><description>&lt;p>A quick programming post, since it&amp;rsquo;s been a while, inspired by this video:&lt;/p>
&lt;div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
&lt;iframe src="https://www.youtube.com/embed/QVn2PZGZxaI" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" allowfullscreen title="YouTube Video">&lt;/iframe>
&lt;/div>
&lt;p>I&amp;rsquo;m not going to go quite as far as that, but I thought it would be interesting to write up some quick code to generate portmanteaus&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>.&lt;/p></description></item><item><title>iOS Backups in Racket: Apps</title><link>https://blog.jverkamp.com/2015/01/29/ios-backups-in-racket-apps/</link><pubDate>Thu, 29 Jan 2015 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2015/01/29/ios-backups-in-racket-apps/</guid><description>&lt;p>So far we&amp;rsquo;ve read &lt;a href="https://blog.jverkamp.com/2015/01/22/ios-backups-in-racket-groundwork/">backup files&lt;/a>, parsed &lt;a href="https://blog.jverkamp.com/2015/01/23/ios-backups-in-racket-contacts/">contacts&lt;/a>, and parsed &lt;a href="https://blog.jverkamp.com/2015/01/27/ios-backups-in-racket-messages/">messages&lt;/a>. Today we&amp;rsquo;re going to dig a little deeper and start parsing apps specifically.&lt;/p></description></item><item><title>iOS Backups in Racket: Messages</title><link>https://blog.jverkamp.com/2015/01/27/ios-backups-in-racket-messages/</link><pubDate>Tue, 27 Jan 2015 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2015/01/27/ios-backups-in-racket-messages/</guid><description>&lt;p>So far we&amp;rsquo;ve &lt;a href="https://blog.jverkamp.com/2015/01/22/ios-backups-in-racket-groundwork/">laid the groundwork&lt;/a>, loading local iOS backups and parsed out &lt;a href="https://blog.jverkamp.com/2015/01/23/ios-backups-in-racket-contacts/">contacts&lt;/a>. Today let&amp;rsquo;s take another step down the rabbit hole and figure out how messages are stored.&lt;/p></description></item><item><title>iOS Backups in Racket: Contacts</title><link>https://blog.jverkamp.com/2015/01/23/ios-backups-in-racket-contacts/</link><pubDate>Fri, 23 Jan 2015 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2015/01/23/ios-backups-in-racket-contacts/</guid><description>&lt;p>After &lt;a href="https://blog.jverkamp.com/2015/01/22/ios-backups-in-racket-groundwork/">yesterday&amp;rsquo;s post&lt;/a> laying the groundwork for looking into &lt;a href="https://blog.jverkamp.com/2015/01/29/ios-backups-in-racket-apps/">iOS Backups&lt;/a>, today why don&amp;rsquo;t we actually start digging into one of the more interesting files: your list of contacts.&lt;/p></description></item><item><title>iOS Backups in Racket: Groundwork</title><link>https://blog.jverkamp.com/2015/01/22/ios-backups-in-racket-groundwork/</link><pubDate>Thu, 22 Jan 2015 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2015/01/22/ios-backups-in-racket-groundwork/</guid><description>&lt;p>For the last little while, I&amp;rsquo;ve been spending my spare programming time working on a slightly larger project than I normally do: a &lt;a href="https://blog.jverkamp.com/2014/06/11/call-stack-bracket-matcher/">Racket&lt;/a> library for reading iOS backups.&lt;/p>
&lt;p>Basically, I want to take the mess that is an iOS backup (not particularly designed to be easy to read by other programs) and extract some information from it, backing it up in a more easily readable format.&lt;/p>
&lt;p>Specifically, I would like to be able to backup:&lt;/p>
&lt;ul>
&lt;li>Contact information: Even thought they&amp;rsquo;re mostly from Facebook, it will be useful for the other parts&lt;/li>
&lt;li>Messages: These are taking up a large portion of my phone&amp;rsquo;s hard drive, mostly due to attachments. Back them up just in case&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>&lt;sup id="fnref:2">&lt;a href="#fn:2" class="footnote-ref" role="doc-noteref">2&lt;/a>&lt;/sup>&lt;/li>
&lt;li>Photos: I&amp;rsquo;m already backing these up, but it would be nice to have it in the same process&lt;/li>
&lt;li>Application data:&lt;/li>
&lt;li>List of applications over time&lt;/li>
&lt;li>&lt;a href="https://www.moves-app.com/">Moves&lt;/a>: GPS location&lt;/li>
&lt;li>&lt;a href="http://www.downcastapp.com/">Downcast&lt;/a>: List of current podcasts&lt;/li>
&lt;li>&lt;a href="http://www.sleepcycle.com/">Sleep Cycle&lt;/a>: Sleep data&lt;/li>
&lt;li>&lt;a href="http://www.boardgamescorer.com/">Boardgame Scorer&lt;/a>: High scores for board games&lt;/li>
&lt;/ul></description></item><item><title>Let it snow!</title><link>https://blog.jverkamp.com/2015/01/09/let-it-snow/</link><pubDate>Fri, 09 Jan 2015 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2015/01/09/let-it-snow/</guid><description>&lt;p>â« Oh the weather outside is frightful&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>&amp;hellip; â«&lt;/p>
&lt;figure>&lt;img src="https://blog.jverkamp.com/embeds/2015/snowflake.gif"/>
&lt;/figure></description></item><item><title>Generating omnichromatic images</title><link>https://blog.jverkamp.com/2015/01/01/generating-omnichromatic-images/</link><pubDate>Thu, 01 Jan 2015 00:10:00 +0000</pubDate><guid>https://blog.jverkamp.com/2015/01/01/generating-omnichromatic-images/</guid><description>&lt;p>Inspired half by a &lt;a href="https://codegolf.stackexchange.com/questions/22144/images-with-all-colors">post on the Code Golf StackExchange&lt;/a> and half by the corresponding website &lt;a href="http://allrgb.com/">allrgb.com&lt;/a>, today&amp;rsquo;s post tasks us with making images like this:&lt;/p>
&lt;figure>&lt;img src="https://blog.jverkamp.com/embeds/2015/grow-minimum_gray-code_400x200.png"/>
&lt;/figure>
&lt;p>So what&amp;rsquo;s so interesting about that picture?&lt;/p></description></item><item><title>Palette Swapping</title><link>https://blog.jverkamp.com/2014/12/23/palette-swapping/</link><pubDate>Tue, 23 Dec 2014 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2014/12/23/palette-swapping/</guid><description>&lt;p>Today&amp;rsquo;s task comes from the &lt;a href="https://codegolf.stackexchange.com/">Code Golf StackExchange&lt;/a>. The idea behind &lt;a href="https://en.wikipedia.org/wiki/code%20golf">code golf&lt;/a> is to write a program with as few characters as possible, often rendering the code nigh on unreadable. Luckily, the same StackExchange also host popularity contests, one of which is the inspiration behind today&amp;rsquo;s post:&lt;/p>
&lt;blockquote>
&lt;p>You are given two true color images, the Source and the Palette. They do not necessarily have the same dimensions but it is guaranteed that their areas are the same, i.e. they have the same number of pixels.
Your task is to create an algorithm that makes the most accurate looking copy of the Source by only using the pixels in the Palette. Each pixel in the Palette must be used exactly once in a unique position in this copy. The copy must have the same dimensions as the Source.
&amp;ndash; &lt;a href="https://codegolf.stackexchange.com/questions/33172/american-gothic-in-the-palette-of-mona-lisa-rearrange-the-pixels">American Gothic in the palette of Mona Lisa: Rearrange the pixels&lt;/a>&lt;/p>
&lt;/blockquote></description></item><item><title>A "one" line echo server using let in Racket</title><link>https://blog.jverkamp.com/2014/11/13/a-one-line-echo-server-using-let-in-racket/</link><pubDate>Thu, 13 Nov 2014 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2014/11/13/a-one-line-echo-server-using-let-in-racket/</guid><description>&lt;p>A recent post on Reddit caught my attention: &lt;a href="https://www.reddit.com/r/Python/comments/2m6d4z/a_one_line_echo_server_using_let_in_python/">A âOneâ Line Echo Server Using âletâ in Python&lt;/a> (&lt;a href="http://sigusr2.net/one-line-echo-server-using-let-python.html">original article&lt;/a>). The basic idea is that you can use Python&amp;rsquo;s &lt;code>lambda&lt;/code> with default arguments as a &lt;code>let&lt;/code>, which in turn allows you to write a simple &lt;a href="https://en.wikipedia.org/wiki/echo%20server">echo server&lt;/a> in &lt;del>one line&lt;/del> a nicely functional style.&lt;/p></description></item><item><title>Clockception</title><link>https://blog.jverkamp.com/2014/11/04/clockception/</link><pubDate>Tue, 04 Nov 2014 09:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2014/11/04/clockception/</guid><description>&lt;p>Let&amp;rsquo;s talk about clocks.&lt;/p>
&lt;p>We can draw traditional analog clocks&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>:&lt;/p>
&lt;figure>&lt;img src="https://blog.jverkamp.com/embeds/2014/analog.png"/>
&lt;/figure>
&lt;p>We can draw nice digital clocks:&lt;/p>
&lt;pre tabindex="0">&lt;code>âââ â â ââ âââ
â ââââ¤ â â â
âââ â â ââ´ââââ
&lt;/code>&lt;/pre>&lt;p>Or we can go downright mad and make clocks out of clocks:&lt;/p>
&lt;figure>&lt;img src="https://blog.jverkamp.com/embeds/2014/clockception.png"/>
&lt;/figure>
&lt;p>Even animated!&lt;/p>
&lt;figure>&lt;img src="https://blog.jverkamp.com/embeds/2014/animated.gif"/>
&lt;/figure></description></item><item><title>Tile Puzzle</title><link>https://blog.jverkamp.com/2014/10/28/tile-puzzle/</link><pubDate>Tue, 28 Oct 2014 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2014/10/28/tile-puzzle/</guid><description>&lt;p>It&amp;rsquo;s been a while&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>, but I&amp;rsquo;m back. Today&amp;rsquo;s post is inspired by a post from /r/dailyprogrammer almost a month ago now: &lt;a href="https://www.reddit.com/r/dailyprogrammer/comments/2ip1gj/10082014_challenge_183_intermediate_edge_matching/">Challenge #183 [Intermediate] Edge Matching Tile Puzzle&lt;/a>. Basically, we&amp;rsquo;re going to solve puzzles like this:&lt;/p>
&lt;p>&lt;figure>&lt;img src="https://blog.jverkamp.com/embeds/2014/unsolved-3x3.png"/>
&lt;/figure>
&lt;figure>&lt;img src="https://blog.jverkamp.com/embeds/2014/solved-3x3.png"/>
&lt;/figure>
&lt;/p>
&lt;p>If you look carefully, the tiles are the same between the two, although they might be rotated.&lt;/p></description></item><item><title>Regular Expression Fractals</title><link>https://blog.jverkamp.com/2014/10/05/regular-expression-fractals/</link><pubDate>Sun, 05 Oct 2014 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2014/10/05/regular-expression-fractals/</guid><description>&lt;p>Oops, turns out I haven&amp;rsquo;t had a post in a good long while. Before it gets even longer, I figure that I should take one off my backlog and just write it up, even if it is a little on the shorter side.&lt;/p>
&lt;p>Today&amp;rsquo;s post was inspired by this post on /r/dailyprogrammer a month ago today:
&lt;a href="https://www.reddit.com/r/dailyprogrammer/comments/2fkh8u/9052014_challenge_178_hard_regular_expression/">Challenge #178 [Hard] Regular Expression Fractals&lt;/a>. The basic idea is that you are going to take a rectangular region and divide it into four quadrants, again and again, recording the path as you go (images from that post):&lt;/p>
&lt;p>&lt;figure>&lt;img src="https://blog.jverkamp.com/embeds/2014/step-1.png"/>
&lt;/figure>
&lt;figure>&lt;img src="https://blog.jverkamp.com/embeds/2014/step-2.png"/>
&lt;/figure>
&lt;figure>&lt;img src="https://blog.jverkamp.com/embeds/2014/step-3.png"/>
&lt;/figure>
&lt;/p></description></item><item><title>Invader Fractals</title><link>https://blog.jverkamp.com/2014/09/17/invader-fractals/</link><pubDate>Wed, 17 Sep 2014 09:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2014/09/17/invader-fractals/</guid><description>&lt;p>First we had &lt;a href="https://blog.jverkamp.com/2014/09/14/procedural-invaders/">Procedural Invaders&lt;/a>. Then we used them fill up space with &lt;a href="https://blog.jverkamp.com/2014/09/16/fractal-invaders/">Fractal Invaders&lt;/a>. But we&amp;rsquo;re not &lt;em>quite&lt;/em> done yet! This time, let&amp;rsquo;s mix things up a bit and make Invader Fractals.&lt;/p>
&lt;figure>&lt;img src="https://blog.jverkamp.com/embeds/2014/invader-fractal-3.png"/>
&lt;/figure></description></item><item><title>Fractal Invaders</title><link>https://blog.jverkamp.com/2014/09/16/fractal-invaders/</link><pubDate>Tue, 16 Sep 2014 09:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2014/09/16/fractal-invaders/</guid><description>&lt;p>Today&amp;rsquo;s post is a follow up to Sunday&amp;rsquo;s post &lt;a href="https://blog.jverkamp.com/2014/09/14/procedural-invaders/">Procedural Invaders&lt;/a>. This time around, we&amp;rsquo;re going to work through two different space filling algorithms in order to eventually generate something like this:&lt;/p>
&lt;figure>&lt;img src="https://blog.jverkamp.com/embeds/2014/fractal-invaders-100x100.png"/>
&lt;/figure></description></item><item><title>Look and Say</title><link>https://blog.jverkamp.com/2014/09/15/look-and-say/</link><pubDate>Mon, 15 Sep 2014 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2014/09/15/look-and-say/</guid><description>&lt;p>Random quick post today&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>. Basically, we want to write code to generate what&amp;rsquo;s known as &lt;a href="https://en.wikipedia.org/wiki/Look%20and%20Say%20sequence">Look and Say sequence&lt;/a>:&lt;/p>
&lt;blockquote>
&lt;p>To generate a member of the sequence from the previous member, read off the digits of the previous member, counting the number of digits in groups of the same digit. For example:&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;ul>
&lt;li>1 is read off as &amp;ldquo;one 1&amp;rdquo; or 11.&lt;/li>
&lt;li>11 is read off as &amp;ldquo;two 1s&amp;rdquo; or 21.&lt;/li>
&lt;li>21 is read off as &amp;ldquo;one 2, then one 1&amp;rdquo; or 1211.&lt;/li>
&lt;li>1211 is read off as &amp;ldquo;one 1, then one 2, then two 1s&amp;rdquo; or 111221.&lt;/li>
&lt;li>111221 is read off as &amp;ldquo;three 1s, then two 2s, then one 1&amp;rdquo; or 312211.&lt;/li>
&lt;/ul>
&lt;/blockquote></description></item><item><title>Procedural Invaders</title><link>https://blog.jverkamp.com/2014/09/14/procedural-invaders/</link><pubDate>Sun, 14 Sep 2014 09:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2014/09/14/procedural-invaders/</guid><description>&lt;p>Today&amp;rsquo;s post comes from a long line of &amp;lsquo;inspired by posts&amp;rsquo; all pretty much leading back (so far as I can tell) to this post by j.tarbell: &lt;a href="http://www.complexification.net/gallery/machines/invaderfractal/">invader.procedural&lt;/a> from 2003.&lt;/p>
&lt;p>The basic idea is that we want to generate &amp;lsquo;invaders&amp;rsquo; in the style of &lt;a href="https://en.wikipedia.org/wiki/space%20invaders">space invaders&lt;/a>. Except we don&amp;rsquo;t want 10 or 20, we want tens of thousands. So how do we do it? Well, take a look at this:&lt;/p>
&lt;figure>&lt;img src="https://blog.jverkamp.com/embeds/2014/procedural-invader-big.png"/>
&lt;/figure></description></item><item><title>Chess Puzzles: Knight's Tour</title><link>https://blog.jverkamp.com/2014/09/04/chess-puzzles-knights-tour/</link><pubDate>Thu, 04 Sep 2014 20:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2014/09/04/chess-puzzles-knights-tour/</guid><description>&lt;p>Onwards and upwards! For today&amp;rsquo;s chess puzzle, let&amp;rsquo;s take a first crack at the &lt;a href="https://en.wikipedia.org/wiki/Knight%27s%20Tour">Knight&amp;#39;s Tour&lt;/a>&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>&lt;/p>
&lt;figure>&lt;img src="https://blog.jverkamp.com/embeds/2014/tour-5-solution.gif"/>
&lt;/figure></description></item><item><title>Chess Puzzles: N Queens</title><link>https://blog.jverkamp.com/2014/09/03/chess-puzzles-n-queens/</link><pubDate>Wed, 03 Sep 2014 20:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2014/09/03/chess-puzzles-n-queens/</guid><description>&lt;p>After two weeks, it seems only right that we actually get around to a real chess puzzle. First on the list: &lt;a href="https://en.wikipedia.org/wiki/the%20eight%20queens%20puzzle">Eight queens puzzle&lt;/a>.&lt;/p>
&lt;figure>&lt;img src="https://blog.jverkamp.com/embeds/2014/8-queens-solution.png"/>
&lt;/figure>
&lt;p>Specifically, how do you place n queens on an n by n chess board such that no pair of queens can attack one another?&lt;/p></description></item><item><title>Chess Puzzles 2: Board?</title><link>https://blog.jverkamp.com/2014/08/28/chess-puzzles-2-board/</link><pubDate>Thu, 28 Aug 2014 20:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2014/08/28/chess-puzzles-2-board/</guid><description>&lt;p>Now that we&amp;rsquo;ve got &lt;a href="https://blog.jverkamp.com/2013/05/21/ludum-dare-26-vtanks-results/">Ludum Dare&lt;/a> out of the way, back to chess! &lt;a href="https://blog.jverkamp.com/2014/08/21/chess-puzzles-1-get-moving/">Last time&lt;/a>, we defined all of the pieces, which is all well and good, but what we really need is a board. More specifically, we want something that can:&lt;/p>
&lt;ul>
&lt;li>Represent an 8x8 chess board, storing the location of pieces (including the owner of each)&lt;/li>
&lt;li>Add logic for collisions, so that when moving a piece, you cannot move through others or capture allies&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>&lt;/li>
&lt;li>Add rendering code to display the current chess board (must be flexible enough to handle arbitrary glyphs for &lt;a href="https://en.wikipedia.org/wiki/fairy%20chess">fairy chess&lt;/a> pieces)&lt;/li>
&lt;/ul>
&lt;p>I think that&amp;rsquo;s about enough for the moment. Let&amp;rsquo;s do it!&lt;/p></description></item><item><title>Chess Puzzles 1: Get moving!</title><link>https://blog.jverkamp.com/2014/08/21/chess-puzzles-1-get-moving/</link><pubDate>Thu, 21 Aug 2014 20:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2014/08/21/chess-puzzles-1-get-moving/</guid><description>&lt;p>Here&amp;rsquo;s something I haven&amp;rsquo;t done much&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>: chess puzzles! I&amp;rsquo;m still not sure entirely what I think about the game in general. There is certainly quite a lot of strategy, which I like, but to really get good at chess, there&amp;rsquo;s also some amount of memorizing openings and closings. That&amp;rsquo;s something I&amp;rsquo;m a little less thrilled with.&lt;/p>
&lt;p>Still, it&amp;rsquo;s the perfect sort of came to work out programming exercises with. It&amp;rsquo;s a game of &lt;a href="https://en.wikipedia.org/wiki/perfect%20information">perfect information&lt;/a>, so you don&amp;rsquo;t have to deal with what a player knows and doesn&amp;rsquo;t. The pieces have well defined, regular moves&lt;sup id="fnref:2">&lt;a href="#fn:2" class="footnote-ref" role="doc-noteref">2&lt;/a>&lt;/sup> There&amp;rsquo;s a fairly intense branching factor, but not insurmountable&amp;ndash;&lt;a href="https://en.wikipedia.org/wiki/Deep%20Blue">Deep Blue (chess computer)&lt;/a> proved that.&lt;/p>
&lt;p>Anyways, enough chatter. Let&amp;rsquo;s play some chess!&lt;/p></description></item><item><title>Minimal palindromic base</title><link>https://blog.jverkamp.com/2014/08/13/minimal-palindromic-base/</link><pubDate>Wed, 13 Aug 2014 17:00:55 +0000</pubDate><guid>https://blog.jverkamp.com/2014/08/13/minimal-palindromic-base/</guid><description>&lt;p>What&amp;rsquo;s this? Two posts in one day? Well, &lt;a href="https://blog.jverkamp.com/2014/08/08/onwards-and-upwards/">writing a static blog generator&lt;/a> can do that. ð&lt;/p>
&lt;p>Another easily phrased challenge:&lt;/p>
&lt;blockquote>
&lt;p>We have a simple little problem today: Given an integer n &amp;gt; 2, find the minimum b &amp;gt; 1 for which n base b is a palindrome.&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>&amp;ndash; &lt;a href="http://programmingpraxis.com/2014/08/05/minimal-palindromic-base/">Minimal Palindromic Base&lt;/a> via Programming Praxis&lt;/p>
&lt;/blockquote></description></item><item><title>Number words</title><link>https://blog.jverkamp.com/2014/08/13/number-words/</link><pubDate>Wed, 13 Aug 2014 14:00:55 +0000</pubDate><guid>https://blog.jverkamp.com/2014/08/13/number-words/</guid><description>&lt;p>Today&amp;rsquo;s five minute post brought to you via &lt;a href="http://programmingpraxis.com/2014/07/25/number-words/">Programming Praxis&lt;/a> / &lt;a href="http://www.careercup.com/question?id=5120347909128192">Career Cup&lt;/a>:&lt;/p>
&lt;blockquote>
&lt;p>Given a positive integer, return all the ways that the integer can be represented by letters using the mapping 1 -&amp;gt; A, 2 -&amp;gt; B, â¦, 26 -&amp;gt; Z. For instance, the number 1234 can be represented by the words ABCD, AWD and LCD.&lt;/p>
&lt;/blockquote></description></item><item><title>Langton's ant</title><link>https://blog.jverkamp.com/2014/08/07/langtons-ant/</link><pubDate>Thu, 07 Aug 2014 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2014/08/07/langtons-ant/</guid><description>&lt;p>Here&amp;rsquo;s another post from /r/DailyProgrammer: &lt;a href="http://www.reddit.com/r/dailyprogrammer/comments/2c4ka3/7302014_challenge_173_intermediate_advanced/">Advanced Langton&amp;rsquo;s Ant&lt;/a>. I&amp;rsquo;m a bit behind the times (see tomorrow&amp;rsquo;s post), but it&amp;rsquo;s still an interesting enough exercise, so let&amp;rsquo;s go for it!&lt;/p>
&lt;figure>&lt;img src="https://blog.jverkamp.com/embeds/2014/LR.gif"/>
&lt;/figure></description></item><item><title>Cracker Barrel Peg Game, Part 3</title><link>https://blog.jverkamp.com/2014/07/10/cracker-barrel-peg-game-part-3/</link><pubDate>Thu, 10 Jul 2014 09:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2014/07/10/cracker-barrel-peg-game-part-3/</guid><description>&lt;p>If you were paying attention when I posted part 2 to GitHub (&lt;a href="https://github.com/jpverkamp/small-projects/blob/master/blog/pegs.rkt">pegs.rkt&lt;/a>), you might have noticed a function I hadn&amp;rsquo;t talked about: &lt;code>play&lt;/code>&lt;/p></description></item><item><title>Cracker Barrel Peg Game, Part 2</title><link>https://blog.jverkamp.com/2014/07/09/cracker-barrel-peg-game-part-2/</link><pubDate>Wed, 09 Jul 2014 09:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2014/07/09/cracker-barrel-peg-game-part-2/</guid><description>&lt;p>Hey, remember that post a few days ago about the &lt;a href="https://blog.jverkamp.com/2014/07/10/cracker-barrel-peg-game-part-3/">Cracker Barrel peg game&lt;/a>? Right at the end, I mentioned that there would be a part two, all about how to bend the puzzle at least a bit to your advantage. Basically, rather than finding the first solution to the peg game, we&amp;rsquo;re going to find &lt;em>all&lt;/em> of them. From there, we can determine which moves are easier to win from, which are harder, and which are downright impossible. Let&amp;rsquo;s do it!&lt;/p></description></item><item><title>Cracker Barrel Peg Game</title><link>https://blog.jverkamp.com/2014/07/05/cracker-barrel-peg-game/</link><pubDate>Sat, 05 Jul 2014 09:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2014/07/05/cracker-barrel-peg-game/</guid><description>&lt;p>Ever been to &lt;a href="http://www.crackerbarrel.com/">Cracker Barrel&lt;/a>? Remember that &lt;a href="http://shop.crackerbarrel.com/Peg-Game/dp/B0050PMMQA">peg game&lt;/a>? It seems that rather a few people are interested in how to solve it: &lt;a href="https://www.google.com/?q=cracker+barrel+peg+game">Google&lt;/a>. Let&amp;rsquo;s do that.&lt;/p></description></item><item><title>Factor trees</title><link>https://blog.jverkamp.com/2014/06/17/factor-trees/</link><pubDate>Tue, 17 Jun 2014 14:00:59 +0000</pubDate><guid>https://blog.jverkamp.com/2014/06/17/factor-trees/</guid><description>&lt;p>Another five minute challenge&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>, this time from &lt;a href="http://www.reddit.com/r/dailyprogrammer/comments/284uhh/6142014_challenge_166b_intermediate_prime_factor/">/r/dailyprogrammer&lt;/a>: given any positive integer, create and render a factor tree.&lt;/p></description></item><item><title>Call stack bracket matcher</title><link>https://blog.jverkamp.com/2014/06/11/call-stack-bracket-matcher/</link><pubDate>Wed, 11 Jun 2014 14:00:55 +0000</pubDate><guid>https://blog.jverkamp.com/2014/06/11/call-stack-bracket-matcher/</guid><description>&lt;p>&lt;a href="http://programmingpraxis.com/2014/06/10/balanced-delimiters-2/">Five minute post&lt;/a> from Programming Praxis:&lt;/p>
&lt;blockquote>
&lt;p>Write a function to return true/false after looking at a string. Examples of strings that pass:&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>&lt;code>{}, [], (), a(b)c, abc[d], a(b)c{d[e]}&lt;/code>&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>Examples of strings that donât pass:&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>&lt;code>{], (], a(b]c, abc[d}, a(b)c{d[e}]&lt;/code>&lt;/p>
&lt;/blockquote></description></item><item><title>What the (be)fungeâ½</title><link>https://blog.jverkamp.com/2014/06/10/what-the-befunge/</link><pubDate>Tue, 10 Jun 2014 14:00:29 +0000</pubDate><guid>https://blog.jverkamp.com/2014/06/10/what-the-befunge/</guid><description>&lt;p>Here&amp;rsquo;s a fun little bit of code for you:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">55*4*v _ v
v &amp;lt;&amp;gt;:1-:^
|:&amp;lt;$ &amp;lt; ,*48 &amp;lt;
@&amp;gt;0&lt;span style="color:#e6db74">&amp;#34;zzif&amp;#34;&lt;/span>&amp;gt;:#,_$ v
&amp;gt;:3%!| &amp;gt;0&lt;span style="color:#e6db74">&amp;#34;zzub&amp;#34;&lt;/span>&amp;gt;:#,_$^
&amp;gt;:5%!|
v &lt;span style="color:#e6db74">&amp;#34;buzz&amp;#34;&lt;/span>0&amp;lt;&amp;gt;:. ^
|!%5: &amp;lt;
&amp;gt;:#,_ $&amp;gt; ^
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Gibberish you say? No! &lt;a href="https://en.wikipedia.org/wiki/Befunge">Befuge&lt;/a>!&lt;/p></description></item><item><title>Braille unicode pixelation</title><link>https://blog.jverkamp.com/2014/05/30/braille-unicode-pixelation/</link><pubDate>Fri, 30 May 2014 14:00:11 +0000</pubDate><guid>https://blog.jverkamp.com/2014/05/30/braille-unicode-pixelation/</guid><description>&lt;p>What would you do if you were on a machine that had no higher level graphics, but you still wanted to display images?&lt;/p></description></item><item><title>Quadtree image compression</title><link>https://blog.jverkamp.com/2014/05/28/quadtree-image-compression/</link><pubDate>Wed, 28 May 2014 14:00:28 +0000</pubDate><guid>https://blog.jverkamp.com/2014/05/28/quadtree-image-compression/</guid><description>&lt;p>About two weeks ago, I came across a post via &lt;a href="http://www.reddit.com/r/programming/">/r/programming&lt;/a>: &lt;a href="http://www.reddit.com/r/programming/comments/25ptrk/quadtree_art/">Quadtree Art&lt;/a>&lt;sup>&lt;a href="https://github.com/fogleman/Quads">(src)&lt;/a>&lt;/sup>. In a sentence, the goal is to recursively divide an image into a quadtree, at each step expanding the current node with the largest internal variance.&lt;/p></description></item></channel></rss>