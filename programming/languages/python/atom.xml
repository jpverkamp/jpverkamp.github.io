<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Python on jverkamp.com</title>
    <link>https://blog.jverkamp.com/programming/languages/python/</link>
    <description>Recent content in Python on jverkamp.com</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language><atom:link href="https://blog.jverkamp.com/programming/languages/python/atom.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>AoC 2021 Day 12: Submarine Spider</title>
      <link>https://blog.jverkamp.com/2021/12/12/aoc-2021-day-12-submarine-spider/</link>
      <pubDate>Sun, 12 Dec 2021 00:00:15 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2021/12/12/aoc-2021-day-12-submarine-spider/</guid>
      <description>&lt;h3 id=&#34;source-passage-pathinghttpsadventofcodecom2021day12&#34;&gt;Source: &lt;a href=&#34;https://adventofcode.com/2021/day/12&#34;&gt;Passage Pathing&lt;/a&gt;&lt;/h3&gt;
&lt;h4 id=&#34;part-1-given-a-list-of-edges-in-a-bi-directional-graph-count-the-number-of-paths-from-start-to-end-such-that-nodes-named-with-lowercase-letters-are-visited-once-and-nodes-with-uppercase-letters-can-be-visited-any-number-of-times&#34;&gt;&lt;strong&gt;Part 1:&lt;/strong&gt; Given a list of edges in a bi-directional graph, count the number of paths from &lt;code&gt;start&lt;/code&gt; to &lt;code&gt;end&lt;/code&gt; such that nodes named with lowercase letters are visited once, and nodes with uppercase letters can be visited any number of times.&lt;/h4&gt;
&lt;p&gt;Interesting. First, let&amp;rsquo;s define a graph structure:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@dataclass&lt;/span&gt;(frozen&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;True)
&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Node&lt;/span&gt;:
    label: str

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;is_big&lt;/span&gt;(self):
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;label&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;isupper()

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; __repr__(self):
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; f&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;lt;{self.label}&amp;gt;&amp;#39;&lt;/span&gt;


&lt;span style=&#34;color:#a6e22e&#34;&gt;@dataclass&lt;/span&gt;(frozen&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;True)
&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Cave&lt;/span&gt;:
    edges: Mapping[Node, Set[Node]]

    &lt;span style=&#34;color:#a6e22e&#34;&gt;@staticmethod&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;from_file&lt;/span&gt;(file: TextIO):

        edges: Dict[Node, Set[Node]] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {}

        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; line &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; file:
            nodes &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [Node(v) &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; v &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; line&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;strip()&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;-&amp;#39;&lt;/span&gt;)]

            &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; node &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; nodes:
                &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; node &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; edges:
                    edges[node] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; set()

            &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; node_a &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; nodes:
                &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; node_b &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; nodes:
                    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; node_a &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; node_b:
                        edges[node_a]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add(node_b)

        &lt;span style=&#34;color:#75715e&#34;&gt;# Convert to a dict&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; Cave(edges)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Originally, I had the pathing function in this class directly, but because it changes for part 2, I extracted it into the part 1 function:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;part1&lt;/span&gt;(file: typer&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;FileText):
    cave &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Cave&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;from_file(file)

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;paths&lt;/span&gt;(node: Node, visited: Set[Node]) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; Generator[List[Node], None, None]:
        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&amp;#39;Yield all possible paths from the given node to &amp;lt;end&amp;gt;.&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;

        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; node &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; END:
            &lt;span style=&#34;color:#66d9ef&#34;&gt;yield&lt;/span&gt; [END]
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;

        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; node&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;is_small() &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; node &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; visited:
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;

        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; next &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; cave&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;edges[node]:
            &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; path &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; paths(next, visited &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; {node}):
                &lt;span style=&#34;color:#66d9ef&#34;&gt;yield&lt;/span&gt; [node] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; path

    count &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; _ &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; paths(START, set()):
        count &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(count)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Because the paths are short enough, we can get away with a simple recursive function. In this case, &lt;code&gt;paths&lt;/code&gt; will take the current point in the graph and a list of nodes visited already (so that we can avoid lowercase nodes that we&amp;rsquo;ve already visited) and generate all paths from that point. It does so by recursion: each step is moving to a neighboring node in the graph, we&amp;rsquo;re assuming the recursive call will generate some number of paths (might be 0), and the base case is the &lt;code&gt;end&lt;/code&gt; node.&lt;/p&gt;
&lt;p&gt;Note: If there are ever two or more &amp;lsquo;big&amp;rsquo; nodes adjacent to each other, this will totally blow up, since you can infinitely loop between the two. Good thing that doesn&amp;rsquo;t come up in our input. :D This could be fixed with &lt;a href=&#34;https://en.wikipedia.org/wiki/cycle%20detection&#34;&gt;cycle detection&lt;/a&gt;, but that would make teh algorithm somewhat slower&amp;hellip;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ python3 submarine-spider.py part1 input.txt
&lt;span style=&#34;color:#ae81ff&#34;&gt;4749&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>AoC 2021 Day 11: Octopus Flashinator</title>
      <link>https://blog.jverkamp.com/2021/12/11/aoc-2021-day-11-octopus-flashinator/</link>
      <pubDate>Sat, 11 Dec 2021 00:00:15 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2021/12/11/aoc-2021-day-11-octopus-flashinator/</guid>
      <description>&lt;h3 id=&#34;source-dumbo-octopushttpsadventofcodecom2021day11&#34;&gt;Source: &lt;a href=&#34;https://adventofcode.com/2021/day/11&#34;&gt;Dumbo Octopus&lt;/a&gt;&lt;/h3&gt;
&lt;h4 id=&#34;part-1-simulate-a-grid-of-numbers-such-that-on-each-tick-advance-all-numbers-by-1-any-number-that-increases-over-9-will-flash-and-add-1-to-all-neighbors-recursively-but-each-cell-can-only-flash-once-and-then-reset-to-0-count-the-number-of-flashes-in-the-first-100-ticks&#34;&gt;&lt;strong&gt;Part 1:&lt;/strong&gt; Simulate a grid of numbers such that on each tick: advance all numbers by 1, any number that increases over 9 will &amp;lsquo;flash&amp;rsquo; and add 1 to all neighbors (recursively, but each cell can only flash once) and then reset to 0. Count the number of flashes in the first 100 ticks.&lt;/h4&gt;
&lt;p&gt;DIRECT SIMULATION.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;
NEIGHBORS &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [
    (&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;), (&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;), (&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;),
    (&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;), (&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;), (&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;),
    (&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;), (&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;), (&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;),
]


&lt;span style=&#34;color:#a6e22e&#34;&gt;@dataclass&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Cavern&lt;/span&gt;:
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&amp;#39;Simulation for https://adventofcode.com/2021/day/11.&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;

    width: int
    height: int
    data: MutableMapping[Tuple[int, int], int]

    &lt;span style=&#34;color:#a6e22e&#34;&gt;@staticmethod&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;from_file&lt;/span&gt;(file: TextIO):
        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&amp;#39;Load a simulation from a file-like object.&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;

        data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {
            (x, y): int(value)
            &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; x, line &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; enumerate(file)
            &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; y, value &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; enumerate(line&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;strip())
        }
        width &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; max(x &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (x, _) &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; data)
        height &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; max(y &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (_, y) &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; data)

        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; Cavern(width, height, data)

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;step&lt;/span&gt;(self):
        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&amp;#39;Advance the simulation 1 step, return the number of flashes.&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;

        flashpoint &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;

        &lt;span style=&#34;color:#75715e&#34;&gt;# First advance everyone 1&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (x, y) &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;data:
            self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;data[x, y] &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;

        &lt;span style=&#34;color:#75715e&#34;&gt;# Repeatedly find any 9s, but only trigger each one once (advanced)&lt;/span&gt;
        advanced &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; set()
        &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; True:

            &lt;span style=&#34;color:#75715e&#34;&gt;# Find the set of points that haven&amp;#39;t been advanced and should&lt;/span&gt;
            to_advance &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {
                (x, y)
                &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (x, y) &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;data
                &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (x, y) &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; advanced &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;data[x, y] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;
            }

            &lt;span style=&#34;color:#75715e&#34;&gt;# If we didn&amp;#39;t, we&amp;#39;re done&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; to_advance:
                &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;

            &lt;span style=&#34;color:#75715e&#34;&gt;# If we did, increment each neighbor&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (x, y) &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; to_advance:
                flashpoint &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;

                &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (xd, yd) &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; NEIGHBORS:
                    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (x &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; xd, y &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; yd) &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;data:
                        &lt;span style=&#34;color:#66d9ef&#34;&gt;continue&lt;/span&gt;

                    self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;data[x &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; xd, y &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; yd] &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;

                advanced&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add((x, y))

        &lt;span style=&#34;color:#75715e&#34;&gt;# Once we&amp;#39;re out of the loop, set all points that actually advanced (hit 9) to 0&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (x, y) &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; advanced:
            self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;data[x, y] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;

        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; flashpoint

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; __str__(self):
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;join(
            &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;join(str(self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;data[x, y]) &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; y &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;height))
            &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;width)
        ) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;I particularly enjoy that &lt;code&gt;step&lt;/code&gt; function. It seems pretty clean to me, using one &lt;code&gt;set&lt;/code&gt; of values we&amp;rsquo;ve already &lt;code&gt;advanced&lt;/code&gt; and calculating a new &lt;code&gt;set&lt;/code&gt; of values &lt;code&gt;to_advance&lt;/code&gt; so that we don&amp;rsquo;t duplicate.&lt;/p&gt;
&lt;p&gt;And it makes for pretty clean code!&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;part1&lt;/span&gt;(file: typer&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;FileText):

    cavern &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Cavern&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;from_file(file)
    flashpoint &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;):
        flashpoint &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; cavern&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;step()

    &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(flashpoint)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;How many flashes?&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ python3 octopus-flashinator.py part1 input.txt
&lt;span style=&#34;color:#ae81ff&#34;&gt;1679&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>AoC 2021 Day 10: Chunkinator</title>
      <link>https://blog.jverkamp.com/2021/12/10/aoc-2021-day-10-chunkinator/</link>
      <pubDate>Fri, 10 Dec 2021 00:00:15 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2021/12/10/aoc-2021-day-10-chunkinator/</guid>
      <description>&lt;h3 id=&#34;source-syntax-scoringhttpsadventofcodecom2021day10&#34;&gt;Source: &lt;a href=&#34;https://adventofcode.com/2021/day/10&#34;&gt;Syntax Scoring&lt;/a&gt;&lt;/h3&gt;
&lt;h4 id=&#34;part-1-given-a-sequence-of----and--with-nesting-allowed-find-the-first-syntax-error-where-the-wrong-closing-symbol-is-used-scoring-3-57-1197-and-25137-respectively-for-each-error-calculate-the-total-error-score&#34;&gt;&lt;strong&gt;Part 1:&lt;/strong&gt; Given a sequence of () [] {}, and &amp;lt;&amp;gt; with nesting allowed. Find the first syntax error (where the wrong closing symbol is used). Scoring 3, 57, 1197, and 25137 respectively for each error, calculate the total error score.&lt;/h4&gt;
&lt;p&gt;Interesting. Let&amp;rsquo;s use Python exceptions!&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Using the strings directly is fine for python, but not mypy&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# chunkinator.py:38: error: Unpacking a string is disallowed&lt;/span&gt;
pairs &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [tuple(pair) &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; pair &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;()&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;[]&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;{}&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;lt;&amp;gt;&amp;#39;&lt;/span&gt;]]

&lt;span style=&#34;color:#a6e22e&#34;&gt;@dataclass&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ParseMismatchException&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;Exception&lt;/span&gt;):
    expected: str
    actual: str


&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;parse&lt;/span&gt;(line: str):
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&amp;#39;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    Parse a line of matching pairs. For every left, you must match the corresponding right (respecting nesting).
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    If a mismatch is detected, raise a ParseMismatchException containing the expected/actual character.
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    Otherwise, return True
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    &amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;

    stack &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []

    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; c &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; line:
        matched &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; False

        &lt;span style=&#34;color:#75715e&#34;&gt;# Start a new matching pair&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; left, right &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; pairs:
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; c &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; left:
                stack&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(right)
                matched &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; True
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; matched:
            &lt;span style=&#34;color:#66d9ef&#34;&gt;continue&lt;/span&gt;

        &lt;span style=&#34;color:#75715e&#34;&gt;# Otherwise, we have a closing character, check the stack&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; c &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; (top :&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; stack&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pop()):
            &lt;span style=&#34;color:#66d9ef&#34;&gt;continue&lt;/span&gt;

        &lt;span style=&#34;color:#75715e&#34;&gt;# Otherwise, we have a failed match&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;raise&lt;/span&gt; ParseMismatchException(expected&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;top, actual&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;c)
    &lt;span style=&#34;color:#75715e&#34;&gt;# Otherwise, yay!&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; True
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;I expect that we&amp;rsquo;ll want to do something with &amp;lsquo;incomplete&amp;rsquo; matches in Part 2, but we haven&amp;rsquo;t had to do that yet. So let&amp;rsquo;s use this to solve the problem!&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;part1&lt;/span&gt;(file: typer&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;FileText):

    scores &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;)&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;]&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;57&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;}&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;1197&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;gt;&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;25137&lt;/span&gt;}
    total_score &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; line &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; file:
        line &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; line&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;strip()

        &lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt;:
            parse(line)

        &lt;span style=&#34;color:#66d9ef&#34;&gt;except&lt;/span&gt; ParseMismatchException &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; ex:
            total_score &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; scores[ex&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;actual]

    &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(total_score)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;I like it when the parsing function does most of the work!&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ python3 chunkinator.py part1 input.txt
&lt;span style=&#34;color:#ae81ff&#34;&gt;167379&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>AoC 2021 Day 9: Local Minimum Deminifier</title>
      <link>https://blog.jverkamp.com/2021/12/09/aoc-2021-day-9-local-minimum-deminifier/</link>
      <pubDate>Thu, 09 Dec 2021 00:00:15 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2021/12/09/aoc-2021-day-9-local-minimum-deminifier/</guid>
      <description>&lt;h3 id=&#34;source-smoke-basinhttpsadventofcodecom2021day9&#34;&gt;Source: &lt;a href=&#34;https://adventofcode.com/2021/day/9&#34;&gt;Smoke Basin&lt;/a&gt;&lt;/h3&gt;
&lt;h4 id=&#34;part-1-given-a-heightmap-find-all-local-minimums-return-the-sum-of-minimum-height--1-for-each-local-minimum&#34;&gt;&lt;strong&gt;Part 1:&lt;/strong&gt; Given a heightmap, find all local minimums. Return the sum of (minimum height + 1) for each local minimum.&lt;/h4&gt;
&lt;p&gt;First, as is often the case, let&amp;rsquo;s load the data:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;load&lt;/span&gt;(file: TextIO) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; MutableMapping[Tuple[int, int], int]:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; {
        (x, y): int(height)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; y, line &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; enumerate(file)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; x, height &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; enumerate(line&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;strip())
    }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This could more efficiently have been stored in a 2D array, but I really like dicts of &lt;code&gt;point -&amp;gt; value&lt;/code&gt; for this sort of thing. Especially because in Python you don&amp;rsquo;t actually need the &lt;code&gt;()&lt;/code&gt; for tuples in most cases, just the comma. So &lt;code&gt;heightmap[x,y]&lt;/code&gt; works great.&lt;/p&gt;
&lt;p&gt;After we have that data, it&amp;rsquo;s just a matter of checking each point to see if all 2/3/4 neighbors are larger than a specific point, while at the same time making sure that we don&amp;rsquo;t run off the edge of the map.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@app.command&lt;/span&gt;()
&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;part1&lt;/span&gt;(file: typer&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;FileText):

    heightmap &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; load(file)
    total_risk &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (x, y), height &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; heightmap&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;items():
        neighbor_heights &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [
            heightmap&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;get((x &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; xd, y &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; yd), &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;)
            &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; xd, yd &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; ORTHAGONAL_NEIGHBORS
        ]

        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; min(neighbor_heights) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; height:
            total_risk &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; height &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(f&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;{total_risk=}&amp;#39;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;ORTHAGONAL_NEIGHBORS = [(-1, 0), (1, 0), (0, -1), (0, 1)]&lt;/code&gt;. And that&amp;rsquo;s all we need:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ python3 local-minimum-deminifier.py part1 input.txt
total_risk&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;491&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>AoC 2021 Day 8: Seven Segment Demystifier</title>
      <link>https://blog.jverkamp.com/2021/12/08/aoc-2021-day-8-seven-segment-demystifier/</link>
      <pubDate>Wed, 08 Dec 2021 00:00:10 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2021/12/08/aoc-2021-day-8-seven-segment-demystifier/</guid>
      <description>&lt;h3 id=&#34;source-seven-segment-searchhttpsadventofcodecom2021day8&#34;&gt;Source: &lt;a href=&#34;https://adventofcode.com/2021/day/8&#34;&gt;Seven Segment Search&lt;/a&gt;&lt;/h3&gt;
&lt;h4 id=&#34;part-1-simulate-a-hahahugoshortcode-s0-hbhb-where-you-do-not-know-which-input-wire-controls-which-segment-given-the-wires-used-in-all-ten-digits-and-four-output-digits-count-how-many-times-1-4-7-and-8-are-outputted&#34;&gt;&lt;strong&gt;Part 1:&lt;/strong&gt; Simulate a &lt;a href=&#34;https://en.wikipedia.org/wiki/seven%20segment%20displey&#34;&gt;seven segment displey&lt;/a&gt; where you do not know which input wire controls which segment. Given the wires used in all ten digits and four output digits, count how many times 1, 4, 7, and 8 are outputted.&lt;/h4&gt;
&lt;p&gt;This one took me &lt;em&gt;far&lt;/em&gt; longer to work out than I&amp;rsquo;d care to admit. And it wasn&amp;rsquo;t at all because I had the wrong approach (I went for brute force again), but rather because I had &lt;em&gt;mistyped one character&lt;/em&gt; in my input. Bah humbug. That&amp;rsquo;s why you write tests&amp;hellip; Oy.&lt;/p&gt;
&lt;p&gt;Like I mentioned, I&amp;rsquo;m just going to try to brute force this problem. It will be slower than using their advice (the advice being that there is always 1 input with two segments (one) and 1 with 3 (seven). Instead, brute forcing all ten digits makes for much cleaner code. First, let&amp;rsquo;s set up some constants:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Seven segment display&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#   0:      1:      2:      3:      4:&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#  aaaa    ....    aaaa    aaaa    ....&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# b    c  .    c  .    c  .    c  b    c&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# b    c  .    c  .    c  .    c  b    c&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#  ....    ....    dddd    dddd    dddd&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# e    f  .    f  e    .  .    f  .    f&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# e    f  .    f  e    .  .    f  .    f&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#  gggg    ....    gggg    gggg    ....&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#   5:      6:      7:      8:      9:&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#  aaaa    aaaa    aaaa    aaaa    aaaa&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# b    .  b    .  .    c  b    c  b    c&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# b    .  b    .  .    c  b    c  b    c&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#  dddd    dddd    ....    dddd    dddd&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# .    f  e    f  .    f  e    f  .    f&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# .    f  e    f  .    f  e    f  .    f&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#  gggg    gggg    ....    gggg    gggg&lt;/span&gt;

SEGMENTS &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [
    {&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;b&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;c&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;e&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;f&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;g&amp;#39;&lt;/span&gt;},
    {&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;c&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;f&amp;#39;&lt;/span&gt;},
    {&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;c&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;d&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;e&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;g&amp;#39;&lt;/span&gt;},
    {&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;c&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;d&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;f&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;g&amp;#39;&lt;/span&gt;},
    {&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;b&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;c&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;d&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;f&amp;#39;&lt;/span&gt;},
    {&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;b&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;d&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;f&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;g&amp;#39;&lt;/span&gt;},
    {&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;b&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;d&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;e&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;f&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;g&amp;#39;&lt;/span&gt;},
    {&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;c&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;f&amp;#39;&lt;/span&gt;},
    {&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;b&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;c&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;d&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;e&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;f&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;g&amp;#39;&lt;/span&gt;},
    {&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;b&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;c&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;d&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;f&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;g&amp;#39;&lt;/span&gt;},
]

ALPHABET &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;abcdefg&amp;#39;&lt;/span&gt;
MAPPINGS &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [
    dict(zip(ALPHABET, ordering))
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; ordering &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; itertools&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;permutations(ALPHABET)
]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The &lt;code&gt;SEGMENTS&lt;/code&gt; define a set of correctly labeled wires goes to each segment (in order). So &lt;code&gt;0&lt;/code&gt; uses all of them but &lt;code&gt;d&lt;/code&gt;, &lt;code&gt;1&lt;/code&gt; uses only &lt;code&gt;c&lt;/code&gt; and &lt;code&gt;f&lt;/code&gt;, etc.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;MAPPINGS&lt;/code&gt; is a neat trick. Using &lt;code&gt;&lt;a href=&#34;https://docs.python.org/3/search.html?q=itertools.permutations&#34;&gt;itertools.permutations&lt;/a&gt;&lt;/code&gt;
, we can generate all possible arrangements of the 7 letters in &lt;code&gt;ALPHABET&lt;/code&gt;. We then zip each &lt;code&gt;ordering&lt;/code&gt; up with &lt;code&gt;ALPHABET&lt;/code&gt;, convert to a &lt;code&gt;dict&lt;/code&gt; and we have a conversion. For example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; MAPPINGS[&lt;span style=&#34;color:#ae81ff&#34;&gt;286&lt;/span&gt;]
{&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;b&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;d&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;c&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;c&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;d&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;g&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;e&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;f&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;f&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;b&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;g&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;e&amp;#39;&lt;/span&gt;}
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; MAPPINGS[&lt;span style=&#34;color:#ae81ff&#34;&gt;286&lt;/span&gt;][&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;]
&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; MAPPINGS[&lt;span style=&#34;color:#ae81ff&#34;&gt;286&lt;/span&gt;][&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;g&amp;#39;&lt;/span&gt;]
&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;e&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In this case, input wire &lt;code&gt;a&lt;/code&gt; maps to output &lt;code&gt;a&lt;/code&gt;, but &lt;code&gt;g&lt;/code&gt; maps to &lt;code&gt;e&lt;/code&gt;, etc.&lt;/p&gt;
&lt;p&gt;Okay. Fun part. For each input, we have all ten digits, with the input wires that makes those up, but we don&amp;rsquo;t know which mapping matches. But we do know if a &lt;code&gt;mapping&lt;/code&gt; is valid, it will have to turn each of those ten inputs into one of the possible &lt;code&gt;SEGMENTS&lt;/code&gt;. So we can do this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;load&lt;/span&gt;(file: TextIO) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; Generator[List[int], None, None]:
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&amp;#39;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    Load an input file with a scrambled set of 7 segment displays than 4 output digits.&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; line &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; file:
        raw_inputs, raw_outputs &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; line&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39; | &amp;#39;&lt;/span&gt;)
        inputs &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [set(input) &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; input &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; raw_inputs&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;split()]
        outputs &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [set(output) &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; output &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; raw_outputs&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;split()]

        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; mapping &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; MAPPINGS:
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; any(
                {mapping[v] &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; v &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; input} &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; SEGMENTS
                &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; input &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; inputs
            ):
                &lt;span style=&#34;color:#66d9ef&#34;&gt;continue&lt;/span&gt;

            &lt;span style=&#34;color:#66d9ef&#34;&gt;yield&lt;/span&gt; [
                SEGMENTS&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;index({mapping[v] &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; v &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; output})
                &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; output &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; outputs
            ]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We&amp;rsquo;ll take the input (which looks like &lt;code&gt;acedgfb cdfbe gcdfa fbcad dab cefabd cdfgeb eafb cagedb ab | cdfeb fcadb cdfeb cdbaf&lt;/code&gt;), split the input and output, and then go through each &lt;code&gt;mapping&lt;/code&gt;. The line &lt;code&gt;{mapping[v] for v in input}&lt;/code&gt; creates the output given the mapping, so we apply that to every &lt;code&gt;input&lt;/code&gt; in &lt;code&gt;inputs&lt;/code&gt; and check for any &lt;em&gt;not&lt;/em&gt; in &lt;code&gt;SEGMENTS&lt;/code&gt;. If that&amp;rsquo;s the case, the mapping isn&amp;rsquo;t valid, so skip it. We should have exactly 1 mapping that&amp;rsquo;s valid, so decode the outputs (using that same mapping) and &lt;code&gt;yield&lt;/code&gt; the resulting digits.&lt;/p&gt;
&lt;p&gt;I expect that&amp;rsquo;s overkill / already implementing part 2&amp;hellip; but that&amp;rsquo;s okay!&lt;/p&gt;
&lt;p&gt;Since we have the digits, count up the 1, 4, 7, and 8 (they&amp;rsquo;re the easiest to determine).&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;part1&lt;/span&gt;(file: typer&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;FileText):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(sum(
        &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; digit &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; (&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; digits &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; load(file)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; digit &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; digits
    ))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Yeah&amp;hellip; that&amp;rsquo;s it!&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ python3 seven-segment-demystifier.py part1 input.txt
&lt;span style=&#34;color:#ae81ff&#34;&gt;349&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>AoC 2021 Day 7: Brachyura Aligner</title>
      <link>https://blog.jverkamp.com/2021/12/07/aoc-2021-day-7-brachyura-aligner/</link>
      <pubDate>Tue, 07 Dec 2021 00:00:10 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2021/12/07/aoc-2021-day-7-brachyura-aligner/</guid>
      <description>&lt;h3 id=&#34;source-the-treachery-of-whaleshttpsadventofcodecom2021day7&#34;&gt;Source: &lt;a href=&#34;https://adventofcode.com/2021/day/7&#34;&gt;The Treachery of Whales&lt;/a&gt;&lt;/h3&gt;
&lt;h4 id=&#34;part-1-given-a-list-of-numbers-find-the-minimum-integer-i-such-the-sum-difference-of-each-number-and-i-is-minimized&#34;&gt;&lt;strong&gt;Part 1:&lt;/strong&gt; Given a list of numbers, find the minimum integer &lt;code&gt;I&lt;/code&gt; such the sum difference of each number and I is minimized.&lt;/h4&gt;
&lt;p&gt;There is probably a fancy number theory way of doing it to solve directly for &lt;code&gt;I&lt;/code&gt;, but it&amp;rsquo;s a really quick problem to brute force:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;part1&lt;/span&gt;(file: typer&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;FileText):

    positions &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [
        int(value)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; line &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; file
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; value &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; line&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;,&amp;#39;&lt;/span&gt;)
    ]

    fuel, target &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; min(
        (
            sum(abs(position &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; target) &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; position &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; positions),
            target
        )
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; target &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(min(positions), max(positions)&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
    )

    &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(f&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;{target=}, {fuel=}&amp;#39;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Load in the numbers, calculate every possible &lt;code&gt;target&lt;/code&gt; from minimum to maximum and the sum distance for that value of &lt;code&gt;I&lt;/code&gt;, then return just the minimum such value.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ python3 brachyura-aligner.py part1 input.txt
target&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;323, fuel&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;336040&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Quick.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>AoC 2021 Day 6: We All Glow Down Here</title>
      <link>https://blog.jverkamp.com/2021/12/06/aoc-2021-day-6-we-all-glow-down-here/</link>
      <pubDate>Mon, 06 Dec 2021 00:00:10 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2021/12/06/aoc-2021-day-6-we-all-glow-down-here/</guid>
      <description>&lt;h3 id=&#34;source-latternfishhttpsadventofcodecom2021day6&#34;&gt;Source: &lt;a href=&#34;https://adventofcode.com/2021/day/6&#34;&gt;Latternfish&lt;/a&gt;&lt;/h3&gt;
&lt;h4 id=&#34;part-1-simulate-a-population-of-lanternfish-each-fish-is-immortal-starts-having-children-after-9-days-and-has-another-child-after-7-more-days-calculate-the-number-of-fish-after-80-days&#34;&gt;&lt;strong&gt;Part 1:&lt;/strong&gt; Simulate a population of lanternfish. Each fish is immortal, starts having children after 9 days, and has another child after 7 more days. Calculate the number of fish after 80 days.&lt;/h4&gt;
&lt;p&gt;I can almost guarantee that part 2 will be scaling up significantly, so the obvious answer of keeping a list of ages and simulating each will&amp;hellip; probably get very slow. Instead, we don&amp;rsquo;t care at all about individual fish, let&amp;rsquo;s just keep their ages:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;School&lt;/span&gt;:
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&amp;#39;Represents a school of fish.&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; __init__(self, fish):
        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&amp;#39;Loads the given list of fish into a map of ages.&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;

        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {
            age: &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; age &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;)
        }

        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; each &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; fish:
            self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;data[each] &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;

    &lt;span style=&#34;color:#a6e22e&#34;&gt;@staticmethod&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;from_file&lt;/span&gt;(file: TextIO):
        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&amp;#39;Load a school from a file-like object&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;

        fish &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [
            int(age)
            &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; line &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; file
            &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; age &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; line&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;,&amp;#39;&lt;/span&gt;)
        ]

        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; School(fish)

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;step&lt;/span&gt;(self):
        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&amp;#39;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        Advance this school 1 day.
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        All fish increase in age by 1 tick
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        Fish that are of a spawning age reset to 7 days to spawn and create a new 9 day to spawn fish. 
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        Remember 0 based indexing.
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        &amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;

        &lt;span style=&#34;color:#75715e&#34;&gt;# Remember how many fish are going to spawn&lt;/span&gt;
        breeding &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;data[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]

        &lt;span style=&#34;color:#75715e&#34;&gt;# Increase age of each fish by 1&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; age &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;):
            self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;data[age &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;data[age]

        &lt;span style=&#34;color:#75715e&#34;&gt;# Each fish that spawns moves to age 6 (don&amp;#39;t overwrite previously age 7) and spawns a new one of age 8&lt;/span&gt;
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;data[&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; breeding
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;data[&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; breeding

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; __str__(self):
        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&amp;#39;Return a comma-delimited list of fish ages.&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;

        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;,&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;join(
            str(age)
            &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; age, qty &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;data&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;items()
            &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; _ &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(qty)
        )

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;size&lt;/span&gt;(self):
        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&amp;#39;Return the number of fish in the school.&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;

        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; sum(qty &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; age, qty &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;data&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;items())
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;That really handles it. Most of it is bookkeeping: loading in the fish from a file, printing them nicely, and counting the &lt;code&gt;len&lt;/code&gt; / number of fish. The interesting bit is &lt;code&gt;step&lt;/code&gt;, where we have to be a little careful with ages:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;All fish age 1-8 increase in age 1 step (which means they are one step closer to breeding age)&lt;/li&gt;
&lt;li&gt;All fish age 0 revert to age 6 (which means 6 steps to breeding age) plus spawn a new one&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If we count up, that means each number overwrites the one we&amp;rsquo;ve already done, which is fine.&lt;/p&gt;
&lt;p&gt;And&amp;hellip; that&amp;rsquo;s all we really need:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@app.command&lt;/span&gt;()
&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;(ticks: int, file: typer&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;FileText):
    school &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; School&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;from_file(file)

    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(ticks):
        school&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;step()

    &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(school&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;size())
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Run it for 80:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ python3 we-all-glow-down-here.py &lt;span style=&#34;color:#ae81ff&#34;&gt;80&lt;/span&gt; input.txt
&lt;span style=&#34;color:#ae81ff&#34;&gt;395627&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Fin.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>AoC 2021 Day 5: Linear Avoidinator</title>
      <link>https://blog.jverkamp.com/2021/12/05/aoc-2021-day-5-linear-avoidinator/</link>
      <pubDate>Sun, 05 Dec 2021 00:00:10 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2021/12/05/aoc-2021-day-5-linear-avoidinator/</guid>
      <description>&lt;h3 id=&#34;source-hydrothermal-venturehttpsadventofcodecom2021day5&#34;&gt;Source: &lt;a href=&#34;https://adventofcode.com/2021/day/5&#34;&gt;Hydrothermal Venture&lt;/a&gt;&lt;/h3&gt;
&lt;h4 id=&#34;part-1-given-a-list-of-lines-find-the-number-of-integer-points-which-are-covered-by-more-than-one-line-ignore-non-vertical-and-non-horizontal-lines&#34;&gt;&lt;strong&gt;Part 1:&lt;/strong&gt; Given a list of lines, find the number of integer points which are covered by more than one line (ignore non-vertical and non-horizontal lines).&lt;/h4&gt;
&lt;p&gt;Okay. Start with the data structures:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@dataclass&lt;/span&gt;(frozen&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;True)
&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Point&lt;/span&gt;:
    x: int
    y: int


&lt;span style=&#34;color:#a6e22e&#34;&gt;@dataclass&lt;/span&gt;(frozen&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;True)
&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Line&lt;/span&gt;:
    p1: Point
    p2: Point

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;is_vertical&lt;/span&gt;(self):
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;p1&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;x &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;p2&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;x

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;is_horizontal&lt;/span&gt;(self):
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;p1&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;y &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;p2&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;y

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;is_orthagonal&lt;/span&gt;(self):
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;is_vertical() &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;is_horizontal()

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;points&lt;/span&gt;(self):
        &lt;span style=&#34;color:#75715e&#34;&gt;# TODO: handle lines that aren&amp;#39;t vertical, horizontal, or diagonal&lt;/span&gt;

        xd &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;p1&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;x &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;p2&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;x &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; (&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;p1&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;x &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;p2&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;x &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
        yd &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;p1&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;y &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;p2&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;y &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; (&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;p1&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;y &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;p2&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;y &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)

        p &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;p1
        &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; p &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;p2:
            &lt;span style=&#34;color:#66d9ef&#34;&gt;yield&lt;/span&gt; p
            p &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Point(p&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;x &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; xd, p&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;y &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; yd)

        &lt;span style=&#34;color:#66d9ef&#34;&gt;yield&lt;/span&gt; p
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Dataclasses are great. They give you constructors and a bunch of other things for free. On top of that, if you specify &lt;code&gt;frozen=True&lt;/code&gt;, making them immutable, you also get &lt;code&gt;hashable&lt;/code&gt; types for free (which I&amp;rsquo;ll use in the problem).&lt;/p&gt;
&lt;p&gt;Perhaps the most interesting bit here is the function that will iterate through the &lt;code&gt;points&lt;/code&gt; in a &lt;code&gt;List&lt;/code&gt;. Specifically, it will figure out the x and y delta (&lt;code&gt;xd&lt;/code&gt; and &lt;code&gt;yd&lt;/code&gt;) and repeatedly add that until you hit the end point.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; this only works for lines that are vertical, horizontal, or diagonal (at 45 degrees). Anything else needs a better &lt;a href=&#34;https://en.wikipedia.org/wiki/line%20drawing%20algorithm&#34;&gt;line drawing algorithm&lt;/a&gt; (of which there are a few). If we need it, I&amp;rsquo;ll implement it.&lt;/p&gt;
&lt;p&gt;Next, use that to parse:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;parse&lt;/span&gt;(file: TextIO) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; List[Line]:
    result &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []

    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; line &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; file:
        x1, y1, x2, y2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [int(v) &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; v &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; line&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;replace(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39; -&amp;gt; &amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;,&amp;#39;&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;,&amp;#39;&lt;/span&gt;)]
        result&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(Line(Point(x1, y1), Point(x2, y2)))

    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; result
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The input format is &lt;code&gt;x1,y1 -&amp;gt; x2,y2&lt;/code&gt;, but it&amp;rsquo;s easier to split and convert if we do it all directly. There are a few other ways we could have done this: splitting on anything non-numeric or using a regular expression / something else for parsing directly. But I think this is clear enough.&lt;/p&gt;
&lt;p&gt;And with all that, the problem is actually pretty short:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;part1&lt;/span&gt;(file: typer&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;FileText):

    lines &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; parse(file)
    counter: MutableMapping[Point, int] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; collections&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Counter()

    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; line &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; lines:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; line&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;is_orthagonal():
            &lt;span style=&#34;color:#66d9ef&#34;&gt;continue&lt;/span&gt;

        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; point &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; line&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;points():
            counter[point] &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(sum(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; count &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; point, count &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; counter&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;items()))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We&amp;rsquo;ll use the built in &lt;code&gt;collections.Counter&lt;/code&gt; datatype, since that&amp;rsquo;s exactly what we&amp;rsquo;re doing: counting things. Then just iterate over every line, skip the non-orthagonal ones, iterate over every point, and count them up. At the end, print the number that we saw more than once. Et voila.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ python3 linear-avoidinator.py part1 input.txt
&lt;span style=&#34;color:#ae81ff&#34;&gt;5632&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>AoC 2021 Day 4: His Name Oh</title>
      <link>https://blog.jverkamp.com/2021/12/04/aoc-2021-day-4-his-name-oh/</link>
      <pubDate>Sat, 04 Dec 2021 00:00:10 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2021/12/04/aoc-2021-day-4-his-name-oh/</guid>
      <description>&lt;h3 id=&#34;source-giant-squidhttpsadventofcodecom2021day4&#34;&gt;Source: &lt;a href=&#34;https://adventofcode.com/2021/day/4&#34;&gt;Giant Squid&lt;/a&gt;&lt;/h3&gt;
&lt;h4 id=&#34;part-1-given-a-set-of-bingo-boards-and-a-list-of-numbers-find-the-first-board-to-win-multiply-the-sum-of-the-un-called-numbers-on-that-board-times-the-last-number-called&#34;&gt;&lt;strong&gt;Part 1:&lt;/strong&gt; Given a set of bingo boards and a list of numbers, find the first board to win. Multiply the sum of the un-called numbers on that board times the last number called.&lt;/h4&gt;</description>
    </item>
    
    <item>
      <title>AoC 2021 Day 3: Binary Contraption</title>
      <link>https://blog.jverkamp.com/2021/12/03/aoc-2021-day-3-binary-contraption/</link>
      <pubDate>Fri, 03 Dec 2021 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2021/12/03/aoc-2021-day-3-binary-contraption/</guid>
      <description>&lt;h3 id=&#34;source-binary-diagnostichttpsadventofcodecom2021day3&#34;&gt;Source: &lt;a href=&#34;https://adventofcode.com/2021/day/3&#34;&gt;Binary Diagnostic&lt;/a&gt;&lt;/h3&gt;
&lt;h4 id=&#34;part-1-given-a-list-of-binary-numbers-calculate-gamma-such-that-each-bit-is-the-most-common-bit-in-that-position-in-the-input-and-epsilon-which-is-the-binary-inverse-of-gamma-return-the-product&#34;&gt;&lt;strong&gt;Part 1:&lt;/strong&gt; Given a list of binary numbers, calculate gamma such that each bit is the most common bit in that position in the input and epsilon which is the binary inverse of gamma. Return the product.&lt;/h4&gt;</description>
    </item>
    
    <item>
      <title>AoC 2021 Day 2: Submarine Simulator</title>
      <link>https://blog.jverkamp.com/2021/12/02/aoc-2021-day-2-submarine-simulator/</link>
      <pubDate>Thu, 02 Dec 2021 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2021/12/02/aoc-2021-day-2-submarine-simulator/</guid>
      <description>&lt;h3 id=&#34;source-divehttpsadventofcodecom2021day2&#34;&gt;Source: &lt;a href=&#34;https://adventofcode.com/2021/day/2&#34;&gt;Dive!&lt;/a&gt;&lt;/h3&gt;
&lt;h4 id=&#34;part-1-simulate-a-submarine-with-3-commands-forward-n-down-n-and-up-n-that-move-forward-increase-depth-and-decrease-depth-in-that-order-calculate-the-product-of-the-final-position-and-depth&#34;&gt;&lt;strong&gt;Part 1:&lt;/strong&gt; Simulate a submarine with 3 commands: &lt;code&gt;forward N&lt;/code&gt;, &lt;code&gt;down N&lt;/code&gt;, and &lt;code&gt;up N&lt;/code&gt; that move forward, increase depth, and decrease depth in that order. Calculate the product of the final position and depth.&lt;/h4&gt;</description>
    </item>
    
    <item>
      <title>AoC 2021 Day 1: Depth Finder</title>
      <link>https://blog.jverkamp.com/2021/12/01/aoc-2021-day-1-depth-finder/</link>
      <pubDate>Wed, 01 Dec 2021 00:00:03 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2021/12/01/aoc-2021-day-1-depth-finder/</guid>
      <description>&lt;h3 id=&#34;source-depth-finderhttpsadventofcodecom2021day1&#34;&gt;Source: &lt;a href=&#34;https://adventofcode.com/2021/day/1&#34;&gt;Depth Finder&lt;/a&gt;&lt;/h3&gt;
&lt;h4 id=&#34;part-1-given-a-list-of-numbers-count-how-many-times-sequential-numbers-increase&#34;&gt;&lt;strong&gt;Part 1:&lt;/strong&gt; Given a list of numbers, count how many times sequential numbers increase.&lt;/h4&gt;</description>
    </item>
    
    <item>
      <title>Advent of Code 2021</title>
      <link>https://blog.jverkamp.com/2021/12/01/advent-of-code-2021/</link>
      <pubDate>Wed, 01 Dec 2021 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2021/12/01/advent-of-code-2021/</guid>
      <description>&lt;p&gt;Been a while since I&amp;rsquo;ve done an advent of code! I&amp;rsquo;ll probably backfill a few years eventually, but for now, let&amp;rsquo;s just write some code!&lt;/p&gt;
&lt;p&gt;As always, these problems are wonderful to try to solve yourself. If you agree, &lt;em&gt;stop reading now&lt;/em&gt;. This post isn&amp;rsquo;t going anywhere.&lt;/p&gt;
&lt;p&gt;If you&amp;rsquo;d like to see the full form of any particular solution, you can do so on GitHub (including previous years and possibly some I haven&amp;rsquo;t written up yet): &lt;a href=&#34;https://github.com/jpverkamp/advent-of-code&#34;&gt;jpverkamp/advent-of-code&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Splitting Images</title>
      <link>https://blog.jverkamp.com/2021/08/10/splitting-images/</link>
      <pubDate>Tue, 10 Aug 2021 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2021/08/10/splitting-images/</guid>
      <description>&lt;p&gt;I recently came across a problem where I had a single image with a transparent background containing multiple images that I wanted to split into their component parts. For example, split this:&lt;/p&gt;
&lt;figure class=&#34;border&#34;&gt;
    &lt;img src=&#34;https://blog.jverkamp.com/embeds/2021/hi.png&#34;/&gt; 
&lt;/figure&gt;

&lt;p&gt;Into these:&lt;/p&gt;
&lt;p&gt;&lt;figure class=&#34;border&#34;&gt;
    &lt;img src=&#34;https://blog.jverkamp.com/embeds/2021/hi_1.png&#34;/&gt; 
&lt;/figure&gt;

&lt;figure class=&#34;border&#34;&gt;
    &lt;img src=&#34;https://blog.jverkamp.com/embeds/2021/hi_2.png&#34;/&gt; 
&lt;/figure&gt;

&lt;figure class=&#34;border&#34;&gt;
    &lt;img src=&#34;https://blog.jverkamp.com/embeds/2021/hi_3.png&#34;/&gt; 
&lt;/figure&gt;

&lt;figure class=&#34;border&#34;&gt;
    &lt;img src=&#34;https://blog.jverkamp.com/embeds/2021/hi_4.png&#34;/&gt; 
&lt;/figure&gt;

&lt;figure class=&#34;border&#34;&gt;
    &lt;img src=&#34;https://blog.jverkamp.com/embeds/2021/hi_5.png&#34;/&gt; 
&lt;/figure&gt;
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Ordering Board Game Geek GeekLists by Rank</title>
      <link>https://blog.jverkamp.com/2021/06/28/ordering-board-game-geek-geeklists-by-rank/</link>
      <pubDate>Mon, 28 Jun 2021 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2021/06/28/ordering-board-game-geek-geeklists-by-rank/</guid>
      <description>&lt;p&gt;A quick script.&lt;/p&gt;
&lt;p&gt;I play a lot of board games. With the whole COVID-19 mess, I&amp;rsquo;ve been playing a lot on &lt;a href=&#34;https://boardgamearena.com/&#34;&gt;Board Game Arena&lt;/a&gt;, which is a wonderful site. But one thing that&amp;rsquo;s a bit lacking is having ratings / metadata about games to great games I&amp;rsquo;ve just not heard about before. Where can you get lots of that data? &lt;a href=&#34;https://boardgamegeek.com/&#34;&gt;Board Game Geek&lt;/a&gt;!&lt;/p&gt;
&lt;p&gt;The problem though, is merging the two. So, how do we do it? Well, this time around, I&amp;rsquo;m going to start with &lt;a href=&#34;https://boardgamegeek.com/geeklist/252354/list-games-board-game-arena&#34;&gt;this GeekList&lt;/a&gt; that someone else maintains of BGA games on BGG. Which has the games, but no ranks. And apparently there are no ways to rank those by BGG (for some reason). But that&amp;rsquo;s easy when you know a bit of scripting!&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Categorizing r/Fantasy Book Bingo Books</title>
      <link>https://blog.jverkamp.com/2021/06/24/categorizing-r/fantasy-book-bingo-books/</link>
      <pubDate>Thu, 24 Jun 2021 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2021/06/24/categorizing-r/fantasy-book-bingo-books/</guid>
      <description>&lt;p&gt;I&amp;rsquo;ve been working through the &lt;a href=&#34;https://blog.jverkamp.com/2021/04/01/2021-book-bingo/&#34;&gt;r/Fantasy 2021 Book Bingo&lt;/a&gt; this year:&lt;/p&gt;
&lt;h1&gt;2021 Book Bingo&lt;/h1&gt;

&lt;table class=&#34;bingo&#34;&gt;&lt;tr&gt;&lt;td&gt;

            &lt;p&gt;SFF anthology or collection&lt;/p&gt;&lt;a href=&#34;https://blog.jverkamp.com/2021/03/26/attack-on-titan-vol.-1/&#34;&gt;
                        &lt;figure&gt;
                            &lt;img src=&#34;https://blog.jverkamp.com/embeds/books/attack-on-titan-vol-1.jpg&#34;&gt;
                            &lt;figcaption&gt;Attack on Titan, Vol. 1&lt;/figcaption&gt;
                        &lt;/figure&gt; 
                    &lt;/a&gt;&lt;/td&gt;&lt;td&gt;

            &lt;p&gt;Set in Asia (Hard: by an Asian author)&lt;/p&gt;&lt;/td&gt;&lt;td&gt;

            &lt;p&gt;&lt;a href=&#34;https://www.reddit.com/r/Fantasy/wiki/index/a-to-z-genre-guide&#34;&gt;r/Fantasy A to Z Genre Guide&lt;/a&gt; (Hard: by a BIPOC author)&lt;/p&gt;&lt;/td&gt;&lt;td&gt;

            &lt;p&gt;Found Family (Hard: featuring an LGBTQ+ character)&lt;/p&gt;&lt;a href=&#34;https://blog.jverkamp.com/2021/07/18/the-house-in-the-cerulean-sea/&#34;&gt;
                        &lt;figure&gt;
                            &lt;img src=&#34;https://blog.jverkamp.com/embeds/books/the-house-in-the-cerulean-sea.jpg&#34;&gt;
                            &lt;figcaption&gt;The House in the Cerulean Sea&lt;/figcaption&gt;
                        &lt;/figure&gt; 
                    &lt;/a&gt;&lt;p&gt;(Hard Mode)&lt;/p&gt;&lt;/td&gt;&lt;td&gt;

            &lt;p&gt;First person POV (Hard: Multiple)&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;

            &lt;p&gt;r/Fantasy Book Club (Hard: with participation)&lt;/p&gt;&lt;/td&gt;&lt;td&gt;

            &lt;p&gt;New to you author (Hard: haven&amp;rsquo;t heard much about)&lt;/p&gt;&lt;/td&gt;&lt;td&gt;

            &lt;p&gt;Gothic Fantasy (Hard: not in the &lt;a href=&#34;https://bookriot.com/gothic-fantasy/&#34;&gt;Book Riot article&lt;/a&gt;)&lt;/p&gt;&lt;a href=&#34;https://blog.jverkamp.com/2021/06/09/mexican-gothic/&#34;&gt;
                        &lt;figure&gt;
                            &lt;img src=&#34;https://blog.jverkamp.com/embeds/books/mexican-gothic.jpg&#34;&gt;
                            &lt;figcaption&gt;Mexican Gothic&lt;/figcaption&gt;
                        &lt;/figure&gt; 
                    &lt;/a&gt;&lt;p&gt;(Hard Mode)&lt;/p&gt;&lt;/td&gt;&lt;td&gt;

            &lt;p&gt;Backlist book (Hard: published before 2000)&lt;/p&gt;&lt;/td&gt;&lt;td&gt;

            &lt;p&gt;Revenge-seeking character (Hard: revenge as the major book plot)&lt;/p&gt;&lt;a href=&#34;https://blog.jverkamp.com/2021/10/01/red-sister/&#34;&gt;
                        &lt;figure&gt;
                            &lt;img src=&#34;https://blog.jverkamp.com/embeds/books/red-sister.jpg&#34;&gt;
                            &lt;figcaption&gt;Red Sister&lt;/figcaption&gt;
                        &lt;/figure&gt; 
                    &lt;/a&gt;&lt;p&gt;(Hard Mode)&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;

            &lt;p&gt;Mystery plot (Hard: not primary world urban fantasy)&lt;/p&gt;&lt;a href=&#34;https://blog.jverkamp.com/2021/06/19/six-wakes/&#34;&gt;
                        &lt;figure&gt;
                            &lt;img src=&#34;https://blog.jverkamp.com/embeds/books/six-wakes.jpg&#34;&gt;
                            &lt;figcaption&gt;Six Wakes&lt;/figcaption&gt;
                        &lt;/figure&gt; 
                    &lt;/a&gt;&lt;p&gt;(Hard Mode)&lt;/p&gt;&lt;/td&gt;&lt;td&gt;

            &lt;p&gt;Comfort read (Hard: that isn&amp;rsquo;t a reread)&lt;/p&gt;&lt;a href=&#34;https://blog.jverkamp.com/2021/04/13/wild-sign/&#34;&gt;
                        &lt;figure&gt;
                            &lt;img src=&#34;https://blog.jverkamp.com/embeds/books/wild-sign.jpg&#34;&gt;
                            &lt;figcaption&gt;Wild Sign&lt;/figcaption&gt;
                        &lt;/figure&gt; 
                    &lt;/a&gt;&lt;p&gt;(Hard Mode)&lt;/p&gt;&lt;/td&gt;&lt;td&gt;

            &lt;p&gt;Debut novel (Hard: published in 2021)&lt;/p&gt;&lt;a href=&#34;https://blog.jverkamp.com/2021/04/26/tales-of-nezura-book-1-the-zevolra/&#34;&gt;
                        &lt;figure&gt;
                            &lt;img src=&#34;https://blog.jverkamp.com/embeds/books/tales-of-nezura-book-1-the-zevolra.jpg&#34;&gt;
                            &lt;figcaption&gt;Tales of Nezura: Book 1: The Zevolra&lt;/figcaption&gt;
                        &lt;/figure&gt; 
                    &lt;/a&gt;&lt;p&gt;(Hard Mode)&lt;/p&gt;&lt;/td&gt;&lt;td&gt;

            &lt;p&gt;Cat squasher (500+ pages; Hard: 800+ pages)&lt;/p&gt;&lt;/td&gt;&lt;td&gt;

            &lt;p&gt;SFF-related nonfiction (Hard: published in the last 5 years)&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;

            &lt;p&gt;Latinx or Latin American author (Hard: with fewer than 1000 Goodreads ratings)&lt;/p&gt;&lt;/td&gt;&lt;td&gt;

            &lt;p&gt;Self published (Hard: with fewer than 50 Goodreads ratings)&lt;/p&gt;&lt;a href=&#34;https://blog.jverkamp.com/2021/04/26/tales-of-nezura-book-1-the-zevolra/&#34;&gt;
                        &lt;figure&gt;
                            &lt;img src=&#34;https://blog.jverkamp.com/embeds/books/tales-of-nezura-book-1-the-zevolra.jpg&#34;&gt;
                            &lt;figcaption&gt;Tales of Nezura: Book 1: The Zevolra&lt;/figcaption&gt;
                        &lt;/figure&gt; 
                    &lt;/a&gt;&lt;p&gt;(Hard Mode)&lt;/p&gt;&lt;/td&gt;&lt;td&gt;

            &lt;p&gt;Forest setting (Hard: for the entire book)&lt;/p&gt;&lt;a href=&#34;https://blog.jverkamp.com/2021/07/01/annihilation/&#34;&gt;
                        &lt;figure&gt;
                            &lt;img src=&#34;https://blog.jverkamp.com/embeds/books/annihilation.jpg&#34;&gt;
                            &lt;figcaption&gt;Annihilation&lt;/figcaption&gt;
                        &lt;/figure&gt; 
                    &lt;/a&gt;&lt;p&gt;(Hard Mode)&lt;/p&gt;&lt;/td&gt;&lt;td&gt;

            &lt;p&gt;Genre mashup (Hard: of three or more genres)&lt;/p&gt;&lt;a href=&#34;https://blog.jverkamp.com/2021/07/13/gideon-the-ninth/&#34;&gt;
                        &lt;figure&gt;
                            &lt;img src=&#34;https://blog.jverkamp.com/embeds/books/gideon-the-ninth.jpg&#34;&gt;
                            &lt;figcaption&gt;Gideon the Ninth&lt;/figcaption&gt;
                        &lt;/figure&gt; 
                    &lt;/a&gt;&lt;p&gt;(Hard Mode)&lt;/p&gt;&lt;/td&gt;&lt;td&gt;

            &lt;p&gt;Has chapter titles of more than one word (Hard: for every chapter)&lt;/p&gt;&lt;a href=&#34;https://blog.jverkamp.com/2021/04/21/the-midnight-library/&#34;&gt;
                        &lt;figure&gt;
                            &lt;img src=&#34;https://blog.jverkamp.com/embeds/books/the-midnight-library.jpg&#34;&gt;
                            &lt;figcaption&gt;The Midnight Library&lt;/figcaption&gt;
                        &lt;/figure&gt; 
                    &lt;/a&gt;&lt;p&gt;(Hard Mode)&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;

            &lt;p&gt;___ of ___ (Hard: and ___)&lt;/p&gt;&lt;a href=&#34;https://blog.jverkamp.com/2021/12/08/an-alchemy-of-masques-and-mirrors/&#34;&gt;
                        &lt;figure&gt;
                            &lt;img src=&#34;https://blog.jverkamp.com/embeds/books/an-alchemy-of-masques-and-mirrors.jpg&#34;&gt;
                            &lt;figcaption&gt;An Alchemy of Masques and Mirrors&lt;/figcaption&gt;
                        &lt;/figure&gt; 
                    &lt;/a&gt;&lt;p&gt;(Hard Mode)&lt;/p&gt;&lt;/td&gt;&lt;td&gt;

            &lt;p&gt;First contact (Hard: that doesn&amp;rsquo;t lead to war)&lt;/p&gt;&lt;a href=&#34;https://blog.jverkamp.com/2021/06/15/project-hail-mary/&#34;&gt;
                        &lt;figure&gt;
                            &lt;img src=&#34;https://blog.jverkamp.com/embeds/books/project-hail-mary.jpg&#34;&gt;
                            &lt;figcaption&gt;Project Hail Mary&lt;/figcaption&gt;
                        &lt;/figure&gt; 
                    &lt;/a&gt;&lt;p&gt;(Hard Mode)&lt;/p&gt;&lt;/td&gt;&lt;td&gt;

            &lt;p&gt;Trans or Nonbinary (Hard: protagonist)&lt;/p&gt;&lt;/td&gt;&lt;td&gt;

            &lt;p&gt;Debut author (Hard: with an AMA)&lt;/p&gt;&lt;/td&gt;&lt;td&gt;

            &lt;p&gt;Witches (Hard: as the main protagonist)&lt;/p&gt;&lt;a href=&#34;https://blog.jverkamp.com/2021/04/11/a-great-and-terrible-beauty/&#34;&gt;
                        &lt;figure&gt;
                            &lt;img src=&#34;https://blog.jverkamp.com/embeds/books/a-great-and-terrible-beauty.jpg&#34;&gt;
                            &lt;figcaption&gt;A Great and Terrible Beauty&lt;/figcaption&gt;
                        &lt;/figure&gt; 
                    &lt;/a&gt;&lt;p&gt;(Hard Mode)&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;</description>
    </item>
    
    <item>
      <title>Partitioning a Linked List</title>
      <link>https://blog.jverkamp.com/2021/04/20/partitioning-a-linked-list/</link>
      <pubDate>Tue, 20 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2021/04/20/partitioning-a-linked-list/</guid>
      <description>&lt;p&gt;One more fairly standard tech interview problem (for better or for worse, you&amp;rsquo;re likely to see one of these if you go for a programming job):&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Given a &lt;a href=&#34;https://en.wikipedia.org/wiki/linked%20list&#34;&gt;linked list&lt;/a&gt; and an element &lt;code&gt;x&lt;/code&gt;. Partition the list so that all elements less than &lt;code&gt;x&lt;/code&gt; are before elements greater than or equal to &lt;code&gt;x&lt;/code&gt;, but do not otherwise change the order of the elements.&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>Dynamic Programming over a Matrix</title>
      <link>https://blog.jverkamp.com/2021/04/13/dynamic-programming-over-a-matrix/</link>
      <pubDate>Tue, 13 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2021/04/13/dynamic-programming-over-a-matrix/</guid>
      <description>Another LeetCode problem.
 Given an MxN matrix of numbers, find the longest path of strictly increasing numbers.
 So for example in this matrix:
 994 668 211  You can start with the 1 in the bottom center, go left to the two, then up to the 6, and 9. That&amp;rsquo;s the longest path, so return a 4.
In this 3x3 case, it&amp;rsquo;s really easy to just brute force.</description>
    </item>
    
    <item>
      <title>Phone Words--In English!</title>
      <link>https://blog.jverkamp.com/2021/04/09/phone-words-in-english/</link>
      <pubDate>Fri, 09 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2021/04/09/phone-words-in-english/</guid>
      <description>Okay, let&amp;rsquo;s take this one step further. Rather than generating just phone words, let&amp;rsquo;s actually generate phone words. Someone has provided a list of words in English as a package, so we&amp;rsquo;ll add a filter to add that to our comprehension:
from english_words import english_words_set def letterCombinations(self, digits: str) -&amp;gt; List[str]: if not digits: return [] letters = { &amp;#39;1&amp;#39;: &amp;#39;&amp;#39;, &amp;#39;2&amp;#39;: &amp;#39;abc&amp;#39;, &amp;#39;3&amp;#39;: &amp;#39;def&amp;#39;, &amp;#39;4&amp;#39;: &amp;#39;ghi&amp;#39;, &amp;#39;5&amp;#39;: &amp;#39;jkl&amp;#39;, &amp;#39;6&amp;#39;: &amp;#39;mno&amp;#39;, &amp;#39;7&amp;#39;: &amp;#39;pqrs&amp;#39;, &amp;#39;8&amp;#39;: &amp;#39;tuv&amp;#39;, &amp;#39;9&amp;#39;: &amp;#39;wxyz&amp;#39;, &amp;#39;0&amp;#39;: &amp;#39; &amp;#39;, } return [ word for product in itertools.</description>
    </item>
    
    <item>
      <title>Phone Words</title>
      <link>https://blog.jverkamp.com/2021/04/06/phone-words/</link>
      <pubDate>Tue, 06 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2021/04/06/phone-words/</guid>
      <description>&lt;p&gt;Working through a few problems on &lt;a href=&#34;https://leetcode.com/&#34;&gt;LeetCode&lt;/a&gt;. I haven&amp;rsquo;t quite decided what I think of the site, but it&amp;rsquo;s a fun way to play with simple algorithms. Figured I might as well write up any I find interesting.&lt;/p&gt;
&lt;p&gt;First interesting problem:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Given a standard lettered keypad, generate all words from a given phone number.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure&gt;
    &lt;img src=&#34;https://blog.jverkamp.com/embeds/2021/keypad.png&#34;/&gt; 
&lt;/figure&gt;</description>
    </item>
    
    <item>
      <title>yt-cast: Generating podcasts from YouTube URLs</title>
      <link>https://blog.jverkamp.com/2021/01/05/yt-cast-generating-podcasts-from-youtube-urls/</link>
      <pubDate>Tue, 05 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2021/01/05/yt-cast-generating-podcasts-from-youtube-urls/</guid>
      <description>&lt;p&gt;Today&amp;rsquo;s goal: Turn a collection of YouTube links into a podcast.&lt;/p&gt;
&lt;p&gt;Start with a &lt;code&gt;config.json&lt;/code&gt; like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;{
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;brandon-sanderson&amp;#34;&lt;/span&gt;: [
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://www.youtube.com/watch?v=H4lWbkERlxo&amp;amp;list=PLSH_xM-KC3ZuOZayK68JAAjj5W9ShnFVC&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://www.youtube.com/watch?v=YyaC7NmPsc0&amp;amp;list=PLSH_xM-KC3ZtjKTR2z8rPWxv1pP6bOVzZ&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://www.youtube.com/watch?v=o3V0Zok_kT0&amp;amp;list=PLSH_xM-KC3ZuteHw3G1ZrCDWQrAVgO0ER&amp;#34;&lt;/span&gt;
  ]
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And it will automatically download all referenced YouTube videos, convert them to MP3 (both using &lt;a href=&#34;https://ytdl-org.github.io/youtube-dl/index.html&#34;&gt;youtube-dl&lt;/a&gt;), and serve an RSS feed that&amp;rsquo;s compatible with most podcast programs.&lt;/p&gt;
&lt;p&gt;Tested URLs include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Playlist URLs (like the above)&lt;/li&gt;
&lt;li&gt;Single video URLs&lt;/li&gt;
&lt;li&gt;Channel URLs&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Most youtube URLs should work though.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Extending my EC2 script</title>
      <link>https://blog.jverkamp.com/2020/08/11/extending-my-ec2-script/</link>
      <pubDate>Tue, 11 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2020/08/11/extending-my-ec2-script/</guid>
      <description>&lt;p&gt;Another quick post.&lt;/p&gt;
&lt;p&gt;What feels like a lifetime ago, I &lt;a href=&#34;https://blog.jverkamp.com/2015/10/30/finding-ec2-instances-by-tag/&#34;&gt;wrote a post&lt;/a&gt; about finding &lt;code&gt;ec2&lt;/code&gt; instances by name. I honestly use that script just about every day, mostly for automatically finding instances to SSH to (a la &lt;a href=&#34;https://blog.jverkamp.com/2017/12/18/ssh-config-proxycommand-tricks/&#34;&gt;SSH config tricks&lt;/a&gt;). But there are a few other quick things I&amp;rsquo;ve done with it:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ec2-script&lt;/code&gt; - Run a script on all instances of a given name&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ec2-disk&lt;/code&gt; - A specialization of &lt;code&gt;ec2-script&lt;/code&gt; to check main disk usage&lt;/li&gt;
&lt;li&gt;&lt;code&gt;terminate&lt;/code&gt; - A script that I use with &lt;code&gt;ec2&lt;/code&gt; to terminate instances from the command line&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ec2-cycle&lt;/code&gt; - Slow cycle a given set of &lt;code&gt;ec2&lt;/code&gt; instances by terminating so many per minute&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;All of which are included in my &lt;a href=&#34;https://github.com/jpverkamp/dotfiles/tree/master/bin&#34;&gt;dotfiles&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>An SPF DNS Server</title>
      <link>https://blog.jverkamp.com/2020/07/16/an-spf-dns-server/</link>
      <pubDate>Thu, 16 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2020/07/16/an-spf-dns-server/</guid>
      <description>&lt;p&gt;The &lt;a href=&#34;https://en.wikipedia.org/wiki/Sender%20Policy%20Framework&#34;&gt;Sender Policy Framework&lt;/a&gt; is one of those things that&amp;rsquo;s really powerful and useful to help prevent phishing and email spam, but can be a royal pain to work with. Specifically, SPF is a series of DNS TXT records&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; with a specific format that can be looked up by any email service to verify that an email was sent by a server that should be authorized to send email on your behalf. For example&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;v=spf1 ip4:192.0.2.0/24 ip4:198.51.100.123 a -all&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;v=spf1&lt;/code&gt; - tells the client this is an SPF record and should always start the record&lt;/li&gt;
&lt;li&gt;&lt;code&gt;{key}[:{value}]?&lt;/code&gt; - one of many different key/value pairs that can define the record
&lt;ul&gt;
&lt;li&gt;in the case above a &lt;code&gt;ip4&lt;/code&gt; key species an &lt;a href=&#34;https://en.wikipedia.org/wiki/IPv4&#34;&gt;IPv4&lt;/a&gt; address range that can send emails on your behalf (the value can be optional)&lt;/li&gt;
&lt;li&gt;the &lt;code&gt;a&lt;/code&gt; above is another special case where if the sender domain (&lt;code&gt;jp@example.com&lt;/code&gt; would be &lt;code&gt;example.com&lt;/code&gt;) resolves via a &lt;code&gt;DNS A&lt;/code&gt; record to the server that sent the email, it&amp;rsquo;s allows&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-all&lt;/code&gt; is a fallthrough case meaning &amp;lsquo;fail all that didn&amp;rsquo;t match a previous case&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There are a number of other cases, but we&amp;rsquo;ll get to the other interesting ones in a bit.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Directly monitoring Sidekiq in Redis</title>
      <link>https://blog.jverkamp.com/2020/07/14/directly-monitoring-sidekiq-in-redis/</link>
      <pubDate>Tue, 14 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2020/07/14/directly-monitoring-sidekiq-in-redis/</guid>
      <description>&lt;p&gt;Another thing that came up recently: we have many (many) &lt;a href=&#34;https://github.com/mperham/sidekiq&#34;&gt;sidekiq&lt;/a&gt; queues. Each has their own admin interface, but sometimes you just want all of the information in one place. Of course, you could bookmark all of the pages. Or make a single page with a lot of frames (remember &lt;a href=&#34;https://en.wikipedia.org/wiki/HTML%20frames&#34;&gt;HTML frames&lt;/a&gt;?). Or use their API. But where&amp;rsquo;s the fun in that? Instead, let&amp;rsquo;s dig straight into the redis backend and see what we can see!&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>A Smart MySQL Wrapper</title>
      <link>https://blog.jverkamp.com/2020/07/07/a-smart-mysql-wrapper/</link>
      <pubDate>Tue, 07 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2020/07/07/a-smart-mysql-wrapper/</guid>
      <description>&lt;p&gt;One thing that I often need to do is deal with a large collection of database servers in different clusters and in different environments. On top of that, sometimes, I want a UI, sometime I want a CLI to script. And sometimes I&amp;rsquo;m on a VPN and sometimes I&amp;rsquo;m not. All together, it&amp;rsquo;s a rather complicated number of saved connections and CLI switches and everything else. All together, I want:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Specify the cluster, environment, and mode (read/write/adhoc)&lt;/li&gt;
&lt;li&gt;Specify if I want to run via CLI or via UI&lt;/li&gt;
&lt;li&gt;Specify an optional user with safely stored and used passwords&lt;/li&gt;
&lt;li&gt;Automatically connected via SSH tunnel if I&amp;rsquo;m not on VPN, but not if I am (for CLI or VPN)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Let&amp;rsquo;s do it!&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Observation Server</title>
      <link>https://blog.jverkamp.com/2020/06/10/observation-server/</link>
      <pubDate>Wed, 10 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2020/06/10/observation-server/</guid>
      <description>&lt;p&gt;For a number of years now, I&amp;rsquo;ve been writing down my &amp;lsquo;observations&amp;rsquo;. Essentially, it&amp;rsquo;s a semi-structured set of text files that I keep in Dropbox. One for each day, in a folder by month. I record interesting people I see, things I did worth doing, and things my children did which were adorable.&lt;/p&gt;
&lt;p&gt;After a while, I started wanting to look back, so first, I wrote a relatively simple script that would go back through my archives and send me everything I did 1/2/3/4/etc years ago. That worked well enough, but it ended up generating a lot of emails to go through some days. So the second generation is a server that can format those pages and display them as a nice webpage.&lt;/p&gt;
&lt;p&gt;The most interesting part perhaps was dealing with the tarballs that I keep the archives in (they&amp;rsquo;re plain text, so they compress very well). I wanted to keep them compressed, so I had to decompress them in memory on the fly.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Prevent JavaScript links by parsing URLs</title>
      <link>https://blog.jverkamp.com/2019/05/02/prevent-javascript-links-by-parsing-urls/</link>
      <pubDate>Thu, 02 May 2019 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2019/05/02/prevent-javascript-links-by-parsing-urls/</guid>
      <description>&lt;p&gt;If you have a website that allows users to submit URLs, one of the (many many) things people will try to do to break your site is to submit URLs that use the &lt;code&gt;javascript:&lt;/code&gt; protocol (rather than the more expected &lt;code&gt;http:&lt;/code&gt; or &lt;code&gt;https:&lt;/code&gt;). This is almost never something that you want, since it allows users to submit essentially arbitrary code that other users will run on click in the context of your domain (&lt;a href=&#34;https://en.wikipedia.org/wiki/same%20origin%20policy&#34;&gt;same origin policy&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;So how do you fix it?&lt;/p&gt;
&lt;p&gt;First thought would be to try to check the protocol:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;safe_url&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;url&lt;/span&gt;) =&amp;gt; &lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;url&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;match&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;/^javascript:/&lt;/span&gt;)
[Function&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;safe_url&lt;/span&gt;]

&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;safe_url&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;http://www.example.com&amp;#39;&lt;/span&gt;)
&lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;

&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;safe_url&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;javascript:alert(1)&amp;#39;&lt;/span&gt;)
&lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Tiny Helper Scripts for Command Line MySQL</title>
      <link>https://blog.jverkamp.com/2019/04/27/tiny-helper-scripts-for-command-line-mysql/</link>
      <pubDate>Sat, 27 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2019/04/27/tiny-helper-scripts-for-command-line-mysql/</guid>
      <description>&lt;p&gt;Quite often, I&amp;rsquo;ll find myself wanting to query and manipulate MySQL data entirely on the command line. I could be building up a pipeline or working on a task that I&amp;rsquo;m going to eventually automate but haven&amp;rsquo;t quite gotten to yet. Whenver I have to do something like that, I have a small pile of scripts I&amp;rsquo;ve written over time that help out:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;skiphead&lt;/code&gt;: Skip the first line of output, used to skip over headers in a query response&lt;/li&gt;
&lt;li&gt;&lt;code&gt;skipuntil&lt;/code&gt;: Skip all lines until we see one matching a pattern, used to resume partial tasks&lt;/li&gt;
&lt;li&gt;&lt;code&gt;commaify&lt;/code&gt;: Take a list of single values on the command line and turn them into a comma separated list (for use in &lt;code&gt;IN&lt;/code&gt; clauses)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;csv2json&lt;/code&gt;: a &lt;a href=&#34;https://blog.jverkamp.com/2015/12/11/csv-to-json/&#34;&gt;previously posted&lt;/a&gt; script for converting csv/tab delimited output to json&lt;/li&gt;
&lt;li&gt;&lt;code&gt;jq&lt;/code&gt;: not my script, but used to take the output of csv2json and query it further in ways that would be complicated to do with SQL&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Admitedly, the first two of those are one liners and I could easily remember them, but the advantage of a single command that does it is tab completion. &lt;code&gt;sk&amp;lt;tab&amp;gt;&lt;/code&gt;, arrow to select which one I want, and off we go. I could put them as an alias, but I don&amp;rsquo;t always use the same shell (mostly &lt;a href=&#34;https://fishshell.com/&#34;&gt;fish&lt;/a&gt;, but sometimes Bash or Zsh).&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Listing and Downloading S3 Versions</title>
      <link>https://blog.jverkamp.com/2019/01/04/listing-and-downloading-s3-versions/</link>
      <pubDate>Fri, 04 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2019/01/04/listing-and-downloading-s3-versions/</guid>
      <description>&lt;p&gt;Today I found the need to look through all old versions of a file in S3 that had versioning turned on. You can do it through the AWS Console, but I prefer command line tools. You can do it with &lt;a href=&#34;https://aws.amazon.com/cli/&#34;&gt;awscli&lt;/a&gt;, but the flags are long and I can never quite remember them. So let&amp;rsquo;s write up a quick script using &lt;a href=&#34;https://boto3.amazonaws.com/v1/documentation/api/latest/index.html&#34;&gt;boto3&lt;/a&gt; (and as a bonus, try out &lt;a href=&#34;https://click.palletsprojects.com/en/7.x/&#34;&gt;click&lt;/a&gt;)!&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>AoC 2018 Day 3: Regionification</title>
      <link>https://blog.jverkamp.com/2018/12/03/aoc-2018-day-3-regionification/</link>
      <pubDate>Mon, 03 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2018/12/03/aoc-2018-day-3-regionification/</guid>
      <description>&lt;h3 id=&#34;source-no-matter-how-you-slice-ithttpsadventofcodecom2018day3&#34;&gt;Source: &lt;a href=&#34;https://adventofcode.com/2018/day/3&#34;&gt;No Matter How You Slice It&lt;/a&gt;&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Part 1:&lt;/strong&gt; Given a list of overlapping regions defined by (left, top, width, height) count how many integer points occur in more than one region.&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>AoC 2018 Day 2: Counting letters</title>
      <link>https://blog.jverkamp.com/2018/12/02/aoc-2018-day-2-counting-letters/</link>
      <pubDate>Sun, 02 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2018/12/02/aoc-2018-day-2-counting-letters/</guid>
      <description>&lt;h3 id=&#34;source-inventory-management-systemhttpsadventofcodecom2018day2&#34;&gt;Source: &lt;a href=&#34;https://adventofcode.com/2018/day/2&#34;&gt;Inventory Management System&lt;/a&gt;&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Part 1:&lt;/strong&gt; Given a list of strings, count how many contain exactly two of a letter (&lt;code&gt;a&lt;/code&gt;) and how many contain exactly three of a letter (&lt;code&gt;b&lt;/code&gt;). Calculate &lt;code&gt;a*b&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>AoC 2018 Day 1: Sum-thing to start with</title>
      <link>https://blog.jverkamp.com/2018/12/01/aoc-2018-day-1-sum-thing-to-start-with/</link>
      <pubDate>Sat, 01 Dec 2018 00:00:03 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2018/12/01/aoc-2018-day-1-sum-thing-to-start-with/</guid>
      <description>&lt;h3 id=&#34;source-chronal-calibrationhttpsadventofcodecom2018day1&#34;&gt;Source: &lt;a href=&#34;https://adventofcode.com/2018/day/1&#34;&gt;Chronal Calibration&lt;/a&gt;&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Part 1:&lt;/strong&gt; Given a list of numbers (positive and negative) calculate the sum.&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>Advent of Code 2018</title>
      <link>https://blog.jverkamp.com/2018/12/01/advent-of-code-2018/</link>
      <pubDate>Sat, 01 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2018/12/01/advent-of-code-2018/</guid>
      <description>&lt;p&gt;Let&amp;rsquo;s do it again! I&amp;rsquo;m starting a day late, but much better than &lt;a href=&#34;https://blog.jverkamp.com/2018/01/08/advent-of-code-2017/&#34;&gt;last year&lt;/a&gt; 😄!&lt;/p&gt;
&lt;p&gt;This time around, I&amp;rsquo;m hoping to solve each problem in both Python and Racket, both to show an example of how the languages differ and &amp;hellip; well, because I can 😇.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;EDIT 2018-12-05&lt;/em&gt;: Yeah&amp;hellip; I&amp;rsquo;m not actually going to do these in both Racket and Python. The solutions are ending up being near direct translations. Since there are probably fewer people solving these in Racket, I&amp;rsquo;ll do that first and Python eventually™.&lt;/p&gt;
&lt;p&gt;As always, these problems are wonderful to try to solve yourself. If you agree, &lt;em&gt;stop reading now&lt;/em&gt;. This post isn&amp;rsquo;t going anywhere.&lt;/p&gt;
&lt;p&gt;If you&amp;rsquo;d like to see the full form of any particular solution, you can do so on GitHub (including previous years and possibly some I haven&amp;rsquo;t written up yet): &lt;a href=&#34;https://github.com/jpverkamp/advent-of-code&#34;&gt;jpverkamp/advent-of-code&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Counting and Sizing S3 Buckets</title>
      <link>https://blog.jverkamp.com/2018/07/15/counting-and-sizing-s3-buckets/</link>
      <pubDate>Sun, 15 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2018/07/15/counting-and-sizing-s3-buckets/</guid>
      <description>&lt;p&gt;A long time ago in a galaxy far far away, I wrote up a script that I used to take an &lt;a href=&#34;https://aws.amazon.com/s3/&#34;&gt;AWS S3&lt;/a&gt; bucket and count how many objects there were in the bucket and calculate its total size. While you could get some of this information from billing reports, there just wasn&amp;rsquo;t a good way to get it other than that at the time. The only way you could do it was to&amp;hellip; iterate through the entire bucket, summing as you go. If you have buckets with millions (or more) objects, this could take a while.&lt;/p&gt;
&lt;p&gt;Basically:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;conn &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; boto&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;connect_s3()
&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; bucket &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; sorted(conn&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;get_all_buckets()):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt;:
        total_count &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
        total_size &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
        start &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; datetime&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;datetime&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;now()

        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; key &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; bucket&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;list_versions():
            &lt;span style=&#34;color:#75715e&#34;&gt;# Skip deleted files&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; isinstance(key, boto&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;s3&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;deletemarker&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;DeleteMarker):
                &lt;span style=&#34;color:#66d9ef&#34;&gt;continue&lt;/span&gt;

            size &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; key&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;size
            total_count &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
            total_size &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; size

        &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;-- {count} files, {size}, {time} to calculate&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;format(
            count &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; total_count,
            size &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; humanize&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;naturalsize(total_size),
            time &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; humanize&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;naturaltime(datetime&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;datetime&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;now() &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; start)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;replace(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39; ago&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;)
        ))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Creating a temporary SMTP server to &#39;catch&#39; domain validation emails</title>
      <link>https://blog.jverkamp.com/2018/07/09/creating-a-temporary-smtp-server-to-catch-domain-validation-emails/</link>
      <pubDate>Mon, 09 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2018/07/09/creating-a-temporary-smtp-server-to-catch-domain-validation-emails/</guid>
      <description>&lt;p&gt;One problem that has come up a time or two is dealing with email-based domain validation (specifically in this case for the issuance of TLS certificates) on domains that aren&amp;rsquo;t actually configured to receive email. Yes, in a perfect world, it would be easier to switch to DNS-based validation (since we have to have control of the DNS for the domain, we need it later), but let&amp;rsquo;s just assume that&amp;rsquo;s not an option. So, how do we &amp;lsquo;catch&amp;rsquo; the activation email so we can prove we can receive email on that domain?&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Generating zone files from Route53</title>
      <link>https://blog.jverkamp.com/2018/03/12/generating-zone-files-from-route53/</link>
      <pubDate>Mon, 12 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2018/03/12/generating-zone-files-from-route53/</guid>
      <description>&lt;p&gt;Recently I found myself wanting to do some analysis on all of our DNS entires stored in AWS&amp;rsquo;s Route53 for security reasons (specifically to prevent subdomain takeover attacks, I&amp;rsquo;ll probably write that up soon). In doing so, I realized that while Route53 has the ability to import a &lt;a href=&#34;https://en.wikipedia.org/wiki/zone%20file&#34;&gt;zone file&lt;/a&gt;, it&amp;rsquo;s not possible to export one.&lt;/p&gt;
&lt;p&gt;To some extent, this makes sense. Since Route53 supports ALIAS records (which can automatically determine their values based on other AWS products, such as an ELB changing its public IP) and those aren&amp;rsquo;t actually &amp;lsquo;real&amp;rsquo; DNS entries, things will get confused. But I don&amp;rsquo;t currently intend to re-import these zone files, just use them. So let&amp;rsquo;s see what we can do.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Advent of Code 2017</title>
      <link>https://blog.jverkamp.com/2018/01/08/advent-of-code-2017/</link>
      <pubDate>Mon, 08 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2018/01/08/advent-of-code-2017/</guid>
      <description>&lt;p&gt;As I did with &lt;a href=&#34;https://blog.jverkamp.com/2018/01/03/advent-of-code-2016/&#34;&gt;last year&lt;/a&gt; / &lt;a href=&#34;https://blog.jverkamp.com/2018/01/03/advent-of-code-2016/&#34;&gt;yesterday&lt;/a&gt;, I&amp;rsquo;ve written up a series of posts for the Advent of Code 2017 problems. Again, I didn&amp;rsquo;t manage to write them up as I did them, but this time around I least I finished mostly on time.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Advent of Code 2016</title>
      <link>https://blog.jverkamp.com/2018/01/03/advent-of-code-2016/</link>
      <pubDate>Wed, 03 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2018/01/03/advent-of-code-2016/</guid>
      <description>&lt;p&gt;As I did &lt;a href=&#34;https://blog.jverkamp.com/2015/12/01/advent-of-code/&#34;&gt;last year&lt;/a&gt;, I&amp;rsquo;m going to solve the Advent of Code problems again this year.&lt;/p&gt;
&lt;p&gt;Or that was the plan. It turns out that instead I put down my blog for almost a year and a half and never quite got around to doing these problems. So I&amp;rsquo;m actually backdating these posts from the early days of 2018 to where they would have been had I solved them on time. They&amp;rsquo;re still interesting problems, so give them a read.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>AoC 2017 Day 25: Turing</title>
      <link>https://blog.jverkamp.com/2017/12/25/aoc-2017-day-25-turing/</link>
      <pubDate>Mon, 25 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2017/12/25/aoc-2017-day-25-turing/</guid>
      <description>&lt;h3 id=&#34;source-the-halting-problemhttpadventofcodecom2017day25&#34;&gt;Source: &lt;a href=&#34;http://adventofcode.com/2017/day/25&#34;&gt;The Halting Problem&lt;/a&gt;&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Part 1:&lt;/strong&gt; Implement a &lt;a href=&#34;https://en.wikipedia.org/wiki/Turing%20machine&#34;&gt;Turing machine&lt;/a&gt; defined as such:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;Begin in state A.
Perform a diagnostic checksum after 6 steps.&lt;/p&gt;
&lt;p&gt;In state A:
If the current value is 0:
- Write the value 1.
- Move one slot to the right.
- Continue with state B.
If the current value is 1:
- Write the value 0.
- Move one slot to the left.
- Continue with state B.&lt;/p&gt;
&lt;p&gt;&amp;hellip;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>AoC 2017 Day 24: Maker Of Bridges</title>
      <link>https://blog.jverkamp.com/2017/12/24/aoc-2017-day-24-maker-of-bridges/</link>
      <pubDate>Sun, 24 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2017/12/24/aoc-2017-day-24-maker-of-bridges/</guid>
      <description>&lt;h3 id=&#34;source-electromagnetic-moathttpadventofcodecom2017day24&#34;&gt;Source: &lt;a href=&#34;http://adventofcode.com/2017/day/24&#34;&gt;Electromagnetic Moat&lt;/a&gt;&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Part 1:&lt;/strong&gt; Given a series of reversible components of the form &lt;code&gt;3/4&lt;/code&gt; (can connect a &lt;code&gt;3&lt;/code&gt; on one end to a &lt;code&gt;4&lt;/code&gt; on the other), form a bridge of components. The bridge&amp;rsquo;s strength is equal to the sum of component values. So &lt;code&gt;0/3, 3/7, and 7/4&lt;/code&gt; has a strength of &lt;code&gt;0+3 + 3+7 + 7+4 = 24&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;What is the strongest possible bridge?&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>AoC 2017 Day 23: Duetvmc</title>
      <link>https://blog.jverkamp.com/2017/12/23/aoc-2017-day-23-duetvmc/</link>
      <pubDate>Sat, 23 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2017/12/23/aoc-2017-day-23-duetvmc/</guid>
      <description>&lt;h3 id=&#34;source-coprocessor-conflagrationhttpadventofcodecom2017day23&#34;&gt;Source: &lt;a href=&#34;http://adventofcode.com/2017/day/23&#34;&gt;Coprocessor Conflagration&lt;/a&gt;&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Part 1:&lt;/strong&gt; Create a variation of the &lt;a href=&#34;https://blog.jverkamp.com/2017/12/18/aoc-2017-day-18-duetvm/&#34;&gt;previous DuetVM&lt;/a&gt; with only the following four instructions:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;set X Y&lt;/code&gt; sets register &lt;code&gt;X&lt;/code&gt; to &lt;code&gt;Y&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sub X Y&lt;/code&gt; set register &lt;code&gt;X&lt;/code&gt; to &lt;code&gt;X - Y&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mul X Y&lt;/code&gt; sets register &lt;code&gt;X&lt;/code&gt; to &lt;code&gt;X * Y&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;jnz X Y&lt;/code&gt; jumps with an offset of the value of &lt;code&gt;Y&lt;/code&gt;, iff &lt;code&gt;X&lt;/code&gt; is not equal to zero&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;If you run the given program, how many times is &lt;code&gt;mul&lt;/code&gt; invoked?&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>AoC 2017 Day 22: Langton&#39;s Ant</title>
      <link>https://blog.jverkamp.com/2017/12/22/aoc-2017-day-22-langtons-ant/</link>
      <pubDate>Fri, 22 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2017/12/22/aoc-2017-day-22-langtons-ant/</guid>
      <description>&lt;h3 id=&#34;source-sporifica-virushttpadventofcodecom2017day22&#34;&gt;Source: &lt;a href=&#34;http://adventofcode.com/2017/day/22&#34;&gt;Sporifica Virus&lt;/a&gt;&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Part 1:&lt;/strong&gt; Implement a &lt;a href=&#34;https://en.wikipedia.org/wiki/cellular%20automaton&#34;&gt;cellular automaton&lt;/a&gt; on an infinite grid of &lt;code&gt;.&lt;/code&gt; and &lt;code&gt;#&lt;/code&gt; pixels such that:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;Start at &lt;code&gt;(0, 0)&lt;/code&gt;, facing &lt;code&gt;Up&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Repeat:&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;If the cursor is on &lt;code&gt;.&lt;/code&gt; swap it to &lt;code&gt;#&lt;/code&gt; and turn &lt;code&gt;Left&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;If the cursor is on &lt;code&gt;#&lt;/code&gt; swap it to &lt;code&gt;.&lt;/code&gt; and turn &lt;code&gt;Right&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Either way, after turning, move forward once&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;After 10,000 iterations, how many pixels were turned from &lt;code&gt;.&lt;/code&gt; to &lt;code&gt;#&lt;/code&gt;?&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>AoC 2017 Day 21: Fractal Expander</title>
      <link>https://blog.jverkamp.com/2017/12/21/aoc-2017-day-21-fractal-expander/</link>
      <pubDate>Thu, 21 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2017/12/21/aoc-2017-day-21-fractal-expander/</guid>
      <description>&lt;h3 id=&#34;source-fractal-arthttpadventofcodecom2017day21&#34;&gt;Source: &lt;a href=&#34;http://adventofcode.com/2017/day/21&#34;&gt;Fractal Art&lt;/a&gt;&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Part 1:&lt;/strong&gt; Start with an input image made of &lt;code&gt;.&lt;/code&gt; and &lt;code&gt;#&lt;/code&gt; pixels. For &lt;code&gt;n&lt;/code&gt; iterations, break the image into blocks:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;If the current size is even, break the image into 2x2 chunks and replace each with a 3x3 chunk&lt;/li&gt;
&lt;li&gt;If the current size is odd, break the image into 3x3 chunks and replace each with a 4x4 chunk&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;The replacement rules will be specified in the following format (example is a 3x3 -&amp;gt; 4x4 rule):&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/blockquote&gt;
&lt;p&gt;.#./..#/### =&amp;gt; #..#/&amp;hellip;./&amp;hellip;./#..#&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
&amp;gt; In that example, replace this:

&amp;gt; ```
.#.
..#
###
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;
&lt;p&gt;With this:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/blockquote&gt;
&lt;p&gt;#..#
&amp;hellip;.
&amp;hellip;.
#..#&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>AoC 2017 Day 20: Miniature Universe Simulator</title>
      <link>https://blog.jverkamp.com/2017/12/20/aoc-2017-day-20-miniature-universe-simulator/</link>
      <pubDate>Wed, 20 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2017/12/20/aoc-2017-day-20-miniature-universe-simulator/</guid>
      <description>&lt;h3 id=&#34;source-particle-swarmhttpadventofcodecom2017day20&#34;&gt;Source: &lt;a href=&#34;http://adventofcode.com/2017/day/20&#34;&gt;Particle Swarm&lt;/a&gt;&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Part 1:&lt;/strong&gt; Given the initial position, velocity, and acceleration of a large number of particles, which particle will stay the closet to the origin as the simulation runs to infinity?&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>AoC 2017 Day 19: Networkout</title>
      <link>https://blog.jverkamp.com/2017/12/19/aoc-2017-day-19-networkout/</link>
      <pubDate>Tue, 19 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2017/12/19/aoc-2017-day-19-networkout/</guid>
      <description>&lt;h3 id=&#34;source-a-series-of-tubeshttpadventofcodecom2017day19&#34;&gt;Source: &lt;a href=&#34;http://adventofcode.com/2017/day/19&#34;&gt;A Series of Tubes&lt;/a&gt;&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Part 1:&lt;/strong&gt; Take a network diagram of the following form:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;|          
|  +--+    
A  |  C    
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;F&amp;mdash;|&amp;ndash;|-E&amp;mdash;+
|  |  |  D
+B-+  +&amp;ndash;+&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>AoC 2017 Day 18: Duetvm</title>
      <link>https://blog.jverkamp.com/2017/12/18/aoc-2017-day-18-duetvm/</link>
      <pubDate>Mon, 18 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2017/12/18/aoc-2017-day-18-duetvm/</guid>
      <description>&lt;h3 id=&#34;source-duethttpadventofcodecom2017day18&#34;&gt;Source: &lt;a href=&#34;http://adventofcode.com/2017/day/18&#34;&gt;Duet&lt;/a&gt;&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Part 1:&lt;/strong&gt; Create a virtual machine with the following instruction set:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;snd X&lt;/code&gt; plays a sound with a frequency equal to the value of &lt;code&gt;X&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;set X Y&lt;/code&gt; sets register &lt;code&gt;X&lt;/code&gt; to &lt;code&gt;Y&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;add X Y&lt;/code&gt; set register &lt;code&gt;X&lt;/code&gt; to &lt;code&gt;X + Y&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mul X Y&lt;/code&gt; sets register &lt;code&gt;X&lt;/code&gt; to &lt;code&gt;X * Y&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mod X Y&lt;/code&gt; sets register &lt;code&gt;X&lt;/code&gt; to &lt;code&gt;X mod Y&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;rcv X&lt;/code&gt; recovers the frequency of the last sound played, if &lt;code&gt;X&lt;/code&gt; is not zero&lt;/li&gt;
&lt;li&gt;&lt;code&gt;jgz X Y&lt;/code&gt; jumps with an offset of the value of &lt;code&gt;Y&lt;/code&gt;, iff &lt;code&gt;X&lt;/code&gt; is greater than zero&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;In most cases, &lt;code&gt;X&lt;/code&gt; and &lt;code&gt;Y&lt;/code&gt; can be either an integer value or a register.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;What is the value recovered by &lt;code&gt;rcv&lt;/code&gt; the first time &lt;code&gt;X&lt;/code&gt; is non-zero?&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>AoC 2017 Day 17: Spinlock</title>
      <link>https://blog.jverkamp.com/2017/12/17/aoc-2017-day-17-spinlock/</link>
      <pubDate>Sun, 17 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2017/12/17/aoc-2017-day-17-spinlock/</guid>
      <description>&lt;h3 id=&#34;source-spinlockhttpadventofcodecom2017day17same&#34;&gt;Source: &lt;a href=&#34;http://adventofcode.com/2017/day/17&#34;&gt;Spinlock&lt;/a&gt;&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Part 1:&lt;/strong&gt; Start with a &lt;a href=&#34;https://en.wikipedia.org/wiki/circular%20buffer&#34;&gt;circular buffer&lt;/a&gt; containing &lt;code&gt;[0]&lt;/code&gt; and &lt;code&gt;current_position = 0&lt;/code&gt;. For &lt;code&gt;n&lt;/code&gt; from &lt;code&gt;1&lt;/code&gt; up to &lt;code&gt;2017&lt;/code&gt;:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;Step forward &lt;code&gt;steps&lt;/code&gt; (puzzle input)&lt;/li&gt;
&lt;li&gt;Input the next value for &lt;code&gt;n&lt;/code&gt;, set &lt;code&gt;current_position&lt;/code&gt; to &lt;code&gt;n&lt;/code&gt;, increment &lt;code&gt;n&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Repeat&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;What is the value after 2017?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;It&amp;rsquo;s a bit weird to describe, but the given example helps (assume &lt;code&gt;steps = 3&lt;/code&gt;):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;(0)
0 (1)
0 (2) 1
0  2 (3) 1
0  2 (4) 3  1
0 (5) 2  4  3  1
0  5  2  4  3 (6) 1
0  5 (7) 2  4  3  6  1
0  5  7  2  4  3 (8) 6  1
0 (9) 5  7  2  4  3  8  6  1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>AoC 2017 Day 16: Swing Your Partner</title>
      <link>https://blog.jverkamp.com/2017/12/16/aoc-2017-day-16-swing-your-partner/</link>
      <pubDate>Sat, 16 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2017/12/16/aoc-2017-day-16-swing-your-partner/</guid>
      <description>&lt;h3 id=&#34;source-permutation-promenadehttpadventofcodecom2017day16&#34;&gt;Source: &lt;a href=&#34;http://adventofcode.com/2017/day/16&#34;&gt;Permutation Promenade&lt;/a&gt;&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Part 1:&lt;/strong&gt; Running on the string &lt;code&gt;a...p&lt;/code&gt; apply a series of the following commands:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;sX&lt;/code&gt; rotates the string right by &lt;code&gt;X&lt;/code&gt; positions&lt;/li&gt;
&lt;li&gt;&lt;code&gt;xX/Y&lt;/code&gt; swaps positions &lt;code&gt;X&lt;/code&gt; and &lt;code&gt;Y&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pA/B&lt;/code&gt; swaps the letters &lt;code&gt;A&lt;/code&gt; and &lt;code&gt;B&lt;/code&gt; no matter their positions&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>AoC 2017 Day 15: Two Generators</title>
      <link>https://blog.jverkamp.com/2017/12/15/aoc-2017-day-15-two-generators/</link>
      <pubDate>Fri, 15 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2017/12/15/aoc-2017-day-15-two-generators/</guid>
      <description>&lt;h3 id=&#34;source-dueling-generatorshttpadventofcodecom2017day15&#34;&gt;Source: &lt;a href=&#34;http://adventofcode.com/2017/day/15&#34;&gt;Dueling Generators&lt;/a&gt;&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Part 1:&lt;/strong&gt; Create a pair of generators &lt;code&gt;A&lt;/code&gt; and &lt;code&gt;B&lt;/code&gt; where:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;latex-inline&#34;&gt;A_n = 16807 A_{n-1} \mod 2147483647&lt;/span&gt;
&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;latex-inline&#34;&gt;B_n = 48271 B_{n-1} \mod 2147483647&lt;/span&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;How many of the first 40 million values have matching values for the low 16 bits of each generator?&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>AoC 2017 Day 14: Knot Hash Gridinator</title>
      <link>https://blog.jverkamp.com/2017/12/14/aoc-2017-day-14-knot-hash-gridinator/</link>
      <pubDate>Thu, 14 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2017/12/14/aoc-2017-day-14-knot-hash-gridinator/</guid>
      <description>&lt;h3 id=&#34;source-disk-defragmentationhttpadventofcodecom2017day14&#34;&gt;Source: &lt;a href=&#34;http://adventofcode.com/2017/day/14&#34;&gt;Disk Defragmentation&lt;/a&gt;&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Part 1:&lt;/strong&gt; Create a 128x128 grid. Generate each row by taking the &lt;a href=&#34;https://blog.jverkamp.com/2017/12/10/aoc-2017-day-10-knot-cool/&#34;&gt;knot hash&lt;/a&gt; of &lt;code&gt;salt-{index}&lt;/code&gt;. The bits of the hash represent if a tile in the grid is &lt;code&gt;free&lt;/code&gt; (&lt;code&gt;0&lt;/code&gt;) or &lt;code&gt;used&lt;/code&gt; (&lt;code&gt;1&lt;/code&gt;).&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Given your salt as input, how many squares are &lt;code&gt;used&lt;/code&gt;?&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
  </channel>
</rss>
