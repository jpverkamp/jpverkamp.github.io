<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Python on jverkamp.com</title>
    <link>https://blog.jverkamp.com/programming/languages/python/</link>
    <description>Recent content in Python on jverkamp.com</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 09 Jul 2018 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://blog.jverkamp.com/programming/languages/python/atom.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Creating a temporary SMTP server to &#39;catch&#39; domain validation emails</title>
      <link>https://blog.jverkamp.com/2018/07/09/creating-a-temporary-smtp-server-to-catch-domain-validation-emails/</link>
      <pubDate>Mon, 09 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2018/07/09/creating-a-temporary-smtp-server-to-catch-domain-validation-emails/</guid>
      <description>&lt;p&gt;One problem that has come up a time or two is dealing with email-based domain validation (specifically in this case for the issuance of TLS certificates) on domains that aren&amp;rsquo;t actually configured to receive email. Yes, in a perfect world, it would be easier to switch to DNS-based validation (since we have to have control of the DNS for the domain, we need it later), but let&amp;rsquo;s just assume that&amp;rsquo;s not an option. So, how do we &amp;lsquo;catch&amp;rsquo; the activation email so we can prove we can receive email on that domain?&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Generating zone files from Route53</title>
      <link>https://blog.jverkamp.com/2018/03/12/generating-zone-files-from-route53/</link>
      <pubDate>Mon, 12 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2018/03/12/generating-zone-files-from-route53/</guid>
      <description>&lt;p&gt;Recently I found myself wanting to do some analysis on all of our DNS entires stored in AWS&amp;rsquo;s Route53 for security reasons (specifically to prevent subdomain takeover attacks, I&amp;rsquo;ll probably write that up soon). In doing so, I realized that while Route53 has the ability to import a &lt;a href=&#34;https://en.wikipedia.org/wiki/zone%20file&#34;&gt;zone file&lt;/a&gt;, it&amp;rsquo;s not possible to export one.&lt;/p&gt;

&lt;p&gt;To some extent, this makes sense. Since Route53 supports ALIAS records (which can automatically determine their values based on other AWS products, such as an ELB changing its public IP) and those aren&amp;rsquo;t actually &amp;lsquo;real&amp;rsquo; DNS entries, things will get confused. But I don&amp;rsquo;t currently intend to re-import these zone files, just use them. So let&amp;rsquo;s see what we can do.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Advent of Code 2017</title>
      <link>https://blog.jverkamp.com/2018/01/08/advent-of-code-2017/</link>
      <pubDate>Mon, 08 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2018/01/08/advent-of-code-2017/</guid>
      <description>&lt;p&gt;As I did with &lt;a href=&#34;https://blog.jverkamp.com/2018/01/03/advent-of-code-2016/&#34;&gt;last year&lt;/a&gt; / &lt;a href=&#34;https://blog.jverkamp.com/2018/01/03/advent-of-code-2016/&#34;&gt;yesterday&lt;/a&gt;, I&amp;rsquo;ve written up a series of posts for the Advent of Code 2017 problems. Again, I didn&amp;rsquo;t manage to write them up as I did them, but this time around I least I finished mostly on time.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Advent of Code 2016</title>
      <link>https://blog.jverkamp.com/2018/01/03/advent-of-code-2016/</link>
      <pubDate>Wed, 03 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2018/01/03/advent-of-code-2016/</guid>
      <description>&lt;p&gt;As I did &lt;a href=&#34;https://blog.jverkamp.com/2015/12/01/advent-of-code/&#34;&gt;last year&lt;/a&gt;, I&amp;rsquo;m going to solve the Advent of Code problems again this year.&lt;/p&gt;

&lt;p&gt;Or that was the plan. It turns out that instead I put down my blog for almost a year and a half and never quite got around to doing these problems. So I&amp;rsquo;m actually backdating these posts from the early days of 2018 to where they would have been had I solved them on time. They&amp;rsquo;re still interesting problems, so give them a read.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>AoC 2017 Day 25: Turing</title>
      <link>https://blog.jverkamp.com/2017/12/25/aoc-2017-day-25-turing/</link>
      <pubDate>Mon, 25 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2017/12/25/aoc-2017-day-25-turing/</guid>
      <description>&lt;h3 id=&#34;source-the-halting-problem-http-adventofcode-com-2017-day-25&#34;&gt;Source: &lt;a href=&#34;http://adventofcode.com/2017/day/25&#34;&gt;The Halting Problem&lt;/a&gt;&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Part 1:&lt;/strong&gt; Implement a &lt;a href=&#34;https://en.wikipedia.org/wiki/Turing%20machine&#34;&gt;Turing machine&lt;/a&gt; defined as such:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;Begin in state A.
Perform a diagnostic checksum after 6 steps.

In state A:
  If the current value is 0:
    - Write the value 1.
    - Move one slot to the right.
    - Continue with state B.
  If the current value is 1:
    - Write the value 0.
    - Move one slot to the left.
    - Continue with state B.

...&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;What is the final number of &lt;code&gt;1s&lt;/code&gt; on the tape?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>AoC 2017 Day 24: Maker Of Bridges</title>
      <link>https://blog.jverkamp.com/2017/12/24/aoc-2017-day-24-maker-of-bridges/</link>
      <pubDate>Sun, 24 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2017/12/24/aoc-2017-day-24-maker-of-bridges/</guid>
      <description>&lt;h3 id=&#34;source-electromagnetic-moat-http-adventofcode-com-2017-day-24&#34;&gt;Source: &lt;a href=&#34;http://adventofcode.com/2017/day/24&#34;&gt;Electromagnetic Moat&lt;/a&gt;&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Part 1:&lt;/strong&gt; Given a series of reversible components of the form &lt;code&gt;3/4&lt;/code&gt; (can connect a &lt;code&gt;3&lt;/code&gt; on one end to a &lt;code&gt;4&lt;/code&gt; on the other), form a bridge of components. The bridge&amp;rsquo;s strength is equal to the sum of component values. So &lt;code&gt;0/3, 3/7, and 7/4&lt;/code&gt; has a strength of &lt;code&gt;0+3 + 3+7 + 7+4 = 24&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;What is the strongest possible bridge?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>AoC 2017 Day 23: Duetvmc</title>
      <link>https://blog.jverkamp.com/2017/12/23/aoc-2017-day-23-duetvmc/</link>
      <pubDate>Sat, 23 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2017/12/23/aoc-2017-day-23-duetvmc/</guid>
      <description>&lt;h3 id=&#34;source-coprocessor-conflagration-http-adventofcode-com-2017-day-23&#34;&gt;Source: &lt;a href=&#34;http://adventofcode.com/2017/day/23&#34;&gt;Coprocessor Conflagration&lt;/a&gt;&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Part 1:&lt;/strong&gt; Create a variation of the &lt;a href=&#34;https://blog.jverkamp.com/2017/12/18/aoc-2017-day-18-duetvm/&#34;&gt;previous DuetVM&lt;/a&gt; with only the following four instructions:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;set X Y&lt;/code&gt; sets register &lt;code&gt;X&lt;/code&gt; to &lt;code&gt;Y&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sub X Y&lt;/code&gt; set register &lt;code&gt;X&lt;/code&gt; to &lt;code&gt;X - Y&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mul X Y&lt;/code&gt; sets register &lt;code&gt;X&lt;/code&gt; to &lt;code&gt;X * Y&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;jnz X Y&lt;/code&gt; jumps with an offset of the value of &lt;code&gt;Y&lt;/code&gt;, iff &lt;code&gt;X&lt;/code&gt; is not equal to zero&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you run the given program, how many times is &lt;code&gt;mul&lt;/code&gt; invoked?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>AoC 2017 Day 22: Langton&#39;s Ant</title>
      <link>https://blog.jverkamp.com/2017/12/22/aoc-2017-day-22-langtons-ant/</link>
      <pubDate>Fri, 22 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2017/12/22/aoc-2017-day-22-langtons-ant/</guid>
      <description>&lt;h3 id=&#34;source-sporifica-virus-http-adventofcode-com-2017-day-22&#34;&gt;Source: &lt;a href=&#34;http://adventofcode.com/2017/day/22&#34;&gt;Sporifica Virus&lt;/a&gt;&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Part 1:&lt;/strong&gt; Implement a &lt;a href=&#34;https://en.wikipedia.org/wiki/cellular%20automaton&#34;&gt;cellular automaton&lt;/a&gt; on an infinite grid of &lt;code&gt;.&lt;/code&gt; and &lt;code&gt;#&lt;/code&gt; pixels such that:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Start at &lt;code&gt;(0, 0)&lt;/code&gt;, facing &lt;code&gt;Up&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Repeat:

&lt;ul&gt;
&lt;li&gt;If the cursor is on &lt;code&gt;.&lt;/code&gt; swap it to &lt;code&gt;#&lt;/code&gt; and turn &lt;code&gt;Left&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;If the cursor is on &lt;code&gt;#&lt;/code&gt; swap it to &lt;code&gt;.&lt;/code&gt; and turn &lt;code&gt;Right&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Either way, after turning, move forward once&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;After 10,000 iterations, how many pixels were turned from &lt;code&gt;.&lt;/code&gt; to &lt;code&gt;#&lt;/code&gt;?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>AoC 2017 Day 21: Fractal Expander</title>
      <link>https://blog.jverkamp.com/2017/12/21/aoc-2017-day-21-fractal-expander/</link>
      <pubDate>Thu, 21 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2017/12/21/aoc-2017-day-21-fractal-expander/</guid>
      <description>&lt;h3 id=&#34;source-fractal-art-http-adventofcode-com-2017-day-21&#34;&gt;Source: &lt;a href=&#34;http://adventofcode.com/2017/day/21&#34;&gt;Fractal Art&lt;/a&gt;&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Part 1:&lt;/strong&gt; Start with an input image made of &lt;code&gt;.&lt;/code&gt; and &lt;code&gt;#&lt;/code&gt; pixels. For &lt;code&gt;n&lt;/code&gt; iterations, break the image into blocks:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;If the current size is even, break the image into 2x2 chunks and replace each with a 3x3 chunk&lt;/li&gt;
&lt;li&gt;If the current size is odd, break the image into 3x3 chunks and replace each with a 4x4 chunk&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The replacement rules will be specified in the following format (example is a 3x3 -&amp;gt; 4x4 rule):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;.#./..#/### =&amp;gt; #..#/..../..../#..#
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In that example, replace this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;.#.
..#
###
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;With this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#..#
....
....
#..#
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Any rotation or reflection of a chunk can be used to match the input of a replacement rule.&lt;/p&gt;

&lt;p&gt;After &lt;code&gt;n = 18&lt;/code&gt; iterations, how many &lt;code&gt;#&lt;/code&gt; pixels are there?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>AoC 2017 Day 20: Miniature Universe Simulator</title>
      <link>https://blog.jverkamp.com/2017/12/20/aoc-2017-day-20-miniature-universe-simulator/</link>
      <pubDate>Wed, 20 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2017/12/20/aoc-2017-day-20-miniature-universe-simulator/</guid>
      <description>&lt;h3 id=&#34;source-particle-swarm-http-adventofcode-com-2017-day-20&#34;&gt;Source: &lt;a href=&#34;http://adventofcode.com/2017/day/20&#34;&gt;Particle Swarm&lt;/a&gt;&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Part 1:&lt;/strong&gt; Given the initial position, velocity, and acceleration of a large number of particles, which particle will stay the closet to the origin as the simulation runs to infinity?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>