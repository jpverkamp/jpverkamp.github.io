<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Python on jverkamp.com</title>
    <link>https://blog.jverkamp.com/programming/languages/python/</link>
    <description>Recent content in Python on jverkamp.com</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 04 Jan 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://blog.jverkamp.com/programming/languages/python/atom.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Listing and Downloading S3 Versions</title>
      <link>https://blog.jverkamp.com/2019/01/04/listing-and-downloading-s3-versions/</link>
      <pubDate>Fri, 04 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2019/01/04/listing-and-downloading-s3-versions/</guid>
      <description>&lt;p&gt;Today I found the need to look through all old versions of a file in S3 that had versioning turned on. You can do it through the AWS Console, but I prefer command line tools. You can do it with &lt;a href=&#34;https://aws.amazon.com/cli/&#34;&gt;awscli&lt;/a&gt;, but the flags are long and I can never quite remember them. So let&amp;rsquo;s write up a quick script using &lt;a href=&#34;https://boto3.amazonaws.com/v1/documentation/api/latest/index.html&#34;&gt;boto3&lt;/a&gt; (and as a bonus, try out &lt;a href=&#34;https://click.palletsprojects.com/en/7.x/&#34;&gt;click&lt;/a&gt;)!&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>AoC 2018 Day 3: Regionification</title>
      <link>https://blog.jverkamp.com/2018/12/03/aoc-2018-day-3-regionification/</link>
      <pubDate>Mon, 03 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2018/12/03/aoc-2018-day-3-regionification/</guid>
      <description>&lt;h3 id=&#34;source-no-matter-how-you-slice-it-https-adventofcode-com-2018-day-3&#34;&gt;Source: &lt;a href=&#34;https://adventofcode.com/2018/day/3&#34;&gt;No Matter How You Slice It&lt;/a&gt;&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Part 1:&lt;/strong&gt; Given a list of overlapping regions defined by (left, top, width, height) count how many integer points occur in more than one region.&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>AoC 2018 Day 2: Counting letters</title>
      <link>https://blog.jverkamp.com/2018/12/02/aoc-2018-day-2-counting-letters/</link>
      <pubDate>Sun, 02 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2018/12/02/aoc-2018-day-2-counting-letters/</guid>
      <description>&lt;h3 id=&#34;source-inventory-management-system-https-adventofcode-com-2018-day-2&#34;&gt;Source: &lt;a href=&#34;https://adventofcode.com/2018/day/2&#34;&gt;Inventory Management System&lt;/a&gt;&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Part 1:&lt;/strong&gt; Given a list of strings, count how many contain exactly two of a letter (&lt;code&gt;a&lt;/code&gt;) and how many contain exactly three of a letter (&lt;code&gt;b&lt;/code&gt;). Calculate &lt;code&gt;a*b&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>AoC 2018 Day 1: Sum-thing to start with</title>
      <link>https://blog.jverkamp.com/2018/12/01/aoc-2018-day-1-sum-thing-to-start-with/</link>
      <pubDate>Sat, 01 Dec 2018 00:00:03 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2018/12/01/aoc-2018-day-1-sum-thing-to-start-with/</guid>
      <description>&lt;h3 id=&#34;source-chronal-calibration-https-adventofcode-com-2018-day-1&#34;&gt;Source: &lt;a href=&#34;https://adventofcode.com/2018/day/1&#34;&gt;Chronal Calibration&lt;/a&gt;&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Part 1:&lt;/strong&gt; Given a list of numbers (positive and negative) calculate the sum.&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>Advent of Code 2018</title>
      <link>https://blog.jverkamp.com/2018/12/01/advent-of-code-2018/</link>
      <pubDate>Sat, 01 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2018/12/01/advent-of-code-2018/</guid>
      <description>&lt;p&gt;Let&amp;rsquo;s do it again! I&amp;rsquo;m starting a day late, but much better than &lt;a href=&#34;https://blog.jverkamp.com/2018/01/08/advent-of-code-2017/&#34;&gt;last year&lt;/a&gt; ðŸ˜„!&lt;/p&gt;

&lt;p&gt;This time around, I&amp;rsquo;m hoping to solve each problem in both Python and Racket, both to show an example of how the languages differ and &amp;hellip; well, because I can ðŸ˜‡.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;EDIT 2018-12-05&lt;/em&gt;: Yeah&amp;hellip; I&amp;rsquo;m not actually going to do these in both Racket and Python. The solutions are ending up being near direct translations. Since there are probably fewer people solving these in Racket, I&amp;rsquo;ll do that first and Python eventuallyâ„¢.&lt;/p&gt;

&lt;p&gt;As always, these problems are wonderful to try to solve yourself. If you agree, &lt;em&gt;stop reading now&lt;/em&gt;. This post isn&amp;rsquo;t going anywhere.&lt;/p&gt;

&lt;p&gt;If you&amp;rsquo;d like to see the full form of any particular solution, you can do so on GitHub (including previous years and possibly some I haven&amp;rsquo;t written up yet): &lt;a href=&#34;https://github.com/jpverkamp/advent-of-code&#34;&gt;jpverkamp/advent-of-code&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Counting and Sizing S3 Buckets</title>
      <link>https://blog.jverkamp.com/2018/07/15/counting-and-sizing-s3-buckets/</link>
      <pubDate>Sun, 15 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2018/07/15/counting-and-sizing-s3-buckets/</guid>
      <description>&lt;p&gt;A long time ago in a galaxy far far away, I wrote up a script that I used to take an &lt;a href=&#34;https://aws.amazon.com/s3/&#34;&gt;AWS S3&lt;/a&gt; bucket and count how many objects there were in the bucket and calculate its total size. While you could get some of this information from billing reports, there just wasn&amp;rsquo;t a good way to get it other than that at the time. The only way you could do it was to&amp;hellip; iterate through the entire bucket, summing as you go. If you have buckets with millions (or more) objects, this could take a while.&lt;/p&gt;

&lt;p&gt;Basically:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;conn &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; boto&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;connect_s3()
&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; bucket &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; sorted(conn&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;get_all_buckets()):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt;:
        total_count &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
        total_size &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
        start &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; datetime&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;datetime&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;now()

        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; key &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; bucket&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;list_versions():
            &lt;span style=&#34;color:#75715e&#34;&gt;# Skip deleted files&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; isinstance(key, boto&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;s3&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;deletemarker&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;DeleteMarker):
                &lt;span style=&#34;color:#66d9ef&#34;&gt;continue&lt;/span&gt;

            size &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; key&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;size
            total_count &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
            total_size &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; size

        &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;-- {count} files, {size}, {time} to calculate&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;format(
            count &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; total_count,
            size &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; humanize&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;naturalsize(total_size),
            time &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; humanize&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;naturaltime(datetime&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;datetime&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;now() &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; start)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;replace(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39; ago&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;)
        ))&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Creating a temporary SMTP server to &#39;catch&#39; domain validation emails</title>
      <link>https://blog.jverkamp.com/2018/07/09/creating-a-temporary-smtp-server-to-catch-domain-validation-emails/</link>
      <pubDate>Mon, 09 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2018/07/09/creating-a-temporary-smtp-server-to-catch-domain-validation-emails/</guid>
      <description>&lt;p&gt;One problem that has come up a time or two is dealing with email-based domain validation (specifically in this case for the issuance of TLS certificates) on domains that aren&amp;rsquo;t actually configured to receive email. Yes, in a perfect world, it would be easier to switch to DNS-based validation (since we have to have control of the DNS for the domain, we need it later), but let&amp;rsquo;s just assume that&amp;rsquo;s not an option. So, how do we &amp;lsquo;catch&amp;rsquo; the activation email so we can prove we can receive email on that domain?&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Generating zone files from Route53</title>
      <link>https://blog.jverkamp.com/2018/03/12/generating-zone-files-from-route53/</link>
      <pubDate>Mon, 12 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2018/03/12/generating-zone-files-from-route53/</guid>
      <description>&lt;p&gt;Recently I found myself wanting to do some analysis on all of our DNS entires stored in AWS&amp;rsquo;s Route53 for security reasons (specifically to prevent subdomain takeover attacks, I&amp;rsquo;ll probably write that up soon). In doing so, I realized that while Route53 has the ability to import a &lt;a href=&#34;https://en.wikipedia.org/wiki/zone%20file&#34;&gt;zone file&lt;/a&gt;, it&amp;rsquo;s not possible to export one.&lt;/p&gt;

&lt;p&gt;To some extent, this makes sense. Since Route53 supports ALIAS records (which can automatically determine their values based on other AWS products, such as an ELB changing its public IP) and those aren&amp;rsquo;t actually &amp;lsquo;real&amp;rsquo; DNS entries, things will get confused. But I don&amp;rsquo;t currently intend to re-import these zone files, just use them. So let&amp;rsquo;s see what we can do.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Advent of Code 2017</title>
      <link>https://blog.jverkamp.com/2018/01/08/advent-of-code-2017/</link>
      <pubDate>Mon, 08 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2018/01/08/advent-of-code-2017/</guid>
      <description>&lt;p&gt;As I did with &lt;a href=&#34;https://blog.jverkamp.com/2018/01/03/advent-of-code-2016/&#34;&gt;last year&lt;/a&gt; / &lt;a href=&#34;https://blog.jverkamp.com/2018/01/03/advent-of-code-2016/&#34;&gt;yesterday&lt;/a&gt;, I&amp;rsquo;ve written up a series of posts for the Advent of Code 2017 problems. Again, I didn&amp;rsquo;t manage to write them up as I did them, but this time around I least I finished mostly on time.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Advent of Code 2016</title>
      <link>https://blog.jverkamp.com/2018/01/03/advent-of-code-2016/</link>
      <pubDate>Wed, 03 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2018/01/03/advent-of-code-2016/</guid>
      <description>&lt;p&gt;As I did &lt;a href=&#34;https://blog.jverkamp.com/2015/12/01/advent-of-code/&#34;&gt;last year&lt;/a&gt;, I&amp;rsquo;m going to solve the Advent of Code problems again this year.&lt;/p&gt;

&lt;p&gt;Or that was the plan. It turns out that instead I put down my blog for almost a year and a half and never quite got around to doing these problems. So I&amp;rsquo;m actually backdating these posts from the early days of 2018 to where they would have been had I solved them on time. They&amp;rsquo;re still interesting problems, so give them a read.&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>