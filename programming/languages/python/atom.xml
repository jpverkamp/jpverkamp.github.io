<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Python on jverkamp.com</title>
    <link>https://blog.jverkamp.com/programming/languages/python/</link>
    <description>Recent content in Python on jverkamp.com</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 03 Jan 2018 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://blog.jverkamp.com/programming/languages/python/atom.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Advent of Code 2016</title>
      <link>https://blog.jverkamp.com/2018/01/03/advent-of-code-2016/</link>
      <pubDate>Wed, 03 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2018/01/03/advent-of-code-2016/</guid>
      <description>&lt;p&gt;As I did &lt;a href=&#34;https://blog.jverkamp.com/2015/12/01/advent-of-code/&#34;&gt;last year&lt;/a&gt;, I&amp;rsquo;m going to solve the Advent of Code problems again this year.&lt;/p&gt;

&lt;p&gt;Or that was the plan. It turns out that instead I put down my blog for almost a year and a half and never quite got around to doing these problems. So I&amp;rsquo;m actually backdating these posts from the early days of 2018 to where they would have been had I solved them on time. They&amp;rsquo;re still interesting problems, so give them a read.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Dynamic Automatic Proxies</title>
      <link>https://blog.jverkamp.com/2017/12/13/dynamic-automatic-proxies/</link>
      <pubDate>Wed, 13 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2017/12/13/dynamic-automatic-proxies/</guid>
      <description>&lt;p&gt;On of the advantages of working in computer programming is that I can work from anywhere I have a computer and an internet connection. One of the disadvantages is that many of the resources that I need to do my job are locked to only be accessible within a specific network (albeit with a &lt;a href=&#34;https://en.wikipedia.org/wiki/bastion%20host&#34;&gt;bastion host&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;I long ago set up my SSH config to create an SSH tunnel and I can proxy many applications through that just by setting the &lt;code&gt;HTTP_PROXY&lt;/code&gt; and/or &lt;code&gt;HTTPS_PROXY&lt;/code&gt; environment variables. The downside of this though is that if I&amp;rsquo;m actually on a &amp;lsquo;safe&amp;rsquo; network, there&amp;rsquo;s no reason to use the bastion host and I would actually be putting extra load on it.&lt;/p&gt;

&lt;p&gt;My goal: write something that would let me automatically proxy applications when I need to but not when I don&amp;rsquo;t.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Deterministic Shuffling Using Hashes</title>
      <link>https://blog.jverkamp.com/2017/12/11/deterministic-shuffling-using-hashes/</link>
      <pubDate>Mon, 11 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2017/12/11/deterministic-shuffling-using-hashes/</guid>
      <description>&lt;p&gt;Whenever I create my &lt;a href=&#34;https://blog.jverkamp.com/2017/01/01/2017-reading-list/&#34;&gt;yearly reading list&lt;/a&gt;, I need a way to order the books. Sure, I could just shuffle them normally, but that leads me to the temptation of cheating and re-shuffling them so that the books I want to read most are first. What I really need is a shuffle that will shuffle the same way every time.&lt;/p&gt;

&lt;p&gt;Enter: hashsort&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Migrating to Hugo</title>
      <link>https://blog.jverkamp.com/2017/12/10/migrating-to-hugo/</link>
      <pubDate>Sun, 10 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2017/12/10/migrating-to-hugo/</guid>
      <description>&lt;p&gt;A long time ago&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;, in a galaxy far, far away&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:2&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:2&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;, I &lt;a href=&#34;https://blog.jverkamp.com/2014/08/08/onwards-and-upwards/&#34;&gt;moved my blog&lt;/a&gt; from WordPress to a custom written static blog generator in Racket. And for a while, all was well.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>AoC 2016 Day 25: Assembunny3</title>
      <link>https://blog.jverkamp.com/2016/12/25/aoc-2016-day-25-assembunny3/</link>
      <pubDate>Sun, 25 Dec 2016 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2016/12/25/aoc-2016-day-25-assembunny3/</guid>
      <description>&lt;h3 id=&#34;source-clock-signal-http-adventofcode-com-2016-day-25&#34;&gt;Source: &lt;a href=&#34;http://adventofcode.com/2016/day/25&#34;&gt;Clock Signal&lt;/a&gt;&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Part 1:&lt;/strong&gt; Take the &lt;a href=&#34;https://blog.jverkamp.com/2016/12/12/aoc-2016-day-12-assembunny/&#34;&gt;assembunny interpreter from day 12&lt;/a&gt; and add one new instruction (out &lt;code&gt;x&lt;/code&gt;) which transmits the value &lt;code&gt;x&lt;/code&gt; (either an integer or register). Find the lowest value we can initialize &lt;code&gt;a&lt;/code&gt; to so that the &lt;code&gt;out&lt;/code&gt;put signals form an infinite repeating pattern of &lt;code&gt;0&lt;/code&gt;, &lt;code&gt;1&lt;/code&gt;, &lt;code&gt;0&lt;/code&gt;, &lt;code&gt;1&lt;/code&gt;, &amp;hellip;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>AoC 2016 Day 24: Venti</title>
      <link>https://blog.jverkamp.com/2016/12/24/aoc-2016-day-24-venti/</link>
      <pubDate>Sat, 24 Dec 2016 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2016/12/24/aoc-2016-day-24-venti/</guid>
      <description>&lt;h3 id=&#34;source-air-duct-spelunking-http-adventofcode-com-2016-day-24&#34;&gt;Source: &lt;a href=&#34;http://adventofcode.com/2016/day/24&#34;&gt;Air Duct Spelunking&lt;/a&gt;&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Part 1:&lt;/strong&gt; Given a map of the form:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;###########
#0.1.....2#
#.#######.#
#4.......3#
###########
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Find the shortest route to visit each of the points, starting at &lt;code&gt;0&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>AoC 2016 Day 23: Assembunny2</title>
      <link>https://blog.jverkamp.com/2016/12/23/aoc-2016-day-23-assembunny2/</link>
      <pubDate>Fri, 23 Dec 2016 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2016/12/23/aoc-2016-day-23-assembunny2/</guid>
      <description>&lt;h3 id=&#34;source-safe-cracking-http-adventofcode-com-2016-day-23&#34;&gt;Source: &lt;a href=&#34;http://adventofcode.com/2016/day/23&#34;&gt;Safe Cracking&lt;/a&gt;&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Part 1:&lt;/strong&gt; Take the &lt;a href=&#34;https://blog.jverkamp.com/2016/12/12/aoc-2016-day-12-assembunny/&#34;&gt;assembunny interpreter from day 12&lt;/a&gt; and add an instruction (tgl &lt;code&gt;X&lt;/code&gt;) that modifies the code at an offset of &lt;code&gt;X&lt;/code&gt; instructions.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;inc&lt;/code&gt; becomes &lt;code&gt;dec&lt;/code&gt;; any other one argument instruction (including &lt;code&gt;tgl&lt;/code&gt;) becomes &lt;code&gt;inc&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;jnz&lt;/code&gt; becomes &lt;code&gt;cpy&lt;/code&gt;; any other two argument instructions become &lt;code&gt;jnz&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Toggling an instruction outside of the program does nothing (it does not halt execution)&lt;/li&gt;
&lt;li&gt;If toggling produces an invalid instruction, ignore it&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Run the given program with the initial register of &lt;code&gt;a = 7&lt;/code&gt;. What is the final value in register &lt;code&gt;a&lt;/code&gt;?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>AoC 2016 Day 22: Data Mover</title>
      <link>https://blog.jverkamp.com/2016/12/22/aoc-2016-day-22-data-mover/</link>
      <pubDate>Thu, 22 Dec 2016 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2016/12/22/aoc-2016-day-22-data-mover/</guid>
      <description>&lt;h3 id=&#34;source-grid-computing-http-adventofcode-com-2016-day-22&#34;&gt;Source: &lt;a href=&#34;http://adventofcode.com/2016/day/22&#34;&gt;Grid Computing&lt;/a&gt;&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Part 1:&lt;/strong&gt; You are given a grid of nodes and the output of the &lt;a href=&#34;https://en.wikipedia.org/wiki/DF%20%28unix%29&#34;&gt;df command&lt;/a&gt; telling you how much space is on each. How many pairs of nodes are there where the data from some node &lt;code&gt;A&lt;/code&gt; would fit entirely on &lt;code&gt;B&lt;/code&gt;?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>AoC 2016 Day 21: Scrambler</title>
      <link>https://blog.jverkamp.com/2016/12/21/aoc-2016-day-21-scrambler/</link>
      <pubDate>Wed, 21 Dec 2016 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2016/12/21/aoc-2016-day-21-scrambler/</guid>
      <description>&lt;h3 id=&#34;source-scrambled-letters-and-hash-http-adventofcode-com-2016-day-21&#34;&gt;Source: &lt;a href=&#34;http://adventofcode.com/2016/day/21&#34;&gt;Scrambled Letters and Hash&lt;/a&gt;&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Part 1:&lt;/strong&gt; &lt;a href=&#34;https://blog.jverkamp.com/2016/12/12/aoc-2016-day-12-assembunny/&#34;&gt;Another&lt;/a&gt; &lt;a href=&#34;https://en.wikipedia.org/wiki/virtual%20machine&#34;&gt;virtual machine&lt;/a&gt;, of sorts. Start with the string &lt;code&gt;abcdefgh&lt;/code&gt; and apply a sequence of the following commands to it:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;swap position &lt;code&gt;X&lt;/code&gt; with position &lt;code&gt;Y&lt;/code&gt; = swap two positions&lt;/li&gt;
&lt;li&gt;swap letter &lt;code&gt;X&lt;/code&gt; with letter &lt;code&gt;Y&lt;/code&gt; = swap to letters, no matter where they are&lt;/li&gt;
&lt;li&gt;rotate (left|right) &lt;code&gt;X&lt;/code&gt; steps = rotate forward or backward&lt;/li&gt;
&lt;li&gt;rotate based on position of letter &lt;code&gt;X&lt;/code&gt; = find &lt;code&gt;X&lt;/code&gt;, rotate right based on its position; if the original position was &amp;gt;= 4, rotate one more&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:arbitrary&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:arbitrary&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/li&gt;
&lt;li&gt;reverse positions &lt;code&gt;X&lt;/code&gt; through &lt;code&gt;Y&lt;/code&gt; = reverse a subset of the string&lt;/li&gt;
&lt;li&gt;move position &lt;code&gt;X&lt;/code&gt; to position &lt;code&gt;Y&lt;/code&gt; = take a character at a position out of the string and put it somewhere else specific&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>AoC 2016 Day 20: Filter Table</title>
      <link>https://blog.jverkamp.com/2016/12/20/aoc-2016-day-20-filter-table/</link>
      <pubDate>Tue, 20 Dec 2016 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2016/12/20/aoc-2016-day-20-filter-table/</guid>
      <description>&lt;h3 id=&#34;source-firewall-rules-http-adventofcode-com-2016-day-20&#34;&gt;Source: &lt;a href=&#34;http://adventofcode.com/2016/day/20&#34;&gt;Firewall Rules&lt;/a&gt;&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Part 1:&lt;/strong&gt; Given a list of integer ranges (a la &lt;code&gt;5-8&lt;/code&gt;), what is the first value not in any given range?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>