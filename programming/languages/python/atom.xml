<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Python on jverkamp.com</title><link>https://blog.jverkamp.com/programming/languages/python/</link><description>Recent content in Python on jverkamp.com</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://blog.jverkamp.com/programming/languages/python/atom.xml" rel="self" type="application/rss+xml"/><item><title>Go is faster than Python? (an example parsing huge JSON logs)</title><link>https://blog.jverkamp.com/2022/02/11/go-is-faster-than-python-an-example-parsing-huge-json-logs/</link><pubDate>Fri, 11 Feb 2022 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2022/02/11/go-is-faster-than-python-an-example-parsing-huge-json-logs/</guid><description>&lt;p>Recently at work I came across a problem where I had to go through a year&amp;rsquo;s worth of logs and corelate two different fields across all of our requests. On the good side, we have the logs stored as JSON objects (archived from Datadog which collects them). On the down side&amp;hellip; it&amp;rsquo;s kind of a huge amount of data. Not as much as I&amp;rsquo;ve dealt with at previous jobs/in some academic problems, but we&amp;rsquo;re still talking on the order of terabytes.&lt;/p>
&lt;p>On one hand, write up a quick Python script, fire and forget. It takes maybe ten minutes to write the code and (for this specific example) half an hour to run it on the specific cloud instance the logs lived on. So we&amp;rsquo;ll start with that. But then I got thinking&amp;hellip; Python is supposed to be super slow right? Can I do better?&lt;/p>
&lt;p>(Note: This problem is mostly disk bound. So Python actually for the most part does just fine.)&lt;/p></description></item><item><title>A CLI Tool for Bulk Processing Github Dependabot Alerts (with GraphQL!)</title><link>https://blog.jverkamp.com/2022/02/03/a-cli-tool-for-bulk-processing-github-dependabot-alerts-with-graphql/</link><pubDate>Thu, 03 Feb 2022 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2022/02/03/a-cli-tool-for-bulk-processing-github-dependabot-alerts-with-graphql/</guid><description>&lt;p>Dependabot is &amp;hellip; &lt;em>somewhat useful&lt;/em>. When it comes to letting you know that there are critical issues in your dependencies that can be fixed simply by upgrading the package (they did all the work for you*). The biggest problem is that it can just be &lt;em>insanely&lt;/em> noisy. In a busy repo with multiple Node.JS codebases (especially), you can get dozens to even hundreds of reports a week. And for each one, you optimally would update the code&amp;hellip; but sometimes it&amp;rsquo;s just not practical. So you have to decide which updates you actually apply.&lt;/p>
&lt;p>So. How do we do it?&lt;/p>
&lt;p>Well the traditional rest based Github APIs don&amp;rsquo;t expose the dependabot data, &lt;em>but&lt;/em> the newer GraphQL one does! I&amp;rsquo;ll admit, I haven&amp;rsquo;t used as much GraphQL as I probably should, it&amp;rsquo;s&amp;hellip; a bit more complicated than REST. But it does expose what I need.&lt;/p></description></item><item><title>A simple Flask Logging/Echo Server</title><link>https://blog.jverkamp.com/2022/02/01/a-simple-flask-logging/echo-server/</link><pubDate>Tue, 01 Feb 2022 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2022/02/01/a-simple-flask-logging/echo-server/</guid><description>&lt;p>A very simple server that can be used to catch all incoming HTTP requests and just echo them back + log their contents. I needed it to test what a webhook actually returned to me, but I&amp;rsquo;m sure that there are a number of other things it could be dropped in for.&lt;/p>
&lt;p>It will take in any GET/POST/PATCH/DELETE HTTP request with any path/params/data (optionally JSON), pack that data into a JSON object, and both log that to a file (with a UUID1 based name) plus return this object to the request.&lt;/p>
&lt;p>Warning: Off hand, there is already a potential security problem in this regarding DoS. It will happily try to log anything you throw at it, no matter how big and will store those in memory first. So long running requests / large requests / many requests will quickly eat up your RAM/disk. So&amp;hellip; don&amp;rsquo;t leave this running unattended? At least not without additional configuration.&lt;/p>
&lt;p>That&amp;rsquo;s it! Hope it&amp;rsquo;s helpful.&lt;/p></description></item><item><title>Pulling more than 5000 logs from datadog</title><link>https://blog.jverkamp.com/2022/01/25/pulling-more-than-5000-logs-from-datadog/</link><pubDate>Tue, 25 Jan 2022 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2022/01/25/pulling-more-than-5000-logs-from-datadog/</guid><description>&lt;p>&lt;a href="https://www.datadoghq.com/">Datadog&lt;/a> is pretty awesome. I wish I had it at my previous job, but better late than never. In particular, I&amp;rsquo;ve used it a lot for digging through recent logs to try to construct various events for various (security related) reasons.&lt;/p>
&lt;p>One of the problems I&amp;rsquo;ve come into though is that eventually you&amp;rsquo;re going to hit the limits of what datadog can do. In particular, I was trying to reconstruct user&amp;rsquo;s sessions and then check if they made one specific sequence of calls or another one. So far as I know, that isn&amp;rsquo;t directly possible, so instead, I wanted to download a subset of the datadog logs and process them locally.&lt;/p>
&lt;p>Easy enough, yes? Well: &lt;a href="https://stackoverflow.com/questions/67281698/datadog-export-logs-more-than-5-000">https://stackoverflow.com/questions/67281698/datadog-export-logs-more-than-5-000&lt;/a>&lt;/p>
&lt;p>Turns out, you just can&amp;rsquo;t export more than 5000 logs directly. &lt;em>But&lt;/em>&amp;hellip; they have an API with pagination!&lt;/p></description></item><item><title>AoC 2021 Day 25: Cucumbinator</title><link>https://blog.jverkamp.com/2021/12/25/aoc-2021-day-25-cucumbinator/</link><pubDate>Sat, 25 Dec 2021 00:00:03 +0000</pubDate><guid>https://blog.jverkamp.com/2021/12/25/aoc-2021-day-25-cucumbinator/</guid><description>&lt;h3 id="source-sea-cucumberhttpsadventofcodecom2021day25">Source: &lt;a href="https://adventofcode.com/2021/day/25">Sea Cucumber&lt;/a>&lt;/h3>
&lt;h4 id="part-1-load-a-grid-of-empty-cells--east-movers--and-south-movers-v-each-step-move-all-east-movers-than-all-south-movers-only-if-they-can-this-iteration-wrap-eastwest-and-northsouth-how-many-steps-does-it-take-the-movers-to-get-stuck">&lt;strong>Part 1:&lt;/strong> Load a grid of empty cells (&lt;code>.&lt;/code>), east movers (&lt;code>&amp;gt;&lt;/code>), and south movers (&lt;code>v&lt;/code>). Each step, move all east movers than all south movers (only if they can this iteration). Wrap east/west and north/south. How many steps does it take the movers to get stuck?&lt;/h4></description></item><item><title>AoC 2021 Day 24: Aluinator</title><link>https://blog.jverkamp.com/2021/12/24/aoc-2021-day-24-aluinator/</link><pubDate>Fri, 24 Dec 2021 00:00:03 +0000</pubDate><guid>https://blog.jverkamp.com/2021/12/24/aoc-2021-day-24-aluinator/</guid><description>&lt;h3 id="source-arithmetic-logic-unithttpsadventofcodecom2021day24">Source: &lt;a href="https://adventofcode.com/2021/day/24">Arithmetic Logic Unit&lt;/a>&lt;/h3>
&lt;h4 id="part-1-simulate-an-alu-with-4-registers-w-x-y-and-z-and-instructions-defined-below-find-the-largest-14-digit-number-with-no-0-digits-which-result-in-z0">&lt;strong>Part 1:&lt;/strong> Simulate an ALU with 4 registers (&lt;code>w&lt;/code>, &lt;code>x&lt;/code>, &lt;code>y&lt;/code>, and &lt;code>z&lt;/code>) and instructions defined below. Find the largest 14 digit number with no 0 digits which result in &lt;code>z=0&lt;/code>.&lt;/h4></description></item><item><title>AoC 2021 Day 23: Amphipodinator</title><link>https://blog.jverkamp.com/2021/12/23/aoc-2021-day-23-amphipodinator/</link><pubDate>Thu, 23 Dec 2021 00:00:03 +0000</pubDate><guid>https://blog.jverkamp.com/2021/12/23/aoc-2021-day-23-amphipodinator/</guid><description>&lt;h3 id="source-amphipodhttpsadventofcodecom2021day23">Source: &lt;a href="https://adventofcode.com/2021/day/23">Amphipod&lt;/a>&lt;/h3>
&lt;h4 id="part-1-given-4-rooms-full-of-amphipods-with-various-energy-costs-for-movement-a1-b10-c100-d1000-and-a-hallway-how-much-energy-does-it-take-at-minimum-to-sort-the-amphipods-into-their-own-rooms-with-the-following-conditions">&lt;strong>Part 1:&lt;/strong> Given 4 rooms full of amphipods with various energy costs for movement (a=1, b=10, c=100, d=1000) and a hallway, how much energy does it take (at minimum) to sort the amphipods into their own rooms with the following conditions:&lt;/h4></description></item><item><title>AoC 2021 Day 22: Cubinator</title><link>https://blog.jverkamp.com/2021/12/22/aoc-2021-day-22-cubinator/</link><pubDate>Wed, 22 Dec 2021 00:00:05 +0000</pubDate><guid>https://blog.jverkamp.com/2021/12/22/aoc-2021-day-22-cubinator/</guid><description>&lt;h3 id="source-reactor-reboothttpsadventofcodecom2021day22">Source: &lt;a href="https://adventofcode.com/2021/day/22">Reactor Reboot&lt;/a>&lt;/h3>
&lt;h4 id="part-1-given-a-series-of-3d-cubes-that-either-turn-on-all-or-turn-off-all-points-in-their-region-calculate-how-many-points-in-the-region--5050-5050-5050-are-on-at-the-end">&lt;strong>Part 1:&lt;/strong> Given a series of 3D cubes that either turn ON all or turn OFF all points in their region, calculate how many points in the region (-50..50,-50..50,-50..50) are ON at the end.&lt;/h4></description></item><item><title>AoC 2021 Day 21: Dicinator</title><link>https://blog.jverkamp.com/2021/12/21/aoc-2021-day-21-dicinator/</link><pubDate>Tue, 21 Dec 2021 00:00:05 +0000</pubDate><guid>https://blog.jverkamp.com/2021/12/21/aoc-2021-day-21-dicinator/</guid><description>&lt;h3 id="source-dirac-dicehttpsadventofcodecom2021day21">Source: &lt;a href="https://adventofcode.com/2021/day/21">Dirac Dice&lt;/a>&lt;/h3>
&lt;h4 id="part-1-play-a-simple-game-describe-below-with-a-loaded-d100-that-always-rolls-1-2-3--99-100-1--return-the-score-of-the-losing-player-times-the-number-of-times-the-die-was-rolled">&lt;strong>Part 1:&lt;/strong> Play a simple game (describe below) with a loaded D100 (that always rolls 1, 2, 3, &amp;hellip; 99, 100, 1, &amp;hellip;). Return the score of the losing player times the number of times the die was rolled.&lt;/h4></description></item><item><title>AoC 2021 Day 20: Enhancinator</title><link>https://blog.jverkamp.com/2021/12/20/aoc-2021-day-20-enhancinator/</link><pubDate>Mon, 20 Dec 2021 00:00:05 +0000</pubDate><guid>https://blog.jverkamp.com/2021/12/20/aoc-2021-day-20-enhancinator/</guid><description>&lt;h3 id="source-trench-maphttpsadventofcodecom2021day20">Source: &lt;a href="https://adventofcode.com/2021/day/20">Trench Map&lt;/a>&lt;/h3>
&lt;h4 id="part-1-given-a-9-1-hahahugoshortcode-s0-hbhb-update-function-take-the-pixel-and-8-surrounding-pixels-as-a-9-bit-index-into-the-function-and-a-binary-image-apply-the-function-twice-and-count-the-number-of-lit-pixels-assume-that-the-canvas-is-infinite">&lt;strong>Part 1:&lt;/strong> Given a 9-&amp;gt;1 &lt;a href="https://en.wikipedia.org/wiki/cellular%20automota">cellular automota&lt;/a> update function (take the pixel and 8 surrounding pixels as a 9-bit index into the function) and a binary image, apply the function twice and count the number of &amp;lsquo;lit&amp;rsquo; pixels. Assume that the canvas is infinite.&lt;/h4></description></item><item><title>AoC 2021 Day 19: Point Matchinator</title><link>https://blog.jverkamp.com/2021/12/19/aoc-2021-day-19-point-matchinator/</link><pubDate>Sun, 19 Dec 2021 00:00:05 +0000</pubDate><guid>https://blog.jverkamp.com/2021/12/19/aoc-2021-day-19-point-matchinator/</guid><description>&lt;h3 id="source-snailfishhttpsadventofcodecom2021day19">Source: &lt;a href="https://adventofcode.com/2021/day/19">Snailfish&lt;/a>&lt;/h3>
&lt;h4 id="part-1-you-will-be-given-a-series-of-scanners-each-of-which-will-tell-you-the-location-from-their-point-of-view-of-a-series-of-beacons-each-scanner-may-be-flipped-or-rotated-in-increments-of-90-degrees-in-any-direction-determine-where-each-scanner-and-beacon-is-by-overlaying-the-maps-with-at-least-pairwise-12-matches">&lt;strong>Part 1:&lt;/strong> You will be given a series of Scanners, each of which will tell you the location (from their point of view) of a series of Beacons. Each Scanner may be flipped or rotated in increments of 90 degrees in any direction. Determine where each Scanner and Beacon is by overlaying the maps (with at least pairwise 12 matches).&lt;/h4></description></item><item><title>AoC 2021 Day 18: Pairs of Pairs</title><link>https://blog.jverkamp.com/2021/12/18/aoc-2021-day-18-pairs-of-pairs/</link><pubDate>Sat, 18 Dec 2021 00:00:05 +0000</pubDate><guid>https://blog.jverkamp.com/2021/12/18/aoc-2021-day-18-pairs-of-pairs/</guid><description>&lt;h3 id="source-snailfishhttpsadventofcodecom2021day18">Source: &lt;a href="https://adventofcode.com/2021/day/18">Snailfish&lt;/a>&lt;/h3>
&lt;h4 id="part-1-given-the-following-definition-of-snailfish-numbers-add-a-series-of-snailfish-numbers-and-return-the-magnitude-of-the-result">&lt;strong>Part 1:&lt;/strong> Given the following definition of Snailfish numbers, add a series of Snailfish numbers and return the magnitude of the result.&lt;/h4></description></item><item><title>AoC 2021 Day 17: Pew-Pewinator</title><link>https://blog.jverkamp.com/2021/12/17/aoc-2021-day-17-pew-pewinator/</link><pubDate>Fri, 17 Dec 2021 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2021/12/17/aoc-2021-day-17-pew-pewinator/</guid><description>&lt;h3 id="source-trick-shothttpsadventofcodecom2021day17">Source: &lt;a href="https://adventofcode.com/2021/day/17">Trick Shot&lt;/a>&lt;/h3>
&lt;h4 id="part-1-simulate-a-projectile-with-an-integer-initial-velocity-x-y-air-resistance-that-tries-to-reduce-x-velocity-to-0-and-gravity-that-increases-y-velocity-by-1-each-time-given-a-target-range-find-the-highest-point-reached-by-a-projectile-that-ends-a-tick-not-one-that-crosses-over-within-the-target-area">&lt;strong>Part 1:&lt;/strong> Simulate a projectile with an integer initial velocity (x, y), air resistance that tries to reduce x-velocity to 0, and gravity that increases y-velocity by 1 each time. Given a target range, find the highest point reached by a projectile that ends a tick (not one that crosses over) within the target area.&lt;/h4></description></item><item><title>AoC 2021 Day 16: Depacketinator</title><link>https://blog.jverkamp.com/2021/12/16/aoc-2021-day-16-depacketinator/</link><pubDate>Thu, 16 Dec 2021 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2021/12/16/aoc-2021-day-16-depacketinator/</guid><description>&lt;h3 id="source-packet-decoderhttpsadventofcodecom2021day16">Source: &lt;a href="https://adventofcode.com/2021/day/16">Packet Decoder&lt;/a>&lt;/h3>
&lt;h4 id="part-1-given-a-recursive-binary-packet-definition-see-below-parse-the-given-packet-return-the-sum-of-each-packets-version">&lt;strong>Part 1:&lt;/strong> Given a recursive binary packet definition (see below), parse the given packet. Return the sum of each packet&amp;rsquo;s &lt;code>version&lt;/code>.&lt;/h4></description></item><item><title>AoC 2021 Day 15: Low Ceiling Simulator</title><link>https://blog.jverkamp.com/2021/12/15/aoc-2021-day-15-low-ceiling-simulator/</link><pubDate>Wed, 15 Dec 2021 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2021/12/15/aoc-2021-day-15-low-ceiling-simulator/</guid><description>&lt;h3 id="source-chitonhttpsadventofcodecom2021day15">Source: &lt;a href="https://adventofcode.com/2021/day/15">Chiton&lt;/a>&lt;/h3>
&lt;h4 id="part-1-given-a-grid-of-weights-find-the-minimum-path-from-top-left-to-top-right-return-the-total-weight-along-that-path">&lt;strong>Part 1:&lt;/strong> Given a grid of weights, find the minimum path from top left to top right. Return the total weight along that path.&lt;/h4></description></item><item><title>AoC 2021 Day 14: Polymerizationinator</title><link>https://blog.jverkamp.com/2021/12/14/aoc-2021-day-14-polymerizationinator/</link><pubDate>Tue, 14 Dec 2021 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2021/12/14/aoc-2021-day-14-polymerizationinator/</guid><description>&lt;h3 id="source-extended-polymerizationhttpsadventofcodecom2021day14">Source: &lt;a href="https://adventofcode.com/2021/day/14">Extended Polymerization&lt;/a>&lt;/h3>
&lt;h4 id="part-1-given-a-complete-function-fa-b---c-where-any-string-ab-becomes-acb-and-an-input-string-apply-the-function-at-the-same-time-to-every-overlapping-pair-of-letters-repeat-this-time-times-report-the-difference-in-counts-between-the-most-and-least-common-letters-in-the-final-situation">&lt;strong>Part 1:&lt;/strong> Given a complete function &lt;code>f(a, b) -&amp;gt; c&lt;/code> where any string &lt;code>ab&lt;/code> becomes &lt;code>acb&lt;/code> and an input string, apply the function at the same time to every (overlapping) pair of letters. Repeat this time times. Report the difference in counts between the most and least common letters in the final situation.&lt;/h4></description></item><item><title>AoC 2021 Day 13: Foldinator</title><link>https://blog.jverkamp.com/2021/12/13/aoc-2021-day-13-foldinator/</link><pubDate>Mon, 13 Dec 2021 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2021/12/13/aoc-2021-day-13-foldinator/</guid><description>&lt;h3 id="source-transparent-origamihttpsadventofcodecom2021day13">Source: &lt;a href="https://adventofcode.com/2021/day/13">Transparent Origami&lt;/a>&lt;/h3>
&lt;h4 id="part-1-given-a-set-of-points-and-a-sequence-of-fold-lines-where-you-either-fold-the-bottom-over-the-top-or-right-over-left-determine-how-many-points-exist-after-the-first-fold">&lt;strong>Part 1:&lt;/strong> Given a set of points and a sequence of &amp;lsquo;fold&amp;rsquo; lines (where you either fold the bottom over the top or right over left), determine how many points exist after the first fold.&lt;/h4></description></item><item><title>AoC 2021 Day 12: Submarine Spider</title><link>https://blog.jverkamp.com/2021/12/12/aoc-2021-day-12-submarine-spider/</link><pubDate>Sun, 12 Dec 2021 00:00:15 +0000</pubDate><guid>https://blog.jverkamp.com/2021/12/12/aoc-2021-day-12-submarine-spider/</guid><description>&lt;h3 id="source-passage-pathinghttpsadventofcodecom2021day12">Source: &lt;a href="https://adventofcode.com/2021/day/12">Passage Pathing&lt;/a>&lt;/h3>
&lt;h4 id="part-1-given-a-list-of-edges-in-a-bi-directional-graph-count-the-number-of-paths-from-start-to-end-such-that-nodes-named-with-lowercase-letters-are-visited-once-and-nodes-with-uppercase-letters-can-be-visited-any-number-of-times">&lt;strong>Part 1:&lt;/strong> Given a list of edges in a bi-directional graph, count the number of paths from &lt;code>start&lt;/code> to &lt;code>end&lt;/code> such that nodes named with lowercase letters are visited once, and nodes with uppercase letters can be visited any number of times.&lt;/h4></description></item><item><title>AoC 2021 Day 11: Octopus Flashinator</title><link>https://blog.jverkamp.com/2021/12/11/aoc-2021-day-11-octopus-flashinator/</link><pubDate>Sat, 11 Dec 2021 00:00:15 +0000</pubDate><guid>https://blog.jverkamp.com/2021/12/11/aoc-2021-day-11-octopus-flashinator/</guid><description>&lt;h3 id="source-dumbo-octopushttpsadventofcodecom2021day11">Source: &lt;a href="https://adventofcode.com/2021/day/11">Dumbo Octopus&lt;/a>&lt;/h3>
&lt;h4 id="part-1-simulate-a-grid-of-numbers-such-that-on-each-tick-advance-all-numbers-by-1-any-number-that-increases-over-9-will-flash-and-add-1-to-all-neighbors-recursively-but-each-cell-can-only-flash-once-and-then-reset-to-0-count-the-number-of-flashes-in-the-first-100-ticks">&lt;strong>Part 1:&lt;/strong> Simulate a grid of numbers such that on each tick: advance all numbers by 1, any number that increases over 9 will &amp;lsquo;flash&amp;rsquo; and add 1 to all neighbors (recursively, but each cell can only flash once) and then reset to 0. Count the number of flashes in the first 100 ticks.&lt;/h4></description></item><item><title>AoC 2021 Day 10: Chunkinator</title><link>https://blog.jverkamp.com/2021/12/10/aoc-2021-day-10-chunkinator/</link><pubDate>Fri, 10 Dec 2021 00:00:15 +0000</pubDate><guid>https://blog.jverkamp.com/2021/12/10/aoc-2021-day-10-chunkinator/</guid><description>&lt;h3 id="source-syntax-scoringhttpsadventofcodecom2021day10">Source: &lt;a href="https://adventofcode.com/2021/day/10">Syntax Scoring&lt;/a>&lt;/h3>
&lt;h4 id="part-1-given-a-sequence-of----and--with-nesting-allowed-find-the-first-syntax-error-where-the-wrong-closing-symbol-is-used-scoring-3-57-1197-and-25137-respectively-for-each-error-calculate-the-total-error-score">&lt;strong>Part 1:&lt;/strong> Given a sequence of () [] {}, and &amp;lt;&amp;gt; with nesting allowed. Find the first syntax error (where the wrong closing symbol is used). Scoring 3, 57, 1197, and 25137 respectively for each error, calculate the total error score.&lt;/h4></description></item><item><title>AoC 2021 Day 9: Local Minimum Deminifier</title><link>https://blog.jverkamp.com/2021/12/09/aoc-2021-day-9-local-minimum-deminifier/</link><pubDate>Thu, 09 Dec 2021 00:00:15 +0000</pubDate><guid>https://blog.jverkamp.com/2021/12/09/aoc-2021-day-9-local-minimum-deminifier/</guid><description>&lt;h3 id="source-smoke-basinhttpsadventofcodecom2021day9">Source: &lt;a href="https://adventofcode.com/2021/day/9">Smoke Basin&lt;/a>&lt;/h3>
&lt;h4 id="part-1-given-a-heightmap-find-all-local-minimums-return-the-sum-of-minimum-height--1-for-each-local-minimum">&lt;strong>Part 1:&lt;/strong> Given a heightmap, find all local minimums. Return the sum of (minimum height + 1) for each local minimum.&lt;/h4></description></item><item><title>AoC 2021 Day 8: Seven Segment Demystifier</title><link>https://blog.jverkamp.com/2021/12/08/aoc-2021-day-8-seven-segment-demystifier/</link><pubDate>Wed, 08 Dec 2021 00:00:10 +0000</pubDate><guid>https://blog.jverkamp.com/2021/12/08/aoc-2021-day-8-seven-segment-demystifier/</guid><description>&lt;h3 id="source-seven-segment-searchhttpsadventofcodecom2021day8">Source: &lt;a href="https://adventofcode.com/2021/day/8">Seven Segment Search&lt;/a>&lt;/h3>
&lt;h4 id="part-1-simulate-a-hahahugoshortcode-s0-hbhb-where-you-do-not-know-which-input-wire-controls-which-segment-given-the-wires-used-in-all-ten-digits-and-four-output-digits-count-how-many-times-1-4-7-and-8-are-outputted">&lt;strong>Part 1:&lt;/strong> Simulate a &lt;a href="https://en.wikipedia.org/wiki/seven%20segment%20displey">seven segment displey&lt;/a> where you do not know which input wire controls which segment. Given the wires used in all ten digits and four output digits, count how many times 1, 4, 7, and 8 are outputted.&lt;/h4></description></item><item><title>AoC 2021 Day 7: Brachyura Aligner</title><link>https://blog.jverkamp.com/2021/12/07/aoc-2021-day-7-brachyura-aligner/</link><pubDate>Tue, 07 Dec 2021 00:00:10 +0000</pubDate><guid>https://blog.jverkamp.com/2021/12/07/aoc-2021-day-7-brachyura-aligner/</guid><description>&lt;h3 id="source-the-treachery-of-whaleshttpsadventofcodecom2021day7">Source: &lt;a href="https://adventofcode.com/2021/day/7">The Treachery of Whales&lt;/a>&lt;/h3>
&lt;h4 id="part-1-given-a-list-of-numbers-find-the-minimum-integer-i-such-the-sum-difference-of-each-number-and-i-is-minimized">&lt;strong>Part 1:&lt;/strong> Given a list of numbers, find the minimum integer &lt;code>I&lt;/code> such the sum difference of each number and I is minimized.&lt;/h4></description></item><item><title>AoC 2021 Day 6: We All Glow Down Here</title><link>https://blog.jverkamp.com/2021/12/06/aoc-2021-day-6-we-all-glow-down-here/</link><pubDate>Mon, 06 Dec 2021 00:00:10 +0000</pubDate><guid>https://blog.jverkamp.com/2021/12/06/aoc-2021-day-6-we-all-glow-down-here/</guid><description>&lt;h3 id="source-latternfishhttpsadventofcodecom2021day6">Source: &lt;a href="https://adventofcode.com/2021/day/6">Latternfish&lt;/a>&lt;/h3>
&lt;h4 id="part-1-simulate-a-population-of-lanternfish-each-fish-is-immortal-starts-having-children-after-9-days-and-has-another-child-after-7-more-days-calculate-the-number-of-fish-after-80-days">&lt;strong>Part 1:&lt;/strong> Simulate a population of lanternfish. Each fish is immortal, starts having children after 9 days, and has another child after 7 more days. Calculate the number of fish after 80 days.&lt;/h4></description></item><item><title>AoC 2021 Day 5: Linear Avoidinator</title><link>https://blog.jverkamp.com/2021/12/05/aoc-2021-day-5-linear-avoidinator/</link><pubDate>Sun, 05 Dec 2021 00:00:10 +0000</pubDate><guid>https://blog.jverkamp.com/2021/12/05/aoc-2021-day-5-linear-avoidinator/</guid><description>&lt;h3 id="source-hydrothermal-venturehttpsadventofcodecom2021day5">Source: &lt;a href="https://adventofcode.com/2021/day/5">Hydrothermal Venture&lt;/a>&lt;/h3>
&lt;h4 id="part-1-given-a-list-of-lines-find-the-number-of-integer-points-which-are-covered-by-more-than-one-line-ignore-non-vertical-and-non-horizontal-lines">&lt;strong>Part 1:&lt;/strong> Given a list of lines, find the number of integer points which are covered by more than one line (ignore non-vertical and non-horizontal lines).&lt;/h4>
&lt;p>Okay. Start with the data structures:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#a6e22e">@dataclass&lt;/span>(frozen&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#66d9ef">True&lt;/span>)
&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Point&lt;/span>:
x: int
y: int
&lt;span style="color:#a6e22e">@dataclass&lt;/span>(frozen&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#66d9ef">True&lt;/span>)
&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Line&lt;/span>:
p1: Point
p2: Point
&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">is_vertical&lt;/span>(self):
&lt;span style="color:#66d9ef">return&lt;/span> self&lt;span style="color:#f92672">.&lt;/span>p1&lt;span style="color:#f92672">.&lt;/span>x &lt;span style="color:#f92672">==&lt;/span> self&lt;span style="color:#f92672">.&lt;/span>p2&lt;span style="color:#f92672">.&lt;/span>x
&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">is_horizontal&lt;/span>(self):
&lt;span style="color:#66d9ef">return&lt;/span> self&lt;span style="color:#f92672">.&lt;/span>p1&lt;span style="color:#f92672">.&lt;/span>y &lt;span style="color:#f92672">==&lt;/span> self&lt;span style="color:#f92672">.&lt;/span>p2&lt;span style="color:#f92672">.&lt;/span>y
&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">is_orthagonal&lt;/span>(self):
&lt;span style="color:#66d9ef">return&lt;/span> self&lt;span style="color:#f92672">.&lt;/span>is_vertical() &lt;span style="color:#f92672">or&lt;/span> self&lt;span style="color:#f92672">.&lt;/span>is_horizontal()
&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">points&lt;/span>(self):
&lt;span style="color:#75715e"># TODO: handle lines that aren&amp;#39;t vertical, horizontal, or diagonal&lt;/span>
xd &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> self&lt;span style="color:#f92672">.&lt;/span>p1&lt;span style="color:#f92672">.&lt;/span>x &lt;span style="color:#f92672">==&lt;/span> self&lt;span style="color:#f92672">.&lt;/span>p2&lt;span style="color:#f92672">.&lt;/span>x &lt;span style="color:#66d9ef">else&lt;/span> (&lt;span style="color:#ae81ff">1&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> self&lt;span style="color:#f92672">.&lt;/span>p1&lt;span style="color:#f92672">.&lt;/span>x &lt;span style="color:#f92672">&amp;lt;&lt;/span> self&lt;span style="color:#f92672">.&lt;/span>p2&lt;span style="color:#f92672">.&lt;/span>x &lt;span style="color:#66d9ef">else&lt;/span> &lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>)
yd &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> self&lt;span style="color:#f92672">.&lt;/span>p1&lt;span style="color:#f92672">.&lt;/span>y &lt;span style="color:#f92672">==&lt;/span> self&lt;span style="color:#f92672">.&lt;/span>p2&lt;span style="color:#f92672">.&lt;/span>y &lt;span style="color:#66d9ef">else&lt;/span> (&lt;span style="color:#ae81ff">1&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> self&lt;span style="color:#f92672">.&lt;/span>p1&lt;span style="color:#f92672">.&lt;/span>y &lt;span style="color:#f92672">&amp;lt;&lt;/span> self&lt;span style="color:#f92672">.&lt;/span>p2&lt;span style="color:#f92672">.&lt;/span>y &lt;span style="color:#66d9ef">else&lt;/span> &lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>)
p &lt;span style="color:#f92672">=&lt;/span> self&lt;span style="color:#f92672">.&lt;/span>p1
&lt;span style="color:#66d9ef">while&lt;/span> p &lt;span style="color:#f92672">!=&lt;/span> self&lt;span style="color:#f92672">.&lt;/span>p2:
&lt;span style="color:#66d9ef">yield&lt;/span> p
p &lt;span style="color:#f92672">=&lt;/span> Point(p&lt;span style="color:#f92672">.&lt;/span>x &lt;span style="color:#f92672">+&lt;/span> xd, p&lt;span style="color:#f92672">.&lt;/span>y &lt;span style="color:#f92672">+&lt;/span> yd)
&lt;span style="color:#66d9ef">yield&lt;/span> p
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Dataclasses are great. They give you constructors and a bunch of other things for free. On top of that, if you specify &lt;code>frozen=True&lt;/code>, making them immutable, you also get &lt;code>hashable&lt;/code> types for free (which I&amp;rsquo;ll use in the problem).&lt;/p>
&lt;p>Perhaps the most interesting bit here is the function that will iterate through the &lt;code>points&lt;/code> in a &lt;code>List&lt;/code>. Specifically, it will figure out the x and y delta (&lt;code>xd&lt;/code> and &lt;code>yd&lt;/code>) and repeatedly add that until you hit the end point.&lt;/p>
&lt;p>&lt;strong>Note:&lt;/strong> this only works for lines that are vertical, horizontal, or diagonal (at 45 degrees). Anything else needs a better &lt;a href="https://en.wikipedia.org/wiki/line%20drawing%20algorithm">line drawing algorithm&lt;/a> (of which there are a few). If we need it, I&amp;rsquo;ll implement it.&lt;/p>
&lt;p>Next, use that to parse:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">parse&lt;/span>(file: TextIO) &lt;span style="color:#f92672">-&amp;gt;&lt;/span> List[Line]:
result &lt;span style="color:#f92672">=&lt;/span> []
&lt;span style="color:#66d9ef">for&lt;/span> line &lt;span style="color:#f92672">in&lt;/span> file:
x1, y1, x2, y2 &lt;span style="color:#f92672">=&lt;/span> [int(v) &lt;span style="color:#66d9ef">for&lt;/span> v &lt;span style="color:#f92672">in&lt;/span> line&lt;span style="color:#f92672">.&lt;/span>replace(&lt;span style="color:#e6db74">&amp;#39; -&amp;gt; &amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;,&amp;#39;&lt;/span>)&lt;span style="color:#f92672">.&lt;/span>split(&lt;span style="color:#e6db74">&amp;#39;,&amp;#39;&lt;/span>)]
result&lt;span style="color:#f92672">.&lt;/span>append(Line(Point(x1, y1), Point(x2, y2)))
&lt;span style="color:#66d9ef">return&lt;/span> result
&lt;/code>&lt;/pre>&lt;/div>&lt;p>The input format is &lt;code>x1,y1 -&amp;gt; x2,y2&lt;/code>, but it&amp;rsquo;s easier to split and convert if we do it all directly. There are a few other ways we could have done this: splitting on anything non-numeric or using a regular expression / something else for parsing directly. But I think this is clear enough.&lt;/p>
&lt;p>And with all that, the problem is actually pretty short:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">part1&lt;/span>(file: typer&lt;span style="color:#f92672">.&lt;/span>FileText):
lines &lt;span style="color:#f92672">=&lt;/span> parse(file)
counter: MutableMapping[Point, int] &lt;span style="color:#f92672">=&lt;/span> collections&lt;span style="color:#f92672">.&lt;/span>Counter()
&lt;span style="color:#66d9ef">for&lt;/span> line &lt;span style="color:#f92672">in&lt;/span> lines:
&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#f92672">not&lt;/span> line&lt;span style="color:#f92672">.&lt;/span>is_orthagonal():
&lt;span style="color:#66d9ef">continue&lt;/span>
&lt;span style="color:#66d9ef">for&lt;/span> point &lt;span style="color:#f92672">in&lt;/span> line&lt;span style="color:#f92672">.&lt;/span>points():
counter[point] &lt;span style="color:#f92672">+=&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>
print(sum(&lt;span style="color:#ae81ff">1&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> count &lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span> &lt;span style="color:#66d9ef">else&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#66d9ef">for&lt;/span> point, count &lt;span style="color:#f92672">in&lt;/span> counter&lt;span style="color:#f92672">.&lt;/span>items()))
&lt;/code>&lt;/pre>&lt;/div>&lt;p>We&amp;rsquo;ll use the built in &lt;code>collections.Counter&lt;/code> datatype, since that&amp;rsquo;s exactly what we&amp;rsquo;re doing: counting things. Then just iterate over every line, skip the non-orthagonal ones, iterate over every point, and count them up. At the end, print the number that we saw more than once. Et voila.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ python3 linear-avoidinator.py part1 input.txt
&lt;span style="color:#ae81ff">5632&lt;/span>
&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>AoC 2021 Day 4: His Name Oh</title><link>https://blog.jverkamp.com/2021/12/04/aoc-2021-day-4-his-name-oh/</link><pubDate>Sat, 04 Dec 2021 00:00:10 +0000</pubDate><guid>https://blog.jverkamp.com/2021/12/04/aoc-2021-day-4-his-name-oh/</guid><description>&lt;h3 id="source-giant-squidhttpsadventofcodecom2021day4">Source: &lt;a href="https://adventofcode.com/2021/day/4">Giant Squid&lt;/a>&lt;/h3>
&lt;h4 id="part-1-given-a-set-of-bingo-boards-and-a-list-of-numbers-find-the-first-board-to-win-multiply-the-sum-of-the-un-called-numbers-on-that-board-times-the-last-number-called">&lt;strong>Part 1:&lt;/strong> Given a set of bingo boards and a list of numbers, find the first board to win. Multiply the sum of the un-called numbers on that board times the last number called.&lt;/h4></description></item><item><title>AoC 2021 Day 3: Binary Contraption</title><link>https://blog.jverkamp.com/2021/12/03/aoc-2021-day-3-binary-contraption/</link><pubDate>Fri, 03 Dec 2021 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2021/12/03/aoc-2021-day-3-binary-contraption/</guid><description>&lt;h3 id="source-binary-diagnostichttpsadventofcodecom2021day3">Source: &lt;a href="https://adventofcode.com/2021/day/3">Binary Diagnostic&lt;/a>&lt;/h3>
&lt;h4 id="part-1-given-a-list-of-binary-numbers-calculate-gamma-such-that-each-bit-is-the-most-common-bit-in-that-position-in-the-input-and-epsilon-which-is-the-binary-inverse-of-gamma-return-the-product">&lt;strong>Part 1:&lt;/strong> Given a list of binary numbers, calculate gamma such that each bit is the most common bit in that position in the input and epsilon which is the binary inverse of gamma. Return the product.&lt;/h4></description></item><item><title>AoC 2021 Day 2: Submarine Simulator</title><link>https://blog.jverkamp.com/2021/12/02/aoc-2021-day-2-submarine-simulator/</link><pubDate>Thu, 02 Dec 2021 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2021/12/02/aoc-2021-day-2-submarine-simulator/</guid><description>&lt;h3 id="source-divehttpsadventofcodecom2021day2">Source: &lt;a href="https://adventofcode.com/2021/day/2">Dive!&lt;/a>&lt;/h3>
&lt;h4 id="part-1-simulate-a-submarine-with-3-commands-forward-n-down-n-and-up-n-that-move-forward-increase-depth-and-decrease-depth-in-that-order-calculate-the-product-of-the-final-position-and-depth">&lt;strong>Part 1:&lt;/strong> Simulate a submarine with 3 commands: &lt;code>forward N&lt;/code>, &lt;code>down N&lt;/code>, and &lt;code>up N&lt;/code> that move forward, increase depth, and decrease depth in that order. Calculate the product of the final position and depth.&lt;/h4></description></item><item><title>AoC 2021 Day 1: Depth Finder</title><link>https://blog.jverkamp.com/2021/12/01/aoc-2021-day-1-depth-finder/</link><pubDate>Wed, 01 Dec 2021 00:00:03 +0000</pubDate><guid>https://blog.jverkamp.com/2021/12/01/aoc-2021-day-1-depth-finder/</guid><description>&lt;h3 id="source-depth-finderhttpsadventofcodecom2021day1">Source: &lt;a href="https://adventofcode.com/2021/day/1">Depth Finder&lt;/a>&lt;/h3>
&lt;h4 id="part-1-given-a-list-of-numbers-count-how-many-times-sequential-numbers-increase">&lt;strong>Part 1:&lt;/strong> Given a list of numbers, count how many times sequential numbers increase.&lt;/h4></description></item><item><title>Advent of Code 2021</title><link>https://blog.jverkamp.com/2021/12/01/advent-of-code-2021/</link><pubDate>Wed, 01 Dec 2021 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2021/12/01/advent-of-code-2021/</guid><description>&lt;p>Been a while since I&amp;rsquo;ve done an advent of code! I&amp;rsquo;ll probably backfill a few years eventually, but for now, let&amp;rsquo;s just write some code!&lt;/p>
&lt;p>As always, these problems are wonderful to try to solve yourself. If you agree, &lt;em>stop reading now&lt;/em>. This post isn&amp;rsquo;t going anywhere.&lt;/p>
&lt;p>If you&amp;rsquo;d like to see the full form of any particular solution, you can do so on GitHub (including previous years and possibly some I haven&amp;rsquo;t written up yet): &lt;a href="https://github.com/jpverkamp/advent-of-code">jpverkamp/advent-of-code&lt;/a>&lt;/p></description></item><item><title>Splitting Images</title><link>https://blog.jverkamp.com/2021/08/10/splitting-images/</link><pubDate>Tue, 10 Aug 2021 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2021/08/10/splitting-images/</guid><description>&lt;p>I recently came across a problem where I had a single image with a transparent background containing multiple images that I wanted to split into their component parts. For example, split this:&lt;/p>
&lt;figure class="border">&lt;img src="https://blog.jverkamp.com/embeds/2021/hi.png"/>
&lt;/figure>
&lt;p>Into these:&lt;/p>
&lt;p>&lt;figure class="border">&lt;img src="https://blog.jverkamp.com/embeds/2021/hi_1.png"/>
&lt;/figure>
&lt;figure class="border">&lt;img src="https://blog.jverkamp.com/embeds/2021/hi_2.png"/>
&lt;/figure>
&lt;figure class="border">&lt;img src="https://blog.jverkamp.com/embeds/2021/hi_3.png"/>
&lt;/figure>
&lt;figure class="border">&lt;img src="https://blog.jverkamp.com/embeds/2021/hi_4.png"/>
&lt;/figure>
&lt;figure class="border">&lt;img src="https://blog.jverkamp.com/embeds/2021/hi_5.png"/>
&lt;/figure>
&lt;/p></description></item><item><title>Ordering Board Game Geek GeekLists by Rank</title><link>https://blog.jverkamp.com/2021/06/28/ordering-board-game-geek-geeklists-by-rank/</link><pubDate>Mon, 28 Jun 2021 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2021/06/28/ordering-board-game-geek-geeklists-by-rank/</guid><description>&lt;p>A quick script.&lt;/p>
&lt;p>I play a lot of board games. With the whole COVID-19 mess, I&amp;rsquo;ve been playing a lot on &lt;a href="https://boardgamearena.com/">Board Game Arena&lt;/a>, which is a wonderful site. But one thing that&amp;rsquo;s a bit lacking is having ratings / metadata about games to great games I&amp;rsquo;ve just not heard about before. Where can you get lots of that data? &lt;a href="https://boardgamegeek.com/">Board Game Geek&lt;/a>!&lt;/p>
&lt;p>The problem though, is merging the two. So, how do we do it? Well, this time around, I&amp;rsquo;m going to start with &lt;a href="https://boardgamegeek.com/geeklist/252354/list-games-board-game-arena">this GeekList&lt;/a> that someone else maintains of BGA games on BGG. Which has the games, but no ranks. And apparently there are no ways to rank those by BGG (for some reason). But that&amp;rsquo;s easy when you know a bit of scripting!&lt;/p></description></item><item><title>Categorizing r/Fantasy Book Bingo Books</title><link>https://blog.jverkamp.com/2021/06/24/categorizing-r/fantasy-book-bingo-books/</link><pubDate>Thu, 24 Jun 2021 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2021/06/24/categorizing-r/fantasy-book-bingo-books/</guid><description>&lt;p>I&amp;rsquo;ve been working through the &lt;a href="https://blog.jverkamp.com/2021/04/01/2021-book-bingo/">r/Fantasy 2021 Book Bingo&lt;/a> this year:&lt;/p>
&lt;h1>2021 Book Bingo&lt;/h1>
&lt;table class="bingo">&lt;tr>&lt;td>
&lt;p>5 SFF Short Stories (Hard: An entire anthology or collection)&lt;/p>&lt;a href="https://blog.jverkamp.com/2021/03/26/attack-on-titan-vol.-1/">
&lt;figure>
&lt;img src="https://blog.jverkamp.com/embeds/books/attack-on-titan-vol-1.jpg">
&lt;figcaption>Attack on Titan, Vol. 1&lt;/figcaption>
&lt;/figure>
&lt;/a>&lt;p>(Hard Mode)&lt;/p>&lt;/td>&lt;td>
&lt;p>Set in Asia (Hard: by an Asian author)&lt;/p>&lt;a href="https://blog.jverkamp.com/2022/03/08/the-poppy-war/">
&lt;figure>
&lt;img src="https://blog.jverkamp.com/embeds/books/the-poppy-war.jpg">
&lt;figcaption>The Poppy War&lt;/figcaption>
&lt;/figure>
&lt;/a>&lt;p>(Hard Mode)&lt;/p>&lt;/td>&lt;td>
&lt;p>&lt;a href="https://www.reddit.com/r/Fantasy/wiki/index/a-to-z-genre-guide">r/Fantasy A to Z Genre Guide&lt;/a> (Hard: by a BIPOC author)&lt;/p>&lt;/td>&lt;td>
&lt;p>Found Family (Hard: featuring an LGBTQ+ character)&lt;/p>&lt;a href="https://blog.jverkamp.com/2021/07/18/the-house-in-the-cerulean-sea/">
&lt;figure>
&lt;img src="https://blog.jverkamp.com/embeds/books/the-house-in-the-cerulean-sea.jpg">
&lt;figcaption>The House in the Cerulean Sea&lt;/figcaption>
&lt;/figure>
&lt;/a>&lt;p>(Hard Mode)&lt;/p>&lt;/td>&lt;td>
&lt;p>First person POV (Hard: Multiple)&lt;/p>&lt;/td>&lt;/tr>&lt;tr>&lt;td>
&lt;p>r/Fantasy Book Club (Hard: with participation)&lt;/p>&lt;/td>&lt;td>
&lt;p>New to you author (Hard: haven&amp;rsquo;t heard much about)&lt;/p>&lt;/td>&lt;td>
&lt;p>Gothic Fantasy (Hard: not in the &lt;a href="https://bookriot.com/gothic-fantasy/">Book Riot article&lt;/a>)&lt;/p>&lt;a href="https://blog.jverkamp.com/2021/06/09/mexican-gothic/">
&lt;figure>
&lt;img src="https://blog.jverkamp.com/embeds/books/mexican-gothic.jpg">
&lt;figcaption>Mexican Gothic&lt;/figcaption>
&lt;/figure>
&lt;/a>&lt;p>(Hard Mode)&lt;/p>&lt;/td>&lt;td>
&lt;p>Backlist book (Hard: published before 2000)&lt;/p>&lt;/td>&lt;td>
&lt;p>Revenge-seeking character (Hard: revenge as the major book plot)&lt;/p>&lt;a href="https://blog.jverkamp.com/2021/10/01/red-sister/">
&lt;figure>
&lt;img src="https://blog.jverkamp.com/embeds/books/red-sister.jpg">
&lt;figcaption>Red Sister&lt;/figcaption>
&lt;/figure>
&lt;/a>&lt;p>(Hard Mode)&lt;/p>&lt;/td>&lt;/tr>&lt;tr>&lt;td>
&lt;p>Mystery plot (Hard: not primary world urban fantasy)&lt;/p>&lt;a href="https://blog.jverkamp.com/2021/06/19/six-wakes/">
&lt;figure>
&lt;img src="https://blog.jverkamp.com/embeds/books/six-wakes.jpg">
&lt;figcaption>Six Wakes&lt;/figcaption>
&lt;/figure>
&lt;/a>&lt;p>(Hard Mode)&lt;/p>&lt;/td>&lt;td>
&lt;p>Comfort read (Hard: that isn&amp;rsquo;t a reread)&lt;/p>&lt;a href="https://blog.jverkamp.com/2021/04/13/wild-sign/">
&lt;figure>
&lt;img src="https://blog.jverkamp.com/embeds/books/wild-sign.jpg">
&lt;figcaption>Wild Sign&lt;/figcaption>
&lt;/figure>
&lt;/a>&lt;p>(Hard Mode)&lt;/p>&lt;/td>&lt;td>
&lt;p>Debut novel (Hard: published in 2021)&lt;/p>&lt;a href="https://blog.jverkamp.com/2021/04/26/tales-of-nezura-book-1-the-zevolra/">
&lt;figure>
&lt;img src="https://blog.jverkamp.com/embeds/books/tales-of-nezura-book-1-the-zevolra.jpg">
&lt;figcaption>Tales of Nezura: Book 1: The Zevolra&lt;/figcaption>
&lt;/figure>
&lt;/a>&lt;p>(Hard Mode)&lt;/p>&lt;/td>&lt;td>
&lt;p>Cat squasher (500+ pages; Hard: 800+ pages)&lt;/p>&lt;a href="https://blog.jverkamp.com/2021/10/14/hellblazer-vol.-1-original-sins/">
&lt;figure>
&lt;img src="https://blog.jverkamp.com/embeds/books/hellblazer-vol-1-original-sins.jpg">
&lt;figcaption>Hellblazer, Vol. 1: Original Sins&lt;/figcaption>
&lt;/figure>
&lt;/a>&lt;p>(Hard Mode)&lt;/p>&lt;/td>&lt;td>
&lt;p>SFF-related nonfiction (Hard: published in the last 5 years)&lt;/p>&lt;a href="https://blog.jverkamp.com/2022/03/07/daemon-voices/">
&lt;figure>
&lt;img src="https://blog.jverkamp.com/embeds/books/daemon-voices.jpg">
&lt;figcaption>Daemon Voices&lt;/figcaption>
&lt;/figure>
&lt;/a>&lt;p>(Hard Mode)&lt;/p>&lt;/td>&lt;/tr>&lt;tr>&lt;td>
&lt;p>Latinx or Latin American author (Hard: with fewer than 1000 Goodreads ratings)&lt;/p>&lt;/td>&lt;td>
&lt;p>Self published (Hard: with fewer than 50 Goodreads ratings)&lt;/p>&lt;a href="https://blog.jverkamp.com/2021/04/26/tales-of-nezura-book-1-the-zevolra/">
&lt;figure>
&lt;img src="https://blog.jverkamp.com/embeds/books/tales-of-nezura-book-1-the-zevolra.jpg">
&lt;figcaption>Tales of Nezura: Book 1: The Zevolra&lt;/figcaption>
&lt;/figure>
&lt;/a>&lt;p>(Hard Mode)&lt;/p>&lt;/td>&lt;td>
&lt;p>Forest setting (Hard: for the entire book)&lt;/p>&lt;a href="https://blog.jverkamp.com/2021/07/01/annihilation/">
&lt;figure>
&lt;img src="https://blog.jverkamp.com/embeds/books/annihilation.jpg">
&lt;figcaption>Annihilation&lt;/figcaption>
&lt;/figure>
&lt;/a>&lt;p>(Hard Mode)&lt;/p>&lt;/td>&lt;td>
&lt;p>Genre mashup (Hard: of three or more genres)&lt;/p>&lt;a href="https://blog.jverkamp.com/2021/07/13/gideon-the-ninth/">
&lt;figure>
&lt;img src="https://blog.jverkamp.com/embeds/books/gideon-the-ninth.jpg">
&lt;figcaption>Gideon the Ninth&lt;/figcaption>
&lt;/figure>
&lt;/a>&lt;p>(Hard Mode)&lt;/p>&lt;/td>&lt;td>
&lt;p>Has chapter titles of more than one word (Hard: for every chapter)&lt;/p>&lt;a href="https://blog.jverkamp.com/2021/04/21/the-midnight-library/">
&lt;figure>
&lt;img src="https://blog.jverkamp.com/embeds/books/the-midnight-library.jpg">
&lt;figcaption>The Midnight Library&lt;/figcaption>
&lt;/figure>
&lt;/a>&lt;p>(Hard Mode)&lt;/p>&lt;/td>&lt;/tr>&lt;tr>&lt;td>
&lt;p>___ of ___ (Hard: and ___)&lt;/p>&lt;a href="https://blog.jverkamp.com/2021/12/08/an-alchemy-of-masques-and-mirrors/">
&lt;figure>
&lt;img src="https://blog.jverkamp.com/embeds/books/an-alchemy-of-masques-and-mirrors.jpg">
&lt;figcaption>An Alchemy of Masques and Mirrors&lt;/figcaption>
&lt;/figure>
&lt;/a>&lt;p>(Hard Mode)&lt;/p>&lt;/td>&lt;td>
&lt;p>First contact (Hard: that doesn&amp;rsquo;t lead to war)&lt;/p>&lt;a href="https://blog.jverkamp.com/2021/06/15/project-hail-mary/">
&lt;figure>
&lt;img src="https://blog.jverkamp.com/embeds/books/project-hail-mary.jpg">
&lt;figcaption>Project Hail Mary&lt;/figcaption>
&lt;/figure>
&lt;/a>&lt;p>(Hard Mode)&lt;/p>&lt;/td>&lt;td>
&lt;p>Trans or Nonbinary (Hard: protagonist)&lt;/p>&lt;/td>&lt;td>
&lt;p>Debut author (Hard: with an AMA)&lt;/p>&lt;/td>&lt;td>
&lt;p>Witches (Hard: as the main protagonist)&lt;/p>&lt;a href="https://blog.jverkamp.com/2021/04/11/a-great-and-terrible-beauty/">
&lt;figure>
&lt;img src="https://blog.jverkamp.com/embeds/books/a-great-and-terrible-beauty.jpg">
&lt;figcaption>A Great and Terrible Beauty&lt;/figcaption>
&lt;/figure>
&lt;/a>&lt;p>(Hard Mode)&lt;/p>&lt;/td>&lt;/tr>&lt;/table></description></item><item><title>Partitioning a Linked List</title><link>https://blog.jverkamp.com/2021/04/20/partitioning-a-linked-list/</link><pubDate>Tue, 20 Apr 2021 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2021/04/20/partitioning-a-linked-list/</guid><description>&lt;p>One more fairly standard tech interview problem (for better or for worse, you&amp;rsquo;re likely to see one of these if you go for a programming job):&lt;/p>
&lt;blockquote>
&lt;p>Given a &lt;a href="https://en.wikipedia.org/wiki/linked%20list">linked list&lt;/a> and an element &lt;code>x&lt;/code>. Partition the list so that all elements less than &lt;code>x&lt;/code> are before elements greater than or equal to &lt;code>x&lt;/code>, but do not otherwise change the order of the elements.&lt;/p>
&lt;/blockquote></description></item><item><title>Dynamic Programming over a Matrix</title><link>https://blog.jverkamp.com/2021/04/13/dynamic-programming-over-a-matrix/</link><pubDate>Tue, 13 Apr 2021 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2021/04/13/dynamic-programming-over-a-matrix/</guid><description>Another LeetCode problem.
Given an MxN matrix of numbers, find the longest path of strictly increasing numbers.
So for example in this matrix:
994 668 211 You can start with the 1 in the bottom center, go left to the two, then up to the 6, and 9. That&amp;rsquo;s the longest path, so return a 4.
In this 3x3 case, it&amp;rsquo;s really easy to just brute force.</description></item><item><title>Phone Words--In English!</title><link>https://blog.jverkamp.com/2021/04/09/phone-words-in-english/</link><pubDate>Fri, 09 Apr 2021 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2021/04/09/phone-words-in-english/</guid><description>Okay, let&amp;rsquo;s take this one step further. Rather than generating just phone words, let&amp;rsquo;s actually generate phone words. Someone has provided a list of words in English as a package, so we&amp;rsquo;ll add a filter to add that to our comprehension:
from english_words import english_words_set def letterCombinations(self, digits: str) -&amp;gt; List[str]: if not digits: return [] letters = { &amp;#39;1&amp;#39;: &amp;#39;&amp;#39;, &amp;#39;2&amp;#39;: &amp;#39;abc&amp;#39;, &amp;#39;3&amp;#39;: &amp;#39;def&amp;#39;, &amp;#39;4&amp;#39;: &amp;#39;ghi&amp;#39;, &amp;#39;5&amp;#39;: &amp;#39;jkl&amp;#39;, &amp;#39;6&amp;#39;: &amp;#39;mno&amp;#39;, &amp;#39;7&amp;#39;: &amp;#39;pqrs&amp;#39;, &amp;#39;8&amp;#39;: &amp;#39;tuv&amp;#39;, &amp;#39;9&amp;#39;: &amp;#39;wxyz&amp;#39;, &amp;#39;0&amp;#39;: &amp;#39; &amp;#39;, } return [ word for product in itertools.</description></item><item><title>Phone Words</title><link>https://blog.jverkamp.com/2021/04/06/phone-words/</link><pubDate>Tue, 06 Apr 2021 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2021/04/06/phone-words/</guid><description>&lt;p>Working through a few problems on &lt;a href="https://leetcode.com/">LeetCode&lt;/a>. I haven&amp;rsquo;t quite decided what I think of the site, but it&amp;rsquo;s a fun way to play with simple algorithms. Figured I might as well write up any I find interesting.&lt;/p>
&lt;p>First interesting problem:&lt;/p>
&lt;blockquote>
&lt;p>Given a standard lettered keypad, generate all words from a given phone number.&lt;/p>
&lt;/blockquote>
&lt;figure>&lt;img src="https://blog.jverkamp.com/embeds/2021/keypad.png"/>
&lt;/figure></description></item><item><title>yt-cast: Generating podcasts from YouTube URLs</title><link>https://blog.jverkamp.com/2021/01/05/yt-cast-generating-podcasts-from-youtube-urls/</link><pubDate>Tue, 05 Jan 2021 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2021/01/05/yt-cast-generating-podcasts-from-youtube-urls/</guid><description>&lt;p>Today&amp;rsquo;s goal: Turn a collection of YouTube links into a podcast.&lt;/p>
&lt;p>Start with a &lt;code>config.json&lt;/code> like this:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-json" data-lang="json">{
&lt;span style="color:#f92672">&amp;#34;brandon-sanderson&amp;#34;&lt;/span>: [
&lt;span style="color:#e6db74">&amp;#34;https://www.youtube.com/watch?v=H4lWbkERlxo&amp;amp;list=PLSH_xM-KC3ZuOZayK68JAAjj5W9ShnFVC&amp;#34;&lt;/span>,
&lt;span style="color:#e6db74">&amp;#34;https://www.youtube.com/watch?v=YyaC7NmPsc0&amp;amp;list=PLSH_xM-KC3ZtjKTR2z8rPWxv1pP6bOVzZ&amp;#34;&lt;/span>,
&lt;span style="color:#e6db74">&amp;#34;https://www.youtube.com/watch?v=o3V0Zok_kT0&amp;amp;list=PLSH_xM-KC3ZuteHw3G1ZrCDWQrAVgO0ER&amp;#34;&lt;/span>
]
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>And it will automatically download all referenced YouTube videos, convert them to MP3 (both using &lt;a href="https://ytdl-org.github.io/youtube-dl/index.html">youtube-dl&lt;/a>), and serve an RSS feed that&amp;rsquo;s compatible with most podcast programs.&lt;/p>
&lt;p>Tested URLs include:&lt;/p>
&lt;ul>
&lt;li>Playlist URLs (like the above)&lt;/li>
&lt;li>Single video URLs&lt;/li>
&lt;li>Channel URLs&lt;/li>
&lt;/ul>
&lt;p>Most youtube URLs should work though.&lt;/p></description></item><item><title>Extending my EC2 script</title><link>https://blog.jverkamp.com/2020/08/11/extending-my-ec2-script/</link><pubDate>Tue, 11 Aug 2020 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2020/08/11/extending-my-ec2-script/</guid><description>&lt;p>Another quick post.&lt;/p>
&lt;p>What feels like a lifetime ago, I &lt;a href="https://blog.jverkamp.com/2015/10/30/finding-ec2-instances-by-tag/">wrote a post&lt;/a> about finding &lt;code>ec2&lt;/code> instances by name. I honestly use that script just about every day, mostly for automatically finding instances to SSH to (a la &lt;a href="https://blog.jverkamp.com/2017/12/18/ssh-config-proxycommand-tricks/">SSH config tricks&lt;/a>). But there are a few other quick things I&amp;rsquo;ve done with it:&lt;/p>
&lt;ul>
&lt;li>&lt;code>ec2-script&lt;/code> - Run a script on all instances of a given name&lt;/li>
&lt;li>&lt;code>ec2-disk&lt;/code> - A specialization of &lt;code>ec2-script&lt;/code> to check main disk usage&lt;/li>
&lt;li>&lt;code>terminate&lt;/code> - A script that I use with &lt;code>ec2&lt;/code> to terminate instances from the command line&lt;/li>
&lt;li>&lt;code>ec2-cycle&lt;/code> - Slow cycle a given set of &lt;code>ec2&lt;/code> instances by terminating so many per minute&lt;/li>
&lt;/ul>
&lt;p>All of which are included in my &lt;a href="https://github.com/jpverkamp/dotfiles/tree/master/bin">dotfiles&lt;/a>.&lt;/p></description></item><item><title>An SPF DNS Server</title><link>https://blog.jverkamp.com/2020/07/16/an-spf-dns-server/</link><pubDate>Thu, 16 Jul 2020 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2020/07/16/an-spf-dns-server/</guid><description>&lt;p>The &lt;a href="https://en.wikipedia.org/wiki/Sender%20Policy%20Framework">Sender Policy Framework&lt;/a> is one of those things that&amp;rsquo;s really powerful and useful to help prevent phishing and email spam, but can be a royal pain to work with. Specifically, SPF is a series of DNS TXT records&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup> with a specific format that can be looked up by any email service to verify that an email was sent by a server that should be authorized to send email on your behalf. For example&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#e6db74">&amp;#34;v=spf1 ip4:192.0.2.0/24 ip4:198.51.100.123 a -all&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>&lt;code>v=spf1&lt;/code> - tells the client this is an SPF record and should always start the record&lt;/li>
&lt;li>&lt;code>{key}[:{value}]?&lt;/code> - one of many different key/value pairs that can define the record
&lt;ul>
&lt;li>in the case above a &lt;code>ip4&lt;/code> key species an &lt;a href="https://en.wikipedia.org/wiki/IPv4">IPv4&lt;/a> address range that can send emails on your behalf (the value can be optional)&lt;/li>
&lt;li>the &lt;code>a&lt;/code> above is another special case where if the sender domain (&lt;code>jp@example.com&lt;/code> would be &lt;code>example.com&lt;/code>) resolves via a &lt;code>DNS A&lt;/code> record to the server that sent the email, it&amp;rsquo;s allows&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>-all&lt;/code> is a fallthrough case meaning &amp;lsquo;fail all that didn&amp;rsquo;t match a previous case&lt;/li>
&lt;/ul>
&lt;p>There are a number of other cases, but we&amp;rsquo;ll get to the other interesting ones in a bit.&lt;/p></description></item><item><title>Directly monitoring Sidekiq in Redis</title><link>https://blog.jverkamp.com/2020/07/14/directly-monitoring-sidekiq-in-redis/</link><pubDate>Tue, 14 Jul 2020 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2020/07/14/directly-monitoring-sidekiq-in-redis/</guid><description>&lt;p>Another thing that came up recently: we have many (many) &lt;a href="https://github.com/mperham/sidekiq">sidekiq&lt;/a> queues. Each has their own admin interface, but sometimes you just want all of the information in one place. Of course, you could bookmark all of the pages. Or make a single page with a lot of frames (remember &lt;a href="https://en.wikipedia.org/wiki/HTML%20frames">HTML frames&lt;/a>?). Or use their API. But where&amp;rsquo;s the fun in that? Instead, let&amp;rsquo;s dig straight into the redis backend and see what we can see!&lt;/p></description></item><item><title>A Smart MySQL Wrapper</title><link>https://blog.jverkamp.com/2020/07/07/a-smart-mysql-wrapper/</link><pubDate>Tue, 07 Jul 2020 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2020/07/07/a-smart-mysql-wrapper/</guid><description>&lt;p>One thing that I often need to do is deal with a large collection of database servers in different clusters and in different environments. On top of that, sometimes, I want a UI, sometime I want a CLI to script. And sometimes I&amp;rsquo;m on a VPN and sometimes I&amp;rsquo;m not. All together, it&amp;rsquo;s a rather complicated number of saved connections and CLI switches and everything else. All together, I want:&lt;/p>
&lt;ul>
&lt;li>Specify the cluster, environment, and mode (read/write/adhoc)&lt;/li>
&lt;li>Specify if I want to run via CLI or via UI&lt;/li>
&lt;li>Specify an optional user with safely stored and used passwords&lt;/li>
&lt;li>Automatically connected via SSH tunnel if I&amp;rsquo;m not on VPN, but not if I am (for CLI or VPN)&lt;/li>
&lt;/ul>
&lt;p>Let&amp;rsquo;s do it!&lt;/p></description></item><item><title>Observation Server</title><link>https://blog.jverkamp.com/2020/06/10/observation-server/</link><pubDate>Wed, 10 Jun 2020 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2020/06/10/observation-server/</guid><description>&lt;p>For a number of years now, I&amp;rsquo;ve been writing down my &amp;lsquo;observations&amp;rsquo;. Essentially, it&amp;rsquo;s a semi-structured set of text files that I keep in Dropbox. One for each day, in a folder by month. I record interesting people I see, things I did worth doing, and things my children did which were adorable.&lt;/p>
&lt;p>After a while, I started wanting to look back, so first, I wrote a relatively simple script that would go back through my archives and send me everything I did 1/2/3/4/etc years ago. That worked well enough, but it ended up generating a lot of emails to go through some days. So the second generation is a server that can format those pages and display them as a nice webpage.&lt;/p>
&lt;p>The most interesting part perhaps was dealing with the tarballs that I keep the archives in (they&amp;rsquo;re plain text, so they compress very well). I wanted to keep them compressed, so I had to decompress them in memory on the fly.&lt;/p></description></item><item><title>Prevent JavaScript links by parsing URLs</title><link>https://blog.jverkamp.com/2019/05/02/prevent-javascript-links-by-parsing-urls/</link><pubDate>Thu, 02 May 2019 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2019/05/02/prevent-javascript-links-by-parsing-urls/</guid><description>&lt;p>If you have a website that allows users to submit URLs, one of the (many many) things people will try to do to break your site is to submit URLs that use the &lt;code>javascript:&lt;/code> protocol (rather than the more expected &lt;code>http:&lt;/code> or &lt;code>https:&lt;/code>). This is almost never something that you want, since it allows users to submit essentially arbitrary code that other users will run on click in the context of your domain (&lt;a href="https://en.wikipedia.org/wiki/same%20origin%20policy">same origin policy&lt;/a>).&lt;/p>
&lt;p>So how do you fix it?&lt;/p>
&lt;p>First thought would be to try to check the protocol:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#a6e22e">safe_url&lt;/span> &lt;span style="color:#f92672">=&lt;/span> (&lt;span style="color:#a6e22e">url&lt;/span>) =&amp;gt; &lt;span style="color:#f92672">!&lt;/span>&lt;span style="color:#a6e22e">url&lt;/span>.&lt;span style="color:#a6e22e">match&lt;/span>(&lt;span style="color:#e6db74">/^javascript:/&lt;/span>)
[Function&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">safe_url&lt;/span>]
&lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#a6e22e">safe_url&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;http://www.example.com&amp;#39;&lt;/span>)
&lt;span style="color:#66d9ef">true&lt;/span>
&lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#a6e22e">safe_url&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;javascript:alert(1)&amp;#39;&lt;/span>)
&lt;span style="color:#66d9ef">false&lt;/span>
&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Tiny Helper Scripts for Command Line MySQL</title><link>https://blog.jverkamp.com/2019/04/27/tiny-helper-scripts-for-command-line-mysql/</link><pubDate>Sat, 27 Apr 2019 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2019/04/27/tiny-helper-scripts-for-command-line-mysql/</guid><description>&lt;p>Quite often, I&amp;rsquo;ll find myself wanting to query and manipulate MySQL data entirely on the command line. I could be building up a pipeline or working on a task that I&amp;rsquo;m going to eventually automate but haven&amp;rsquo;t quite gotten to yet. Whenver I have to do something like that, I have a small pile of scripts I&amp;rsquo;ve written over time that help out:&lt;/p>
&lt;ul>
&lt;li>&lt;code>skiphead&lt;/code>: Skip the first line of output, used to skip over headers in a query response&lt;/li>
&lt;li>&lt;code>skipuntil&lt;/code>: Skip all lines until we see one matching a pattern, used to resume partial tasks&lt;/li>
&lt;li>&lt;code>commaify&lt;/code>: Take a list of single values on the command line and turn them into a comma separated list (for use in &lt;code>IN&lt;/code> clauses)&lt;/li>
&lt;li>&lt;code>csv2json&lt;/code>: a &lt;a href="https://blog.jverkamp.com/2015/12/11/csv-to-json/">previously posted&lt;/a> script for converting csv/tab delimited output to json&lt;/li>
&lt;li>&lt;code>jq&lt;/code>: not my script, but used to take the output of csv2json and query it further in ways that would be complicated to do with SQL&lt;/li>
&lt;/ul>
&lt;p>Admitedly, the first two of those are one liners and I could easily remember them, but the advantage of a single command that does it is tab completion. &lt;code>sk&amp;lt;tab&amp;gt;&lt;/code>, arrow to select which one I want, and off we go. I could put them as an alias, but I don&amp;rsquo;t always use the same shell (mostly &lt;a href="https://fishshell.com/">fish&lt;/a>, but sometimes Bash or Zsh).&lt;/p></description></item><item><title>Listing and Downloading S3 Versions</title><link>https://blog.jverkamp.com/2019/01/04/listing-and-downloading-s3-versions/</link><pubDate>Fri, 04 Jan 2019 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2019/01/04/listing-and-downloading-s3-versions/</guid><description>&lt;p>Today I found the need to look through all old versions of a file in S3 that had versioning turned on. You can do it through the AWS Console, but I prefer command line tools. You can do it with &lt;a href="https://aws.amazon.com/cli/">awscli&lt;/a>, but the flags are long and I can never quite remember them. So let&amp;rsquo;s write up a quick script using &lt;a href="https://boto3.amazonaws.com/v1/documentation/api/latest/index.html">boto3&lt;/a> (and as a bonus, try out &lt;a href="https://click.palletsprojects.com/en/7.x/">click&lt;/a>)!&lt;/p></description></item><item><title>AoC 2018 Day 3: Regionification</title><link>https://blog.jverkamp.com/2018/12/03/aoc-2018-day-3-regionification/</link><pubDate>Mon, 03 Dec 2018 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2018/12/03/aoc-2018-day-3-regionification/</guid><description>&lt;h3 id="source-no-matter-how-you-slice-ithttpsadventofcodecom2018day3">Source: &lt;a href="https://adventofcode.com/2018/day/3">No Matter How You Slice It&lt;/a>&lt;/h3>
&lt;blockquote>
&lt;p>&lt;strong>Part 1:&lt;/strong> Given a list of overlapping regions defined by (left, top, width, height) count how many integer points occur in more than one region.&lt;/p>
&lt;/blockquote></description></item><item><title>AoC 2018 Day 2: Counting letters</title><link>https://blog.jverkamp.com/2018/12/02/aoc-2018-day-2-counting-letters/</link><pubDate>Sun, 02 Dec 2018 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2018/12/02/aoc-2018-day-2-counting-letters/</guid><description>&lt;h3 id="source-inventory-management-systemhttpsadventofcodecom2018day2">Source: &lt;a href="https://adventofcode.com/2018/day/2">Inventory Management System&lt;/a>&lt;/h3>
&lt;blockquote>
&lt;p>&lt;strong>Part 1:&lt;/strong> Given a list of strings, count how many contain exactly two of a letter (&lt;code>a&lt;/code>) and how many contain exactly three of a letter (&lt;code>b&lt;/code>). Calculate &lt;code>a*b&lt;/code>.&lt;/p>
&lt;/blockquote></description></item><item><title>AoC 2018 Day 1: Sum-thing to start with</title><link>https://blog.jverkamp.com/2018/12/01/aoc-2018-day-1-sum-thing-to-start-with/</link><pubDate>Sat, 01 Dec 2018 00:00:03 +0000</pubDate><guid>https://blog.jverkamp.com/2018/12/01/aoc-2018-day-1-sum-thing-to-start-with/</guid><description>&lt;h3 id="source-chronal-calibrationhttpsadventofcodecom2018day1">Source: &lt;a href="https://adventofcode.com/2018/day/1">Chronal Calibration&lt;/a>&lt;/h3>
&lt;blockquote>
&lt;p>&lt;strong>Part 1:&lt;/strong> Given a list of numbers (positive and negative) calculate the sum.&lt;/p>
&lt;/blockquote></description></item><item><title>Advent of Code 2018</title><link>https://blog.jverkamp.com/2018/12/01/advent-of-code-2018/</link><pubDate>Sat, 01 Dec 2018 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2018/12/01/advent-of-code-2018/</guid><description>&lt;p>Let&amp;rsquo;s do it again! I&amp;rsquo;m starting a day late, but much better than &lt;a href="https://blog.jverkamp.com/2018/01/08/advent-of-code-2017/">last year&lt;/a> 😄!&lt;/p>
&lt;p>This time around, I&amp;rsquo;m hoping to solve each problem in both Python and Racket, both to show an example of how the languages differ and &amp;hellip; well, because I can 😇.&lt;/p>
&lt;p>&lt;em>EDIT 2018-12-05&lt;/em>: Yeah&amp;hellip; I&amp;rsquo;m not actually going to do these in both Racket and Python. The solutions are ending up being near direct translations. Since there are probably fewer people solving these in Racket, I&amp;rsquo;ll do that first and Python eventually™.&lt;/p>
&lt;p>As always, these problems are wonderful to try to solve yourself. If you agree, &lt;em>stop reading now&lt;/em>. This post isn&amp;rsquo;t going anywhere.&lt;/p>
&lt;p>If you&amp;rsquo;d like to see the full form of any particular solution, you can do so on GitHub (including previous years and possibly some I haven&amp;rsquo;t written up yet): &lt;a href="https://github.com/jpverkamp/advent-of-code">jpverkamp/advent-of-code&lt;/a>&lt;/p></description></item></channel></rss>