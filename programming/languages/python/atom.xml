<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Python on jverkamp.com</title>
    <link>https://blog.jverkamp.com/programming/languages/python/</link>
    <description>Recent content in Python on jverkamp.com</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language><atom:link href="https://blog.jverkamp.com/programming/languages/python/atom.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>AoC 2021 Day 22: Cubinator</title>
      <link>https://blog.jverkamp.com/2021/12/22/aoc-2021-day-22-cubinator/</link>
      <pubDate>Wed, 22 Dec 2021 00:00:05 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2021/12/22/aoc-2021-day-22-cubinator/</guid>
      <description>&lt;h3 id=&#34;source-reactor-reboothttpsadventofcodecom2021day22&#34;&gt;Source: &lt;a href=&#34;https://adventofcode.com/2021/day/22&#34;&gt;Reactor Reboot&lt;/a&gt;&lt;/h3&gt;
&lt;h4 id=&#34;part-1-given-a-series-of-3d-cubes-that-either-turn-on-all-or-turn-off-all-points-in-their-region-calculate-how-many-points-in-the-region--5050-5050-5050-are-on-at-the-end&#34;&gt;&lt;strong&gt;Part 1:&lt;/strong&gt; Given a series of 3D cubes that either turn ON all or turn OFF all points in their region, calculate how many points in the region (-50..50,-50..50,-50..50) are ON at the end.&lt;/h4&gt;
&lt;p&gt;Wow. This one took me literal days of work to get working for some reason. I actually got to writing unit tests, which is saying something. :D And then after I had one aha moment (changing from cube to edge focussed, see later), it worked basically immediately. Oh data structure choices.&lt;/p&gt;
&lt;p&gt;The basic idea I had all along was to make a &lt;code&gt;Cube&lt;/code&gt; object that would have all of the operators I need: &lt;code&gt;a &amp;amp; b&lt;/code&gt; to intersect two cubes, &lt;code&gt;a | b&lt;/code&gt; (or &lt;code&gt;a + b&lt;/code&gt;) to union/add them, and &lt;code&gt;a - b&lt;/code&gt; to subtract one cube from another (each of which will return a list of cubes that make up the result). Then I could:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Start with an empty list of cubes&lt;/li&gt;
&lt;li&gt;For each cube
&lt;ul&gt;
&lt;li&gt;If ON:
&lt;ul&gt;
&lt;li&gt;Create a sublist of just &lt;code&gt;[cube]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;For each current cube, remove it from every element in the sublist&lt;/li&gt;
&lt;li&gt;The result is just the new cubes to turn ON, add them to the main list&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;If OFF:
&lt;ul&gt;
&lt;li&gt;For each current cube, remove the new cube from it (generating 0, 1, or many subcubes)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This will be the final list. Let&amp;rsquo;s make that class!&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@dataclass&lt;/span&gt;(frozen&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;True, order&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;True)
&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Point&lt;/span&gt;:
    x: int
    y: int
    z: int


&lt;span style=&#34;color:#a6e22e&#34;&gt;@dataclass&lt;/span&gt;(frozen&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;True)
&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Cube&lt;/span&gt;:
    min: Point
    max: Point

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; __repr__(self):
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; f&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Cube({len(self)})@[{self.min.x}..{self.max.x}, {self.min.y}..{self.max.y}, {self.min.z}..{self.max.z}]&amp;#39;&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; __len__(self) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; int:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; (
            (self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;max&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;x &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;min&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;x)
            &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; (self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;max&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;y &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;min&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;y)
            &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; (self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;max&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;z &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;min&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;z)
        )
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;These are just the basic methods, print them out and return the &amp;lsquo;size&amp;rsquo; of a cube. One major change I did (entirely too late in the process) was to change from a face-centered system, to an edge centered-system. In that, the original &lt;code&gt;OldCube(1)@(10..10, 10..10, 10..10)&lt;/code&gt; would be a 1x1 cube including just the point &lt;code&gt;&amp;lt;10, 10, 10&amp;gt;&lt;/code&gt;, but I changed that so that would be represented by &lt;code&gt;OldCube(1)@(10..11, 10..11, 10..11)&lt;/code&gt;. The upper bounds are &lt;em&gt;not&lt;/em&gt; inclusive. That made the math &lt;em&gt;loads&lt;/em&gt; easier.&lt;/p&gt;
&lt;p&gt;Okay, let&amp;rsquo;s work through the &lt;code&gt;Cube&lt;/code&gt; methods (they&amp;rsquo;d all be in one class):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Cube&lt;/span&gt;:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; __iter__(self) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; Generator[Point, None, None]:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;min&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;x, self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;max&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;x):
            &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; y &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;min&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;y, self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;max&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;y):
                &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; z &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;min&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;z, self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;max&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;z):
                    &lt;span style=&#34;color:#66d9ef&#34;&gt;yield&lt;/span&gt; Point(x, y, z)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;I didn&amp;rsquo;t actually end up using this, but it can be used to actually get all of the cubes in a point. So if you wanted to directly solve the problem, you could with this!&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Cube&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; __contains__(self, other: Union[Point, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Cube&amp;#39;&lt;/span&gt;]) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; bool:
        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&amp;#39;Is the cube/point other entirely contained in self.&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;

        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; isinstance(other, Point):
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; (
                self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;min&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;x &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; other&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;x &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;max&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;x
                &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;min&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;y &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; other&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;y &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;max&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;y
                &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;min&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;z &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; other&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;z &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;max&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;z
            )
        &lt;span style=&#34;color:#66d9ef&#34;&gt;elif&lt;/span&gt; isinstance(other, Cube):
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; other&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;min &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; self &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; other&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;max &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; self
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Next, implement &lt;code&gt;p: Point in c: Cube&lt;/code&gt; and &lt;code&gt;c1: Cube in c2: Cube&lt;/code&gt;. This is used to special case many of the later methods.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Cube&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;overlaps&lt;/span&gt;(self, other: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Cube&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; bool:
        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&amp;#39;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        Does the cube overlap with self at all?
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        Note: This includes if the cubes are just touching since edges are inclusive.
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        &amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;

        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; (
            self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;min &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; other
            &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;max &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; other
            &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; other&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;min &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; other
            &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; other&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;max &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; other
            &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; self &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; other
            &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; other &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; self
        )
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The flip side of &lt;code&gt;in&lt;/code&gt;: do they overlap at all. This could be just touching, but also any number of other cases (partial overlap, to a superset of &lt;code&gt;in&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;Okay, the heart of all of the next methods:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Cube&lt;/span&gt;:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;__segment&lt;/span&gt;(self, other: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Cube&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; List[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Cube&amp;#39;&lt;/span&gt;]:
        xs &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; list(sorted([self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;min&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;x, self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;max&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;x, other&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;min&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;x, other&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;max&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;x]))
        ys &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; list(sorted([self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;min&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;y, self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;max&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;y, other&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;min&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;y, other&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;max&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;y]))
        zs &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; list(sorted([self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;min&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;z, self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;max&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;z, other&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;min&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;z, other&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;max&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;z]))

        segments &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []

        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i, (x1, x2) &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; enumerate(zip(xs, xs[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:])):
            &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; j, (y1, y2) &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; enumerate(zip(ys, ys[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:])):
                &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; k, (z1, z2) &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; enumerate(zip(zs, zs[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:])):
                    new_segment &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Cube(Point(x1, y1, z1), Point(x2, y2, z2))

                    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; new_segment &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; segments:
                        &lt;span style=&#34;color:#66d9ef&#34;&gt;continue&lt;/span&gt;

                    segments&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(new_segment)

        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; segments
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The idea of this method is that any two cubes can be divided into 3x3 = 27 &amp;lsquo;segments&amp;rsquo;, no matter how they overlap. If they overlap on a corner, the middle of those will be the middle segment. If they only touch, then the touching line will be a zero size middle segment. If they don&amp;rsquo;t touch at all, the middle segment will be &amp;lsquo;between&amp;rsquo; the cubes.&lt;/p&gt;
&lt;p&gt;This is the method that benefited the most from the rewrite to edge-focused cubes. Before that, I had to have all sorts of special cases where you didn&amp;rsquo;t accidentally include the edge cubes twice. With the change&amp;hellip; it&amp;rsquo;s just this much code.&lt;/p&gt;
&lt;p&gt;Now that we have that, we can implement &lt;code&gt;&amp;amp;&lt;/code&gt;, &lt;code&gt;|&lt;/code&gt;, &lt;code&gt;+&lt;/code&gt;, and &lt;code&gt;-&lt;/code&gt; as various combinations of &lt;code&gt;__segment&lt;/code&gt; and &lt;code&gt;in&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Cube&lt;/span&gt;:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; __and__(self, other: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Cube&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; List[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Cube&amp;#39;&lt;/span&gt;]:
        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&amp;#39;Calculate the list of cubes making up the intersection of self and other.&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;

        &lt;span style=&#34;color:#75715e&#34;&gt;# One cube is entirely inside of the other&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; self &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; other:
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; [self]
        &lt;span style=&#34;color:#66d9ef&#34;&gt;elif&lt;/span&gt; other &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; self:
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; [other]

        &lt;span style=&#34;color:#75715e&#34;&gt;# No overlap at all&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;elif&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;overlaps(other):
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; []

        &lt;span style=&#34;color:#75715e&#34;&gt;# Finally, only segments that are in both&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; Cube&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;compress([
                segment
                &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; segment &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;__segment(other)
                &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; segment &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; self &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; segment &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; other
            ])

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; __or__(self, other: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Cube&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; List[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Cube&amp;#39;&lt;/span&gt;]:
        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&amp;#39;Calculate the list of cubes making up the union of self and other.&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;

        &lt;span style=&#34;color:#75715e&#34;&gt;# One cube is entirely inside the other&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; self &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; other:
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; [other]
        &lt;span style=&#34;color:#66d9ef&#34;&gt;elif&lt;/span&gt; other &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; self:
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; [self]

        &lt;span style=&#34;color:#75715e&#34;&gt;# No overlap at all&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;elif&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;overlaps(other):
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; [self, other]

        &lt;span style=&#34;color:#75715e&#34;&gt;# Otherwise, split into segments and return all of them&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; Cube&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;compress([
                segment
                &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; segment &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;__segment(other)
                &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; segment &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; self &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; segment &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; other
            ])

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; __add__(self, other: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Cube&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; List[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Cube&amp;#39;&lt;/span&gt;]:
        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&amp;#39;Adding is the same as intersection.&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;

        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; self &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; other

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; __sub__(self, other: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Cube&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; List[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Cube&amp;#39;&lt;/span&gt;]:
        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&amp;#39;Calculate the list of cubes resulting of removing other from self.&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;

        &lt;span style=&#34;color:#75715e&#34;&gt;# Subtract the entire thing&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; self &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; other:
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; []

        &lt;span style=&#34;color:#75715e&#34;&gt;# No overlap at all&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;elif&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;overlaps(other):
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; [self]

        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; Cube&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;compress([
            segment
            &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; segment &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;__segment(other)
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; segment &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; self &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; segment &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; other
        ])
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Pretty sweet how clean that code is. But &amp;hellip; what&amp;rsquo;s that compress thing? It&amp;rsquo;s not necessary to actually solve the problem, but what it does is make the number of cubes explode slightly less. Rather than up to 27 new cubes, if any of the new cubes can be combined (by glueing one face together), do it:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Cube&lt;/span&gt;:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;join&lt;/span&gt;(self, other: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Cube&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; Optional[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Cube&amp;#39;&lt;/span&gt;]:
        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&amp;#39;If two cubes can be perfectly joined, return that.&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;

        &lt;span style=&#34;color:#75715e&#34;&gt;# One cube contains the other&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; self &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; other:
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; other
        &lt;span style=&#34;color:#66d9ef&#34;&gt;elif&lt;/span&gt; other &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; self:
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; self

        &lt;span style=&#34;color:#75715e&#34;&gt;# The x/y/z edges match perfectly&lt;/span&gt;
        x_match &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;min&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;x &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; other&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;min&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;x &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;max&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;x &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; other&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;max&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;x
        y_match &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;min&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;y &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; other&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;min&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;y &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;max&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;y &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; other&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;max&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;y
        z_match &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;min&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;z &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; other&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;min&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;z &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;max&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;z &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; other&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;max&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;z

        &lt;span style=&#34;color:#75715e&#34;&gt;# The last dimension is contained within the other cube&lt;/span&gt;
        x_overlap &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (
            (other&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;min&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;x &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;min&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;x &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; other&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;max&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;x)
            &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; (other&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;min&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;x &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;max&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;x &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; other&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;max&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;x)
            &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; (self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;min&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;x &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; other&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;min&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;x &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;min&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;x)
            &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; (self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;min&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;x &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; other&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;max&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;x &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;min&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;x)
        )

        y_overlap &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (
            (other&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;min&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;y &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;min&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;y &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; other&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;max&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;y)
            &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; (other&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;min&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;y &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;max&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;y &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; other&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;max&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;y)
            &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; (self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;min&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;y &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; other&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;min&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;y &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;min&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;y)
            &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; (self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;min&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;y &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; other&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;max&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;y &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;min&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;y)
        )

        z_overlap &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (
            (other&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;min&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;z &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;min&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;z &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; other&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;max&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;z)
            &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; (other&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;min&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;z &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;max&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;z &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; other&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;max&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;z)
            &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; (self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;min&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;z &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; other&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;min&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;z &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;min&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;z)
            &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; (self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;min&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;z &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; other&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;max&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;z &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;min&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;z)
        )

        &lt;span style=&#34;color:#75715e&#34;&gt;# If we have exactly two matches and an overlap, we can combine&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (
            (x_overlap &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; y_match &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; z_match)
            &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; (x_match &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; y_overlap &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; z_match)
            &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; (x_match &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; y_match &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; z_overlap)
        ):
            result &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Cube(min(self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;min, other&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;min), max(self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;max, other&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;max))
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; result

        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; None

    &lt;span style=&#34;color:#a6e22e&#34;&gt;@staticmethod&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;compress&lt;/span&gt;(cubes: List[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Cube&amp;#39;&lt;/span&gt;]) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; List[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Cube&amp;#39;&lt;/span&gt;]:
        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&amp;#39;Take a list of cubes and join as many as we can.&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;

        cubes &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; list(cubes)

        &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;find_one_join&lt;/span&gt;():
            &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i, c1 &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; enumerate(cubes):
                &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; j, c2 &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; enumerate(cubes):
                    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; j &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; i:
                        &lt;span style=&#34;color:#66d9ef&#34;&gt;continue&lt;/span&gt;

                    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; c :&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; c1&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;join(c2):
                        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; i, j, c

        &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; True:
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; result :&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; find_one_join():
                i, j, c &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; result

                &lt;span style=&#34;color:#66d9ef&#34;&gt;del&lt;/span&gt; cubes[j]
                &lt;span style=&#34;color:#66d9ef&#34;&gt;del&lt;/span&gt; cubes[i]
                cubes&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(c)
            &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
                &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;

        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; cubes
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;It&amp;rsquo;s&amp;hellip; something that came about when fiddling with the old cube-centered mess, but it still does help.&lt;/p&gt;
&lt;p&gt;So what&amp;rsquo;s the final algorithm look like?&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;read&lt;/span&gt;(file: TextIO) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; Generator[Tuple[bool, Cube], None, None]:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; line &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; file:
        m &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; re&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;match(&lt;span style=&#34;color:#e6db74&#34;&gt;r&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;(on|off) x=(-?\d+)\.\.(-?\d+),y=(-?\d+)\.\.(-?\d+),z=(-?\d+)\.\.(-?\d+)&amp;#39;&lt;/span&gt;, line)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; m:
            mode, x1, x2, y1, y2, z1, z2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; m&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;groups()
            cube &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Cube(
                Point(int(x1), int(y1), int(z1)),
                Point(int(x2) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, int(y2) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, int(z2) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
            )

            &lt;span style=&#34;color:#66d9ef&#34;&gt;yield&lt;/span&gt; mode &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;on&amp;#39;&lt;/span&gt;, cube


&lt;span style=&#34;color:#a6e22e&#34;&gt;@app.command&lt;/span&gt;()
&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;(file: typer&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;FileText, limit: bool &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; False):
    cubes: List[Cube] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []

    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; turn_on, cube &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; read(file):
        logging&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;info(f&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;{turn_on=} {cube=}&amp;#39;&lt;/span&gt;)

        &lt;span style=&#34;color:#75715e&#34;&gt;# Turning on cubes, don&amp;#39;t turn on anything that is already on&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; turn_on:
            to_turn_on &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [cube]

            &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; old_cube &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; cubes:
                to_turn_on &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [
                    remaining_cube
                    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; to_turn_on_cube &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; to_turn_on
                    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; remaining_cube &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; to_turn_on_cube &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; old_cube
                ]

            cubes &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; to_turn_on

        &lt;span style=&#34;color:#75715e&#34;&gt;# Turning off cubes, turn off anything that should be off&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
            cubes &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [
                reduced_cube
                &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; current_cube &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; cubes
                &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; reduced_cube &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; current_cube &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; cube
            ]

        &lt;span style=&#34;color:#75715e&#34;&gt;# Re-compress at the end of each cycle&lt;/span&gt;
        cubes &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Cube&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;compress(cubes)

        logging&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;info(f&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;After {turn_on=} {cube=}: {len(cubes)=}, {sum(len(cube) for cube in cubes)=}
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;)

        &lt;span style=&#34;color:#75715e&#34;&gt;# Remove all regions outside of -50..50&lt;/span&gt;
        &lt;span style=&#34;color:#75715e&#34;&gt;# This is silly, because we&amp;#39;ll need to keep them in part 2&lt;/span&gt;
        &lt;span style=&#34;color:#75715e&#34;&gt;# But it&amp;#39;s faster at least&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; limit:
            cubes &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Cube&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;compress([
                reduced
                &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; cube &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; cubes
                &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; reduced &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; cube &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; Cube(Point(&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;50&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;50&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;50&lt;/span&gt;), Point(&lt;span style=&#34;color:#ae81ff&#34;&gt;51&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;51&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;51&lt;/span&gt;))
            ])

    &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(sum(len(cube) &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; cube &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; cubes))

&lt;span style=&#34;color:#a6e22e&#34;&gt;@app.command&lt;/span&gt;()
&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;part1&lt;/span&gt;(file: typer&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;FileText):
    main(file, True)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Almost exactly what I described in the pseudo-code, albeit a bit longer. It&amp;rsquo;s kind of funny, because we need to remove the -50..50 region even though we already calculated it. It does run quicker without it though:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ python3 cubinator.py part1 input.txt
&lt;span style=&#34;color:#ae81ff&#34;&gt;590467&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# time 33116921042ns / 33.12s&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>AoC 2021 Day 21: Dicinator</title>
      <link>https://blog.jverkamp.com/2021/12/21/aoc-2021-day-21-dicinator/</link>
      <pubDate>Tue, 21 Dec 2021 00:00:05 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2021/12/21/aoc-2021-day-21-dicinator/</guid>
      <description>&lt;h3 id=&#34;source-dirac-dicehttpsadventofcodecom2021day21&#34;&gt;Source: &lt;a href=&#34;https://adventofcode.com/2021/day/21&#34;&gt;Dirac Dice&lt;/a&gt;&lt;/h3&gt;
&lt;h4 id=&#34;part-1-play-a-simple-game-describe-below-with-a-loaded-d100-that-always-rolls-1-2-3--99-100-1--return-the-score-of-the-losing-player-times-the-number-of-times-the-die-was-rolled&#34;&gt;&lt;strong&gt;Part 1:&lt;/strong&gt; Play a simple game (describe below) with a loaded D100 (that always rolls 1, 2, 3, &amp;hellip; 99, 100, 1, &amp;hellip;). Return the score of the losing player times the number of times the die was rolled.&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;The board has a circle of 10 squares, numbered 1-10&lt;/li&gt;
&lt;li&gt;The player pieces start on given squares&lt;/li&gt;
&lt;li&gt;Each turn, roll 3 dice, advance the sum of the three many spaces (wrapping around)&lt;/li&gt;
&lt;li&gt;Score points equal to the square you land on&lt;/li&gt;
&lt;li&gt;The first player to score &amp;gt;= 1000 wins&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This is not a hard problem, so I&amp;rsquo;m going to &lt;em&gt;dramatically&lt;/em&gt; overengineer it.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;Die &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Generator[int, None, None]

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;LoadedDie&lt;/span&gt;(sides: int) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; Die:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; True:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(sides):
            &lt;span style=&#34;color:#66d9ef&#34;&gt;yield&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;


&lt;span style=&#34;color:#a6e22e&#34;&gt;@dataclass&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Game&lt;/span&gt;:
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&amp;#39;Reprents a weird/simple game.&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;

    die: Die
    size: int
    target: int

    current: int
    players: List[int]
    scores: List[int]

    roll_count: int

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; __init__(
            self,
            die: Die,
            size: Optional[int] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;,
            target: Optional[int] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1000&lt;/span&gt;,
            number_of_players: Optional[int] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,
            initial_spots: Optional[List[int]] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; None,
    ):
        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&amp;#39;Create a game with various defaults.&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;

        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; number_of_players &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; None:
            number_of_players &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;

        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;die &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; die
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;size &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; size &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;target &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; target &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1000&lt;/span&gt;
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;current &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;players &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; initial_spots &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(number_of_players)]
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;scores &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(number_of_players)]
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;roll_count &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;

        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; number_of_players &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; len(self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;players):
            &lt;span style=&#34;color:#66d9ef&#34;&gt;raise&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Exception&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;If both number of players and initial spots are provided, they must match&amp;#39;&lt;/span&gt;)

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;winner&lt;/span&gt;(self) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; Optional[int]:
        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&amp;#39;Return the current winner (or None if no winner)&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;

        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i, score &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; enumerate(self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;scores):
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; score &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;target:
                &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;

        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; None

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;update&lt;/span&gt;(self):
        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&amp;#39;Plays one round.&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;

        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;winner():
            logging&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;info(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Cannot update, game is already over&amp;#39;&lt;/span&gt;)
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;

        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;roll_count &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;
        rolls &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [next(self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;die), next(self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;die), next(self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;die)]
        new_space &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;players[self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;current] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; sum(rolls)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; new_space &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;size:
            new_space &lt;span style=&#34;color:#f92672&#34;&gt;-=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;size

        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;players[self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;current] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; new_space
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;scores[self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;current] &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; new_space

        logging&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;info(f&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Player {self.current+1} rolls {rolls} &lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;and moves to space {self.players[self.current]} &lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;for a total score of {self.scores[self.current]}.&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;)

        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;current &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;current &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; len(self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;players)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now with any user supplied die, any size board, any number of players, and any target score! I think the most interesting thing was the &lt;code&gt;LoadedDie&lt;/code&gt; generator. Any generator will work though.&lt;/p&gt;
&lt;p&gt;Wrap that in the problem statement:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;part1&lt;/span&gt;(file: typer&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;FileText):

    p1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; int(file&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;readline()&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;split()[&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;])
    p2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; int(file&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;readline()&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;split()[&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;])

    game &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Game(die&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;LoadedDie(&lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;), initial_spots&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;[p1, p2])

    &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; game&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;winner():
        game&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;update()

    winning_player &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; game&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;winner()

    &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(
        winning_player, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;wins,&amp;#39;&lt;/span&gt;,
        game&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;scores[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; winning_player &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; game&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;roll_count
    )
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And we&amp;rsquo;re golden:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ python3 dicinator.py part1 input.txt
&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; wins, &lt;span style=&#34;color:#ae81ff&#34;&gt;752247&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# time 45107958ns / 0.05s&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>AoC 2021 Day 20: Enhancinator</title>
      <link>https://blog.jverkamp.com/2021/12/20/aoc-2021-day-20-enhancinator/</link>
      <pubDate>Mon, 20 Dec 2021 00:00:05 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2021/12/20/aoc-2021-day-20-enhancinator/</guid>
      <description>&lt;h3 id=&#34;source-trench-maphttpsadventofcodecom2021day20&#34;&gt;Source: &lt;a href=&#34;https://adventofcode.com/2021/day/20&#34;&gt;Trench Map&lt;/a&gt;&lt;/h3&gt;
&lt;h4 id=&#34;part-1-given-a-9-1-hahahugoshortcode-s0-hbhb-update-function-take-the-pixel-and-8-surrounding-pixels-as-a-9-bit-index-into-the-function-and-a-binary-image-apply-the-function-twice-and-count-the-number-of-lit-pixels-assume-that-the-canvas-is-infinite&#34;&gt;&lt;strong&gt;Part 1:&lt;/strong&gt; Given a 9-&amp;gt;1 &lt;a href=&#34;https://en.wikipedia.org/wiki/cellular%20automota&#34;&gt;cellular automota&lt;/a&gt; update function (take the pixel and 8 surrounding pixels as a 9-bit index into the function) and a binary image, apply the function twice and count the number of &amp;lsquo;lit&amp;rsquo; pixels. Assume that the canvas is infinite.&lt;/h4&gt;
&lt;p&gt;That was fun!&lt;/p&gt;
&lt;p&gt;First, we want to represent our two data structures. First, the image itself. Because it can be infinite, we&amp;rsquo;re going to store both pixels we know about (&lt;code&gt;data&lt;/code&gt;) and a single value for &lt;code&gt;infinity&lt;/code&gt;. We won&amp;rsquo;t end up with stripes reaching out in this particular case. In most function applications, &lt;code&gt;infinity&lt;/code&gt; will stay either on or off. But there is an edge case where it will oscillate. I&amp;rsquo;ll come back to that when we get there.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;Point &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Tuple[int, int]

&lt;span style=&#34;color:#a6e22e&#34;&gt;@dataclass&lt;/span&gt;(frozen&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;True)
&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;InfiniteBitmap&lt;/span&gt;:
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&amp;#39;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    Store an infinitely large bitmap.
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    data is &amp;#39;known&amp;#39; values
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    infinity is every other point off to infinity
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    &amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;

    data: MutableMapping[Point, bool]
    infinity: bool

    &lt;span style=&#34;color:#a6e22e&#34;&gt;@staticmethod&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;read&lt;/span&gt;(file: TextIO) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;InfiniteBitmap&amp;#39;&lt;/span&gt;:
        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&amp;#39;Read an infinite bitmap from file. Assume unset bits (infinity) are False.&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;

        logging&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;info(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Reading infinity bitmap&amp;#39;&lt;/span&gt;)

        data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {
            (x, y): c &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;#&amp;#39;&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; y, line &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; enumerate(file)
            &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; x, c &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; enumerate(line&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;strip())
        }

        mid_x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; max(x &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; x, _ &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; data) &lt;span style=&#34;color:#f92672&#34;&gt;//&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
        mid_y &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; max(y &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; _, y &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; data) &lt;span style=&#34;color:#f92672&#34;&gt;//&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;

        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; InfiniteBitmap({(x &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; mid_x, y &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; mid_y): bit &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (x, y), bit &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; data&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;items()}, False)

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; __repr__(self):
        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&amp;#39;Return a much smaller representation.&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;

        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; f&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;InfiniteBinary&amp;lt;{self.infinity}, {len(self)}/{len(self.data)}, {self.bounds()}&amp;gt;&amp;#39;&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; __len__(self) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; int:
        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&amp;#39;Return the number of lit pixels (might be effectively infinite).&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;

        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;infinity:
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; sys&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;maxsize
        &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; sum(
                &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; self[p] &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
                &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; p &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;data
            )

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; __getitem__(self, p: Point) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; bool:
        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&amp;#39;Get the value at a given point p (use infinity if the point isn&amp;#39;t otherwise known).&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;

        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;data&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;get(p, self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;infinity)

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;bounds&lt;/span&gt;(self) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; Tuple[int, int, int, int]:
        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&amp;#39;Return (minimum x, maximum x, minimum y, maximum y)&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;

        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; (
            min(x &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; x, _ &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;data) &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;,
            max(x &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; x, _ &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;data) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;,
            min(y &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; _, y &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;data) &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;,
            max(y &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; _, y &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;data) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;,
        )
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Most of this is just reading the data. I did do one interesting bit in the &lt;code&gt;read&lt;/code&gt; function, which was to &amp;lsquo;recenter&amp;rsquo; the data. After reading, the range is (0, width), but I&amp;rsquo;d rather it be (-width/2, width/2) so that the center point is actually in the center.&lt;/p&gt;
&lt;p&gt;In addition, we went ahead and put a &lt;code&gt;__len__&lt;/code&gt; function here: the number of lit pixels.&lt;/p&gt;
&lt;p&gt;Okay, next up, let&amp;rsquo;s work on that mapping function. This is the bulk of the problem:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;BitIndex &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; List[bool]

NEIGHBORHOOD &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [
    (&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;), (&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;), (&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;),
    (&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;), (&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;), (&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;),
    (&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;), (&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;), (&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;),
]

&lt;span style=&#34;color:#a6e22e&#34;&gt;@dataclass&lt;/span&gt;(frozen&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;True)
&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;BinaryMapping&lt;/span&gt;:
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&amp;#39;Store a mapping from 9-bit values to 1-bit, loaded from a 512 character string of . (0) and # (1).&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;

    map: List[bool]

    &lt;span style=&#34;color:#a6e22e&#34;&gt;@staticmethod&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;read&lt;/span&gt;(file: TextIO):
        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&amp;#39;Read a BinaryMapping from an input stream.&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;

        logging&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;info(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Reading binary mapping&amp;#39;&lt;/span&gt;)

        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; BinaryMapping([c &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;#&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; c &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; file&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;readline()&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;strip()])

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; __repr__(self):
        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&amp;#39;Return a unique representation of this map.&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;

        binary &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;join(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;1&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; bit &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;0&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; bit &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;map)
        integer &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; int(binary, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)
        bytes &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; integer&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;to_bytes(&lt;span style=&#34;color:#ae81ff&#34;&gt;64&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;big&amp;#39;&lt;/span&gt;)
        b64 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; base64&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;b64encode(bytes)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;decode()

        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; f&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;BinaryMapping&amp;lt;{b64}&amp;gt;&amp;#39;&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; __getitem__(self, k: Union[int, BitIndex]) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; bool:
        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&amp;#39;Get the value of the BinaryMapping by either integer index of a 9-bit binary BitIndex.&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;

        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; isinstance(k, int):
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;map[k]
        &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
            &lt;span style=&#34;color:#75715e&#34;&gt;# TODO: Make this more efficient&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;map[int(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;join(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;1&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; bit &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;0&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; bit &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; k), &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)]

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; __call__(self, bitmap: InfiniteBitmap) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; InfiniteBitmap:
        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&amp;#39;Apply this mapping to an infinite bitmap, generating a new one with this applied.&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;

        logging&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;info(f&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Calling {self} on {bitmap}&amp;#39;&lt;/span&gt;)

        &lt;span style=&#34;color:#75715e&#34;&gt;# Calculate the new infinity&lt;/span&gt;

        &lt;span style=&#34;color:#75715e&#34;&gt;# If the lowest mapping is set, infinity goes from off to on&lt;/span&gt;
        &lt;span style=&#34;color:#75715e&#34;&gt;# Likewise on the highest mapping for infinity from on to off&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; bitmap&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;infinity &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; self[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]:
            new_infinity &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; True
        &lt;span style=&#34;color:#66d9ef&#34;&gt;elif&lt;/span&gt; bitmap&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;infinity &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; self[&lt;span style=&#34;color:#ae81ff&#34;&gt;511&lt;/span&gt;]:
            new_infinity &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; False
        &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
            new_infinity &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; bitmap&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;infinity

        &lt;span style=&#34;color:#75715e&#34;&gt;# Calculate all new points&lt;/span&gt;
        new_data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {}

        &lt;span style=&#34;color:#75715e&#34;&gt;# Have to calculate all pixels one level out as well&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; x, y &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; bitmap&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;data:
            &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; xd, yd &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; NEIGHBORHOOD:
                &lt;span style=&#34;color:#75715e&#34;&gt;# Don&amp;#39;t calculate points more than once per update&lt;/span&gt;
                center &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (x &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; xd, y &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; yd)
                &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; center &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; new_data:
                    &lt;span style=&#34;color:#66d9ef&#34;&gt;continue&lt;/span&gt;

                neighbors &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [
                    bitmap[x &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; xd &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; xd2, y &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; yd &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; yd2]
                    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; xd2, yd2 &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; NEIGHBORHOOD
                ]

                new_value &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self[neighbors]

                &lt;span style=&#34;color:#75715e&#34;&gt;# If the value wasn&amp;#39;t in the old map and matches the new infinity&lt;/span&gt;
                &lt;span style=&#34;color:#75715e&#34;&gt;# We don&amp;#39;t need to include it (prevent infinity expansion)&lt;/span&gt;
                &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; center &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; bitmap&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;data &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; new_value &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; new_infinity:
                    &lt;span style=&#34;color:#66d9ef&#34;&gt;continue&lt;/span&gt;

                new_data[center] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; new_value

        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; InfiniteBitmap(new_data, new_infinity)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;__getitem__&lt;/code&gt; will handle infinity (so we can always read any pixel, even if it&amp;rsquo;s not already defined in the image).&lt;/p&gt;
&lt;p&gt;&lt;code&gt;__call__&lt;/code&gt; is the core, it allows the function to be called on a &lt;code&gt;InfiniteBitmap&lt;/code&gt; and returns the updated bitmap. Let&amp;rsquo;s go through a few interesting points of it:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Updating the infinite pixels: this is the edge case I was talking about earlier. If the first value in the update function (all false) returns true, we need to change infinite to true. Likewise if the last value is false, we need to make infinite false. If both of these are the case (as they are in my input), you&amp;rsquo;ll get a flicker (see the rendering at the end).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Updating the majority of pixels&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;We need to update all pixels in the image &lt;em&gt;plus&lt;/em&gt; all pixels adjacent to them, because those might change from off to on.&lt;/li&gt;
&lt;li&gt;This would lead to infinitely growing memory&amp;hellip; except we don&amp;rsquo;t have to. If the new border pixel matches infinity, not setting it is fine, it will get rescanned on the edge update next time.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And that&amp;rsquo;s, actually it!&lt;/p&gt;
&lt;p&gt;Using the rendering function (we&amp;rsquo;ll see at the end) and the test data, we can go from this:&lt;/p&gt;
&lt;figure&gt;
    &lt;img src=&#34;https://blog.jverkamp.com/embeds/2021/aoc2021-20-test-0000.png&#34;/&gt; 
&lt;/figure&gt;

&lt;p&gt;To this:&lt;/p&gt;
&lt;figure&gt;
    &lt;img src=&#34;https://blog.jverkamp.com/embeds/2021/aoc2021-20-test-0001.png&#34;/&gt; 
&lt;/figure&gt;

&lt;p&gt;To this:&lt;/p&gt;
&lt;figure&gt;
    &lt;img src=&#34;https://blog.jverkamp.com/embeds/2021/aoc2021-20-test-0002.png&#34;/&gt; 
&lt;/figure&gt;

&lt;p&gt;It matches what we expect! A simple wrapper:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;part1&lt;/span&gt;(file: typer&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;FileText):

    f &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; BinaryMapping&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;read(file)
    file&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;readline()
    bitmap &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; InfiniteBitmap&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;read(file)

    final_bitmap &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; f(f(bitmap))

    &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(len(final_bitmap))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And run it:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ python3 enhancinator.py part1 input.txt
&lt;span style=&#34;color:#ae81ff&#34;&gt;5057&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# time 290676167ns / 0.29s&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Not bad!&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>AoC 2021 Day 19: Point Matchinator</title>
      <link>https://blog.jverkamp.com/2021/12/19/aoc-2021-day-19-point-matchinator/</link>
      <pubDate>Sun, 19 Dec 2021 00:00:05 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2021/12/19/aoc-2021-day-19-point-matchinator/</guid>
      <description>&lt;h3 id=&#34;source-snailfishhttpsadventofcodecom2021day19&#34;&gt;Source: &lt;a href=&#34;https://adventofcode.com/2021/day/19&#34;&gt;Snailfish&lt;/a&gt;&lt;/h3&gt;
&lt;h4 id=&#34;part-1-you-will-be-given-a-series-of-scanners-each-of-which-will-tell-you-the-location-from-their-point-of-view-of-a-series-of-beacons-each-scanner-may-be-flipped-or-rotated-in-increments-of-90-degrees-in-any-direction-determine-where-each-scanner-and-beacon-is-by-overlaying-the-maps-with-at-least-pairwise-12-matches&#34;&gt;&lt;strong&gt;Part 1:&lt;/strong&gt; You will be given a series of Scanners, each of which will tell you the location (from their point of view) of a series of Beacons. Each Scanner may be flipped or rotated in increments of 90 degrees in any direction. Determine where each Scanner and Beacon is by overlaying the maps (with at least pairwise 12 matches).&lt;/h4&gt;
&lt;p&gt;That&amp;hellip; was quite a problem to get right. It&amp;rsquo;s a lot of match to make sure that the various coordinate systems can be converted between one another and computationally expensive to brute force. I haven&amp;rsquo;t gotten this one much below 10 minutes&amp;hellip; but at this point, I&amp;rsquo;m just going to have to call it. It&amp;rsquo;s a crazy problem.&lt;/p&gt;
&lt;p&gt;Okay. Let&amp;rsquo;s start with a 3-dimensional point:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@dataclass&lt;/span&gt;(frozen&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;True)
&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Point&lt;/span&gt;:
    x: int
    y: int
    z: int

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; __repr__(self):
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; f&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;{{{self.x}, {self.y}, {self.z}}}&amp;#39;&lt;/span&gt;

    &lt;span style=&#34;color:#a6e22e&#34;&gt;@staticmethod&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;all_waggles&lt;/span&gt;() &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; Generator[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Point&amp;#39;&lt;/span&gt;, None, None]:
        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&amp;#39;Generate all waggle parameters (see Point.waggle)&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;

        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i, j, k &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; itertools&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;permutations((&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;)):
            &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; ix &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;i, i):
                &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; jx &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;j, j):
                    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; kx &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;k, k):
                        &lt;span style=&#34;color:#66d9ef&#34;&gt;yield&lt;/span&gt; Point(ix, jx, kx)

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;waggle&lt;/span&gt;(self, w: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Point&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Point&amp;#39;&lt;/span&gt;:
        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&amp;#39;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        Return a new point reflected/reordered by the given coordinates.
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        Each of w&amp;#39;s x,y,z should be +- 1,2,3 and each of 1,2,3 should be used exactly once.
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        reflect(3, 2, -1) should return Point(z, y, -x) for example.
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        &amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;

        d &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;x, self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;y, self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;z)

        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; Point(
            d[abs(w&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;x)] &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; w&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;x &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;),
            d[abs(w&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;y)] &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; w&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;y &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;),
            d[abs(w&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;z)] &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; w&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;z &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;),
        )

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; __add__(self, other: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Point&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Point&amp;#39;&lt;/span&gt;:
        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&amp;#39;Return the sum of two points.&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;

        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; Point(self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;x &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; other&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;x, self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;y &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; other&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;y, self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;z &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; other&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;z)

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; __sub__(self, other: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Point&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Point&amp;#39;&lt;/span&gt;:
        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&amp;#39;Return the difference of two points, obv.&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;

        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; Point(self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;x &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; other&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;x, self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;y &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; other&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;y, self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;z &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; other&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;z)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Waggle? Waggle. Basically, that&amp;rsquo;s the name I&amp;rsquo;m using for flipping and mirroring about any of x/y/z. Specifically, any ordering of &lt;code&gt;(1, 2, 3)&lt;/code&gt; (each can be positive or negative) to re-order the coordinates and possibly flip them around. That ends up with the 24 possible orientations (&lt;code&gt;all_waggles&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;Next, Scanners:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@dataclass&lt;/span&gt;(frozen&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;True)
&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Scanner&lt;/span&gt;:
    name: str
    points: FrozenSet[Point]

    &lt;span style=&#34;color:#a6e22e&#34;&gt;@staticmethod&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;read&lt;/span&gt;(file: TextIO) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; Optional[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Scanner&amp;#39;&lt;/span&gt;]:
        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&amp;#39;Read a Scanner from a filelike object&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;

        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; (name :&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; file&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;readline()&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;strip(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;- &lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;)):
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; None

        points &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; set()
        &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; line :&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; file&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;readline()&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;strip():
            points&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add(Point(&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;[int(v) &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; v &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; line&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;,&amp;#39;&lt;/span&gt;)]))

        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; Scanner(name, frozenset(points))

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; __or__(self, other: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Scanner&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; Optional[Tuple[Point, Point, Set[Point]]]:
        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&amp;#39;Given another scanner, try to find the overlapping points.&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;

        &lt;span style=&#34;color:#75715e&#34;&gt;# Try every waggle of their scanners, assume I&amp;#39;m always right&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; their_waggle &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; Point&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;all_waggles():
            their_waggled_points &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {
                p&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;waggle(their_waggle)
                &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; p &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; other&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;points
            }

            logging&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;debug(f&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Comparing {self.points=} and {their_waggled_points=}&amp;#39;&lt;/span&gt;)

            &lt;span style=&#34;color:#75715e&#34;&gt;# Choose where we think the &amp;#39;other&amp;#39; scanner is from our perspective&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; my_zero &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;points:
                my_zeroed_points &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {p &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; my_zero &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; p &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;points}

                &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; their_waggled_zero &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; their_waggled_points:
                    their_zeroed_points &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {p &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; their_waggled_zero &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; p &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; their_waggled_points}

                    &lt;span style=&#34;color:#75715e&#34;&gt;# Try to subtract that from all of our points&lt;/span&gt;
                    &lt;span style=&#34;color:#75715e&#34;&gt;# If we have enough matches, that means we know their scanner from our point of view&lt;/span&gt;
                    matches &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; my_zeroed_points &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; their_zeroed_points

                    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; len(matches) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;=&lt;/span&gt; BEACON_OVERLAPPINGNESS:
                        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; (their_waggle, my_zero &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; their_waggled_zero, {p &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; my_zero &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; p &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; matches})

        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; None

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; __repr__(self):
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; f&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;@{{{self.name}}}&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;I don&amp;rsquo;t know why I used &lt;code&gt;s0 | s1&lt;/code&gt; as the operator for overlapping two scanners&amp;hellip; but I did. Yay dunder methods?&lt;/p&gt;
&lt;p&gt;The method here is actually pretty neat. Essentially, the matching algorithm is:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Try every possible &lt;code&gt;waggle&lt;/code&gt; (orientation that the other Scanner could be at)&lt;/li&gt;
&lt;li&gt;Try every possible point from each scanner as the &amp;lsquo;&lt;code&gt;zero&lt;/code&gt;&amp;rsquo; (the point at which we&amp;rsquo;ve overlapping), &lt;code&gt;other&lt;/code&gt; has to have their &lt;code&gt;zero&lt;/code&gt; waggled&lt;/li&gt;
&lt;li&gt;Calculate the offsets from the zero for each&lt;/li&gt;
&lt;li&gt;If the &lt;code&gt;waggle&lt;/code&gt; is correct (so that both Scanners are now facing the same way) and the &lt;code&gt;zeros&lt;/code&gt; actually match&amp;hellip; we&amp;rsquo;re golden. We&amp;rsquo;ll have at least 12 matches and can return&lt;/li&gt;
&lt;li&gt;Calculate the points that overlapped along with the &lt;code&gt;waggle&lt;/code&gt; necessary to convert between the zones&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;That last step took&amp;hellip; rather a while to get right. And all because of a much lower level bug up in the &lt;code&gt;their_waggled_points&lt;/code&gt; part. Man it&amp;rsquo;s hard to debug bad data. Garbage in, garbage out. That&amp;rsquo;s still a neat algorithm though.&lt;/p&gt;
&lt;p&gt;Next&amp;hellip; let&amp;rsquo;s combine these and try to figure out how to actually calculate all of the Beacons.&lt;/p&gt;
&lt;p&gt;First, load the input and find initial mappings between every pair of Scanners. This is&amp;hellip; horribly inefficient. I did at least make sure that if I do &lt;code&gt;[s0, s1]&lt;/code&gt;, then I don&amp;rsquo;t have to do &lt;code&gt;[s1, s0]&lt;/code&gt; (they&amp;rsquo;re the same). But otherwise, I really am going through all of them.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;scanners &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []
&lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; s :&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Scanner&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;read(file):
    scanners&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(s)
s0 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; scanners[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]

logging&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;info(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;=== FINDING INITIAL OFFSETS ===&amp;#39;&lt;/span&gt;)
offsets: MutableMapping[Tuple[Scanner, Scanner], Tuple[Point, Point, Set[Point]]] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {}

&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; s0 &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; scanners:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; s1 &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; scanners:
        logging&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;info(f&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Finding the offset from {s0=} to {s1=}&amp;#39;&lt;/span&gt;)

        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (s1, s0) &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; offsets:
            offsets[s0, s1] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; offsets[s1, s0]

        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; result :&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (s0 &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; s1):
            offsets[s0, s1] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; result
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;That will find Unfortunately, not every pair overlaps. So we can go from 0 to 1 and 1 to 4, but not directly from 0 to 4. And we want to be able to do that, to make sure we have &lt;em&gt;everything&lt;/em&gt; in the same universal coordinate system. So next:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Fill in the entire chart&lt;/span&gt;
logging&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;info(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;=== EXPANDING CHART ===&amp;#39;&lt;/span&gt;)
s0 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; scanners[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]

&lt;span style=&#34;color:#75715e&#34;&gt;# If we don&amp;#39;t have a path from s0 to s1, try to go s0 -&amp;gt; svia -&amp;gt; s1&lt;/span&gt;
updating &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; True
&lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; updating:
    logging&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;info(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Working on expanding iteration&amp;#39;&lt;/span&gt;)
    updating &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; False

    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; s1 &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; scanners[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:]:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (s0, s1) &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; offsets:
            &lt;span style=&#34;color:#66d9ef&#34;&gt;continue&lt;/span&gt;

        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; svia &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; scanners[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:]:
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; s0 &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; svia &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; svia &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; s1:
                &lt;span style=&#34;color:#66d9ef&#34;&gt;continue&lt;/span&gt;

            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; ((s0, svia) &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; offsets &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; (svia, s1) &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; offsets):
                &lt;span style=&#34;color:#66d9ef&#34;&gt;continue&lt;/span&gt;

            logging&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;info(f&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Building a new path from {s0} via {svia} to {s1}&amp;#39;&lt;/span&gt;)

            waggle1, offset1, _ &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; offsets[s0, svia]
            waggle2, offset2, points2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; offsets[svia, s1]

            new_waggle &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; waggle2&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;waggle(waggle1)
            new_offset &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; offset1 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; offset2&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;waggle(waggle1)

            new_points &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {
                offset1 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; p&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;waggle(waggle1)
                &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; p &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; points2
            }

            offsets[s0, s1] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; new_waggle, new_offset, new_points
            updating &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; True
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Getting that &lt;code&gt;new_points&lt;/code&gt; right took a bit too. And it&amp;rsquo;s all so simple&amp;hellip; I enjoy naming things.&lt;/p&gt;
&lt;p&gt;And that&amp;rsquo;s mostly it. Go through now that we know the &lt;code&gt;offset&lt;/code&gt; and &lt;code&gt;waggle&lt;/code&gt; for every Scanner, we can actually map all of the Beacons they&amp;rsquo;d seen into the same coordinate space and de-duplicate:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;part1&lt;/span&gt;(file: typer&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;FileText):

    scanners &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []
    &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; s :&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Scanner&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;read(file):
        scanners&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(s)
    s0 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; scanners[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]

    offsets &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; do_the_actual_work(scanners)

    &lt;span style=&#34;color:#75715e&#34;&gt;# Finally, calculate all of the beacon points&lt;/span&gt;
    logging&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;info(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;=== FINDING BEACONS ===&amp;#39;&lt;/span&gt;)

    all_beacons &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; set()
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; scanner &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; scanners:
        waggle, offset, _ &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; offsets[s0, scanner]
        logging&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;info(f&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Adding beacons from {scanner} at {offset} (with {waggle=})&amp;#39;&lt;/span&gt;)

        all_beacons &lt;span style=&#34;color:#f92672&#34;&gt;|=&lt;/span&gt; {
            offset &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; p&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;waggle(waggle)
            &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; p &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; scanner&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;points
        }

    &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(len(all_beacons))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And that&amp;rsquo;s it!&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ python3 point-matchinator.py part1 input.txt
&lt;span style=&#34;color:#ae81ff&#34;&gt;313&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# time 412607815209ns / 412.61s&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Yeah. That&amp;rsquo;s slow. But it works and at this point, that&amp;rsquo;s enough for me.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>AoC 2021 Day 18: Pairs of Pairs</title>
      <link>https://blog.jverkamp.com/2021/12/18/aoc-2021-day-18-pairs-of-pairs/</link>
      <pubDate>Sat, 18 Dec 2021 00:00:05 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2021/12/18/aoc-2021-day-18-pairs-of-pairs/</guid>
      <description>&lt;h3 id=&#34;source-snailfishhttpsadventofcodecom2021day18&#34;&gt;Source: &lt;a href=&#34;https://adventofcode.com/2021/day/18&#34;&gt;Snailfish&lt;/a&gt;&lt;/h3&gt;
&lt;h4 id=&#34;part-1-given-the-following-definition-of-snailfish-numbers-add-a-series-of-snailfish-numbers-and-return-the-magnitude-of-the-result&#34;&gt;&lt;strong&gt;Part 1:&lt;/strong&gt; Given the following definition of Snailfish numbers, add a series of Snailfish numbers and return the magnitude of the result.&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;A &lt;code&gt;Snailfish&lt;/code&gt; number is defined as a pair &lt;span class=&#34;latex-inline&#34;&gt;\langle a, b \rangle&lt;/span&gt;
 where &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt; can either by integers or nested &lt;code&gt;Snailfish&lt;/code&gt; number&lt;/li&gt;
&lt;li&gt;To add two &lt;code&gt;Snailfish&lt;/code&gt; numbers, &lt;span class=&#34;latex-inline&#34;&gt;c &amp;#43; d = \langle c, d \rangle&lt;/span&gt;
&lt;/li&gt;
&lt;li&gt;To reduce a &lt;code&gt;Snailfish&lt;/code&gt; number to simplest form:
&lt;ul&gt;
&lt;li&gt;If there are any pairs (of integers &lt;span class=&#34;latex-inline&#34;&gt;\langle e, f \rangle&lt;/span&gt;
) nested 5+ levels deep, &lt;code&gt;explode&lt;/code&gt; the leftmost one
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;e&lt;/code&gt; is added to the &lt;em&gt;rightmost&lt;/em&gt; node &lt;em&gt;left&lt;/em&gt; of the exploded pair (if possible)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;f&lt;/code&gt; is added to the &lt;em&gt;leftmost&lt;/em&gt; node &lt;em&gt;right&lt;/em&gt; of the exploded pair (if possible)&lt;/li&gt;
&lt;li&gt;Replace the original pair with a &lt;code&gt;0&lt;/code&gt; (I missed this for a while&amp;hellip;)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;If there are no such pairs and there is at least one integer &lt;code&gt;g&lt;/code&gt; greater than or equal to 10, &lt;code&gt;split&lt;/code&gt; it into a pair &lt;span class=&#34;latex-inline&#34;&gt;\langle h, i \rangle&lt;/span&gt;
 such that &lt;span class=&#34;latex-inline&#34;&gt;h = \left \lfloor \frac{g}{2} \right \rfloor, i = \left \lceil \frac{g}{2} \right \rceil&lt;/span&gt;
.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;The magnitude of &lt;span class=&#34;latex-inline&#34;&gt;|\langle j, k \rangle| = 3|j|&amp;#43;2|k|&lt;/span&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Yeah&amp;hellip; that took a bit to figure out.&lt;/p&gt;
&lt;p&gt;To just parse the numbers, do addition, and do &lt;code&gt;split&lt;/code&gt;, the most natural data structure is going to be a tree:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@dataclass&lt;/span&gt;(frozen&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;True)
&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Snailfish&lt;/span&gt;():
    left: Union[int, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Snailfish&amp;#39;&lt;/span&gt;]
    right: Union[int, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Snailfish&amp;#39;&lt;/span&gt;]

    &lt;span style=&#34;color:#a6e22e&#34;&gt;@staticmethod&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;read&lt;/span&gt;(text: TextIO) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; Optional[Union[int, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Snailfish&amp;#39;&lt;/span&gt;]]:
        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&amp;#39;Read a snailfish from the given filelike object&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;

        c &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; text&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;read(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; c&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;isdigit() &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; c &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;[&amp;#39;&lt;/span&gt;:
            c &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; text&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;read(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)

        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; c &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;[&amp;#39;&lt;/span&gt;:
            left &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Snailfish&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;read(text)
            right &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Snailfish&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;read(text)

            &lt;span style=&#34;color:#66d9ef&#34;&gt;assert&lt;/span&gt; left &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; None
            &lt;span style=&#34;color:#66d9ef&#34;&gt;assert&lt;/span&gt; right &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; None

            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; Snailfish(left, right)

        &lt;span style=&#34;color:#66d9ef&#34;&gt;elif&lt;/span&gt; c&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;isdigit():
            the_once_and_future_number &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []

            &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; c&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;isdigit():
                the_once_and_future_number&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(c)
                c &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; text&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;read(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)

            &lt;span style=&#34;color:#66d9ef&#34;&gt;assert&lt;/span&gt;(c &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;,&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; c &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;]&amp;#39;&lt;/span&gt;)

            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; int(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;join(the_once_and_future_number))

        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; None

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;reduce&lt;/span&gt;(self) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Snailfish&amp;#39;&lt;/span&gt;:
        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&amp;#39;Convert this snailfish to minimum form using the result for explosing and splitting.&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;

        &lt;span style=&#34;color:#75715e&#34;&gt;# TODO&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;magnitude&lt;/span&gt;(self) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; int:
        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&amp;#39;Calculate the magnitude of a snailfish number.&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;

        &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;f&lt;/span&gt;(sf: Union[int, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Snailfish&amp;#39;&lt;/span&gt;]) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; int:
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; isinstance(sf, int):
                &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; sf
            &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
                &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f(sf&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;left) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f(sf&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;right)

        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; f(self)

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; __add__(self, other):
        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&amp;#39;Add two Snailfish by making a larger pair and then reducing it.&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;

        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; Snailfish(self, other)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;reduce()

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; __repr__(self):
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; f&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;{{{self.left}, {self.right}}}&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;But&amp;hellip; it&amp;rsquo;s really quite tricky to use a tree and deal with exploding. You can probably recur up the tree and back down to find the &lt;em&gt;rightmost left node&lt;/em&gt;&amp;hellip; but why? Instead, we&amp;rsquo;re going to swap back and forth to another similar data structure: a depthlist (is there another name for this?). For each leaf node / integer value in the &lt;code&gt;Snailfish&lt;/code&gt; tree, represent that number as a pair &lt;code&gt;(value, depth)&lt;/code&gt;. So&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;latex-inline&#34;&gt;\langle \langle 1, \langle 2, \langle 3, 4 \rangle \rangle \rangle, 5 \rangle&lt;/span&gt;
 would be &lt;code&gt;[(1, 2), (2, 3), (3, 4), (4, 4), (5, 1)]&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@dataclass&lt;/span&gt;(frozen&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;True)
&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Snailfish&lt;/span&gt;():
    &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;to_depthlist&lt;/span&gt;(self) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; List[Tuple[int, int]]:
        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&amp;#39;Convert to list of (value, depth).&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;

        &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;g&lt;/span&gt;(sf: Union[int, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Snailfish&amp;#39;&lt;/span&gt;], depth: int) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; Generator[Tuple[int, int], None, None]:
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; isinstance(sf, int):
                &lt;span style=&#34;color:#66d9ef&#34;&gt;yield&lt;/span&gt; (sf, depth)
            &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
                &lt;span style=&#34;color:#66d9ef&#34;&gt;yield&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; g(sf&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;left, depth &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
                &lt;span style=&#34;color:#66d9ef&#34;&gt;yield&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; g(sf&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;right, depth &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)

        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; list(g(self, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Converting back is a bit trickier, but actually similar to parsing (repeatedly combine pairs at the same depth until everything is combined):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@dataclass&lt;/span&gt;(frozen&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;True)
&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Snailfish&lt;/span&gt;():
    &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;

    &lt;span style=&#34;color:#a6e22e&#34;&gt;@staticmethod&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;from_depthlist&lt;/span&gt;(dls: List[Tuple[int, int]]) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Snailfish&amp;#39;&lt;/span&gt;:
        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&amp;#39;Convert from a list of (value, depth).&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;

        &lt;span style=&#34;color:#75715e&#34;&gt;# To make typing happy, copy to a list that can have either&lt;/span&gt;
        mixedls: List[Tuple[Union[int, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Snailfish&amp;#39;&lt;/span&gt;], int]] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [
            (value, depth)
            &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (value, depth)
            &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; dls
        ]

        &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; len(mixedls) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:
            &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; index, ((left, left_depth), (right, right_depth)) &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; enumerate(zip(mixedls, mixedls[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:])):
                &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; left_depth &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; right_depth:
                    mixedls[index] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (Snailfish(left, right), left_depth &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
                    &lt;span style=&#34;color:#66d9ef&#34;&gt;del&lt;/span&gt; mixedls[index&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]

                    &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;

        &lt;span style=&#34;color:#66d9ef&#34;&gt;assert&lt;/span&gt; isinstance(mixedls[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;][&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;], Snailfish)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; mixedls[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;][&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Using this data structure, it&amp;rsquo;s much easier to deal with &lt;code&gt;explode&lt;/code&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Find the first pair of numbers with the same depth (&lt;code&gt;4&lt;/code&gt; in this case) that are deep enough&lt;/li&gt;
&lt;li&gt;Move the two values over one each&lt;/li&gt;
&lt;li&gt;Add a &lt;code&gt;0&lt;/code&gt; at &lt;code&gt;depth-1&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And splitting is just as easy:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Find the value to split, replace it with two nodes (ceiling and floor of division by 2)&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@dataclass&lt;/span&gt;(frozen&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;True)
&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Snailfish&lt;/span&gt;():
    &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;reduce&lt;/span&gt;(self) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Snailfish&amp;#39;&lt;/span&gt;:
        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&amp;#39;Convert this snailfish to minimum form using the result for explosing and splitting.&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;

        &lt;span style=&#34;color:#75715e&#34;&gt;# Much easier to work with mutable depthlists...&lt;/span&gt;
        dls &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;to_depthlist()

        reducing &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; True
        &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; reducing:
            reducing &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; False
            logging&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;debug(f&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Reducing: dls={dls}, sf={Snailfish.from_depthlist(dls)}&amp;#39;&lt;/span&gt;)

            &lt;span style=&#34;color:#75715e&#34;&gt;# Check for any pairs that needs exploding&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; index, (value, depth) &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; enumerate(dls):
                &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; depth &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; index &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; len(dls) &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; depth &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; dls[index &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;][&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]:
                    logging&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;debug(f&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39; - Exploding at {index=} with {value=} and {depth=}&amp;#39;&lt;/span&gt;)

                    prefix &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; dls[:index]
                    infix &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, depth&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)]
                    suffix &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; dls[index&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:]

                    &lt;span style=&#34;color:#75715e&#34;&gt;# Increase the previous value by one (if it exists)&lt;/span&gt;
                    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; prefix:
                        prefix[&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (prefix[&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;][&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; value, prefix[&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;][&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;])

                    &lt;span style=&#34;color:#75715e&#34;&gt;# Increase the next value by one (if it exists)&lt;/span&gt;
                    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; suffix:
                        suffix[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (suffix[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;][&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; dls[index&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;][&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;], suffix[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;][&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;])

                    dls &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; prefix &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; infix &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; suffix

                    reducing &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; True
                    &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;

            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; reducing:
                &lt;span style=&#34;color:#66d9ef&#34;&gt;continue&lt;/span&gt;

            &lt;span style=&#34;color:#75715e&#34;&gt;# If not exploding, check for any value that needs splitting&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; index, (value, depth) &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; enumerate(dls):
                &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; value &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;:
                    logging&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;debug(f&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39; - Splitting at {index=} with {value=}&amp;#39;&lt;/span&gt;)

                    dls &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (
                        dls[:index]
                        &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; [
                            (math&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;floor(value &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;), depth &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;),
                            (math&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;ceil(value &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;), depth &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;),
                        ]
                        &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; dls[index&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:]
                    )

                    reducing &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; True
                    &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;

        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; Snailfish&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;from_depthlist(dls)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;It&amp;rsquo;s a bit messy, but it works great.&lt;/p&gt;
&lt;p&gt;And now that we have all that&amp;hellip; we can actually do the problem.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;part1&lt;/span&gt;(file: typer&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;FileText):

    sum: Optional[Snailfish] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; None

    &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; sf :&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Snailfish&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;read(file):
        logging&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;info(f&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Adding: {sf} to {sum}&amp;#39;&lt;/span&gt;)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;assert&lt;/span&gt; isinstance(sf, Snailfish)

        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; sum &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; None:
            sum &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; sf
        &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
            sum &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; sf

    &lt;span style=&#34;color:#66d9ef&#34;&gt;assert&lt;/span&gt; sum &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; None

    logging&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;info(f&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Final result: {sum}&amp;#39;&lt;/span&gt;)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(sum&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;magnitude())
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Neat:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ python3 pairs-of-pairs.py part1 input.txt
&lt;span style=&#34;color:#ae81ff&#34;&gt;4433&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# time 443584917ns / 0.44s&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;That was a &amp;hellip; very strange/convoluted problem, but it was an interesting example of why data structures (and being able to convert between one another) is worthwhile.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>AoC 2021 Day 17: Pew-Pewinator</title>
      <link>https://blog.jverkamp.com/2021/12/17/aoc-2021-day-17-pew-pewinator/</link>
      <pubDate>Fri, 17 Dec 2021 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2021/12/17/aoc-2021-day-17-pew-pewinator/</guid>
      <description>&lt;h3 id=&#34;source-trick-shothttpsadventofcodecom2021day17&#34;&gt;Source: &lt;a href=&#34;https://adventofcode.com/2021/day/17&#34;&gt;Trick Shot&lt;/a&gt;&lt;/h3&gt;
&lt;h4 id=&#34;part-1-simulate-a-projectile-with-an-integer-initial-velocity-x-y-air-resistance-that-tries-to-reduce-x-velocity-to-0-and-gravity-that-increases-y-velocity-by-1-each-time-given-a-target-range-find-the-highest-point-reached-by-a-projectile-that-ends-a-tick-not-one-that-crosses-over-within-the-target-area&#34;&gt;&lt;strong&gt;Part 1:&lt;/strong&gt; Simulate a projectile with an integer initial velocity (x, y), air resistance that tries to reduce x-velocity to 0, and gravity that increases y-velocity by 1 each time. Given a target range, find the highest point reached by a projectile that ends a tick (not one that crosses over) within the target area.&lt;/h4&gt;
&lt;p&gt;Oh goodness, this one got weird. Let&amp;rsquo;s start with data structures. A point:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@dataclass&lt;/span&gt;(frozen&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;True)
&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Point&lt;/span&gt;:
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&amp;#39;Represents a point in 2-space, positive y is up&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;

    x: int
    y: int
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;A rectangular target with loading a specific format and the ability to determine if a point is in that rectangle:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@dataclass&lt;/span&gt;(frozen&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;True)
&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Rect&lt;/span&gt;:
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&amp;#39;Represents a rectangle in 2-space, positive Y is up&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;

    position: Point
    width: int
    height: int

    &lt;span style=&#34;color:#a6e22e&#34;&gt;@staticmethod&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;from_file&lt;/span&gt;(file: TextIO):
        m &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; re&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;match(
            &lt;span style=&#34;color:#e6db74&#34;&gt;r&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;target area: x=(-?\d+)\.\.(-?\d+), y=(-?\d+)\.\.(-?\d+)&amp;#39;&lt;/span&gt;,
            file&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;readline()
        )

        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; m:
            x1, x2, y1, y2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; m&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;groups()
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; Rect(
                Point(int(x1), int(y1)),
                int(x2) &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; int(x1),
                int(y2) &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; int(y1)
            )

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; __contains__(self, p: Point):
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; (
            self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;position&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;x &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; p&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;x &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;position&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;x &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;width
            &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;position&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;y &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; p&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;y &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;position&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;y &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;height
        )
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This caused some issues, since an example target of &lt;code&gt;target area: x=20..30, y=-10..-5&lt;/code&gt; &lt;em&gt;should&lt;/em&gt; include the point &lt;code&gt;30, -7&lt;/code&gt; for example. As they say, the two hardest things in computer science are caching, naming things, and off by one errors. 😄&lt;/p&gt;
&lt;p&gt;And finally, the probe itself:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@dataclass&lt;/span&gt;(frozen&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;True)
&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Probe&lt;/span&gt;:
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&amp;#39;Represents a probe with initial position and velocity.&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;

    position: Point
    velocity: Point

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;update&lt;/span&gt;(self) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Probe&amp;#39;&lt;/span&gt;:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; Probe(
            position&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;Point(
                self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;position&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;x &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;velocity&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;x,
                self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;position&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;y &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;velocity&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;y
            ),
            velocity&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;Point(
                self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;velocity&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;x &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; (&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;velocity&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;x &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;velocity&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;x &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;),
                self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;velocity&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;y &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
            )
        )

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;impacts&lt;/span&gt;(self, target: Rect) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; Optional[int]:
        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&amp;#39;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        Tests if the given probe hits the given target.
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        If yes: return the maximum height reached (the coolness factor)
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        If no: return None
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        &amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;

        current &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self
        coolness &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;position&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;y

        &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; current&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;position&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;y &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;=&lt;/span&gt; target&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;position&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;y:
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; current&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;position &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; target:
                &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; coolness

            current &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; current&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;update()
            coolness &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; max(coolness, current&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;position&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;y)

        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; None
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;I made the (admittedly a bit odd for Python) decision for this to be an immutable data structure. That means that &lt;code&gt;update&lt;/code&gt; doesn&amp;rsquo;t change the Probe itself, but rather returns a new updated Probe. It doesn&amp;rsquo;t change that much, but it does change a bit.&lt;/p&gt;
&lt;p&gt;Okay, next up, we want to find all of the possible points that could impact. I expect the best way to do this would be to solve the various kinematic equations and find the single/two best answers, but where&amp;rsquo;s the fun in that? Instead, I&amp;rsquo;m going to try &lt;em&gt;every&lt;/em&gt; possible projectile.&lt;/p&gt;
&lt;p&gt;There&amp;rsquo;s a bit of a caveat to that though, because you don&amp;rsquo;t want to just keep going on forever. So instead, what I did was start at an initial velocity of &lt;code&gt;(0, 0)&lt;/code&gt; (just let the probe drop) and then scan &amp;lsquo;outwards&amp;rsquo;. So &lt;code&gt;(0, -1)&lt;/code&gt;, &lt;code&gt;(1, 0)&lt;/code&gt;, and &lt;code&gt;(0, 1)&lt;/code&gt;. Then all 2 distance ones, etc. Eventually, we would start hitting the target&amp;hellip; and the assumption was that once we stopped hitting it for an entire offset, we would be done.&lt;/p&gt;
&lt;p&gt;Turns out, that wasn&amp;rsquo;t quite correct. There are actually multiple sets of answers. For example, those that lob the probe really high up (high initial velocity) and those that aim lower or even down. Once you&amp;rsquo;ve found all the sets though, you&amp;rsquo;re done:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;all_impacts&lt;/span&gt;(target: Rect, phases: int &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; Generator[Tuple[Probe, int], None, None]:
    logging&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;info(f&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;all_impacts({target=}), starting&amp;#39;&lt;/span&gt;)

    origin &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Point(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
    phase &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;

    &lt;span style=&#34;color:#75715e&#34;&gt;# Original thoughts:&lt;/span&gt;

    &lt;span style=&#34;color:#75715e&#34;&gt;# Even phases mean that you haven&amp;#39;t seen an impact yet&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;# Odd phases mean you&amp;#39;re currently scanning an &amp;#39;impact zone&amp;#39;&lt;/span&gt;

    &lt;span style=&#34;color:#75715e&#34;&gt;# Since there are two &amp;#39;impact zones&amp;#39;, you should expect to go through:&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;# 0: before any impacts&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;# 1: first impact zone&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;# 2: between the zones&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;# 3: second impact zone&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;# 4: done scanning&lt;/span&gt;

    &lt;span style=&#34;color:#75715e&#34;&gt;# Later thoughts:&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;# Apparently there are 6 blocks of solutions total...&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; offset &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; itertools&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;count(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;):
        logging&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;info(f&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;all_impacts({target=}), {offset=}, {phase=}&amp;#39;&lt;/span&gt;)

        at_least_one_impact &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; False

        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; xd &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(offset&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;):
            &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; yd &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;offset, offset&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;):
                &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; abs(xd) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; abs(yd) &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; offset:
                    &lt;span style=&#34;color:#66d9ef&#34;&gt;continue&lt;/span&gt;

                probe &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Probe(origin, Point(xd, yd))
                coolness &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; probe&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;impacts(target)

                &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; coolness &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; None:
                    logging&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;info(f&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;all_impacts({target=}), Hit! {xd=}, {yd=} -&amp;gt; {coolness=}&amp;#39;&lt;/span&gt;)
                    &lt;span style=&#34;color:#66d9ef&#34;&gt;yield&lt;/span&gt;(probe, coolness)

                    at_least_one_impact &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; True

        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; phase &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; at_least_one_impact:
            phase &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;elif&lt;/span&gt; phase &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; at_least_one_impact:
            phase &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;

        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; phase &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; phases &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:
            &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And &amp;hellip; that seems to work well enough, so let&amp;rsquo;s find the highest flying probe:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;part1&lt;/span&gt;(file: typer&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;FileText):

    target &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Rect&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;from_file(file)
    logging&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;info(target)

    most_cool &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; None

    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; probe, coolness &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; all_impacts(target):
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; most_cool &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; None &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; coolness &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; most_cool:
            logging&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;info(f&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;part1: New coolest impact! {probe=}, {coolness=}&amp;#39;&lt;/span&gt;)
            most_cool &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; coolness

    &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(most_cool)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Feel like cheating.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ python3 pew-pewinator.py part1 input.txt
&lt;span style=&#34;color:#ae81ff&#34;&gt;2850&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# time 729939625ns / 0.73s&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Quick enough at least.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>AoC 2021 Day 16: Depacketinator</title>
      <link>https://blog.jverkamp.com/2021/12/16/aoc-2021-day-16-depacketinator/</link>
      <pubDate>Thu, 16 Dec 2021 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2021/12/16/aoc-2021-day-16-depacketinator/</guid>
      <description>&lt;h3 id=&#34;source-packet-decoderhttpsadventofcodecom2021day16&#34;&gt;Source: &lt;a href=&#34;https://adventofcode.com/2021/day/16&#34;&gt;Packet Decoder&lt;/a&gt;&lt;/h3&gt;
&lt;h4 id=&#34;part-1-given-a-recursive-binary-packet-definition-see-below-parse-the-given-packet-return-the-sum-of-each-packets-version&#34;&gt;&lt;strong&gt;Part 1:&lt;/strong&gt; Given a recursive binary packet definition (see below), parse the given packet. Return the sum of each packet&amp;rsquo;s &lt;code&gt;version&lt;/code&gt;.&lt;/h4&gt;
&lt;p&gt;All packet fields are in bits. Possible packet formats:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Name&lt;/th&gt;
&lt;th&gt;Structure&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Literal Value&lt;/td&gt;
&lt;td&gt;&lt;code&gt;AAA 010 [1CCCC]* [1CCCC]&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Type 0 Operator&lt;/td&gt;
&lt;td&gt;&lt;code&gt;AAA BBB 0 DDDDDDDDDDDDDDD (children)&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Type 1 Operator&lt;/td&gt;
&lt;td&gt;&lt;code&gt;AAA BBB 1 EEEEEEEEEEE (children)&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;In all packets:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;AAA&lt;/code&gt; - 3 bits representing the &lt;code&gt;version&lt;/code&gt; of the packet&lt;/li&gt;
&lt;li&gt;&lt;code&gt;BBB&lt;/code&gt; - 3 bits representing the &lt;code&gt;type_id&lt;/code&gt; of the packet&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In literal packets&amp;ndash;where &lt;code&gt;type_id&lt;/code&gt; = 4 (&lt;code&gt;010&lt;/code&gt;)&amp;ndash;the value is an integer encoded in a value similar to &lt;a href=&#34;https://en.wikipedia.org/wiki/UTF-8%20encoding&#34;&gt;UTF-8 encoding&lt;/a&gt;. There will be a sequence of 0 or more 5 bit values &lt;code&gt;1CCCC&lt;/code&gt; (with the &lt;code&gt;1&lt;/code&gt; indicating the number continues, followed by a single &lt;code&gt;0CCCC&lt;/code&gt; segment, ending the value. These &lt;code&gt;C*&lt;/code&gt;s will be concatenated and treated as a single unsigned binary value and converted to an integer.&lt;/p&gt;
&lt;p&gt;In Type 0 Operator packets, the next 15 bits (&lt;code&gt;D{15}&lt;/code&gt;) should be interpreted as an unsigned integer containing the number of following bits that encode &amp;lsquo;child&amp;rsquo; packets. Parse the following &lt;code&gt;D&lt;/code&gt; bits as child packets (perhaps recursively) and attach those to the Type 0 Operator as children.&lt;/p&gt;
&lt;p&gt;In Type 1 Operator packets, the next 11 bits (&lt;code&gt;E{11}&lt;/code&gt;) should be interpreted as an unsigned integer containing the number of child packets (instead of their length). Parse that many child packets (perhaps recursively, only top level children count towards this number &lt;code&gt;E&lt;/code&gt;) and attach those to the Type 1 Operator as children.&lt;/p&gt;
&lt;p&gt;Yeah, that&amp;rsquo;s a mouthful. But it&amp;rsquo;s a pretty awesome excuse to use a few techniques that are common in parsing binary encodings, such as network packets.&lt;/p&gt;
&lt;p&gt;First things first, I want to make a &lt;code&gt;BitStream&lt;/code&gt; class that can take in the data that&amp;rsquo;s going to make up our packets and keep track of where we are. That way, we can read out an arbitrary number of bits (3, 1, 4, 15, and 11 bits in this case, depending on the structure) as whatever types we need:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@dataclass&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;BitStream&lt;/span&gt;:
    index: int
    data: str

    &lt;span style=&#34;color:#a6e22e&#34;&gt;@staticmethod&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;from_hex&lt;/span&gt;(hex_data: str) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;BitStream&amp;#39;&lt;/span&gt;:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; BitStream(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;join(
            &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;{:04b}&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;format(int(c, &lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;)) &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; c &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; hex_data
        ))

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;read_bits&lt;/span&gt;(self, n: int) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; str:
        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&amp;#39;Read n bits from the current position in the bitsting as a string of 0/1&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;

        value &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;data[self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;index:self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;index&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;n]
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;index &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; n

        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;index &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; len(self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;data):
            &lt;span style=&#34;color:#66d9ef&#34;&gt;raise&lt;/span&gt; BitStreamException(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Attempted to read past the end of bitstream&amp;#39;&lt;/span&gt;)

        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; value

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;read_int&lt;/span&gt;(self, n: int) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; int:
        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&amp;#39;Read n bits from the current position and convert to an integer&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;

        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; int(self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;read_bits(n), &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;read_bool&lt;/span&gt;(self) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; bool:
        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&amp;#39;Read the next bit from the current position as True/False&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;

        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;read_bits(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;1&amp;#39;&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; __str__(self):
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;index &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; len(self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;data):
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; f&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;lt;{self.index}/{len(self.data)}, {self.data[self.index:self.index+8]}...&amp;gt;&amp;#39;&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; f&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;lt;{self.index}/{len(self.data)}, {self.data[self.index:]}&amp;gt;&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;That&amp;rsquo;s actually not that bad, I don&amp;rsquo;t think. It&amp;rsquo;s a bit interesting that we&amp;rsquo;re mostly reading in &lt;code&gt;from_hex&lt;/code&gt;, but that just means take each single hex character, turn it into an integer with &lt;code&gt;int(c, 16)&lt;/code&gt; and then print that as a fixed four bits with &lt;code&gt;{:04b}.format(...)&lt;/code&gt;. Other than that, &lt;code&gt;read_bits&lt;/code&gt; will read n bits and advance the current pointer into the stream, and &lt;code&gt;read_int&lt;/code&gt; / &lt;code&gt;read_bool&lt;/code&gt; will wrap that to read a specific kind of value.&lt;/p&gt;
&lt;p&gt;With all that, we should be ready to parse the packets:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@dataclass&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Packet&lt;/span&gt;:
    version: int
    type_id: int

    value: int
    children: List[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Packet&amp;#39;&lt;/span&gt;]

    length: int

    &lt;span style=&#34;color:#a6e22e&#34;&gt;@staticmethod&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;from_hex&lt;/span&gt;(hex: str) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Packet&amp;#39;&lt;/span&gt;:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; Packet&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;from_bitstream(BitStream&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;from_hex(hex))

    &lt;span style=&#34;color:#a6e22e&#34;&gt;@staticmethod&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;from_bitstream&lt;/span&gt;(bits: BitStream, _depth: int &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Packet&amp;#39;&lt;/span&gt;:
        logging&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;info(f&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;{&amp;#34; &amp;#34; * _depth}Parsing new packet at {bits}&amp;#39;&lt;/span&gt;)

        version &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; bits&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;read_int(&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;)
        type_id &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; bits&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;read_int(&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;)
        length &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;

        value &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
        children &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []

        logging&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;info(f&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;{&amp;#34; &amp;#34; * _depth} - {version=}, {type_id=}&amp;#39;&lt;/span&gt;)

        &lt;span style=&#34;color:#75715e&#34;&gt;# Literal values&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; type_id &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;:
            logging&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;info(f&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;{&amp;#34; &amp;#34; * _depth} - Mode=literal&amp;#39;&lt;/span&gt;)

            keep_reading &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; True
            &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; keep_reading:
                keep_reading &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; bits&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;read_bool()
                byte &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; bits&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;read_int(&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;)
                logging&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;info(f&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;{&amp;#34; &amp;#34; * _depth} - Read byte {byte}, will continue: {keep_reading}&amp;#39;&lt;/span&gt;)

                value &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; value &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; byte
                length &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;

        &lt;span style=&#34;color:#75715e&#34;&gt;# Any other operator value&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
            &lt;span style=&#34;color:#75715e&#34;&gt;# The next bit is the length_type_id&lt;/span&gt;
            &lt;span style=&#34;color:#75715e&#34;&gt;# If it&amp;#39;s set, read the number of bits in subpackets&lt;/span&gt;
            length &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; bits&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;read_bool():
                length &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;
                number_of_children &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; bits&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;read_int(&lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;)
                logging&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;info(f&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;{&amp;#34; &amp;#34; * _depth} - Mode=operator, length_type=1 ({number_of_children} children)&amp;#39;&lt;/span&gt;)

                &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; _ &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(number_of_children):
                    child &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Packet&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;from_bitstream(bits, _depth &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
                    children&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(child)

                    length &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; child&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;length

            &lt;span style=&#34;color:#75715e&#34;&gt;# If it&amp;#39;s not, read the number of subpackets&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
                length &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;
                body_length &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; bits&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;read_int(&lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;)
                logging&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;info(f&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;{&amp;#34; &amp;#34; * _depth} - Mode=operator, length_type=0 ({body_length} bits)&amp;#39;&lt;/span&gt;)
                logging&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;info(f&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;{&amp;#34; &amp;#34; * _depth} - {len(bits.data)-bits.index} of {len(bits.data)} remaining&amp;#39;&lt;/span&gt;)

                &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; body_length:
                    child &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Packet&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;from_bitstream(bits, _depth &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
                    children&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(child)

                    body_length &lt;span style=&#34;color:#f92672&#34;&gt;-=&lt;/span&gt; child&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;length
                    length &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; child&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;length

                    logging&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;info(f&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;{&amp;#34; &amp;#34; * _depth} - New child used {child.length} bits, {body_length} remaining&amp;#39;&lt;/span&gt;)

                    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; body_length &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:
                        &lt;span style=&#34;color:#66d9ef&#34;&gt;raise&lt;/span&gt; PacketParseException(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Could not parse packet, too many bits used by children&amp;#39;&lt;/span&gt;)

        p &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Packet(version, type_id, value, children, length)
        logging&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;info(f&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;{&amp;#34; &amp;#34; * _depth} \ Packet parsed: {p}&amp;#39;&lt;/span&gt;)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; p
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;There&amp;rsquo;s a fair amount of debugging code in there&amp;hellip; because this took a bit to get right. And all for a relatively simple mistake. Essentially, we start by taking the bit stream and reading the &lt;code&gt;value&lt;/code&gt; and &lt;code&gt;type_id&lt;/code&gt;. That is always 6 bits. After that, there&amp;rsquo;s a special case for &lt;code&gt;type_id = 4&lt;/code&gt;: literals. That&amp;rsquo;s the first half of the &lt;code&gt;if&lt;/code&gt;. In there, we&amp;rsquo;re going to read 1 + 4 bits at a time until the first bit is 0, adding the other 4 bits as an ever growing base 16 literal. Pretty cool!&lt;/p&gt;
&lt;p&gt;The other two cases depend on the next bit read with &lt;code&gt;bits.read_bool()&lt;/code&gt;. If it&amp;rsquo;s 0, we&amp;rsquo;re parsing a specific number of children. That one&amp;rsquo;s not so bad, because we can just read off &lt;code&gt;Packet.from_bitstream&lt;/code&gt; at the current point for that many children. But we absolutely have to update the length because of the next case:&lt;/p&gt;
&lt;p&gt;If the &lt;code&gt;bits.read_bool()&lt;/code&gt; was 1. In this case, we only know how many bits the child packets are made of. This is actually the more common method in network and other binary formats I&amp;rsquo;ve found, because it lets you skip parsing if you don&amp;rsquo;t actually care about the children. You can just jump ahead that many bits. In the above case with a number of children, you have no idea how large those children actually are, so you have to parse them.&lt;/p&gt;
&lt;p&gt;In any case, we now have perfectly functional parsing of packets. It&amp;rsquo;s pretty cool to see it work too:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; Packet&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;from_hex(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;D2FE28&amp;#39;&lt;/span&gt;)
Packet(version&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;, type_id&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;, value&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2021&lt;/span&gt;, children&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;[], length&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;21&lt;/span&gt;)

&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; Packet&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;from_hex(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;38006F45291200&amp;#39;&lt;/span&gt;)
Packet(version&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, type_id&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;, value&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, children&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;[
    Packet(version&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;, type_id&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;, value&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;, children&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;[], length&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;),
    Packet(version&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, type_id&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;, value&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;, children&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;[], length&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;)
], length&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;49&lt;/span&gt;)

&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; Packet&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;from_hex(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;EE00D40C823060&amp;#39;&lt;/span&gt;)
Packet(version&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;, type_id&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, value&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, children&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;[
    Packet(version&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, type_id&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;, value&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, children&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;[], length&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;), 
    Packet(version&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;, type_id&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;, value&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, children&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;[], length&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;), 
    Packet(version&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, type_id&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;, value&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, children&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;[], length&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;)
], length&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;51&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;I like reading the debug view as well (which is good, since I spent a while staring at it&amp;hellip;)&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; Packet&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;from_hex(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;EE00D40C823060&amp;#39;&lt;/span&gt;)
INFO Parsing new packet at &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;56&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;11101110.&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;..&amp;gt;&lt;/span&gt;
INFO  &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; version&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;, type_id&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;
INFO  &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; Mode&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;operator, length_type&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; (&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; children)
INFO  Parsing new packet at &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;56&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;01010000.&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;..&amp;gt;&lt;/span&gt;
INFO   &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; version&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, type_id&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;
INFO   &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; Mode&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;literal
INFO   &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; Read byte &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, will &lt;span style=&#34;color:#66d9ef&#34;&gt;continue&lt;/span&gt;: False
INFO   \ Packet parsed: Packet(version&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, type_id&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;, value&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, children&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;[], length&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;)
INFO  Parsing new packet at &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;29&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;56&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;10010000.&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;..&amp;gt;&lt;/span&gt;
INFO   &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; version&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;, type_id&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;
INFO   &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; Mode&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;literal
INFO   &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; Read byte &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, will &lt;span style=&#34;color:#66d9ef&#34;&gt;continue&lt;/span&gt;: False
INFO   \ Packet parsed: Packet(version&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;, type_id&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;, value&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, children&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;[], length&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;)
INFO  Parsing new packet at &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;40&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;56&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;00110000.&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;..&amp;gt;&lt;/span&gt;
INFO   &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; version&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, type_id&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;
INFO   &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; Mode&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;literal
INFO   &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; Read byte &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, will &lt;span style=&#34;color:#66d9ef&#34;&gt;continue&lt;/span&gt;: False
INFO   \ Packet parsed: Packet(version&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, type_id&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;, value&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, children&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;[], length&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;)
INFO  \ Packet parsed: Packet(version&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;, type_id&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, value&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, children&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;[Packet(version&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, type_id&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;, value&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, children&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;[], length&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;), Packet(version&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;, type_id&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;, value&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, children&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;[], length&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;), Packet(version&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, type_id&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;, value&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, children&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;[], length&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;)], length&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;51&lt;/span&gt;)

Packet(version&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;, type_id&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, value&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, children&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;[
    Packet(version&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, type_id&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;, value&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, children&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;[], length&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;), 
    Packet(version&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;, type_id&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;, value&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, children&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;[], length&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;), 
    Packet(version&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, type_id&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;, value&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, children&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;[], length&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;)
], length&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;51&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Neat!&lt;/p&gt;
&lt;p&gt;Wrap it to actually satisfy the actual prompt (sum all &lt;code&gt;versions&lt;/code&gt;):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;part1&lt;/span&gt;(file: typer&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;FileText):

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;sum_versions&lt;/span&gt;(p: Packet) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; int:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; p&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;version &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; sum(sum_versions(child) &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; child &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; p&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;children)

    p &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Packet&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;from_hex(file&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;read()&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;strip())
    logging&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;info(p)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(f&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;{sum_versions(p):-16} {line}&amp;#39;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And that&amp;rsquo;s it. A nice recursive &lt;code&gt;sum_versions&lt;/code&gt; that looks into &lt;code&gt;children&lt;/code&gt; if there are any, summing as it goes. Nice. So&amp;hellip; how does it work on the given input?&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;$&lt;/span&gt; python3 depacketinator&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;py part1 input&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;txt
             &lt;span style=&#34;color:#ae81ff&#34;&gt;981&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0055.&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;C000
&lt;span style=&#34;color:#75715e&#34;&gt;# time 63753417ns / 0.06s&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Nice. Quick too.&lt;/p&gt;
&lt;p&gt;So&amp;hellip; while we&amp;rsquo;re here, what was the error that took me forever to figure out? Originally, my &lt;code&gt;else&lt;/code&gt; block (the type 0/1 operators) looked like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;
        &lt;span style=&#34;color:#75715e&#34;&gt;# Any other operator value&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
            &lt;span style=&#34;color:#75715e&#34;&gt;# The next bit is the length_type_id&lt;/span&gt;
            &lt;span style=&#34;color:#75715e&#34;&gt;# If it&amp;#39;s set, read the number of bits in subpackets&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; bits&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;read_bool():
                number_of_children &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; bits&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;read_int(&lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;)
                logging&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;info(f&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;{&amp;#34; &amp;#34; * _depth} - Mode=operator, length_type=1 ({number_of_children} children)&amp;#39;&lt;/span&gt;)

                &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; _ &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(number_of_children):
                    child &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Packet&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;from_bitstream(bits, _depth &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
                    children&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(child)

                    length &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; child&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;length

            &lt;span style=&#34;color:#75715e&#34;&gt;# If it&amp;#39;s not, read the number of subpackets&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
                body_length &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; bits&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;read_int(&lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;)
                logging&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;info(f&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;{&amp;#34; &amp;#34; * _depth} - Mode=operator, length_type=0 ({body_length} bits)&amp;#39;&lt;/span&gt;)
                logging&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;info(f&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;{&amp;#34; &amp;#34; * _depth} - {len(bits.data)-bits.index} of {len(bits.data)} remaining&amp;#39;&lt;/span&gt;)

                &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; body_length:
                    child &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Packet&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;from_bitstream(bits, _depth &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
                    children&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(child)

                    body_length &lt;span style=&#34;color:#f92672&#34;&gt;-=&lt;/span&gt; child&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;length
                    length &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; child&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;length

                    logging&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;info(f&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;{&amp;#34; &amp;#34; * _depth} - New child used {child.length} bits, {body_length} remaining&amp;#39;&lt;/span&gt;)

                    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; body_length &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:
                        &lt;span style=&#34;color:#66d9ef&#34;&gt;raise&lt;/span&gt; PacketParseException(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Could not parse packet, too many bits used by children&amp;#39;&lt;/span&gt;)

        p &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Packet(version, type_id, value, children, length)
        logging&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;info(f&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;{&amp;#34; &amp;#34; * _depth} \ Packet parsed: {p}&amp;#39;&lt;/span&gt;)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; p
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Pretty much the same, no?&lt;/p&gt;
&lt;p&gt;Well, actually there are three very important lines missing. Three lines that, because of how the test packet lengths worked out, led to a number of hard to debug errors, but only in &lt;em&gt;some&lt;/em&gt; of the test cases.&lt;/p&gt;
&lt;p&gt;Any guesses? Look back and compare?&lt;/p&gt;
&lt;p&gt;Turns out, you absolutely need to have the correct lengths for nested operator packets. So 1 bit for the type and either 15 or 11 for the count. It only matters if you have a Type 1 packet with non-literals inside of it (so at least two levels of nesting), otherwise the lengths work well enough, but in that case, it certainly got tricky. It kept looking for more information when there just weren&amp;rsquo;t any more bits to be had.&lt;/p&gt;
&lt;p&gt;Oh, debuggging.&lt;/p&gt;
&lt;p&gt;I really should be writing better test cases, but in this case, that wouldn&amp;rsquo;t have necessarily helped. I &lt;em&gt;knew&lt;/em&gt; which test was failing, I just didn&amp;rsquo;t know (at first) &lt;em&gt;why&lt;/em&gt;. Live and learn.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>AoC 2021 Day 15: Low Ceiling Simulator</title>
      <link>https://blog.jverkamp.com/2021/12/15/aoc-2021-day-15-low-ceiling-simulator/</link>
      <pubDate>Wed, 15 Dec 2021 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2021/12/15/aoc-2021-day-15-low-ceiling-simulator/</guid>
      <description>&lt;h3 id=&#34;source-chitonhttpsadventofcodecom2021day15&#34;&gt;Source: &lt;a href=&#34;https://adventofcode.com/2021/day/15&#34;&gt;Chiton&lt;/a&gt;&lt;/h3&gt;
&lt;h4 id=&#34;part-1-given-a-grid-of-weights-find-the-minimum-path-from-top-left-to-top-right-return-the-total-weight-along-that-path&#34;&gt;&lt;strong&gt;Part 1:&lt;/strong&gt; Given a grid of weights, find the minimum path from top left to top right. Return the total weight along that path.&lt;/h4&gt;
&lt;p&gt;A fairly standard thing to have to do, ripe for the &lt;a href=&#34;https://en.wikipedia.org/wiki/A*%20search%20algorithm&#34;&gt;A* search algorithm&lt;/a&gt;. Which eventually I&amp;rsquo;ll get to, but I&amp;rsquo;ll admit, it wasn&amp;rsquo;t the first algorithm I tried. 😄&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s do this. First, let&amp;rsquo;s assume that we already have a &lt;code&gt;load&lt;/code&gt; function that returns a map of &lt;code&gt;(x, y) -&amp;gt; cost&lt;/code&gt; as we&amp;rsquo;ve done a number of times before. No matter what algorithm we use, the wrapping code is going to be the same:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;part1&lt;/span&gt;(file: typer&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;FileText):

    map &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; load(file)
    best_path &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; explore(map)
    best_score &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; sum(map[x, y] &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (x, y) &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; best_path[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:])

    logging&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;info(f&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;{best_path=}&amp;#39;&lt;/span&gt;)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(f&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;{best_score=}&amp;#39;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now, all we have to do is write an explore function. The first algorithm I tried was to write a cached recursive function (like last time). Essentially:&lt;/p&gt;
&lt;div class=&#34;latex-block&#34;&gt;
bestPath(x, y) = cost(x,y) + minimum \left\{\begin{matrix}
bestPath(x+1, y) \\ 
bestPath(x-1, y) \\ 
bestPath(x, y+1) \\ 
bestPath(x, y-1)
\end{matrix}\right.
&lt;/div&gt;

&lt;p&gt;You have to make sure that you don&amp;rsquo;t recur infinitely (so you have to pass around the points you&amp;rsquo;ve visited so you don&amp;rsquo;t form loops), but other than that, it should work&amp;hellip; Except Python isn&amp;rsquo;t really designed for that. Oh the number of &amp;lsquo;maximum recursion depth reached&amp;rsquo; errors I got. Anyways.&lt;/p&gt;
&lt;p&gt;Next solution:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Start with a map of &amp;lsquo;best known paths&amp;rsquo; from each point to the goal (store the path + the cost)&lt;/li&gt;
&lt;li&gt;Until the map has stabilized (doesn&amp;rsquo;t change for an entire loop), loop across every point (x, y)
&lt;ul&gt;
&lt;li&gt;For each point, check each four neighbors for their minimum (path, cost)&lt;/li&gt;
&lt;li&gt;If their (path, cost) + your cost is less than your current cost (or yours hasn&amp;rsquo;t been set), store it&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;That means that you&amp;rsquo;ll eventually fill in the entire graph. It&amp;rsquo;s not super efficient, since you&amp;rsquo;re going to be running it from top left to bottom right, where the grid fills from bottom right to top left&amp;hellip; but it does work.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ python3 low-ceiling-simulator.py part1 input.txt
best_score&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;687&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# time 2041809750ns / 2.04s&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;That&amp;rsquo;s&amp;hellip; fairly slow already for such a small graph&amp;hellip; but it works for part one. How does the code work?&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;explore&lt;/span&gt;(map: Mapping[Point, int]) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; List[Point]:
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&amp;#39;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    Version 1: Brute force, update all paths and iterate until stable. 
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    &amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;

    width &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; max(x &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (x, _) &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; map)
    height &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; max(y &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (_, y) &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; map)

    bottom_right &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (width &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, height &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)

    best_paths &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {
        bottom_right: (&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, [bottom_right])
    }

    &lt;span style=&#34;color:#75715e&#34;&gt;# Pass until the best path map stops changing&lt;/span&gt;
    best_paths_changed &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; True
    generation &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; best_paths_changed:
        best_paths_changed &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; False
        generation &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
        logging&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;info(f&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;{generation=}, {len(best_paths)}/{len(map)} paths populated&amp;#39;&lt;/span&gt;)

        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(width):
            &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; y &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(height):
                neighbor_scores &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [
                    best_paths[x &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; xd, y &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; yd]
                    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; xd, yd &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; ORTHAGONAL
                    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (x &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; xd, y &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; yd) &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; best_paths
                ]

                &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; neighbor_scores:
                    &lt;span style=&#34;color:#66d9ef&#34;&gt;continue&lt;/span&gt;

                &lt;span style=&#34;color:#75715e&#34;&gt;# Find the best neighbor&lt;/span&gt;
                best_score, best_path &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; min(neighbor_scores)

                new_score &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; map[x, y] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; best_score
                new_path &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [(x, y)] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; best_path

                &lt;span style=&#34;color:#75715e&#34;&gt;# If we haven&amp;#39;t found a path for this point or we found a better one, update&lt;/span&gt;
                &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; (x, y) &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; best_paths &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; new_score &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; best_paths[x, y][&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]:
                    best_paths_changed &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; True
                    best_paths[x, y] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (new_score, new_path)

    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; best_paths[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;][&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;More or less exactly what I described in the psuedo-code, just much longer.&lt;/p&gt;
&lt;p&gt;Okay, let&amp;rsquo;s see what part 2 has in store for us!&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>AoC 2021 Day 14: Polymerizationinator</title>
      <link>https://blog.jverkamp.com/2021/12/14/aoc-2021-day-14-polymerizationinator/</link>
      <pubDate>Tue, 14 Dec 2021 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2021/12/14/aoc-2021-day-14-polymerizationinator/</guid>
      <description>&lt;h3 id=&#34;source-extended-polymerizationhttpsadventofcodecom2021day14&#34;&gt;Source: &lt;a href=&#34;https://adventofcode.com/2021/day/14&#34;&gt;Extended Polymerization&lt;/a&gt;&lt;/h3&gt;
&lt;h4 id=&#34;part-1-given-a-complete-function-fa-b---c-where-any-string-ab-becomes-acb-and-an-input-string-apply-the-function-at-the-same-time-to-every-overlapping-pair-of-letters-repeat-this-time-times-report-the-difference-in-counts-between-the-most-and-least-common-letters-in-the-final-situation&#34;&gt;&lt;strong&gt;Part 1:&lt;/strong&gt; Given a complete function &lt;code&gt;f(a, b) -&amp;gt; c&lt;/code&gt; where any string &lt;code&gt;ab&lt;/code&gt; becomes &lt;code&gt;acb&lt;/code&gt; and an input string, apply the function at the same time to every (overlapping) pair of letters. Repeat this time times. Report the difference in counts between the most and least common letters in the final situation.&lt;/h4&gt;
&lt;p&gt;Okay. First try, let&amp;rsquo;s just solve this directly. Although, since we know that we&amp;rsquo;re going to be inserting into the middle of the list constantly, we can be slightly more efficient by using a &lt;a href=&#34;https://en.wikipedia.org/wiki/linked%20list&#34;&gt;linked list&lt;/a&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;
PolyMap &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Mapping[Tuple[str, str], str]


&lt;span style=&#34;color:#a6e22e&#34;&gt;@dataclass&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Node&lt;/span&gt;(Iterable):
    value: str
    next: Optional[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Node&amp;#39;&lt;/span&gt;]

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;expand_via&lt;/span&gt;(self, map: PolyMap) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Node&amp;#39;&lt;/span&gt;:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;next &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; None:
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; self

        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; a, b &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; zip(self, self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;next):
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (a&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;value, b&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;value) &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; map:
                a&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;next &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Node(map[a&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;value, b&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;value], b)

        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; self

    &lt;span style=&#34;color:#a6e22e&#34;&gt;@staticmethod&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;from_iter&lt;/span&gt;(iter: Iterable) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Node&amp;#39;&lt;/span&gt;:
        head &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; None
        previous &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; None

        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; el &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; iter:
            n &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Node(el, None)

            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; previous:
                previous&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;next &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; n
            &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
                head &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; n

            previous &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; n

        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; head

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; __iter__(self):
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;iter_node &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; self

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;__next__&lt;/span&gt;(self):
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;iter_node:
            &lt;span style=&#34;color:#66d9ef&#34;&gt;raise&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;StopIteration&lt;/span&gt;

        result &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;iter_node
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;iter_node &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;iter_node&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;next
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; result

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; __str__(self):
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;join(self)

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;load&lt;/span&gt;(file: TextIO) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; Tuple[Node, PolyMap]:

    ls &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Node&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;from_iter(file&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;readline()&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;strip())
    file&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;readline()

    map &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {
        (line[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;], line[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]): line[&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;]
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; line &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; file
    }

    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; ls, map

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Okay, there are basically three interesting parts here.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;First, the &lt;code&gt;from_iter&lt;/code&gt; function. That will take any &lt;code&gt;iterable&lt;/code&gt; and make a linked list out of it, returning the head of that list. It does this by creating each Node in turn and attaching it to the previously created node.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Next, the &lt;code&gt;__iter__&lt;/code&gt; and &lt;code&gt;__next__&lt;/code&gt; functions. Together, these make &lt;code&gt;Node&lt;/code&gt; iterable, so that we can do things like &lt;code&gt;for n in ls: ...&lt;/code&gt; where &lt;code&gt;ls&lt;/code&gt; is the head of a linked list.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Finally, &lt;code&gt;expand_via&lt;/code&gt;. That will take in a mapping of pairs to a single character and expand the current linked list with it. Specifically, for any characters &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt; in the linked list, insert a new node between them with value &lt;code&gt;map[a, b]&lt;/code&gt;. Pretty cool right?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;While we&amp;rsquo;re at it, add a function to &lt;code&gt;load&lt;/code&gt; the puzzle definitions from a file: the initial linked list (a string is iterable) and the series of mappings. They&amp;rsquo;re always single characters in a set format, so we can hardcode where they are in the string. Perfect? No. Workable for now, sure.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;With all that, we can write a direct solution to the puzzle:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;@app.command&lt;/span&gt;()
&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;direct&lt;/span&gt;(file: typer&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;FileText, steps: int):
    ls, map &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; load(file)

    &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; time
    start &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; time&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;time()

    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(steps):
        logging&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;info(f&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Generation {i} calculate after {time.time() - start:02f} sec, has {len(list(ls))} elements&amp;#39;&lt;/span&gt;)
        ls&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;expand_via(map)

    counts &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Counter(n&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;value &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; ls)
    logging&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;info(f&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;{counts=}&amp;#39;&lt;/span&gt;)

    most, _ &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; max((qty, c) &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (c, qty) &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; counts&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;items())
    least, _ &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; min((qty, c) &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (c, qty) &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; counts&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;items())

    &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(most &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; least)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;(There&amp;rsquo;s a reason I named this &lt;code&gt;direct&lt;/code&gt; rather than &lt;code&gt;part1&lt;/code&gt;)&lt;/p&gt;
&lt;p&gt;It actually works great:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ python3 polymerizationinator.py direct input.txt &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;
&lt;span style=&#34;color:#ae81ff&#34;&gt;2797&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;So that&amp;rsquo;s all she wrote, right?&lt;/p&gt;
&lt;p&gt;Well&amp;hellip;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>AoC 2021 Day 13: Foldinator</title>
      <link>https://blog.jverkamp.com/2021/12/13/aoc-2021-day-13-foldinator/</link>
      <pubDate>Mon, 13 Dec 2021 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2021/12/13/aoc-2021-day-13-foldinator/</guid>
      <description>&lt;h3 id=&#34;source-transparent-origamihttpsadventofcodecom2021day13&#34;&gt;Source: &lt;a href=&#34;https://adventofcode.com/2021/day/13&#34;&gt;Transparent Origami&lt;/a&gt;&lt;/h3&gt;
&lt;h4 id=&#34;part-1-given-a-set-of-points-and-a-sequence-of-fold-lines-where-you-either-fold-the-bottom-over-the-top-or-right-over-left-determine-how-many-points-exist-after-the-first-fold&#34;&gt;&lt;strong&gt;Part 1:&lt;/strong&gt; Given a set of points and a sequence of &amp;lsquo;fold&amp;rsquo; lines (where you either fold the bottom over the top or right over left), determine how many points exist after the first fold.&lt;/h4&gt;
&lt;p&gt;First, data structures:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@dataclass&lt;/span&gt;(frozen&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;True)
&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Point&lt;/span&gt;:
    x: int
    y: int

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; __repr__(self):
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; f&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;lt;{self.x}, {self.y}&amp;gt;&amp;#39;&lt;/span&gt;


&lt;span style=&#34;color:#a6e22e&#34;&gt;@dataclass&lt;/span&gt;(frozen&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;True)
&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Fold&lt;/span&gt;:
    horizontal: bool
    line: int

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;apply_to&lt;/span&gt;(self, points: Set[Point]) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; Set[Point]:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; {
            Point(
                p&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;x &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;horizontal &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; p&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;x &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;line) &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;line &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; p&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;x,
                p&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;y &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;horizontal &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; p&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;y &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;line) &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;line &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; p&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;y
            )
            &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; p &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; points
        }

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; __repr__(self):
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; f&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;fold@{&amp;#34;x&amp;#34; if self.horizontal else &amp;#34;y&amp;#34;}={self.line}&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Yes. Those could (mostly) be tuples. But I happen to like putting them in their own classes. The &lt;code&gt;apply_to&lt;/code&gt; method is actually the bulk of the functionality here.&lt;/p&gt;
&lt;p&gt;What you need to consider is when the &lt;code&gt;x&lt;/code&gt;/&lt;code&gt;y&lt;/code&gt; of a point &lt;em&gt;do not&lt;/em&gt; change. If you&amp;rsquo;re folding a horizontal line, the &lt;code&gt;x&lt;/code&gt; will &lt;em&gt;never&lt;/em&gt; change (likewise for vertical and &lt;code&gt;y&lt;/code&gt;). Also, if you&amp;rsquo;re in the top or left half, you&amp;rsquo;ll not change.&lt;/p&gt;
&lt;p&gt;There&amp;rsquo;s only 1 in 4 cases that change: if you&amp;rsquo;re below/right of the fold that&amp;rsquo;s changing.&lt;/p&gt;
&lt;p&gt;In that case, you are going to reflect it. In this case, if you&amp;rsquo;re folding a point with &lt;code&gt;y=14&lt;/code&gt; over the line &lt;code&gt;y=7&lt;/code&gt;, then you should end up with &lt;code&gt;1&lt;/code&gt;. Thus &lt;code&gt;line*2-y&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Next, two helper functions in order to load/print the current points:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;load&lt;/span&gt;(file: TextIO) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; Tuple[Set[Point], List[Fold]]:
    points &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; set()
    folds &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []

    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; line &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; file:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;,&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; line:
            xs, ys &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; line&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;,&amp;#39;&lt;/span&gt;)
            points&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add(Point(x&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;int(xs), y&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;int(ys)))

        &lt;span style=&#34;color:#66d9ef&#34;&gt;elif&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;=&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; line:
            left, vs &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; line&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;=&amp;#39;&lt;/span&gt;)
            folds&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(Fold(horizontal&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;left&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;endswith(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;y&amp;#39;&lt;/span&gt;), line&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;int(vs)))

    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; points, folds

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;render&lt;/span&gt;(points: Set[Point]):
    width &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; max(p&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;x &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; p &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; points)
    height &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; max(p&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;y &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; p &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; points)

    &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;join(
        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;join(
            &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;*&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; Point(x, y) &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; points &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39; &amp;#39;&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(width)
        )
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; y &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(height)
    ))
    &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Straight forward enough. Technically, this is a more flexible format than given (you can mix points and folds in any order), but that&amp;rsquo;s a superset of what we&amp;rsquo;re actually interested in, so good enough.&lt;/p&gt;
&lt;p&gt;Now that we have all of that, we can actually do all of the folds&amp;hellip; but we only need the first:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;part1&lt;/span&gt;(file: typer&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;FileText):
    points, folds &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; load(file)
    points &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; folds[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;apply_to(points)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(len(points))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;So short. 😄&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ python3 foldinator.py part1 input.txt
&lt;span style=&#34;color:#ae81ff&#34;&gt;706&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Heh.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>AoC 2021 Day 12: Submarine Spider</title>
      <link>https://blog.jverkamp.com/2021/12/12/aoc-2021-day-12-submarine-spider/</link>
      <pubDate>Sun, 12 Dec 2021 00:00:15 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2021/12/12/aoc-2021-day-12-submarine-spider/</guid>
      <description>&lt;h3 id=&#34;source-passage-pathinghttpsadventofcodecom2021day12&#34;&gt;Source: &lt;a href=&#34;https://adventofcode.com/2021/day/12&#34;&gt;Passage Pathing&lt;/a&gt;&lt;/h3&gt;
&lt;h4 id=&#34;part-1-given-a-list-of-edges-in-a-bi-directional-graph-count-the-number-of-paths-from-start-to-end-such-that-nodes-named-with-lowercase-letters-are-visited-once-and-nodes-with-uppercase-letters-can-be-visited-any-number-of-times&#34;&gt;&lt;strong&gt;Part 1:&lt;/strong&gt; Given a list of edges in a bi-directional graph, count the number of paths from &lt;code&gt;start&lt;/code&gt; to &lt;code&gt;end&lt;/code&gt; such that nodes named with lowercase letters are visited once, and nodes with uppercase letters can be visited any number of times.&lt;/h4&gt;
&lt;p&gt;Interesting. First, let&amp;rsquo;s define a graph structure:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@dataclass&lt;/span&gt;(frozen&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;True)
&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Node&lt;/span&gt;:
    label: str

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;is_big&lt;/span&gt;(self):
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;label&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;isupper()

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; __repr__(self):
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; f&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;lt;{self.label}&amp;gt;&amp;#39;&lt;/span&gt;


&lt;span style=&#34;color:#a6e22e&#34;&gt;@dataclass&lt;/span&gt;(frozen&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;True)
&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Cave&lt;/span&gt;:
    edges: Mapping[Node, Set[Node]]

    &lt;span style=&#34;color:#a6e22e&#34;&gt;@staticmethod&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;from_file&lt;/span&gt;(file: TextIO):

        edges: Dict[Node, Set[Node]] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {}

        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; line &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; file:
            nodes &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [Node(v) &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; v &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; line&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;strip()&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;-&amp;#39;&lt;/span&gt;)]

            &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; node &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; nodes:
                &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; node &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; edges:
                    edges[node] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; set()

            &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; node_a &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; nodes:
                &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; node_b &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; nodes:
                    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; node_a &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; node_b:
                        edges[node_a]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add(node_b)

        &lt;span style=&#34;color:#75715e&#34;&gt;# Convert to a dict&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; Cave(edges)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Originally, I had the pathing function in this class directly, but because it changes for part 2, I extracted it into the part 1 function:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;part1&lt;/span&gt;(file: typer&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;FileText):
    cave &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Cave&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;from_file(file)

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;paths&lt;/span&gt;(node: Node, visited: Set[Node]) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; Generator[List[Node], None, None]:
        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&amp;#39;Yield all possible paths from the given node to &amp;lt;end&amp;gt;.&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;

        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; node &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; END:
            &lt;span style=&#34;color:#66d9ef&#34;&gt;yield&lt;/span&gt; [END]
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;

        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; node&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;is_small() &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; node &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; visited:
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;

        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; next &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; cave&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;edges[node]:
            &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; path &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; paths(next, visited &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; {node}):
                &lt;span style=&#34;color:#66d9ef&#34;&gt;yield&lt;/span&gt; [node] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; path

    count &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; _ &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; paths(START, set()):
        count &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(count)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Because the paths are short enough, we can get away with a simple recursive function. In this case, &lt;code&gt;paths&lt;/code&gt; will take the current point in the graph and a list of nodes visited already (so that we can avoid lowercase nodes that we&amp;rsquo;ve already visited) and generate all paths from that point. It does so by recursion: each step is moving to a neighboring node in the graph, we&amp;rsquo;re assuming the recursive call will generate some number of paths (might be 0), and the base case is the &lt;code&gt;end&lt;/code&gt; node.&lt;/p&gt;
&lt;p&gt;Note: If there are ever two or more &amp;lsquo;big&amp;rsquo; nodes adjacent to each other, this will totally blow up, since you can infinitely loop between the two. Good thing that doesn&amp;rsquo;t come up in our input. :D This could be fixed with &lt;a href=&#34;https://en.wikipedia.org/wiki/cycle%20detection&#34;&gt;cycle detection&lt;/a&gt;, but that would make teh algorithm somewhat slower&amp;hellip;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ python3 submarine-spider.py part1 input.txt
&lt;span style=&#34;color:#ae81ff&#34;&gt;4749&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>AoC 2021 Day 11: Octopus Flashinator</title>
      <link>https://blog.jverkamp.com/2021/12/11/aoc-2021-day-11-octopus-flashinator/</link>
      <pubDate>Sat, 11 Dec 2021 00:00:15 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2021/12/11/aoc-2021-day-11-octopus-flashinator/</guid>
      <description>&lt;h3 id=&#34;source-dumbo-octopushttpsadventofcodecom2021day11&#34;&gt;Source: &lt;a href=&#34;https://adventofcode.com/2021/day/11&#34;&gt;Dumbo Octopus&lt;/a&gt;&lt;/h3&gt;
&lt;h4 id=&#34;part-1-simulate-a-grid-of-numbers-such-that-on-each-tick-advance-all-numbers-by-1-any-number-that-increases-over-9-will-flash-and-add-1-to-all-neighbors-recursively-but-each-cell-can-only-flash-once-and-then-reset-to-0-count-the-number-of-flashes-in-the-first-100-ticks&#34;&gt;&lt;strong&gt;Part 1:&lt;/strong&gt; Simulate a grid of numbers such that on each tick: advance all numbers by 1, any number that increases over 9 will &amp;lsquo;flash&amp;rsquo; and add 1 to all neighbors (recursively, but each cell can only flash once) and then reset to 0. Count the number of flashes in the first 100 ticks.&lt;/h4&gt;
&lt;p&gt;DIRECT SIMULATION.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;
NEIGHBORS &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [
    (&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;), (&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;), (&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;),
    (&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;), (&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;), (&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;),
    (&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;), (&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;), (&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;),
]


&lt;span style=&#34;color:#a6e22e&#34;&gt;@dataclass&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Cavern&lt;/span&gt;:
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&amp;#39;Simulation for https://adventofcode.com/2021/day/11.&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;

    width: int
    height: int
    data: MutableMapping[Tuple[int, int], int]

    &lt;span style=&#34;color:#a6e22e&#34;&gt;@staticmethod&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;from_file&lt;/span&gt;(file: TextIO):
        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&amp;#39;Load a simulation from a file-like object.&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;

        data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {
            (x, y): int(value)
            &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; x, line &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; enumerate(file)
            &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; y, value &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; enumerate(line&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;strip())
        }
        width &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; max(x &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (x, _) &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; data)
        height &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; max(y &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (_, y) &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; data)

        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; Cavern(width, height, data)

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;step&lt;/span&gt;(self):
        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&amp;#39;Advance the simulation 1 step, return the number of flashes.&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;

        flashpoint &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;

        &lt;span style=&#34;color:#75715e&#34;&gt;# First advance everyone 1&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (x, y) &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;data:
            self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;data[x, y] &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;

        &lt;span style=&#34;color:#75715e&#34;&gt;# Repeatedly find any 9s, but only trigger each one once (advanced)&lt;/span&gt;
        advanced &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; set()
        &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; True:

            &lt;span style=&#34;color:#75715e&#34;&gt;# Find the set of points that haven&amp;#39;t been advanced and should&lt;/span&gt;
            to_advance &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {
                (x, y)
                &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (x, y) &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;data
                &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (x, y) &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; advanced &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;data[x, y] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;
            }

            &lt;span style=&#34;color:#75715e&#34;&gt;# If we didn&amp;#39;t, we&amp;#39;re done&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; to_advance:
                &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;

            &lt;span style=&#34;color:#75715e&#34;&gt;# If we did, increment each neighbor&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (x, y) &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; to_advance:
                flashpoint &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;

                &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (xd, yd) &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; NEIGHBORS:
                    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (x &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; xd, y &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; yd) &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;data:
                        &lt;span style=&#34;color:#66d9ef&#34;&gt;continue&lt;/span&gt;

                    self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;data[x &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; xd, y &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; yd] &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;

                advanced&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add((x, y))

        &lt;span style=&#34;color:#75715e&#34;&gt;# Once we&amp;#39;re out of the loop, set all points that actually advanced (hit 9) to 0&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (x, y) &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; advanced:
            self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;data[x, y] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;

        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; flashpoint

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; __str__(self):
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;join(
            &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;join(str(self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;data[x, y]) &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; y &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;height))
            &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;width)
        ) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;I particularly enjoy that &lt;code&gt;step&lt;/code&gt; function. It seems pretty clean to me, using one &lt;code&gt;set&lt;/code&gt; of values we&amp;rsquo;ve already &lt;code&gt;advanced&lt;/code&gt; and calculating a new &lt;code&gt;set&lt;/code&gt; of values &lt;code&gt;to_advance&lt;/code&gt; so that we don&amp;rsquo;t duplicate.&lt;/p&gt;
&lt;p&gt;And it makes for pretty clean code!&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;part1&lt;/span&gt;(file: typer&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;FileText):

    cavern &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Cavern&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;from_file(file)
    flashpoint &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;):
        flashpoint &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; cavern&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;step()

    &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(flashpoint)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;How many flashes?&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ python3 octopus-flashinator.py part1 input.txt
&lt;span style=&#34;color:#ae81ff&#34;&gt;1679&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>AoC 2021 Day 10: Chunkinator</title>
      <link>https://blog.jverkamp.com/2021/12/10/aoc-2021-day-10-chunkinator/</link>
      <pubDate>Fri, 10 Dec 2021 00:00:15 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2021/12/10/aoc-2021-day-10-chunkinator/</guid>
      <description>&lt;h3 id=&#34;source-syntax-scoringhttpsadventofcodecom2021day10&#34;&gt;Source: &lt;a href=&#34;https://adventofcode.com/2021/day/10&#34;&gt;Syntax Scoring&lt;/a&gt;&lt;/h3&gt;
&lt;h4 id=&#34;part-1-given-a-sequence-of----and--with-nesting-allowed-find-the-first-syntax-error-where-the-wrong-closing-symbol-is-used-scoring-3-57-1197-and-25137-respectively-for-each-error-calculate-the-total-error-score&#34;&gt;&lt;strong&gt;Part 1:&lt;/strong&gt; Given a sequence of () [] {}, and &amp;lt;&amp;gt; with nesting allowed. Find the first syntax error (where the wrong closing symbol is used). Scoring 3, 57, 1197, and 25137 respectively for each error, calculate the total error score.&lt;/h4&gt;
&lt;p&gt;Interesting. Let&amp;rsquo;s use Python exceptions!&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Using the strings directly is fine for python, but not mypy&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# chunkinator.py:38: error: Unpacking a string is disallowed&lt;/span&gt;
pairs &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [tuple(pair) &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; pair &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;()&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;[]&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;{}&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;lt;&amp;gt;&amp;#39;&lt;/span&gt;]]

&lt;span style=&#34;color:#a6e22e&#34;&gt;@dataclass&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ParseMismatchException&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;Exception&lt;/span&gt;):
    expected: str
    actual: str


&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;parse&lt;/span&gt;(line: str):
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&amp;#39;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    Parse a line of matching pairs. For every left, you must match the corresponding right (respecting nesting).
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    If a mismatch is detected, raise a ParseMismatchException containing the expected/actual character.
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    Otherwise, return True
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    &amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;

    stack &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []

    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; c &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; line:
        matched &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; False

        &lt;span style=&#34;color:#75715e&#34;&gt;# Start a new matching pair&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; left, right &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; pairs:
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; c &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; left:
                stack&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(right)
                matched &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; True
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; matched:
            &lt;span style=&#34;color:#66d9ef&#34;&gt;continue&lt;/span&gt;

        &lt;span style=&#34;color:#75715e&#34;&gt;# Otherwise, we have a closing character, check the stack&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; c &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; (top :&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; stack&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pop()):
            &lt;span style=&#34;color:#66d9ef&#34;&gt;continue&lt;/span&gt;

        &lt;span style=&#34;color:#75715e&#34;&gt;# Otherwise, we have a failed match&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;raise&lt;/span&gt; ParseMismatchException(expected&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;top, actual&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;c)
    &lt;span style=&#34;color:#75715e&#34;&gt;# Otherwise, yay!&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; True
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;I expect that we&amp;rsquo;ll want to do something with &amp;lsquo;incomplete&amp;rsquo; matches in Part 2, but we haven&amp;rsquo;t had to do that yet. So let&amp;rsquo;s use this to solve the problem!&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;part1&lt;/span&gt;(file: typer&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;FileText):

    scores &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;)&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;]&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;57&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;}&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;1197&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;gt;&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;25137&lt;/span&gt;}
    total_score &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; line &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; file:
        line &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; line&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;strip()

        &lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt;:
            parse(line)

        &lt;span style=&#34;color:#66d9ef&#34;&gt;except&lt;/span&gt; ParseMismatchException &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; ex:
            total_score &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; scores[ex&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;actual]

    &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(total_score)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;I like it when the parsing function does most of the work!&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ python3 chunkinator.py part1 input.txt
&lt;span style=&#34;color:#ae81ff&#34;&gt;167379&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>AoC 2021 Day 9: Local Minimum Deminifier</title>
      <link>https://blog.jverkamp.com/2021/12/09/aoc-2021-day-9-local-minimum-deminifier/</link>
      <pubDate>Thu, 09 Dec 2021 00:00:15 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2021/12/09/aoc-2021-day-9-local-minimum-deminifier/</guid>
      <description>&lt;h3 id=&#34;source-smoke-basinhttpsadventofcodecom2021day9&#34;&gt;Source: &lt;a href=&#34;https://adventofcode.com/2021/day/9&#34;&gt;Smoke Basin&lt;/a&gt;&lt;/h3&gt;
&lt;h4 id=&#34;part-1-given-a-heightmap-find-all-local-minimums-return-the-sum-of-minimum-height--1-for-each-local-minimum&#34;&gt;&lt;strong&gt;Part 1:&lt;/strong&gt; Given a heightmap, find all local minimums. Return the sum of (minimum height + 1) for each local minimum.&lt;/h4&gt;
&lt;p&gt;First, as is often the case, let&amp;rsquo;s load the data:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;load&lt;/span&gt;(file: TextIO) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; MutableMapping[Tuple[int, int], int]:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; {
        (x, y): int(height)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; y, line &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; enumerate(file)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; x, height &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; enumerate(line&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;strip())
    }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This could more efficiently have been stored in a 2D array, but I really like dicts of &lt;code&gt;point -&amp;gt; value&lt;/code&gt; for this sort of thing. Especially because in Python you don&amp;rsquo;t actually need the &lt;code&gt;()&lt;/code&gt; for tuples in most cases, just the comma. So &lt;code&gt;heightmap[x,y]&lt;/code&gt; works great.&lt;/p&gt;
&lt;p&gt;After we have that data, it&amp;rsquo;s just a matter of checking each point to see if all 2/3/4 neighbors are larger than a specific point, while at the same time making sure that we don&amp;rsquo;t run off the edge of the map.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@app.command&lt;/span&gt;()
&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;part1&lt;/span&gt;(file: typer&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;FileText):

    heightmap &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; load(file)
    total_risk &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (x, y), height &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; heightmap&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;items():
        neighbor_heights &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [
            heightmap&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;get((x &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; xd, y &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; yd), &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;)
            &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; xd, yd &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; ORTHAGONAL_NEIGHBORS
        ]

        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; min(neighbor_heights) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; height:
            total_risk &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; height &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(f&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;{total_risk=}&amp;#39;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;ORTHAGONAL_NEIGHBORS = [(-1, 0), (1, 0), (0, -1), (0, 1)]&lt;/code&gt;. And that&amp;rsquo;s all we need:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ python3 local-minimum-deminifier.py part1 input.txt
total_risk&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;491&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>AoC 2021 Day 8: Seven Segment Demystifier</title>
      <link>https://blog.jverkamp.com/2021/12/08/aoc-2021-day-8-seven-segment-demystifier/</link>
      <pubDate>Wed, 08 Dec 2021 00:00:10 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2021/12/08/aoc-2021-day-8-seven-segment-demystifier/</guid>
      <description>&lt;h3 id=&#34;source-seven-segment-searchhttpsadventofcodecom2021day8&#34;&gt;Source: &lt;a href=&#34;https://adventofcode.com/2021/day/8&#34;&gt;Seven Segment Search&lt;/a&gt;&lt;/h3&gt;
&lt;h4 id=&#34;part-1-simulate-a-hahahugoshortcode-s0-hbhb-where-you-do-not-know-which-input-wire-controls-which-segment-given-the-wires-used-in-all-ten-digits-and-four-output-digits-count-how-many-times-1-4-7-and-8-are-outputted&#34;&gt;&lt;strong&gt;Part 1:&lt;/strong&gt; Simulate a &lt;a href=&#34;https://en.wikipedia.org/wiki/seven%20segment%20displey&#34;&gt;seven segment displey&lt;/a&gt; where you do not know which input wire controls which segment. Given the wires used in all ten digits and four output digits, count how many times 1, 4, 7, and 8 are outputted.&lt;/h4&gt;
&lt;p&gt;This one took me &lt;em&gt;far&lt;/em&gt; longer to work out than I&amp;rsquo;d care to admit. And it wasn&amp;rsquo;t at all because I had the wrong approach (I went for brute force again), but rather because I had &lt;em&gt;mistyped one character&lt;/em&gt; in my input. Bah humbug. That&amp;rsquo;s why you write tests&amp;hellip; Oy.&lt;/p&gt;
&lt;p&gt;Like I mentioned, I&amp;rsquo;m just going to try to brute force this problem. It will be slower than using their advice (the advice being that there is always 1 input with two segments (one) and 1 with 3 (seven). Instead, brute forcing all ten digits makes for much cleaner code. First, let&amp;rsquo;s set up some constants:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Seven segment display&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#   0:      1:      2:      3:      4:&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#  aaaa    ....    aaaa    aaaa    ....&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# b    c  .    c  .    c  .    c  b    c&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# b    c  .    c  .    c  .    c  b    c&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#  ....    ....    dddd    dddd    dddd&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# e    f  .    f  e    .  .    f  .    f&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# e    f  .    f  e    .  .    f  .    f&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#  gggg    ....    gggg    gggg    ....&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#   5:      6:      7:      8:      9:&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#  aaaa    aaaa    aaaa    aaaa    aaaa&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# b    .  b    .  .    c  b    c  b    c&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# b    .  b    .  .    c  b    c  b    c&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#  dddd    dddd    ....    dddd    dddd&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# .    f  e    f  .    f  e    f  .    f&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# .    f  e    f  .    f  e    f  .    f&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#  gggg    gggg    ....    gggg    gggg&lt;/span&gt;

SEGMENTS &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [
    {&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;b&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;c&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;e&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;f&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;g&amp;#39;&lt;/span&gt;},
    {&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;c&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;f&amp;#39;&lt;/span&gt;},
    {&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;c&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;d&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;e&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;g&amp;#39;&lt;/span&gt;},
    {&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;c&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;d&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;f&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;g&amp;#39;&lt;/span&gt;},
    {&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;b&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;c&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;d&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;f&amp;#39;&lt;/span&gt;},
    {&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;b&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;d&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;f&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;g&amp;#39;&lt;/span&gt;},
    {&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;b&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;d&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;e&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;f&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;g&amp;#39;&lt;/span&gt;},
    {&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;c&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;f&amp;#39;&lt;/span&gt;},
    {&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;b&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;c&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;d&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;e&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;f&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;g&amp;#39;&lt;/span&gt;},
    {&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;b&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;c&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;d&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;f&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;g&amp;#39;&lt;/span&gt;},
]

ALPHABET &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;abcdefg&amp;#39;&lt;/span&gt;
MAPPINGS &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [
    dict(zip(ALPHABET, ordering))
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; ordering &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; itertools&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;permutations(ALPHABET)
]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The &lt;code&gt;SEGMENTS&lt;/code&gt; define a set of correctly labeled wires goes to each segment (in order). So &lt;code&gt;0&lt;/code&gt; uses all of them but &lt;code&gt;d&lt;/code&gt;, &lt;code&gt;1&lt;/code&gt; uses only &lt;code&gt;c&lt;/code&gt; and &lt;code&gt;f&lt;/code&gt;, etc.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;MAPPINGS&lt;/code&gt; is a neat trick. Using &lt;code&gt;&lt;a href=&#34;https://docs.python.org/3/search.html?q=itertools.permutations&#34;&gt;itertools.permutations&lt;/a&gt;&lt;/code&gt;
, we can generate all possible arrangements of the 7 letters in &lt;code&gt;ALPHABET&lt;/code&gt;. We then zip each &lt;code&gt;ordering&lt;/code&gt; up with &lt;code&gt;ALPHABET&lt;/code&gt;, convert to a &lt;code&gt;dict&lt;/code&gt; and we have a conversion. For example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; MAPPINGS[&lt;span style=&#34;color:#ae81ff&#34;&gt;286&lt;/span&gt;]
{&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;b&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;d&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;c&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;c&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;d&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;g&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;e&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;f&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;f&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;b&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;g&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;e&amp;#39;&lt;/span&gt;}
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; MAPPINGS[&lt;span style=&#34;color:#ae81ff&#34;&gt;286&lt;/span&gt;][&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;]
&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; MAPPINGS[&lt;span style=&#34;color:#ae81ff&#34;&gt;286&lt;/span&gt;][&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;g&amp;#39;&lt;/span&gt;]
&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;e&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In this case, input wire &lt;code&gt;a&lt;/code&gt; maps to output &lt;code&gt;a&lt;/code&gt;, but &lt;code&gt;g&lt;/code&gt; maps to &lt;code&gt;e&lt;/code&gt;, etc.&lt;/p&gt;
&lt;p&gt;Okay. Fun part. For each input, we have all ten digits, with the input wires that makes those up, but we don&amp;rsquo;t know which mapping matches. But we do know if a &lt;code&gt;mapping&lt;/code&gt; is valid, it will have to turn each of those ten inputs into one of the possible &lt;code&gt;SEGMENTS&lt;/code&gt;. So we can do this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;load&lt;/span&gt;(file: TextIO) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; Generator[List[int], None, None]:
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&amp;#39;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    Load an input file with a scrambled set of 7 segment displays than 4 output digits.&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; line &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; file:
        raw_inputs, raw_outputs &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; line&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39; | &amp;#39;&lt;/span&gt;)
        inputs &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [set(input) &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; input &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; raw_inputs&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;split()]
        outputs &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [set(output) &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; output &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; raw_outputs&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;split()]

        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; mapping &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; MAPPINGS:
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; any(
                {mapping[v] &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; v &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; input} &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; SEGMENTS
                &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; input &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; inputs
            ):
                &lt;span style=&#34;color:#66d9ef&#34;&gt;continue&lt;/span&gt;

            &lt;span style=&#34;color:#66d9ef&#34;&gt;yield&lt;/span&gt; [
                SEGMENTS&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;index({mapping[v] &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; v &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; output})
                &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; output &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; outputs
            ]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We&amp;rsquo;ll take the input (which looks like &lt;code&gt;acedgfb cdfbe gcdfa fbcad dab cefabd cdfgeb eafb cagedb ab | cdfeb fcadb cdfeb cdbaf&lt;/code&gt;), split the input and output, and then go through each &lt;code&gt;mapping&lt;/code&gt;. The line &lt;code&gt;{mapping[v] for v in input}&lt;/code&gt; creates the output given the mapping, so we apply that to every &lt;code&gt;input&lt;/code&gt; in &lt;code&gt;inputs&lt;/code&gt; and check for any &lt;em&gt;not&lt;/em&gt; in &lt;code&gt;SEGMENTS&lt;/code&gt;. If that&amp;rsquo;s the case, the mapping isn&amp;rsquo;t valid, so skip it. We should have exactly 1 mapping that&amp;rsquo;s valid, so decode the outputs (using that same mapping) and &lt;code&gt;yield&lt;/code&gt; the resulting digits.&lt;/p&gt;
&lt;p&gt;I expect that&amp;rsquo;s overkill / already implementing part 2&amp;hellip; but that&amp;rsquo;s okay!&lt;/p&gt;
&lt;p&gt;Since we have the digits, count up the 1, 4, 7, and 8 (they&amp;rsquo;re the easiest to determine).&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;part1&lt;/span&gt;(file: typer&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;FileText):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(sum(
        &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; digit &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; (&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; digits &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; load(file)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; digit &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; digits
    ))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Yeah&amp;hellip; that&amp;rsquo;s it!&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ python3 seven-segment-demystifier.py part1 input.txt
&lt;span style=&#34;color:#ae81ff&#34;&gt;349&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>AoC 2021 Day 7: Brachyura Aligner</title>
      <link>https://blog.jverkamp.com/2021/12/07/aoc-2021-day-7-brachyura-aligner/</link>
      <pubDate>Tue, 07 Dec 2021 00:00:10 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2021/12/07/aoc-2021-day-7-brachyura-aligner/</guid>
      <description>&lt;h3 id=&#34;source-the-treachery-of-whaleshttpsadventofcodecom2021day7&#34;&gt;Source: &lt;a href=&#34;https://adventofcode.com/2021/day/7&#34;&gt;The Treachery of Whales&lt;/a&gt;&lt;/h3&gt;
&lt;h4 id=&#34;part-1-given-a-list-of-numbers-find-the-minimum-integer-i-such-the-sum-difference-of-each-number-and-i-is-minimized&#34;&gt;&lt;strong&gt;Part 1:&lt;/strong&gt; Given a list of numbers, find the minimum integer &lt;code&gt;I&lt;/code&gt; such the sum difference of each number and I is minimized.&lt;/h4&gt;
&lt;p&gt;There is probably a fancy number theory way of doing it to solve directly for &lt;code&gt;I&lt;/code&gt;, but it&amp;rsquo;s a really quick problem to brute force:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;part1&lt;/span&gt;(file: typer&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;FileText):

    positions &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [
        int(value)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; line &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; file
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; value &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; line&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;,&amp;#39;&lt;/span&gt;)
    ]

    fuel, target &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; min(
        (
            sum(abs(position &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; target) &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; position &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; positions),
            target
        )
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; target &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(min(positions), max(positions)&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
    )

    &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(f&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;{target=}, {fuel=}&amp;#39;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Load in the numbers, calculate every possible &lt;code&gt;target&lt;/code&gt; from minimum to maximum and the sum distance for that value of &lt;code&gt;I&lt;/code&gt;, then return just the minimum such value.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ python3 brachyura-aligner.py part1 input.txt
target&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;323, fuel&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;336040&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Quick.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>AoC 2021 Day 6: We All Glow Down Here</title>
      <link>https://blog.jverkamp.com/2021/12/06/aoc-2021-day-6-we-all-glow-down-here/</link>
      <pubDate>Mon, 06 Dec 2021 00:00:10 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2021/12/06/aoc-2021-day-6-we-all-glow-down-here/</guid>
      <description>&lt;h3 id=&#34;source-latternfishhttpsadventofcodecom2021day6&#34;&gt;Source: &lt;a href=&#34;https://adventofcode.com/2021/day/6&#34;&gt;Latternfish&lt;/a&gt;&lt;/h3&gt;
&lt;h4 id=&#34;part-1-simulate-a-population-of-lanternfish-each-fish-is-immortal-starts-having-children-after-9-days-and-has-another-child-after-7-more-days-calculate-the-number-of-fish-after-80-days&#34;&gt;&lt;strong&gt;Part 1:&lt;/strong&gt; Simulate a population of lanternfish. Each fish is immortal, starts having children after 9 days, and has another child after 7 more days. Calculate the number of fish after 80 days.&lt;/h4&gt;
&lt;p&gt;I can almost guarantee that part 2 will be scaling up significantly, so the obvious answer of keeping a list of ages and simulating each will&amp;hellip; probably get very slow. Instead, we don&amp;rsquo;t care at all about individual fish, let&amp;rsquo;s just keep their ages:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;School&lt;/span&gt;:
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&amp;#39;Represents a school of fish.&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; __init__(self, fish):
        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&amp;#39;Loads the given list of fish into a map of ages.&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;

        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {
            age: &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; age &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;)
        }

        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; each &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; fish:
            self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;data[each] &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;

    &lt;span style=&#34;color:#a6e22e&#34;&gt;@staticmethod&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;from_file&lt;/span&gt;(file: TextIO):
        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&amp;#39;Load a school from a file-like object&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;

        fish &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [
            int(age)
            &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; line &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; file
            &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; age &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; line&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;,&amp;#39;&lt;/span&gt;)
        ]

        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; School(fish)

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;step&lt;/span&gt;(self):
        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&amp;#39;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        Advance this school 1 day.
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        All fish increase in age by 1 tick
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        Fish that are of a spawning age reset to 7 days to spawn and create a new 9 day to spawn fish. 
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        Remember 0 based indexing.
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        &amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;

        &lt;span style=&#34;color:#75715e&#34;&gt;# Remember how many fish are going to spawn&lt;/span&gt;
        breeding &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;data[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]

        &lt;span style=&#34;color:#75715e&#34;&gt;# Increase age of each fish by 1&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; age &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;):
            self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;data[age &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;data[age]

        &lt;span style=&#34;color:#75715e&#34;&gt;# Each fish that spawns moves to age 6 (don&amp;#39;t overwrite previously age 7) and spawns a new one of age 8&lt;/span&gt;
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;data[&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; breeding
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;data[&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; breeding

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; __str__(self):
        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&amp;#39;Return a comma-delimited list of fish ages.&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;

        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;,&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;join(
            str(age)
            &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; age, qty &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;data&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;items()
            &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; _ &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(qty)
        )

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;size&lt;/span&gt;(self):
        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&amp;#39;Return the number of fish in the school.&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;

        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; sum(qty &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; age, qty &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;data&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;items())
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;That really handles it. Most of it is bookkeeping: loading in the fish from a file, printing them nicely, and counting the &lt;code&gt;len&lt;/code&gt; / number of fish. The interesting bit is &lt;code&gt;step&lt;/code&gt;, where we have to be a little careful with ages:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;All fish age 1-8 increase in age 1 step (which means they are one step closer to breeding age)&lt;/li&gt;
&lt;li&gt;All fish age 0 revert to age 6 (which means 6 steps to breeding age) plus spawn a new one&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If we count up, that means each number overwrites the one we&amp;rsquo;ve already done, which is fine.&lt;/p&gt;
&lt;p&gt;And&amp;hellip; that&amp;rsquo;s all we really need:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@app.command&lt;/span&gt;()
&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;(ticks: int, file: typer&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;FileText):
    school &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; School&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;from_file(file)

    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(ticks):
        school&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;step()

    &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(school&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;size())
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Run it for 80:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ python3 we-all-glow-down-here.py &lt;span style=&#34;color:#ae81ff&#34;&gt;80&lt;/span&gt; input.txt
&lt;span style=&#34;color:#ae81ff&#34;&gt;395627&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Fin.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>AoC 2021 Day 5: Linear Avoidinator</title>
      <link>https://blog.jverkamp.com/2021/12/05/aoc-2021-day-5-linear-avoidinator/</link>
      <pubDate>Sun, 05 Dec 2021 00:00:10 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2021/12/05/aoc-2021-day-5-linear-avoidinator/</guid>
      <description>&lt;h3 id=&#34;source-hydrothermal-venturehttpsadventofcodecom2021day5&#34;&gt;Source: &lt;a href=&#34;https://adventofcode.com/2021/day/5&#34;&gt;Hydrothermal Venture&lt;/a&gt;&lt;/h3&gt;
&lt;h4 id=&#34;part-1-given-a-list-of-lines-find-the-number-of-integer-points-which-are-covered-by-more-than-one-line-ignore-non-vertical-and-non-horizontal-lines&#34;&gt;&lt;strong&gt;Part 1:&lt;/strong&gt; Given a list of lines, find the number of integer points which are covered by more than one line (ignore non-vertical and non-horizontal lines).&lt;/h4&gt;
&lt;p&gt;Okay. Start with the data structures:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@dataclass&lt;/span&gt;(frozen&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;True)
&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Point&lt;/span&gt;:
    x: int
    y: int


&lt;span style=&#34;color:#a6e22e&#34;&gt;@dataclass&lt;/span&gt;(frozen&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;True)
&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Line&lt;/span&gt;:
    p1: Point
    p2: Point

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;is_vertical&lt;/span&gt;(self):
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;p1&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;x &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;p2&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;x

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;is_horizontal&lt;/span&gt;(self):
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;p1&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;y &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;p2&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;y

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;is_orthagonal&lt;/span&gt;(self):
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;is_vertical() &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;is_horizontal()

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;points&lt;/span&gt;(self):
        &lt;span style=&#34;color:#75715e&#34;&gt;# TODO: handle lines that aren&amp;#39;t vertical, horizontal, or diagonal&lt;/span&gt;

        xd &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;p1&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;x &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;p2&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;x &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; (&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;p1&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;x &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;p2&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;x &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
        yd &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;p1&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;y &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;p2&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;y &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; (&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;p1&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;y &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;p2&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;y &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)

        p &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;p1
        &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; p &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;p2:
            &lt;span style=&#34;color:#66d9ef&#34;&gt;yield&lt;/span&gt; p
            p &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Point(p&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;x &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; xd, p&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;y &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; yd)

        &lt;span style=&#34;color:#66d9ef&#34;&gt;yield&lt;/span&gt; p
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Dataclasses are great. They give you constructors and a bunch of other things for free. On top of that, if you specify &lt;code&gt;frozen=True&lt;/code&gt;, making them immutable, you also get &lt;code&gt;hashable&lt;/code&gt; types for free (which I&amp;rsquo;ll use in the problem).&lt;/p&gt;
&lt;p&gt;Perhaps the most interesting bit here is the function that will iterate through the &lt;code&gt;points&lt;/code&gt; in a &lt;code&gt;List&lt;/code&gt;. Specifically, it will figure out the x and y delta (&lt;code&gt;xd&lt;/code&gt; and &lt;code&gt;yd&lt;/code&gt;) and repeatedly add that until you hit the end point.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; this only works for lines that are vertical, horizontal, or diagonal (at 45 degrees). Anything else needs a better &lt;a href=&#34;https://en.wikipedia.org/wiki/line%20drawing%20algorithm&#34;&gt;line drawing algorithm&lt;/a&gt; (of which there are a few). If we need it, I&amp;rsquo;ll implement it.&lt;/p&gt;
&lt;p&gt;Next, use that to parse:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;parse&lt;/span&gt;(file: TextIO) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; List[Line]:
    result &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []

    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; line &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; file:
        x1, y1, x2, y2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [int(v) &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; v &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; line&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;replace(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39; -&amp;gt; &amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;,&amp;#39;&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;,&amp;#39;&lt;/span&gt;)]
        result&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(Line(Point(x1, y1), Point(x2, y2)))

    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; result
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The input format is &lt;code&gt;x1,y1 -&amp;gt; x2,y2&lt;/code&gt;, but it&amp;rsquo;s easier to split and convert if we do it all directly. There are a few other ways we could have done this: splitting on anything non-numeric or using a regular expression / something else for parsing directly. But I think this is clear enough.&lt;/p&gt;
&lt;p&gt;And with all that, the problem is actually pretty short:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;part1&lt;/span&gt;(file: typer&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;FileText):

    lines &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; parse(file)
    counter: MutableMapping[Point, int] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; collections&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Counter()

    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; line &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; lines:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; line&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;is_orthagonal():
            &lt;span style=&#34;color:#66d9ef&#34;&gt;continue&lt;/span&gt;

        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; point &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; line&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;points():
            counter[point] &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(sum(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; count &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; point, count &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; counter&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;items()))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We&amp;rsquo;ll use the built in &lt;code&gt;collections.Counter&lt;/code&gt; datatype, since that&amp;rsquo;s exactly what we&amp;rsquo;re doing: counting things. Then just iterate over every line, skip the non-orthagonal ones, iterate over every point, and count them up. At the end, print the number that we saw more than once. Et voila.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ python3 linear-avoidinator.py part1 input.txt
&lt;span style=&#34;color:#ae81ff&#34;&gt;5632&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>AoC 2021 Day 4: His Name Oh</title>
      <link>https://blog.jverkamp.com/2021/12/04/aoc-2021-day-4-his-name-oh/</link>
      <pubDate>Sat, 04 Dec 2021 00:00:10 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2021/12/04/aoc-2021-day-4-his-name-oh/</guid>
      <description>&lt;h3 id=&#34;source-giant-squidhttpsadventofcodecom2021day4&#34;&gt;Source: &lt;a href=&#34;https://adventofcode.com/2021/day/4&#34;&gt;Giant Squid&lt;/a&gt;&lt;/h3&gt;
&lt;h4 id=&#34;part-1-given-a-set-of-bingo-boards-and-a-list-of-numbers-find-the-first-board-to-win-multiply-the-sum-of-the-un-called-numbers-on-that-board-times-the-last-number-called&#34;&gt;&lt;strong&gt;Part 1:&lt;/strong&gt; Given a set of bingo boards and a list of numbers, find the first board to win. Multiply the sum of the un-called numbers on that board times the last number called.&lt;/h4&gt;</description>
    </item>
    
    <item>
      <title>AoC 2021 Day 3: Binary Contraption</title>
      <link>https://blog.jverkamp.com/2021/12/03/aoc-2021-day-3-binary-contraption/</link>
      <pubDate>Fri, 03 Dec 2021 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2021/12/03/aoc-2021-day-3-binary-contraption/</guid>
      <description>&lt;h3 id=&#34;source-binary-diagnostichttpsadventofcodecom2021day3&#34;&gt;Source: &lt;a href=&#34;https://adventofcode.com/2021/day/3&#34;&gt;Binary Diagnostic&lt;/a&gt;&lt;/h3&gt;
&lt;h4 id=&#34;part-1-given-a-list-of-binary-numbers-calculate-gamma-such-that-each-bit-is-the-most-common-bit-in-that-position-in-the-input-and-epsilon-which-is-the-binary-inverse-of-gamma-return-the-product&#34;&gt;&lt;strong&gt;Part 1:&lt;/strong&gt; Given a list of binary numbers, calculate gamma such that each bit is the most common bit in that position in the input and epsilon which is the binary inverse of gamma. Return the product.&lt;/h4&gt;</description>
    </item>
    
    <item>
      <title>AoC 2021 Day 2: Submarine Simulator</title>
      <link>https://blog.jverkamp.com/2021/12/02/aoc-2021-day-2-submarine-simulator/</link>
      <pubDate>Thu, 02 Dec 2021 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2021/12/02/aoc-2021-day-2-submarine-simulator/</guid>
      <description>&lt;h3 id=&#34;source-divehttpsadventofcodecom2021day2&#34;&gt;Source: &lt;a href=&#34;https://adventofcode.com/2021/day/2&#34;&gt;Dive!&lt;/a&gt;&lt;/h3&gt;
&lt;h4 id=&#34;part-1-simulate-a-submarine-with-3-commands-forward-n-down-n-and-up-n-that-move-forward-increase-depth-and-decrease-depth-in-that-order-calculate-the-product-of-the-final-position-and-depth&#34;&gt;&lt;strong&gt;Part 1:&lt;/strong&gt; Simulate a submarine with 3 commands: &lt;code&gt;forward N&lt;/code&gt;, &lt;code&gt;down N&lt;/code&gt;, and &lt;code&gt;up N&lt;/code&gt; that move forward, increase depth, and decrease depth in that order. Calculate the product of the final position and depth.&lt;/h4&gt;</description>
    </item>
    
    <item>
      <title>AoC 2021 Day 1: Depth Finder</title>
      <link>https://blog.jverkamp.com/2021/12/01/aoc-2021-day-1-depth-finder/</link>
      <pubDate>Wed, 01 Dec 2021 00:00:03 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2021/12/01/aoc-2021-day-1-depth-finder/</guid>
      <description>&lt;h3 id=&#34;source-depth-finderhttpsadventofcodecom2021day1&#34;&gt;Source: &lt;a href=&#34;https://adventofcode.com/2021/day/1&#34;&gt;Depth Finder&lt;/a&gt;&lt;/h3&gt;
&lt;h4 id=&#34;part-1-given-a-list-of-numbers-count-how-many-times-sequential-numbers-increase&#34;&gt;&lt;strong&gt;Part 1:&lt;/strong&gt; Given a list of numbers, count how many times sequential numbers increase.&lt;/h4&gt;</description>
    </item>
    
    <item>
      <title>Advent of Code 2021</title>
      <link>https://blog.jverkamp.com/2021/12/01/advent-of-code-2021/</link>
      <pubDate>Wed, 01 Dec 2021 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2021/12/01/advent-of-code-2021/</guid>
      <description>&lt;p&gt;Been a while since I&amp;rsquo;ve done an advent of code! I&amp;rsquo;ll probably backfill a few years eventually, but for now, let&amp;rsquo;s just write some code!&lt;/p&gt;
&lt;p&gt;As always, these problems are wonderful to try to solve yourself. If you agree, &lt;em&gt;stop reading now&lt;/em&gt;. This post isn&amp;rsquo;t going anywhere.&lt;/p&gt;
&lt;p&gt;If you&amp;rsquo;d like to see the full form of any particular solution, you can do so on GitHub (including previous years and possibly some I haven&amp;rsquo;t written up yet): &lt;a href=&#34;https://github.com/jpverkamp/advent-of-code&#34;&gt;jpverkamp/advent-of-code&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Splitting Images</title>
      <link>https://blog.jverkamp.com/2021/08/10/splitting-images/</link>
      <pubDate>Tue, 10 Aug 2021 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2021/08/10/splitting-images/</guid>
      <description>&lt;p&gt;I recently came across a problem where I had a single image with a transparent background containing multiple images that I wanted to split into their component parts. For example, split this:&lt;/p&gt;
&lt;figure class=&#34;border&#34;&gt;
    &lt;img src=&#34;https://blog.jverkamp.com/embeds/2021/hi.png&#34;/&gt; 
&lt;/figure&gt;

&lt;p&gt;Into these:&lt;/p&gt;
&lt;p&gt;&lt;figure class=&#34;border&#34;&gt;
    &lt;img src=&#34;https://blog.jverkamp.com/embeds/2021/hi_1.png&#34;/&gt; 
&lt;/figure&gt;

&lt;figure class=&#34;border&#34;&gt;
    &lt;img src=&#34;https://blog.jverkamp.com/embeds/2021/hi_2.png&#34;/&gt; 
&lt;/figure&gt;

&lt;figure class=&#34;border&#34;&gt;
    &lt;img src=&#34;https://blog.jverkamp.com/embeds/2021/hi_3.png&#34;/&gt; 
&lt;/figure&gt;

&lt;figure class=&#34;border&#34;&gt;
    &lt;img src=&#34;https://blog.jverkamp.com/embeds/2021/hi_4.png&#34;/&gt; 
&lt;/figure&gt;

&lt;figure class=&#34;border&#34;&gt;
    &lt;img src=&#34;https://blog.jverkamp.com/embeds/2021/hi_5.png&#34;/&gt; 
&lt;/figure&gt;
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Ordering Board Game Geek GeekLists by Rank</title>
      <link>https://blog.jverkamp.com/2021/06/28/ordering-board-game-geek-geeklists-by-rank/</link>
      <pubDate>Mon, 28 Jun 2021 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2021/06/28/ordering-board-game-geek-geeklists-by-rank/</guid>
      <description>&lt;p&gt;A quick script.&lt;/p&gt;
&lt;p&gt;I play a lot of board games. With the whole COVID-19 mess, I&amp;rsquo;ve been playing a lot on &lt;a href=&#34;https://boardgamearena.com/&#34;&gt;Board Game Arena&lt;/a&gt;, which is a wonderful site. But one thing that&amp;rsquo;s a bit lacking is having ratings / metadata about games to great games I&amp;rsquo;ve just not heard about before. Where can you get lots of that data? &lt;a href=&#34;https://boardgamegeek.com/&#34;&gt;Board Game Geek&lt;/a&gt;!&lt;/p&gt;
&lt;p&gt;The problem though, is merging the two. So, how do we do it? Well, this time around, I&amp;rsquo;m going to start with &lt;a href=&#34;https://boardgamegeek.com/geeklist/252354/list-games-board-game-arena&#34;&gt;this GeekList&lt;/a&gt; that someone else maintains of BGA games on BGG. Which has the games, but no ranks. And apparently there are no ways to rank those by BGG (for some reason). But that&amp;rsquo;s easy when you know a bit of scripting!&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Categorizing r/Fantasy Book Bingo Books</title>
      <link>https://blog.jverkamp.com/2021/06/24/categorizing-r/fantasy-book-bingo-books/</link>
      <pubDate>Thu, 24 Jun 2021 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2021/06/24/categorizing-r/fantasy-book-bingo-books/</guid>
      <description>&lt;p&gt;I&amp;rsquo;ve been working through the &lt;a href=&#34;https://blog.jverkamp.com/2021/04/01/2021-book-bingo/&#34;&gt;r/Fantasy 2021 Book Bingo&lt;/a&gt; this year:&lt;/p&gt;
&lt;h1&gt;2021 Book Bingo&lt;/h1&gt;

&lt;table class=&#34;bingo&#34;&gt;&lt;tr&gt;&lt;td&gt;

            &lt;p&gt;SFF anthology or collection&lt;/p&gt;&lt;a href=&#34;https://blog.jverkamp.com/2021/03/26/attack-on-titan-vol.-1/&#34;&gt;
                        &lt;figure&gt;
                            &lt;img src=&#34;https://blog.jverkamp.com/embeds/books/attack-on-titan-vol-1.jpg&#34;&gt;
                            &lt;figcaption&gt;Attack on Titan, Vol. 1&lt;/figcaption&gt;
                        &lt;/figure&gt; 
                    &lt;/a&gt;&lt;/td&gt;&lt;td&gt;

            &lt;p&gt;Set in Asia (Hard: by an Asian author)&lt;/p&gt;&lt;/td&gt;&lt;td&gt;

            &lt;p&gt;&lt;a href=&#34;https://www.reddit.com/r/Fantasy/wiki/index/a-to-z-genre-guide&#34;&gt;r/Fantasy A to Z Genre Guide&lt;/a&gt; (Hard: by a BIPOC author)&lt;/p&gt;&lt;/td&gt;&lt;td&gt;

            &lt;p&gt;Found Family (Hard: featuring an LGBTQ+ character)&lt;/p&gt;&lt;a href=&#34;https://blog.jverkamp.com/2021/07/18/the-house-in-the-cerulean-sea/&#34;&gt;
                        &lt;figure&gt;
                            &lt;img src=&#34;https://blog.jverkamp.com/embeds/books/the-house-in-the-cerulean-sea.jpg&#34;&gt;
                            &lt;figcaption&gt;The House in the Cerulean Sea&lt;/figcaption&gt;
                        &lt;/figure&gt; 
                    &lt;/a&gt;&lt;p&gt;(Hard Mode)&lt;/p&gt;&lt;/td&gt;&lt;td&gt;

            &lt;p&gt;First person POV (Hard: Multiple)&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;

            &lt;p&gt;r/Fantasy Book Club (Hard: with participation)&lt;/p&gt;&lt;/td&gt;&lt;td&gt;

            &lt;p&gt;New to you author (Hard: haven&amp;rsquo;t heard much about)&lt;/p&gt;&lt;/td&gt;&lt;td&gt;

            &lt;p&gt;Gothic Fantasy (Hard: not in the &lt;a href=&#34;https://bookriot.com/gothic-fantasy/&#34;&gt;Book Riot article&lt;/a&gt;)&lt;/p&gt;&lt;a href=&#34;https://blog.jverkamp.com/2021/06/09/mexican-gothic/&#34;&gt;
                        &lt;figure&gt;
                            &lt;img src=&#34;https://blog.jverkamp.com/embeds/books/mexican-gothic.jpg&#34;&gt;
                            &lt;figcaption&gt;Mexican Gothic&lt;/figcaption&gt;
                        &lt;/figure&gt; 
                    &lt;/a&gt;&lt;p&gt;(Hard Mode)&lt;/p&gt;&lt;/td&gt;&lt;td&gt;

            &lt;p&gt;Backlist book (Hard: published before 2000)&lt;/p&gt;&lt;/td&gt;&lt;td&gt;

            &lt;p&gt;Revenge-seeking character (Hard: revenge as the major book plot)&lt;/p&gt;&lt;a href=&#34;https://blog.jverkamp.com/2021/10/01/red-sister/&#34;&gt;
                        &lt;figure&gt;
                            &lt;img src=&#34;https://blog.jverkamp.com/embeds/books/red-sister.jpg&#34;&gt;
                            &lt;figcaption&gt;Red Sister&lt;/figcaption&gt;
                        &lt;/figure&gt; 
                    &lt;/a&gt;&lt;p&gt;(Hard Mode)&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;

            &lt;p&gt;Mystery plot (Hard: not primary world urban fantasy)&lt;/p&gt;&lt;a href=&#34;https://blog.jverkamp.com/2021/06/19/six-wakes/&#34;&gt;
                        &lt;figure&gt;
                            &lt;img src=&#34;https://blog.jverkamp.com/embeds/books/six-wakes.jpg&#34;&gt;
                            &lt;figcaption&gt;Six Wakes&lt;/figcaption&gt;
                        &lt;/figure&gt; 
                    &lt;/a&gt;&lt;p&gt;(Hard Mode)&lt;/p&gt;&lt;/td&gt;&lt;td&gt;

            &lt;p&gt;Comfort read (Hard: that isn&amp;rsquo;t a reread)&lt;/p&gt;&lt;a href=&#34;https://blog.jverkamp.com/2021/04/13/wild-sign/&#34;&gt;
                        &lt;figure&gt;
                            &lt;img src=&#34;https://blog.jverkamp.com/embeds/books/wild-sign.jpg&#34;&gt;
                            &lt;figcaption&gt;Wild Sign&lt;/figcaption&gt;
                        &lt;/figure&gt; 
                    &lt;/a&gt;&lt;p&gt;(Hard Mode)&lt;/p&gt;&lt;/td&gt;&lt;td&gt;

            &lt;p&gt;Debut novel (Hard: published in 2021)&lt;/p&gt;&lt;a href=&#34;https://blog.jverkamp.com/2021/04/26/tales-of-nezura-book-1-the-zevolra/&#34;&gt;
                        &lt;figure&gt;
                            &lt;img src=&#34;https://blog.jverkamp.com/embeds/books/tales-of-nezura-book-1-the-zevolra.jpg&#34;&gt;
                            &lt;figcaption&gt;Tales of Nezura: Book 1: The Zevolra&lt;/figcaption&gt;
                        &lt;/figure&gt; 
                    &lt;/a&gt;&lt;p&gt;(Hard Mode)&lt;/p&gt;&lt;/td&gt;&lt;td&gt;

            &lt;p&gt;Cat squasher (500+ pages; Hard: 800+ pages)&lt;/p&gt;&lt;/td&gt;&lt;td&gt;

            &lt;p&gt;SFF-related nonfiction (Hard: published in the last 5 years)&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;

            &lt;p&gt;Latinx or Latin American author (Hard: with fewer than 1000 Goodreads ratings)&lt;/p&gt;&lt;/td&gt;&lt;td&gt;

            &lt;p&gt;Self published (Hard: with fewer than 50 Goodreads ratings)&lt;/p&gt;&lt;a href=&#34;https://blog.jverkamp.com/2021/04/26/tales-of-nezura-book-1-the-zevolra/&#34;&gt;
                        &lt;figure&gt;
                            &lt;img src=&#34;https://blog.jverkamp.com/embeds/books/tales-of-nezura-book-1-the-zevolra.jpg&#34;&gt;
                            &lt;figcaption&gt;Tales of Nezura: Book 1: The Zevolra&lt;/figcaption&gt;
                        &lt;/figure&gt; 
                    &lt;/a&gt;&lt;p&gt;(Hard Mode)&lt;/p&gt;&lt;/td&gt;&lt;td&gt;

            &lt;p&gt;Forest setting (Hard: for the entire book)&lt;/p&gt;&lt;a href=&#34;https://blog.jverkamp.com/2021/07/01/annihilation/&#34;&gt;
                        &lt;figure&gt;
                            &lt;img src=&#34;https://blog.jverkamp.com/embeds/books/annihilation.jpg&#34;&gt;
                            &lt;figcaption&gt;Annihilation&lt;/figcaption&gt;
                        &lt;/figure&gt; 
                    &lt;/a&gt;&lt;p&gt;(Hard Mode)&lt;/p&gt;&lt;/td&gt;&lt;td&gt;

            &lt;p&gt;Genre mashup (Hard: of three or more genres)&lt;/p&gt;&lt;a href=&#34;https://blog.jverkamp.com/2021/07/13/gideon-the-ninth/&#34;&gt;
                        &lt;figure&gt;
                            &lt;img src=&#34;https://blog.jverkamp.com/embeds/books/gideon-the-ninth.jpg&#34;&gt;
                            &lt;figcaption&gt;Gideon the Ninth&lt;/figcaption&gt;
                        &lt;/figure&gt; 
                    &lt;/a&gt;&lt;p&gt;(Hard Mode)&lt;/p&gt;&lt;/td&gt;&lt;td&gt;

            &lt;p&gt;Has chapter titles of more than one word (Hard: for every chapter)&lt;/p&gt;&lt;a href=&#34;https://blog.jverkamp.com/2021/04/21/the-midnight-library/&#34;&gt;
                        &lt;figure&gt;
                            &lt;img src=&#34;https://blog.jverkamp.com/embeds/books/the-midnight-library.jpg&#34;&gt;
                            &lt;figcaption&gt;The Midnight Library&lt;/figcaption&gt;
                        &lt;/figure&gt; 
                    &lt;/a&gt;&lt;p&gt;(Hard Mode)&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;

            &lt;p&gt;___ of ___ (Hard: and ___)&lt;/p&gt;&lt;a href=&#34;https://blog.jverkamp.com/2021/12/08/an-alchemy-of-masques-and-mirrors/&#34;&gt;
                        &lt;figure&gt;
                            &lt;img src=&#34;https://blog.jverkamp.com/embeds/books/an-alchemy-of-masques-and-mirrors.jpg&#34;&gt;
                            &lt;figcaption&gt;An Alchemy of Masques and Mirrors&lt;/figcaption&gt;
                        &lt;/figure&gt; 
                    &lt;/a&gt;&lt;p&gt;(Hard Mode)&lt;/p&gt;&lt;/td&gt;&lt;td&gt;

            &lt;p&gt;First contact (Hard: that doesn&amp;rsquo;t lead to war)&lt;/p&gt;&lt;a href=&#34;https://blog.jverkamp.com/2021/06/15/project-hail-mary/&#34;&gt;
                        &lt;figure&gt;
                            &lt;img src=&#34;https://blog.jverkamp.com/embeds/books/project-hail-mary.jpg&#34;&gt;
                            &lt;figcaption&gt;Project Hail Mary&lt;/figcaption&gt;
                        &lt;/figure&gt; 
                    &lt;/a&gt;&lt;p&gt;(Hard Mode)&lt;/p&gt;&lt;/td&gt;&lt;td&gt;

            &lt;p&gt;Trans or Nonbinary (Hard: protagonist)&lt;/p&gt;&lt;/td&gt;&lt;td&gt;

            &lt;p&gt;Debut author (Hard: with an AMA)&lt;/p&gt;&lt;/td&gt;&lt;td&gt;

            &lt;p&gt;Witches (Hard: as the main protagonist)&lt;/p&gt;&lt;a href=&#34;https://blog.jverkamp.com/2021/04/11/a-great-and-terrible-beauty/&#34;&gt;
                        &lt;figure&gt;
                            &lt;img src=&#34;https://blog.jverkamp.com/embeds/books/a-great-and-terrible-beauty.jpg&#34;&gt;
                            &lt;figcaption&gt;A Great and Terrible Beauty&lt;/figcaption&gt;
                        &lt;/figure&gt; 
                    &lt;/a&gt;&lt;p&gt;(Hard Mode)&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;</description>
    </item>
    
    <item>
      <title>Partitioning a Linked List</title>
      <link>https://blog.jverkamp.com/2021/04/20/partitioning-a-linked-list/</link>
      <pubDate>Tue, 20 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2021/04/20/partitioning-a-linked-list/</guid>
      <description>&lt;p&gt;One more fairly standard tech interview problem (for better or for worse, you&amp;rsquo;re likely to see one of these if you go for a programming job):&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Given a &lt;a href=&#34;https://en.wikipedia.org/wiki/linked%20list&#34;&gt;linked list&lt;/a&gt; and an element &lt;code&gt;x&lt;/code&gt;. Partition the list so that all elements less than &lt;code&gt;x&lt;/code&gt; are before elements greater than or equal to &lt;code&gt;x&lt;/code&gt;, but do not otherwise change the order of the elements.&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>Dynamic Programming over a Matrix</title>
      <link>https://blog.jverkamp.com/2021/04/13/dynamic-programming-over-a-matrix/</link>
      <pubDate>Tue, 13 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2021/04/13/dynamic-programming-over-a-matrix/</guid>
      <description>Another LeetCode problem.
 Given an MxN matrix of numbers, find the longest path of strictly increasing numbers.
 So for example in this matrix:
 994 668 211  You can start with the 1 in the bottom center, go left to the two, then up to the 6, and 9. That&amp;rsquo;s the longest path, so return a 4.
In this 3x3 case, it&amp;rsquo;s really easy to just brute force.</description>
    </item>
    
    <item>
      <title>Phone Words--In English!</title>
      <link>https://blog.jverkamp.com/2021/04/09/phone-words-in-english/</link>
      <pubDate>Fri, 09 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2021/04/09/phone-words-in-english/</guid>
      <description>Okay, let&amp;rsquo;s take this one step further. Rather than generating just phone words, let&amp;rsquo;s actually generate phone words. Someone has provided a list of words in English as a package, so we&amp;rsquo;ll add a filter to add that to our comprehension:
from english_words import english_words_set def letterCombinations(self, digits: str) -&amp;gt; List[str]: if not digits: return [] letters = { &amp;#39;1&amp;#39;: &amp;#39;&amp;#39;, &amp;#39;2&amp;#39;: &amp;#39;abc&amp;#39;, &amp;#39;3&amp;#39;: &amp;#39;def&amp;#39;, &amp;#39;4&amp;#39;: &amp;#39;ghi&amp;#39;, &amp;#39;5&amp;#39;: &amp;#39;jkl&amp;#39;, &amp;#39;6&amp;#39;: &amp;#39;mno&amp;#39;, &amp;#39;7&amp;#39;: &amp;#39;pqrs&amp;#39;, &amp;#39;8&amp;#39;: &amp;#39;tuv&amp;#39;, &amp;#39;9&amp;#39;: &amp;#39;wxyz&amp;#39;, &amp;#39;0&amp;#39;: &amp;#39; &amp;#39;, } return [ word for product in itertools.</description>
    </item>
    
    <item>
      <title>Phone Words</title>
      <link>https://blog.jverkamp.com/2021/04/06/phone-words/</link>
      <pubDate>Tue, 06 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2021/04/06/phone-words/</guid>
      <description>&lt;p&gt;Working through a few problems on &lt;a href=&#34;https://leetcode.com/&#34;&gt;LeetCode&lt;/a&gt;. I haven&amp;rsquo;t quite decided what I think of the site, but it&amp;rsquo;s a fun way to play with simple algorithms. Figured I might as well write up any I find interesting.&lt;/p&gt;
&lt;p&gt;First interesting problem:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Given a standard lettered keypad, generate all words from a given phone number.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure&gt;
    &lt;img src=&#34;https://blog.jverkamp.com/embeds/2021/keypad.png&#34;/&gt; 
&lt;/figure&gt;</description>
    </item>
    
    <item>
      <title>yt-cast: Generating podcasts from YouTube URLs</title>
      <link>https://blog.jverkamp.com/2021/01/05/yt-cast-generating-podcasts-from-youtube-urls/</link>
      <pubDate>Tue, 05 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2021/01/05/yt-cast-generating-podcasts-from-youtube-urls/</guid>
      <description>&lt;p&gt;Today&amp;rsquo;s goal: Turn a collection of YouTube links into a podcast.&lt;/p&gt;
&lt;p&gt;Start with a &lt;code&gt;config.json&lt;/code&gt; like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;{
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;brandon-sanderson&amp;#34;&lt;/span&gt;: [
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://www.youtube.com/watch?v=H4lWbkERlxo&amp;amp;list=PLSH_xM-KC3ZuOZayK68JAAjj5W9ShnFVC&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://www.youtube.com/watch?v=YyaC7NmPsc0&amp;amp;list=PLSH_xM-KC3ZtjKTR2z8rPWxv1pP6bOVzZ&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://www.youtube.com/watch?v=o3V0Zok_kT0&amp;amp;list=PLSH_xM-KC3ZuteHw3G1ZrCDWQrAVgO0ER&amp;#34;&lt;/span&gt;
  ]
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And it will automatically download all referenced YouTube videos, convert them to MP3 (both using &lt;a href=&#34;https://ytdl-org.github.io/youtube-dl/index.html&#34;&gt;youtube-dl&lt;/a&gt;), and serve an RSS feed that&amp;rsquo;s compatible with most podcast programs.&lt;/p&gt;
&lt;p&gt;Tested URLs include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Playlist URLs (like the above)&lt;/li&gt;
&lt;li&gt;Single video URLs&lt;/li&gt;
&lt;li&gt;Channel URLs&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Most youtube URLs should work though.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Extending my EC2 script</title>
      <link>https://blog.jverkamp.com/2020/08/11/extending-my-ec2-script/</link>
      <pubDate>Tue, 11 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2020/08/11/extending-my-ec2-script/</guid>
      <description>&lt;p&gt;Another quick post.&lt;/p&gt;
&lt;p&gt;What feels like a lifetime ago, I &lt;a href=&#34;https://blog.jverkamp.com/2015/10/30/finding-ec2-instances-by-tag/&#34;&gt;wrote a post&lt;/a&gt; about finding &lt;code&gt;ec2&lt;/code&gt; instances by name. I honestly use that script just about every day, mostly for automatically finding instances to SSH to (a la &lt;a href=&#34;https://blog.jverkamp.com/2017/12/18/ssh-config-proxycommand-tricks/&#34;&gt;SSH config tricks&lt;/a&gt;). But there are a few other quick things I&amp;rsquo;ve done with it:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ec2-script&lt;/code&gt; - Run a script on all instances of a given name&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ec2-disk&lt;/code&gt; - A specialization of &lt;code&gt;ec2-script&lt;/code&gt; to check main disk usage&lt;/li&gt;
&lt;li&gt;&lt;code&gt;terminate&lt;/code&gt; - A script that I use with &lt;code&gt;ec2&lt;/code&gt; to terminate instances from the command line&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ec2-cycle&lt;/code&gt; - Slow cycle a given set of &lt;code&gt;ec2&lt;/code&gt; instances by terminating so many per minute&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;All of which are included in my &lt;a href=&#34;https://github.com/jpverkamp/dotfiles/tree/master/bin&#34;&gt;dotfiles&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>An SPF DNS Server</title>
      <link>https://blog.jverkamp.com/2020/07/16/an-spf-dns-server/</link>
      <pubDate>Thu, 16 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2020/07/16/an-spf-dns-server/</guid>
      <description>&lt;p&gt;The &lt;a href=&#34;https://en.wikipedia.org/wiki/Sender%20Policy%20Framework&#34;&gt;Sender Policy Framework&lt;/a&gt; is one of those things that&amp;rsquo;s really powerful and useful to help prevent phishing and email spam, but can be a royal pain to work with. Specifically, SPF is a series of DNS TXT records&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; with a specific format that can be looked up by any email service to verify that an email was sent by a server that should be authorized to send email on your behalf. For example&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;v=spf1 ip4:192.0.2.0/24 ip4:198.51.100.123 a -all&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;v=spf1&lt;/code&gt; - tells the client this is an SPF record and should always start the record&lt;/li&gt;
&lt;li&gt;&lt;code&gt;{key}[:{value}]?&lt;/code&gt; - one of many different key/value pairs that can define the record
&lt;ul&gt;
&lt;li&gt;in the case above a &lt;code&gt;ip4&lt;/code&gt; key species an &lt;a href=&#34;https://en.wikipedia.org/wiki/IPv4&#34;&gt;IPv4&lt;/a&gt; address range that can send emails on your behalf (the value can be optional)&lt;/li&gt;
&lt;li&gt;the &lt;code&gt;a&lt;/code&gt; above is another special case where if the sender domain (&lt;code&gt;jp@example.com&lt;/code&gt; would be &lt;code&gt;example.com&lt;/code&gt;) resolves via a &lt;code&gt;DNS A&lt;/code&gt; record to the server that sent the email, it&amp;rsquo;s allows&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-all&lt;/code&gt; is a fallthrough case meaning &amp;lsquo;fail all that didn&amp;rsquo;t match a previous case&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There are a number of other cases, but we&amp;rsquo;ll get to the other interesting ones in a bit.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Directly monitoring Sidekiq in Redis</title>
      <link>https://blog.jverkamp.com/2020/07/14/directly-monitoring-sidekiq-in-redis/</link>
      <pubDate>Tue, 14 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2020/07/14/directly-monitoring-sidekiq-in-redis/</guid>
      <description>&lt;p&gt;Another thing that came up recently: we have many (many) &lt;a href=&#34;https://github.com/mperham/sidekiq&#34;&gt;sidekiq&lt;/a&gt; queues. Each has their own admin interface, but sometimes you just want all of the information in one place. Of course, you could bookmark all of the pages. Or make a single page with a lot of frames (remember &lt;a href=&#34;https://en.wikipedia.org/wiki/HTML%20frames&#34;&gt;HTML frames&lt;/a&gt;?). Or use their API. But where&amp;rsquo;s the fun in that? Instead, let&amp;rsquo;s dig straight into the redis backend and see what we can see!&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>A Smart MySQL Wrapper</title>
      <link>https://blog.jverkamp.com/2020/07/07/a-smart-mysql-wrapper/</link>
      <pubDate>Tue, 07 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2020/07/07/a-smart-mysql-wrapper/</guid>
      <description>&lt;p&gt;One thing that I often need to do is deal with a large collection of database servers in different clusters and in different environments. On top of that, sometimes, I want a UI, sometime I want a CLI to script. And sometimes I&amp;rsquo;m on a VPN and sometimes I&amp;rsquo;m not. All together, it&amp;rsquo;s a rather complicated number of saved connections and CLI switches and everything else. All together, I want:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Specify the cluster, environment, and mode (read/write/adhoc)&lt;/li&gt;
&lt;li&gt;Specify if I want to run via CLI or via UI&lt;/li&gt;
&lt;li&gt;Specify an optional user with safely stored and used passwords&lt;/li&gt;
&lt;li&gt;Automatically connected via SSH tunnel if I&amp;rsquo;m not on VPN, but not if I am (for CLI or VPN)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Let&amp;rsquo;s do it!&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Observation Server</title>
      <link>https://blog.jverkamp.com/2020/06/10/observation-server/</link>
      <pubDate>Wed, 10 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2020/06/10/observation-server/</guid>
      <description>&lt;p&gt;For a number of years now, I&amp;rsquo;ve been writing down my &amp;lsquo;observations&amp;rsquo;. Essentially, it&amp;rsquo;s a semi-structured set of text files that I keep in Dropbox. One for each day, in a folder by month. I record interesting people I see, things I did worth doing, and things my children did which were adorable.&lt;/p&gt;
&lt;p&gt;After a while, I started wanting to look back, so first, I wrote a relatively simple script that would go back through my archives and send me everything I did 1/2/3/4/etc years ago. That worked well enough, but it ended up generating a lot of emails to go through some days. So the second generation is a server that can format those pages and display them as a nice webpage.&lt;/p&gt;
&lt;p&gt;The most interesting part perhaps was dealing with the tarballs that I keep the archives in (they&amp;rsquo;re plain text, so they compress very well). I wanted to keep them compressed, so I had to decompress them in memory on the fly.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Prevent JavaScript links by parsing URLs</title>
      <link>https://blog.jverkamp.com/2019/05/02/prevent-javascript-links-by-parsing-urls/</link>
      <pubDate>Thu, 02 May 2019 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2019/05/02/prevent-javascript-links-by-parsing-urls/</guid>
      <description>&lt;p&gt;If you have a website that allows users to submit URLs, one of the (many many) things people will try to do to break your site is to submit URLs that use the &lt;code&gt;javascript:&lt;/code&gt; protocol (rather than the more expected &lt;code&gt;http:&lt;/code&gt; or &lt;code&gt;https:&lt;/code&gt;). This is almost never something that you want, since it allows users to submit essentially arbitrary code that other users will run on click in the context of your domain (&lt;a href=&#34;https://en.wikipedia.org/wiki/same%20origin%20policy&#34;&gt;same origin policy&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;So how do you fix it?&lt;/p&gt;
&lt;p&gt;First thought would be to try to check the protocol:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;safe_url&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;url&lt;/span&gt;) =&amp;gt; &lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;url&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;match&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;/^javascript:/&lt;/span&gt;)
[Function&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;safe_url&lt;/span&gt;]

&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;safe_url&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;http://www.example.com&amp;#39;&lt;/span&gt;)
&lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;

&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;safe_url&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;javascript:alert(1)&amp;#39;&lt;/span&gt;)
&lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Tiny Helper Scripts for Command Line MySQL</title>
      <link>https://blog.jverkamp.com/2019/04/27/tiny-helper-scripts-for-command-line-mysql/</link>
      <pubDate>Sat, 27 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2019/04/27/tiny-helper-scripts-for-command-line-mysql/</guid>
      <description>&lt;p&gt;Quite often, I&amp;rsquo;ll find myself wanting to query and manipulate MySQL data entirely on the command line. I could be building up a pipeline or working on a task that I&amp;rsquo;m going to eventually automate but haven&amp;rsquo;t quite gotten to yet. Whenver I have to do something like that, I have a small pile of scripts I&amp;rsquo;ve written over time that help out:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;skiphead&lt;/code&gt;: Skip the first line of output, used to skip over headers in a query response&lt;/li&gt;
&lt;li&gt;&lt;code&gt;skipuntil&lt;/code&gt;: Skip all lines until we see one matching a pattern, used to resume partial tasks&lt;/li&gt;
&lt;li&gt;&lt;code&gt;commaify&lt;/code&gt;: Take a list of single values on the command line and turn them into a comma separated list (for use in &lt;code&gt;IN&lt;/code&gt; clauses)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;csv2json&lt;/code&gt;: a &lt;a href=&#34;https://blog.jverkamp.com/2015/12/11/csv-to-json/&#34;&gt;previously posted&lt;/a&gt; script for converting csv/tab delimited output to json&lt;/li&gt;
&lt;li&gt;&lt;code&gt;jq&lt;/code&gt;: not my script, but used to take the output of csv2json and query it further in ways that would be complicated to do with SQL&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Admitedly, the first two of those are one liners and I could easily remember them, but the advantage of a single command that does it is tab completion. &lt;code&gt;sk&amp;lt;tab&amp;gt;&lt;/code&gt;, arrow to select which one I want, and off we go. I could put them as an alias, but I don&amp;rsquo;t always use the same shell (mostly &lt;a href=&#34;https://fishshell.com/&#34;&gt;fish&lt;/a&gt;, but sometimes Bash or Zsh).&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Listing and Downloading S3 Versions</title>
      <link>https://blog.jverkamp.com/2019/01/04/listing-and-downloading-s3-versions/</link>
      <pubDate>Fri, 04 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2019/01/04/listing-and-downloading-s3-versions/</guid>
      <description>&lt;p&gt;Today I found the need to look through all old versions of a file in S3 that had versioning turned on. You can do it through the AWS Console, but I prefer command line tools. You can do it with &lt;a href=&#34;https://aws.amazon.com/cli/&#34;&gt;awscli&lt;/a&gt;, but the flags are long and I can never quite remember them. So let&amp;rsquo;s write up a quick script using &lt;a href=&#34;https://boto3.amazonaws.com/v1/documentation/api/latest/index.html&#34;&gt;boto3&lt;/a&gt; (and as a bonus, try out &lt;a href=&#34;https://click.palletsprojects.com/en/7.x/&#34;&gt;click&lt;/a&gt;)!&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>AoC 2018 Day 3: Regionification</title>
      <link>https://blog.jverkamp.com/2018/12/03/aoc-2018-day-3-regionification/</link>
      <pubDate>Mon, 03 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2018/12/03/aoc-2018-day-3-regionification/</guid>
      <description>&lt;h3 id=&#34;source-no-matter-how-you-slice-ithttpsadventofcodecom2018day3&#34;&gt;Source: &lt;a href=&#34;https://adventofcode.com/2018/day/3&#34;&gt;No Matter How You Slice It&lt;/a&gt;&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Part 1:&lt;/strong&gt; Given a list of overlapping regions defined by (left, top, width, height) count how many integer points occur in more than one region.&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>AoC 2018 Day 2: Counting letters</title>
      <link>https://blog.jverkamp.com/2018/12/02/aoc-2018-day-2-counting-letters/</link>
      <pubDate>Sun, 02 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2018/12/02/aoc-2018-day-2-counting-letters/</guid>
      <description>&lt;h3 id=&#34;source-inventory-management-systemhttpsadventofcodecom2018day2&#34;&gt;Source: &lt;a href=&#34;https://adventofcode.com/2018/day/2&#34;&gt;Inventory Management System&lt;/a&gt;&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Part 1:&lt;/strong&gt; Given a list of strings, count how many contain exactly two of a letter (&lt;code&gt;a&lt;/code&gt;) and how many contain exactly three of a letter (&lt;code&gt;b&lt;/code&gt;). Calculate &lt;code&gt;a*b&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>AoC 2018 Day 1: Sum-thing to start with</title>
      <link>https://blog.jverkamp.com/2018/12/01/aoc-2018-day-1-sum-thing-to-start-with/</link>
      <pubDate>Sat, 01 Dec 2018 00:00:03 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2018/12/01/aoc-2018-day-1-sum-thing-to-start-with/</guid>
      <description>&lt;h3 id=&#34;source-chronal-calibrationhttpsadventofcodecom2018day1&#34;&gt;Source: &lt;a href=&#34;https://adventofcode.com/2018/day/1&#34;&gt;Chronal Calibration&lt;/a&gt;&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Part 1:&lt;/strong&gt; Given a list of numbers (positive and negative) calculate the sum.&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>Advent of Code 2018</title>
      <link>https://blog.jverkamp.com/2018/12/01/advent-of-code-2018/</link>
      <pubDate>Sat, 01 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2018/12/01/advent-of-code-2018/</guid>
      <description>&lt;p&gt;Let&amp;rsquo;s do it again! I&amp;rsquo;m starting a day late, but much better than &lt;a href=&#34;https://blog.jverkamp.com/2018/01/08/advent-of-code-2017/&#34;&gt;last year&lt;/a&gt; 😄!&lt;/p&gt;
&lt;p&gt;This time around, I&amp;rsquo;m hoping to solve each problem in both Python and Racket, both to show an example of how the languages differ and &amp;hellip; well, because I can 😇.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;EDIT 2018-12-05&lt;/em&gt;: Yeah&amp;hellip; I&amp;rsquo;m not actually going to do these in both Racket and Python. The solutions are ending up being near direct translations. Since there are probably fewer people solving these in Racket, I&amp;rsquo;ll do that first and Python eventually™.&lt;/p&gt;
&lt;p&gt;As always, these problems are wonderful to try to solve yourself. If you agree, &lt;em&gt;stop reading now&lt;/em&gt;. This post isn&amp;rsquo;t going anywhere.&lt;/p&gt;
&lt;p&gt;If you&amp;rsquo;d like to see the full form of any particular solution, you can do so on GitHub (including previous years and possibly some I haven&amp;rsquo;t written up yet): &lt;a href=&#34;https://github.com/jpverkamp/advent-of-code&#34;&gt;jpverkamp/advent-of-code&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Counting and Sizing S3 Buckets</title>
      <link>https://blog.jverkamp.com/2018/07/15/counting-and-sizing-s3-buckets/</link>
      <pubDate>Sun, 15 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2018/07/15/counting-and-sizing-s3-buckets/</guid>
      <description>&lt;p&gt;A long time ago in a galaxy far far away, I wrote up a script that I used to take an &lt;a href=&#34;https://aws.amazon.com/s3/&#34;&gt;AWS S3&lt;/a&gt; bucket and count how many objects there were in the bucket and calculate its total size. While you could get some of this information from billing reports, there just wasn&amp;rsquo;t a good way to get it other than that at the time. The only way you could do it was to&amp;hellip; iterate through the entire bucket, summing as you go. If you have buckets with millions (or more) objects, this could take a while.&lt;/p&gt;
&lt;p&gt;Basically:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;conn &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; boto&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;connect_s3()
&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; bucket &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; sorted(conn&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;get_all_buckets()):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt;:
        total_count &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
        total_size &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
        start &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; datetime&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;datetime&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;now()

        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; key &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; bucket&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;list_versions():
            &lt;span style=&#34;color:#75715e&#34;&gt;# Skip deleted files&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; isinstance(key, boto&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;s3&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;deletemarker&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;DeleteMarker):
                &lt;span style=&#34;color:#66d9ef&#34;&gt;continue&lt;/span&gt;

            size &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; key&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;size
            total_count &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
            total_size &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; size

        &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;-- {count} files, {size}, {time} to calculate&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;format(
            count &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; total_count,
            size &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; humanize&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;naturalsize(total_size),
            time &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; humanize&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;naturaltime(datetime&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;datetime&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;now() &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; start)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;replace(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39; ago&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;)
        ))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Creating a temporary SMTP server to &#39;catch&#39; domain validation emails</title>
      <link>https://blog.jverkamp.com/2018/07/09/creating-a-temporary-smtp-server-to-catch-domain-validation-emails/</link>
      <pubDate>Mon, 09 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2018/07/09/creating-a-temporary-smtp-server-to-catch-domain-validation-emails/</guid>
      <description>&lt;p&gt;One problem that has come up a time or two is dealing with email-based domain validation (specifically in this case for the issuance of TLS certificates) on domains that aren&amp;rsquo;t actually configured to receive email. Yes, in a perfect world, it would be easier to switch to DNS-based validation (since we have to have control of the DNS for the domain, we need it later), but let&amp;rsquo;s just assume that&amp;rsquo;s not an option. So, how do we &amp;lsquo;catch&amp;rsquo; the activation email so we can prove we can receive email on that domain?&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Generating zone files from Route53</title>
      <link>https://blog.jverkamp.com/2018/03/12/generating-zone-files-from-route53/</link>
      <pubDate>Mon, 12 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2018/03/12/generating-zone-files-from-route53/</guid>
      <description>&lt;p&gt;Recently I found myself wanting to do some analysis on all of our DNS entires stored in AWS&amp;rsquo;s Route53 for security reasons (specifically to prevent subdomain takeover attacks, I&amp;rsquo;ll probably write that up soon). In doing so, I realized that while Route53 has the ability to import a &lt;a href=&#34;https://en.wikipedia.org/wiki/zone%20file&#34;&gt;zone file&lt;/a&gt;, it&amp;rsquo;s not possible to export one.&lt;/p&gt;
&lt;p&gt;To some extent, this makes sense. Since Route53 supports ALIAS records (which can automatically determine their values based on other AWS products, such as an ELB changing its public IP) and those aren&amp;rsquo;t actually &amp;lsquo;real&amp;rsquo; DNS entries, things will get confused. But I don&amp;rsquo;t currently intend to re-import these zone files, just use them. So let&amp;rsquo;s see what we can do.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Advent of Code 2017</title>
      <link>https://blog.jverkamp.com/2018/01/08/advent-of-code-2017/</link>
      <pubDate>Mon, 08 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2018/01/08/advent-of-code-2017/</guid>
      <description>&lt;p&gt;As I did with &lt;a href=&#34;https://blog.jverkamp.com/2018/01/03/advent-of-code-2016/&#34;&gt;last year&lt;/a&gt; / &lt;a href=&#34;https://blog.jverkamp.com/2018/01/03/advent-of-code-2016/&#34;&gt;yesterday&lt;/a&gt;, I&amp;rsquo;ve written up a series of posts for the Advent of Code 2017 problems. Again, I didn&amp;rsquo;t manage to write them up as I did them, but this time around I least I finished mostly on time.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Advent of Code 2016</title>
      <link>https://blog.jverkamp.com/2018/01/03/advent-of-code-2016/</link>
      <pubDate>Wed, 03 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2018/01/03/advent-of-code-2016/</guid>
      <description>&lt;p&gt;As I did &lt;a href=&#34;https://blog.jverkamp.com/2015/12/01/advent-of-code/&#34;&gt;last year&lt;/a&gt;, I&amp;rsquo;m going to solve the Advent of Code problems again this year.&lt;/p&gt;
&lt;p&gt;Or that was the plan. It turns out that instead I put down my blog for almost a year and a half and never quite got around to doing these problems. So I&amp;rsquo;m actually backdating these posts from the early days of 2018 to where they would have been had I solved them on time. They&amp;rsquo;re still interesting problems, so give them a read.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>AoC 2017 Day 25: Turing</title>
      <link>https://blog.jverkamp.com/2017/12/25/aoc-2017-day-25-turing/</link>
      <pubDate>Mon, 25 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2017/12/25/aoc-2017-day-25-turing/</guid>
      <description>&lt;h3 id=&#34;source-the-halting-problemhttpadventofcodecom2017day25&#34;&gt;Source: &lt;a href=&#34;http://adventofcode.com/2017/day/25&#34;&gt;The Halting Problem&lt;/a&gt;&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Part 1:&lt;/strong&gt; Implement a &lt;a href=&#34;https://en.wikipedia.org/wiki/Turing%20machine&#34;&gt;Turing machine&lt;/a&gt; defined as such:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;Begin in state A.
Perform a diagnostic checksum after 6 steps.&lt;/p&gt;
&lt;p&gt;In state A:
If the current value is 0:
- Write the value 1.
- Move one slot to the right.
- Continue with state B.
If the current value is 1:
- Write the value 0.
- Move one slot to the left.
- Continue with state B.&lt;/p&gt;
&lt;p&gt;&amp;hellip;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>AoC 2017 Day 24: Maker Of Bridges</title>
      <link>https://blog.jverkamp.com/2017/12/24/aoc-2017-day-24-maker-of-bridges/</link>
      <pubDate>Sun, 24 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2017/12/24/aoc-2017-day-24-maker-of-bridges/</guid>
      <description>&lt;h3 id=&#34;source-electromagnetic-moathttpadventofcodecom2017day24&#34;&gt;Source: &lt;a href=&#34;http://adventofcode.com/2017/day/24&#34;&gt;Electromagnetic Moat&lt;/a&gt;&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Part 1:&lt;/strong&gt; Given a series of reversible components of the form &lt;code&gt;3/4&lt;/code&gt; (can connect a &lt;code&gt;3&lt;/code&gt; on one end to a &lt;code&gt;4&lt;/code&gt; on the other), form a bridge of components. The bridge&amp;rsquo;s strength is equal to the sum of component values. So &lt;code&gt;0/3, 3/7, and 7/4&lt;/code&gt; has a strength of &lt;code&gt;0+3 + 3+7 + 7+4 = 24&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;What is the strongest possible bridge?&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
  </channel>
</rss>
