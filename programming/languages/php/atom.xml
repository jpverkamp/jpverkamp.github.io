<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>PHP on jverkamp.com</title><link>https://blog.jverkamp.com/programming/languages/php/</link><description>Recent content in PHP on jverkamp.com</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Thu, 02 May 2019 00:00:00 +0000</lastBuildDate><atom:link href="https://blog.jverkamp.com/programming/languages/php/atom.xml" rel="self" type="application/rss+xml"/><item><title>Prevent JavaScript links by parsing URLs</title><link>https://blog.jverkamp.com/2019/05/02/prevent-javascript-links-by-parsing-urls/</link><pubDate>Thu, 02 May 2019 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2019/05/02/prevent-javascript-links-by-parsing-urls/</guid><description>&lt;p>If you have a website that allows users to submit URLs, one of the (many many) things people will try to do to break your site is to submit URLs that use the &lt;code>javascript:&lt;/code> protocol (rather than the more expected &lt;code>http:&lt;/code> or &lt;code>https:&lt;/code>). This is almost never something that you want, since it allows users to submit essentially arbitrary code that other users will run on click in the context of your domain (&lt;a href="https://en.wikipedia.org/wiki/same%20origin%20policy">same origin policy&lt;/a>).&lt;/p>
&lt;p>So how do you fix it?&lt;/p>
&lt;p>First thought would be to try to check the protocol:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#a6e22e">safe_url&lt;/span> &lt;span style="color:#f92672">=&lt;/span> (&lt;span style="color:#a6e22e">url&lt;/span>) =&amp;gt; &lt;span style="color:#f92672">!&lt;/span>&lt;span style="color:#a6e22e">url&lt;/span>.&lt;span style="color:#a6e22e">match&lt;/span>(&lt;span style="color:#e6db74">/^javascript:/&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>[Function&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">safe_url&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#a6e22e">safe_url&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;http://www.example.com&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#a6e22e">safe_url&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;javascript:alert(1)&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">false&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Parsing human readable times</title><link>https://blog.jverkamp.com/2014/07/22/parsing-human-readable-times/</link><pubDate>Tue, 22 Jul 2014 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2014/07/22/parsing-human-readable-times/</guid><description>&lt;p>So what day was 9 days ago again?&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ when &lt;span style="color:#ae81ff">9&lt;/span> days ago
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>2014-07-13
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>CSRF protection injection with jQuery and Zend</title><link>https://blog.jverkamp.com/2014/01/13/csrf-protection-injection-with-jquery-and-zend/</link><pubDate>Mon, 13 Jan 2014 14:00:24 +0000</pubDate><guid>https://blog.jverkamp.com/2014/01/13/csrf-protection-injection-with-jquery-and-zend/</guid><description>&lt;p>&lt;a href="https://en.wikipedia.org/wiki/Csrf">Cross-site request forgery&lt;/a> attacks are among the most common vulnerabilities against websites, listed as &lt;a href="https://www.owasp.org/index.php/Top_10_2013-A8-Cross-Site_Request_Forgery_(CSRF)">number 8&lt;/a> on &lt;a href="https://www.owasp.org/index.php/Top_10_2013-Top_10">OWASP&amp;rsquo;s 2013 Top 10 list&lt;/a>.&lt;/p></description></item><item><title>OpenID - Part 2</title><link>https://blog.jverkamp.com/2012/07/20/openid-part-2/</link><pubDate>Fri, 20 Jul 2012 04:55:18 +0000</pubDate><guid>https://blog.jverkamp.com/2012/07/20/openid-part-2/</guid><description>&lt;p>I &lt;a href="https://blog.jverkamp.com/2012/07/19/adventures-in-openid-land/">wrote yesterday &lt;/a>about getting OpenID up and running, but when I played with the code a bit more today, I realized that something funny was going on. Yahoo worked exactly as I expected, when I clicked on the link for the first time, it would take me to the Yahoo login page and then to a page to grant the proper permissions. All well and good. The same with Google.&lt;/p></description></item><item><title>Adventures in OpenID land</title><link>https://blog.jverkamp.com/2012/07/19/adventures-in-openid-land/</link><pubDate>Thu, 19 Jul 2012 04:59:49 +0000</pubDate><guid>https://blog.jverkamp.com/2012/07/19/adventures-in-openid-land/</guid><description>&lt;p>Today I started working on a little webapp. It&amp;rsquo;s mostly to get me back in practice writing website code, but it does hopefully have the side effect of being useful. More on that later though, perhaps when it&amp;rsquo;s actually working.&lt;/p>
&lt;p>In any case, the first thing that I wanted to do for this app was to set up some sort of authentication system. Since I don&amp;rsquo;t have HTTPS set up at the moment with my webhost (&lt;a title="Dreamhost Homepage" href="http://dreamhost.com/">Dreamhost&lt;/a>; they really are pretty good to work with and far better than my previous host) and it doesn&amp;rsquo;t really make as much sense to send passwords in plaintext over the network, I decided to go ahead and give OpenID a try. Granted, it&amp;rsquo;s still sending the authentication information in plaintext for at least part of the trip, but it&amp;rsquo;s still something that I think is worth learning.&lt;/p></description></item></channel></rss>