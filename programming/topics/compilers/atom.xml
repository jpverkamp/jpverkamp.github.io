<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Compilers on jverkamp.com</title><link>https://blog.jverkamp.com/programming/topics/compilers/</link><description>Recent content in Compilers on jverkamp.com</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://blog.jverkamp.com/programming/topics/compilers/atom.xml" rel="self" type="application/rss+xml"/><item><title>StackLang Part IX: Better Testing</title><link>https://blog.jverkamp.com/2023/08/12/stacklang-part-ix-better-testing/</link><pubDate>Sat, 12 Aug 2023 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2023/08/12/stacklang-part-ix-better-testing/</guid><description>Two posts in two days? Madness!
Posts in StackLang: StackLang Part I: The Idea StackLang Part II: The Lexer StackLang Part III: The Parser StackLang Part IV: An Interpreter StackLang Part V: Compiling to C StackLang Part VI: Some Examples StackLang Part VII: New CLI and Datatypes StackLang Part VIII: Compiler Stacks StackLang Part IX: Better Testing But really, it got a bit late yesterday so I figured I&amp;rsquo;d split this into two different posts.</description></item><item><title>StackLang Part VIII: Compiler Stacks</title><link>https://blog.jverkamp.com/2023/08/11/stacklang-part-viii-compiler-stacks/</link><pubDate>Fri, 11 Aug 2023 23:59:00 +0000</pubDate><guid>https://blog.jverkamp.com/2023/08/11/stacklang-part-viii-compiler-stacks/</guid><description>Let&amp;rsquo;s continue StackLang Part VII: New CLI and Datatypes and implement lists stacks in the compiler!
Posts in StackLang: StackLang Part I: The Idea StackLang Part II: The Lexer StackLang Part III: The Parser StackLang Part IV: An Interpreter StackLang Part V: Compiling to C StackLang Part VI: Some Examples StackLang Part VII: New CLI and Datatypes StackLang Part VIII: Compiler Stacks StackLang Part IX: Better Testing In this post:</description></item><item><title>StackLang Part VII: New CLI and Datatypes</title><link>https://blog.jverkamp.com/2023/08/05/stacklang-part-vii-new-cli-and-datatypes/</link><pubDate>Sat, 05 Aug 2023 23:59:00 +0000</pubDate><guid>https://blog.jverkamp.com/2023/08/05/stacklang-part-vii-new-cli-and-datatypes/</guid><description>Another day, another Stacklang!
Posts in StackLang: StackLang Part I: The Idea StackLang Part II: The Lexer StackLang Part III: The Parser StackLang Part IV: An Interpreter StackLang Part V: Compiling to C StackLang Part VI: Some Examples StackLang Part VII: New CLI and Datatypes StackLang Part VIII: Compiler Stacks StackLang Part IX: Better Testing Today, we&amp;rsquo;ve got two main parts to work on:
A new CLI New datatypes (VM only; so far!</description></item><item><title>StackLang Part VI: Some Examples</title><link>https://blog.jverkamp.com/2023/07/16/stacklang-part-vi-some-examples/</link><pubDate>Sun, 16 Jul 2023 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2023/07/16/stacklang-part-vi-some-examples/</guid><description>We&amp;rsquo;ve gone through all sorts of things building up the StackLang language so far:
Posts in StackLang: StackLang Part I: The Idea StackLang Part II: The Lexer StackLang Part III: The Parser StackLang Part IV: An Interpreter StackLang Part V: Compiling to C StackLang Part VI: Some Examples StackLang Part VII: New CLI and Datatypes StackLang Part VIII: Compiler Stacks StackLang Part IX: Better Testing But what can we actually do with it?</description></item><item><title>StackLang Part V: Compiling to C</title><link>https://blog.jverkamp.com/2023/07/12/stacklang-part-v-compiling-to-c/</link><pubDate>Wed, 12 Jul 2023 12:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2023/07/12/stacklang-part-v-compiling-to-c/</guid><description>&lt;p>It&amp;rsquo;s been a bit, but I hope it&amp;rsquo;s worth it. StackLang, part 5: compiling to C!&lt;/p></description></item><item><title>StackLang Part IV: An Interpreter</title><link>https://blog.jverkamp.com/2023/05/01/stacklang-part-iv-an-interpreter/</link><pubDate>Mon, 01 May 2023 23:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2023/05/01/stacklang-part-iv-an-interpreter/</guid><description>&lt;p>StackLang, part 4: an interpreter. Here we go again!&lt;/p>
&lt;p>This time, the goal is to actually get code running&lt;/p></description></item><item><title>StackLang Part III: The Parser</title><link>https://blog.jverkamp.com/2023/04/24/stacklang-part-iii-the-parser/</link><pubDate>Mon, 24 Apr 2023 00:01:00 +0000</pubDate><guid>https://blog.jverkamp.com/2023/04/24/stacklang-part-iii-the-parser/</guid><description>&lt;p>StackLang, part 3: parsing. This is going to be the most complicated one thus far! Onward.&lt;/p></description></item><item><title>StackLang Part II: The Lexer</title><link>https://blog.jverkamp.com/2023/04/16/stacklang-part-ii-the-lexer/</link><pubDate>Sun, 16 Apr 2023 23:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2023/04/16/stacklang-part-ii-the-lexer/</guid><description>&lt;p>StackLang, part 2: lexing.&lt;/p>
&lt;p>It&amp;rsquo;s quite often the simplest part of implementing a programming language (although parsers for s-expression based languages come close), but it&amp;rsquo;s still something that needs done. So here we go!&lt;/p></description></item><item><title>StackLang Part I: The Idea</title><link>https://blog.jverkamp.com/2023/04/14/stacklang-part-i-the-idea/</link><pubDate>Fri, 14 Apr 2023 23:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2023/04/14/stacklang-part-i-the-idea/</guid><description>&lt;p>I enjoy writing programming languages. &lt;a href="https://blog.jverkamp.com/2013/08/21/a-tiny-virtual-machine-in-racket/">Example: Tiny&lt;/a>. Let’s do that again.&lt;/p>
&lt;p>This time, StackLang:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-text" data-lang="text">&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> @[n fact]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> { n 1 - $fact fact n * }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> N 1 &amp;lt;= if
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>} @fact
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>5 $fact fact writeln
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Bit of gibberish there, I suppose, but the goal is to write everything in a postfix/stack based model. So &lt;code>n 1 - $fact fact n *&lt;/code> is equivalent to &lt;code>fact(fact, n - 1) * n&lt;/code> in a more traditional language.&lt;/p>
&lt;p>Over the next few posts, I hope to write up where I am thus far and what’s next.&lt;/p></description></item><item><title>Proc Macro Workshop: derive(Builder) [Part 2]</title><link>https://blog.jverkamp.com/2023/01/17/proc-macro-workshop-derivebuilder-part-2/</link><pubDate>Tue, 17 Jan 2023 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2023/01/17/proc-macro-workshop-derivebuilder-part-2/</guid><description>&lt;p>Okay, in &lt;a href="https://blog.jverkamp.com/2023/01/15/proc-macro-workshop-derivebuilder-part-1/">Proc Macro Workshop: derive(Builder) [Part 1]&lt;/a> we created a &lt;code>derive(Builder)&lt;/code> macro to implement the &lt;a href="https://en.wikipedia.org/wiki/builder%20pattern">builder pattern&lt;/a>. We created a new &lt;code>*Builder&lt;/code> struct, created methods to set each field in a chain, and allowed some fields to be optional.&lt;/p>
&lt;p>So what&amp;rsquo;s left? (Be sure to start with &lt;a href="https://blog.jverkamp.com/2023/01/15/proc-macro-workshop-derivebuilder-part-1/">Part 1&lt;/a> if you haven&amp;rsquo;t read that!)&lt;/p>
&lt;nav id="TableOfContents">
&lt;ul>
&lt;li>&lt;a href="#7-repeated-fields">7. Repeated fields&lt;/a>&lt;/li>
&lt;li>&lt;a href="#8-unrecognized-attributes">8. Unrecognized attributes&lt;/a>&lt;/li>
&lt;li>&lt;a href="#9-redefined-prelude-types">9. Redefined prelude types&lt;/a>&lt;/li>
&lt;li>&lt;a href="#whats-next">What&amp;rsquo;s next?&lt;/a>&lt;/li>
&lt;/ul>
&lt;/nav>
&lt;p>Let&amp;rsquo;s do this!&lt;/p></description></item><item><title>Proc Macro Workshop: derive(Builder) [Part 1]</title><link>https://blog.jverkamp.com/2023/01/15/proc-macro-workshop-derivebuilder-part-1/</link><pubDate>Sun, 15 Jan 2023 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2023/01/15/proc-macro-workshop-derivebuilder-part-1/</guid><description>&lt;p>While continuing to learn a bit more about macros in Rust (&lt;a href="https://blog.jverkamp.com/2023/01/12/writing-a-curry-macro-for-macrokata/">previous post&lt;/a>), I really want to move beyond the simple declarative macros and get into something a bit more interesting. Enter &lt;a href="https://doc.rust-lang.org/reference/procedural-macros.html" target="_blank" rel="noopener">procedural macros&lt;/a>. In a nutshell, procedural macros in Rust, rather than relying entirely on pattern matching and expansion are fully Rust functions.&lt;/p>
&lt;p>They take a specific input (a stream of tokens) and output a specific output (a new stream of tokens), but in between they can do just about anything a full Rust function can do. And what&amp;rsquo;s better yet&amp;hellip; they operate at compile time. And because they operate on tokens (rather than a full AST), you can do things that just aren&amp;rsquo;t syntactically valid in normal Rust. Things like&amp;hellip; &lt;a href="https://en.wikipedia.org/wiki/variadic%20functions">variadic functions&lt;/a> (a la &lt;code>print!&lt;/code> or &lt;code>var!&lt;/code>) or even crazier things like &lt;a href="https://docs.rs/inline-python/latest/inline_python/" target="_blank" rel="noopener">embedding Python in Rust&lt;/a> for &amp;hellip; reasons.&lt;/p>
&lt;p>Today specifically, I&amp;rsquo;ve started working through the &lt;a href="https://github.com/dtolnay/proc-macro-workshop" target="_blank" rel="noopener">prod-macro-workshop&lt;/a> repo. It&amp;rsquo;s a series of five examples macros with test cases and some guidance set up to help you get up to speed. I&amp;rsquo;m going to be working through the first of these: &lt;code>derive(Builder)&lt;/code>. Now don&amp;rsquo;t get me wrong. I really have no idea what I&amp;rsquo;m doing, so don&amp;rsquo;t take this as an example of &lt;em>how to write a macro&lt;/em>. But perhaps by writing this out, it will help me learn it better&amp;hellip; and if you happen to learn something as well, all the better!&lt;/p></description></item><item><title>Writing a curry! macro for MacroKata</title><link>https://blog.jverkamp.com/2023/01/12/writing-a-curry-macro-for-macrokata/</link><pubDate>Thu, 12 Jan 2023 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2023/01/12/writing-a-curry-macro-for-macrokata/</guid><description>&lt;p>Recently I&amp;rsquo;ve been wanting to learn more about macros in Rust. It was always one of my favorite parts of Racket, so let&amp;rsquo;s see what we can do.&lt;/p>
&lt;p>In order to do that, I&amp;rsquo;ve been following the excellent &lt;a href="https://tfpk.github.io/macrokata/" target="_blank" rel="noopener">MacroKata&lt;/a> series. It goes all the way through, starting with the very basics, adding in literals and expressions, handling repetition, nesting, and finally recursion.&lt;/p>
&lt;p>What I really want to talk about those is the one that I found most interesting: &lt;code>curry!&lt;/code>.&lt;/p></description></item><item><title>AoC 2017 Day 23: Duetvmc</title><link>https://blog.jverkamp.com/2017/12/23/aoc-2017-day-23-duetvmc/</link><pubDate>Sat, 23 Dec 2017 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2017/12/23/aoc-2017-day-23-duetvmc/</guid><description>&lt;h3 id="source-coprocessor-conflagrationhttpadventofcodecom2017day23">Source: &lt;a href="http://adventofcode.com/2017/day/23" target="_blank" rel="noopener">Coprocessor Conflagration&lt;/a>&lt;/h3>
&lt;blockquote>
&lt;p>&lt;strong>Part 1:&lt;/strong> Create a variation of the &lt;a href="https://blog.jverkamp.com/2017/12/18/aoc-2017-day-18-duetvm/">previous DuetVM&lt;/a> with only the following four instructions:&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;ul>
&lt;li>&lt;code>set X Y&lt;/code> sets register &lt;code>X&lt;/code> to &lt;code>Y&lt;/code>&lt;/li>
&lt;li>&lt;code>sub X Y&lt;/code> set register &lt;code>X&lt;/code> to &lt;code>X - Y&lt;/code>&lt;/li>
&lt;li>&lt;code>mul X Y&lt;/code> sets register &lt;code>X&lt;/code> to &lt;code>X * Y&lt;/code>&lt;/li>
&lt;li>&lt;code>jnz X Y&lt;/code> jumps with an offset of the value of &lt;code>Y&lt;/code>, iff &lt;code>X&lt;/code> is not equal to zero&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;blockquote>
&lt;p>If you run the given program, how many times is &lt;code>mul&lt;/code> invoked?&lt;/p>
&lt;/blockquote></description></item><item><title>'Tiny' Turing completeness without MMOV</title><link>https://blog.jverkamp.com/2013/08/22/tiny-turing-completeness-without-mmov/</link><pubDate>Thu, 22 Aug 2013 21:00:54 +0000</pubDate><guid>https://blog.jverkamp.com/2013/08/22/tiny-turing-completeness-without-mmov/</guid><description>&lt;p>Something was bugging me about my proof from yesterday. If we take another tack on proving Turing completeness, all we would have to prove is that we can simulate &lt;a href="https://en.wikipedia.org/wiki/Subleq#Subtract%20and%20branch%20if%20less%20than%20or%20equal%20to%20zero">SUBLEQ&lt;/a>. Since &lt;code>SUBLEQ&lt;/code> is Turing complete, that&amp;rsquo;s all we need&amp;ndash;just convert each &lt;code>SUBLEQ&lt;/code> into a &lt;code>SUB&lt;/code>, &lt;code>JZ&lt;/code>, and a &lt;code>JLS&lt;/code>. So that means that Tiny as written should be Turing complete.&lt;/p>
&lt;p>So how does that work?&lt;/p></description></item><item><title>A 'Tiny' virtual machine in Racket</title><link>https://blog.jverkamp.com/2013/08/21/a-tiny-virtual-machine-in-racket/</link><pubDate>Wed, 21 Aug 2013 00:00:28 +0000</pubDate><guid>https://blog.jverkamp.com/2013/08/21/a-tiny-virtual-machine-in-racket/</guid><description>&lt;p>&lt;a href="http://www.reddit.com/r/dailyprogrammer/comments/1kqxz9/080813_challenge_132_intermediate_tiny_assembler/">Today&amp;rsquo;s challenge&lt;/a> at /r/dailyprogrammer asks to implement an assembler for a small virtual machine. It has only 16 &lt;a href="https://en.wikipedia.org/wiki/Assembly%20language#Opcode%20mnemonics%20and%20extended%20mnemonics">mnemonics&lt;/a> which in unique &lt;a href="https://en.wikipedia.org/wiki/Opcode">opcodes&lt;/a> (each instruction can have multiple forms for if they&amp;rsquo;re accessing memory or literals), so it&amp;rsquo;s a simple virtual machine indeed. As a challenge, you&amp;rsquo;re supposed to write an interesting program (I actually wrote a virtual machine as well to test them). As an even better challenge, we&amp;rsquo;re supposed to prove that Tiny is &lt;a href="https://en.wikipedia.org/wiki/Turing%20complete">Turing complete&lt;/a>. Well, let&amp;rsquo;s get to it!&lt;/p></description></item></channel></rss>