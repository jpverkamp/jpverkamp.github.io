<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Compilers on jverkamp.com</title>
    <link>https://blog.jverkamp.com/programming/topics/compilers/</link>
    <description>Recent content in Compilers on jverkamp.com</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 23 Dec 2017 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://blog.jverkamp.com/programming/topics/compilers/atom.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>AoC 2017 Day 23: Duetvmc</title>
      <link>https://blog.jverkamp.com/2017/12/23/aoc-2017-day-23-duetvmc/</link>
      <pubDate>Sat, 23 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2017/12/23/aoc-2017-day-23-duetvmc/</guid>
      <description>&lt;h3 id=&#34;source-coprocessor-conflagration-http-adventofcode-com-2017-day-23&#34;&gt;Source: &lt;a href=&#34;http://adventofcode.com/2017/day/23&#34;&gt;Coprocessor Conflagration&lt;/a&gt;&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Part 1:&lt;/strong&gt; Create a variation of the &lt;a href=&#34;https://blog.jverkamp.com/2017/12/18/aoc-2017-day-18-duetvm/&#34;&gt;previous DuetVM&lt;/a&gt; with only the following four instructions:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;set X Y&lt;/code&gt; sets register &lt;code&gt;X&lt;/code&gt; to &lt;code&gt;Y&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sub X Y&lt;/code&gt; set register &lt;code&gt;X&lt;/code&gt; to &lt;code&gt;X - Y&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mul X Y&lt;/code&gt; sets register &lt;code&gt;X&lt;/code&gt; to &lt;code&gt;X * Y&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;jnz X Y&lt;/code&gt; jumps with an offset of the value of &lt;code&gt;Y&lt;/code&gt;, iff &lt;code&gt;X&lt;/code&gt; is not equal to zero&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you run the given program, how many times is &lt;code&gt;mul&lt;/code&gt; invoked?&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>&#39;Tiny&#39; Turing completeness without MMOV</title>
      <link>https://blog.jverkamp.com/2013/08/22/tiny-turing-completeness-without-mmov/</link>
      <pubDate>Thu, 22 Aug 2013 21:00:54 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2013/08/22/tiny-turing-completeness-without-mmov/</guid>
      <description>&lt;p&gt;Something was bugging me about my proof from yesterday. If we take another tack on proving Turing completeness, all we would have to prove is that we can simulate &lt;a href=&#34;https://en.wikipedia.org/wiki/Subleq#Subtract%20and%20branch%20if%20less%20than%20or%20equal%20to%20zero&#34;&gt;`SUBLEQ`&lt;/a&gt;. Since &lt;code&gt;SUBLEQ&lt;/code&gt; is Turing complete, that&amp;rsquo;s all we need&amp;ndash;just convert each &lt;code&gt;SUBLEQ&lt;/code&gt; into a &lt;code&gt;SUB&lt;/code&gt;, &lt;code&gt;JZ&lt;/code&gt;, and a &lt;code&gt;JLS&lt;/code&gt;. So that means that Tiny as written should be Turing complete.&lt;/p&gt;

&lt;p&gt;So how does that work?&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>A &#39;Tiny&#39; virtual machine in Racket</title>
      <link>https://blog.jverkamp.com/2013/08/21/a-tiny-virtual-machine-in-racket/</link>
      <pubDate>Wed, 21 Aug 2013 00:00:28 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2013/08/21/a-tiny-virtual-machine-in-racket/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://www.reddit.com/r/dailyprogrammer/comments/1kqxz9/080813_challenge_132_intermediate_tiny_assembler/&#34;&gt;Today&amp;rsquo;s challenge&lt;/a&gt; at /r/dailyprogrammer asks to implement an assembler for a small virtual machine. It has only 16 &lt;a href=&#34;https://en.wikipedia.org/wiki/Assembly%20language#Opcode%20mnemonics%20and%20extended%20mnemonics&#34;&gt;mnemonics&lt;/a&gt; which in unique &lt;a href=&#34;https://en.wikipedia.org/wiki/Opcode&#34;&gt;opcodes&lt;/a&gt; (each instruction can have multiple forms for if they&amp;rsquo;re accessing memory or literals), so it&amp;rsquo;s a simple virtual machine indeed. As a challenge, you&amp;rsquo;re supposed to write an interesting program (I actually wrote a virtual machine as well to test them). As an even better challenge, we&amp;rsquo;re supposed to prove that Tiny is &lt;a href=&#34;https://en.wikipedia.org/wiki/Turing%20complete&#34;&gt;Turing complete&lt;/a&gt;. Well, let&amp;rsquo;s get to it!&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>