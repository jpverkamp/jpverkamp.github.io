<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Compilers on jverkamp.com</title><link>https://blog.jverkamp.com/programming/topics/compilers/</link><description>Recent content in Compilers on jverkamp.com</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://blog.jverkamp.com/programming/topics/compilers/atom.xml" rel="self" type="application/rss+xml"/><item><title>Writing a curry! macro for MacroKata</title><link>https://blog.jverkamp.com/2023/01/12/writing-a-curry-macro-for-macrokata/</link><pubDate>Thu, 12 Jan 2023 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2023/01/12/writing-a-curry-macro-for-macrokata/</guid><description>&lt;p>Recently I&amp;rsquo;ve been wanting to learn more about macros in Rust. It was always one of my favorite parts of Racket, so let&amp;rsquo;s see what we can do.&lt;/p>
&lt;p>In order to do that, I&amp;rsquo;ve been following the excellent &lt;a href="https://tfpk.github.io/macrokata/">MacroKata&lt;/a> series. It goes all the way through, starting with the very basics, adding in literals and expressions, handling repetition, nesting, and finally recursion.&lt;/p>
&lt;p>What I really want to talk about those is the one that I found most interesting: &lt;code>curry!&lt;/code>.&lt;/p></description></item><item><title>AoC 2017 Day 23: Duetvmc</title><link>https://blog.jverkamp.com/2017/12/23/aoc-2017-day-23-duetvmc/</link><pubDate>Sat, 23 Dec 2017 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2017/12/23/aoc-2017-day-23-duetvmc/</guid><description>&lt;h3 id="source-coprocessor-conflagrationhttpadventofcodecom2017day23">Source: &lt;a href="http://adventofcode.com/2017/day/23">Coprocessor Conflagration&lt;/a>&lt;/h3>
&lt;blockquote>
&lt;p>&lt;strong>Part 1:&lt;/strong> Create a variation of the &lt;a href="https://blog.jverkamp.com/2017/12/18/aoc-2017-day-18-duetvm/">previous DuetVM&lt;/a> with only the following four instructions:&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;ul>
&lt;li>&lt;code>set X Y&lt;/code> sets register &lt;code>X&lt;/code> to &lt;code>Y&lt;/code>&lt;/li>
&lt;li>&lt;code>sub X Y&lt;/code> set register &lt;code>X&lt;/code> to &lt;code>X - Y&lt;/code>&lt;/li>
&lt;li>&lt;code>mul X Y&lt;/code> sets register &lt;code>X&lt;/code> to &lt;code>X * Y&lt;/code>&lt;/li>
&lt;li>&lt;code>jnz X Y&lt;/code> jumps with an offset of the value of &lt;code>Y&lt;/code>, iff &lt;code>X&lt;/code> is not equal to zero&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;blockquote>
&lt;p>If you run the given program, how many times is &lt;code>mul&lt;/code> invoked?&lt;/p>
&lt;/blockquote></description></item><item><title>'Tiny' Turing completeness without MMOV</title><link>https://blog.jverkamp.com/2013/08/22/tiny-turing-completeness-without-mmov/</link><pubDate>Thu, 22 Aug 2013 21:00:54 +0000</pubDate><guid>https://blog.jverkamp.com/2013/08/22/tiny-turing-completeness-without-mmov/</guid><description>&lt;p>Something was bugging me about my proof from yesterday. If we take another tack on proving Turing completeness, all we would have to prove is that we can simulate &lt;a href="https://en.wikipedia.org/wiki/Subleq#Subtract%20and%20branch%20if%20less%20than%20or%20equal%20to%20zero">`SUBLEQ`&lt;/a>. Since &lt;code>SUBLEQ&lt;/code> is Turing complete, that&amp;rsquo;s all we need&amp;ndash;just convert each &lt;code>SUBLEQ&lt;/code> into a &lt;code>SUB&lt;/code>, &lt;code>JZ&lt;/code>, and a &lt;code>JLS&lt;/code>. So that means that Tiny as written should be Turing complete.&lt;/p>
&lt;p>So how does that work?&lt;/p></description></item><item><title>A 'Tiny' virtual machine in Racket</title><link>https://blog.jverkamp.com/2013/08/21/a-tiny-virtual-machine-in-racket/</link><pubDate>Wed, 21 Aug 2013 00:00:28 +0000</pubDate><guid>https://blog.jverkamp.com/2013/08/21/a-tiny-virtual-machine-in-racket/</guid><description>&lt;p>&lt;a href="http://www.reddit.com/r/dailyprogrammer/comments/1kqxz9/080813_challenge_132_intermediate_tiny_assembler/">Today&amp;rsquo;s challenge&lt;/a> at /r/dailyprogrammer asks to implement an assembler for a small virtual machine. It has only 16 &lt;a href="https://en.wikipedia.org/wiki/Assembly%20language#Opcode%20mnemonics%20and%20extended%20mnemonics">mnemonics&lt;/a> which in unique &lt;a href="https://en.wikipedia.org/wiki/Opcode">opcodes&lt;/a> (each instruction can have multiple forms for if they&amp;rsquo;re accessing memory or literals), so it&amp;rsquo;s a simple virtual machine indeed. As a challenge, you&amp;rsquo;re supposed to write an interesting program (I actually wrote a virtual machine as well to test them). As an even better challenge, we&amp;rsquo;re supposed to prove that Tiny is &lt;a href="https://en.wikipedia.org/wiki/Turing%20complete">Turing complete&lt;/a>. Well, let&amp;rsquo;s get to it!&lt;/p></description></item></channel></rss>