<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Dotfiles on jverkamp.com</title>
    <link>https://blog.jverkamp.com/programming/topics/dotfiles/</link>
    <description>Recent content in Dotfiles on jverkamp.com</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 07 Jul 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://blog.jverkamp.com/programming/topics/dotfiles/atom.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>A Smart MySQL Wrapper</title>
      <link>https://blog.jverkamp.com/2020/07/07/a-smart-mysql-wrapper/</link>
      <pubDate>Tue, 07 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2020/07/07/a-smart-mysql-wrapper/</guid>
      <description>&lt;p&gt;One thing that I often need to do is deal with a large collection of database servers in different clusters and in different environments. On top of that, sometimes, I want a UI, sometime I want a CLI to script. And sometimes I&amp;rsquo;m on a VPN and sometimes I&amp;rsquo;m not. All together, it&amp;rsquo;s a rather complicated number of saved connections and CLI switches and everything else. All together, I want:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Specify the cluster, environment, and mode (read/write/adhoc)&lt;/li&gt;
&lt;li&gt;Specify if I want to run via CLI or via UI&lt;/li&gt;
&lt;li&gt;Specify an optional user with safely stored and used passwords&lt;/li&gt;
&lt;li&gt;Automatically connected via SSH tunnel if I&amp;rsquo;m not on VPN, but not if I am (for CLI or VPN)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let&amp;rsquo;s do it!&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Command line AES with openssl (and tar)</title>
      <link>https://blog.jverkamp.com/2020/04/09/command-line-aes-with-openssl-and-tar/</link>
      <pubDate>Thu, 09 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2020/04/09/command-line-aes-with-openssl-and-tar/</guid>
      <description>&lt;p&gt;I had &lt;a href=&#34;https://github.com/jpverkamp/dotfiles/blob/b708190/bin/aes&#34;&gt;a script&lt;/a&gt; that would take a file and a passphrase and either encrypt it or, if already encrypted, decrypt it. It worked well enough and I got to play with the &lt;code&gt;&lt;a href=&#34;https://docs.python.org/3/search.html?q=struct&#34;&gt;struct&lt;/a&gt;&lt;/code&gt;
 library. But it was home grown&amp;ndash;so not compatible with anything&amp;ndash;and didn&amp;rsquo;t properly validate anything. It worked well enough, but perhaps I could do something better.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Get kitten</title>
      <link>https://blog.jverkamp.com/2020/04/01/get-kitten/</link>
      <pubDate>Wed, 01 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2020/04/01/get-kitten/</guid>
      <description>&lt;p&gt;I upload a lot of images when testing for various things. And of course, I don&amp;rsquo;t want to use any of my own images. So what would I do instead?&lt;/p&gt;

&lt;p&gt;Kittens!&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fish&#34; data-lang=&#34;fish&#34;&gt;$ get-kitten

Downloading a &lt;span style=&#34;color:#ae81ff&#34;&gt;640&lt;/span&gt; x &lt;span style=&#34;color:#ae81ff&#34;&gt;480&lt;/span&gt; kitten
Downloading to kitten-1.jpg

$ open kitten-1.jpg&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;figure&gt;
    &lt;img src=&#34;https://blog.jverkamp.com/embeds/2020/kitten-1.jpg&#34;/&gt; 
&lt;/figure&gt;


&lt;p&gt;Perfect.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Split a file with headers</title>
      <link>https://blog.jverkamp.com/2020/03/30/split-a-file-with-headers/</link>
      <pubDate>Mon, 30 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2020/03/30/split-a-file-with-headers/</guid>
      <description>&lt;p&gt;I have a bunch of files with Arabic content that I need to split into chunks so they can be better run in parallel&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:iknow&#34;&gt;&lt;a href=&#34;#fn:iknow&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;. But by default, when I open them in a text editor, the encoding changes from &lt;code&gt;windows-1256&lt;/code&gt; to &lt;code&gt;utf-8&lt;/code&gt;&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:iknow2&#34;&gt;&lt;a href=&#34;#fn:iknow2&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;. I could use the Unix &lt;code&gt;split&lt;/code&gt; command to break them into chunks, but I need to preserve the headers. So&amp;hellip; how do I fix all this?&lt;/p&gt;

&lt;p&gt;Write a script!&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>work-on: A Quick Script for Context Switching</title>
      <link>https://blog.jverkamp.com/2019/05/07/work-on-a-quick-script-for-context-switching/</link>
      <pubDate>Tue, 07 May 2019 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2019/05/07/work-on-a-quick-script-for-context-switching/</guid>
      <description>&lt;p&gt;I work on a lot of projects.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ ls ~/Projects/ | wc -l
      &lt;span style=&#34;color:#ae81ff&#34;&gt;29&lt;/span&gt;

$ ls ~/Projects/work/ | wc -l
      &lt;span style=&#34;color:#ae81ff&#34;&gt;67&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And that&amp;rsquo;s just what I have checked out at the moment. ðŸ˜‡&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Tiny Helper Scripts for Command Line MySQL</title>
      <link>https://blog.jverkamp.com/2019/04/27/tiny-helper-scripts-for-command-line-mysql/</link>
      <pubDate>Sat, 27 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2019/04/27/tiny-helper-scripts-for-command-line-mysql/</guid>
      <description>&lt;p&gt;Quite often, I&amp;rsquo;ll find myself wanting to query and manipulate MySQL data entirely on the command line. I could be building up a pipeline or working on a task that I&amp;rsquo;m going to eventually automate but haven&amp;rsquo;t quite gotten to yet. Whenver I have to do something like that, I have a small pile of scripts I&amp;rsquo;ve written over time that help out:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;skiphead&lt;/code&gt;: Skip the first line of output, used to skip over headers in a query response&lt;/li&gt;
&lt;li&gt;&lt;code&gt;skipuntil&lt;/code&gt;: Skip all lines until we see one matching a pattern, used to resume partial tasks&lt;/li&gt;
&lt;li&gt;&lt;code&gt;commaify&lt;/code&gt;: Take a list of single values on the command line and turn them into a comma separated list (for use in &lt;code&gt;IN&lt;/code&gt; clauses)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;csv2json&lt;/code&gt;: a &lt;a href=&#34;https://blog.jverkamp.com/2015/12/11/csv-to-json/&#34;&gt;previously posted&lt;/a&gt; script for converting csv/tab delimited output to json&lt;/li&gt;
&lt;li&gt;&lt;code&gt;jq&lt;/code&gt;: not my script, but used to take the output of csv2json and query it further in ways that would be complicated to do with SQL&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Admitedly, the first two of those are one liners and I could easily remember them, but the advantage of a single command that does it is tab completion. &lt;code&gt;sk&amp;lt;tab&amp;gt;&lt;/code&gt;, arrow to select which one I want, and off we go. I could put them as an alias, but I don&amp;rsquo;t always use the same shell (mostly &lt;a href=&#34;https://fishshell.com/&#34;&gt;fish&lt;/a&gt;, but sometimes Bash or Zsh).&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Deep Dreams with Fish and Docker</title>
      <link>https://blog.jverkamp.com/2018/04/01/deep-dreams-with-fish-and-docker/</link>
      <pubDate>Sun, 01 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2018/04/01/deep-dreams-with-fish-and-docker/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://github.com/google/deepdream&#34;&gt;DeepDream&lt;/a&gt; is a &lt;a href=&#34;https://research.googleblog.com/2015/06/inceptionism-going-deeper-into-neural.html&#34;&gt;research project&lt;/a&gt; originally from Google that gives you a look into how &lt;a href=&#34;https://en.wikipedia.org/wiki/neural%20networks&#34;&gt;neural networks&lt;/a&gt; see the world. They&amp;rsquo;re fascinating, bizarre, and a lot of fun to play with. A bit of work getting them to work on your own machine though.&lt;/p&gt;

&lt;p&gt;Luckily, GitHub user &lt;a href=&#34;https://github.com/saturnism/deepdream-cli-docker&#34;&gt;saturnism&lt;/a&gt; has put together a lovely Docker-based tool that will do just that for us: &lt;a href=&#34;https://github.com/saturnism/deepdream-cli-docker&#34;&gt;deepdream-cli-docker&lt;/a&gt;. Unfortunately, the commands are still a bit long. Let&amp;rsquo;s clean it up a bit and add the ability to dream about non-JPGs (animated GIFs especially!).&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&#34;https://blog.jverkamp.com/embeds/2018/dream-sorcery.gif&#34;/&gt; 
&lt;/figure&gt;</description>
    </item>
    
    <item>
      <title>Making Fish Shell Smile</title>
      <link>https://blog.jverkamp.com/2018/01/12/making-fish-shell-smile/</link>
      <pubDate>Fri, 12 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2018/01/12/making-fish-shell-smile/</guid>
      <description>&lt;p&gt;When working in a shell, from time to time, I need to know if a command succeeded or failed. Sometimes, it&amp;rsquo;s easy:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fish&#34; data-lang=&#34;fish&#34;&gt;$ make noise

make: *** No rule to make target &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;`&lt;/span&gt;noise&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;#39;&lt;/span&gt;.  Stop.&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Sometimes, less so:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fish&#34; data-lang=&#34;fish&#34;&gt;$ grep frog podcasts.json &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; podcasts-about-frogs.txt&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Since, alas, I don&amp;rsquo;t have any podcasts about frogs, that command would fail silently. But that&amp;rsquo;s fixable!&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fish&#34; data-lang=&#34;fish&#34;&gt;$ grep frog podcasts.json &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; podcasts-about-frogs.txt

$ &lt;span style=&#34;color:#75715e&#34;&gt;# Bash/Zsh
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;$ &lt;span style=&#34;color:#66d9ef&#34;&gt;echo&lt;/span&gt; $?
1

$ &lt;span style=&#34;color:#75715e&#34;&gt;# Fish
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;$ &lt;span style=&#34;color:#66d9ef&#34;&gt;echo&lt;/span&gt; $status
&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>SSH Config ProxyCommand Tricks</title>
      <link>https://blog.jverkamp.com/2017/12/18/ssh-config-proxycommand-tricks/</link>
      <pubDate>Mon, 18 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2017/12/18/ssh-config-proxycommand-tricks/</guid>
      <description>&lt;p&gt;Working in security/operations in the tech industry, I use &lt;a href=&#34;https://en.wikipedia.org/wiki/SSH&#34;&gt;SSH&lt;/a&gt; a lot. To various different machines (some with hostnames, some without), using various different users and keys, and often (as was the case in my &lt;a href=&#34;https://blog.jverkamp.com/2017/12/13/dynamic-automatic-proxies/&#34;&gt;previous post&lt;/a&gt;) via a &lt;a href=&#34;https://en.wikipedia.org/wiki/bastion%20host&#34;&gt;bastion host&lt;/a&gt;. Over the years, I&amp;rsquo;ve collected a number of SSH tricks that make my life easier.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Dynamic Automatic Proxies</title>
      <link>https://blog.jverkamp.com/2017/12/13/dynamic-automatic-proxies/</link>
      <pubDate>Wed, 13 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2017/12/13/dynamic-automatic-proxies/</guid>
      <description>&lt;p&gt;On of the advantages of working in computer programming is that I can work from anywhere I have a computer and an internet connection. One of the disadvantages is that many of the resources that I need to do my job are locked to only be accessible within a specific network (albeit with a &lt;a href=&#34;https://en.wikipedia.org/wiki/bastion%20host&#34;&gt;bastion host&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;I long ago set up my SSH config to create an SSH tunnel and I can proxy many applications through that just by setting the &lt;code&gt;HTTP_PROXY&lt;/code&gt; and/or &lt;code&gt;HTTPS_PROXY&lt;/code&gt; environment variables. The downside of this though is that if I&amp;rsquo;m actually on a &amp;lsquo;safe&amp;rsquo; network, there&amp;rsquo;s no reason to use the bastion host and I would actually be putting extra load on it.&lt;/p&gt;

&lt;p&gt;My goal: write something that would let me automatically proxy applications when I need to but not when I don&amp;rsquo;t.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Deterministic Shuffling Using Hashes</title>
      <link>https://blog.jverkamp.com/2017/12/11/deterministic-shuffling-using-hashes/</link>
      <pubDate>Mon, 11 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2017/12/11/deterministic-shuffling-using-hashes/</guid>
      <description>&lt;p&gt;Whenever I create my &lt;a href=&#34;https://blog.jverkamp.com/2017/01/01/2017-reading-list/&#34;&gt;yearly reading list&lt;/a&gt;, I need a way to order the books. Sure, I could just shuffle them normally, but that leads me to the temptation of cheating and re-shuffling them so that the books I want to read most are first. What I really need is a shuffle that will shuffle the same way every time.&lt;/p&gt;

&lt;p&gt;Enter: hashsort&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Duplicating AeroSnap on OSX with Hammerspoon</title>
      <link>https://blog.jverkamp.com/2016/02/08/duplicating-aerosnap-on-osx-with-hammerspoon/</link>
      <pubDate>Mon, 08 Feb 2016 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2016/02/08/duplicating-aerosnap-on-osx-with-hammerspoon/</guid>
      <description>&lt;p&gt;Relatively recently, I switched my last Windows machine over to OSX. For the most part, it&amp;rsquo;s been great. One bit of functionality that I&amp;rsquo;ve been missing though is AeroSnap. Specifically the ability to use a keyboard shortcut to move windows to the left/right half of a monitor.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>gif shrinkage with ImageMagick</title>
      <link>https://blog.jverkamp.com/2015/03/05/gif-shrinkage-with-imagemagick/</link>
      <pubDate>Thu, 05 Mar 2015 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2015/03/05/gif-shrinkage-with-imagemagick/</guid>
      <description>&lt;p&gt;I have a gif collection now. :)&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&#34;https://blog.jverkamp.com/embeds/2015/dun-dun-dunnnnn.gif&#34;/&gt; 
&lt;/figure&gt;</description>
    </item>
    
    <item>
      <title>ts: Timestamping stdout</title>
      <link>https://blog.jverkamp.com/2015/02/26/ts-timestamping-stdout/</link>
      <pubDate>Thu, 26 Feb 2015 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2015/02/26/ts-timestamping-stdout/</guid>
      <description>&lt;p&gt;Loving data as much as I do, I like to &lt;a href=&#34;https://blog.jverkamp.com/2013/04/16/adventures-in-optimization-re-typed-racket/&#34;&gt;optimize&lt;/a&gt; things. To make sure I&amp;rsquo;m actually going the right way, it&amp;rsquo;s useful to time things. While it&amp;rsquo;s trivial in most languages to add timing, it&amp;rsquo;s even easier if you don&amp;rsquo;t have to.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>update-dotfiles encryption</title>
      <link>https://blog.jverkamp.com/2015/02/11/update-dotfiles-encryption/</link>
      <pubDate>Wed, 11 Feb 2015 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2015/02/11/update-dotfiles-encryption/</guid>
      <description>&lt;p&gt;I do like having my &lt;a href=&#34;https://blog.jverkamp.com/2015/02/11/update-dotfiles-encryption/&#34;&gt;dotfiles&lt;/a&gt; on GitHub. For one, it means that they&amp;rsquo;re always available when I set up a new machine. For two, others can see them and take whatever is interesting for their own dotfiles. But all that has a disadvantage: what if I want to store my SSH configs?&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>docker-bash and docker-stop-all</title>
      <link>https://blog.jverkamp.com/2015/02/04/docker-bash-and-docker-stop-all/</link>
      <pubDate>Wed, 04 Feb 2015 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2015/02/04/docker-bash-and-docker-stop-all/</guid>
      <description>&lt;p&gt;I&amp;rsquo;ve been using &lt;a href=&#34;https://www.docker.com/&#34;&gt;Docker&lt;/a&gt; a fair bit at work, so I&amp;rsquo;ve added a few quick aliases to my dotfiles make that a little bit easier:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;docker-bash&lt;/code&gt; - attach a &lt;code&gt;bash&lt;/code&gt; shell to the first available docker instance&lt;/li&gt;
&lt;li&gt;&lt;code&gt;docker-stop-all&lt;/code&gt; - stop all running docker instances&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>Removing large files from git history</title>
      <link>https://blog.jverkamp.com/2014/09/03/removing-large-files-from-git-history/</link>
      <pubDate>Wed, 03 Sep 2014 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2014/09/03/removing-large-files-from-git-history/</guid>
      <description>&lt;p&gt;A couple of quick additions to my &lt;a href=&#34;https://blog.jverkamp.com/2015/02/11/update-dotfiles-encryption/&#34;&gt;dotfiles&lt;/a&gt; today:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;git find-fat&lt;/code&gt; - find large files that no longer exist&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git trim-fat&lt;/code&gt; - remove files entirely from git history&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>Updating dotfiles</title>
      <link>https://blog.jverkamp.com/2014/08/04/updating-dotfiles/</link>
      <pubDate>Mon, 04 Aug 2014 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2014/08/04/updating-dotfiles/</guid>
      <description>&lt;p&gt;After all of these updates to my &lt;a href=&#34;https://blog.jverkamp.com/2015/02/11/update-dotfiles-encryption/&#34;&gt;dotfiles&lt;/a&gt;, I finally want something that I can use to keep them up to date. For that, let&amp;rsquo;s write a quick script that can do just that.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>slowcat</title>
      <link>https://blog.jverkamp.com/2014/08/01/slowcat/</link>
      <pubDate>Fri, 01 Aug 2014 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2014/08/01/slowcat/</guid>
      <description>&lt;p&gt;Sometimes &lt;code&gt;cat&lt;/code&gt; just prints too quickly.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Regex search and replace</title>
      <link>https://blog.jverkamp.com/2014/07/31/regex-search-and-replace/</link>
      <pubDate>Thu, 31 Jul 2014 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2014/07/31/regex-search-and-replace/</guid>
      <description>&lt;p&gt;Another random task that I find myself doing distressingly often: performing a regular expression search and replace recursively across a bunch of files. You can do this relatively directly with tools like &lt;code&gt;sed&lt;/code&gt;, but I can never quite remember the particularly flavor of regular expression syntax &lt;code&gt;sed&lt;/code&gt; uses.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Git aliases: undo, ud, and wipe</title>
      <link>https://blog.jverkamp.com/2014/07/28/git-aliases-undo-ud-and-wipe/</link>
      <pubDate>Mon, 28 Jul 2014 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2014/07/28/git-aliases-undo-ud-and-wipe/</guid>
      <description>&lt;p&gt;A few new git aliases:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;git undo&lt;/code&gt; - Undo the most recent commit, unstaging all new files&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git up&lt;/code&gt; - Update remote branches and submodules, delete merged branches&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git wipe&lt;/code&gt; - Remove all current changes, saving as a seperate branch&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>Parsing human readable times</title>
      <link>https://blog.jverkamp.com/2014/07/22/parsing-human-readable-times/</link>
      <pubDate>Tue, 22 Jul 2014 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2014/07/22/parsing-human-readable-times/</guid>
      <description>&lt;p&gt;So what day was 9 days ago again?&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ when &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt; days ago

&lt;span style=&#34;color:#ae81ff&#34;&gt;2014&lt;/span&gt;-07-13&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Command line user agent parsing</title>
      <link>https://blog.jverkamp.com/2014/02/07/command-line-user-agent-parsing/</link>
      <pubDate>Fri, 07 Feb 2014 00:10:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2014/02/07/command-line-user-agent-parsing/</guid>
      <description>&lt;p&gt;Quite often when working with internet data, you will find yourself wanting to figure out what sort of device users are using to access your content. Luckily, if you&amp;rsquo;re using HTTP, there is a standard for that: The &lt;a href=&#34;https://en.wikipedia.org/wiki/user-agent&#34;&gt;user-agent&lt;/a&gt; header.&lt;/p&gt;

&lt;p&gt;Since I&amp;rsquo;m in exactly that position, I&amp;rsquo;ve added a new script to my &lt;a href=&#34;https://blog.jverkamp.com/2015/02/11/update-dotfiles-encryption/&#34;&gt;Dotfiles&lt;/a&gt; that reads user agents on &lt;code&gt;stdin&lt;/code&gt;, parses them, and writes them back out in a given format.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Combining sort and uniq</title>
      <link>https://blog.jverkamp.com/2014/02/07/combining-sort-and-uniq/</link>
      <pubDate>Fri, 07 Feb 2014 00:05:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2014/02/07/combining-sort-and-uniq/</guid>
      <description>&lt;p&gt;A fairly common set of command line tools (at least for me) is to combine &lt;code&gt;sort&lt;/code&gt; and &lt;code&gt;uniq&lt;/code&gt; to get a count of unique items in a list of unsorted data. Something like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ find . -type &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;f&amp;#39;&lt;/span&gt; | rev | cut -d &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.&amp;#34;&lt;/span&gt; -f &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;1&amp;#34;&lt;/span&gt; | rev | sort | uniq -c | sort -nr | head

&lt;span style=&#34;color:#ae81ff&#34;&gt;2649&lt;/span&gt; htm
&lt;span style=&#34;color:#ae81ff&#34;&gt;1458&lt;/span&gt; png
 &lt;span style=&#34;color:#ae81ff&#34;&gt;993&lt;/span&gt; cache
 &lt;span style=&#34;color:#ae81ff&#34;&gt;612&lt;/span&gt; jpg
 &lt;span style=&#34;color:#ae81ff&#34;&gt;135&lt;/span&gt; css
 &lt;span style=&#34;color:#ae81ff&#34;&gt;102&lt;/span&gt; zip
  &lt;span style=&#34;color:#ae81ff&#34;&gt;99&lt;/span&gt; svg
  &lt;span style=&#34;color:#ae81ff&#34;&gt;60&lt;/span&gt; gif
  &lt;span style=&#34;color:#ae81ff&#34;&gt;45&lt;/span&gt; js
  &lt;span style=&#34;color:#ae81ff&#34;&gt;27&lt;/span&gt; pdf&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
  </channel>
</rss>