<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Dotfiles on jverkamp.com</title><link>https://blog.jverkamp.com/programming/topics/dotfiles/</link><description>Recent content in Dotfiles on jverkamp.com</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://blog.jverkamp.com/programming/topics/dotfiles/atom.xml" rel="self" type="application/rss+xml"/><item><title>Next/Previous 'Space' in Hammerspoon</title><link>https://blog.jverkamp.com/2023/01/30/next/previous-space-in-hammerspoon/</link><pubDate>Mon, 30 Jan 2023 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2023/01/30/next/previous-space-in-hammerspoon/</guid><description>&lt;p>A quick somewhat hacky followup to &lt;a href="https://blog.jverkamp.com/2023/01/23/once-again-to-hammerspoon/">Once Again, to Hammerspoon&lt;/a>: moving windows to the next/previous Space on a single screen.&lt;/p></description></item><item><title>Once Again, to Hammerspoon</title><link>https://blog.jverkamp.com/2023/01/23/once-again-to-hammerspoon/</link><pubDate>Mon, 23 Jan 2023 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2023/01/23/once-again-to-hammerspoon/</guid><description>&lt;p>Why oh why doesn&amp;rsquo;t macOS have a more powerful window manager&amp;hellip;&lt;/p>
&lt;p>Once upon a time, I moved from primarily Windows to primarily (at the time) OSX. I missed Aerospace&amp;ndash;the ability to use Win+Left/Right to snap windows to half the screen&amp;ndash;so I wrote a fix: &lt;a href="https://blog.jverkamp.com/2016/02/08/duplicating-aerosnap-on-osx-with-hammerspoon/">Duplicating AeroSnap on OSX with Hammerspoon&lt;/a>.&lt;/p>
&lt;p>Since then, I eventually discovered and moved to &lt;a href="https://magnet.crowdcafe.com/">Magnet&lt;/a> and all was well.&lt;/p>
&lt;p>But more recently, I&amp;rsquo;ve been wanting two things:&lt;/p>
&lt;ul>
&lt;li>a bit more control (once again), to define more arbitrary sizes and keystrokes&lt;/li>
&lt;li>the ability to automatically arrange windows to various &lt;a href="https://support.apple.com/en-us/HT204100">Mission Control&lt;/a> Spaces&lt;/li>
&lt;/ul>
&lt;p>And what a journey it&amp;rsquo;s been&amp;hellip;&lt;/p>
&lt;nav id="TableOfContents">
&lt;ul>
&lt;li>&lt;a href="#what-i-tried">What I tried&lt;/a>&lt;/li>
&lt;li>&lt;a href="#pushing-windows-around">Pushing windows around&lt;/a>&lt;/li>
&lt;li>&lt;a href="#sending-windows-to-the-correct-screendesktop">Sending windows to the correct screen/desktop&lt;/a>&lt;/li>
&lt;li>&lt;a href="#pulling-it-all-together-initlua">Pulling it all together (init.lua)&lt;/a>&lt;/li>
&lt;li>&lt;a href="#one-small-caveat-next">One small caveat: next()&lt;/a>&lt;/li>
&lt;li>&lt;a href="#useful-docs">Useful docs&lt;/a>&lt;/li>
&lt;/ul>
&lt;/nav></description></item><item><title>A Smart MySQL Wrapper</title><link>https://blog.jverkamp.com/2020/07/07/a-smart-mysql-wrapper/</link><pubDate>Tue, 07 Jul 2020 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2020/07/07/a-smart-mysql-wrapper/</guid><description>&lt;p>One thing that I often need to do is deal with a large collection of database servers in different clusters and in different environments. On top of that, sometimes, I want a UI, sometime I want a CLI to script. And sometimes I&amp;rsquo;m on a VPN and sometimes I&amp;rsquo;m not. All together, it&amp;rsquo;s a rather complicated number of saved connections and CLI switches and everything else. All together, I want:&lt;/p>
&lt;ul>
&lt;li>Specify the cluster, environment, and mode (read/write/adhoc)&lt;/li>
&lt;li>Specify if I want to run via CLI or via UI&lt;/li>
&lt;li>Specify an optional user with safely stored and used passwords&lt;/li>
&lt;li>Automatically connected via SSH tunnel if I&amp;rsquo;m not on VPN, but not if I am (for CLI or VPN)&lt;/li>
&lt;/ul>
&lt;p>Let&amp;rsquo;s do it!&lt;/p></description></item><item><title>Command line AES with openssl (and tar)</title><link>https://blog.jverkamp.com/2020/04/09/command-line-aes-with-openssl-and-tar/</link><pubDate>Thu, 09 Apr 2020 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2020/04/09/command-line-aes-with-openssl-and-tar/</guid><description>&lt;p>I had &lt;a href="https://github.com/jpverkamp/dotfiles/blob/b708190/bin/aes">a script&lt;/a> that would take a file and a passphrase and either encrypt it or, if already encrypted, decrypt it. It worked well enough and I got to play with the &lt;code>&lt;a href="https://docs.python.org/3/search.html?q=struct">struct&lt;/a>&lt;/code>
library. But it was home grown&amp;ndash;so not compatible with anything&amp;ndash;and didn&amp;rsquo;t properly validate anything. It worked well enough, but perhaps I could do something better.&lt;/p></description></item><item><title>Get kitten</title><link>https://blog.jverkamp.com/2020/04/01/get-kitten/</link><pubDate>Wed, 01 Apr 2020 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2020/04/01/get-kitten/</guid><description>&lt;p>I upload a lot of images when testing for various things. And of course, I don&amp;rsquo;t want to use any of my own images. So what would I do instead?&lt;/p>
&lt;p>Kittens!&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-fish" data-lang="fish">&lt;span style="display:flex;">&lt;span>$ get-kitten
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">Downloading&lt;/span> a &lt;span style="color:#ae81ff">640&lt;/span> x &lt;span style="color:#ae81ff">480&lt;/span> kitten
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">Downloading&lt;/span> to kitten-&lt;span style="color:#ae81ff">1&lt;/span>.jpg
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ open kitten-&lt;span style="color:#ae81ff">1&lt;/span>.jpg
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;figure>&lt;img src="https://blog.jverkamp.com/embeds/2020/kitten-1.jpg"/>
&lt;/figure>
&lt;p>Perfect.&lt;/p></description></item><item><title>Split a file with headers</title><link>https://blog.jverkamp.com/2020/03/30/split-a-file-with-headers/</link><pubDate>Mon, 30 Mar 2020 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2020/03/30/split-a-file-with-headers/</guid><description>&lt;p>I have a bunch of files with Arabic content that I need to split into chunks so they can be better run in parallel&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>. But by default, when I open them in a text editor, the encoding changes from &lt;code>windows-1256&lt;/code> to &lt;code>utf-8&lt;/code>&lt;sup id="fnref:2">&lt;a href="#fn:2" class="footnote-ref" role="doc-noteref">2&lt;/a>&lt;/sup>. I could use the Unix &lt;code>split&lt;/code> command to break them into chunks, but I need to preserve the headers. So&amp;hellip; how do I fix all this?&lt;/p>
&lt;p>Write a script!&lt;/p></description></item><item><title>work-on: A Quick Script for Context Switching</title><link>https://blog.jverkamp.com/2019/05/07/work-on-a-quick-script-for-context-switching/</link><pubDate>Tue, 07 May 2019 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2019/05/07/work-on-a-quick-script-for-context-switching/</guid><description>&lt;p>I work on a lot of projects.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ ls ~/Projects/ | wc -l
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">29&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ ls ~/Projects/work/ | wc -l
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">67&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>And that&amp;rsquo;s just what I have checked out at the moment. ðŸ˜‡&lt;/p></description></item><item><title>Tiny Helper Scripts for Command Line MySQL</title><link>https://blog.jverkamp.com/2019/04/27/tiny-helper-scripts-for-command-line-mysql/</link><pubDate>Sat, 27 Apr 2019 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2019/04/27/tiny-helper-scripts-for-command-line-mysql/</guid><description>&lt;p>Quite often, I&amp;rsquo;ll find myself wanting to query and manipulate MySQL data entirely on the command line. I could be building up a pipeline or working on a task that I&amp;rsquo;m going to eventually automate but haven&amp;rsquo;t quite gotten to yet. Whenver I have to do something like that, I have a small pile of scripts I&amp;rsquo;ve written over time that help out:&lt;/p>
&lt;ul>
&lt;li>&lt;code>skiphead&lt;/code>: Skip the first line of output, used to skip over headers in a query response&lt;/li>
&lt;li>&lt;code>skipuntil&lt;/code>: Skip all lines until we see one matching a pattern, used to resume partial tasks&lt;/li>
&lt;li>&lt;code>commaify&lt;/code>: Take a list of single values on the command line and turn them into a comma separated list (for use in &lt;code>IN&lt;/code> clauses)&lt;/li>
&lt;li>&lt;code>csv2json&lt;/code>: a &lt;a href="https://blog.jverkamp.com/2015/12/11/csv-to-json/">previously posted&lt;/a> script for converting csv/tab delimited output to json&lt;/li>
&lt;li>&lt;code>jq&lt;/code>: not my script, but used to take the output of csv2json and query it further in ways that would be complicated to do with SQL&lt;/li>
&lt;/ul>
&lt;p>Admitedly, the first two of those are one liners and I could easily remember them, but the advantage of a single command that does it is tab completion. &lt;code>sk&amp;lt;tab&amp;gt;&lt;/code>, arrow to select which one I want, and off we go. I could put them as an alias, but I don&amp;rsquo;t always use the same shell (mostly &lt;a href="https://fishshell.com/">fish&lt;/a>, but sometimes Bash or Zsh).&lt;/p></description></item><item><title>Deep Dreams with Fish and Docker</title><link>https://blog.jverkamp.com/2018/04/01/deep-dreams-with-fish-and-docker/</link><pubDate>Sun, 01 Apr 2018 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2018/04/01/deep-dreams-with-fish-and-docker/</guid><description>&lt;p>&lt;a href="https://github.com/google/deepdream">DeepDream&lt;/a> is a &lt;a href="https://research.googleblog.com/2015/06/inceptionism-going-deeper-into-neural.html">research project&lt;/a> originally from Google that gives you a look into how &lt;a href="https://en.wikipedia.org/wiki/neural%20networks">neural networks&lt;/a> see the world. They&amp;rsquo;re fascinating, bizarre, and a lot of fun to play with. A bit of work getting them to work on your own machine though.&lt;/p>
&lt;p>Luckily, GitHub user &lt;a href="https://github.com/saturnism/deepdream-cli-docker">saturnism&lt;/a> has put together a lovely Docker-based tool that will do just that for us: &lt;a href="https://github.com/saturnism/deepdream-cli-docker">deepdream-cli-docker&lt;/a>. Unfortunately, the commands are still a bit long. Let&amp;rsquo;s clean it up a bit and add the ability to dream about non-JPGs (animated GIFs especially!).&lt;/p>
&lt;figure>&lt;img src="https://blog.jverkamp.com/embeds/2018/dream-sorcery.gif"/>
&lt;/figure></description></item><item><title>Making Fish Shell Smile</title><link>https://blog.jverkamp.com/2018/01/12/making-fish-shell-smile/</link><pubDate>Fri, 12 Jan 2018 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2018/01/12/making-fish-shell-smile/</guid><description>&lt;p>When working in a shell, from time to time, I need to know if a command succeeded or failed. Sometimes, it&amp;rsquo;s easy:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-fish" data-lang="fish">&lt;span style="display:flex;">&lt;span>$ make noise
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">make&lt;/span>: *** No rule to make target `noise&amp;#39;. Stop.
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Sometimes, less so:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-fish" data-lang="fish">&lt;span style="display:flex;">&lt;span>$ grep frog podcasts.json &lt;span style="color:#f92672">&amp;gt;&lt;/span> podcasts-about-frogs.txt
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Since, alas, I don&amp;rsquo;t have any podcasts about frogs, that command would fail silently. But that&amp;rsquo;s fixable!&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-fish" data-lang="fish">&lt;span style="display:flex;">&lt;span>$ grep frog podcasts.json &lt;span style="color:#f92672">&amp;gt;&lt;/span> podcasts-about-frogs.txt
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ &lt;span style="color:#75715e"># Bash/Zsh
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>$ echo $?
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ &lt;span style="color:#75715e"># Fish
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>$ echo $status
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">1&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>SSH Config ProxyCommand Tricks</title><link>https://blog.jverkamp.com/2017/12/18/ssh-config-proxycommand-tricks/</link><pubDate>Mon, 18 Dec 2017 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2017/12/18/ssh-config-proxycommand-tricks/</guid><description>&lt;p>Working in security/operations in the tech industry, I use &lt;a href="https://en.wikipedia.org/wiki/SSH">SSH&lt;/a> a lot. To various different machines (some with hostnames, some without), using various different users and keys, and often (as was the case in my &lt;a href="https://blog.jverkamp.com/2017/12/13/dynamic-automatic-proxies/">previous post&lt;/a>) via a &lt;a href="https://en.wikipedia.org/wiki/bastion%20host">bastion host&lt;/a>. Over the years, I&amp;rsquo;ve collected a number of SSH tricks that make my life easier.&lt;/p></description></item><item><title>Dynamic Automatic Proxies</title><link>https://blog.jverkamp.com/2017/12/13/dynamic-automatic-proxies/</link><pubDate>Wed, 13 Dec 2017 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2017/12/13/dynamic-automatic-proxies/</guid><description>&lt;p>On of the advantages of working in computer programming is that I can work from anywhere I have a computer and an internet connection. One of the disadvantages is that many of the resources that I need to do my job are locked to only be accessible within a specific network (albeit with a &lt;a href="https://en.wikipedia.org/wiki/bastion%20host">bastion host&lt;/a>).&lt;/p>
&lt;p>I long ago set up my SSH config to create an SSH tunnel and I can proxy many applications through that just by setting the &lt;code>HTTP_PROXY&lt;/code> and/or &lt;code>HTTPS_PROXY&lt;/code> environment variables. The downside of this though is that if I&amp;rsquo;m actually on a &amp;lsquo;safe&amp;rsquo; network, there&amp;rsquo;s no reason to use the bastion host and I would actually be putting extra load on it.&lt;/p>
&lt;p>My goal: write something that would let me automatically proxy applications when I need to but not when I don&amp;rsquo;t.&lt;/p></description></item><item><title>Deterministic Shuffling Using Hashes</title><link>https://blog.jverkamp.com/2017/12/11/deterministic-shuffling-using-hashes/</link><pubDate>Mon, 11 Dec 2017 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2017/12/11/deterministic-shuffling-using-hashes/</guid><description>&lt;p>Whenever I create my &lt;a href="https://blog.jverkamp.com/2017/01/01/2017-reading-list/">yearly reading list&lt;/a>, I need a way to order the books. Sure, I could just shuffle them normally, but that leads me to the temptation of cheating and re-shuffling them so that the books I want to read most are first. What I really need is a shuffle that will shuffle the same way every time.&lt;/p>
&lt;p>Enter: hashsort&lt;/p></description></item><item><title>Duplicating AeroSnap on OSX with Hammerspoon</title><link>https://blog.jverkamp.com/2016/02/08/duplicating-aerosnap-on-osx-with-hammerspoon/</link><pubDate>Mon, 08 Feb 2016 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2016/02/08/duplicating-aerosnap-on-osx-with-hammerspoon/</guid><description>&lt;p>Relatively recently, I switched my last Windows machine over to OSX. For the most part, it&amp;rsquo;s been great. One bit of functionality that I&amp;rsquo;ve been missing though is AeroSnap. Specifically the ability to use a keyboard shortcut to move windows to the left/right half of a monitor.&lt;/p></description></item><item><title>gif shrinkage with ImageMagick</title><link>https://blog.jverkamp.com/2015/03/05/gif-shrinkage-with-imagemagick/</link><pubDate>Thu, 05 Mar 2015 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2015/03/05/gif-shrinkage-with-imagemagick/</guid><description>&lt;p>I have a gif collection now. :)&lt;/p>
&lt;figure>&lt;img src="https://blog.jverkamp.com/embeds/2015/dun-dun-dunnnnn.gif"/>
&lt;/figure></description></item><item><title>ts: Timestamping stdout</title><link>https://blog.jverkamp.com/2015/02/26/ts-timestamping-stdout/</link><pubDate>Thu, 26 Feb 2015 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2015/02/26/ts-timestamping-stdout/</guid><description>&lt;p>Loving data as much as I do, I like to &lt;a href="https://blog.jverkamp.com/2013/04/16/adventures-in-optimization-re-typed-racket/">optimize&lt;/a> things. To make sure I&amp;rsquo;m actually going the right way, it&amp;rsquo;s useful to time things. While it&amp;rsquo;s trivial in most languages to add timing, it&amp;rsquo;s even easier if you don&amp;rsquo;t have to.&lt;/p></description></item><item><title>update-dotfiles encryption</title><link>https://blog.jverkamp.com/2015/02/11/update-dotfiles-encryption/</link><pubDate>Wed, 11 Feb 2015 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2015/02/11/update-dotfiles-encryption/</guid><description>&lt;p>I do like having my &lt;a href="https://blog.jverkamp.com/2015/02/11/update-dotfiles-encryption/">dotfiles&lt;/a> on GitHub. For one, it means that they&amp;rsquo;re always available when I set up a new machine. For two, others can see them and take whatever is interesting for their own dotfiles. But all that has a disadvantage: what if I want to store my SSH configs?&lt;/p></description></item><item><title>docker-bash and docker-stop-all</title><link>https://blog.jverkamp.com/2015/02/04/docker-bash-and-docker-stop-all/</link><pubDate>Wed, 04 Feb 2015 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2015/02/04/docker-bash-and-docker-stop-all/</guid><description>&lt;p>I&amp;rsquo;ve been using &lt;a href="https://www.docker.com/">Docker&lt;/a> a fair bit at work, so I&amp;rsquo;ve added a few quick aliases to my dotfiles make that a little bit easier:&lt;/p>
&lt;ul>
&lt;li>&lt;code>docker-bash&lt;/code> - attach a &lt;code>bash&lt;/code> shell to the first available docker instance&lt;/li>
&lt;li>&lt;code>docker-stop-all&lt;/code> - stop all running docker instances&lt;/li>
&lt;/ul></description></item><item><title>Removing large files from git history</title><link>https://blog.jverkamp.com/2014/09/03/removing-large-files-from-git-history/</link><pubDate>Wed, 03 Sep 2014 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2014/09/03/removing-large-files-from-git-history/</guid><description>&lt;p>A couple of quick additions to my &lt;a href="https://blog.jverkamp.com/2015/02/11/update-dotfiles-encryption/">dotfiles&lt;/a> today:&lt;/p>
&lt;ul>
&lt;li>&lt;code>git find-fat&lt;/code> - find large files that no longer exist&lt;/li>
&lt;li>&lt;code>git trim-fat&lt;/code> - remove files entirely from git history&lt;/li>
&lt;/ul></description></item><item><title>Updating dotfiles</title><link>https://blog.jverkamp.com/2014/08/04/updating-dotfiles/</link><pubDate>Mon, 04 Aug 2014 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2014/08/04/updating-dotfiles/</guid><description>&lt;p>After all of these updates to my &lt;a href="https://blog.jverkamp.com/2015/02/11/update-dotfiles-encryption/">dotfiles&lt;/a>, I finally want something that I can use to keep them up to date. For that, let&amp;rsquo;s write a quick script that can do just that.&lt;/p></description></item><item><title>slowcat</title><link>https://blog.jverkamp.com/2014/08/01/slowcat/</link><pubDate>Fri, 01 Aug 2014 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2014/08/01/slowcat/</guid><description>&lt;p>Sometimes &lt;code>cat&lt;/code> just prints too quickly.&lt;/p></description></item><item><title>Regex search and replace</title><link>https://blog.jverkamp.com/2014/07/31/regex-search-and-replace/</link><pubDate>Thu, 31 Jul 2014 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2014/07/31/regex-search-and-replace/</guid><description>&lt;p>Another random task that I find myself doing distressingly often: performing a regular expression search and replace recursively across a bunch of files. You can do this relatively directly with tools like &lt;code>sed&lt;/code>, but I can never quite remember the particularly flavor of regular expression syntax &lt;code>sed&lt;/code> uses.&lt;/p></description></item><item><title>Git aliases: undo, ud, and wipe</title><link>https://blog.jverkamp.com/2014/07/28/git-aliases-undo-ud-and-wipe/</link><pubDate>Mon, 28 Jul 2014 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2014/07/28/git-aliases-undo-ud-and-wipe/</guid><description>&lt;p>A few new git aliases:&lt;/p>
&lt;ul>
&lt;li>&lt;code>git undo&lt;/code> - Undo the most recent commit, unstaging all new files&lt;/li>
&lt;li>&lt;code>git up&lt;/code> - Update remote branches and submodules, delete merged branches&lt;/li>
&lt;li>&lt;code>git wipe&lt;/code> - Remove all current changes, saving as a seperate branch&lt;/li>
&lt;/ul></description></item><item><title>Parsing human readable times</title><link>https://blog.jverkamp.com/2014/07/22/parsing-human-readable-times/</link><pubDate>Tue, 22 Jul 2014 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2014/07/22/parsing-human-readable-times/</guid><description>&lt;p>So what day was 9 days ago again?&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ when &lt;span style="color:#ae81ff">9&lt;/span> days ago
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>2014-07-13
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Command line user agent parsing</title><link>https://blog.jverkamp.com/2014/02/07/command-line-user-agent-parsing/</link><pubDate>Fri, 07 Feb 2014 00:10:00 +0000</pubDate><guid>https://blog.jverkamp.com/2014/02/07/command-line-user-agent-parsing/</guid><description>&lt;p>Quite often when working with internet data, you will find yourself wanting to figure out what sort of device users are using to access your content. Luckily, if you&amp;rsquo;re using HTTP, there is a standard for that: The &lt;a href="https://en.wikipedia.org/wiki/user-agent">user-agent&lt;/a> header.&lt;/p>
&lt;p>Since I&amp;rsquo;m in exactly that position, I&amp;rsquo;ve added a new script to my &lt;a href="https://blog.jverkamp.com/2015/02/11/update-dotfiles-encryption/">Dotfiles&lt;/a> that reads user agents on &lt;code>stdin&lt;/code>, parses them, and writes them back out in a given format.&lt;/p></description></item><item><title>Combining sort and uniq</title><link>https://blog.jverkamp.com/2014/02/07/combining-sort-and-uniq/</link><pubDate>Fri, 07 Feb 2014 00:05:00 +0000</pubDate><guid>https://blog.jverkamp.com/2014/02/07/combining-sort-and-uniq/</guid><description>&lt;p>A fairly common set of command line tools (at least for me) is to combine &lt;code>sort&lt;/code> and &lt;code>uniq&lt;/code> to get a count of unique items in a list of unsorted data. Something like this:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ find . -type &lt;span style="color:#e6db74">&amp;#39;f&amp;#39;&lt;/span> | rev | cut -d &lt;span style="color:#e6db74">&amp;#34;.&amp;#34;&lt;/span> -f &lt;span style="color:#e6db74">&amp;#34;1&amp;#34;&lt;/span> | rev | sort | uniq -c | sort -nr | head
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">2649&lt;/span> htm
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">1458&lt;/span> png
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">993&lt;/span> cache
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">612&lt;/span> jpg
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">135&lt;/span> css
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">102&lt;/span> zip
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">99&lt;/span> svg
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">60&lt;/span> gif
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">45&lt;/span> js
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">27&lt;/span> pdf
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item></channel></rss>