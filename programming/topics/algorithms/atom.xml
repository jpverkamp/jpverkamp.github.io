<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Algorithms on jverkamp.com</title><link>https://blog.jverkamp.com/programming/topics/algorithms/</link><description>Recent content in Algorithms on jverkamp.com</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://blog.jverkamp.com/programming/topics/algorithms/atom.xml" rel="self" type="application/rss+xml"/><item><title>AoC 2021 Day 23: Amphipodinator</title><link>https://blog.jverkamp.com/2021/12/23/aoc-2021-day-23-amphipodinator/</link><pubDate>Thu, 23 Dec 2021 00:00:03 +0000</pubDate><guid>https://blog.jverkamp.com/2021/12/23/aoc-2021-day-23-amphipodinator/</guid><description>&lt;h3 id="source-amphipodhttpsadventofcodecom2021day23">Source: &lt;a href="https://adventofcode.com/2021/day/23">Amphipod&lt;/a>&lt;/h3>
&lt;h4 id="part-1-given-4-rooms-full-of-amphipods-with-various-energy-costs-for-movement-a1-b10-c100-d1000-and-a-hallway-how-much-energy-does-it-take-at-minimum-to-sort-the-amphipods-into-their-own-rooms-with-the-following-conditions">&lt;strong>Part 1:&lt;/strong> Given 4 rooms full of amphipods with various energy costs for movement (a=1, b=10, c=100, d=1000) and a hallway, how much energy does it take (at minimum) to sort the amphipods into their own rooms with the following conditions:&lt;/h4></description></item><item><title>AoC 2021 Day 22: Cubinator</title><link>https://blog.jverkamp.com/2021/12/22/aoc-2021-day-22-cubinator/</link><pubDate>Wed, 22 Dec 2021 00:00:05 +0000</pubDate><guid>https://blog.jverkamp.com/2021/12/22/aoc-2021-day-22-cubinator/</guid><description>&lt;h3 id="source-reactor-reboothttpsadventofcodecom2021day22">Source: &lt;a href="https://adventofcode.com/2021/day/22">Reactor Reboot&lt;/a>&lt;/h3>
&lt;h4 id="part-1-given-a-series-of-3d-cubes-that-either-turn-on-all-or-turn-off-all-points-in-their-region-calculate-how-many-points-in-the-region--5050-5050-5050-are-on-at-the-end">&lt;strong>Part 1:&lt;/strong> Given a series of 3D cubes that either turn ON all or turn OFF all points in their region, calculate how many points in the region (-50..50,-50..50,-50..50) are ON at the end.&lt;/h4></description></item><item><title>AoC 2021 Day 21: Dicinator</title><link>https://blog.jverkamp.com/2021/12/21/aoc-2021-day-21-dicinator/</link><pubDate>Tue, 21 Dec 2021 00:00:05 +0000</pubDate><guid>https://blog.jverkamp.com/2021/12/21/aoc-2021-day-21-dicinator/</guid><description>&lt;h3 id="source-dirac-dicehttpsadventofcodecom2021day21">Source: &lt;a href="https://adventofcode.com/2021/day/21">Dirac Dice&lt;/a>&lt;/h3>
&lt;h4 id="part-1-play-a-simple-game-describe-below-with-a-loaded-d100-that-always-rolls-1-2-3--99-100-1--return-the-score-of-the-losing-player-times-the-number-of-times-the-die-was-rolled">&lt;strong>Part 1:&lt;/strong> Play a simple game (describe below) with a loaded D100 (that always rolls 1, 2, 3, &amp;hellip; 99, 100, 1, &amp;hellip;). Return the score of the losing player times the number of times the die was rolled.&lt;/h4></description></item><item><title>AoC 2021 Day 15: Low Ceiling Simulator</title><link>https://blog.jverkamp.com/2021/12/15/aoc-2021-day-15-low-ceiling-simulator/</link><pubDate>Wed, 15 Dec 2021 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2021/12/15/aoc-2021-day-15-low-ceiling-simulator/</guid><description>&lt;h3 id="source-chitonhttpsadventofcodecom2021day15">Source: &lt;a href="https://adventofcode.com/2021/day/15">Chiton&lt;/a>&lt;/h3>
&lt;h4 id="part-1-given-a-grid-of-weights-find-the-minimum-path-from-top-left-to-top-right-return-the-total-weight-along-that-path">&lt;strong>Part 1:&lt;/strong> Given a grid of weights, find the minimum path from top left to top right. Return the total weight along that path.&lt;/h4></description></item><item><title>AoC 2021 Day 12: Submarine Spider</title><link>https://blog.jverkamp.com/2021/12/12/aoc-2021-day-12-submarine-spider/</link><pubDate>Sun, 12 Dec 2021 00:00:15 +0000</pubDate><guid>https://blog.jverkamp.com/2021/12/12/aoc-2021-day-12-submarine-spider/</guid><description>&lt;h3 id="source-passage-pathinghttpsadventofcodecom2021day12">Source: &lt;a href="https://adventofcode.com/2021/day/12">Passage Pathing&lt;/a>&lt;/h3>
&lt;h4 id="part-1-given-a-list-of-edges-in-a-bi-directional-graph-count-the-number-of-paths-from-start-to-end-such-that-nodes-named-with-lowercase-letters-are-visited-once-and-nodes-with-uppercase-letters-can-be-visited-any-number-of-times">&lt;strong>Part 1:&lt;/strong> Given a list of edges in a bi-directional graph, count the number of paths from &lt;code>start&lt;/code> to &lt;code>end&lt;/code> such that nodes named with lowercase letters are visited once, and nodes with uppercase letters can be visited any number of times.&lt;/h4></description></item><item><title>AoC 2021 Day 8: Seven Segment Demystifier</title><link>https://blog.jverkamp.com/2021/12/08/aoc-2021-day-8-seven-segment-demystifier/</link><pubDate>Wed, 08 Dec 2021 00:00:10 +0000</pubDate><guid>https://blog.jverkamp.com/2021/12/08/aoc-2021-day-8-seven-segment-demystifier/</guid><description>&lt;h3 id="source-seven-segment-searchhttpsadventofcodecom2021day8">Source: &lt;a href="https://adventofcode.com/2021/day/8">Seven Segment Search&lt;/a>&lt;/h3>
&lt;h4 id="part-1-simulate-a-hahahugoshortcode-s0-hbhb-where-you-do-not-know-which-input-wire-controls-which-segment-given-the-wires-used-in-all-ten-digits-and-four-output-digits-count-how-many-times-1-4-7-and-8-are-outputted">&lt;strong>Part 1:&lt;/strong> Simulate a &lt;a href="https://en.wikipedia.org/wiki/seven%20segment%20displey">seven segment displey&lt;/a> where you do not know which input wire controls which segment. Given the wires used in all ten digits and four output digits, count how many times 1, 4, 7, and 8 are outputted.&lt;/h4></description></item><item><title>Solving Snakebird</title><link>https://blog.jverkamp.com/2021/08/18/solving-snakebird/</link><pubDate>Wed, 18 Aug 2021 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2021/08/18/solving-snakebird/</guid><description>&lt;p>&lt;a href="https://store.steampowered.com/app/357300/Snakebird/">Snakebird!&lt;/a>&lt;/p>
&lt;figure>&lt;img src="https://blog.jverkamp.com/embeds/2021/snakebird-0.png"/>
&lt;/figure>
&lt;p>A cute little puzzle game, where you move around snake(birds). Move any number of snakes around the level, eating fruit, and getting to the exit. The main gotchas are that you have gravity to content with&amp;ndash;your snake will easily fall off the edge of the world&amp;ndash;and each time you eat a fruit, your snake gets bigger. This can help get longer to get into hard to reach places or it can cause trouble when you trap yourself in corners.&lt;/p>
&lt;p>Let&amp;rsquo;s use the new &lt;a href="2021-08-17-immutable.js-solvers">immutable.js solver&lt;/a> to solve these problems!&lt;/p></description></item><item><title>Immutable.js Solvers</title><link>https://blog.jverkamp.com/2021/08/17/immutable.js-solvers/</link><pubDate>Tue, 17 Aug 2021 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2021/08/17/immutable.js-solvers/</guid><description>&lt;p>A bit ago I wrote about writing a &lt;a href="https://blog.jverkamp.com/2021/06/25/a-generic-brute-force-backtracking-solver/">generic brute force solver&lt;/a> (wow, was that really two months ago?). It got &amp;hellip; complicate. Mostly, because every time I wrote a &lt;code>step&lt;/code> function, I had to be careful to undo the same. Wouldn&amp;rsquo;t it be nice if we could just write a step function and get backtracking for &amp;lsquo;free&amp;rsquo;?&lt;/p>
&lt;p>Well, with immutability you can!&lt;/p></description></item><item><title>Regular Expression Fractals</title><link>https://blog.jverkamp.com/2014/10/05/regular-expression-fractals/</link><pubDate>Sun, 05 Oct 2014 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2014/10/05/regular-expression-fractals/</guid><description>&lt;p>Oops, turns out I haven&amp;rsquo;t had a post in a good long while. Before it gets even longer, I figure that I should take one off my backlog and just write it up, even if it is a little on the shorter side.&lt;/p>
&lt;p>Today&amp;rsquo;s post was inspired by this post on /r/dailyprogrammer a month ago today:
&lt;a href="https://www.reddit.com/r/dailyprogrammer/comments/2fkh8u/9052014_challenge_178_hard_regular_expression/">Challenge #178 [Hard] Regular Expression Fractals&lt;/a>. The basic idea is that you are going to take a rectangular region and divide it into four quadrants, again and again, recording the path as you go (images from that post):&lt;/p>
&lt;p>&lt;figure>&lt;img src="https://blog.jverkamp.com/embeds/2014/step-1.png"/>
&lt;/figure>
&lt;figure>&lt;img src="https://blog.jverkamp.com/embeds/2014/step-2.png"/>
&lt;/figure>
&lt;figure>&lt;img src="https://blog.jverkamp.com/embeds/2014/step-3.png"/>
&lt;/figure>
&lt;/p></description></item><item><title>Look and Say</title><link>https://blog.jverkamp.com/2014/09/15/look-and-say/</link><pubDate>Mon, 15 Sep 2014 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2014/09/15/look-and-say/</guid><description>&lt;p>Random quick post today&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>. Basically, we want to write code to generate what&amp;rsquo;s known as &lt;a href="https://en.wikipedia.org/wiki/Look%20and%20Say%20sequence">Look and Say sequence&lt;/a>:&lt;/p>
&lt;blockquote>
&lt;p>To generate a member of the sequence from the previous member, read off the digits of the previous member, counting the number of digits in groups of the same digit. For example:&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;ul>
&lt;li>1 is read off as &amp;ldquo;one 1&amp;rdquo; or 11.&lt;/li>
&lt;li>11 is read off as &amp;ldquo;two 1s&amp;rdquo; or 21.&lt;/li>
&lt;li>21 is read off as &amp;ldquo;one 2, then one 1&amp;rdquo; or 1211.&lt;/li>
&lt;li>1211 is read off as &amp;ldquo;one 1, then one 2, then two 1s&amp;rdquo; or 111221.&lt;/li>
&lt;li>111221 is read off as &amp;ldquo;three 1s, then two 2s, then one 1&amp;rdquo; or 312211.&lt;/li>
&lt;/ul>
&lt;/blockquote></description></item><item><title>Langton's ant</title><link>https://blog.jverkamp.com/2014/08/07/langtons-ant/</link><pubDate>Thu, 07 Aug 2014 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2014/08/07/langtons-ant/</guid><description>&lt;p>Here&amp;rsquo;s another post from /r/DailyProgrammer: &lt;a href="http://www.reddit.com/r/dailyprogrammer/comments/2c4ka3/7302014_challenge_173_intermediate_advanced/">Advanced Langton&amp;rsquo;s Ant&lt;/a>. I&amp;rsquo;m a bit behind the times (see tomorrow&amp;rsquo;s post), but it&amp;rsquo;s still an interesting enough exercise, so let&amp;rsquo;s go for it!&lt;/p>
&lt;figure>&lt;img src="https://blog.jverkamp.com/embeds/2014/LR.gif"/>
&lt;/figure></description></item></channel></rss>