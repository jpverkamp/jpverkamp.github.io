<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Algorithms on jverkamp.com</title><link>https://blog.jverkamp.com/programming/topics/algorithms/</link><description>Recent content in Algorithms on jverkamp.com</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://blog.jverkamp.com/programming/topics/algorithms/atom.xml" rel="self" type="application/rss+xml"/><item><title>AoC 2024 Day 13: Cramerinator</title><link>https://blog.jverkamp.com/2024/12/13/aoc-2024-day-13-cramerinator/</link><pubDate>Fri, 13 Dec 2024 00:00:03 +0000</pubDate><guid>https://blog.jverkamp.com/2024/12/13/aoc-2024-day-13-cramerinator/</guid><description>&lt;h2 id="source-day-13-claw-contraptionhttpsadventofcodecom2024day13">Source: &lt;a href="https://adventofcode.com/2024/day/13" target="_blank" rel="noopener">Day 13: Claw Contraption&lt;/a>&lt;/h2>
&lt;p>&lt;a href="https://github.com/jpverkamp/advent-of-code/blob/master/2024/src/day13.rs" target="_blank" rel="noopener">Full solution&lt;/a> for today (spoilers!).&lt;/p>
&lt;nav id="TableOfContents">
&lt;ul>
&lt;li>&lt;a href="#source-day-13-claw-contraptionhttpsadventofcodecom2024day13">Source: &lt;a href="https://adventofcode.com/2024/day/13">Day 13: Claw Contraption&lt;/a>&lt;/a>&lt;/li>
&lt;li>&lt;a href="#part-1">Part 1&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#optimization-1-cramers-rule">Optimization 1: Cramer&amp;rsquo;s Rule&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#part-2">Part 2&lt;/a>&lt;/li>
&lt;li>&lt;a href="#benchmarks">Benchmarks&lt;/a>&lt;/li>
&lt;li>&lt;a href="#optimization-2-really-going-off-the-deep-end">Optimization 2: Really going off the deep end&lt;/a>&lt;/li>
&lt;/ul>
&lt;/nav>
&lt;h2 id="part-1">Part 1&lt;/h2>
&lt;blockquote>
&lt;p>Given Button A &lt;code>(ax, ay)&lt;/code>, Button B &lt;code>(bx, by)&lt;/code>, and Prize &lt;code>(px, py)&lt;/code>; how many times must you press Button A (&lt;code>a&lt;/code>) and Button B (&lt;code>b&lt;/code>) to reach the Prize? Sum &lt;code>3a + b&lt;/code> for each machine that has a solution.&lt;/p>
&lt;/blockquote></description></item><item><title>Solving Cosmic Express</title><link>https://blog.jverkamp.com/2024/09/02/solving-cosmic-express/</link><pubDate>Mon, 02 Sep 2024 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2024/09/02/solving-cosmic-express/</guid><description>&lt;p>Another &lt;a href="https://blog.jverkamp.com/series/rust-solvers/">Rust Solvers&lt;/a> puzzle: &lt;a href="https://store.steampowered.com/app/583270/Cosmic_Express/" target="_blank" rel="noopener">Cosmic Express&lt;/a>. Basically, it&amp;rsquo;s a routefinding puzzle. You have a train that needs a track from entrance to exit, picking up and dropping off cargo on the way.&lt;/p>
&lt;p>It&amp;rsquo;s actual a relatively simple puzzle, so far as things go, but one thing that&amp;rsquo;s interesting from a solving perspective is that branching paths &lt;em>really&lt;/em> don&amp;rsquo;t work great with my solver code. Paths just have a crazy branching factor when compared to (for example) &lt;a href="https://blog.jverkamp.com/2024/06/17/the-golf-peaks-of-solving/">playing one of a handful of cards&lt;/a>.&lt;/p>
&lt;p>But it&amp;rsquo;s still an interesting puzzle!&lt;/p></description></item><item><title>The Golf (Peaks) of Solving</title><link>https://blog.jverkamp.com/2024/06/17/the-golf-peaks-of-solving/</link><pubDate>Mon, 17 Jun 2024 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2024/06/17/the-golf-peaks-of-solving/</guid><description>&lt;p>Another day (week? month?), another puzzle game.&lt;/p>
&lt;p>This time around, we&amp;rsquo;re going to solve &lt;a href="https://store.steampowered.com/app/923260/Golf_Peaks/" target="_blank" rel="noopener">Golf Peaks&lt;/a>. I picked this up a while ago on iOS, but only recently on Steam. It&amp;rsquo;s a cute little puzzle game themed around minigolf.&lt;/p>
&lt;p>&lt;img src="1.7-slopes.png" alt="">&lt;/p>
&lt;p>Basically, you&amp;rsquo;re on a grid and you have to get the ball (in the bottom in that screenshot above) to the flag (currently at the top). You have a set list of moves you can take, styled as cards&amp;ndash;all of which either move a certain number of tiles in a specific direction or possibly jump into the air (and fly over obstacles).&lt;/p>
&lt;p>It gets more complicated from there, but hopefully you have the basic idea. ðŸ˜„&lt;/p></description></item><item><title>Solving Sokobond</title><link>https://blog.jverkamp.com/2024/04/06/solving-sokobond/</link><pubDate>Sat, 06 Apr 2024 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2024/04/06/solving-sokobond/</guid><description>&lt;p>Another solver that I&amp;rsquo;ve been working on, after &lt;a href="https://blog.jverkamp.com/2024/03/28/a-good-snowman-is-hard-to-...-solve/">A Good Snowman Is Hard To &amp;hellip; Solve?&lt;/a>. This time, we have &lt;a href="https://store.steampowered.com/app/290260/Sokobond/" target="_blank" rel="noopener">Sokobond&lt;/a>! It&amp;rsquo;s a &lt;a href="https://en.wikipedia.org/wiki/Sokobon">Sokobon&lt;/a>&amp;hellip; but with chemical bonds! Yeah, that&amp;rsquo;s a really good title.&lt;/p>
&lt;p>The basic idea is you have a field of elements with (chemical accurate) free electrons):&lt;/p>
&lt;p>&lt;img src="basic-image.png" alt="A basic level">&lt;/p>
&lt;p>Here we have 4 hydrogens (1 bond each) and a carbon (4 bonds). It should seem pretty obvious that the carbon should end up with a hydrogen on each end. The one last bit of interest: the element with the dashed border is the one we actually control, that will never change.&lt;/p>
&lt;p>This eventually gets more complicated, adding:&lt;/p>
&lt;ul>
&lt;li>Modifiers that are placed on the map between squares:
&lt;ul>
&lt;li>One that strengthens bonds, turning a single bond into double into triple&lt;/li>
&lt;li>One that weakens bonds, turning triple to double to single or breaking single bonds&lt;/li>
&lt;li>One that rotates bonds as you move by it&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>More elements, eventually hydrogen (1), oxygen (2), nitrogen (3), carbon (4), and helium (0)&lt;/li>
&lt;li>Solutions that require forming multiple elements at the same time&lt;/li>
&lt;/ul>
&lt;p>It&amp;rsquo;s a pretty neat puzzle game with 144 levels of increasing difficulty. Perfect to solve.&lt;/p>
&lt;hr></description></item><item><title>A Good Snowman Is Hard To ... Solve?</title><link>https://blog.jverkamp.com/2024/03/28/a-good-snowman-is-hard-to-...-solve/</link><pubDate>Thu, 28 Mar 2024 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2024/03/28/a-good-snowman-is-hard-to-...-solve/</guid><description>&lt;p>I enjoy puzzle games. I especially enjoy letting computers solve them for me ðŸ˜„. Once upon a time, I set up a &lt;a href="https://blog.jverkamp.com/2022/10/16/stateful-solvers-and-iterators/">framework for solving random things&lt;/a>. Let&amp;rsquo;s solve some more.&lt;/p>
&lt;p>Today: &lt;a href="https://store.steampowered.com/app/316610/A_Good_Snowman_Is_Hard_To_Build/" target="_blank" rel="noopener">A Good Snowman Is Hard To Build&lt;/a>&lt;/p>
&lt;p>It&amp;rsquo;s a &lt;a href="https://en.wikipedia.org/wiki/Sokoban">Sokoban&lt;/a> about making snowmen! You can push snowballs of three sizes around, collecting snow if you roll over it. You can push smaller snowballs onto bigger ones, stacking them. Or back off, in order to get around one another.&lt;/p>
&lt;p>And that&amp;rsquo;s really it.&lt;/p>
&lt;p>There are some interesting twists (multiple snowmen, the ability to leave and re-enter levels, and even a whole second &amp;lsquo;hard mode&amp;rsquo;), but at a basic level, it&amp;rsquo;s just pushing.&lt;/p></description></item><item><title>Infinite Craft Bot</title><link>https://blog.jverkamp.com/2024/03/14/infinite-craft-bot/</link><pubDate>Thu, 14 Mar 2024 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2024/03/14/infinite-craft-bot/</guid><description>&lt;p>You&amp;rsquo;ve probably seen &lt;a href="https://neil.fun" target="_blank" rel="noopener">Neil.fun&lt;/a>&amp;rsquo;s &lt;a href="https://neal.fun/infinite-craft/" target="_blank" rel="noopener">Infinite Craft&lt;/a> game somewhere on the internet. If not, in a nutshell:&lt;/p>
&lt;ul>
&lt;li>You start with 4 blocks: &lt;code>Earth&lt;/code>, &lt;code>Fire&lt;/code>, &lt;code>Water&lt;/code>, and &lt;code>Wind&lt;/code>.&lt;/li>
&lt;li>You can combine any two blocks, for example:
&lt;ul>
&lt;li>&lt;code>Earth + Water = Plant&lt;/code>&lt;/li>
&lt;li>&lt;code>Plant + Fire = Smoke&lt;/code>&lt;/li>
&lt;li>&lt;code>Smoke + Smoke = Cloud&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>That&amp;rsquo;s&amp;hellip; pretty much it, from a gameplay perspective. There&amp;rsquo;s not really any goal, other than what you set yourself (try to make Cthulhu!). Although if you manage to find something no one has ever made before, you get a neat little note for it!&lt;/p>
&lt;p>So wait, what do I mean by &amp;lsquo;something no one has ever seen before&amp;rsquo;?&lt;/p>
&lt;p>Well, if two elements have ever been combined by anyone before, you get a cached response. Barring resets of the game (no idea if / how often this has happened, but I assume it has), if &lt;code>A + B = C&lt;/code> for you, &lt;code>A + B = C&lt;/code> for everyone.&lt;/p>
&lt;p>And here&amp;rsquo;s the fun part: if you find a combination no one has ever found before: &lt;code>Neil.fun&lt;/code> will send the combination out to an LLM to generate the new answer. The specific prompt isn&amp;rsquo;t public (so far as I know), but essentially what that means is that you have a basically infinite crafting tree&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>!&lt;/p>
&lt;p>So of course seeing something like this I want to automate it. ðŸ˜„&lt;/p>
&lt;hr></description></item><item><title>AoC 2022 Day 25: Snafuinator</title><link>https://blog.jverkamp.com/2022/12/25/aoc-2022-day-25-snafuinator/</link><pubDate>Sun, 25 Dec 2022 00:00:03 +0000</pubDate><guid>https://blog.jverkamp.com/2022/12/25/aoc-2022-day-25-snafuinator/</guid><description>&lt;h2 id="source-full-of-hot-airhttpsadventofcodecom2022day25">Source: &lt;a href="https://adventofcode.com/2022/day/25" target="_blank" rel="noopener">Full of Hot Air&lt;/a>&lt;/h2>
&lt;h2 id="part-1">Part 1&lt;/h2>
&lt;blockquote>
&lt;p>Let a Snafu number be a base 5 number with the curious property that in addition to the digits 0, 1, and 2, it has the numbers &lt;code>-&lt;/code> as &lt;code>-1&lt;/code> and &lt;code>=&lt;/code> as &lt;code>-2&lt;/code>. Sum up a list of Snafu numbers.&lt;/p>
&lt;/blockquote></description></item><item><title>AoC 2022 Day 24: Blizzinator</title><link>https://blog.jverkamp.com/2022/12/24/aoc-2022-day-24-blizzinator/</link><pubDate>Sat, 24 Dec 2022 00:00:03 +0000</pubDate><guid>https://blog.jverkamp.com/2022/12/24/aoc-2022-day-24-blizzinator/</guid><description>&lt;h2 id="source-blizzard-basinhttpsadventofcodecom2022day24">Source: &lt;a href="https://adventofcode.com/2022/day/24" target="_blank" rel="noopener">Blizzard Basin&lt;/a>&lt;/h2>
&lt;h2 id="part-1">Part 1&lt;/h2>
&lt;blockquote>
&lt;p>Given a map with a series of moving walls (that wrap when the hit the edges of the simulation), calculate the fastest route from the top left to the bottom right.&lt;/p>
&lt;/blockquote></description></item><item><title>AoC 2022 Day 23: Elf Scattinator</title><link>https://blog.jverkamp.com/2022/12/23/aoc-2022-day-23-elf-scattinator/</link><pubDate>Fri, 23 Dec 2022 00:00:03 +0000</pubDate><guid>https://blog.jverkamp.com/2022/12/23/aoc-2022-day-23-elf-scattinator/</guid><description>&lt;h2 id="source-unstable-diffusionhttpsadventofcodecom2022day23">Source: &lt;a href="https://adventofcode.com/2022/day/23" target="_blank" rel="noopener">Unstable Diffusion&lt;/a>&lt;/h2>
&lt;h2 id="part-1">Part 1&lt;/h2>
&lt;blockquote>
&lt;p>Implement a &lt;a href="https://en.wikipedia.org/wiki/cellular%20automaton">cellular automaton&lt;/a> with the following rules:&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>If you have no neighbors, don&amp;rsquo;t move (&lt;em>important, I forgot this one for a while&lt;/em>)&lt;/li>
&lt;li>Otherwise:
&lt;ul>
&lt;li>Calculate a potential move:
&lt;ul>
&lt;li>If you have no neighbors to the north, move north&lt;/li>
&lt;li>If not, check likewise for south, then west, than east&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>If no other agent is moving to the same space, move to your potential move&lt;/li>
&lt;li>Otherwise, don&amp;rsquo;t move&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>On each frame, rotate the order the directions are checked in (&lt;code>NSWE&lt;/code>, &lt;code>SWEN&lt;/code>, &lt;code>WENS&lt;/code>, &lt;code>ENSW&lt;/code>, &lt;code>NSWE&lt;/code>, &amp;hellip;)&lt;/li>
&lt;/ul></description></item><item><title>AoC 2022 Day 22: Wonderator</title><link>https://blog.jverkamp.com/2022/12/22/aoc-2022-day-22-wonderator/</link><pubDate>Thu, 22 Dec 2022 00:00:03 +0000</pubDate><guid>https://blog.jverkamp.com/2022/12/22/aoc-2022-day-22-wonderator/</guid><description>&lt;h2 id="source-monkey-maphttpsadventofcodecom2022day22">Source: &lt;a href="https://adventofcode.com/2022/day/22" target="_blank" rel="noopener">Monkey Map&lt;/a>&lt;/h2>
&lt;h2 id="part-1">Part 1&lt;/h2>
&lt;blockquote>
&lt;p>Given a map and a series of instructions formatted as distance + turn (&lt;code>L&lt;/code> or &lt;code>R&lt;/code>), find the final position. Any time you would walk off the edge of the map, wrap to the opposite edge.&lt;/p>
&lt;/blockquote></description></item><item><title>AoC 2022 Day 21: Yellinator</title><link>https://blog.jverkamp.com/2022/12/21/aoc-2022-day-21-yellinator/</link><pubDate>Wed, 21 Dec 2022 00:00:03 +0000</pubDate><guid>https://blog.jverkamp.com/2022/12/21/aoc-2022-day-21-yellinator/</guid><description>&lt;h2 id="source-monkey-mathhttpsadventofcodecom2022day21">Source: &lt;a href="https://adventofcode.com/2022/day/21" target="_blank" rel="noopener">Monkey Math&lt;/a>&lt;/h2>
&lt;h2 id="part-1">Part 1&lt;/h2>
&lt;blockquote>
&lt;p>Given a series of equations of either the form &lt;code>dbpl: 5&lt;/code> or &lt;code>cczh: sllz + lgvd&lt;/code>, determine what the value of the node labeled &lt;code>root&lt;/code> is.&lt;/p>
&lt;/blockquote></description></item><item><title>AoC 2022 Day 19: Blueprintinator</title><link>https://blog.jverkamp.com/2022/12/19/aoc-2022-day-19-blueprintinator/</link><pubDate>Mon, 19 Dec 2022 00:00:03 +0000</pubDate><guid>https://blog.jverkamp.com/2022/12/19/aoc-2022-day-19-blueprintinator/</guid><description>&lt;h2 id="source-not-enough-mineralshttpsadventofcodecom2022day19">Source: &lt;a href="https://adventofcode.com/2022/day/19" target="_blank" rel="noopener">Not Enough Minerals&lt;/a>&lt;/h2>
&lt;h2 id="part-1">Part 1&lt;/h2>
&lt;blockquote>
&lt;p>Given a series of given a series of &lt;code>blueprints&lt;/code>, each of which gives instructions for how to build a single &lt;code>robot&lt;/code> from a collection of &lt;code>materials&lt;/code> that in turn will produce one of a given &lt;code>material&lt;/code> per turn, determine the best order of builds to maximize your &lt;code>geode&lt;/code> (the most valuable &lt;code>material&lt;/code>) production for each &lt;code>blueprint&lt;/code> given a time limit of &lt;code>24 minutes&lt;/code>.&lt;/p>
&lt;/blockquote></description></item><item><title>AoC 2022 Day 18: Lavinator</title><link>https://blog.jverkamp.com/2022/12/18/aoc-2022-day-18-lavinator/</link><pubDate>Sun, 18 Dec 2022 00:00:03 +0000</pubDate><guid>https://blog.jverkamp.com/2022/12/18/aoc-2022-day-18-lavinator/</guid><description>&lt;h2 id="source-boiling-bouldershttpsadventofcodecom2022day18">Source: &lt;a href="https://adventofcode.com/2022/day/18" target="_blank" rel="noopener">Boiling Boulders&lt;/a>&lt;/h2>
&lt;h2 id="part-1">Part 1&lt;/h2>
&lt;blockquote>
&lt;p>Given a list of 1x1x1 cubes, determine the total surface area of the cubes.&lt;/p>
&lt;/blockquote></description></item><item><title>AoC 2022 Day 16: Pressurinator</title><link>https://blog.jverkamp.com/2022/12/16/aoc-2022-day-16-pressurinator/</link><pubDate>Fri, 16 Dec 2022 00:00:03 +0000</pubDate><guid>https://blog.jverkamp.com/2022/12/16/aoc-2022-day-16-pressurinator/</guid><description>&lt;h2 id="source-proboscidea-volcaniumhttpsadventofcodecom2022day16">Source: &lt;a href="https://adventofcode.com/2022/day/16" target="_blank" rel="noopener">Proboscidea Volcanium&lt;/a>&lt;/h2>
&lt;nav id="TableOfContents">
&lt;ul>
&lt;li>&lt;a href="#source-proboscidea-volcaniumhttpsadventofcodecom2022day16">Source: &lt;a href="https://adventofcode.com/2022/day/16">Proboscidea Volcanium&lt;/a>&lt;/a>&lt;/li>
&lt;li>&lt;a href="#part-1">Part 1&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#optimized-version-with-multiple-steps-and-no-repeats">Optimized version with multiple steps and no-repeats&lt;/a>&lt;/li>
&lt;li>&lt;a href="#the-actual-code">The actual code&lt;/a>&lt;/li>
&lt;li>&lt;a href="#attempted-to-solve-via-30-steps-of-all-possibilities">Attempted to solve via 30 steps of all possibilities&lt;/a>&lt;/li>
&lt;li>&lt;a href="#a-priority-queue-edit-2-dec-20">A Priority Queue (Edit 2, Dec 20)&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#part-2">Part 2&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#simulating-n-agents">Simulating &lt;em>n&lt;/em> agents&lt;/a>&lt;/li>
&lt;li>&lt;a href="#new-multi-agent-code-with-one-agent">New multi-agent code with one agent&lt;/a>&lt;/li>
&lt;li>&lt;a href="#checking-with-multiple-agents">Checking with multiple agents&lt;/a>&lt;/li>
&lt;li>&lt;a href="#problems-with-memory-">Problems with memory (?)&lt;/a>&lt;/li>
&lt;li>&lt;a href="#improving-memory-usage">Improving memory usage&lt;/a>&lt;/li>
&lt;li>&lt;a href="#improving-runtime">Improving runtime&lt;/a>&lt;/li>
&lt;li>&lt;a href="#to-be-continued">To be continued&amp;hellip;&lt;/a>&lt;/li>
&lt;li>&lt;a href="#let-it-run-edit-dec-20">Let it run! (Edit, Dec 20)&lt;/a>&lt;/li>
&lt;li>&lt;a href="#queues-to-the-rescue-edit-3-dec-20">Queues to the rescue (Edit 3, Dec 20)&lt;/a>&lt;/li>
&lt;li>&lt;a href="#optimization-remaining_best_case-edit-4-dec-21">Optimization: &lt;code>remaining_best_case&lt;/code> (Edit 4, Dec 21)&lt;/a>&lt;/li>
&lt;li>&lt;a href="#optimization-seen_skip-edit-4-dec-21">Optimization: &lt;code>seen_skip&lt;/code> (Edit 4, Dec 21)&lt;/a>&lt;/li>
&lt;li>&lt;a href="#threading">Threading&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#graphviz-visualizations">Graphviz visualizations&lt;/a>&lt;/li>
&lt;li>&lt;a href="#performance">Performance&lt;/a>&lt;/li>
&lt;/ul>
&lt;/nav>
&lt;h2 id="part-1">Part 1&lt;/h2>
&lt;blockquote>
&lt;p>Given a graph of nodes, some of which have a &lt;code>pressure&lt;/code> (per tick output value) and an agent that can move through the graph and activate specific nodes (so that they output their per tick value every future tick), what is the maximum total output possible in 30 steps?&lt;/p>
&lt;/blockquote></description></item><item><title>AoC 2022 Day 15: Beaconator</title><link>https://blog.jverkamp.com/2022/12/15/aoc-2022-day-15-beaconator/</link><pubDate>Thu, 15 Dec 2022 00:00:03 +0000</pubDate><guid>https://blog.jverkamp.com/2022/12/15/aoc-2022-day-15-beaconator/</guid><description>&lt;h2 id="source-beacon-exclusion-zonehttpsadventofcodecom2022day15">Source: &lt;a href="https://adventofcode.com/2022/day/15" target="_blank" rel="noopener">Beacon Exclusion Zone&lt;/a>&lt;/h2>
&lt;h2 id="part-1">Part 1&lt;/h2>
&lt;blockquote>
&lt;p>There are a collections of &lt;code>Sensor&lt;/code>s and &lt;code>Beacon&lt;/code>s. As input, you are given the &lt;code>Beacon&lt;/code> closest to each &lt;code>Sensor&lt;/code> (using &lt;a href="https://en.wikipedia.org/wiki/Manhattan%20Distance">Manhattan Distance&lt;/a>). If a &lt;code>Beacon&lt;/code> is not closest to any sensor, it will not appear in this list. Calculate how many points in the given row (&lt;code>y=2000000&lt;/code>) cannot contain a &lt;code>Beacon&lt;/code>.&lt;/p>
&lt;/blockquote></description></item><item><title>AoC 2022 Day 14: Sandinator</title><link>https://blog.jverkamp.com/2022/12/14/aoc-2022-day-14-sandinator/</link><pubDate>Wed, 14 Dec 2022 00:00:03 +0000</pubDate><guid>https://blog.jverkamp.com/2022/12/14/aoc-2022-day-14-sandinator/</guid><description>&lt;h2 id="source-regolith-reservoirhttpsadventofcodecom2022day14">Source: &lt;a href="https://adventofcode.com/2022/day/14" target="_blank" rel="noopener">Regolith Reservoir&lt;/a>&lt;/h2>
&lt;h2 id="part-1">Part 1&lt;/h2>
&lt;blockquote>
&lt;p>Given a series of walls as input, run a &lt;a href="https://en.wikipedia.org/wiki/falling%20sand">falling sand&lt;/a> simulation until any new sand falls of the map. Count how many grains of sand we end up with.&lt;/p>
&lt;/blockquote></description></item><item><title>AoC 2022 Day 12: Climbiantor</title><link>https://blog.jverkamp.com/2022/12/12/aoc-2022-day-12-climbiantor/</link><pubDate>Mon, 12 Dec 2022 00:00:03 +0000</pubDate><guid>https://blog.jverkamp.com/2022/12/12/aoc-2022-day-12-climbiantor/</guid><description>&lt;h2 id="source-hill-climbing-algorithmhttpsadventofcodecom2022day12">Source: &lt;a href="https://adventofcode.com/2022/day/12" target="_blank" rel="noopener">Hill Climbing Algorithm&lt;/a>&lt;/h2>
&lt;h2 id="part-1">Part 1&lt;/h2>
&lt;blockquote>
&lt;p>Given a height map, find the shortest path between two points such that the path can descend any distance but can only climb by a maximum of 1.&lt;/p>
&lt;/blockquote></description></item><item><title>AoC 2022 Day 8: Treetopinator</title><link>https://blog.jverkamp.com/2022/12/08/aoc-2022-day-8-treetopinator/</link><pubDate>Thu, 08 Dec 2022 00:00:03 +0000</pubDate><guid>https://blog.jverkamp.com/2022/12/08/aoc-2022-day-8-treetopinator/</guid><description>&lt;h2 id="source-treetop-tree-househttpsadventofcodecom2022day8">Source: &lt;a href="https://adventofcode.com/2022/day/8" target="_blank" rel="noopener">Treetop Tree House&lt;/a>&lt;/h2>
&lt;h2 id="part-1">Part 1&lt;/h2>
&lt;blockquote>
&lt;p>Given a grid of numbers, count how many of these numbers have a direct path in any cardinal direction to the edge of the grid.&lt;/p>
&lt;/blockquote></description></item><item><title>Stateful Solvers and Iterators</title><link>https://blog.jverkamp.com/2022/10/16/stateful-solvers-and-iterators/</link><pubDate>Sun, 16 Oct 2022 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2022/10/16/stateful-solvers-and-iterators/</guid><description>&lt;p>&lt;a href="programming/languages/rust/">Rust&lt;/a>, yet again! Let&amp;rsquo;s take what we did last time with &lt;a href="https://blog.jverkamp.com/2022/10/04/solving-sudoku-again/">Solving Sudoku (again)&lt;/a> and improve the code structure a bit more.&lt;/p>
&lt;p>Goals:&lt;/p>
&lt;ul>
&lt;li>Create a &amp;lsquo;Solver&amp;rsquo; struct that can maintain state (such as how many states we&amp;rsquo;ve visited, how much time we&amp;rsquo;ve spent)&lt;/li>
&lt;li>Track the above stats&lt;/li>
&lt;li>Turn the &amp;lsquo;Solver&amp;rsquo; into an iterator which will iterate through given solutions (a single call will give the first solution or you can run through the iterator to get all of them)&lt;/li>
&lt;/ul>
&lt;p>If you&amp;rsquo;d like to follow along, I&amp;rsquo;ve started uploading the code here: &lt;a href="https://github.com/jpverkamp/rust-solvers" target="_blank" rel="noopener">https://github.com/jpverkamp/rust-solvers&lt;/a>&lt;/p></description></item><item><title>Solving Sudoku (again)</title><link>https://blog.jverkamp.com/2022/10/04/solving-sudoku-again/</link><pubDate>Tue, 04 Oct 2022 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2022/10/04/solving-sudoku-again/</guid><description>&lt;p>More &lt;a href="programming/languages/rust/">Rust&lt;/a>! This time, I want to go back to my post on &lt;a href="https://blog.jverkamp.com/2021/06/25/a-generic-brute-force-backtracking-solver/">A Generic Brute Force Backtracking Solver&lt;/a>. For one, because I&amp;rsquo;m learning Rust. For two, because there is a crate specifically for &lt;code>&lt;a href="https://docs.rs/im/latest/im/">im&lt;/a>&lt;/code>
mutable data structures. And for three, because I expect it will be much faster. We shall see!&lt;/p></description></item><item><title>AoC 2021 Day 23: Amphipodinator</title><link>https://blog.jverkamp.com/2021/12/23/aoc-2021-day-23-amphipodinator/</link><pubDate>Thu, 23 Dec 2021 00:00:03 +0000</pubDate><guid>https://blog.jverkamp.com/2021/12/23/aoc-2021-day-23-amphipodinator/</guid><description>&lt;h3 id="source-amphipodhttpsadventofcodecom2021day23">Source: &lt;a href="https://adventofcode.com/2021/day/23" target="_blank" rel="noopener">Amphipod&lt;/a>&lt;/h3>
&lt;h4 id="part-1-given-4-rooms-full-of-amphipods-with-various-energy-costs-for-movement-a1-b10-c100-d1000-and-a-hallway-how-much-energy-does-it-take-at-minimum-to-sort-the-amphipods-into-their-own-rooms-with-the-following-conditions">&lt;strong>Part 1:&lt;/strong> Given 4 rooms full of amphipods with various energy costs for movement (a=1, b=10, c=100, d=1000) and a hallway, how much energy does it take (at minimum) to sort the amphipods into their own rooms with the following conditions:&lt;/h4></description></item><item><title>AoC 2021 Day 22: Cubinator</title><link>https://blog.jverkamp.com/2021/12/22/aoc-2021-day-22-cubinator/</link><pubDate>Wed, 22 Dec 2021 00:00:05 +0000</pubDate><guid>https://blog.jverkamp.com/2021/12/22/aoc-2021-day-22-cubinator/</guid><description>&lt;h3 id="source-reactor-reboothttpsadventofcodecom2021day22">Source: &lt;a href="https://adventofcode.com/2021/day/22" target="_blank" rel="noopener">Reactor Reboot&lt;/a>&lt;/h3>
&lt;h4 id="part-1-given-a-series-of-3d-cubes-that-either-turn-on-all-or-turn-off-all-points-in-their-region-calculate-how-many-points-in-the-region--5050-5050-5050-are-on-at-the-end">&lt;strong>Part 1:&lt;/strong> Given a series of 3D cubes that either turn ON all or turn OFF all points in their region, calculate how many points in the region (-50..50,-50..50,-50..50) are ON at the end.&lt;/h4></description></item><item><title>AoC 2021 Day 21: Dicinator</title><link>https://blog.jverkamp.com/2021/12/21/aoc-2021-day-21-dicinator/</link><pubDate>Tue, 21 Dec 2021 00:00:05 +0000</pubDate><guid>https://blog.jverkamp.com/2021/12/21/aoc-2021-day-21-dicinator/</guid><description>&lt;h3 id="source-dirac-dicehttpsadventofcodecom2021day21">Source: &lt;a href="https://adventofcode.com/2021/day/21" target="_blank" rel="noopener">Dirac Dice&lt;/a>&lt;/h3>
&lt;h4 id="part-1-play-a-simple-game-describe-below-with-a-loaded-d100-that-always-rolls-1-2-3--99-100-1--return-the-score-of-the-losing-player-times-the-number-of-times-the-die-was-rolled">&lt;strong>Part 1:&lt;/strong> Play a simple game (describe below) with a loaded D100 (that always rolls 1, 2, 3, &amp;hellip; 99, 100, 1, &amp;hellip;). Return the score of the losing player times the number of times the die was rolled.&lt;/h4></description></item><item><title>AoC 2021 Day 15: Low Ceiling Simulator</title><link>https://blog.jverkamp.com/2021/12/15/aoc-2021-day-15-low-ceiling-simulator/</link><pubDate>Wed, 15 Dec 2021 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2021/12/15/aoc-2021-day-15-low-ceiling-simulator/</guid><description>&lt;h3 id="source-chitonhttpsadventofcodecom2021day15">Source: &lt;a href="https://adventofcode.com/2021/day/15" target="_blank" rel="noopener">Chiton&lt;/a>&lt;/h3>
&lt;h4 id="part-1-given-a-grid-of-weights-find-the-minimum-path-from-top-left-to-top-right-return-the-total-weight-along-that-path">&lt;strong>Part 1:&lt;/strong> Given a grid of weights, find the minimum path from top left to top right. Return the total weight along that path.&lt;/h4></description></item><item><title>AoC 2021 Day 12: Submarine Spider</title><link>https://blog.jverkamp.com/2021/12/12/aoc-2021-day-12-submarine-spider/</link><pubDate>Sun, 12 Dec 2021 00:00:15 +0000</pubDate><guid>https://blog.jverkamp.com/2021/12/12/aoc-2021-day-12-submarine-spider/</guid><description>&lt;h3 id="source-passage-pathinghttpsadventofcodecom2021day12">Source: &lt;a href="https://adventofcode.com/2021/day/12" target="_blank" rel="noopener">Passage Pathing&lt;/a>&lt;/h3>
&lt;h4 id="part-1-given-a-list-of-edges-in-a-bi-directional-graph-count-the-number-of-paths-from-start-to-end-such-that-nodes-named-with-lowercase-letters-are-visited-once-and-nodes-with-uppercase-letters-can-be-visited-any-number-of-times">&lt;strong>Part 1:&lt;/strong> Given a list of edges in a bi-directional graph, count the number of paths from &lt;code>start&lt;/code> to &lt;code>end&lt;/code> such that nodes named with lowercase letters are visited once, and nodes with uppercase letters can be visited any number of times.&lt;/h4></description></item><item><title>AoC 2021 Day 8: Seven Segment Demystifier</title><link>https://blog.jverkamp.com/2021/12/08/aoc-2021-day-8-seven-segment-demystifier/</link><pubDate>Wed, 08 Dec 2021 00:00:10 +0000</pubDate><guid>https://blog.jverkamp.com/2021/12/08/aoc-2021-day-8-seven-segment-demystifier/</guid><description>&lt;h3 id="source-seven-segment-searchhttpsadventofcodecom2021day8">Source: &lt;a href="https://adventofcode.com/2021/day/8" target="_blank" rel="noopener">Seven Segment Search&lt;/a>&lt;/h3>
&lt;h4 id="part-1-simulate-a-wikiseven-segment-displey-where-you-do-not-know-which-input-wire-controls-which-segment-given-the-wires-used-in-all-ten-digits-and-four-output-digits-count-how-many-times-1-4-7-and-8-are-outputted">&lt;strong>Part 1:&lt;/strong> Simulate a &lt;a href="https://en.wikipedia.org/wiki/seven%20segment%20displey">seven segment displey&lt;/a> where you do not know which input wire controls which segment. Given the wires used in all ten digits and four output digits, count how many times 1, 4, 7, and 8 are outputted.&lt;/h4></description></item><item><title>Solving Snakebird</title><link>https://blog.jverkamp.com/2021/08/18/solving-snakebird/</link><pubDate>Wed, 18 Aug 2021 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2021/08/18/solving-snakebird/</guid><description>&lt;p>&lt;a href="https://store.steampowered.com/app/357300/Snakebird/" target="_blank" rel="noopener">Snakebird!&lt;/a>&lt;/p>
&lt;figure>&lt;img src="https://blog.jverkamp.com/embeds/2021/snakebird-0.png"/>
&lt;/figure>
&lt;p>A cute little puzzle game, where you move around snake(birds). Move any number of snakes around the level, eating fruit, and getting to the exit. The main gotchas are that you have gravity to content with&amp;ndash;your snake will easily fall off the edge of the world&amp;ndash;and each time you eat a fruit, your snake gets bigger. This can help get longer to get into hard to reach places or it can cause trouble when you trap yourself in corners.&lt;/p>
&lt;p>Let&amp;rsquo;s use the new &lt;a href="2021-08-17-immutable.js-solvers">immutable.js solver&lt;/a> to solve these problems!&lt;/p></description></item><item><title>Immutable.js Solvers</title><link>https://blog.jverkamp.com/2021/08/17/immutable.js-solvers/</link><pubDate>Tue, 17 Aug 2021 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2021/08/17/immutable.js-solvers/</guid><description>&lt;p>A bit ago I wrote about writing a &lt;a href="https://blog.jverkamp.com/2021/06/25/a-generic-brute-force-backtracking-solver/">generic brute force solver&lt;/a> (wow, was that really two months ago?). It got &amp;hellip; complicate. Mostly, because every time I wrote a &lt;code>step&lt;/code> function, I had to be careful to undo the same. Wouldn&amp;rsquo;t it be nice if we could just write a step function and get backtracking for &amp;lsquo;free&amp;rsquo;?&lt;/p>
&lt;p>Well, with immutability you can!&lt;/p></description></item><item><title>Regular Expression Fractals</title><link>https://blog.jverkamp.com/2014/10/05/regular-expression-fractals/</link><pubDate>Sun, 05 Oct 2014 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2014/10/05/regular-expression-fractals/</guid><description>&lt;p>Oops, turns out I haven&amp;rsquo;t had a post in a good long while. Before it gets even longer, I figure that I should take one off my backlog and just write it up, even if it is a little on the shorter side.&lt;/p>
&lt;p>Today&amp;rsquo;s post was inspired by this post on /r/dailyprogrammer a month ago today:
&lt;a href="https://www.reddit.com/r/dailyprogrammer/comments/2fkh8u/9052014_challenge_178_hard_regular_expression/">Challenge #178 [Hard] Regular Expression Fractals&lt;/a>. The basic idea is that you are going to take a rectangular region and divide it into four quadrants, again and again, recording the path as you go (images from that post):&lt;/p>
&lt;p>&lt;figure>&lt;img src="https://blog.jverkamp.com/embeds/2014/step-1.png"/>
&lt;/figure>
&lt;figure>&lt;img src="https://blog.jverkamp.com/embeds/2014/step-2.png"/>
&lt;/figure>
&lt;figure>&lt;img src="https://blog.jverkamp.com/embeds/2014/step-3.png"/>
&lt;/figure>
&lt;/p></description></item><item><title>Look and Say</title><link>https://blog.jverkamp.com/2014/09/15/look-and-say/</link><pubDate>Mon, 15 Sep 2014 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2014/09/15/look-and-say/</guid><description>&lt;p>Random quick post today&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>. Basically, we want to write code to generate what&amp;rsquo;s known as &lt;a href="https://en.wikipedia.org/wiki/Look%20and%20Say%20sequence">Look and Say sequence&lt;/a>:&lt;/p>
&lt;blockquote>
&lt;p>To generate a member of the sequence from the previous member, read off the digits of the previous member, counting the number of digits in groups of the same digit. For example:&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;ul>
&lt;li>1 is read off as &amp;ldquo;one 1&amp;rdquo; or 11.&lt;/li>
&lt;li>11 is read off as &amp;ldquo;two 1s&amp;rdquo; or 21.&lt;/li>
&lt;li>21 is read off as &amp;ldquo;one 2, then one 1&amp;rdquo; or 1211.&lt;/li>
&lt;li>1211 is read off as &amp;ldquo;one 1, then one 2, then two 1s&amp;rdquo; or 111221.&lt;/li>
&lt;li>111221 is read off as &amp;ldquo;three 1s, then two 2s, then one 1&amp;rdquo; or 312211.&lt;/li>
&lt;/ul>
&lt;/blockquote></description></item><item><title>Langton's ant</title><link>https://blog.jverkamp.com/2014/08/07/langtons-ant/</link><pubDate>Thu, 07 Aug 2014 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2014/08/07/langtons-ant/</guid><description>&lt;p>Here&amp;rsquo;s another post from /r/DailyProgrammer: &lt;a href="http://www.reddit.com/r/dailyprogrammer/comments/2c4ka3/7302014_challenge_173_intermediate_advanced/" target="_blank" rel="noopener">Advanced Langton&amp;rsquo;s Ant&lt;/a>. I&amp;rsquo;m a bit behind the times (see tomorrow&amp;rsquo;s post), but it&amp;rsquo;s still an interesting enough exercise, so let&amp;rsquo;s go for it!&lt;/p>
&lt;figure>&lt;img src="https://blog.jverkamp.com/embeds/2014/LR.gif"/>
&lt;/figure></description></item></channel></rss>