<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Macros on jverkamp.com</title><link>https://blog.jverkamp.com/programming/topics/macros/</link><description>Recent content in Macros on jverkamp.com</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Tue, 17 Jan 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://blog.jverkamp.com/programming/topics/macros/atom.xml" rel="self" type="application/rss+xml"/><item><title>Proc Macro Workshop: derive(Builder) [Part 2]</title><link>https://blog.jverkamp.com/2023/01/17/proc-macro-workshop-derivebuilder-part-2/</link><pubDate>Tue, 17 Jan 2023 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2023/01/17/proc-macro-workshop-derivebuilder-part-2/</guid><description>&lt;p>Okay, in &lt;a href="https://blog.jverkamp.com/2023/01/15/proc-macro-workshop-derivebuilder-part-1/">Proc Macro Workshop: derive(Builder) [Part 1]&lt;/a> we created a &lt;code>derive(Builder)&lt;/code> macro to implement the &lt;a href="https://en.wikipedia.org/wiki/builder%20pattern">builder pattern&lt;/a>. We created a new &lt;code>*Builder&lt;/code> struct, created methods to set each field in a chain, and allowed some fields to be optional.&lt;/p>
&lt;p>So what&amp;rsquo;s left? (Be sure to start with &lt;a href="https://blog.jverkamp.com/2023/01/15/proc-macro-workshop-derivebuilder-part-1/">Part 1&lt;/a> if you haven&amp;rsquo;t read that!)&lt;/p>
&lt;nav id="TableOfContents">
 &lt;ul>
 &lt;li>&lt;a href="#7-repeated-fields">7. Repeated fields&lt;/a>&lt;/li>
 &lt;li>&lt;a href="#8-unrecognized-attributes">8. Unrecognized attributes&lt;/a>&lt;/li>
 &lt;li>&lt;a href="#9-redefined-prelude-types">9. Redefined prelude types&lt;/a>&lt;/li>
 &lt;li>&lt;a href="#whats-next">What&amp;rsquo;s next?&lt;/a>&lt;/li>
 &lt;/ul>
&lt;/nav>

&lt;p>Let&amp;rsquo;s do this!&lt;/p></description></item><item><title>Proc Macro Workshop: derive(Builder) [Part 1]</title><link>https://blog.jverkamp.com/2023/01/15/proc-macro-workshop-derivebuilder-part-1/</link><pubDate>Sun, 15 Jan 2023 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2023/01/15/proc-macro-workshop-derivebuilder-part-1/</guid><description>&lt;p>While continuing to learn a bit more about macros in Rust (&lt;a href="https://blog.jverkamp.com/2023/01/12/writing-a-curry-macro-for-macrokata/">previous post&lt;/a>), I really want to move beyond the simple declarative macros and get into something a bit more interesting. Enter &lt;a href="https://doc.rust-lang.org/reference/procedural-macros.html" target="_blank" rel="noopener">procedural macros&lt;/a>. In a nutshell, procedural macros in Rust, rather than relying entirely on pattern matching and expansion are fully Rust functions.&lt;/p>
&lt;p>They take a specific input (a stream of tokens) and output a specific output (a new stream of tokens), but in between they can do just about anything a full Rust function can do. And what&amp;rsquo;s better yet&amp;hellip; they operate at compile time. And because they operate on tokens (rather than a full AST), you can do things that just aren&amp;rsquo;t syntactically valid in normal Rust. Things like&amp;hellip; &lt;a href="https://en.wikipedia.org/wiki/variadic%20functions">variadic functions&lt;/a> (a la &lt;code>print!&lt;/code> or &lt;code>var!&lt;/code>) or even crazier things like &lt;a href="https://docs.rs/inline-python/latest/inline_python/" target="_blank" rel="noopener">embedding Python in Rust&lt;/a> for &amp;hellip; reasons.&lt;/p>
&lt;p>Today specifically, I&amp;rsquo;ve started working through the &lt;a href="https://github.com/dtolnay/proc-macro-workshop" target="_blank" rel="noopener">prod-macro-workshop&lt;/a> repo. It&amp;rsquo;s a series of five examples macros with test cases and some guidance set up to help you get up to speed. I&amp;rsquo;m going to be working through the first of these: &lt;code>derive(Builder)&lt;/code>. Now don&amp;rsquo;t get me wrong. I really have no idea what I&amp;rsquo;m doing, so don&amp;rsquo;t take this as an example of &lt;em>how to write a macro&lt;/em>. But perhaps by writing this out, it will help me learn it better&amp;hellip; and if you happen to learn something as well, all the better!&lt;/p></description></item><item><title>Writing a curry! macro for MacroKata</title><link>https://blog.jverkamp.com/2023/01/12/writing-a-curry-macro-for-macrokata/</link><pubDate>Thu, 12 Jan 2023 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2023/01/12/writing-a-curry-macro-for-macrokata/</guid><description>&lt;p>Recently I&amp;rsquo;ve been wanting to learn more about macros in Rust. It was always one of my favorite parts of Racket, so let&amp;rsquo;s see what we can do.&lt;/p>
&lt;p>In order to do that, I&amp;rsquo;ve been following the excellent &lt;a href="https://tfpk.github.io/macrokata/" target="_blank" rel="noopener">MacroKata&lt;/a> series. It goes all the way through, starting with the very basics, adding in literals and expressions, handling repetition, nesting, and finally recursion.&lt;/p>
&lt;p>What I really want to talk about those is the one that I found most interesting: &lt;code>curry!&lt;/code>.&lt;/p></description></item></channel></rss>