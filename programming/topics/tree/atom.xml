<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tree on jverkamp.com</title>
    <link>https://blog.jverkamp.com/programming/topics/tree/</link>
    <description>Recent content in Tree on jverkamp.com</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 17 Jun 2014 14:00:59 +0000</lastBuildDate>
    
	<atom:link href="https://blog.jverkamp.com/programming/topics/tree/atom.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Factor trees</title>
      <link>https://blog.jverkamp.com/2014/06/17/factor-trees/</link>
      <pubDate>Tue, 17 Jun 2014 14:00:59 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2014/06/17/factor-trees/</guid>
      <description>&lt;p&gt;Another five minute challenge&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;, this time from &lt;a href=&#34;http://www.reddit.com/r/dailyprogrammer/comments/284uhh/6142014_challenge_166b_intermediate_prime_factor/&#34;&gt;/r/dailyprogrammer&lt;/a&gt;: given any positive integer, create and render a factor tree.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Brownian trees</title>
      <link>https://blog.jverkamp.com/2014/03/11/brownian-trees/</link>
      <pubDate>Tue, 11 Mar 2014 14:00:06 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2014/03/11/brownian-trees/</guid>
      <description>&lt;p&gt;Pretty pretty picture time&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;:&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://blog.jverkamp.com/embeds/2014/brownian-tree.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Dis/re-emvowelification</title>
      <link>https://blog.jverkamp.com/2014/02/27/dis/re-emvowelification/</link>
      <pubDate>Thu, 27 Feb 2014 14:00:21 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2014/02/27/dis/re-emvowelification/</guid>
      <description>&lt;p&gt;So far this week we&amp;rsquo;ve had a pair of related posts at the DailyProgrammer subreddit&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.reddit.com/r/dailyprogrammer/comments/1ystvb/022414_challenge_149_easy_disemvoweler/&#34;&gt;[02/24/14] Challenge #149 [Easy] Disemvoweler&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.reddit.com/r/dailyprogrammer/comments/1yzlde/022614_challenge_150_intermediate_reemvoweler_1/&#34;&gt;[02/26/14] Challenge #150 [Intermediate] Re-emvoweler 1&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Basically, if you&amp;rsquo;re given a string with vowels, take them out. If you&amp;rsquo;re given one without vowels, put them back in. One of the two is certainly easier than the other&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:2&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:2&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;. :)&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Predecessor and successor in a binary search tree</title>
      <link>https://blog.jverkamp.com/2013/02/13/predecessor-and-successor-in-a-binary-search-tree/</link>
      <pubDate>Wed, 13 Feb 2013 14:00:53 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2013/02/13/predecessor-and-successor-in-a-binary-search-tree/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://programmingpraxis.com/2013/02/12/binary-search-tree-in-order-predecessor-and-successor/&#34; title=&#34;Binary Search Tree: In-Order Predecessor And Successor&#34;&gt;Yesterday&amp;rsquo;s post&lt;/a&gt; from Programming Praxis has us trying to find the predecessor and successor to a given value in a binary search tree. There are actually two general algorithms for doing this, depending on if you have parent pointers or not&amp;ndash;but they&amp;rsquo;re asking for the algorithm without.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>