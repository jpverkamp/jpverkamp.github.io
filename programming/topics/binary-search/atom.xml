<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Binary Search on jverkamp.com</title><link>https://blog.jverkamp.com/programming/topics/binary-search/</link><description>Recent content in Binary Search on jverkamp.com</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://blog.jverkamp.com/programming/topics/binary-search/atom.xml" rel="self" type="application/rss+xml"/><item><title>AoC 2024 Day 5: (Not) Transitivinator</title><link>https://blog.jverkamp.com/2024/12/05/aoc-2024-day-5-not-transitivinator/</link><pubDate>Thu, 05 Dec 2024 00:00:03 +0000</pubDate><guid>https://blog.jverkamp.com/2024/12/05/aoc-2024-day-5-not-transitivinator/</guid><description>&lt;h2 id="source-day-day-5-print-queuehttpsadventofcodecom2024day5">Source: &lt;a href="https://adventofcode.com/2024/day/5" target="_blank" rel="noopener">Day Day 5: Print Queue&lt;/a>&lt;/h2>
&lt;p>&lt;a href="https://github.com/jpverkamp/advent-of-code/blob/master/2024/src/day5.rs" target="_blank" rel="noopener">Full solution&lt;/a> for today (spoilers!).&lt;/p>
&lt;nav id="TableOfContents">
&lt;ul>
&lt;li>&lt;a href="#source-day-day-5-print-queuehttpsadventofcodecom2024day5">Source: &lt;a href="https://adventofcode.com/2024/day/5">Day Day 5: Print Queue&lt;/a>&lt;/a>&lt;/li>
&lt;li>&lt;a href="#part-1">Part 1&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#parsing">Parsing&lt;/a>&lt;/li>
&lt;li>&lt;a href="#is-it-transitive">Is it transitive?&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#part-2">Part 2&lt;/a>&lt;/li>
&lt;li>&lt;a href="#benchmarks">Benchmarks&lt;/a>&lt;/li>
&lt;li>&lt;a href="#optimization-1-drop-the-hashmap">Optimization 1: Drop the &lt;code>hashmap&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="#optimization-2-bitvec">Optimization 2: &lt;code>bitvec&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="#optimization-attempt-3-a-vec-of-pairs">Optimization (attempt) 3: A &lt;code>vec&lt;/code> of pairs&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#optimization-attempt-4-sorted-vec-of-pairs">Optimization (attempt) 4: Sorted &lt;code>vec&lt;/code> of pairs&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#overall-timing-graph">Overall timing graph&lt;/a>&lt;/li>
&lt;/ul>
&lt;/nav>
&lt;h2 id="part-1">Part 1&lt;/h2>
&lt;blockquote>
&lt;p>The input is a list of pairs of the form &lt;code>a|b&lt;/code> which defines that &lt;code>b&lt;/code> must not come before &lt;code>a&lt;/code>, an empty line, and then a list of values &lt;code>a,b,c,d&lt;/code>.&lt;/p>
&lt;p>For each line that is valid for all given &lt;code>a|b&lt;/code> rules, sum the middle number of each list.&lt;/p>
&lt;/blockquote></description></item></channel></rss>