<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Parsering on jverkamp.com</title><link>https://blog.jverkamp.com/programming/topics/parsering/</link><description>Recent content in Parsering on jverkamp.com</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Wed, 04 Sep 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://blog.jverkamp.com/programming/topics/parsering/atom.xml" rel="self" type="application/rss+xml"/><item><title>CodeCrafters: Build Myself an Interpreter</title><link>https://blog.jverkamp.com/2024/09/04/codecrafters-build-myself-an-interpreter/</link><pubDate>Wed, 04 Sep 2024 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2024/09/04/codecrafters-build-myself-an-interpreter/</guid><description>&lt;p>Didn&amp;rsquo;t I &lt;a href="https://blog.jverkamp.com/2024/08/28/codecrafters-build-myself-a-grep/">just do one of these&lt;/a>? Well, yes. Yes I did. But I love building &lt;a href="https://blog.jverkamp.com/programming/topics/compilers/">compilers and interpreters&lt;/a>, so when I saw this one was in beta (and thus free &amp;#x1f609;), I had to try it!&lt;/p>
&lt;p>It&amp;rsquo;s directly an implemention of the Lox languages from the &lt;a href="https://craftinginterpreters.com/" target="_blank" rel="noopener">Crafting Interpreters&lt;/a> website / book (&lt;a href="https://blog.jverkamp.com/2021/06/12/crafting-interpreters/">my review&lt;/a>), if incomplete. By the end of the lesson, we&amp;rsquo;ll have:&lt;/p>
&lt;ul>
&lt;li>A &lt;a href="https://en.wikipedia.org/wiki/tokenizer">tokenizer&lt;/a> that handles parentheses, braces, operators (single and multiple character), whitespace, identifiers, string literals, numeric literals, and keywords&lt;/li>
&lt;li>A &lt;a href="https://en.wikipedia.org/wiki/parser">parser&lt;/a> that can take those tokens and build an &lt;a href="https://en.wikipedia.org/wiki/abstract%20syntax%20tree">abstract syntax tree&lt;/a> using &lt;a href="https://en.wikipedia.org/wiki/recursive%20descent%20parsing">recursive descent parsing&lt;/a>&lt;/li>
&lt;li>A simple &lt;a href="https://en.wikipedia.org/wiki/tree%20walking%20interpreter">tree walking interpreter&lt;/a> for some subset of the language&lt;/li>
&lt;/ul>
&lt;p>It doesn&amp;rsquo;t handle all of the syntax (yet). In particular, we don&amp;rsquo;t have functions, control statements like &lt;code>if&lt;/code> or &lt;code>while&lt;/code> or custom &lt;code>class&lt;/code>es. These seem&amp;hellip; kind of important! But it&amp;rsquo;s a start and something I can definitely see myself building more on it.&lt;/p></description></item></channel></rss>