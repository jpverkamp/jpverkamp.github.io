<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Cellular Automata on jverkamp.com</title>
    <link>https://blog.jverkamp.com/programming/topics/cellular-automata/</link>
    <description>Recent content in Cellular Automata on jverkamp.com</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 03 Dec 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://blog.jverkamp.com/programming/topics/cellular-automata/atom.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Pictogenesis:Â Transpiling</title>
      <link>https://blog.jverkamp.com/2020/12/03/pictogenesis-transpiling/</link>
      <pubDate>Thu, 03 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2020/12/03/pictogenesis-transpiling/</guid>
      <description>&lt;p&gt;Okay. That is &lt;em&gt;slow&lt;/em&gt;&amp;hellip; Let&amp;rsquo;s make it faster!&lt;/p&gt;

&lt;p&gt;So the main problem we have is that we&amp;rsquo;re interpreting the code. For every single pixel, for every line of code, we&amp;rsquo;re doing a few housekeeping things and making at least one function call. For a 400x400 image with just 10 lines of code, that&amp;rsquo;s 1.6M function calls. Like I said, &lt;em&gt;slow&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;So let&amp;rsquo;s make it faster!&lt;/p&gt;

&lt;p&gt;My first idea? &lt;a href=&#34;https://en.wikipedia.org/wiki/Transpile&#34;&gt;Transpile&lt;/a&gt; it to Javascript!&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Pictogenesis: Wrapping Modes</title>
      <link>https://blog.jverkamp.com/2020/12/01/pictogenesis-wrapping-modes/</link>
      <pubDate>Tue, 01 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2020/12/01/pictogenesis-wrapping-modes/</guid>
      <description>&lt;p&gt;Now that I&amp;rsquo;ve got &lt;a href=&#34;https://blog.jverkamp.com/2020/11/24/pictogenesis-register-machine/&#34;&gt;register machines&lt;/a&gt; working, one of the next ideas I had was to implement different wrapping modes. Currently, as it stands, &lt;code&gt;X&lt;/code&gt; and &lt;code&gt;Y&lt;/code&gt; are passed into the machine as floating point numbers from [0, 1] across the image and output is expected to be [0, 1] for each of &lt;code&gt;R&lt;/code&gt;, &lt;code&gt;G&lt;/code&gt;, and &lt;code&gt;B&lt;/code&gt;. Any values that end up outside of that range, we truncate down to that range. But some of our mathematical functions (multiplication, exponentiation, negation, etc) tend to generate numbers way out of this range. But they don&amp;rsquo;t have to!&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Pictogenesis: Register Machine</title>
      <link>https://blog.jverkamp.com/2020/11/24/pictogenesis-register-machine/</link>
      <pubDate>Tue, 24 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2020/11/24/pictogenesis-register-machine/</guid>
      <description>&lt;p&gt;Okay. First &lt;a href=&#34;https://blog.jverkamp.com/2020/11/23/pictogenesis-the-idea/&#34;&gt;Pictogeneis&lt;/a&gt; machine: a register based machine. Today we&amp;rsquo;re going to create a very small language with a small number of registers that can read from the outside world, write colors, and act as temporary variables.&lt;/p&gt;

&lt;p&gt;Something like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-asm&#34; data-lang=&#34;asm&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;gt&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;?&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;t0&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;b&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;y&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;x&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;r&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;add&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;g&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;y&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;x&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;abs&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;b&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;x&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;inv&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;t0&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;g&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;add&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;r&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;g&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;x&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;sub&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;t0&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;b&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;r&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;mul&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;x&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;r&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;b&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;abs&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;y&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;x&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;figure&gt;
    &lt;img src=&#34;https://blog.jverkamp.com/embeds/2020/pictogenesis-register-1.png&#34;/&gt; 
&lt;/figure&gt;


&lt;p&gt;In each case, the first argument is the output and the rest are inputs. So:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;#&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;gt&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;t0&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;b&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;y&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;x&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;r&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;b&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;y&lt;/span&gt;) {
    &lt;span style=&#34;color:#a6e22e&#34;&gt;t0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;x&lt;/span&gt;;
} &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {
    &lt;span style=&#34;color:#a6e22e&#34;&gt;t0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;r&lt;/span&gt;;
}
 
&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;#&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;add&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;g&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;y&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;x&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;g&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;y&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;x&lt;/span&gt;

&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;#&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;abs&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;b&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;x&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;b&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;x&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;
...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Where &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; are the input point x and y mapped to the range [0, 1]; &lt;code&gt;r&lt;/code&gt;, &lt;code&gt;g&lt;/code&gt;, &lt;code&gt;b&lt;/code&gt; are the output colors in the same range and &lt;code&gt;t{n}&lt;/code&gt; are temporary registers just used during the program.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Pictogenesis: The Idea</title>
      <link>https://blog.jverkamp.com/2020/11/23/pictogenesis-the-idea/</link>
      <pubDate>Mon, 23 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2020/11/23/pictogenesis-the-idea/</guid>
      <description>&lt;p&gt;PICTOGENESIS REBORN!&lt;/p&gt;

&lt;p&gt;I don&amp;rsquo;t know if I ever actually posted it publically, but one of the ideas I&amp;rsquo;ve had percolating for the longest time is combining tiny &lt;a href=&#34;https://en.wikipedia.org/wiki/interpreters&#34;&gt;interpreters&lt;/a&gt; and &lt;a href=&#34;https://en.wikipedia.org/wiki/genetic%20algorithms&#34;&gt;genetic algorithms&lt;/a&gt; to make &lt;a href=&#34;https://en.wikipedia.org/wiki/generative%20art&#34;&gt;generative art&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The basic idea is to generate programs (in various styles) that can take x,y coordinates and return colors. Then apply that to every pixel on an image to make generative art. Once we have, figure out a way to mutate/breed the programs so that we can apply a genetic algorithm to them and make awesome images! Sort of like &lt;a href=&#34;https://electricsheep.org/&#34;&gt;Electric Sheep&lt;/a&gt; (that brings back memories).&lt;/p&gt;

&lt;p&gt;The evolution point of view was actually a pretty tricky problem, since programs can have a number of different representations. I could compile them to bytecode and mutate that, but how do I make most code at least potentially meaningful?&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Backtracking Worm Coral</title>
      <link>https://blog.jverkamp.com/2020/11/20/backtracking-worm-coral/</link>
      <pubDate>Fri, 20 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2020/11/20/backtracking-worm-coral/</guid>
      <description>&lt;p&gt;Let&amp;rsquo;s take [yesterday&amp;rsquo;s Worm Coral]https://blog.jverkamp.com/2020/11/19/worm-coral/ and turn it up to 11!&lt;/p&gt;

&lt;p&gt;Now we have:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Whenever a worm gets stuck, it will &amp;lsquo;backtrack&amp;rsquo;: it will instead expand from the previous position recursively&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;That means that the initial 10 worms should always be able to fill the entire world! Even if one closes off an area, that one can eventually fill it up:&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&#34;https://blog.jverkamp.com/embeds/2020/backtracking-worm-full.png&#34;/&gt; 
&lt;/figure&gt;


&lt;p&gt;I like how occiasionally you get one spindly bit (usually early in the run) that another goes through. It reminds me of &lt;a href=&#34;https://boardgamegeek.com/boardgame/2453/blokus&#34;&gt;Blokus&lt;/a&gt; It does take a while.&lt;/p&gt;

&lt;p&gt;In addition, I wanted to play a bit with simulationism:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Worms can potentially &lt;code&gt;changeColor&lt;/code&gt; each frame&lt;/li&gt;
&lt;li&gt;Every &lt;code&gt;framesPerGeneration&lt;/code&gt; check if each worm dies &lt;code&gt;deathChance&lt;/code&gt; or spawns a child worm (&lt;code&gt;spawnChance&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;If a worm dies, it is removed from the simulation&lt;/li&gt;
&lt;li&gt;If a worm spawns, it creates a new child at it&amp;rsquo;s current location

&lt;ul&gt;
&lt;li&gt;If &lt;code&gt;spawnIncludesHistory&lt;/code&gt; is set, the child can backtrack into the parent&amp;rsquo;s history&lt;/li&gt;
&lt;li&gt;If &lt;code&gt;spawnVariesColor&lt;/code&gt; is set, the child will (potentially, it&amp;rsquo;s random) have a slightly different color&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let&amp;rsquo;s check it out!&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Worm Coral</title>
      <link>https://blog.jverkamp.com/2020/11/19/worm-coral/</link>
      <pubDate>Thu, 19 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2020/11/19/worm-coral/</guid>
      <description>&lt;p&gt;Today, I&amp;rsquo;m going to work on using [worms](https://blog.jverkamp.com/2020/11/17/p5js-worms/ to generate coral, similar to what I did way back when I was &lt;a href=&#34;https://blog.jverkamp.com/2015/01/01/generating-omnichromatic-images/&#34;&gt;generating omnichromatic images&lt;/a&gt;.&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&#34;https://blog.jverkamp.com/embeds/2020/worm-coral.png&#34;/&gt; 
&lt;/figure&gt;


&lt;p&gt;In a nutshell:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Spawn n worms&lt;/li&gt;
&lt;li&gt;On each tick:

&lt;ul&gt;
&lt;li&gt;Each worm tries to randomly move one direction&lt;/li&gt;
&lt;li&gt;If it cannot, increment that worm&amp;rsquo;s &lt;code&gt;stuck&lt;/code&gt; counter&lt;/li&gt;
&lt;li&gt;If it can, restart the &lt;code&gt;stuck&lt;/code&gt; counter&lt;/li&gt;
&lt;li&gt;If a worm is &lt;code&gt;stuck&lt;/code&gt; long enough, kill it off and spawn a new worm&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Eventually, we&amp;rsquo;ll fill the entire space with colors that end up looking a bit like coral. I&amp;rsquo;ll probably extend this later, since there are a lot of cool tweaks you can do with this general idea.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>p5js Boids</title>
      <link>https://blog.jverkamp.com/2020/11/18/p5js-boids/</link>
      <pubDate>Wed, 18 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2020/11/18/p5js-boids/</guid>
      <description>&lt;p&gt;Okay, sketch 2: &lt;a href=&#34;https://en.wikipedia.org/wiki/Boids&#34;&gt;Boids&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;The basic idea is to create a bunch of particles (the Boids in this case) and apply to them each a series of simple, limited rules that rely neither on communcation between the Boids nor a global controller and see what behaviors you can generate. Specifically, can you replicate the flocking behavior found in birds, since birds can obviously fly together without hitting one another and also without some lead bird giving orders.&lt;/p&gt;

&lt;p&gt;Something like this:&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&#34;https://blog.jverkamp.com/embeds/2020/boids.png&#34;/&gt; 
&lt;/figure&gt;


&lt;p&gt;For this case, there are three rules:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;seperation&lt;/strong&gt; - Fly away from any Boids that are too close to you (to avoid collision)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;alignment&lt;/strong&gt; - Align yourself to fly in the same direction as any Boids in your field of vision&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;cohesion&lt;/strong&gt; - Fly towards the center point of the Boids you can see&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>p5js Worms</title>
      <link>https://blog.jverkamp.com/2020/11/17/p5js-worms/</link>
      <pubDate>Tue, 17 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2020/11/17/p5js-worms/</guid>
      <description>&lt;p&gt;One thing that I&amp;rsquo;ve been hoping to get into a bit more is the idea of &lt;a href=&#34;https://en.wikipedia.org/wiki/Generative%20Art&#34;&gt;Generative Art&lt;/a&gt;. Essentially, use any of a wide variety of algorithms to generate art. To do that, and so that the art can be generated right in front of you in the browser, I&amp;rsquo;m going to use the &lt;a href=&#34;https://p5js.org/&#34;&gt;p5js&lt;/a&gt; library. It gives you a nice API of graphical primitives and takes a simple &lt;code&gt;setup&lt;/code&gt; and &lt;code&gt;draw&lt;/code&gt; function and does the rest.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>LD46: Tetris Life Scoring</title>
      <link>https://blog.jverkamp.com/2020/05/12/ld46-tetris-life-scoring/</link>
      <pubDate>Tue, 12 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2020/05/12/ld46-tetris-life-scoring/</guid>
      <description>&lt;p&gt;And so it ends.&lt;/p&gt;

&lt;h1 id=&#34;results&#34;&gt;Results&lt;/h1&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Category&lt;/th&gt;
&lt;th&gt;Place&lt;/th&gt;
&lt;th&gt;Score&lt;/th&gt;
&lt;th&gt;Ratings&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Overal&lt;/td&gt;
&lt;td&gt;282&lt;sup&gt;nd&lt;/sup&gt;&lt;/td&gt;
&lt;td&gt;3.688&lt;/td&gt;
&lt;td&gt;26&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Fun&lt;/td&gt;
&lt;td&gt;408&lt;sup&gt;th&lt;/sup&gt;&lt;/td&gt;
&lt;td&gt;3.438&lt;/td&gt;
&lt;td&gt;26&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Innovation&lt;/td&gt;
&lt;td&gt;17&lt;sup&gt;th&lt;/sup&gt;&lt;/td&gt;
&lt;td&gt;4.28&lt;/td&gt;
&lt;td&gt;27&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Theme&lt;/td&gt;
&lt;td&gt;290&lt;sup&gt;th&lt;/sup&gt;&lt;/td&gt;
&lt;td&gt;3.917&lt;/td&gt;
&lt;td&gt;26&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Graphics&lt;/td&gt;
&lt;td&gt;608&lt;sup&gt;th&lt;/sup&gt;&lt;/td&gt;
&lt;td&gt;3.313&lt;/td&gt;
&lt;td&gt;26&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Audio&lt;/td&gt;
&lt;td&gt;436&lt;sup&gt;th&lt;/sup&gt;&lt;/td&gt;
&lt;td&gt;3.182&lt;/td&gt;
&lt;td&gt;24&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Humor&lt;/td&gt;
&lt;td&gt;761&lt;sup&gt;st&lt;/sup&gt;&lt;/td&gt;
&lt;td&gt;2.205&lt;/td&gt;
&lt;td&gt;24&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Mood&lt;/td&gt;
&lt;td&gt;529&lt;sup&gt;th&lt;/sup&gt;&lt;/td&gt;
&lt;td&gt;3.208&lt;/td&gt;
&lt;td&gt;26&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;</description>
    </item>
    
    <item>
      <title>LD46: Tetris Life v1.0</title>
      <link>https://blog.jverkamp.com/2020/04/19/ld46-tetris-life-v1.0/</link>
      <pubDate>Sun, 19 Apr 2020 20:30:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2020/04/19/ld46-tetris-life-v1.0/</guid>
      <description>&lt;iframe width=&#34;320&#34; height=&#34;640&#34; style=&#34;border: 1px solid black;&#34; src=&#34;https://blog.jverkamp.com/embeds/games/ludum-dare/46/v1.0/launcher.html&#34;&gt;&lt;/iframe&gt;

&lt;p&gt;Controls:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Left and right to move the block and forth&lt;/li&gt;
&lt;li&gt;Z and X to rotate it (or crash into things)&lt;/li&gt;
&lt;li&gt;If a block gets stuck, you can hit ENTER to lock it in place&lt;/li&gt;
&lt;li&gt;ESC to quit the current level&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Goals:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;To win: Get the plants to the top of the level&lt;/li&gt;
&lt;li&gt;To lose: Kill off all of the plants #keepitalive&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;EDIT: I have included a v1.1 update that fixes a few minor bugs. Feel free to play either the official v1.0 build or the slightly updated (~10 minutes) v1.1 build with:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Add a ceiling&lt;/li&gt;
&lt;li&gt;Correctly scale target&lt;/li&gt;
&lt;li&gt;Scale control speed by difficulty&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And there you have it. This page will serve as the main entry for Ludum Dare. If you&amp;rsquo;d rather download an executable for Windows/OSX/Linux, you can do so on the GitHub release page:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/jpverkamp/tetris-life/releases/tag/v1.0&#34;&gt;GitHub: Tetris Life v1.0&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Speaking of which, per the Ludum Dare rules (and because I would have anyways), the full source code:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/jpverkamp/tetris-life/&#34;&gt;GitHub: Tetris Life source&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;MIT Licensed. I would appreciate a comment if you do anything cool with it.&lt;/p&gt;

&lt;p&gt;Ludum Dare page, if you&amp;rsquo;d like to see my entry:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://ldjam.com/events/ludum-dare/46/$196712&#34;&gt;Ludum Dare: Tetris Sand&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Some updates since last time:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Music!&lt;/li&gt;
&lt;li&gt;More elements!&lt;/li&gt;
&lt;li&gt;Polish!&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>LD46: I made a GAME!</title>
      <link>https://blog.jverkamp.com/2020/04/19/ld46-i-made-a-game/</link>
      <pubDate>Sun, 19 Apr 2020 15:15:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2020/04/19/ld46-i-made-a-game/</guid>
      <description>&lt;p&gt;I made a game y&amp;rsquo;all!&lt;/p&gt;

&lt;video controls src=&#34;https://blog.jverkamp.com/embeds/2020/ludum-dare-46-i-made-a-game.mp4&#34;&gt;&lt;/video&gt;

&lt;p&gt;Big changes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It&amp;rsquo;s got a menu!&lt;/li&gt;
&lt;li&gt;And a demo mode!&lt;/li&gt;
&lt;li&gt;PLANTS GROW BY THEMSELVES!&lt;/li&gt;
&lt;li&gt;And win/lose screens!&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>LD46: Score, Scaling, and BURNING! Oh my.</title>
      <link>https://blog.jverkamp.com/2020/04/19/ld46-score-scaling-and-burning-oh-my./</link>
      <pubDate>Sun, 19 Apr 2020 13:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2020/04/19/ld46-score-scaling-and-burning-oh-my./</guid>
      <description>&lt;p&gt;Got some sleep and BACK AT IT!&lt;/p&gt;

&lt;video controls src=&#34;https://blog.jverkamp.com/embeds/2020/ludum-dare-46-scaling.mp4&#34;&gt;&lt;/video&gt;

&lt;p&gt;Big changes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;We have scores now!&lt;/li&gt;
&lt;li&gt;And proper scaling (which also fixes the performance issue, at least on my machine, turns out &lt;sup&gt;1&lt;/sup&gt;&amp;frasl;&lt;sub&gt;16&lt;/sub&gt; as many updates helps)&lt;/li&gt;
&lt;li&gt;Proper resetting&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>LD46: IT&#39;S WORKING!</title>
      <link>https://blog.jverkamp.com/2020/04/18/ld46-its-working/</link>
      <pubDate>Sat, 18 Apr 2020 23:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2020/04/18/ld46-its-working/</guid>
      <description>&lt;figure&gt;
    &lt;img src=&#34;https://blog.jverkamp.com/embeds/2020/its-working.gif&#34;/&gt; 
&lt;/figure&gt;


&lt;p&gt;IT&amp;rsquo;S WORKING!&lt;/p&gt;

&lt;video controls src=&#34;https://blog.jverkamp.com/embeds/2020/ludum-dare-46-its-working.mp4&#34;&gt;&lt;/video&gt;

&lt;p&gt;The performance is &lt;strong&gt;terrible&lt;/strong&gt; (sub 10 FPS on a pretty decent desktop and I want to try to run it in a browser&amp;hellip;), but &lt;strong&gt;it&amp;rsquo;s working&lt;/strong&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>LD46: Particles!</title>
      <link>https://blog.jverkamp.com/2020/04/18/ld46-particles/</link>
      <pubDate>Sat, 18 Apr 2020 21:45:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2020/04/18/ld46-particles/</guid>
      <description>&lt;p&gt;I&amp;rsquo;ve got particles working!&lt;/p&gt;

&lt;video controls src=&#34;https://blog.jverkamp.com/embeds/2020/ludum-dare-46-particles.mp4&#34;&gt;&lt;/video&gt;

&lt;p&gt;It&amp;rsquo;s probably not &lt;strong&gt;nearly&lt;/strong&gt; as efficient as it&amp;rsquo;s going to have to be, but it&amp;rsquo;s a start?&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Ludum Dare 46: Tetris Sand</title>
      <link>https://blog.jverkamp.com/2020/04/17/ludum-dare-46-tetris-sand/</link>
      <pubDate>Fri, 17 Apr 2020 23:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2020/04/17/ludum-dare-46-tetris-sand/</guid>
      <description>&lt;p&gt;It&amp;rsquo;s &lt;a href=&#34;https://blog.jverkamp.com/2014/08/24/sandbox-battle/&#34;&gt;been a while&lt;/a&gt; since I&amp;rsquo;ve last done a &lt;a href=&#34;https://ldjam.com/&#34;&gt;Ludum Dare&lt;/a&gt;. I felt the itch though, so let&amp;rsquo;s do it again.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://ldjam.com/&#34;&gt;Ludum Dare&lt;/a&gt; is an online event where games are made from scratch in a weekend. Check us out every April and October!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The theme this time: &lt;em&gt;Keep it alive&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;I don&amp;rsquo;t know if I&amp;rsquo;ll make it all the way through or actually finish a game. But I&amp;rsquo;m going to give it a try!&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>AoC 2016 Day 18: Its A Trap</title>
      <link>https://blog.jverkamp.com/2016/12/18/aoc-2016-day-18-its-a-trap/</link>
      <pubDate>Sun, 18 Dec 2016 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2016/12/18/aoc-2016-day-18-its-a-trap/</guid>
      <description>&lt;h3 id=&#34;source-like-a-rogue-http-adventofcode-com-2016-day-18&#34;&gt;Source: &lt;a href=&#34;http://adventofcode.com/2016/day/18&#34;&gt;Like a Rogue&lt;/a&gt;&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Part 1:&lt;/strong&gt; Starting with a sequence of &lt;code&gt;.&lt;/code&gt; and &lt;code&gt;^&lt;/code&gt;, generate additional rows using the rules based on the three characters above the new position.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;^^.&lt;/code&gt; -&amp;gt; &lt;code&gt;^&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.^^&lt;/code&gt; -&amp;gt; &lt;code&gt;^&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;^..&lt;/code&gt; -&amp;gt; &lt;code&gt;^&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;..^&lt;/code&gt; -&amp;gt; &lt;code&gt;^&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Otherwise -&amp;gt; &lt;code&gt;.&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;How many safe tiles (&lt;code&gt;.&lt;/code&gt;) are there after 40 generations?&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>Let it snow!</title>
      <link>https://blog.jverkamp.com/2015/01/09/let-it-snow/</link>
      <pubDate>Fri, 09 Jan 2015 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2015/01/09/let-it-snow/</guid>
      <description>&lt;p&gt;â« Oh the weather outside is frightful&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;&amp;hellip; â«&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&#34;https://blog.jverkamp.com/embeds/2015/snowflake.gif&#34;/&gt; 
&lt;/figure&gt;</description>
    </item>
    
    <item>
      <title>Regular Expression Fractals</title>
      <link>https://blog.jverkamp.com/2014/10/05/regular-expression-fractals/</link>
      <pubDate>Sun, 05 Oct 2014 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2014/10/05/regular-expression-fractals/</guid>
      <description>&lt;p&gt;Oops, turns out I haven&amp;rsquo;t had a post in a good long while. Before it gets even longer, I figure that I should take one off my backlog and just write it up, even if it is a little on the shorter side.&lt;/p&gt;

&lt;p&gt;Today&amp;rsquo;s post was inspired by this post on /r/dailyprogrammer a month ago today:
&lt;a href=&#34;https://www.reddit.com/r/dailyprogrammer/comments/2fkh8u/9052014_challenge_178_hard_regular_expression/&#34;&gt;Challenge #178 [Hard] Regular Expression Fractals&lt;/a&gt;. The basic idea is that you are going to take a rectangular region and divide it into four quadrants, again and again, recording the path as you go (images from that post):&lt;/p&gt;

&lt;p&gt;&lt;figure&gt;
    &lt;img src=&#34;https://blog.jverkamp.com/embeds/2014/step-1.png&#34;/&gt; 
&lt;/figure&gt;

&lt;figure&gt;
    &lt;img src=&#34;https://blog.jverkamp.com/embeds/2014/step-2.png&#34;/&gt; 
&lt;/figure&gt;

&lt;figure&gt;
    &lt;img src=&#34;https://blog.jverkamp.com/embeds/2014/step-3.png&#34;/&gt; 
&lt;/figure&gt;
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Look and Say</title>
      <link>https://blog.jverkamp.com/2014/09/15/look-and-say/</link>
      <pubDate>Mon, 15 Sep 2014 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2014/09/15/look-and-say/</guid>
      <description>&lt;p&gt;Random quick post today&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;. Basically, we want to write code to generate what&amp;rsquo;s known as &lt;a href=&#34;https://en.wikipedia.org/wiki/Look%20and%20Say%20sequence&#34;&gt;Look and Say sequence&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;To generate a member of the sequence from the previous member, read off the digits of the previous member, counting the number of digits in groups of the same digit. For example:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;1 is read off as &amp;ldquo;one 1&amp;rdquo; or 11.&lt;/li&gt;
&lt;li&gt;11 is read off as &amp;ldquo;two 1s&amp;rdquo; or 21.&lt;/li&gt;
&lt;li&gt;21 is read off as &amp;ldquo;one 2, then one 1&amp;rdquo; or 1211.&lt;/li&gt;
&lt;li&gt;1211 is read off as &amp;ldquo;one 1, then one 2, then two 1s&amp;rdquo; or 111221.&lt;/li&gt;
&lt;li&gt;111221 is read off as &amp;ldquo;three 1s, then two 2s, then one 1&amp;rdquo; or 312211.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>Sandbox Battle!</title>
      <link>https://blog.jverkamp.com/2014/08/24/sandbox-battle/</link>
      <pubDate>Sun, 24 Aug 2014 18:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2014/08/24/sandbox-battle/</guid>
      <description>&lt;figure&gt;
    &lt;img src=&#34;https://blog.jverkamp.com/embeds/2014/title.png&#34;/&gt; 
&lt;/figure&gt;</description>
    </item>
    
    <item>
      <title>Ludum Dare 30: Demo mode</title>
      <link>https://blog.jverkamp.com/2014/08/24/ludum-dare-30-demo-mode/</link>
      <pubDate>Sun, 24 Aug 2014 12:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2014/08/24/ludum-dare-30-demo-mode/</guid>
      <description>&lt;p&gt;Quick update this morning: I managed to get a &amp;lsquo;demo mode&amp;rsquo; working. Now when you first start the game, the boxes will be whizzing around in the background giving you an idea of what you&amp;rsquo;re about to get yourself into!&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Ludum Dare 30: Programmer art and simple AI</title>
      <link>https://blog.jverkamp.com/2014/08/23/ludum-dare-30-programmer-art-and-simple-ai/</link>
      <pubDate>Sat, 23 Aug 2014 23:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2014/08/23/ludum-dare-30-programmer-art-and-simple-ai/</guid>
      <description>&lt;p&gt;A few hours later and we&amp;rsquo;ve already finished (or at least made good progress on) two of the goals that I was hoping for:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;AI players; at the very least one that moves randomly, but optimally several different kinds&lt;/li&gt;
&lt;li&gt;Pending the previous, a selector on the options screen that can turn each player either off, on, or to any of the current AIs&lt;/li&gt;
&lt;li&gt;Stylings around the page; probably some sort of thick border that bleeds a little in and out, looking different per player&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>Ludum Dare 30: 24 hours</title>
      <link>https://blog.jverkamp.com/2014/08/23/ludum-dare-30-24-hours/</link>
      <pubDate>Sat, 23 Aug 2014 18:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2014/08/23/ludum-dare-30-24-hours/</guid>
      <description>&lt;p&gt;Here we are, 24 hours into the competition.&lt;/p&gt;

&lt;p&gt;A lot of the last few hours has been spent doing a fair amount of restructing. Before, I had a single &amp;lsquo;thread&amp;rsquo;&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; for each of the tiles, along with another thread listening for user input. Unfortunately though, that lead to all sorts of race conditions.
Specifically, whenever two tiles overlapped, it was often the case that one was doing the falling step (which copies from one internal buffer to another) while the other was in the swap step (which copies from tile to another). Then after the first finished, it would copy the second buffer over&amp;hellip; overwriting anything that had been swapped.&lt;/p&gt;

&lt;p&gt;Oops.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Ludum Dare 30: Hints of a game</title>
      <link>https://blog.jverkamp.com/2014/08/23/ludum-dare-30-hints-of-a-game/</link>
      <pubDate>Sat, 23 Aug 2014 12:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2014/08/23/ludum-dare-30-hints-of-a-game/</guid>
      <description>&lt;p&gt;We&amp;rsquo;re getting there. 18 hours in and I have the first hints of what might actually be a game&amp;hellip;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Ludum Dare 30: Sandbox Battle</title>
      <link>https://blog.jverkamp.com/2014/08/22/ludum-dare-30-sandbox-battle/</link>
      <pubDate>Fri, 22 Aug 2014 23:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2014/08/22/ludum-dare-30-sandbox-battle/</guid>
      <description>&lt;p&gt;And here we are again. &lt;a href=&#34;https://blog.jverkamp.com/2013/05/21/ludum-dare-26-vtanks-results/&#34;&gt;Ludum Dare&lt;/a&gt;. Taken directly from their about page&amp;hellip;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Ludum Dare is a regular accelerated game development Event.  Participants develop games from scratch in a weekend, based on a theme suggested by community.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;More specifically, the goal is to make a game from scratch in 48 hours. You&amp;rsquo;re allowed to use publicly available frameworks and code libraries, but no art or other assets. Previously, I missed the original start time. So although I made my game in 48 hours, it didn&amp;rsquo;t qualify. This time around, I&amp;rsquo;m starting on time.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Langton&#39;s ant</title>
      <link>https://blog.jverkamp.com/2014/08/07/langtons-ant/</link>
      <pubDate>Thu, 07 Aug 2014 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2014/08/07/langtons-ant/</guid>
      <description>&lt;p&gt;Here&amp;rsquo;s another post from /r/DailyProgrammer: &lt;a href=&#34;http://www.reddit.com/r/dailyprogrammer/comments/2c4ka3/7302014_challenge_173_intermediate_advanced/&#34;&gt;Advanced Langton&amp;rsquo;s Ant&lt;/a&gt;. I&amp;rsquo;m a bit behind the times (see tomorrow&amp;rsquo;s post), but it&amp;rsquo;s still an interesting enough exercise, so let&amp;rsquo;s go for it!&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&#34;https://blog.jverkamp.com/embeds/2014/LR.gif&#34;/&gt; 
&lt;/figure&gt;</description>
    </item>
    
    <item>
      <title>Brownian trees</title>
      <link>https://blog.jverkamp.com/2014/03/11/brownian-trees/</link>
      <pubDate>Tue, 11 Mar 2014 14:00:06 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2014/03/11/brownian-trees/</guid>
      <description>&lt;p&gt;Pretty pretty picture time&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;:&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&#34;https://blog.jverkamp.com/embeds/2014/brownian-tree.png&#34;/&gt; 
&lt;/figure&gt;</description>
    </item>
    
    <item>
      <title>Twitter puddle</title>
      <link>https://blog.jverkamp.com/2013/11/30/twitter-puddle/</link>
      <pubDate>Sat, 30 Nov 2013 04:55:28 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2013/11/30/twitter-puddle/</guid>
      <description>&lt;p&gt;This one has been sitting in my backlog for a while and its been a while since I&amp;rsquo;ve gotten to write a programming post&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;, but now seems as good time as ever: &lt;a href=&#34;http://programmingpraxis.com/2013/11/15/twitter-puddle/&#34;&gt;Twitter puzzle&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Rule 30 RNG</title>
      <link>https://blog.jverkamp.com/2012/10/17/rule-30-rng/</link>
      <pubDate>Wed, 17 Oct 2012 14:00:08 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2012/10/17/rule-30-rng/</guid>
      <description>&lt;p&gt;Today we get away from the word games for a little while and get back to talking about random number generators (previous posts &lt;a href=&#34;https://blog.jverkamp.com/2012/08/22/two-random-exercises/&#34;&gt;here&lt;/a&gt;Â and &lt;a href=&#34;https://blog.jverkamp.com/2012/08/23/two-more-random-exercises/&#34;&gt;here&lt;/a&gt;). Or rather one random number generator in specific: a &lt;a href=&#34;https://en.wikipedia.org/wiki/Rule%2030&#34;&gt;Rule 30&lt;/a&gt;Â &lt;a href=&#34;https://en.wikipedia.org/wiki/PRNG&#34;&gt;psuedo-random number generator&lt;/a&gt;Â (PRNG). (Here&amp;rsquo;s the &lt;a href=&#34;http://programmingpraxis.com/2011/04/29/rule-30-rng/&#34; title=&#34;Programming Praxis: Rule 30 RNG&#34;&gt;motivating post&lt;/a&gt; from Programming Praxis.)&lt;/p&gt;

&lt;p&gt;Remember the previous post I made about &lt;a href=&#34;https://blog.jverkamp.com/2012/10/03/elementary-cellular-automaton/&#34;&gt;cellular automaton&lt;/a&gt;? The basic idea is to turn those into a random number generator. If you go back to the linked post in particular and give it Rule 30 with a random initial state, you can see how chaotic the rows seem to be. Perfect for a PRNG.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Elementary cellular automaton</title>
      <link>https://blog.jverkamp.com/2012/10/03/elementary-cellular-automaton/</link>
      <pubDate>Wed, 03 Oct 2012 14:00:47 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2012/10/03/elementary-cellular-automaton/</guid>
      <description>&lt;p&gt;Today we&amp;rsquo;re going to be playing with an HTML5 canvas again (previously we made &lt;a href=&#34;https://blog.jverkamp.com/2012/09/26/line-art-with-an-html5-canvas/&#34;&gt;line art&lt;/a&gt; and &lt;a href=&#34;https://blog.jverkamp.com/2012/09/27/html5-bugs/&#34;&gt;bugs&lt;/a&gt;). This time, the goal is to make a tool where you can explore &lt;a href=&#34;http://mathworld.wolfram.com/ElementaryCellularAutomaton.html&#34; title=&#34;Wolfram Mathworld: Elementary Cellular Automaton&#34;&gt;elementary cellular automaton&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>