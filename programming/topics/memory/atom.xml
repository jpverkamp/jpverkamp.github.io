<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Memory on jverkamp.com</title><link>https://blog.jverkamp.com/programming/topics/memory/</link><description>Recent content in Memory on jverkamp.com</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://blog.jverkamp.com/programming/topics/memory/atom.xml" rel="self" type="application/rss+xml"/><item><title>StackLang Part IV: An Interpreter</title><link>https://blog.jverkamp.com/2023/05/01/stacklang-part-iv-an-interpreter/</link><pubDate>Mon, 01 May 2023 23:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2023/05/01/stacklang-part-iv-an-interpreter/</guid><description>&lt;p>StackLang, part 4: an interpreter. Here we go again!&lt;/p>
&lt;p>This time, the goal is to actually get code running&lt;/p></description></item><item><title>StackLang Part III: The Parser</title><link>https://blog.jverkamp.com/2023/04/24/stacklang-part-iii-the-parser/</link><pubDate>Mon, 24 Apr 2023 00:01:00 +0000</pubDate><guid>https://blog.jverkamp.com/2023/04/24/stacklang-part-iii-the-parser/</guid><description>&lt;p>StackLang, part 3: parsing. This is going to be the most complicated one thus far! Onward.&lt;/p></description></item><item><title>StackLang Part II: The Lexer</title><link>https://blog.jverkamp.com/2023/04/16/stacklang-part-ii-the-lexer/</link><pubDate>Sun, 16 Apr 2023 23:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2023/04/16/stacklang-part-ii-the-lexer/</guid><description>&lt;p>StackLang, part 2: lexing.&lt;/p>
&lt;p>It&amp;rsquo;s quite often the simplest part of implementing a programming language (although parsers for s-expression based languages come close), but it&amp;rsquo;s still something that needs done. So here we go!&lt;/p></description></item><item><title>StackLang Part I: The Idea</title><link>https://blog.jverkamp.com/2023/04/14/stacklang-part-i-the-idea/</link><pubDate>Fri, 14 Apr 2023 23:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2023/04/14/stacklang-part-i-the-idea/</guid><description>&lt;p>I enjoy writing programming languages. &lt;a href="https://blog.jverkamp.com/2013/08/21/a-tiny-virtual-machine-in-racket/">Example: Tiny&lt;/a>. Let’s do that again.&lt;/p>
&lt;p>This time, StackLang:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-text" data-lang="text">&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> @[n fact]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> { n 1 - $fact fact n * }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> N 1 &amp;lt;= if
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>} @fact
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>5 $fact fact writeln
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Bit of gibberish there, I suppose, but the goal is to write everything in a postfix/stack based model. So &lt;code>n 1 - $fact fact n *&lt;/code> is equivalent to &lt;code>fact(fact, n - 1) * n&lt;/code> in a more traditional language.&lt;/p>
&lt;p>Over the next few posts, I hope to write up where I am thus far and what’s next.&lt;/p></description></item><item><title>'Tiny' Turing completeness without MMOV</title><link>https://blog.jverkamp.com/2013/08/22/tiny-turing-completeness-without-mmov/</link><pubDate>Thu, 22 Aug 2013 21:00:54 +0000</pubDate><guid>https://blog.jverkamp.com/2013/08/22/tiny-turing-completeness-without-mmov/</guid><description>&lt;p>Something was bugging me about my proof from yesterday. If we take another tack on proving Turing completeness, all we would have to prove is that we can simulate &lt;a href="https://en.wikipedia.org/wiki/Subleq#Subtract%20and%20branch%20if%20less%20than%20or%20equal%20to%20zero">`SUBLEQ`&lt;/a>. Since &lt;code>SUBLEQ&lt;/code> is Turing complete, that&amp;rsquo;s all we need&amp;ndash;just convert each &lt;code>SUBLEQ&lt;/code> into a &lt;code>SUB&lt;/code>, &lt;code>JZ&lt;/code>, and a &lt;code>JLS&lt;/code>. So that means that Tiny as written should be Turing complete.&lt;/p>
&lt;p>So how does that work?&lt;/p></description></item><item><title>A 'Tiny' virtual machine in Racket</title><link>https://blog.jverkamp.com/2013/08/21/a-tiny-virtual-machine-in-racket/</link><pubDate>Wed, 21 Aug 2013 00:00:28 +0000</pubDate><guid>https://blog.jverkamp.com/2013/08/21/a-tiny-virtual-machine-in-racket/</guid><description>&lt;p>&lt;a href="http://www.reddit.com/r/dailyprogrammer/comments/1kqxz9/080813_challenge_132_intermediate_tiny_assembler/">Today&amp;rsquo;s challenge&lt;/a> at /r/dailyprogrammer asks to implement an assembler for a small virtual machine. It has only 16 &lt;a href="https://en.wikipedia.org/wiki/Assembly%20language#Opcode%20mnemonics%20and%20extended%20mnemonics">mnemonics&lt;/a> which in unique &lt;a href="https://en.wikipedia.org/wiki/Opcode">opcodes&lt;/a> (each instruction can have multiple forms for if they&amp;rsquo;re accessing memory or literals), so it&amp;rsquo;s a simple virtual machine indeed. As a challenge, you&amp;rsquo;re supposed to write an interesting program (I actually wrote a virtual machine as well to test them). As an even better challenge, we&amp;rsquo;re supposed to prove that Tiny is &lt;a href="https://en.wikipedia.org/wiki/Turing%20complete">Turing complete&lt;/a>. Well, let&amp;rsquo;s get to it!&lt;/p></description></item><item><title>Swap list nodes</title><link>https://blog.jverkamp.com/2013/06/26/swap-list-nodes/</link><pubDate>Wed, 26 Jun 2013 14:00:42 +0000</pubDate><guid>https://blog.jverkamp.com/2013/06/26/swap-list-nodes/</guid><description>&lt;p>It&amp;rsquo;s been rather a while since I&amp;rsquo;ve worked out a &lt;a title="Programming Praxis" href="http://programmingpraxis.com/">Programming Praxis&lt;/a> problem, but they posted a &lt;a title="Swap list nodes" href="http://programmingpraxis.com/2013/06/25/swap-list-nodes/">new one yesterday&lt;/a>, so now seems as good a time as any. The problem is relatively simple:&lt;/p>
&lt;blockquote>
&lt;p>Given a linked list, swap the kth node from the head of the list with the kth node from the end of the list.&lt;/p>
&lt;/blockquote>
&lt;p>Since all lists in Scheme are linked lists, that part seems easy enough. To make the problem a little more interesting however, I&amp;rsquo;m going to work it out in a purely functional manner: no mutation.&lt;/p></description></item></channel></rss>