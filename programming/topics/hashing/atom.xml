<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Hashing on jverkamp.com</title><link>https://blog.jverkamp.com/programming/topics/hashing/</link><description>Recent content in Hashing on jverkamp.com</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Fri, 25 Jul 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://blog.jverkamp.com/programming/topics/hashing/atom.xml" rel="self" type="application/rss+xml"/><item><title>Using CSP unsafe-hashes</title><link>https://blog.jverkamp.com/2025/07/25/using-csp-unsafe-hashes/</link><pubDate>Fri, 25 Jul 2025 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2025/07/25/using-csp-unsafe-hashes/</guid><description>&lt;p>So here&amp;rsquo;s a fun one: how does the &lt;code>unsafe-hashes&lt;/code> directive in a &lt;a href="https://en.wikipedia.org/wiki/content%20security%20police">content security police&lt;/a> work?&lt;/p>
&lt;p>In a perfect world, you don&amp;rsquo;t need it. You can write a CSP with a minimal &lt;code>script-src&lt;/code> policy, including only scripts from your own domains (&lt;code>self&lt;/code>) or a list of specific other scripts or at worst domains.&lt;/p>
&lt;p>But sometimes real life (and third party libraries) get in the way.&lt;/p>
&lt;p>It starts with inline scripts. So you have to add &lt;code>unsafe-inline&lt;/code>. But there&amp;rsquo;s a better way to do that: CSP nonces. Specify a randomly generated (per request) nonce in the CSP header and then apply that same nonce to every &lt;code>script&lt;/code> tag. Voila. Better.&lt;/p>
&lt;h2 id="the-problem-inline-javascript-events">The problem: inline JavaScript events&lt;/h2>
&lt;p>But what about something like this:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-html" data-lang="html">&lt;span style="display:flex;">&lt;span>&amp;lt;&lt;span style="color:#f92672">button&lt;/span> &lt;span style="color:#a6e22e">onClick&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;doSomething();&amp;#34;&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Well, you might say, don&amp;rsquo;t do that. Write it as a script:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-html" data-lang="html">&lt;span style="display:flex;">&lt;span>&amp;lt;&lt;span style="color:#f92672">button&lt;/span> &lt;span style="color:#a6e22e">id&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;doSomethinger&amp;#34;&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;lt;&lt;span style="color:#f92672">script&lt;/span> &lt;span style="color:#a6e22e">nonce&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;correctHorseBatteryStable&amp;#34;&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>document.&lt;span style="color:#a6e22e">getElementById&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;doSomethinger&amp;#34;&lt;/span>).&lt;span style="color:#a6e22e">addEventListener&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;click&amp;#34;&lt;/span>, &lt;span style="color:#66d9ef">function&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">doSomething&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>});
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;lt;/&lt;span style="color:#f92672">script&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>But like I said&amp;ndash;third parties scripts can be imperfect. And sometimes, they just &lt;em>insist&lt;/em> on embedding their own event handlers inline.&lt;/p>
&lt;h2 id="a-solution-unsafe-hashes">A solution: &lt;code>unsafe-hashes&lt;/code>&lt;/h2>
&lt;p>Enter: &lt;code>unsafe-hashes&lt;/code>.&lt;/p>
&lt;p>Basically, you can add this to your CSP:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-text" data-lang="text">&lt;span style="display:flex;">&lt;span>script-src &amp;#39;unsafe-hashes&amp;#39; &amp;#39;sha256-44558f2c36efd8163eac2903cec13ed1fafcca51abd91d9f696321ab895f1107&amp;#39;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This tells the browser that you &lt;em>are&lt;/em> allowed to have event listeners directly on HTML elements&amp;hellip; so long as the content of the JavaScript hashes &lt;em>exactly&lt;/em> to any hash listed as an &lt;code>unsafe-hash&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ echo -n &lt;span style="color:#e6db74">&amp;#34;doSomething();&amp;#34;&lt;/span> | sha256
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>44558f2c36efd8163eac2903cec13ed1fafcca51abd91d9f696321ab895f1107
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="it-gets-worse-dynamically-generated-javascript">It gets worse: dynamically generated JavaScript&lt;/h2>
&lt;p>There is, however, one problem with this that does come up unfortunately often. If you&amp;rsquo;re already dealing with third parties not doing things you wish they would, well then you have to deal with fun code like this:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-php" data-lang="php">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">&amp;lt;?&lt;/span>&lt;span style="color:#a6e22e">php&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">foreach&lt;/span> ($buttonIds &lt;span style="color:#66d9ef">as&lt;/span> $buttonId) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">echo&lt;/span> &lt;span style="color:#e6db74">&amp;#39;&amp;lt;button onclick=&amp;#34;doSomething(&amp;#39;&lt;/span> &lt;span style="color:#f92672">.&lt;/span> $buttonId &lt;span style="color:#f92672">.&lt;/span> &lt;span style="color:#e6db74">&amp;#39;);&amp;#34;&amp;gt;Button &amp;#39;&lt;/span> &lt;span style="color:#f92672">.&lt;/span> $buttonId &lt;span style="color:#f92672">.&lt;/span> &lt;span style="color:#e6db74">&amp;#39;&amp;lt;/button&amp;gt;&amp;#39;&lt;/span> &lt;span style="color:#f92672">.&lt;/span> &lt;span style="color:#a6e22e">PHP_EOL&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">?&amp;gt;&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Unfortunately&amp;hellip; that completely blows up the CSP. Because&amp;hellip;&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ echo -n &lt;span style="color:#e6db74">&amp;#34;doSomething(1);&amp;#34;&lt;/span> | sha256
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>2ef899c15aae95711855a45a5bb93c55363162e0e75e295aad4f189f20323d7c
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ echo -n &lt;span style="color:#e6db74">&amp;#34;doSomething(5);&amp;#34;&lt;/span> | sha256
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>0e03bb385169b89c95eb62659f50604ffb8283154bd58ab8cc7e692c4b5c05a3
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ echo -n &lt;span style="color:#e6db74">&amp;#34;doSomething(42);&amp;#34;&lt;/span> | sha256
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>4d9691449db6740ee19207c5bb52361eb97e18f06352ed400f83ae7caee270da
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Just hashes doing hash things there. So basically, you have to be able to dynamically generate your CSP on the fly, including all of the hashes of all of the functions &lt;em>and with each of their arguments&lt;/em> that are either possible or (even better) actually used.&lt;/p>
&lt;p>And this isn&amp;rsquo;t fun at all.&lt;/p>
&lt;p>Now, you might say: but you can do something like this:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-php" data-lang="php">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">&amp;lt;?&lt;/span>&lt;span style="color:#a6e22e">php&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">foreach&lt;/span> ($buttonIds &lt;span style="color:#66d9ef">as&lt;/span> $buttonId) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">echo&lt;/span> &lt;span style="color:#e6db74">&amp;#39;&amp;lt;button data-id=&amp;#34;$buttonId&amp;#34; onclick=&amp;#34;doSomething(this.dataset.id);&amp;#34;&amp;gt;&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">?&amp;gt;&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>After all&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ echo -n &lt;span style="color:#e6db74">&amp;#34;doSomething(this.dataset.id);&amp;#34;&lt;/span> | sha256
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>d2ecabb98b1bb7cc81cd75d43dcb7bac08ce31055339920976cb92aa2f5dd2f5
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Only one hash!&lt;/p>
&lt;p>But if you have that much control&amp;hellip; then why are you using inline JavaScript in the first place?&lt;/p>
&lt;h2 id="is-it-safe">Is it safe?&lt;/h2>
&lt;p>Is this safe?&lt;/p>
&lt;p>No. It&amp;rsquo;s called &lt;code>unsafe-*&lt;/code> for a reason. An attacker that controls input can theoretically take any of the hashed functions you&amp;rsquo;re including (like &lt;code>submitPayment&lt;/code>&amp;hellip;) and inject them in places they shouldn&amp;rsquo;t be. And heck, if you manage to find a SHA-256 hash collision? Well, then you have far more interesting things to do with &lt;em>that&lt;/em> then attacking some site that found themselves force to used &lt;code>unsafe-hashes&lt;/code>&amp;hellip;&lt;/p>
&lt;p>&lt;em>But&lt;/em> it&amp;rsquo;s better than &lt;code>unsafe-inline&lt;/code> without &lt;code>nonces&lt;/code> which allows arbitrary inline scripts. And unfortunately, there&amp;rsquo;s no way to actually use &lt;code>nonces&lt;/code> with inline scripts.&lt;/p>
&lt;p>And while a perfectly secure system would be the best case, it&amp;rsquo;s absolutely better to do as much as you can to secure a system rather than doing nothing waiting for the perfect solution to become possible.&lt;/p>
&lt;p>Onward!&lt;/p></description></item><item><title>AoC 2024 Day 8: Vectorinator</title><link>https://blog.jverkamp.com/2024/12/08/aoc-2024-day-8-vectorinator/</link><pubDate>Sun, 08 Dec 2024 00:00:03 +0000</pubDate><guid>https://blog.jverkamp.com/2024/12/08/aoc-2024-day-8-vectorinator/</guid><description>&lt;h2 id="source-day-8-resonant-collinearity">Source: &lt;a href="https://adventofcode.com/2024/day/8" target="_blank" rel="noopener">Day 8: Resonant Collinearity&lt;/a>&lt;/h2>
&lt;p>&lt;a href="https://github.com/jpverkamp/advent-of-code/blob/master/2024/src/day8.rs" target="_blank" rel="noopener">Full solution&lt;/a> for today (spoilers!).&lt;/p>
&lt;nav id="TableOfContents">
 &lt;ul>
 &lt;li>&lt;a href="#source-day-8-resonant-collinearity">Source: &lt;a href="https://adventofcode.com/2024/day/8">Day 8: Resonant Collinearity&lt;/a>&lt;/a>&lt;/li>
 &lt;li>&lt;a href="#part-1">Part 1&lt;/a>&lt;/li>
 &lt;li>&lt;a href="#part-2">Part 2&lt;/a>&lt;/li>
 &lt;li>&lt;a href="#benchmarks">Benchmarks&lt;/a>&lt;/li>
 &lt;/ul>
&lt;/nav>

&lt;h2 id="part-1">Part 1&lt;/h2>
&lt;blockquote>
&lt;p>Given a grid with either open tiles (&lt;code>.&lt;/code>) or towers (anything else), for each pair of towers, there is an antinode at each of the points that is 2x as far from one tower as the other. How many antinodes are there still within the bounds of the map?&lt;/p>&lt;/blockquote></description></item><item><title>AoC 2024 Day 6: Wanderinator</title><link>https://blog.jverkamp.com/2024/12/06/aoc-2024-day-6-wanderinator/</link><pubDate>Fri, 06 Dec 2024 00:00:03 +0000</pubDate><guid>https://blog.jverkamp.com/2024/12/06/aoc-2024-day-6-wanderinator/</guid><description>&lt;h2 id="source-day-6-guard-gallivant">Source: &lt;a href="https://adventofcode.com/2024/day/6" target="_blank" rel="noopener">Day 6: Guard Gallivant&lt;/a>&lt;/h2>
&lt;p>&lt;a href="https://github.com/jpverkamp/advent-of-code/blob/master/2024/src/day6.rs" target="_blank" rel="noopener">Full solution&lt;/a> for today (spoilers!).&lt;/p>
&lt;nav id="TableOfContents">
 &lt;ul>
 &lt;li>&lt;a href="#source-day-6-guard-gallivant">Source: &lt;a href="https://adventofcode.com/2024/day/6">Day 6: Guard Gallivant&lt;/a>&lt;/a>&lt;/li>
 &lt;li>&lt;a href="#part-1">Part 1&lt;/a>
 &lt;ul>
 &lt;li>&lt;a href="#direction">&lt;code>Direction&lt;/code>&lt;/a>&lt;/li>
 &lt;li>&lt;a href="#point">&lt;code>Point&lt;/code>&lt;/a>&lt;/li>
 &lt;li>&lt;a href="#actually-solving-the-problem">Actually solving the problem&lt;/a>&lt;/li>
 &lt;/ul>
 &lt;/li>
 &lt;li>&lt;a href="#part-2">Part 2&lt;/a>
 &lt;ul>
 &lt;li>&lt;a href="#optimization-1-only-checking-the-path">Optimization 1: Only checking the path&lt;/a>&lt;/li>
 &lt;li>&lt;a href="#optimization-2-rayon-parallelization">Optimization 2: Rayon parallelization&lt;/a>&lt;/li>
 &lt;li>&lt;a href="#optimization-3-avoiding-clone">Optimization 3: Avoiding clone&lt;/a>&lt;/li>
 &lt;li>&lt;a href="#optimization-4-no-hash">Optimization 4: No hash&lt;/a>&lt;/li>
 &lt;/ul>
 &lt;/li>
 &lt;li>&lt;a href="#benchmarks">Benchmarks&lt;/a>&lt;/li>
 &lt;/ul>
&lt;/nav>

&lt;h2 id="part-1">Part 1&lt;/h2>
&lt;blockquote>
&lt;p>You are given a grid of walls (&lt;code>#&lt;/code>), floors (&lt;code>.&lt;/code>), and a guard (&lt;code>^&lt;/code>, initially facing up/north). The guard walks forward until they run into a wall at which point they turn right. How many tiles does the guard reach before leaving the map.&lt;/p>&lt;/blockquote></description></item></channel></rss>