<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Procedural Content on jverkamp.com</title>
    <link>https://blog.jverkamp.com/programming/topics/procedural-content/</link>
    <description>Recent content in Procedural Content on jverkamp.com</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 19 Nov 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://blog.jverkamp.com/programming/topics/procedural-content/atom.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Worm Coral</title>
      <link>https://blog.jverkamp.com/2020/11/19/worm-coral/</link>
      <pubDate>Thu, 19 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2020/11/19/worm-coral/</guid>
      <description>&lt;p&gt;Today, I&amp;rsquo;m going to work on using [worms](https://blog.jverkamp.com/2020/11/17/p5js-worms/ to generate coral, similar to what I did way back when I was &lt;a href=&#34;https://blog.jverkamp.com/2015/01/01/generating-omnichromatic-images/&#34;&gt;generating omnichromatic images&lt;/a&gt;.&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&#34;https://blog.jverkamp.com/embeds/2020/worm-coral.png&#34;/&gt; 
&lt;/figure&gt;


&lt;p&gt;In a nutshell:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Spawn n worms&lt;/li&gt;
&lt;li&gt;On each tick:

&lt;ul&gt;
&lt;li&gt;Each worm tries to randomly move one direction&lt;/li&gt;
&lt;li&gt;If it cannot, increment that worm&amp;rsquo;s &lt;code&gt;stuck&lt;/code&gt; counter&lt;/li&gt;
&lt;li&gt;If it can, restart the &lt;code&gt;stuck&lt;/code&gt; counter&lt;/li&gt;
&lt;li&gt;If a worm is &lt;code&gt;stuck&lt;/code&gt; long enough, kill it off and spawn a new worm&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Eventually, we&amp;rsquo;ll fill the entire space with colors that end up looking a bit like coral. I&amp;rsquo;ll probably extend this later, since there are a lot of cool tweaks you can do with this general idea.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>p5js Boids</title>
      <link>https://blog.jverkamp.com/2020/11/18/p5js-boids/</link>
      <pubDate>Wed, 18 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2020/11/18/p5js-boids/</guid>
      <description>&lt;p&gt;Okay, sketch 2: &lt;a href=&#34;https://en.wikipedia.org/wiki/Boids&#34;&gt;Boids&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;The basic idea is to create a bunch of particles (the Boids in this case) and apply to them each a series of simple, limited rules that rely neither on communcation between the Boids nor a global controller and see what behaviors you can generate. Specifically, can you replicate the flocking behavior found in birds, since birds can obviously fly together without hitting one another and also without some lead bird giving orders.&lt;/p&gt;

&lt;p&gt;Something like this:&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&#34;https://blog.jverkamp.com/embeds/2020/boids.png&#34;/&gt; 
&lt;/figure&gt;


&lt;p&gt;For this case, there are three rules:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;seperation&lt;/strong&gt; - Fly away from any Boids that are too close to you (to avoid collision)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;alignment&lt;/strong&gt; - Align yourself to fly in the same direction as any Boids in your field of vision&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;cohesion&lt;/strong&gt; - Fly towards the center point of the Boids you can see&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>p5js Worms</title>
      <link>https://blog.jverkamp.com/2020/11/17/p5js-worms/</link>
      <pubDate>Tue, 17 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2020/11/17/p5js-worms/</guid>
      <description>&lt;p&gt;One thing that I&amp;rsquo;ve been hoping to get into a bit more is the idea of &lt;a href=&#34;https://en.wikipedia.org/wiki/Generative%20Art&#34;&gt;Generative Art&lt;/a&gt;. Essentially, use any of a wide variety of algorithms to generate art. To do that, and so that the art can be generated right in front of you in the browser, I&amp;rsquo;m going to use the &lt;a href=&#34;https://p5js.org/&#34;&gt;p5js&lt;/a&gt; library. It gives you a nice API of graphical primitives and takes a simple &lt;code&gt;setup&lt;/code&gt; and &lt;code&gt;draw&lt;/code&gt; function and does the rest.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>AoC 2017 Day 21: Fractal Expander</title>
      <link>https://blog.jverkamp.com/2017/12/21/aoc-2017-day-21-fractal-expander/</link>
      <pubDate>Thu, 21 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2017/12/21/aoc-2017-day-21-fractal-expander/</guid>
      <description>&lt;h3 id=&#34;source-fractal-art-http-adventofcode-com-2017-day-21&#34;&gt;Source: &lt;a href=&#34;http://adventofcode.com/2017/day/21&#34;&gt;Fractal Art&lt;/a&gt;&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Part 1:&lt;/strong&gt; Start with an input image made of &lt;code&gt;.&lt;/code&gt; and &lt;code&gt;#&lt;/code&gt; pixels. For &lt;code&gt;n&lt;/code&gt; iterations, break the image into blocks:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;If the current size is even, break the image into 2x2 chunks and replace each with a 3x3 chunk&lt;/li&gt;
&lt;li&gt;If the current size is odd, break the image into 3x3 chunks and replace each with a 4x4 chunk&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The replacement rules will be specified in the following format (example is a 3x3 -&amp;gt; 4x4 rule):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;.#./..#/### =&amp;gt; #..#/..../..../#..#
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In that example, replace this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;.#.
..#
###
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;With this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#..#
....
....
#..#
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Any rotation or reflection of a chunk can be used to match the input of a replacement rule.&lt;/p&gt;

&lt;p&gt;After &lt;code&gt;n = 18&lt;/code&gt; iterations, how many &lt;code&gt;#&lt;/code&gt; pixels are there?&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>AoC 2016 Day 17: Md5 Maze</title>
      <link>https://blog.jverkamp.com/2016/12/17/aoc-2016-day-17-md5-maze/</link>
      <pubDate>Sat, 17 Dec 2016 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2016/12/17/aoc-2016-day-17-md5-maze/</guid>
      <description>&lt;h3 id=&#34;source-two-steps-forward-http-adventofcode-com-2016-day-17&#34;&gt;Source: &lt;a href=&#34;http://adventofcode.com/2016/day/17&#34;&gt;Two Steps Forward&lt;/a&gt;&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Part 1:&lt;/strong&gt; Create a 4x4 grid of rooms with doors &lt;code&gt;U&lt;/code&gt;p, &lt;code&gt;D&lt;/code&gt;own, &lt;code&gt;L&lt;/code&gt;eft, and &lt;code&gt;R&lt;/code&gt;ight from each location. To determine if a door is currently open:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Calculate &lt;code&gt;MD5(salt + sequence)&lt;/code&gt; where sequence is a string containing any combination of &lt;code&gt;UDLR&lt;/code&gt; depending on how you got to this room&lt;/li&gt;
&lt;li&gt;The first four hex values represent the doors &lt;code&gt;U&lt;/code&gt;p, &lt;code&gt;D&lt;/code&gt;own, &lt;code&gt;L&lt;/code&gt;eft, and &lt;code&gt;R&lt;/code&gt;ight respectively: &lt;code&gt;bcdef&lt;/code&gt; means open; anything else is closed&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Find the shortest path from &lt;code&gt;(0, 0)&lt;/code&gt; to &lt;code&gt;(3, 3)&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>AoC 2016 Day 16: Dragon Data</title>
      <link>https://blog.jverkamp.com/2016/12/16/aoc-2016-day-16-dragon-data/</link>
      <pubDate>Fri, 16 Dec 2016 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2016/12/16/aoc-2016-day-16-dragon-data/</guid>
      <description>&lt;h3 id=&#34;source-dragon-checksum-http-adventofcode-com-2016-day-16&#34;&gt;Source: &lt;a href=&#34;http://adventofcode.com/2016/day/16&#34;&gt;Dragon Checksum&lt;/a&gt;&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Part 1:&lt;/strong&gt; Generate noise using a modified &lt;a href=&#34;https://en.wikipedia.org/wiki/dragon%20curve&#34;&gt;dragon curve&lt;/a&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Start with data &lt;code&gt;a&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Create a copy of the data &lt;code&gt;b&lt;/code&gt;, reverse and invert it (0 &amp;lt;-&amp;gt; 1)&lt;/li&gt;
&lt;li&gt;Create the string &lt;code&gt;a0b&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Repeat until you have enough data, truncate at the end if needed.&lt;/p&gt;

&lt;p&gt;From this string calculate a checksum as follows:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/xor&#34;&gt;xor&lt;/a&gt; each pair of bits, concatenate the results&lt;/li&gt;
&lt;li&gt;If the resulting string has an even length, repeat; if it&amp;rsquo;s odd, stop&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Calculate the checksum of a given initial state expanded to &lt;code&gt;272&lt;/code&gt; bits.&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>AoC 2016 Day 13: Noisy Puzzle</title>
      <link>https://blog.jverkamp.com/2016/12/13/aoc-2016-day-13-noisy-puzzle/</link>
      <pubDate>Tue, 13 Dec 2016 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2016/12/13/aoc-2016-day-13-noisy-puzzle/</guid>
      <description>&lt;h3 id=&#34;source-a-maze-of-twisty-little-cubicles-http-adventofcode-com-2016-day-13-cca&#34;&gt;Source: &lt;a href=&#34;http://adventofcode.com/2016/day/13&#34;&gt;A Maze of Twisty Little Cubicles&lt;/a&gt;&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:cca&#34;&gt;&lt;a href=&#34;#fn:cca&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Part 1:&lt;/strong&gt; Generate a &lt;a href=&#34;https://en.wikipedia.org/wiki/procedurally%20generated&#34;&gt;procedurally generated&lt;/a&gt; maze using the following equation:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;latex-inline&#34;&gt;x^2 &amp;#43; 3x &amp;#43; 2xy &amp;#43; y &amp;#43; y^2 &amp;#43; c&lt;/span&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; are the coordinates of a point and &lt;code&gt;c&lt;/code&gt; is a constant.&lt;/p&gt;

&lt;p&gt;Count the number of bits for each point. Even is open spaces, odd is walls.&lt;/p&gt;

&lt;p&gt;What is the shortest route from &lt;code&gt;(0, 0)&lt;/code&gt; to &lt;code&gt;(31, 39)&lt;/code&gt;?&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>Let it snow!</title>
      <link>https://blog.jverkamp.com/2015/01/09/let-it-snow/</link>
      <pubDate>Fri, 09 Jan 2015 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2015/01/09/let-it-snow/</guid>
      <description>&lt;p&gt;♫ Oh the weather outside is frightful&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;&amp;hellip; ♫&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&#34;https://blog.jverkamp.com/embeds/2015/snowflake.gif&#34;/&gt; 
&lt;/figure&gt;</description>
    </item>
    
    <item>
      <title>Invader Fractals</title>
      <link>https://blog.jverkamp.com/2014/09/17/invader-fractals/</link>
      <pubDate>Wed, 17 Sep 2014 09:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2014/09/17/invader-fractals/</guid>
      <description>&lt;p&gt;First we had &lt;a href=&#34;https://blog.jverkamp.com/2014/09/14/procedural-invaders/&#34;&gt;Procedural Invaders&lt;/a&gt;. Then we used them fill up space with &lt;a href=&#34;https://blog.jverkamp.com/2014/09/16/fractal-invaders/&#34;&gt;Fractal Invaders&lt;/a&gt;. But we&amp;rsquo;re not &lt;em&gt;quite&lt;/em&gt; done yet! This time, let&amp;rsquo;s mix things up a bit and make Invader Fractals.&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&#34;https://blog.jverkamp.com/embeds/2014/invader-fractal-3.png&#34;/&gt; 
&lt;/figure&gt;</description>
    </item>
    
    <item>
      <title>Fractal Invaders</title>
      <link>https://blog.jverkamp.com/2014/09/16/fractal-invaders/</link>
      <pubDate>Tue, 16 Sep 2014 09:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2014/09/16/fractal-invaders/</guid>
      <description>&lt;p&gt;Today&amp;rsquo;s post is a follow up to Sunday&amp;rsquo;s post &lt;a href=&#34;https://blog.jverkamp.com/2014/09/14/procedural-invaders/&#34;&gt;Procedural Invaders&lt;/a&gt;. This time around, we&amp;rsquo;re going to work through two different space filling algorithms in order to eventually generate something like this:&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&#34;https://blog.jverkamp.com/embeds/2014/fractal-invaders-100x100.png&#34;/&gt; 
&lt;/figure&gt;</description>
    </item>
    
    <item>
      <title>Procedural Invaders</title>
      <link>https://blog.jverkamp.com/2014/09/14/procedural-invaders/</link>
      <pubDate>Sun, 14 Sep 2014 09:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2014/09/14/procedural-invaders/</guid>
      <description>&lt;p&gt;Today&amp;rsquo;s post comes from a long line of &amp;lsquo;inspired by posts&amp;rsquo; all pretty much leading back (so far as I can tell) to this post by j.tarbell: &lt;a href=&#34;http://www.complexification.net/gallery/machines/invaderfractal/&#34;&gt;invader.procedural&lt;/a&gt; from 2003.&lt;/p&gt;

&lt;p&gt;The basic idea is that we want to generate &amp;lsquo;invaders&amp;rsquo; in the style of &lt;a href=&#34;https://en.wikipedia.org/wiki/space%20invaders&#34;&gt;space invaders&lt;/a&gt;. Except we don&amp;rsquo;t want 10 or 20, we want tens of thousands. So how do we do it? Well, take a look at this:&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&#34;https://blog.jverkamp.com/embeds/2014/procedural-invader-big.png&#34;/&gt; 
&lt;/figure&gt;</description>
    </item>
    
    <item>
      <title>Langton&#39;s ant</title>
      <link>https://blog.jverkamp.com/2014/08/07/langtons-ant/</link>
      <pubDate>Thu, 07 Aug 2014 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2014/08/07/langtons-ant/</guid>
      <description>&lt;p&gt;Here&amp;rsquo;s another post from /r/DailyProgrammer: &lt;a href=&#34;http://www.reddit.com/r/dailyprogrammer/comments/2c4ka3/7302014_challenge_173_intermediate_advanced/&#34;&gt;Advanced Langton&amp;rsquo;s Ant&lt;/a&gt;. I&amp;rsquo;m a bit behind the times (see tomorrow&amp;rsquo;s post), but it&amp;rsquo;s still an interesting enough exercise, so let&amp;rsquo;s go for it!&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&#34;https://blog.jverkamp.com/embeds/2014/LR.gif&#34;/&gt; 
&lt;/figure&gt;</description>
    </item>
    
    <item>
      <title>Brownian trees</title>
      <link>https://blog.jverkamp.com/2014/03/11/brownian-trees/</link>
      <pubDate>Tue, 11 Mar 2014 14:00:06 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2014/03/11/brownian-trees/</guid>
      <description>&lt;p&gt;Pretty pretty picture time&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;:&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&#34;https://blog.jverkamp.com/embeds/2014/brownian-tree.png&#34;/&gt; 
&lt;/figure&gt;</description>
    </item>
    
    <item>
      <title>Twitter puddle</title>
      <link>https://blog.jverkamp.com/2013/11/30/twitter-puddle/</link>
      <pubDate>Sat, 30 Nov 2013 04:55:28 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2013/11/30/twitter-puddle/</guid>
      <description>&lt;p&gt;This one has been sitting in my backlog for a while and its been a while since I&amp;rsquo;ve gotten to write a programming post&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;, but now seems as good time as ever: &lt;a href=&#34;http://programmingpraxis.com/2013/11/15/twitter-puddle/&#34;&gt;Twitter puzzle&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>