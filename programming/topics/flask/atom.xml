<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Flask on jverkamp.com</title><link>https://blog.jverkamp.com/programming/topics/flask/</link><description>Recent content in Flask on jverkamp.com</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://blog.jverkamp.com/programming/topics/flask/atom.xml" rel="self" type="application/rss+xml"/><item><title>A simple Flask Logging/Echo Server</title><link>https://blog.jverkamp.com/2022/02/01/a-simple-flask-logging/echo-server/</link><pubDate>Tue, 01 Feb 2022 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2022/02/01/a-simple-flask-logging/echo-server/</guid><description>&lt;p>A very simple server that can be used to catch all incoming HTTP requests and just echo them back + log their contents. I needed it to test what a webhook actually returned to me, but I&amp;rsquo;m sure that there are a number of other things it could be dropped in for.&lt;/p>
&lt;p>It will take in any GET/POST/PATCH/DELETE HTTP request with any path/params/data (optionally JSON), pack that data into a JSON object, and both log that to a file (with a UUID1 based name) plus return this object to the request.&lt;/p>
&lt;p>Warning: Off hand, there is already a potential security problem in this regarding DoS. It will happily try to log anything you throw at it, no matter how big and will store those in memory first. So long running requests / large requests / many requests will quickly eat up your RAM/disk. So&amp;hellip; don&amp;rsquo;t leave this running unattended? At least not without additional configuration.&lt;/p>
&lt;p>That&amp;rsquo;s it! Hope it&amp;rsquo;s helpful.&lt;/p></description></item><item><title>Directly monitoring Sidekiq in Redis</title><link>https://blog.jverkamp.com/2020/07/14/directly-monitoring-sidekiq-in-redis/</link><pubDate>Tue, 14 Jul 2020 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2020/07/14/directly-monitoring-sidekiq-in-redis/</guid><description>&lt;p>Another thing that came up recently: we have many (many) &lt;a href="https://github.com/mperham/sidekiq">sidekiq&lt;/a> queues. Each has their own admin interface, but sometimes you just want all of the information in one place. Of course, you could bookmark all of the pages. Or make a single page with a lot of frames (remember &lt;a href="https://en.wikipedia.org/wiki/HTML%20frames">HTML frames&lt;/a>?). Or use their API. But where&amp;rsquo;s the fun in that? Instead, let&amp;rsquo;s dig straight into the redis backend and see what we can see!&lt;/p></description></item><item><title>Observation Server</title><link>https://blog.jverkamp.com/2020/06/10/observation-server/</link><pubDate>Wed, 10 Jun 2020 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2020/06/10/observation-server/</guid><description>&lt;p>For a number of years now, I&amp;rsquo;ve been writing down my &amp;lsquo;observations&amp;rsquo;. Essentially, it&amp;rsquo;s a semi-structured set of text files that I keep in Dropbox. One for each day, in a folder by month. I record interesting people I see, things I did worth doing, and things my children did which were adorable.&lt;/p>
&lt;p>After a while, I started wanting to look back, so first, I wrote a relatively simple script that would go back through my archives and send me everything I did 1/2/3/4/etc years ago. That worked well enough, but it ended up generating a lot of emails to go through some days. So the second generation is a server that can format those pages and display them as a nice webpage.&lt;/p>
&lt;p>The most interesting part perhaps was dealing with the tarballs that I keep the archives in (they&amp;rsquo;re plain text, so they compress very well). I wanted to keep them compressed, so I had to decompress them in memory on the fly.&lt;/p></description></item><item><title>Audiobooks to Podcasts</title><link>https://blog.jverkamp.com/2016/02/26/audiobooks-to-podcasts/</link><pubDate>Fri, 26 Feb 2016 00:05:00 +0000</pubDate><guid>https://blog.jverkamp.com/2016/02/26/audiobooks-to-podcasts/</guid><description>&lt;p>I&amp;rsquo;ve recently started to listen to audiobooks again (The Aeronaut&amp;rsquo;s Windlass). If you buy books through Audible or some other setup that has their own app, it&amp;rsquo;s a straight forward enough process. On the other hand, if you have them on CD and want to play them on a mobile device&amp;hellip; It&amp;rsquo;s a little more interesting.&lt;/p>
&lt;p>I tried a few different apps that purport to do exactly what I wanted: import an audiobook as a folder full of MP3s and play them, but none that quite meet what I wanted. Since I also listen to a lot of podcasts and have more than one podcast app that I really like (I&amp;rsquo;ve used and liked both &lt;a href="http://www.downcastapp.com/">Downcast&lt;/a> and &lt;a href="http://www.shiftyjelly.com/pocketcasts">Pocket Casts&lt;/a>), I decided to see if I couldn&amp;rsquo;t use one of those as an audiobook player.&lt;/p></description></item><item><title>Configuring Websockets behind an AWS ELB</title><link>https://blog.jverkamp.com/2015/07/20/configuring-websockets-behind-an-aws-elb/</link><pubDate>Mon, 20 Jul 2015 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2015/07/20/configuring-websockets-behind-an-aws-elb/</guid><description>&lt;p>Recently at work, we were trying to get an application that uses &lt;a href="https://en.wikipedia.org/wiki/websockets">websockets&lt;/a> working on an &lt;a href="https://aws.amazon.com/">AWS&lt;/a> instance behind an &lt;a href="https://aws.amazon.com/elasticloadbalancing/">ELB (load balancer)&lt;/a> and &lt;a href="http://nginx.org/">nginx&lt;/a> on the instance.&lt;/p>
&lt;p>If you&amp;rsquo;re either not using a secure connection or handling the cryptography on the instance (either in nginx or Flask), it works right out of the box. But if you want the ELB to handle TLS termination it doesn&amp;rsquo;t work nearly as well&amp;hellip; Luckily, after a bit of fiddling, I got it working.&lt;/p>
&lt;p>&lt;strong>Update 2018-05-31:&lt;/strong> A much easier solution, [https://aws.amazon.com/blogs/aws/new-aws-application-load-balancer/](just use an ALB):&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>WebSocket&lt;/strong> allows you to set up long-standing TCP connections between your client and your server. This is a more efficient alternative to the old-school method which involved HTTP connections that were held open with a “heartbeat” for very long periods of time. WebSocket is great for mobile devices and can be used to deliver stock quotes, sports scores, and other dynamic data while minimizing power consumption. ALB provides native support for WebSocket via the &lt;code>ws://&lt;/code> and &lt;code>wss://&lt;/code> protocols.&lt;/p>
&lt;/blockquote></description></item><item><title>Performance problems with Flask and Docker</title><link>https://blog.jverkamp.com/2015/04/03/performance-problems-with-flask-and-docker/</link><pubDate>Fri, 03 Apr 2015 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2015/04/03/performance-problems-with-flask-and-docker/</guid><description>&lt;p>I had an interesting problem recently on a project I was working on. It&amp;rsquo;s a simple &lt;a href="http://flask.pocoo.org/">Flask&lt;/a>-based webapp, designed to be deployed to &lt;a href="https://aws.amazon.com/">AWS&lt;/a> using &lt;a href="https://www.docker.com/">Docker&lt;/a>. The application worked just fine when I was running it locally, but as soon as I pushed the docker container&amp;hellip;&lt;/p>
&lt;p>Latency spikes. Bad enough that the application was failing AWS&amp;rsquo;s healthy host checks, cycling in and out of existence&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>:&lt;/p>
&lt;figure>&lt;img src="https://blog.jverkamp.com/embeds/2015/health-check.png"/>
&lt;/figure></description></item></channel></rss>