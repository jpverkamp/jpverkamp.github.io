<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Visualization on jverkamp.com</title><link>https://blog.jverkamp.com/programming/topics/visualization/</link><description>Recent content in Visualization on jverkamp.com</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://blog.jverkamp.com/programming/topics/visualization/atom.xml" rel="self" type="application/rss+xml"/><item><title>AoC 2017 Day 21: Fractal Expander</title><link>https://blog.jverkamp.com/2017/12/21/aoc-2017-day-21-fractal-expander/</link><pubDate>Thu, 21 Dec 2017 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2017/12/21/aoc-2017-day-21-fractal-expander/</guid><description>&lt;h3 id="source-fractal-arthttpadventofcodecom2017day21">Source: &lt;a href="http://adventofcode.com/2017/day/21">Fractal Art&lt;/a>&lt;/h3>
&lt;blockquote>
&lt;p>&lt;strong>Part 1:&lt;/strong> Start with an input image made of &lt;code>.&lt;/code> and &lt;code>#&lt;/code> pixels. For &lt;code>n&lt;/code> iterations, break the image into blocks:&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;ul>
&lt;li>If the current size is even, break the image into 2x2 chunks and replace each with a 3x3 chunk&lt;/li>
&lt;li>If the current size is odd, break the image into 3x3 chunks and replace each with a 4x4 chunk&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;blockquote>
&lt;p>The replacement rules will be specified in the following format (example is a 3x3 -&amp;gt; 4x4 rule):&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;pre tabindex="0">&lt;code>&lt;/code>&lt;/pre>&lt;/blockquote>
&lt;p>.#./..#/### =&amp;gt; #..#/&amp;hellip;./&amp;hellip;./#..#&lt;/p>
&lt;pre tabindex="0">&lt;code>
&amp;gt; In that example, replace this:
&amp;gt; ```
.#.
..#
###
&lt;/code>&lt;/pre>&lt;blockquote>
&lt;p>With this:&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;pre tabindex="0">&lt;code>&lt;/code>&lt;/pre>&lt;/blockquote>
&lt;p>#..#
&amp;hellip;.
&amp;hellip;.
#..#&lt;/p></description></item><item><title>AoC 2017 Day 20: Miniature Universe Simulator</title><link>https://blog.jverkamp.com/2017/12/20/aoc-2017-day-20-miniature-universe-simulator/</link><pubDate>Wed, 20 Dec 2017 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2017/12/20/aoc-2017-day-20-miniature-universe-simulator/</guid><description>&lt;h3 id="source-particle-swarmhttpadventofcodecom2017day20">Source: &lt;a href="http://adventofcode.com/2017/day/20">Particle Swarm&lt;/a>&lt;/h3>
&lt;blockquote>
&lt;p>&lt;strong>Part 1:&lt;/strong> Given the initial position, velocity, and acceleration of a large number of particles, which particle will stay the closet to the origin as the simulation runs to infinity?&lt;/p>
&lt;/blockquote></description></item><item><title>AoC 2017 Day 18: Duetvm</title><link>https://blog.jverkamp.com/2017/12/18/aoc-2017-day-18-duetvm/</link><pubDate>Mon, 18 Dec 2017 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2017/12/18/aoc-2017-day-18-duetvm/</guid><description>&lt;h3 id="source-duethttpadventofcodecom2017day18">Source: &lt;a href="http://adventofcode.com/2017/day/18">Duet&lt;/a>&lt;/h3>
&lt;blockquote>
&lt;p>&lt;strong>Part 1:&lt;/strong> Create a virtual machine with the following instruction set:&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;ul>
&lt;li>&lt;code>snd X&lt;/code> plays a sound with a frequency equal to the value of &lt;code>X&lt;/code>&lt;/li>
&lt;li>&lt;code>set X Y&lt;/code> sets register &lt;code>X&lt;/code> to &lt;code>Y&lt;/code>&lt;/li>
&lt;li>&lt;code>add X Y&lt;/code> set register &lt;code>X&lt;/code> to &lt;code>X + Y&lt;/code>&lt;/li>
&lt;li>&lt;code>mul X Y&lt;/code> sets register &lt;code>X&lt;/code> to &lt;code>X * Y&lt;/code>&lt;/li>
&lt;li>&lt;code>mod X Y&lt;/code> sets register &lt;code>X&lt;/code> to &lt;code>X mod Y&lt;/code>&lt;/li>
&lt;li>&lt;code>rcv X&lt;/code> recovers the frequency of the last sound played, if &lt;code>X&lt;/code> is not zero&lt;/li>
&lt;li>&lt;code>jgz X Y&lt;/code> jumps with an offset of the value of &lt;code>Y&lt;/code>, iff &lt;code>X&lt;/code> is greater than zero&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;blockquote>
&lt;p>In most cases, &lt;code>X&lt;/code> and &lt;code>Y&lt;/code> can be either an integer value or a register.&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>What is the value recovered by &lt;code>rcv&lt;/code> the first time &lt;code>X&lt;/code> is non-zero?&lt;/p>
&lt;/blockquote></description></item><item><title>AoC 2017 Day 14: Knot Hash Gridinator</title><link>https://blog.jverkamp.com/2017/12/14/aoc-2017-day-14-knot-hash-gridinator/</link><pubDate>Thu, 14 Dec 2017 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2017/12/14/aoc-2017-day-14-knot-hash-gridinator/</guid><description>&lt;h3 id="source-disk-defragmentationhttpadventofcodecom2017day14">Source: &lt;a href="http://adventofcode.com/2017/day/14">Disk Defragmentation&lt;/a>&lt;/h3>
&lt;blockquote>
&lt;p>&lt;strong>Part 1:&lt;/strong> Create a 128x128 grid. Generate each row by taking the &lt;a href="https://blog.jverkamp.com/2017/12/10/aoc-2017-day-10-knot-cool/">knot hash&lt;/a> of &lt;code>salt-{index}&lt;/code>. The bits of the hash represent if a tile in the grid is &lt;code>free&lt;/code> (&lt;code>0&lt;/code>) or &lt;code>used&lt;/code> (&lt;code>1&lt;/code>).&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>Given your salt as input, how many squares are &lt;code>used&lt;/code>?&lt;/p>
&lt;/blockquote></description></item><item><title>AoC 2017 Day 12: Gridlock</title><link>https://blog.jverkamp.com/2017/12/12/aoc-2017-day-12-gridlock/</link><pubDate>Tue, 12 Dec 2017 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2017/12/12/aoc-2017-day-12-gridlock/</guid><description>&lt;h3 id="source-digital-plumberhttpadventofcodecom2017day12">Source: &lt;a href="http://adventofcode.com/2017/day/12">Digital Plumber&lt;/a>&lt;/h3>
&lt;blockquote>
&lt;p>&lt;strong>Part 1:&lt;/strong> A network of nodes is defined by a list of lines formatted as such:&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;pre tabindex="0">&lt;code>&lt;/code>&lt;/pre>&lt;/blockquote>
&lt;p>2 &amp;lt;-&amp;gt; 0, 3, 4&lt;/p></description></item></channel></rss>