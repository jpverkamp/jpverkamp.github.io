<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Visualization on jverkamp.com</title><link>https://blog.jverkamp.com/programming/topics/visualization/</link><description>Recent content in Visualization on jverkamp.com</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://blog.jverkamp.com/programming/topics/visualization/atom.xml" rel="self" type="application/rss+xml"/><item><title>AoC 2022 Day 24: Blizzinator</title><link>https://blog.jverkamp.com/2022/12/24/aoc-2022-day-24-blizzinator/</link><pubDate>Sat, 24 Dec 2022 00:00:03 +0000</pubDate><guid>https://blog.jverkamp.com/2022/12/24/aoc-2022-day-24-blizzinator/</guid><description>&lt;h2 id="source-blizzard-basinhttpsadventofcodecom2022day24">Source: &lt;a href="https://adventofcode.com/2022/day/24" target="_blank" rel="noopener">Blizzard Basin&lt;/a>&lt;/h2>
&lt;h2 id="part-1">Part 1&lt;/h2>
&lt;blockquote>
&lt;p>Given a map with a series of moving walls (that wrap when the hit the edges of the simulation), calculate the fastest route from the top left to the bottom right.&lt;/p>
&lt;/blockquote></description></item><item><title>AoC 2022 Day 23: Elf Scattinator</title><link>https://blog.jverkamp.com/2022/12/23/aoc-2022-day-23-elf-scattinator/</link><pubDate>Fri, 23 Dec 2022 00:00:03 +0000</pubDate><guid>https://blog.jverkamp.com/2022/12/23/aoc-2022-day-23-elf-scattinator/</guid><description>&lt;h2 id="source-unstable-diffusionhttpsadventofcodecom2022day23">Source: &lt;a href="https://adventofcode.com/2022/day/23" target="_blank" rel="noopener">Unstable Diffusion&lt;/a>&lt;/h2>
&lt;h2 id="part-1">Part 1&lt;/h2>
&lt;blockquote>
&lt;p>Implement a &lt;a href="https://en.wikipedia.org/wiki/cellular%20automaton">cellular automaton&lt;/a> with the following rules:&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>If you have no neighbors, don&amp;rsquo;t move (&lt;em>important, I forgot this one for a while&lt;/em>)&lt;/li>
&lt;li>Otherwise:
&lt;ul>
&lt;li>Calculate a potential move:
&lt;ul>
&lt;li>If you have no neighbors to the north, move north&lt;/li>
&lt;li>If not, check likewise for south, then west, than east&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>If no other agent is moving to the same space, move to your potential move&lt;/li>
&lt;li>Otherwise, don&amp;rsquo;t move&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>On each frame, rotate the order the directions are checked in (&lt;code>NSWE&lt;/code>, &lt;code>SWEN&lt;/code>, &lt;code>WENS&lt;/code>, &lt;code>ENSW&lt;/code>, &lt;code>NSWE&lt;/code>, &amp;hellip;)&lt;/li>
&lt;/ul></description></item><item><title>AoC 2022 Day 22: Wonderator</title><link>https://blog.jverkamp.com/2022/12/22/aoc-2022-day-22-wonderator/</link><pubDate>Thu, 22 Dec 2022 00:00:03 +0000</pubDate><guid>https://blog.jverkamp.com/2022/12/22/aoc-2022-day-22-wonderator/</guid><description>&lt;h2 id="source-monkey-maphttpsadventofcodecom2022day22">Source: &lt;a href="https://adventofcode.com/2022/day/22" target="_blank" rel="noopener">Monkey Map&lt;/a>&lt;/h2>
&lt;h2 id="part-1">Part 1&lt;/h2>
&lt;blockquote>
&lt;p>Given a map and a series of instructions formatted as distance + turn (&lt;code>L&lt;/code> or &lt;code>R&lt;/code>), find the final position. Any time you would walk off the edge of the map, wrap to the opposite edge.&lt;/p>
&lt;/blockquote></description></item><item><title>AoC 2022 Day 21: Yellinator</title><link>https://blog.jverkamp.com/2022/12/21/aoc-2022-day-21-yellinator/</link><pubDate>Wed, 21 Dec 2022 00:00:03 +0000</pubDate><guid>https://blog.jverkamp.com/2022/12/21/aoc-2022-day-21-yellinator/</guid><description>&lt;h2 id="source-monkey-mathhttpsadventofcodecom2022day21">Source: &lt;a href="https://adventofcode.com/2022/day/21" target="_blank" rel="noopener">Monkey Math&lt;/a>&lt;/h2>
&lt;h2 id="part-1">Part 1&lt;/h2>
&lt;blockquote>
&lt;p>Given a series of equations of either the form &lt;code>dbpl: 5&lt;/code> or &lt;code>cczh: sllz + lgvd&lt;/code>, determine what the value of the node labeled &lt;code>root&lt;/code> is.&lt;/p>
&lt;/blockquote></description></item><item><title>AoC 2022 Day 14: Sandinator</title><link>https://blog.jverkamp.com/2022/12/14/aoc-2022-day-14-sandinator/</link><pubDate>Wed, 14 Dec 2022 00:00:03 +0000</pubDate><guid>https://blog.jverkamp.com/2022/12/14/aoc-2022-day-14-sandinator/</guid><description>&lt;h2 id="source-regolith-reservoirhttpsadventofcodecom2022day14">Source: &lt;a href="https://adventofcode.com/2022/day/14" target="_blank" rel="noopener">Regolith Reservoir&lt;/a>&lt;/h2>
&lt;h2 id="part-1">Part 1&lt;/h2>
&lt;blockquote>
&lt;p>Given a series of walls as input, run a &lt;a href="https://en.wikipedia.org/wiki/falling%20sand">falling sand&lt;/a> simulation until any new sand falls of the map. Count how many grains of sand we end up with.&lt;/p>
&lt;/blockquote></description></item><item><title>AoC 2022 Day 8: Treetopinator</title><link>https://blog.jverkamp.com/2022/12/08/aoc-2022-day-8-treetopinator/</link><pubDate>Thu, 08 Dec 2022 00:00:03 +0000</pubDate><guid>https://blog.jverkamp.com/2022/12/08/aoc-2022-day-8-treetopinator/</guid><description>&lt;h2 id="source-treetop-tree-househttpsadventofcodecom2022day8">Source: &lt;a href="https://adventofcode.com/2022/day/8" target="_blank" rel="noopener">Treetop Tree House&lt;/a>&lt;/h2>
&lt;h2 id="part-1">Part 1&lt;/h2>
&lt;blockquote>
&lt;p>Given a grid of numbers, count how many of these numbers have a direct path in any cardinal direction to the edge of the grid.&lt;/p>
&lt;/blockquote></description></item><item><title>AoC 2017 Day 21: Fractal Expander</title><link>https://blog.jverkamp.com/2017/12/21/aoc-2017-day-21-fractal-expander/</link><pubDate>Thu, 21 Dec 2017 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2017/12/21/aoc-2017-day-21-fractal-expander/</guid><description>&lt;h3 id="source-fractal-arthttpadventofcodecom2017day21">Source: &lt;a href="http://adventofcode.com/2017/day/21" target="_blank" rel="noopener">Fractal Art&lt;/a>&lt;/h3>
&lt;blockquote>
&lt;p>&lt;strong>Part 1:&lt;/strong> Start with an input image made of &lt;code>.&lt;/code> and &lt;code>#&lt;/code> pixels. For &lt;code>n&lt;/code> iterations, break the image into blocks:&lt;/p>
&lt;ul>
&lt;li>If the current size is even, break the image into 2x2 chunks and replace each with a 3x3 chunk&lt;/li>
&lt;li>If the current size is odd, break the image into 3x3 chunks and replace each with a 4x4 chunk&lt;/li>
&lt;/ul>
&lt;p>The replacement rules will be specified in the following format (example is a 3x3 -&amp;gt; 4x4 rule):&lt;/p>
&lt;pre tabindex="0">&lt;code>.#./..#/### =&amp;gt; #..#/..../..../#..#
&lt;/code>&lt;/pre>&lt;p>In that example, replace this:&lt;/p>
&lt;pre tabindex="0">&lt;code>.#.
..#
###
&lt;/code>&lt;/pre>&lt;p>With this:&lt;/p>
&lt;pre tabindex="0">&lt;code>#..#
....
....
#..#
&lt;/code>&lt;/pre>&lt;p>Any rotation or reflection of a chunk can be used to match the input of a replacement rule.&lt;/p>
&lt;p>After &lt;code>n = 18&lt;/code> iterations, how many &lt;code>#&lt;/code> pixels are there?&lt;/p>
&lt;/blockquote></description></item><item><title>AoC 2017 Day 20: Miniature Universe Simulator</title><link>https://blog.jverkamp.com/2017/12/20/aoc-2017-day-20-miniature-universe-simulator/</link><pubDate>Wed, 20 Dec 2017 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2017/12/20/aoc-2017-day-20-miniature-universe-simulator/</guid><description>&lt;h3 id="source-particle-swarmhttpadventofcodecom2017day20">Source: &lt;a href="http://adventofcode.com/2017/day/20" target="_blank" rel="noopener">Particle Swarm&lt;/a>&lt;/h3>
&lt;blockquote>
&lt;p>&lt;strong>Part 1:&lt;/strong> Given the initial position, velocity, and acceleration of a large number of particles, which particle will stay the closet to the origin as the simulation runs to infinity?&lt;/p>
&lt;/blockquote></description></item><item><title>AoC 2017 Day 18: Duetvm</title><link>https://blog.jverkamp.com/2017/12/18/aoc-2017-day-18-duetvm/</link><pubDate>Mon, 18 Dec 2017 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2017/12/18/aoc-2017-day-18-duetvm/</guid><description>&lt;h3 id="source-duethttpadventofcodecom2017day18">Source: &lt;a href="http://adventofcode.com/2017/day/18" target="_blank" rel="noopener">Duet&lt;/a>&lt;/h3>
&lt;blockquote>
&lt;p>&lt;strong>Part 1:&lt;/strong> Create a virtual machine with the following instruction set:&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;ul>
&lt;li>&lt;code>snd X&lt;/code> plays a sound with a frequency equal to the value of &lt;code>X&lt;/code>&lt;/li>
&lt;li>&lt;code>set X Y&lt;/code> sets register &lt;code>X&lt;/code> to &lt;code>Y&lt;/code>&lt;/li>
&lt;li>&lt;code>add X Y&lt;/code> set register &lt;code>X&lt;/code> to &lt;code>X + Y&lt;/code>&lt;/li>
&lt;li>&lt;code>mul X Y&lt;/code> sets register &lt;code>X&lt;/code> to &lt;code>X * Y&lt;/code>&lt;/li>
&lt;li>&lt;code>mod X Y&lt;/code> sets register &lt;code>X&lt;/code> to &lt;code>X mod Y&lt;/code>&lt;/li>
&lt;li>&lt;code>rcv X&lt;/code> recovers the frequency of the last sound played, if &lt;code>X&lt;/code> is not zero&lt;/li>
&lt;li>&lt;code>jgz X Y&lt;/code> jumps with an offset of the value of &lt;code>Y&lt;/code>, iff &lt;code>X&lt;/code> is greater than zero&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;blockquote>
&lt;p>In most cases, &lt;code>X&lt;/code> and &lt;code>Y&lt;/code> can be either an integer value or a register.&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>What is the value recovered by &lt;code>rcv&lt;/code> the first time &lt;code>X&lt;/code> is non-zero?&lt;/p>
&lt;/blockquote></description></item><item><title>AoC 2017 Day 14: Knot Hash Gridinator</title><link>https://blog.jverkamp.com/2017/12/14/aoc-2017-day-14-knot-hash-gridinator/</link><pubDate>Thu, 14 Dec 2017 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2017/12/14/aoc-2017-day-14-knot-hash-gridinator/</guid><description>&lt;h3 id="source-disk-defragmentationhttpadventofcodecom2017day14">Source: &lt;a href="http://adventofcode.com/2017/day/14" target="_blank" rel="noopener">Disk Defragmentation&lt;/a>&lt;/h3>
&lt;blockquote>
&lt;p>&lt;strong>Part 1:&lt;/strong> Create a 128x128 grid. Generate each row by taking the &lt;a href="https://blog.jverkamp.com/2017/12/10/aoc-2017-day-10-knot-cool/">knot hash&lt;/a> of &lt;code>salt-{index}&lt;/code>. The bits of the hash represent if a tile in the grid is &lt;code>free&lt;/code> (&lt;code>0&lt;/code>) or &lt;code>used&lt;/code> (&lt;code>1&lt;/code>).&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>Given your salt as input, how many squares are &lt;code>used&lt;/code>?&lt;/p>
&lt;/blockquote></description></item><item><title>AoC 2017 Day 12: Gridlock</title><link>https://blog.jverkamp.com/2017/12/12/aoc-2017-day-12-gridlock/</link><pubDate>Tue, 12 Dec 2017 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2017/12/12/aoc-2017-day-12-gridlock/</guid><description>&lt;h3 id="source-digital-plumberhttpadventofcodecom2017day12">Source: &lt;a href="http://adventofcode.com/2017/day/12" target="_blank" rel="noopener">Digital Plumber&lt;/a>&lt;/h3>
&lt;blockquote>
&lt;p>&lt;strong>Part 1:&lt;/strong> A network of nodes is defined by a list of lines formatted as such:&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;pre tabindex="0">&lt;code>&lt;/code>&lt;/pre>&lt;/blockquote>
&lt;p>2 &amp;lt;-&amp;gt; 0, 3, 4&lt;/p></description></item><item><title>Visualizing the Monkey Grid</title><link>https://blog.jverkamp.com/2013/08/30/visualizing-the-monkey-grid/</link><pubDate>Fri, 30 Aug 2013 14:00:37 +0000</pubDate><guid>https://blog.jverkamp.com/2013/08/30/visualizing-the-monkey-grid/</guid><description>&lt;p>I&amp;rsquo;m a bit behind the times, but &lt;a href="http://programmingpraxis.com/2013/08/16/monkey-grid-puzzle/">this post&lt;/a> from Programming Praxis intrigued me enough that I kept it in my todo list for rather a while. So let&amp;rsquo;s get around to it.&lt;/p>
&lt;p>I&amp;rsquo;ll just copy the description straight from the Programming Praxis website (although there are at least two previous version:&lt;a href="http://stackoverflow.com/questions/9762953/planar-grid-puzzle">[1]&lt;/a>&lt;a href="http://stackoverflow.com/questions/18133918/improve-the-solution-to-monkey-grid-puzzle">[2]&lt;/a>):&lt;/p>
&lt;blockquote>
&lt;p>There is a monkey which can walk around on a planar grid. The monkey can move one space at a time left, right, up or down. That is, from (x, y) the monkey can go to (x+1, y), (x-1, y), (x, y+1), and (x, y-1). Points where the sum of the digits of the absolute value of the x coordinate plus the sum of the digits of the absolute value of the y coordinate are lesser than or equal to 19 are accessible to the monkey. For example, the point (59, 79) is inaccessible because 5 + 9 + 7 + 9 = 30, which is greater than 19. Another example: the point (-5, -7) is accessible because abs(-5) + abs(-7) = 5 + 7 = 12, which is less than 19. How many points can the monkey access if it starts at (0, 0), including (0, 0) itself?&lt;/p>
&lt;/blockquote></description></item></channel></rss>