<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Mathematics on jverkamp.com</title>
    <link>https://blog.jverkamp.com/programming/topics/mathematics/</link>
    <description>Recent content in Mathematics on jverkamp.com</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language><atom:link href="https://blog.jverkamp.com/programming/topics/mathematics/atom.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Tupper&#39;s self-referential formula</title>
      <link>https://blog.jverkamp.com/2015/05/07/tuppers-self-referential-formula/</link>
      <pubDate>Thu, 07 May 2015 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2015/05/07/tuppers-self-referential-formula/</guid>
      <description>&lt;p&gt;Quick post today. Let&amp;rsquo;s implement &lt;a href=&#34;https://en.wikipedia.org/wiki/Tupper%27s%20self-referential%20formula&#34;&gt;Tupper&amp;#39;s self-referential formula&lt;/a&gt; in Racket!&lt;/p&gt;
&lt;div class=&#34;latex-block&#34;&gt;\frac{1}{2} &lt; \left \lfloor mod \left ( \left \lfloor \frac{y}{17} 2^{-17 \lfloor x \rfloor - mod(\lfloor y \rfloor, 2)} \right \rfloor, 2 \right ) \right \rfloor&lt;/div&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-racket&#34; data-lang=&#34;racket&#34;&gt;(tupper &lt;span style=&#34;color:#ae81ff&#34;&gt;960939379918958884971672962127852754715004339660129306651505519271702802395266424689642842174350718121267153782770623355993237280874144307891325963941337723487857735749823926629715517173716995165232890538221612403238855866184013235585136048828693337902491454229288667081096184496091705183454067827731551705405381627380967602565625016981482083418783163849115590225610003652351370343874461848378737238198224849863465033159410054974700593138339226497249461751545728366702369745461014655997933798537483143786841806593422227898388722980000748404719&lt;/span&gt;)&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;figure&gt;
    &lt;img src=&#34;https://blog.jverkamp.com/embeds/2015/tupper.png&#34;/&gt; 
&lt;/figure&gt;

&lt;p&gt;That&amp;rsquo;s the result of graphing the above function at a point rather far away from the origin. Specifically, where &lt;code&gt;y&lt;/code&gt; is around that crazy big number. Look familiar?&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Minimal palindromic base</title>
      <link>https://blog.jverkamp.com/2014/08/13/minimal-palindromic-base/</link>
      <pubDate>Wed, 13 Aug 2014 17:00:55 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2014/08/13/minimal-palindromic-base/</guid>
      <description>&lt;p&gt;What&amp;rsquo;s this? Two posts in one day? Well, &lt;a href=&#34;https://blog.jverkamp.com/2014/08/08/onwards-and-upwards/&#34;&gt;writing a static blog generator&lt;/a&gt; can do that. ðŸ˜„&lt;/p&gt;
&lt;p&gt;Another easily phrased challenge:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;We have a simple little problem today: Given an integer n &amp;gt; 2, find the minimum b &amp;gt; 1 for which n base b is a palindrome.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;ndash; &lt;a href=&#34;http://programmingpraxis.com/2014/08/05/minimal-palindromic-base/&#34;&gt;Minimal Palindromic Base&lt;/a&gt; via Programming Praxis&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>Amicable chains</title>
      <link>https://blog.jverkamp.com/2014/05/23/amicable-chains/</link>
      <pubDate>Fri, 23 May 2014 14:00:37 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2014/05/23/amicable-chains/</guid>
      <description>&lt;p&gt;Mathematicians are an odd bunch. Names for just about everyhing. There are &lt;a href=&#34;https://en.wikipedia.org/wiki/Amicable%20number&#34;&gt;amicable numbers&lt;/a&gt; and &lt;a href=&#34;https://en.wikipedia.org/wiki/perfect%20number&#34;&gt;perfect number&lt;/a&gt;, &lt;a href=&#34;https://en.wikipedia.org/wiki/sociable%20number&#34;&gt;sociable number&lt;/a&gt; and &lt;a href=&#34;https://en.wikipedia.org/wiki/Betrothed%20number&#34;&gt;betrothed numbers&lt;/a&gt;. There are &lt;a href=&#34;https://en.wikipedia.org/wiki/sublime%20number&#34;&gt;sublime number&lt;/a&gt;, &lt;a href=&#34;https://en.wikipedia.org/wiki/frugal%20number&#34;&gt;frugal number&lt;/a&gt;, and &lt;a href=&#34;https://en.wikipedia.org/wiki/quasiperfect%20number&#34;&gt;quasiperfect number&lt;/a&gt;. Heck, there are &lt;a href=&#34;https://en.wikipedia.org/wiki/powerful%20number&#34;&gt;powerful number&lt;/a&gt;, &lt;a href=&#34;https://en.wikipedia.org/wiki/smooth%20number&#34;&gt;smooth number&lt;/a&gt;, and even &lt;a href=&#34;https://en.wikipedia.org/wiki/Sphenic%20number&#34;&gt;sphenic numbers&lt;/a&gt;. Rather a lot to deal with all told&amp;hellip; So let&amp;rsquo;s just focus on two of them: &lt;a href=&#34;https://en.wikipedia.org/wiki/Perfect%20number&#34;&gt;perfect numbers&lt;/a&gt; and &lt;a href=&#34;https://en.wikipedia.org/wiki/Amicable%20number&#34;&gt;amicable numbers&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Trigonometric Triangle Trouble</title>
      <link>https://blog.jverkamp.com/2014/05/02/trigonometric-triangle-trouble/</link>
      <pubDate>Fri, 02 May 2014 14:00:26 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2014/05/02/trigonometric-triangle-trouble/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://www.reddit.com/r/dailyprogrammer/comments/24hr25/522014_challenge_160_hard_trigonometric_triangle/&#34;&gt;Yesterday&amp;rsquo;s post&lt;/a&gt; at &lt;a href=&#34;http://www.reddit.com/r/dailyprogrammer/&#34;&gt;/r/dailyprogrammer&lt;/a&gt; managed to pique my interest&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A triangle on a flat plane is described by its angles and side lengths, and you don&amp;rsquo;t need all of the angles and side lengths to work out everything about the triangle. (This is the same as last time.) However, this time, the triangle will not necessarily have a right angle. This is where more trigonometry comes in. Break out your trig again, people.&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>Crossing hands</title>
      <link>https://blog.jverkamp.com/2014/02/27/crossing-hands/</link>
      <pubDate>Thu, 27 Feb 2014 04:55:39 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2014/02/27/crossing-hands/</guid>
      <description>&lt;p&gt;Thirty second programming problem &lt;a href=&#34;http://programmingpraxis.com/2014/02/25/crossing-hands/&#34;&gt;from Programming Praxis&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Your task is to write a progam that determines how many times the hands cross in one twelve-hour period, and compute a list of those times.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Ready?&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://upload.wikimedia.org/wikipedia/commons/thumb/b/b7/BahnhofsuhrZuerich_RZ.jpg/220px-BahnhofsuhrZuerich_RZ.jpg&#34; /&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Exploring parallelism in Racket with SHA-512 mining</title>
      <link>https://blog.jverkamp.com/2014/02/16/exploring-parallelism-in-racket-with-sha-512-mining/</link>
      <pubDate>Sun, 16 Feb 2014 14:00:30 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2014/02/16/exploring-parallelism-in-racket-with-sha-512-mining/</guid>
      <description>&lt;p&gt;While I&amp;rsquo;ve been getting a fair few programming exercises from Reddit&amp;rsquo;s &lt;a href=&#34;http://www.reddit.com/r/dailyprogrammer&#34;&gt;/r/dailyprogrammer&lt;/a&gt;, more recently I&amp;rsquo;ve started following a few other sub-Reddits, such as &lt;a href=&#34;http://www.reddit.com/r/programming&#34;&gt;/r/programming&lt;/a&gt; and &lt;a href=&#34;http://www.reddit.com/r/netsec&#34;&gt;/r/netsec&lt;/a&gt;. While browsing the former, I came across this intriguing gem of a problem:Â &lt;a tabindex=&#34;1&#34; href=&#34;http://www.h11e.com/&#34;&gt;HashChallenge: can you find the lowest value SHA-512 hash?&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Factoring factorials</title>
      <link>https://blog.jverkamp.com/2014/01/27/factoring-factorials/</link>
      <pubDate>Mon, 27 Jan 2014 14:00:22 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2014/01/27/factoring-factorials/</guid>
      <description>&lt;p&gt;There was &lt;a href=&#34;http://programmingpraxis.com/2014/01/24/factoring-factorials/&#34;&gt;a new post&lt;/a&gt; on Programming Praxis a few days ago that seemed pretty neat:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Given a positive integer n, compute the prime factorization, including multiplicities, of n! = 1 Â· 2 Â· â€¦ Â· n. You should be able to handle very large n, which means that you should not compute the factorial before computing the factors, as the intermediate result will be extremely large.&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>Graph coloring</title>
      <link>https://blog.jverkamp.com/2014/01/15/graph-coloring/</link>
      <pubDate>Wed, 15 Jan 2014 14:00:14 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2014/01/15/graph-coloring/</guid>
      <description>&lt;p&gt;Here&amp;rsquo;s &lt;a href=&#34;http://www.reddit.com/r/dailyprogrammer/comments/1tj0kl/122313_challenge_130_hard_coloring_frances/&#34;&gt;another one&lt;/a&gt; from /r/dailyprogrammer:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;hellip; Your goal is to color a map of these regions with two requirements: 1) make sure that each adjacent department do not share a color, so you can clearly distinguish each department, and 2) minimize these numbers of colors.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Essentially, &lt;a href=&#34;https://en.wikipedia.org/wiki/graph%20coloring&#34;&gt;graph coloring&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Graph radius</title>
      <link>https://blog.jverkamp.com/2014/01/14/graph-radius/</link>
      <pubDate>Tue, 14 Jan 2014 14:00:41 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2014/01/14/graph-radius/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://www.reddit.com/r/dailyprogrammer/comments/1tiz4z/122313_challenge_140_intermediate_graph_radius/&#34;&gt;Here&amp;rsquo;s&lt;/a&gt; a quick problem from the DailyProgrammer subreddit. Basically, we want to calculate the radius of a graph:&lt;/p&gt;
&lt;blockquote&gt;
&lt;span class=&#34;latex-inline&#34;&gt;radius(g) = \min\limits_{n_0 \in g} \max\limits_{n_1 \in g} d_g(n_0, n_1)&lt;/span&gt;

&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>Diffie-Hellman Key Exchange</title>
      <link>https://blog.jverkamp.com/2013/09/14/diffie-hellman-key-exchange/</link>
      <pubDate>Sat, 14 Sep 2013 14:00:02 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2013/09/14/diffie-hellman-key-exchange/</guid>
      <description>&lt;p&gt;Today we&amp;rsquo;re going to be talking about cryptography, specifically &lt;a href=&#34;https://en.wikipedia.org/wiki/Diffie-Hellman%20key%20exchange&#34;&gt;Diffie-Hellman key exchange&lt;/a&gt;&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;. The basic idea isn&amp;rsquo;t necessarily to communicate in secret, but rather to establish the information that makes doing so much easier.Â &lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Authorship attribution: Part 3</title>
      <link>https://blog.jverkamp.com/2013/08/06/authorship-attribution-part-3/</link>
      <pubDate>Tue, 06 Aug 2013 14:00:53 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2013/08/06/authorship-attribution-part-3/</guid>
      <description>&lt;p&gt;So far, we&amp;rsquo;ve had three different ideas for figuring out the author of an unknown paper (top n word ordering in &lt;a href=&#34;https://blog.jverkamp.com/2013/07/30/authorship-attribution-part-1/&#34;&gt;Part 1&lt;/a&gt;Â andÂ stop word frequency / 4-grams in &lt;a href=&#34;https://blog.jverkamp.com/2013/08/02/authorship-attribution-part-2/&#34;&gt;Part 2&lt;/a&gt;). Here&amp;rsquo;s something interesting though from the comments on the &lt;a title=&#34;JK Rowling&#34; href=&#34;http://programmingpraxis.com/2013/07/19/j-k-rowling/&#34;&gt;Programming Praxis post&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;cite&gt;Globules&lt;/cite&gt;Â said
&lt;small&gt;July 19, 2013 at 12:29 PM&lt;/small&gt;
Patrick Juola has aÂ &lt;a href=&#34;http://languagelog.ldc.upenn.edu/nll/?p=5315&#34; rel=&#34;nofollow&#34;&gt;guest post on Language Log&lt;/a&gt;Â describing the approach he took.&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>Authorship attribution: Part 2</title>
      <link>https://blog.jverkamp.com/2013/08/02/authorship-attribution-part-2/</link>
      <pubDate>Fri, 02 Aug 2013 14:00:52 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2013/08/02/authorship-attribution-part-2/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://blog.jverkamp.com/2013/07/30/authorship-attribution-part-1/&#34;&gt;Last time&lt;/a&gt;, we used word rank to try to figure out who could possibly have written Cuckoo&amp;rsquo;s calling. It didn&amp;rsquo;t work out so well, but we at least have a nice framework in place. So perhaps we can try a few more ways of turning entire novels into a few numbers.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Authorship attribution: Part 1</title>
      <link>https://blog.jverkamp.com/2013/07/30/authorship-attribution-part-1/</link>
      <pubDate>Tue, 30 Jul 2013 14:00:55 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2013/07/30/authorship-attribution-part-1/</guid>
      <description>&lt;p&gt;About two weeks ago, the new crime fiction novel &lt;a href=&#34;http://www.amazon.com/gp/product/0316206849/ref=as_li_ss_tl?ie=UTF8&amp;amp;camp=1789&amp;amp;creative=390957&amp;amp;creativeASIN=0316206849&amp;amp;linkCode=as2&amp;amp;tag=jverkampcom-20&#34;&gt;Cuckoo&amp;rsquo;s Calling&lt;/a&gt;Â was revealed to have actually been written by J.K. Rowling under the pseudonym Robert Galbraith. What&amp;rsquo;s interesting is exactly how they came to that conclusion. Here&amp;rsquo;s a quote from &lt;a title=&#34;J.K. Rowlingâ€™s Secret: A Forensic Linguist Explains How He Figured It Out&#34; href=&#34;http://entertainment.time.com/2013/07/15/j-k-rowlings-secret-a-forensic-linguist-explains-how-he-figured-it-out/&#34;&gt;Time&lt;/a&gt; magazine (via &lt;a title=&#34;J K Rowling&#34; href=&#34;http://programmingpraxis.com/2013/07/19/j-k-rowling/&#34;&gt;Programming Praxis&lt;/a&gt;):&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>A programming puzzle: f(f(n)) = -n</title>
      <link>https://blog.jverkamp.com/2013/06/29/a-programming-puzzle-ffn-n/</link>
      <pubDate>Sat, 29 Jun 2013 14:00:28 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2013/06/29/a-programming-puzzle-ffn-n/</guid>
      <description>&lt;p&gt;Two Programming Praxis puzzles in a week? Madness! Let&amp;rsquo;s do it!&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://programmingpraxis.com/2013/06/28/a-programming-puzzle/&#34;&gt;This time&lt;/a&gt;, the puzzle at first seems rather minimal:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Write a function f so that f(f(n)) = -n for all integers n.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;If you haven&amp;rsquo;t seen this problem before, take a moment to think though it. It&amp;rsquo;s a neat little problem&amp;ndash;a close cousin to a lateral thinking puzzle.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Adventures in optimization, re: Typed Racket</title>
      <link>https://blog.jverkamp.com/2013/04/16/adventures-in-optimization-re-typed-racket/</link>
      <pubDate>Tue, 16 Apr 2013 14:00:47 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2013/04/16/adventures-in-optimization-re-typed-racket/</guid>
      <description>&lt;p&gt;Last Thursday I wrote a &lt;a href=&#34;https://blog.jverkamp.com/2013/04/11/perlin-and-simplex-noise-in-racket/&#34;&gt;post about generating Perlin/simplex noise&lt;/a&gt; in Racket. Later that day, I &lt;a title=&#34;[racket] Perlin and simplex noise - optimizing Racket code&#34; href=&#34;http://lists.racket-lang.org/users/archive/2013-April/057245.html&#34;&gt;posted to the Racket mailing list&lt;/a&gt; asking how I could make it faster. What resulted was a whole sequence of responses (primarily about Typed Racket) and a bit of a rabbit hole that I&amp;rsquo;m still trying to wrap my head around.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Perlin and simplex noise in Racket</title>
      <link>https://blog.jverkamp.com/2013/04/11/perlin-and-simplex-noise-in-racket/</link>
      <pubDate>Thu, 11 Apr 2013 14:00:28 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2013/04/11/perlin-and-simplex-noise-in-racket/</guid>
      <description>&lt;p&gt;Many games need noise. No, not &lt;a href=&#34;https://en.wikipedia.org/wiki/Noise&#34;&gt;that noise&lt;/a&gt;&amp;ndash;&lt;a href=&#34;https://en.wikipedia.org/wiki/Perlin%20noise&#34;&gt;this noise&lt;/a&gt;. Or better yet, &lt;a href=&#34;https://en.wikipedia.org/wiki/Simplex%20noise&#34;&gt;this noise&lt;/a&gt;. More seriously, noise in this context refers to psuedo-randomly generated images that can be used for natural looking terrain generation&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;. Something like this:&lt;/p&gt;
&lt;figure&gt;
    &lt;img src=&#34;https://blog.jverkamp.com/embeds/2013/simplex-colored-256x256-16x.png&#34;/&gt; 
&lt;/figure&gt;</description>
    </item>
    
    <item>
      <title>Approximating Pi with Buffon&#39;s Needle</title>
      <link>https://blog.jverkamp.com/2013/03/18/approximating-pi-with-buffons-needle/</link>
      <pubDate>Mon, 18 Mar 2013 14:00:14 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2013/03/18/approximating-pi-with-buffons-needle/</guid>
      <description>&lt;p&gt;I&amp;rsquo;m a bit late for Pi Day, but Programming Praxis had &lt;a href=&#34;http://programmingpraxis.com/2013/03/15/buffons-needle/&#34; title=&#34;Buffon&#39;s Needle&#34;&gt;a neat problem on Friday&lt;/a&gt; that I wanted to check out:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Suppose we have a floor made of parallel strips of wood, each the same width, and we drop a needle onto the floor. What is the probability that the needle will lie across a line between two strips?&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>Triangle Trilemma</title>
      <link>https://blog.jverkamp.com/2013/01/20/triangle-trilemma/</link>
      <pubDate>Sun, 20 Jan 2013 14:00:55 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2013/01/20/triangle-trilemma/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://blog.jverkamp.com/2013/01/03/four-points-a-square/&#34;&gt;Four points, a square?&lt;/a&gt;) and comes originally from a &lt;a title=&#34;Google Code Jam: Triangle Trilemma&#34; href=&#34;https://code.google.com/codejam/contest/32014/dashboard&#34;&gt;Google Code Jam&lt;/a&gt; problem. The problem is stated simply enough&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Accept three points as input, determine if they form a triangle, and, if they do, classify it at equilateral (all three sides the same), isoceles (two sides the same, the other different), or scalene (all three sides different), and also classify it as acute (all three angles less than 90 degrees), obtuse (one angle greater than 90 degrees) or right (one angle equal 90 degrees).&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;But once you start implementing it, that&amp;rsquo;s when things get more interesting. ðŸ˜„&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Four points, a square?</title>
      <link>https://blog.jverkamp.com/2013/01/03/four-points-a-square/</link>
      <pubDate>Thu, 03 Jan 2013 14:00:45 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2013/01/03/four-points-a-square/</guid>
      <description>&lt;p&gt;&lt;a title=&#34;Four Points Determine a Square&#34; href=&#34;http://programmingpraxis.com/2013/01/02/four-points-determine-a-square/&#34;&gt;Another post&lt;/a&gt; from Programming Praxis. This one was originally intended for Friday but they posted it early, so I figured I would go ahead and do the same. The problem is actually deceptively straight forward:&lt;/p&gt;
&lt;p&gt;Given four points, do they form a square?&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Happy New Year</title>
      <link>https://blog.jverkamp.com/2013/01/02/happy-new-year/</link>
      <pubDate>Wed, 02 Jan 2013 14:00:40 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2013/01/02/happy-new-year/</guid>
      <description>&lt;p&gt;&lt;a title=&#34;Happy New Year!&#34; href=&#34;http://programmingpraxis.com/2013/01/01/happy-new-year/&#34;&gt;Yesterday&amp;rsquo;s post&lt;/a&gt; from Programming Praxis asks us to build a very special sort of expression. Using the numbers 10, 9, 8, 7, 6, 5, 4, 3, 2, and 1 in that order along with the operators of multiplication, division, addition, subtraction, and concatenation, find all of the ways that we can write an expression totaling 2013. Here&amp;rsquo;s one valid solution:&lt;/p&gt;
&lt;div class=&#34;latex-block&#34;&gt;109 - 8 * 7 + 654 * 3 - 2 / 1 = 2013&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Narcissistic Numbers</title>
      <link>https://blog.jverkamp.com/2012/12/14/narcissistic-numbers/</link>
      <pubDate>Fri, 14 Dec 2012 11:00:16 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2012/12/14/narcissistic-numbers/</guid>
      <description>&lt;p&gt;&lt;a title=&#34;Programming Praxis: 115132219018763992565095597973971522401&#34; href=&#34;http://programmingpraxis.com/2012/12/14/115132219018763992565095597973971522401/&#34;&gt;Today&amp;rsquo;s post&lt;/a&gt; from Programming Praxis posits an interesting problem: how can we (efficiently) find all of the &lt;a title=&#34;Wolfram Mathworld: Narcissistic numbers&#34; href=&#34;http://mathworld.wolfram.com/NarcissisticNumber.html&#34;&gt;narcissistic numbers&lt;/a&gt; (in base 10)?&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>One Billion Primes - Segmented Sieve</title>
      <link>https://blog.jverkamp.com/2012/11/29/one-billion-primes-segmented-sieve/</link>
      <pubDate>Thu, 29 Nov 2012 22:00:31 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2012/11/29/one-billion-primes-segmented-sieve/</guid>
      <description>&lt;p&gt;After a &lt;a href=&#34;https://blog.jverkamp.com/2012/11/01/the-sum-of-the-first-billion-primes/&#34;&gt;sum of the first billion primes&lt;/a&gt; post (originally from &lt;a title=&#34;Programming Praxis: The Sum Of The First Billion Primes&#34; href=&#34;http://programmingpraxis.com/2012/09/11/the-sum-of-the-first-billion-primes/&#34;&gt;Programming Praxis&lt;/a&gt;), I decided to finally write a segmented version of the &lt;a href=&#34;https://en.wikipedia.org/wiki/Sieve%20of%20Eratosthenes&#34;&gt;Sieve ofÂ Eratosthenes&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Project Euler 5</title>
      <link>https://blog.jverkamp.com/2012/11/08/project-euler-5/</link>
      <pubDate>Thu, 08 Nov 2012 14:00:05 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2012/11/08/project-euler-5/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;2520 is the smallest number that can be divided by each of the numbers from
1 to 10 without any remainder.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;What is the smallest positive number that is evenly divisible by all of the
numbers from 1 to 20?
&amp;ndash;Â &lt;cite&gt;&lt;a href=&#34;http://projecteuler.net/problem=5&#34;&gt;PROJECT EULER #5&lt;/a&gt;&lt;/cite&gt;&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>Project Euler 4</title>
      <link>https://blog.jverkamp.com/2012/11/07/project-euler-4/</link>
      <pubDate>Wed, 07 Nov 2012 14:00:48 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2012/11/07/project-euler-4/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;A palindromic number reads the same both ways. The largest palindrome made from the product of two 2-digit numbers is 9009 = 91 x 99.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Find the largest palindrome made from the product of two 3-digit numbers.
&amp;ndash;Â &lt;cite&gt;&lt;a href=&#34;http://projecteuler.net/problem=4&#34;&gt;PROJECT EULER #4&lt;/a&gt;&lt;/cite&gt;&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>Project Euler 2</title>
      <link>https://blog.jverkamp.com/2012/11/04/project-euler-2/</link>
      <pubDate>Sun, 04 Nov 2012 14:00:09 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2012/11/04/project-euler-2/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;Each new term in the Fibonacci sequence is generated by adding the previous two terms.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;By starting with 1 and 2, the first 10 terms will be:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;1, 2, 3, 5, 8, 13, 21, 34, 55, 89, &amp;hellip;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;By considering the terms in the Fibonacci sequence whose values do not exceed four million,
find the sum of the even-valued terms.
&amp;ndash; &lt;cite&gt;&lt;a href=&#34;http://projecteuler.net/problem=2&#34;&gt;Project Euler #2&lt;/a&gt;&lt;/cite&gt;&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>Project Euler 1</title>
      <link>https://blog.jverkamp.com/2012/11/03/project-euler-1/</link>
      <pubDate>Sat, 03 Nov 2012 14:00:28 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2012/11/03/project-euler-1/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;If we list all the natural numbers below 10 that are multiples of 3 or 5,
we get 3, 5, 6 and 9. The sum of these multiples is 23.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Find the sum of all the multiples of 3 or 5 below 1000.
&amp;ndash; &lt;cite&gt;&lt;a href=&#34;http://projecteuler.net/problem=1&#34;&gt;Project Euler #1&lt;/a&gt;&lt;/cite&gt;&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>The Sum Of The First Billion Primes</title>
      <link>https://blog.jverkamp.com/2012/11/01/the-sum-of-the-first-billion-primes/</link>
      <pubDate>Thu, 01 Nov 2012 14:00:03 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2012/11/01/the-sum-of-the-first-billion-primes/</guid>
      <description>&lt;p&gt;&lt;a title=&#34;Programming Praxis: The Sum of the First Billion Primes&#34; href=&#34;http://programmingpraxis.com/2012/09/11/the-sum-of-the-first-billion-primes/&#34;&gt;This problem&lt;/a&gt; from Programming Praxis came about in the comments to my last post and intrigued me. So today, we are trying to sum the first one billion primes. Summing the first hundred, thousand, even million primes isn&amp;rsquo;t actually that bad. But it takes a bit more effort when you scale it up to a billion. And why&amp;rsquo;s that?&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Pandigital Sums</title>
      <link>https://blog.jverkamp.com/2012/10/31/pandigital-sums/</link>
      <pubDate>Wed, 31 Oct 2012 14:00:11 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2012/10/31/pandigital-sums/</guid>
      <description>&lt;p&gt;Yesterday&amp;rsquo;s &lt;a href=&#34;http://programmingpraxis.com/2012/10/30/pandigital-numbers/&#34; title=&#34;Programming Praxis: Pandigital Numbers&#34;&gt;new post&lt;/a&gt; from Programming Praxis asked us to find all triples &lt;em&gt;(a, b, a+b)&lt;/em&gt; such that &lt;em&gt;a&lt;/em&gt; and &lt;em&gt;b&lt;/em&gt; are three digits and &lt;em&gt;a+b&lt;/em&gt; is four and concatenating the numbers results in a &lt;a href=&#34;https://en.wikipedia.org/wiki/pandigital%20number&#34;&gt;pandigital number&lt;/a&gt; (one with all 10 digits). After that, find the smallest individual number in any of these triples.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Pythagorean Triples</title>
      <link>https://blog.jverkamp.com/2012/10/27/pythagorean-triples/</link>
      <pubDate>Sat, 27 Oct 2012 14:00:44 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2012/10/27/pythagorean-triples/</guid>
      <description>&lt;p&gt;When Programming Praxis mentioned that the &lt;a href=&#34;http://programmingpraxis.com/2012/10/26/pythagorean-triples/&#34; title=&#34;Programming Praxis: Pythagorean Triples&#34;&gt;newest challenge&lt;/a&gt; sounded like a &lt;a href=&#34;http://projecteuler.net/&#34; title=&#34;Project Euler&#34;&gt;Project Euler&lt;/a&gt; problem, they were&amp;rsquo;t wrong. Basically, the idea is to count the number of &lt;a href=&#34;https://en.wikipedia.org/wiki/Pythagorean%20Triples&#34;&gt;Pythagorean Triples&lt;/a&gt; with perimeters (sum of the three numbers) under a given value. The necessary code to brute force the problem is really straight forward, but then they asked for the count up to one million. With the brute force &lt;span class=&#34;latex-inline&#34;&gt;O(n^2)&lt;/span&gt;
 algorithm (and a relatively high constant), that&amp;rsquo;s not really feasible. So that&amp;rsquo;s when we have to get a bit more creative.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Prime Partitions II: The Listing</title>
      <link>https://blog.jverkamp.com/2012/10/22/prime-partitions-ii-the-listing/</link>
      <pubDate>Mon, 22 Oct 2012 14:00:58 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2012/10/22/prime-partitions-ii-the-listing/</guid>
      <description>&lt;p&gt;As the continuation of &lt;a href=&#34;https://blog.jverkamp.com/2012/10/22/prime-partitions-ii-the-listing/&#34;&gt;Saturday&amp;rsquo;s post&lt;/a&gt; on counting the number of prime partitions of a number without actually determining what those partitions are, today we&amp;rsquo;re going to work out the actual list of partitions.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Prime Partitions</title>
      <link>https://blog.jverkamp.com/2012/10/20/prime-partitions/</link>
      <pubDate>Sat, 20 Oct 2012 14:00:52 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2012/10/20/prime-partitions/</guid>
      <description>&lt;p&gt;Today we&amp;rsquo;re back into the mathy sort of problems from Programming Praxis, &lt;a href=&#34;http://programmingpraxis.com/2012/10/19/prime-partitions/&#34; title=&#34;Programming Praxis: Prime Partitions&#34;&gt;tasked with&lt;/a&gt; calculating the number of &lt;a href=&#34;http://mathworld.wolfram.com/PrimePartition.html&#34; title=&#34;WolframMathworld: Prime Partition&#34;&gt;prime partitions&lt;/a&gt; for a given number&amp;ndash;essentially, how many different lists of prime numbers are there that sum to the given number.&lt;/p&gt;
&lt;p&gt;For example, working with 11, there are six prime partitions (I&amp;rsquo;ll show the code for this later):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-scheme&#34; data-lang=&#34;scheme&#34;&gt;&amp;gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;prime-partitions&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;)
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;((&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;) (&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;) (&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;) (&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;) (&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;) (&lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Unfortunately, the number of prime partitions quickly gets ridiculous. Once you get to 1000, there are 48 quadrillion prime partitions&amp;hellip; So generating all of them isn&amp;rsquo;t exactly feasible.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Rule 30 RNG</title>
      <link>https://blog.jverkamp.com/2012/10/17/rule-30-rng/</link>
      <pubDate>Wed, 17 Oct 2012 14:00:08 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2012/10/17/rule-30-rng/</guid>
      <description>&lt;p&gt;Today we get away from the word games for a little while and get back to talking about random number generators (previous posts &lt;a href=&#34;https://blog.jverkamp.com/2012/08/22/two-random-exercises/&#34;&gt;here&lt;/a&gt;Â and &lt;a href=&#34;https://blog.jverkamp.com/2012/08/23/two-more-random-exercises/&#34;&gt;here&lt;/a&gt;). Or rather one random number generator in specific: a &lt;a href=&#34;https://en.wikipedia.org/wiki/Rule%2030&#34;&gt;Rule 30&lt;/a&gt;Â &lt;a href=&#34;https://en.wikipedia.org/wiki/PRNG&#34;&gt;psuedo-random number generator&lt;/a&gt;Â (PRNG). (Here&amp;rsquo;s the &lt;a href=&#34;http://programmingpraxis.com/2011/04/29/rule-30-rng/&#34; title=&#34;Programming Praxis: Rule 30 RNG&#34;&gt;motivating post&lt;/a&gt; from Programming Praxis.)&lt;/p&gt;
&lt;p&gt;Remember the previous post I made about &lt;a href=&#34;https://blog.jverkamp.com/2012/10/03/elementary-cellular-automaton/&#34;&gt;cellular automaton&lt;/a&gt;? The basic idea is to turn those into a random number generator. If you go back to the linked post in particular and give it Rule 30 with a random initial state, you can see how chaotic the rows seem to be. Perfect for a PRNG.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Elementary cellular automaton</title>
      <link>https://blog.jverkamp.com/2012/10/03/elementary-cellular-automaton/</link>
      <pubDate>Wed, 03 Oct 2012 14:00:47 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2012/10/03/elementary-cellular-automaton/</guid>
      <description>&lt;p&gt;Today we&amp;rsquo;re going to be playing with an HTML5 canvas again (previously we made &lt;a href=&#34;https://blog.jverkamp.com/2012/09/26/line-art-with-an-html5-canvas/&#34;&gt;line art&lt;/a&gt; and &lt;a href=&#34;https://blog.jverkamp.com/2012/09/27/html5-bugs/&#34;&gt;bugs&lt;/a&gt;). This time, the goal is to make a tool where you can explore &lt;a href=&#34;http://mathworld.wolfram.com/ElementaryCellularAutomaton.html&#34; title=&#34;Wolfram Mathworld: Elementary Cellular Automaton&#34;&gt;elementary cellular automaton&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>The Birthday Paradox</title>
      <link>https://blog.jverkamp.com/2012/10/01/the-birthday-paradox/</link>
      <pubDate>Mon, 01 Oct 2012 14:00:40 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2012/10/01/the-birthday-paradox/</guid>
      <description>&lt;p&gt;Probability can be a bit counter-intuitive at times. Take for example, the &lt;a href=&#34;https://en.wikipedia.org/wiki/Birthday%20paradox&#34;&gt;birthday problem / paradox&lt;/a&gt;: how many people do you need in a room to have a 50/50 chance that two share the same birthday?&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>HTML5 Bugs</title>
      <link>https://blog.jverkamp.com/2012/09/27/html5-bugs/</link>
      <pubDate>Thu, 27 Sep 2012 14:00:13 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2012/09/27/html5-bugs/</guid>
      <description>&lt;p&gt;In the spirit of &lt;a href=&#34;https://blog.jverkamp.com/2012/09/26/line-art-with-an-html5-canvas/&#34;&gt;yesterday&amp;rsquo;s post&lt;/a&gt; about HTML5&amp;rsquo;s &lt;code&gt;canvas&lt;/code&gt;, I&amp;rsquo;ve got another post. This time, it&amp;rsquo;s a little buggy. ðŸ˜„&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Line art with an HTML5 canvas</title>
      <link>https://blog.jverkamp.com/2012/09/26/line-art-with-an-html5-canvas/</link>
      <pubDate>Wed, 26 Sep 2012 14:00:16 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2012/09/26/line-art-with-an-html5-canvas/</guid>
      <description>&lt;p&gt;Let&amp;rsquo;s play with &lt;a href=&#34;http://www.w3schools.com/html/html5_canvas.asp&#34; title=&#34;W3 Schools: HTML5 canvas&#34;&gt;HTML5 canvas&lt;/a&gt; elements!&lt;/p&gt;
&lt;p&gt;Basically, I want to draw some simple line diagrams. Go from top to bottom on one side while going from right to left along the top or bottom. It sounds complicated, but perhaps it&amp;rsquo;s easier to explain with a drawing:&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>n-queens in 18 lines of code</title>
      <link>https://blog.jverkamp.com/2012/09/24/n-queens-in-18-lines-of-code/</link>
      <pubDate>Mon, 24 Sep 2012 14:00:23 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2012/09/24/n-queens-in-18-lines-of-code/</guid>
      <description>&lt;p&gt;One of the rites of passage for computer scientists it seems is to solve the &lt;a href=&#34;https://en.wikipedia.org/wiki/N-queens&#34;&gt;Eight Queens Problem&lt;/a&gt;&amp;ndash;where you must place 8 queens on a chessboard so that no pair of queens is attacking each other. Even better is when you can expand that to the n-queens problem with n queens on an n by n chessboard. After finding it again in older posts on both &lt;a href=&#34;http://programmingpraxis.com/2010/06/11/n-queens/&#34; title=&#34;Programming Praxis: N-Queens&#34;&gt;Programming Praxis&lt;/a&gt; and &lt;a href=&#34;http://www.datagenetics.com/blog/august42012/index.html&#34; title=&#34;DataGenetics: Eight Queens&#34;&gt;DataGenetics&lt;/a&gt;, I decided to go ahead and take a crack at it and I think the solution is pretty straight forward.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Playing with loaded dice</title>
      <link>https://blog.jverkamp.com/2012/09/20/playing-with-loaded-dice/</link>
      <pubDate>Thu, 20 Sep 2012 14:00:45 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2012/09/20/playing-with-loaded-dice/</guid>
      <description>&lt;p&gt;A couple of months ago, I posted &lt;a href=&#34;https://blog.jverkamp.com/2012/07/04/analyzing-the-dice-game/&#34;&gt;a simple simulation&lt;/a&gt; of a loaded dice game &lt;a title=&#34;How to use math and win free drinks from your friends&#34; href=&#34;http://lifehacker.com/5923186/how-to-use-math-and-win-free-drinks-from-your-friends&#34;&gt;posted by Lifehacker&lt;/a&gt; (originally from &lt;a href=&#34;http://www.datagenetics.com/blog/july12012/index.html&#34; title=&#34;DataGenetics: Intransitive Dice&#34;&gt;DataGenetics&lt;/a&gt;). Today I wanted to take a chance to give everyone a chance to actually play the game.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>A piece of the abc conjecture</title>
      <link>https://blog.jverkamp.com/2012/09/19/a-piece-of-the-abc-conjecture/</link>
      <pubDate>Wed, 19 Sep 2012 14:00:46 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2012/09/19/a-piece-of-the-abc-conjecture/</guid>
      <description>&lt;p&gt;There&amp;rsquo;s been a bit of hubbub in the in the math world the last few weeks with &lt;a href=&#34;https://en.wikipedia.org/wiki/Shinichi%20Mochizuki&#34;&gt;Shinichi Mochizuki&amp;#39;s&lt;/a&gt; 500 page proof that of the &lt;a href=&#34;https://en.wikipedia.org/wiki/ABC%20conjecture&#34;&gt;ABC conjecture&lt;/a&gt;. Basically, the conjecture states that given three positive coprime integers &lt;em&gt;a&lt;/em&gt;, &lt;em&gt;b&lt;/em&gt;, and &lt;em&gt;c&lt;/em&gt; such that &lt;em&gt;a&lt;/em&gt; + &lt;em&gt;b&lt;/em&gt; = &lt;em&gt;c&lt;/em&gt;, the product of the distinct prime factors of &lt;em&gt;a&lt;/em&gt;, &lt;em&gt;b&lt;/em&gt;, and &lt;em&gt;c&lt;/em&gt; is rarely much smaller than &lt;em&gt;c&lt;/em&gt;. While this may sound strange, there are a number of interesting consequences that you can read about &lt;a href=&#34;https://en.wikipedia.org/wiki/Abc%20conjecture#Some%20consequences&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;To make a long story shorter, there was a challenge on &lt;a href=&#34;http://programmingpraxis.com/2012/09/18/abc-conjecture/&#34; title=&#34;ABC Conjecture&#34;&gt;Programming Praxis&lt;/a&gt; that intrigued me, which was to write code that given a upper bound on &lt;em&gt;c&lt;/em&gt; would generate a list of all of the triples &lt;em&gt;(a, b, c)&lt;/em&gt; such that the product is larger.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Who wants to win the lottery?</title>
      <link>https://blog.jverkamp.com/2012/09/17/who-wants-to-win-the-lottery/</link>
      <pubDate>Mon, 17 Sep 2012 14:00:59 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2012/09/17/who-wants-to-win-the-lottery/</guid>
      <description>&lt;p&gt;So everyone would love to win the lottery right? Just think of what you could do if you had even $1 million dollars to spend. You could buy a dozen tacos a day at Taco Bell for the rest of your life. And your children&amp;rsquo;s lives. And their children&amp;rsquo;s lives. &lt;a href=&#34;http://www.wolframalpha.com/input/?i=1+million+dollars+%2F+%2812+dollar+per+day%29+in+years&#34; title=&#34;Wolfram Alpha: 1 million tacos&#34;&gt;228 years&lt;/a&gt; to be more precise. Or you could pay to send the entire family from &lt;a href=&#34;http://www.amazon.com/gp/product/B0001EFTH4/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=1789&amp;creative=9325&amp;creativeASIN=B0001EFTH4&amp;linkCode=as2&amp;tag=jverkampcom-20&#34; title=&#34;Amazon: Cheaper by the Dozen&#34;&gt;Cheaper by the Dozen&lt;/a&gt; to the average state university&amp;ndash;even if they each took an &lt;a href=&#34;http://www.wolframalpha.com/input/?i=%241+million+%2F+%2413%2C600+%2F+12&#34; title=&#34;Wolfram Alpha: $1 million in tuition&#34;&gt;additional two years&lt;/a&gt; to graduate. And that&amp;rsquo;s just for $1 million. Payouts are usually much higher than that&amp;hellip;&lt;/p&gt;
&lt;p&gt;So what&amp;rsquo;s the catch?&lt;/p&gt;
&lt;p&gt;(If you came here just for the Powerball simulation, it&amp;rsquo;s down at the bottom of the page. &lt;a href=&#34;http://blog.jverkamp.com/2012/09/17/who-wants-to-win-the-lottery/#lotteryGametime&#34;&gt;Click here&lt;/a&gt; to go straight there.)&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
