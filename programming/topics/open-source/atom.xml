<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Open Source on jverkamp.com</title><link>https://blog.jverkamp.com/programming/topics/open-source/</link><description>Recent content in Open Source on jverkamp.com</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://blog.jverkamp.com/programming/topics/open-source/atom.xml" rel="self" type="application/rss+xml"/><item><title>gif shrinkage with ImageMagick</title><link>https://blog.jverkamp.com/2015/03/05/gif-shrinkage-with-imagemagick/</link><pubDate>Thu, 05 Mar 2015 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2015/03/05/gif-shrinkage-with-imagemagick/</guid><description>&lt;p>I have a gif collection now. :)&lt;/p>
&lt;figure>&lt;img src="https://blog.jverkamp.com/embeds/2015/dun-dun-dunnnnn.gif"/>
&lt;/figure></description></item><item><title>ts: Timestamping stdout</title><link>https://blog.jverkamp.com/2015/02/26/ts-timestamping-stdout/</link><pubDate>Thu, 26 Feb 2015 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2015/02/26/ts-timestamping-stdout/</guid><description>&lt;p>Loving data as much as I do, I like to &lt;a href="https://blog.jverkamp.com/2013/04/16/adventures-in-optimization-re-typed-racket/">optimize&lt;/a> things. To make sure I&amp;rsquo;m actually going the right way, it&amp;rsquo;s useful to time things. While it&amp;rsquo;s trivial in most languages to add timing, it&amp;rsquo;s even easier if you don&amp;rsquo;t have to.&lt;/p></description></item><item><title>update-dotfiles encryption</title><link>https://blog.jverkamp.com/2015/02/11/update-dotfiles-encryption/</link><pubDate>Wed, 11 Feb 2015 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2015/02/11/update-dotfiles-encryption/</guid><description>&lt;p>I do like having my &lt;a href="https://blog.jverkamp.com/2015/02/11/update-dotfiles-encryption/">dotfiles&lt;/a> on GitHub. For one, it means that they&amp;rsquo;re always available when I set up a new machine. For two, others can see them and take whatever is interesting for their own dotfiles. But all that has a disadvantage: what if I want to store my SSH configs?&lt;/p></description></item><item><title>docker-bash and docker-stop-all</title><link>https://blog.jverkamp.com/2015/02/04/docker-bash-and-docker-stop-all/</link><pubDate>Wed, 04 Feb 2015 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2015/02/04/docker-bash-and-docker-stop-all/</guid><description>&lt;p>I&amp;rsquo;ve been using &lt;a href="https://www.docker.com/">Docker&lt;/a> a fair bit at work, so I&amp;rsquo;ve added a few quick aliases to my dotfiles make that a little bit easier:&lt;/p>
&lt;ul>
&lt;li>&lt;code>docker-bash&lt;/code> - attach a &lt;code>bash&lt;/code> shell to the first available docker instance&lt;/li>
&lt;li>&lt;code>docker-stop-all&lt;/code> - stop all running docker instances&lt;/li>
&lt;/ul></description></item><item><title>Removing large files from git history</title><link>https://blog.jverkamp.com/2014/09/03/removing-large-files-from-git-history/</link><pubDate>Wed, 03 Sep 2014 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2014/09/03/removing-large-files-from-git-history/</guid><description>&lt;p>A couple of quick additions to my &lt;a href="https://blog.jverkamp.com/2015/02/11/update-dotfiles-encryption/">dotfiles&lt;/a> today:&lt;/p>
&lt;ul>
&lt;li>&lt;code>git find-fat&lt;/code> - find large files that no longer exist&lt;/li>
&lt;li>&lt;code>git trim-fat&lt;/code> - remove files entirely from git history&lt;/li>
&lt;/ul></description></item><item><title>Updating dotfiles</title><link>https://blog.jverkamp.com/2014/08/04/updating-dotfiles/</link><pubDate>Mon, 04 Aug 2014 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2014/08/04/updating-dotfiles/</guid><description>&lt;p>After all of these updates to my &lt;a href="https://blog.jverkamp.com/2015/02/11/update-dotfiles-encryption/">dotfiles&lt;/a>, I finally want something that I can use to keep them up to date. For that, let&amp;rsquo;s write a quick script that can do just that.&lt;/p></description></item><item><title>slowcat</title><link>https://blog.jverkamp.com/2014/08/01/slowcat/</link><pubDate>Fri, 01 Aug 2014 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2014/08/01/slowcat/</guid><description>&lt;p>Sometimes &lt;code>cat&lt;/code> just prints too quickly.&lt;/p></description></item><item><title>Regex search and replace</title><link>https://blog.jverkamp.com/2014/07/31/regex-search-and-replace/</link><pubDate>Thu, 31 Jul 2014 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2014/07/31/regex-search-and-replace/</guid><description>&lt;p>Another random task that I find myself doing distressingly often: performing a regular expression search and replace recursively across a bunch of files. You can do this relatively directly with tools like &lt;code>sed&lt;/code>, but I can never quite remember the particularly flavor of regular expression syntax &lt;code>sed&lt;/code> uses.&lt;/p></description></item><item><title>Git aliases: undo, ud, and wipe</title><link>https://blog.jverkamp.com/2014/07/28/git-aliases-undo-ud-and-wipe/</link><pubDate>Mon, 28 Jul 2014 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2014/07/28/git-aliases-undo-ud-and-wipe/</guid><description>&lt;p>A few new git aliases:&lt;/p>
&lt;ul>
&lt;li>&lt;code>git undo&lt;/code> - Undo the most recent commit, unstaging all new files&lt;/li>
&lt;li>&lt;code>git up&lt;/code> - Update remote branches and submodules, delete merged branches&lt;/li>
&lt;li>&lt;code>git wipe&lt;/code> - Remove all current changes, saving as a seperate branch&lt;/li>
&lt;/ul></description></item><item><title>Parsing human readable times</title><link>https://blog.jverkamp.com/2014/07/22/parsing-human-readable-times/</link><pubDate>Tue, 22 Jul 2014 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2014/07/22/parsing-human-readable-times/</guid><description>&lt;p>So what day was 9 days ago again?&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ when &lt;span style="color:#ae81ff">9&lt;/span> days ago
2014-07-13
&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Command line user agent parsing</title><link>https://blog.jverkamp.com/2014/02/07/command-line-user-agent-parsing/</link><pubDate>Fri, 07 Feb 2014 00:10:00 +0000</pubDate><guid>https://blog.jverkamp.com/2014/02/07/command-line-user-agent-parsing/</guid><description>&lt;p>Quite often when working with internet data, you will find yourself wanting to figure out what sort of device users are using to access your content. Luckily, if you&amp;rsquo;re using HTTP, there is a standard for that: The &lt;a href="https://en.wikipedia.org/wiki/user-agent">user-agent&lt;/a> header.&lt;/p>
&lt;p>Since I&amp;rsquo;m in exactly that position, I&amp;rsquo;ve added a new script to my &lt;a href="https://blog.jverkamp.com/2015/02/11/update-dotfiles-encryption/">Dotfiles&lt;/a> that reads user agents on &lt;code>stdin&lt;/code>, parses them, and writes them back out in a given format.&lt;/p></description></item><item><title>Combining sort and uniq</title><link>https://blog.jverkamp.com/2014/02/07/combining-sort-and-uniq/</link><pubDate>Fri, 07 Feb 2014 00:05:00 +0000</pubDate><guid>https://blog.jverkamp.com/2014/02/07/combining-sort-and-uniq/</guid><description>&lt;p>A fairly common set of command line tools (at least for me) is to combine &lt;code>sort&lt;/code> and &lt;code>uniq&lt;/code> to get a count of unique items in a list of unsorted data. Something like this:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ find . -type &lt;span style="color:#e6db74">&amp;#39;f&amp;#39;&lt;/span> | rev | cut -d &lt;span style="color:#e6db74">&amp;#34;.&amp;#34;&lt;/span> -f &lt;span style="color:#e6db74">&amp;#34;1&amp;#34;&lt;/span> | rev | sort | uniq -c | sort -nr | head
&lt;span style="color:#ae81ff">2649&lt;/span> htm
&lt;span style="color:#ae81ff">1458&lt;/span> png
&lt;span style="color:#ae81ff">993&lt;/span> cache
&lt;span style="color:#ae81ff">612&lt;/span> jpg
&lt;span style="color:#ae81ff">135&lt;/span> css
&lt;span style="color:#ae81ff">102&lt;/span> zip
&lt;span style="color:#ae81ff">99&lt;/span> svg
&lt;span style="color:#ae81ff">60&lt;/span> gif
&lt;span style="color:#ae81ff">45&lt;/span> js
&lt;span style="color:#ae81ff">27&lt;/span> pdf
&lt;/code>&lt;/pre>&lt;/div></description></item></channel></rss>