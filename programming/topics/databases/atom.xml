<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Databases on jverkamp.com</title><link>https://blog.jverkamp.com/programming/topics/databases/</link><description>Recent content in Databases on jverkamp.com</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Thu, 16 Jul 2015 00:00:00 +0000</lastBuildDate><atom:link href="https://blog.jverkamp.com/programming/topics/databases/atom.xml" rel="self" type="application/rss+xml"/><item><title>Automagically storing Python objects in Redis</title><link>https://blog.jverkamp.com/2015/07/16/automagically-storing-python-objects-in-redis/</link><pubDate>Thu, 16 Jul 2015 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2015/07/16/automagically-storing-python-objects-in-redis/</guid><description>&lt;p>When you&amp;rsquo;re starting out on a simple web application, eventually&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup> you will reach the point where you need to store some form of persistant data. Basically, you have three options&lt;sup id="fnref:2">&lt;a href="#fn:2" class="footnote-ref" role="doc-noteref">2&lt;/a>&lt;/sup>:&lt;/p>
&lt;ul>
&lt;li>Store the information in flat files on the file system&lt;/li>
&lt;li>Store the information in a database (&lt;a href="https://www.mysql.com/" target="_blank" rel="noopener">MySQL&lt;/a>, &lt;a href="https://www.sqlite.org/" target="_blank" rel="noopener">SQLite&lt;/a> etc)&lt;/li>
&lt;li>Store the information in a key/value store (&lt;a href="https://www.mongodb.org/" target="_blank" rel="noopener">mongoDB&lt;/a>, &lt;a href="http://redis.io/" target="_blank" rel="noopener">reddis&lt;/a>)&lt;/li>
&lt;/ul>
&lt;p>There are all manner of pros and cons to each, in particular how easy they are to get started in, how well they fit the data you are using, and how well they will scale horizontally (adding more machines rather than bigger ones).&lt;/p></description></item><item><title>iOS Backups in Racket: Messages</title><link>https://blog.jverkamp.com/2015/01/27/ios-backups-in-racket-messages/</link><pubDate>Tue, 27 Jan 2015 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2015/01/27/ios-backups-in-racket-messages/</guid><description>&lt;p>So far we&amp;rsquo;ve &lt;a href="https://blog.jverkamp.com/2015/01/22/ios-backups-in-racket-groundwork/">laid the groundwork&lt;/a>, loading local iOS backups and parsed out &lt;a href="https://blog.jverkamp.com/2015/01/23/ios-backups-in-racket-contacts/">contacts&lt;/a>. Today let&amp;rsquo;s take another step down the rabbit hole and figure out how messages are stored.&lt;/p></description></item><item><title>iOS Backups in Racket: Contacts</title><link>https://blog.jverkamp.com/2015/01/23/ios-backups-in-racket-contacts/</link><pubDate>Fri, 23 Jan 2015 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2015/01/23/ios-backups-in-racket-contacts/</guid><description>&lt;p>After &lt;a href="https://blog.jverkamp.com/2015/01/22/ios-backups-in-racket-groundwork/">yesterday&amp;rsquo;s post&lt;/a> laying the groundwork for looking into &lt;a href="https://blog.jverkamp.com/2015/01/29/ios-backups-in-racket-apps/">iOS Backups&lt;/a>, today why don&amp;rsquo;t we actually start digging into one of the more interesting files: your list of contacts.&lt;/p></description></item><item><title>Querying CSV files with SQL</title><link>https://blog.jverkamp.com/2012/10/04/querying-csv-files-with-sql/</link><pubDate>Thu, 04 Oct 2012 14:00:37 +0000</pubDate><guid>https://blog.jverkamp.com/2012/10/04/querying-csv-files-with-sql/</guid><description>&lt;p>Some time ago, I had a bunch of CSV files that I needed to extract some data from. They were all organized into tables with related columns between them all that made me think of a relational database&amp;ndash;and it&amp;rsquo;s really easy to query relational databases, just use SQL. So what did I do? I wrote a script that will let me query CSV files as if they were a relational database.&lt;/p></description></item></channel></rss>