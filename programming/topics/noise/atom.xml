<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Noise on jverkamp.com</title><link>https://blog.jverkamp.com/programming/topics/noise/</link><description>Recent content in Noise on jverkamp.com</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://blog.jverkamp.com/programming/topics/noise/atom.xml" rel="self" type="application/rss+xml"/><item><title>raco pkg install noise</title><link>https://blog.jverkamp.com/2021/08/05/raco-pkg-install-noise/</link><pubDate>Thu, 05 Aug 2021 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2021/08/05/raco-pkg-install-noise/</guid><description>&lt;p>What feels like a million years and a lifetime ago, I wrote up a &lt;a href="https://blog.jverkamp.com/2013/04/11/perlin-and-simplex-noise-in-racket/">library for perlin and simple noise in Racket&lt;/a>. Inspired by &lt;a href="https://github.com/soegaard/sketching">Jens Axel SÃ¸gaard&amp;rsquo;s new Sketching library&lt;/a> (processing in Racket) and a conversation thereabout, I figure it&amp;rsquo;s about time to push noise to the &lt;code>raco&lt;/code> package manager!&lt;/p></description></item><item><title>AoC 2016 Day 13: Noisy Puzzle</title><link>https://blog.jverkamp.com/2016/12/13/aoc-2016-day-13-noisy-puzzle/</link><pubDate>Tue, 13 Dec 2016 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2016/12/13/aoc-2016-day-13-noisy-puzzle/</guid><description>&lt;h3 id="source-a-maze-of-twisty-little-cubicleshttpadventofcodecom2016day13cca">Source: &lt;a href="http://adventofcode.com/2016/day/13">A Maze of Twisty Little Cubicles&lt;/a>&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>&lt;/h3>
&lt;blockquote>
&lt;p>&lt;strong>Part 1:&lt;/strong> Generate a &lt;a href="https://en.wikipedia.org/wiki/procedurally%20generated">procedurally generated&lt;/a> maze using the following equation:&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;ul>
&lt;li>&lt;span class="latex-inline">x^2 &amp;#43; 3x &amp;#43; 2xy &amp;#43; y &amp;#43; y^2 &amp;#43; c&lt;/span>
&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;blockquote>
&lt;p>&lt;code>x&lt;/code> and &lt;code>y&lt;/code> are the coordinates of a point and &lt;code>c&lt;/code> is a constant.&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>Count the number of bits for each point. Even is open spaces, odd is walls.&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>What is the shortest route from &lt;code>(0, 0)&lt;/code> to &lt;code>(31, 39)&lt;/code>?&lt;/p>
&lt;/blockquote></description></item><item><title>Adventures in optimization, re: Typed Racket</title><link>https://blog.jverkamp.com/2013/04/16/adventures-in-optimization-re-typed-racket/</link><pubDate>Tue, 16 Apr 2013 14:00:47 +0000</pubDate><guid>https://blog.jverkamp.com/2013/04/16/adventures-in-optimization-re-typed-racket/</guid><description>&lt;p>Last Thursday I wrote a &lt;a href="https://blog.jverkamp.com/2013/04/11/perlin-and-simplex-noise-in-racket/">post about generating Perlin/simplex noise&lt;/a> in Racket. Later that day, I &lt;a title="[racket] Perlin and simplex noise - optimizing Racket code" href="http://lists.racket-lang.org/users/archive/2013-April/057245.html">posted to the Racket mailing list&lt;/a> asking how I could make it faster. What resulted was a whole sequence of responses (primarily about Typed Racket) and a bit of a rabbit hole that I&amp;rsquo;m still trying to wrap my head around.&lt;/p></description></item><item><title>Perlin and simplex noise in Racket</title><link>https://blog.jverkamp.com/2013/04/11/perlin-and-simplex-noise-in-racket/</link><pubDate>Thu, 11 Apr 2013 14:00:28 +0000</pubDate><guid>https://blog.jverkamp.com/2013/04/11/perlin-and-simplex-noise-in-racket/</guid><description>&lt;p>Many games need noise. No, not &lt;a href="https://en.wikipedia.org/wiki/Noise">that noise&lt;/a>&amp;ndash;&lt;a href="https://en.wikipedia.org/wiki/Perlin%20noise">this noise&lt;/a>. Or better yet, &lt;a href="https://en.wikipedia.org/wiki/Simplex%20noise">this noise&lt;/a>. More seriously, noise in this context refers to psuedo-randomly generated images that can be used for natural looking terrain generation&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>. Something like this:&lt;/p>
&lt;figure>&lt;img src="https://blog.jverkamp.com/embeds/2013/simplex-colored-256x256-16x.png"/>
&lt;/figure></description></item></channel></rss>