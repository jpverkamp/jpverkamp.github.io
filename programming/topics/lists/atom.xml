<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Lists on jverkamp.com</title><link>https://blog.jverkamp.com/programming/topics/lists/</link><description>Recent content in Lists on jverkamp.com</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://blog.jverkamp.com/programming/topics/lists/atom.xml" rel="self" type="application/rss+xml"/><item><title>Functions as lists</title><link>https://blog.jverkamp.com/2013/10/09/functions-as-lists/</link><pubDate>Wed, 09 Oct 2013 14:00:15 +0000</pubDate><guid>https://blog.jverkamp.com/2013/10/09/functions-as-lists/</guid><description>&lt;p>&lt;a href="http://programmingpraxis.com/2013/10/08/functional-style-linked-lists/">Yesterday&amp;rsquo;s challenge&lt;/a> from Programming Praxis challenges us to rebuild a data structure near and dear to any Lisper&amp;rsquo;s/Schemer&amp;rsquo;s/Racketer&amp;rsquo;s&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>/functional programmer&amp;rsquo;s heart: lists. The idea presented in &lt;a href="http://programmingpraxis.com/2013/10/08/functional-style-linked-lists/2/">their sample solution&lt;/a>Â uses two element vectors, directly mimicking the general internal structure of Scheme&amp;rsquo;s lists. How about we do something a bit stranger? ðŸ˜„&lt;/p></description></item><item><title>Swap list nodes</title><link>https://blog.jverkamp.com/2013/06/26/swap-list-nodes/</link><pubDate>Wed, 26 Jun 2013 14:00:42 +0000</pubDate><guid>https://blog.jverkamp.com/2013/06/26/swap-list-nodes/</guid><description>&lt;p>It&amp;rsquo;s been rather a while since I&amp;rsquo;ve worked out a &lt;a title="Programming Praxis" href="http://programmingpraxis.com/">Programming Praxis&lt;/a> problem, but they posted a &lt;a title="Swap list nodes" href="http://programmingpraxis.com/2013/06/25/swap-list-nodes/">new one yesterday&lt;/a>, so now seems as good a time as any. The problem is relatively simple:&lt;/p>
&lt;blockquote>
&lt;p>Given a linked list, swap the kth node from the head of the list with the kth node from the end of the list.&lt;/p>
&lt;/blockquote>
&lt;p>Since all lists in Scheme are linked lists, that part seems easy enough. To make the problem a little more interesting however, I&amp;rsquo;m going to work it out in a purely functional manner: no mutation.&lt;/p></description></item></channel></rss>