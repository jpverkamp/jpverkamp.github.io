<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Data Structures on jverkamp.com</title><link>https://blog.jverkamp.com/programming/topics/data-structures/</link><description>Recent content in Data Structures on jverkamp.com</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Sun, 22 Dec 2024 00:00:03 +0000</lastBuildDate><atom:link href="https://blog.jverkamp.com/programming/topics/data-structures/atom.xml" rel="self" type="application/rss+xml"/><item><title>AoC 2024 Day 22: Xorshiftinator</title><link>https://blog.jverkamp.com/2024/12/22/aoc-2024-day-22-xorshiftinator/</link><pubDate>Sun, 22 Dec 2024 00:00:03 +0000</pubDate><guid>https://blog.jverkamp.com/2024/12/22/aoc-2024-day-22-xorshiftinator/</guid><description>&lt;h2 id="source-day-22-monkey-market">Source: &lt;a href="https://adventofcode.com/2024/day/22" target="_blank" rel="noopener">Day 22: Monkey Market&lt;/a>&lt;/h2>
&lt;p>&lt;a href="https://github.com/jpverkamp/advent-of-code/blob/master/2024/src/day22.rs" target="_blank" rel="noopener">Full solution&lt;/a> for today (spoilers!).&lt;/p>
&lt;nav id="TableOfContents">
 &lt;ul>
 &lt;li>&lt;a href="#source-day-22-monkey-market">Source: &lt;a href="https://adventofcode.com/2024/day/22">Day 22: Monkey Market&lt;/a>&lt;/a>&lt;/li>
 &lt;li>&lt;a href="#part-1">Part 1&lt;/a>&lt;/li>
 &lt;li>&lt;a href="#part-2">Part 2&lt;/a>
 &lt;ul>
 &lt;li>&lt;a href="#brute-force">Brute force&lt;/a>&lt;/li>
 &lt;li>&lt;a href="#scan-for-sequence-scores">Scan for sequence scores&lt;/a>&lt;/li>
 &lt;li>&lt;a href="#packing-a-single-u32-instead-of-a-vecdeque">Packing a single &lt;code>u32&lt;/code> instead of a &lt;code>VecDeque&lt;/code>&lt;/a>&lt;/li>
 &lt;li>&lt;a href="#visualizations">Visualizations&lt;/a>&lt;/li>
 &lt;li>&lt;a href="#ones-stats">Ones stats&lt;/a>&lt;/li>
 &lt;/ul>
 &lt;/li>
 &lt;li>&lt;a href="#benchmarks">Benchmarks&lt;/a>&lt;/li>
 &lt;/ul>
&lt;/nav>

&lt;h2 id="part-1">Part 1&lt;/h2>
&lt;blockquote>
&lt;p>Implement a &lt;a href="https://en.wikipedia.org/wiki/PRNG">PRNG&lt;/a> with the following update function:&lt;/p>
&lt;ol>
&lt;li>Multiply by 64, xor with the previous value, &lt;a href="https://en.wikipedia.org/wiki/modulo">modulo&lt;/a> 16777216&lt;/li>
&lt;li>Divide by 32, xor with the previous value (from step 1), modulo 16777216&lt;/li>
&lt;li>Multiply by 2048, xor with the previous value (from step 2), module 16777216&lt;/li>
&lt;/ol>
&lt;p>For each of a series of seeds, sum the 2000th generated number.&lt;/p>&lt;/blockquote></description></item><item><title>AoC 2024 Day 5: (Not) Transitivinator</title><link>https://blog.jverkamp.com/2024/12/05/aoc-2024-day-5-not-transitivinator/</link><pubDate>Thu, 05 Dec 2024 00:00:03 +0000</pubDate><guid>https://blog.jverkamp.com/2024/12/05/aoc-2024-day-5-not-transitivinator/</guid><description>&lt;h2 id="source-day-day-5-print-queue">Source: &lt;a href="https://adventofcode.com/2024/day/5" target="_blank" rel="noopener">Day Day 5: Print Queue&lt;/a>&lt;/h2>
&lt;p>&lt;a href="https://github.com/jpverkamp/advent-of-code/blob/master/2024/src/day5.rs" target="_blank" rel="noopener">Full solution&lt;/a> for today (spoilers!).&lt;/p>
&lt;nav id="TableOfContents">
 &lt;ul>
 &lt;li>&lt;a href="#source-day-day-5-print-queue">Source: &lt;a href="https://adventofcode.com/2024/day/5">Day Day 5: Print Queue&lt;/a>&lt;/a>&lt;/li>
 &lt;li>&lt;a href="#part-1">Part 1&lt;/a>
 &lt;ul>
 &lt;li>&lt;a href="#parsing">Parsing&lt;/a>&lt;/li>
 &lt;li>&lt;a href="#is-it-transitive">Is it transitive?&lt;/a>&lt;/li>
 &lt;/ul>
 &lt;/li>
 &lt;li>&lt;a href="#part-2">Part 2&lt;/a>&lt;/li>
 &lt;li>&lt;a href="#benchmarks">Benchmarks&lt;/a>&lt;/li>
 &lt;li>&lt;a href="#optimization-1-drop-the-hashmap">Optimization 1: Drop the &lt;code>hashmap&lt;/code>&lt;/a>&lt;/li>
 &lt;li>&lt;a href="#optimization-2-bitvec">Optimization 2: &lt;code>bitvec&lt;/code>&lt;/a>&lt;/li>
 &lt;li>&lt;a href="#optimization-attempt-3-a-vec-of-pairs">Optimization (attempt) 3: A &lt;code>vec&lt;/code> of pairs&lt;/a>
 &lt;ul>
 &lt;li>&lt;a href="#optimization-attempt-4-sorted-vec-of-pairs">Optimization (attempt) 4: Sorted &lt;code>vec&lt;/code> of pairs&lt;/a>&lt;/li>
 &lt;/ul>
 &lt;/li>
 &lt;li>&lt;a href="#overall-timing-graph">Overall timing graph&lt;/a>&lt;/li>
 &lt;/ul>
&lt;/nav>

&lt;h2 id="part-1">Part 1&lt;/h2>
&lt;blockquote>
&lt;p>The input is a list of pairs of the form &lt;code>a|b&lt;/code> which defines that &lt;code>b&lt;/code> must not come before &lt;code>a&lt;/code>, an empty line, and then a list of values &lt;code>a,b,c,d&lt;/code>.&lt;/p>
&lt;p>For each line that is valid for all given &lt;code>a|b&lt;/code> rules, sum the middle number of each list.&lt;/p>&lt;/blockquote></description></item><item><title>StackLang Part IX: Better Testing</title><link>https://blog.jverkamp.com/2023/08/12/stacklang-part-ix-better-testing/</link><pubDate>Sat, 12 Aug 2023 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2023/08/12/stacklang-part-ix-better-testing/</guid><description>&lt;p>Two posts in two days? Madness!&lt;/p>
&lt;div class="ranking">
 &lt;h3 class="title">Posts in &lt;a href="https://blog.jverkamp.com/series/stacklang/">StackLang&lt;/a>:&lt;/h3>
 &lt;div class="content">
 &lt;ul>&lt;li>
 &lt;a href="https://blog.jverkamp.com/2023/08/12/stacklang-part-ix-better-testing/">
 StackLang Part IX: Better Testing
 &lt;/a>&lt;/li>&lt;li>
 &lt;a href="https://blog.jverkamp.com/2023/08/11/stacklang-part-viii-compiler-stacks/">
 StackLang Part VIII: Compiler Stacks
 &lt;/a>&lt;/li>&lt;li>
 &lt;a href="https://blog.jverkamp.com/2023/08/05/stacklang-part-vii-new-cli-and-datatypes/">
 StackLang Part VII: New CLI and Datatypes
 &lt;/a>&lt;/li>&lt;li>
 &lt;a href="https://blog.jverkamp.com/2023/07/16/stacklang-part-vi-some-examples/">
 StackLang Part VI: Some Examples
 &lt;/a>&lt;/li>&lt;li>
 &lt;a href="https://blog.jverkamp.com/2023/07/12/stacklang-part-v-compiling-to-c/">
 StackLang Part V: Compiling to C
 &lt;/a>&lt;/li>&lt;li>
 &lt;a href="https://blog.jverkamp.com/2023/05/01/stacklang-part-iv-an-interpreter/">
 StackLang Part IV: An Interpreter
 &lt;/a>&lt;/li>&lt;li>
 &lt;a href="https://blog.jverkamp.com/2023/04/24/stacklang-part-iii-the-parser/">
 StackLang Part III: The Parser
 &lt;/a>&lt;/li>&lt;li>
 &lt;a href="https://blog.jverkamp.com/2023/04/16/stacklang-part-ii-the-lexer/">
 StackLang Part II: The Lexer
 &lt;/a>&lt;/li>&lt;li>
 &lt;a href="https://blog.jverkamp.com/2023/04/14/stacklang-part-i-the-idea/">
 StackLang Part I: The Idea
 &lt;/a>&lt;/li>&lt;/ul>
 &lt;/div>
&lt;/div>

&lt;p>But really, it got a bit late yesterday so I figured I&amp;rsquo;d split this into two different posts.&lt;/p></description></item><item><title>StackLang Part VIII: Compiler Stacks</title><link>https://blog.jverkamp.com/2023/08/11/stacklang-part-viii-compiler-stacks/</link><pubDate>Fri, 11 Aug 2023 23:59:00 +0000</pubDate><guid>https://blog.jverkamp.com/2023/08/11/stacklang-part-viii-compiler-stacks/</guid><description>&lt;p>Let&amp;rsquo;s continue &lt;a href="https://blog.jverkamp.com/2023/08/05/stacklang-part-vii-new-cli-and-datatypes/">StackLang Part VII: New CLI and Datatypes&lt;/a> and implement &lt;del>lists&lt;/del> stacks in the compiler!&lt;/p>
&lt;div class="ranking">
 &lt;h3 class="title">Posts in &lt;a href="https://blog.jverkamp.com/series/stacklang/">StackLang&lt;/a>:&lt;/h3>
 &lt;div class="content">
 &lt;ul>&lt;li>
 &lt;a href="https://blog.jverkamp.com/2023/08/12/stacklang-part-ix-better-testing/">
 StackLang Part IX: Better Testing
 &lt;/a>&lt;/li>&lt;li>
 &lt;a href="https://blog.jverkamp.com/2023/08/11/stacklang-part-viii-compiler-stacks/">
 StackLang Part VIII: Compiler Stacks
 &lt;/a>&lt;/li>&lt;li>
 &lt;a href="https://blog.jverkamp.com/2023/08/05/stacklang-part-vii-new-cli-and-datatypes/">
 StackLang Part VII: New CLI and Datatypes
 &lt;/a>&lt;/li>&lt;li>
 &lt;a href="https://blog.jverkamp.com/2023/07/16/stacklang-part-vi-some-examples/">
 StackLang Part VI: Some Examples
 &lt;/a>&lt;/li>&lt;li>
 &lt;a href="https://blog.jverkamp.com/2023/07/12/stacklang-part-v-compiling-to-c/">
 StackLang Part V: Compiling to C
 &lt;/a>&lt;/li>&lt;li>
 &lt;a href="https://blog.jverkamp.com/2023/05/01/stacklang-part-iv-an-interpreter/">
 StackLang Part IV: An Interpreter
 &lt;/a>&lt;/li>&lt;li>
 &lt;a href="https://blog.jverkamp.com/2023/04/24/stacklang-part-iii-the-parser/">
 StackLang Part III: The Parser
 &lt;/a>&lt;/li>&lt;li>
 &lt;a href="https://blog.jverkamp.com/2023/04/16/stacklang-part-ii-the-lexer/">
 StackLang Part II: The Lexer
 &lt;/a>&lt;/li>&lt;li>
 &lt;a href="https://blog.jverkamp.com/2023/04/14/stacklang-part-i-the-idea/">
 StackLang Part I: The Idea
 &lt;/a>&lt;/li>&lt;/ul>
 &lt;/div>
&lt;/div>

&lt;p>In this post:&lt;/p></description></item><item><title>StackLang Part VII: New CLI and Datatypes</title><link>https://blog.jverkamp.com/2023/08/05/stacklang-part-vii-new-cli-and-datatypes/</link><pubDate>Sat, 05 Aug 2023 23:59:00 +0000</pubDate><guid>https://blog.jverkamp.com/2023/08/05/stacklang-part-vii-new-cli-and-datatypes/</guid><description>&lt;p>Another day, another Stacklang!&lt;/p>
&lt;div class="ranking">
 &lt;h3 class="title">Posts in &lt;a href="https://blog.jverkamp.com/series/stacklang/">StackLang&lt;/a>:&lt;/h3>
 &lt;div class="content">
 &lt;ul>&lt;li>
 &lt;a href="https://blog.jverkamp.com/2023/08/12/stacklang-part-ix-better-testing/">
 StackLang Part IX: Better Testing
 &lt;/a>&lt;/li>&lt;li>
 &lt;a href="https://blog.jverkamp.com/2023/08/11/stacklang-part-viii-compiler-stacks/">
 StackLang Part VIII: Compiler Stacks
 &lt;/a>&lt;/li>&lt;li>
 &lt;a href="https://blog.jverkamp.com/2023/08/05/stacklang-part-vii-new-cli-and-datatypes/">
 StackLang Part VII: New CLI and Datatypes
 &lt;/a>&lt;/li>&lt;li>
 &lt;a href="https://blog.jverkamp.com/2023/07/16/stacklang-part-vi-some-examples/">
 StackLang Part VI: Some Examples
 &lt;/a>&lt;/li>&lt;li>
 &lt;a href="https://blog.jverkamp.com/2023/07/12/stacklang-part-v-compiling-to-c/">
 StackLang Part V: Compiling to C
 &lt;/a>&lt;/li>&lt;li>
 &lt;a href="https://blog.jverkamp.com/2023/05/01/stacklang-part-iv-an-interpreter/">
 StackLang Part IV: An Interpreter
 &lt;/a>&lt;/li>&lt;li>
 &lt;a href="https://blog.jverkamp.com/2023/04/24/stacklang-part-iii-the-parser/">
 StackLang Part III: The Parser
 &lt;/a>&lt;/li>&lt;li>
 &lt;a href="https://blog.jverkamp.com/2023/04/16/stacklang-part-ii-the-lexer/">
 StackLang Part II: The Lexer
 &lt;/a>&lt;/li>&lt;li>
 &lt;a href="https://blog.jverkamp.com/2023/04/14/stacklang-part-i-the-idea/">
 StackLang Part I: The Idea
 &lt;/a>&lt;/li>&lt;/ul>
 &lt;/div>
&lt;/div>

&lt;p>Today, we&amp;rsquo;ve got two main parts to work on:&lt;/p></description></item><item><title>StackLang Part VI: Some Examples</title><link>https://blog.jverkamp.com/2023/07/16/stacklang-part-vi-some-examples/</link><pubDate>Sun, 16 Jul 2023 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2023/07/16/stacklang-part-vi-some-examples/</guid><description>&lt;p>We&amp;rsquo;ve gone through all sorts of things building up the StackLang language so far:&lt;/p>
&lt;div class="ranking">
 &lt;h3 class="title">Posts in &lt;a href="https://blog.jverkamp.com/series/stacklang/">StackLang&lt;/a>:&lt;/h3>
 &lt;div class="content">
 &lt;ul>&lt;li>
 &lt;a href="https://blog.jverkamp.com/2023/08/12/stacklang-part-ix-better-testing/">
 StackLang Part IX: Better Testing
 &lt;/a>&lt;/li>&lt;li>
 &lt;a href="https://blog.jverkamp.com/2023/08/11/stacklang-part-viii-compiler-stacks/">
 StackLang Part VIII: Compiler Stacks
 &lt;/a>&lt;/li>&lt;li>
 &lt;a href="https://blog.jverkamp.com/2023/08/05/stacklang-part-vii-new-cli-and-datatypes/">
 StackLang Part VII: New CLI and Datatypes
 &lt;/a>&lt;/li>&lt;li>
 &lt;a href="https://blog.jverkamp.com/2023/07/16/stacklang-part-vi-some-examples/">
 StackLang Part VI: Some Examples
 &lt;/a>&lt;/li>&lt;li>
 &lt;a href="https://blog.jverkamp.com/2023/07/12/stacklang-part-v-compiling-to-c/">
 StackLang Part V: Compiling to C
 &lt;/a>&lt;/li>&lt;li>
 &lt;a href="https://blog.jverkamp.com/2023/05/01/stacklang-part-iv-an-interpreter/">
 StackLang Part IV: An Interpreter
 &lt;/a>&lt;/li>&lt;li>
 &lt;a href="https://blog.jverkamp.com/2023/04/24/stacklang-part-iii-the-parser/">
 StackLang Part III: The Parser
 &lt;/a>&lt;/li>&lt;li>
 &lt;a href="https://blog.jverkamp.com/2023/04/16/stacklang-part-ii-the-lexer/">
 StackLang Part II: The Lexer
 &lt;/a>&lt;/li>&lt;li>
 &lt;a href="https://blog.jverkamp.com/2023/04/14/stacklang-part-i-the-idea/">
 StackLang Part I: The Idea
 &lt;/a>&lt;/li>&lt;/ul>
 &lt;/div>
&lt;/div>

&lt;p>But what can we actually &lt;em>do&lt;/em> with it?&lt;/p></description></item><item><title>StackLang Part V: Compiling to C</title><link>https://blog.jverkamp.com/2023/07/12/stacklang-part-v-compiling-to-c/</link><pubDate>Wed, 12 Jul 2023 12:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2023/07/12/stacklang-part-v-compiling-to-c/</guid><description>&lt;p>It&amp;rsquo;s been a bit, but I hope it&amp;rsquo;s worth it. StackLang, part 5: compiling to C!&lt;/p></description></item><item><title>StackLang Part IV: An Interpreter</title><link>https://blog.jverkamp.com/2023/05/01/stacklang-part-iv-an-interpreter/</link><pubDate>Mon, 01 May 2023 23:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2023/05/01/stacklang-part-iv-an-interpreter/</guid><description>&lt;p>StackLang, part 4: an interpreter. Here we go again!&lt;/p>
&lt;p>This time, the goal is to actually get code running&lt;/p></description></item><item><title>StackLang Part III: The Parser</title><link>https://blog.jverkamp.com/2023/04/24/stacklang-part-iii-the-parser/</link><pubDate>Mon, 24 Apr 2023 00:01:00 +0000</pubDate><guid>https://blog.jverkamp.com/2023/04/24/stacklang-part-iii-the-parser/</guid><description>&lt;p>StackLang, part 3: parsing. This is going to be the most complicated one thus far! Onward.&lt;/p></description></item><item><title>StackLang Part II: The Lexer</title><link>https://blog.jverkamp.com/2023/04/16/stacklang-part-ii-the-lexer/</link><pubDate>Sun, 16 Apr 2023 23:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2023/04/16/stacklang-part-ii-the-lexer/</guid><description>&lt;p>StackLang, part 2: lexing.&lt;/p>
&lt;p>It&amp;rsquo;s quite often the simplest part of implementing a programming language (although parsers for s-expression based languages come close), but it&amp;rsquo;s still something that needs done. So here we go!&lt;/p></description></item><item><title>StackLang Part I: The Idea</title><link>https://blog.jverkamp.com/2023/04/14/stacklang-part-i-the-idea/</link><pubDate>Fri, 14 Apr 2023 23:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2023/04/14/stacklang-part-i-the-idea/</guid><description>&lt;p>I enjoy writing programming languages. &lt;a href="https://blog.jverkamp.com/2013/08/21/a-tiny-virtual-machine-in-racket/">Example: Tiny&lt;/a>. Let’s do that again.&lt;/p>
&lt;p>This time, StackLang:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-text" data-lang="text">&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> @[n fact]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> { n 1 - $fact fact n * }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> N 1 &amp;lt;= if
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>} @fact
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>5 $fact fact writeln
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Bit of gibberish there, I suppose, but the goal is to write everything in a postfix/stack based model. So &lt;code>n 1 - $fact fact n *&lt;/code> is equivalent to &lt;code>fact(fact, n - 1) * n&lt;/code> in a more traditional language.&lt;/p>
&lt;p>Over the next few posts, I hope to write up where I am thus far and what’s next.&lt;/p></description></item><item><title>Cloning Redis in Rust: RESP [Part 1]</title><link>https://blog.jverkamp.com/2023/01/31/cloning-redis-in-rust-resp-part-1/</link><pubDate>Tue, 31 Jan 2023 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2023/01/31/cloning-redis-in-rust-resp-part-1/</guid><description>&lt;p>Recently, I read through &lt;a href="https://blog.jverkamp.com/2023/01/31/build-your-own-redis-with-c/c-/">Build Your Own Redis with C/C&amp;#43;&amp;#43;&lt;/a>. C/C++ are ugly, so let&amp;rsquo;s run through it in Rust!&lt;/p>
&lt;p>My goal: implement some large subset of &lt;a href="https://redis.io/" target="_blank" rel="noopener">Redis&lt;/a> (both server and client) in Rust. For any features I implement, it should be compatible with Redis off the shelf. I should be able to use their client with my server and their server with my client and it should just work.&lt;/p>
&lt;p>No idea if this is going to work out, but it sounds like an interesting problem!&lt;/p>
&lt;p>First task: &lt;a href="https://redis.io/docs/reference/protocol-spec/" target="_blank" rel="noopener">the REdis Serialization Protocol (RESP)&lt;/a>.&lt;/p></description></item><item><title>AoC 2022 Day 21: Yellinator</title><link>https://blog.jverkamp.com/2022/12/21/aoc-2022-day-21-yellinator/</link><pubDate>Wed, 21 Dec 2022 00:00:03 +0000</pubDate><guid>https://blog.jverkamp.com/2022/12/21/aoc-2022-day-21-yellinator/</guid><description>&lt;h2 id="source-monkey-math">Source: &lt;a href="https://adventofcode.com/2022/day/21" target="_blank" rel="noopener">Monkey Math&lt;/a>&lt;/h2>
&lt;h2 id="part-1">Part 1&lt;/h2>
&lt;blockquote>
&lt;p>Given a series of equations of either the form &lt;code>dbpl: 5&lt;/code> or &lt;code>cczh: sllz + lgvd&lt;/code>, determine what the value of the node labeled &lt;code>root&lt;/code> is.&lt;/p>&lt;/blockquote></description></item><item><title>AoC 2022 Day 18: Lavinator</title><link>https://blog.jverkamp.com/2022/12/18/aoc-2022-day-18-lavinator/</link><pubDate>Sun, 18 Dec 2022 00:00:03 +0000</pubDate><guid>https://blog.jverkamp.com/2022/12/18/aoc-2022-day-18-lavinator/</guid><description>&lt;h2 id="source-boiling-boulders">Source: &lt;a href="https://adventofcode.com/2022/day/18" target="_blank" rel="noopener">Boiling Boulders&lt;/a>&lt;/h2>
&lt;h2 id="part-1">Part 1&lt;/h2>
&lt;blockquote>
&lt;p>Given a list of 1x1x1 cubes, determine the total surface area of the cubes.&lt;/p>&lt;/blockquote></description></item><item><title>AoC 2022 Day 8: Treetopinator</title><link>https://blog.jverkamp.com/2022/12/08/aoc-2022-day-8-treetopinator/</link><pubDate>Thu, 08 Dec 2022 00:00:03 +0000</pubDate><guid>https://blog.jverkamp.com/2022/12/08/aoc-2022-day-8-treetopinator/</guid><description>&lt;h2 id="source-treetop-tree-house">Source: &lt;a href="https://adventofcode.com/2022/day/8" target="_blank" rel="noopener">Treetop Tree House&lt;/a>&lt;/h2>
&lt;h2 id="part-1">Part 1&lt;/h2>
&lt;blockquote>
&lt;p>Given a grid of numbers, count how many of these numbers have a direct path in any cardinal direction to the edge of the grid.&lt;/p>&lt;/blockquote></description></item><item><title>AoC 2022 Day 6: Ring Buffinator</title><link>https://blog.jverkamp.com/2022/12/06/aoc-2022-day-6-ring-buffinator/</link><pubDate>Tue, 06 Dec 2022 00:00:03 +0000</pubDate><guid>https://blog.jverkamp.com/2022/12/06/aoc-2022-day-6-ring-buffinator/</guid><description>&lt;h2 id="source-tuning-trouble">Source: &lt;a href="https://adventofcode.com/2022/day/6" target="_blank" rel="noopener">Tuning Trouble&lt;/a>&lt;/h2>
&lt;h2 id="part-1">Part 1&lt;/h2>
&lt;blockquote>
&lt;p>Given input as a list of characters, find the index of the first &lt;a href="https://en.wikipedia.org/wiki/sliding%20window">sliding window&lt;/a> (size 4) where all of the characters are distinct.&lt;/p>&lt;/blockquote></description></item><item><title>AoC 2022 Day 5: Stackinator</title><link>https://blog.jverkamp.com/2022/12/05/aoc-2022-day-5-stackinator/</link><pubDate>Mon, 05 Dec 2022 00:00:03 +0000</pubDate><guid>https://blog.jverkamp.com/2022/12/05/aoc-2022-day-5-stackinator/</guid><description>&lt;h2 id="source-supply-stacks">Source: &lt;a href="https://adventofcode.com/2022/day/5" target="_blank" rel="noopener">Supply Stacks&lt;/a>&lt;/h2>
&lt;h2 id="part-1">Part 1&lt;/h2>
&lt;blockquote>
&lt;p>Given a list of stacks of &lt;em>syntax 1&lt;/em> and instructions in the form &lt;em>syntax 2&lt;/em>, apply each instruction to pop &lt;code>qty&lt;/code> items from the stack &lt;code>src&lt;/code> and put them on &lt;code>dst&lt;/code> one at a time.&lt;/p>&lt;/blockquote>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-text" data-lang="text">&lt;span style="display:flex;">&lt;span>Syntax 1: Stacks
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> [D] 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>[N] [C] 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>[Z] [M] [P]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 1 2 3 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Syntax 2: Instructions
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>move 1 from 2 to 1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>move 3 from 1 to 3
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>move 2 from 2 to 1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>move 1 from 1 to 2
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>AoC 2021 Day 25: Cucumbinator</title><link>https://blog.jverkamp.com/2021/12/25/aoc-2021-day-25-cucumbinator/</link><pubDate>Sat, 25 Dec 2021 00:00:03 +0000</pubDate><guid>https://blog.jverkamp.com/2021/12/25/aoc-2021-day-25-cucumbinator/</guid><description>&lt;h3 id="source-sea-cucumber">Source: &lt;a href="https://adventofcode.com/2021/day/25" target="_blank" rel="noopener">Sea Cucumber&lt;/a>&lt;/h3>
&lt;h4 id="part-1-load-a-grid-of-empty-cells--east-movers--and-south-movers-v-each-step-move-all-east-movers-than-all-south-movers-only-if-they-can-this-iteration-wrap-eastwest-and-northsouth-how-many-steps-does-it-take-the-movers-to-get-stuck">&lt;strong>Part 1:&lt;/strong> Load a grid of empty cells (&lt;code>.&lt;/code>), east movers (&lt;code>&amp;gt;&lt;/code>), and south movers (&lt;code>v&lt;/code>). Each step, move all east movers than all south movers (only if they can this iteration). Wrap east/west and north/south. How many steps does it take the movers to get stuck?&lt;/h4></description></item><item><title>AoC 2021 Day 24: Aluinator</title><link>https://blog.jverkamp.com/2021/12/24/aoc-2021-day-24-aluinator/</link><pubDate>Fri, 24 Dec 2021 00:00:03 +0000</pubDate><guid>https://blog.jverkamp.com/2021/12/24/aoc-2021-day-24-aluinator/</guid><description>&lt;h3 id="source-arithmetic-logic-unit">Source: &lt;a href="https://adventofcode.com/2021/day/24" target="_blank" rel="noopener">Arithmetic Logic Unit&lt;/a>&lt;/h3>
&lt;h4 id="part-1-simulate-an-alu-with-4-registers-w-x-y-and-z-and-instructions-defined-below-find-the-largest-14-digit-number-with-no-0-digits-which-result-in-z0">&lt;strong>Part 1:&lt;/strong> Simulate an ALU with 4 registers (&lt;code>w&lt;/code>, &lt;code>x&lt;/code>, &lt;code>y&lt;/code>, and &lt;code>z&lt;/code>) and instructions defined below. Find the largest 14 digit number with no 0 digits which result in &lt;code>z=0&lt;/code>.&lt;/h4></description></item><item><title>AoC 2021 Day 22: Cubinator</title><link>https://blog.jverkamp.com/2021/12/22/aoc-2021-day-22-cubinator/</link><pubDate>Wed, 22 Dec 2021 00:00:05 +0000</pubDate><guid>https://blog.jverkamp.com/2021/12/22/aoc-2021-day-22-cubinator/</guid><description>&lt;h3 id="source-reactor-reboot">Source: &lt;a href="https://adventofcode.com/2021/day/22" target="_blank" rel="noopener">Reactor Reboot&lt;/a>&lt;/h3>
&lt;h4 id="part-1-given-a-series-of-3d-cubes-that-either-turn-on-all-or-turn-off-all-points-in-their-region-calculate-how-many-points-in-the-region--5050-5050-5050-are-on-at-the-end">&lt;strong>Part 1:&lt;/strong> Given a series of 3D cubes that either turn ON all or turn OFF all points in their region, calculate how many points in the region (-50..50,-50..50,-50..50) are ON at the end.&lt;/h4></description></item><item><title>AoC 2021 Day 20: Enhancinator</title><link>https://blog.jverkamp.com/2021/12/20/aoc-2021-day-20-enhancinator/</link><pubDate>Mon, 20 Dec 2021 00:00:05 +0000</pubDate><guid>https://blog.jverkamp.com/2021/12/20/aoc-2021-day-20-enhancinator/</guid><description>&lt;h3 id="source-trench-map">Source: &lt;a href="https://adventofcode.com/2021/day/20" target="_blank" rel="noopener">Trench Map&lt;/a>&lt;/h3>
&lt;h4 id="part-1-given-a-9-1--update-function-take-the-pixel-and-8-surrounding-pixels-as-a-9-bit-index-into-the-function-and-a-binary-image-apply-the-function-twice-and-count-the-number-of-lit-pixels-assume-that-the-canvas-is-infinite">&lt;strong>Part 1:&lt;/strong> Given a 9-&amp;gt;1 &lt;a href="https://en.wikipedia.org/wiki/cellular%20automota">cellular automota&lt;/a> update function (take the pixel and 8 surrounding pixels as a 9-bit index into the function) and a binary image, apply the function twice and count the number of &amp;rsquo;lit&amp;rsquo; pixels. Assume that the canvas is infinite.&lt;/h4></description></item><item><title>AoC 2021 Day 19: Point Matchinator</title><link>https://blog.jverkamp.com/2021/12/19/aoc-2021-day-19-point-matchinator/</link><pubDate>Sun, 19 Dec 2021 00:00:05 +0000</pubDate><guid>https://blog.jverkamp.com/2021/12/19/aoc-2021-day-19-point-matchinator/</guid><description>&lt;h3 id="source-snailfish">Source: &lt;a href="https://adventofcode.com/2021/day/19" target="_blank" rel="noopener">Snailfish&lt;/a>&lt;/h3>
&lt;h4 id="part-1-you-will-be-given-a-series-of-scanners-each-of-which-will-tell-you-the-location-from-their-point-of-view-of-a-series-of-beacons-each-scanner-may-be-flipped-or-rotated-in-increments-of-90-degrees-in-any-direction-determine-where-each-scanner-and-beacon-is-by-overlaying-the-maps-with-at-least-pairwise-12-matches">&lt;strong>Part 1:&lt;/strong> You will be given a series of Scanners, each of which will tell you the location (from their point of view) of a series of Beacons. Each Scanner may be flipped or rotated in increments of 90 degrees in any direction. Determine where each Scanner and Beacon is by overlaying the maps (with at least pairwise 12 matches).&lt;/h4></description></item><item><title>AoC 2021 Day 18: Pairs of Pairs</title><link>https://blog.jverkamp.com/2021/12/18/aoc-2021-day-18-pairs-of-pairs/</link><pubDate>Sat, 18 Dec 2021 00:00:05 +0000</pubDate><guid>https://blog.jverkamp.com/2021/12/18/aoc-2021-day-18-pairs-of-pairs/</guid><description>&lt;h3 id="source-snailfish">Source: &lt;a href="https://adventofcode.com/2021/day/18" target="_blank" rel="noopener">Snailfish&lt;/a>&lt;/h3>
&lt;h4 id="part-1-given-the-following-definition-of-snailfish-numbers-add-a-series-of-snailfish-numbers-and-return-the-magnitude-of-the-result">&lt;strong>Part 1:&lt;/strong> Given the following definition of Snailfish numbers, add a series of Snailfish numbers and return the magnitude of the result.&lt;/h4></description></item><item><title>AoC 2021 Day 16: Depacketinator</title><link>https://blog.jverkamp.com/2021/12/16/aoc-2021-day-16-depacketinator/</link><pubDate>Thu, 16 Dec 2021 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2021/12/16/aoc-2021-day-16-depacketinator/</guid><description>&lt;h3 id="source-packet-decoder">Source: &lt;a href="https://adventofcode.com/2021/day/16" target="_blank" rel="noopener">Packet Decoder&lt;/a>&lt;/h3>
&lt;h4 id="part-1-given-a-recursive-binary-packet-definition-see-below-parse-the-given-packet-return-the-sum-of-each-packets-version">&lt;strong>Part 1:&lt;/strong> Given a recursive binary packet definition (see below), parse the given packet. Return the sum of each packet&amp;rsquo;s &lt;code>version&lt;/code>.&lt;/h4></description></item><item><title>AoC 2021 Day 12: Submarine Spider</title><link>https://blog.jverkamp.com/2021/12/12/aoc-2021-day-12-submarine-spider/</link><pubDate>Sun, 12 Dec 2021 00:00:15 +0000</pubDate><guid>https://blog.jverkamp.com/2021/12/12/aoc-2021-day-12-submarine-spider/</guid><description>&lt;h3 id="source-passage-pathing">Source: &lt;a href="https://adventofcode.com/2021/day/12" target="_blank" rel="noopener">Passage Pathing&lt;/a>&lt;/h3>
&lt;h4 id="part-1-given-a-list-of-edges-in-a-bi-directional-graph-count-the-number-of-paths-from-start-to-end-such-that-nodes-named-with-lowercase-letters-are-visited-once-and-nodes-with-uppercase-letters-can-be-visited-any-number-of-times">&lt;strong>Part 1:&lt;/strong> Given a list of edges in a bi-directional graph, count the number of paths from &lt;code>start&lt;/code> to &lt;code>end&lt;/code> such that nodes named with lowercase letters are visited once, and nodes with uppercase letters can be visited any number of times.&lt;/h4></description></item><item><title>AoC 2021 Day 11: Octopus Flashinator</title><link>https://blog.jverkamp.com/2021/12/11/aoc-2021-day-11-octopus-flashinator/</link><pubDate>Sat, 11 Dec 2021 00:00:15 +0000</pubDate><guid>https://blog.jverkamp.com/2021/12/11/aoc-2021-day-11-octopus-flashinator/</guid><description>&lt;h3 id="source-dumbo-octopus">Source: &lt;a href="https://adventofcode.com/2021/day/11" target="_blank" rel="noopener">Dumbo Octopus&lt;/a>&lt;/h3>
&lt;h4 id="part-1-simulate-a-grid-of-numbers-such-that-on-each-tick-advance-all-numbers-by-1-any-number-that-increases-over-9-will-flash-and-add-1-to-all-neighbors-recursively-but-each-cell-can-only-flash-once-and-then-reset-to-0-count-the-number-of-flashes-in-the-first-100-ticks">&lt;strong>Part 1:&lt;/strong> Simulate a grid of numbers such that on each tick: advance all numbers by 1, any number that increases over 9 will &amp;lsquo;flash&amp;rsquo; and add 1 to all neighbors (recursively, but each cell can only flash once) and then reset to 0. Count the number of flashes in the first 100 ticks.&lt;/h4></description></item><item><title>AoC 2021 Day 10: Chunkinator</title><link>https://blog.jverkamp.com/2021/12/10/aoc-2021-day-10-chunkinator/</link><pubDate>Fri, 10 Dec 2021 00:00:15 +0000</pubDate><guid>https://blog.jverkamp.com/2021/12/10/aoc-2021-day-10-chunkinator/</guid><description>&lt;h3 id="source-syntax-scoring">Source: &lt;a href="https://adventofcode.com/2021/day/10" target="_blank" rel="noopener">Syntax Scoring&lt;/a>&lt;/h3>
&lt;h4 id="part-1-given-a-sequence-of----and--with-nesting-allowed-find-the-first-syntax-error-where-the-wrong-closing-symbol-is-used-scoring-3-57-1197-and-25137-respectively-for-each-error-calculate-the-total-error-score">&lt;strong>Part 1:&lt;/strong> Given a sequence of () [] {}, and &amp;lt;&amp;gt; with nesting allowed. Find the first syntax error (where the wrong closing symbol is used). Scoring 3, 57, 1197, and 25137 respectively for each error, calculate the total error score.&lt;/h4></description></item><item><title>AoC 2021 Day 9: Local Minimum Deminifier</title><link>https://blog.jverkamp.com/2021/12/09/aoc-2021-day-9-local-minimum-deminifier/</link><pubDate>Thu, 09 Dec 2021 00:00:15 +0000</pubDate><guid>https://blog.jverkamp.com/2021/12/09/aoc-2021-day-9-local-minimum-deminifier/</guid><description>&lt;h3 id="source-smoke-basin">Source: &lt;a href="https://adventofcode.com/2021/day/9" target="_blank" rel="noopener">Smoke Basin&lt;/a>&lt;/h3>
&lt;h4 id="part-1-given-a-heightmap-find-all-local-minimums-return-the-sum-of-minimum-height--1-for-each-local-minimum">&lt;strong>Part 1:&lt;/strong> Given a heightmap, find all local minimums. Return the sum of (minimum height + 1) for each local minimum.&lt;/h4></description></item><item><title>AoC 2017 Day 12: Gridlock</title><link>https://blog.jverkamp.com/2017/12/12/aoc-2017-day-12-gridlock/</link><pubDate>Tue, 12 Dec 2017 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2017/12/12/aoc-2017-day-12-gridlock/</guid><description>&lt;h3 id="source-digital-plumber">Source: &lt;a href="http://adventofcode.com/2017/day/12" target="_blank" rel="noopener">Digital Plumber&lt;/a>&lt;/h3>
&lt;blockquote>
&lt;p>&lt;strong>Part 1:&lt;/strong> A network of nodes is defined by a list of lines formatted as such:&lt;/p>&lt;/blockquote>
&lt;blockquote>
&lt;pre tabindex="0">&lt;code>&lt;/code>&lt;/pre>&lt;/blockquote>
&lt;p>2 &amp;lt;-&amp;gt; 0, 3, 4&lt;/p>
&lt;pre tabindex="0">&lt;code>
&amp;gt; In this case, node `2` is connected to `0`, `3`, and `4` and vice versa.

&amp;gt; How many nodes are in the group that contains the node `0`?





First, load the data into an [[wiki:adjacency map]]():

```python
nodes = set()
neighbors = collections.defaultdict(set)

for line in lib.input():
 source, destinations = line.split(&amp;#39;&amp;lt;-&amp;gt;&amp;#39;)
 source = int(source.strip())
 nodes.add(source)

 for destination in destinations.strip().split(&amp;#39;,&amp;#39;):
 destination = int(destination.strip())
 nodes.add(destination)

 neighbors[source].add(destination)
 neighbors[destination].add(source)
&lt;/code>&lt;/pre>&lt;p>Then, write a function that can take a node and recursively expand until it finds all nodes in the same group:&lt;/p></description></item><item><title>AoC 2017 Day 7: Tree</title><link>https://blog.jverkamp.com/2017/12/07/aoc-2017-day-7-tree/</link><pubDate>Thu, 07 Dec 2017 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2017/12/07/aoc-2017-day-7-tree/</guid><description>&lt;h3 id="source-recursive-circus">Source: &lt;a href="http://adventofcode.com/2017/day/7" target="_blank" rel="noopener">Recursive Circus&lt;/a>&lt;/h3>
&lt;blockquote>
&lt;p>&lt;strong>Part 1:&lt;/strong> A tree is defined as such:&lt;/p>&lt;/blockquote>
&lt;blockquote>
&lt;ul>
&lt;li>&lt;code>node (weight) -&amp;gt; child1, child2, ...&lt;/code>&lt;/li>
&lt;li>&lt;code>node (weight)&lt;/code>&lt;/li>
&lt;/ul>&lt;/blockquote>
&lt;blockquote>
&lt;p>Where a &lt;code>node&lt;/code> always has a weight, but may or may not have child nodes.&lt;/p>&lt;/blockquote>
&lt;blockquote>
&lt;p>What is the name of the root &lt;code>node&lt;/code> of the tree (the node without a parent)?&lt;/p>&lt;/blockquote></description></item><item><title>AoC 2017 Day 6: Tightrope</title><link>https://blog.jverkamp.com/2017/12/06/aoc-2017-day-6-tightrope/</link><pubDate>Wed, 06 Dec 2017 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2017/12/06/aoc-2017-day-6-tightrope/</guid><description>&lt;h3 id="source-memory-reallocation">Source: &lt;a href="http://adventofcode.com/2017/day/6" target="_blank" rel="noopener">Memory Reallocation&lt;/a>&lt;/h3>
&lt;blockquote>
&lt;p>&lt;strong>Part 1:&lt;/strong> Start with &lt;code>n&lt;/code> stacks of different sizes. Take the largest block and distribute its items starting with &lt;code>n+1&lt;/code> and looping around. How many iterations of this does it take before you see a state you&amp;rsquo;ve seen before?&lt;/p>&lt;/blockquote></description></item><item><title>AoC 2017 Day 3: Spiraly</title><link>https://blog.jverkamp.com/2017/12/03/aoc-2017-day-3-spiraly/</link><pubDate>Sun, 03 Dec 2017 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2017/12/03/aoc-2017-day-3-spiraly/</guid><description>&lt;h3 id="source-spiral-memory">Source: &lt;a href="http://adventofcode.com/2017/day/3" target="_blank" rel="noopener">Spiral Memory&lt;/a>&lt;/h3>
&lt;blockquote>
&lt;p>&lt;strong>Part 1:&lt;/strong> Create a grid in a spiral pattern like so:&lt;/p>&lt;/blockquote>
&lt;blockquote>
&lt;pre tabindex="0">&lt;code>&lt;/code>&lt;/pre>&lt;/blockquote>
&lt;p>17 16 15 14 13
18 5 4 3 12
19 6 1 2 11
20 7 8 9 10
21 22 23&amp;mdash;&amp;gt; &amp;hellip;&lt;/p>
&lt;pre tabindex="0">&lt;code>
&amp;gt; Given a specific index, what is the [[wiki:Manhattan Distance]]() from that point to the origin (`1`)?





This same sort of structure comes up from time to time in [Project Euler](/programming/sources/project-euler/) as well. I&amp;#39;m going to guess we&amp;#39;ll see this again. Seems like a fine contender for a [library function](https://blog.jverkamp.com/2017/12/01/aoc-2017-library-functions/).

Specifically, we&amp;#39;ll create a `SpiralGrid` class that can be used to automatically generate as large of a grid as we want lazily (it won&amp;#39;t generate more of the grid until we need it).

```python
class SpiralGrid():
 &amp;#39;&amp;#39;&amp;#39;
 Generate a spiral grid that looks like this:
 17 16 15 14 13
 18 5 4 3 12
 19 6 1 2 11
 20 7 8 9 10
 21 22 23---&amp;gt; ...

 The point (0, 0) is 1. x runs left to right, y from top to bottom. So the
 point 12 is at (2, -1).
 &amp;#39;&amp;#39;&amp;#39;

 def __init__(self):
 self._indexes = {}
 self._points = {}

 def make_spiral():
 index = 1
 (x, y) = (0, 0)

 yield index, (x, y)

 # Build the layers outwards
 for layer in itertools.count(1):
 # Each layer starts by going right and down one (we&amp;#39;ll go back up before yielding)
 x += 1
 y += 1

 # Go through the four sides, up then left then down then right
 # Repeat 2*layer times per side
 for xd, yd in [(0, -1), (-1, 0), (0, 1), (1, 0)]:
 for step in range(2 * layer):
 index += 1
 x += xd
 y += yd
 yield index, (x, y)

 self._generator = make_spiral()

 def __getitem__(self, key):
 &amp;#39;&amp;#39;&amp;#39;
 Given an index or point return the other.

 If we&amp;#39;re given an integer, it&amp;#39;s an index, return the point.
 If we&amp;#39;re given a tuple, it&amp;#39;s a point, return the index.

 Either way, generate as much data as we need and don&amp;#39;t have.
 &amp;#39;&amp;#39;&amp;#39;

 if isinstance(key, int):
 field = self._indexes
 elif isinstance(key, str):
 key = int(key)
 field = self._indexes
 elif isinstance(key, tuple) and len(key) == 2:
 field = self._points
 else:
 raise ValueError

 while key not in field:
 index, point = next(self._generator)
 self._indexes[index] = point
 self._points[point] = index

 return field[key]
&lt;/code>&lt;/pre>&lt;p>The neat part here is using a &lt;code>&lt;a href="https://docs.python.org/3/search.html?q=generator">generator&lt;/a>&lt;/code>
 to generate the coordinates of points. That way, we can run the generator until we find the point we&amp;rsquo;re looking for and cache any results for later.&lt;/p></description></item><item><title>AoC 2016 Day 20: Filter Table</title><link>https://blog.jverkamp.com/2016/12/20/aoc-2016-day-20-filter-table/</link><pubDate>Tue, 20 Dec 2016 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2016/12/20/aoc-2016-day-20-filter-table/</guid><description>&lt;h3 id="source-firewall-rules">Source: &lt;a href="http://adventofcode.com/2016/day/20" target="_blank" rel="noopener">Firewall Rules&lt;/a>&lt;/h3>
&lt;blockquote>
&lt;p>&lt;strong>Part 1:&lt;/strong> Given a list of integer ranges (a la &lt;code>5-8&lt;/code>), what is the first value not in any given range?&lt;/p>&lt;/blockquote></description></item><item><title>AoC 2016 Day 11: Radiation Avoider</title><link>https://blog.jverkamp.com/2016/12/11/aoc-2016-day-11-radiation-avoider/</link><pubDate>Sun, 11 Dec 2016 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2016/12/11/aoc-2016-day-11-radiation-avoider/</guid><description>&lt;h3 id="source-radioisotope-thermoelectric-generators">Source: &lt;a href="http://adventofcode.com/2016/day/11" target="_blank" rel="noopener">Radioisotope Thermoelectric Generators&lt;/a>&lt;/h3>
&lt;blockquote>
&lt;p>&lt;strong>Part 1:&lt;/strong> Input will be a list of the following form:&lt;/p>&lt;/blockquote>
&lt;blockquote>
&lt;ul>
&lt;li>The first floor contains a hydrogen-compatible microchip and a lithium-compatible microchip.&lt;/li>
&lt;li>The second floor contains a hydrogen generator.&lt;/li>
&lt;li>The third floor contains a lithium generator.&lt;/li>
&lt;li>The fourth floor contains nothing relevant.&lt;/li>
&lt;/ul>&lt;/blockquote>
&lt;blockquote>
&lt;p>You have an elevator that can move exactly 1 or 2 items. You can only leave a microchip on a floor with a non-matching generator if a matching generator is also present.&lt;/p>&lt;/blockquote>
&lt;blockquote>
&lt;p>Move all items to the top (4th) floor.&lt;/p>&lt;/blockquote></description></item><item><title>iOS Backups in Racket: Apps</title><link>https://blog.jverkamp.com/2015/01/29/ios-backups-in-racket-apps/</link><pubDate>Thu, 29 Jan 2015 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2015/01/29/ios-backups-in-racket-apps/</guid><description>&lt;p>So far we&amp;rsquo;ve read &lt;a href="https://blog.jverkamp.com/2015/01/22/ios-backups-in-racket-groundwork/">backup files&lt;/a>, parsed &lt;a href="https://blog.jverkamp.com/2015/01/23/ios-backups-in-racket-contacts/">contacts&lt;/a>, and parsed &lt;a href="https://blog.jverkamp.com/2015/01/27/ios-backups-in-racket-messages/">messages&lt;/a>. Today we&amp;rsquo;re going to dig a little deeper and start parsing apps specifically.&lt;/p></description></item><item><title>iOS Backups in Racket: Messages</title><link>https://blog.jverkamp.com/2015/01/27/ios-backups-in-racket-messages/</link><pubDate>Tue, 27 Jan 2015 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2015/01/27/ios-backups-in-racket-messages/</guid><description>&lt;p>So far we&amp;rsquo;ve &lt;a href="https://blog.jverkamp.com/2015/01/22/ios-backups-in-racket-groundwork/">laid the groundwork&lt;/a>, loading local iOS backups and parsed out &lt;a href="https://blog.jverkamp.com/2015/01/23/ios-backups-in-racket-contacts/">contacts&lt;/a>. Today let&amp;rsquo;s take another step down the rabbit hole and figure out how messages are stored.&lt;/p></description></item><item><title>iOS Backups in Racket: Contacts</title><link>https://blog.jverkamp.com/2015/01/23/ios-backups-in-racket-contacts/</link><pubDate>Fri, 23 Jan 2015 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2015/01/23/ios-backups-in-racket-contacts/</guid><description>&lt;p>After &lt;a href="https://blog.jverkamp.com/2015/01/22/ios-backups-in-racket-groundwork/">yesterday&amp;rsquo;s post&lt;/a> laying the groundwork for looking into &lt;a href="https://blog.jverkamp.com/2015/01/29/ios-backups-in-racket-apps/">iOS Backups&lt;/a>, today why don&amp;rsquo;t we actually start digging into one of the more interesting files: your list of contacts.&lt;/p></description></item><item><title>iOS Backups in Racket: Groundwork</title><link>https://blog.jverkamp.com/2015/01/22/ios-backups-in-racket-groundwork/</link><pubDate>Thu, 22 Jan 2015 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2015/01/22/ios-backups-in-racket-groundwork/</guid><description>&lt;p>For the last little while, I&amp;rsquo;ve been spending my spare programming time working on a slightly larger project than I normally do: a &lt;a href="https://blog.jverkamp.com/2014/06/11/call-stack-bracket-matcher/">Racket&lt;/a> library for reading iOS backups.&lt;/p>
&lt;p>Basically, I want to take the mess that is an iOS backup (not particularly designed to be easy to read by other programs) and extract some information from it, backing it up in a more easily readable format.&lt;/p>
&lt;p>Specifically, I would like to be able to backup:&lt;/p>
&lt;ul>
&lt;li>Contact information: Even thought they&amp;rsquo;re mostly from Facebook, it will be useful for the other parts&lt;/li>
&lt;li>Messages: These are taking up a large portion of my phone&amp;rsquo;s hard drive, mostly due to attachments. Back them up just in case&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>&lt;sup id="fnref:2">&lt;a href="#fn:2" class="footnote-ref" role="doc-noteref">2&lt;/a>&lt;/sup>&lt;/li>
&lt;li>Photos: I&amp;rsquo;m already backing these up, but it would be nice to have it in the same process&lt;/li>
&lt;li>Application data:&lt;/li>
&lt;li>List of applications over time&lt;/li>
&lt;li>&lt;a href="https://www.moves-app.com/" target="_blank" rel="noopener">Moves&lt;/a>: GPS location&lt;/li>
&lt;li>&lt;a href="http://www.downcastapp.com/" target="_blank" rel="noopener">Downcast&lt;/a>: List of current podcasts&lt;/li>
&lt;li>&lt;a href="http://www.sleepcycle.com/" target="_blank" rel="noopener">Sleep Cycle&lt;/a>: Sleep data&lt;/li>
&lt;li>&lt;a href="http://www.boardgamescorer.com/" target="_blank" rel="noopener">Boardgame Scorer&lt;/a>: High scores for board games&lt;/li>
&lt;/ul></description></item><item><title>Factor trees</title><link>https://blog.jverkamp.com/2014/06/17/factor-trees/</link><pubDate>Tue, 17 Jun 2014 14:00:59 +0000</pubDate><guid>https://blog.jverkamp.com/2014/06/17/factor-trees/</guid><description>&lt;p>Another five minute challenge&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>, this time from &lt;a href="http://www.reddit.com/r/dailyprogrammer/comments/284uhh/6142014_challenge_166b_intermediate_prime_factor/">/r/dailyprogrammer&lt;/a>: given any positive integer, create and render a factor tree.&lt;/p></description></item><item><title>Quadtree image compression</title><link>https://blog.jverkamp.com/2014/05/28/quadtree-image-compression/</link><pubDate>Wed, 28 May 2014 14:00:28 +0000</pubDate><guid>https://blog.jverkamp.com/2014/05/28/quadtree-image-compression/</guid><description>&lt;p>About two weeks ago, I came across a post via &lt;a href="http://www.reddit.com/r/programming/">/r/programming&lt;/a>: &lt;a href="http://www.reddit.com/r/programming/comments/25ptrk/quadtree_art/">Quadtree Art&lt;/a>&lt;sup>&lt;a href="https://github.com/fogleman/Quads">(src)&lt;/a>&lt;/sup>. In a sentence, the goal is to recursively divide an image into a quadtree, at each step expanding the current node with the largest internal variance.&lt;/p></description></item><item><title>Graph coloring</title><link>https://blog.jverkamp.com/2014/01/15/graph-coloring/</link><pubDate>Wed, 15 Jan 2014 14:00:14 +0000</pubDate><guid>https://blog.jverkamp.com/2014/01/15/graph-coloring/</guid><description>&lt;p>Here&amp;rsquo;s &lt;a href="http://www.reddit.com/r/dailyprogrammer/comments/1tj0kl/122313_challenge_130_hard_coloring_frances/">another one&lt;/a> from /r/dailyprogrammer:&lt;/p>
&lt;blockquote>
&lt;p>&amp;hellip; Your goal is to color a map of these regions with two requirements: 1) make sure that each adjacent department do not share a color, so you can clearly distinguish each department, and 2) minimize these numbers of colors.&lt;/p>&lt;/blockquote>
&lt;p>Essentially, &lt;a href="https://en.wikipedia.org/wiki/graph%20coloring">graph coloring&lt;/a>.&lt;/p></description></item><item><title>Graph radius</title><link>https://blog.jverkamp.com/2014/01/14/graph-radius/</link><pubDate>Tue, 14 Jan 2014 14:00:41 +0000</pubDate><guid>https://blog.jverkamp.com/2014/01/14/graph-radius/</guid><description>&lt;p>&lt;a href="http://www.reddit.com/r/dailyprogrammer/comments/1tiz4z/122313_challenge_140_intermediate_graph_radius/" target="_blank" rel="noopener">Here&amp;rsquo;s&lt;/a> a quick problem from the DailyProgrammer subreddit. Basically, we want to calculate the radius of a graph:&lt;/p>
&lt;blockquote>
&lt;span class="latex-inline">radius(g) = \min\limits_{n_0 \in g} \max\limits_{n_1 \in g} d_g(n_0, n_1)&lt;/span>
&lt;/blockquote></description></item><item><title>Edges to adjacency</title><link>https://blog.jverkamp.com/2013/12/23/edges-to-adjacency/</link><pubDate>Mon, 23 Dec 2013 14:00:02 +0000</pubDate><guid>https://blog.jverkamp.com/2013/12/23/edges-to-adjacency/</guid><description>&lt;p>Another quick one, this time &lt;a href="http://www.reddit.com/r/dailyprogrammer/comments/1t6dlf/121813_challenge_140_intermediate_adjacency_matrix/">from /r/dailyprogrammer&lt;/a>:&lt;/p>
&lt;blockquote>
&lt;p>Your goal is to write a program that takes in a list of edge-node relationships, and print a directed adjacency matrix for it. Our convention will follow that rows point to columns. Follow the examples for clarification of this convention.&lt;/p>&lt;/blockquote></description></item><item><title>Functions as lists</title><link>https://blog.jverkamp.com/2013/10/09/functions-as-lists/</link><pubDate>Wed, 09 Oct 2013 14:00:15 +0000</pubDate><guid>https://blog.jverkamp.com/2013/10/09/functions-as-lists/</guid><description>&lt;p>&lt;a href="http://programmingpraxis.com/2013/10/08/functional-style-linked-lists/">Yesterday&amp;rsquo;s challenge&lt;/a> from Programming Praxis challenges us to rebuild a data structure near and dear to any Lisper&amp;rsquo;s/Schemer&amp;rsquo;s/Racketer&amp;rsquo;s&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>/functional programmer&amp;rsquo;s heart: lists. The idea presented in &lt;a href="http://programmingpraxis.com/2013/10/08/functional-style-linked-lists/2/">their sample solution&lt;/a> uses two element vectors, directly mimicking the general internal structure of Scheme&amp;rsquo;s lists. How about we do something a bit stranger? &amp;#x1f604;&lt;/p></description></item><item><title>Large scale asynchronous DNS scans</title><link>https://blog.jverkamp.com/2013/09/27/large-scale-asynchronous-dns-scans/</link><pubDate>Fri, 27 Sep 2013 14:00:11 +0000</pubDate><guid>https://blog.jverkamp.com/2013/09/27/large-scale-asynchronous-dns-scans/</guid><description>&lt;p>On Monday we &lt;a href="https://blog.jverkamp.com/2013/09/23/extending-racket-structs-to-bitfields/">laid out a framework&lt;/a> for converting structures into bytes. On Wednesday, we used that to &lt;a href="https://blog.jverkamp.com/2013/09/25/extending-rackets-dns-capabilities/">enhance Racket&amp;rsquo;s UDP and DNS capabilities&lt;/a>. Today, we&amp;rsquo;re going to take that all one step further and scan large portions of the Internet. The end goal will be to look for &lt;a href="https://blog.jverkamp.com/2013/02/09/isma-2013-aims-5-dns-based-censorship/">DNS-based&lt;/a> on a worldwide scale.&lt;/p></description></item><item><title>Extending Racket's DNS capabilities</title><link>https://blog.jverkamp.com/2013/09/25/extending-rackets-dns-capabilities/</link><pubDate>Wed, 25 Sep 2013 14:00:35 +0000</pubDate><guid>https://blog.jverkamp.com/2013/09/25/extending-rackets-dns-capabilities/</guid><description>&lt;p>As I &lt;a href="https://blog.jverkamp.com/2013/09/23/extending-racket-structs-to-bitfields/">mentioned&lt;/a> on Monday, I wrote my &lt;a href="https://blog.jverkamp.com/2013/02/09/isma-2013-aims-5-dns-based-censorship/">DNS-based censorship&lt;/a> around the world&amp;ndash;and to do that, I need a fair bit of control over the DNS packets that I&amp;rsquo;m sending back and over parsing the ones that I get back.&lt;/p></description></item><item><title>Extending Racket structs to bitfields</title><link>https://blog.jverkamp.com/2013/09/23/extending-racket-structs-to-bitfields/</link><pubDate>Mon, 23 Sep 2013 14:00:09 +0000</pubDate><guid>https://blog.jverkamp.com/2013/09/23/extending-racket-structs-to-bitfields/</guid><description>&lt;p>Keen eyed observers may have noticed that last Friday when I &lt;a href="https://blog.jverkamp.com/2013/09/20/deploy-racket-libraries-to-planet-2/">posted about converting&lt;/a> my various Racket libraries to Planet 2 packages, that there was a new package there I haven&amp;rsquo;t otherwise talked about: &lt;a href="http://racket.jverkamp.com/bit-struct/">bit-struct&lt;/a>. Today seems like a good time to talk about that. Theoretically, I&amp;rsquo;ll also have another post or two this week showing exactly what I&amp;rsquo;m doing with it (spoilers: it involves sending on the order of billions of DNS requests&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>).&lt;/p></description></item><item><title>Cyclic equality</title><link>https://blog.jverkamp.com/2013/04/09/cyclic-equality/</link><pubDate>Tue, 09 Apr 2013 14:00:15 +0000</pubDate><guid>https://blog.jverkamp.com/2013/04/09/cyclic-equality/</guid><description>&lt;p>In &lt;a title="Cyclic equality on Programming Praxis" href="http://programmingpraxis.com/2013/04/09/cyclic-equality/">today&amp;rsquo;s post&lt;/a> from Programming Praxis, the goal is to check if two cyclic lists are equal. So if you have the cycles &lt;code>↻(1 2 3 4 5)&lt;/code> and &lt;code>↻(3 4 5 1 2)&lt;/code>, they&amp;rsquo;re equal. Likewise, &lt;code>↻(1 2 2 1)&lt;/code> and &lt;code>↻(2 1 1 2)&lt;/code> are equal. But &lt;code>↻(1 2 3 4)&lt;/code> and &lt;code>↻(1 2 3 5)&lt;/code> are not since they have different elements while &lt;code>↻(1 1 1)&lt;/code> and &lt;code>↻(1 1 1 1)&lt;/code> aren&amp;rsquo;t since they have different elements.&lt;/p></description></item><item><title>Splay heaps redux-imperative model</title><link>https://blog.jverkamp.com/2013/01/24/splay-heaps-redux-imperative-model/</link><pubDate>Thu, 24 Jan 2013 14:00:32 +0000</pubDate><guid>https://blog.jverkamp.com/2013/01/24/splay-heaps-redux-imperative-model/</guid><description>&lt;p>I did say in &lt;a href="https://blog.jverkamp.com/2013/01/23/sorting-via-splay-heap/">yesterday&amp;rsquo;s comments&lt;/a> that I would try re-implementing splay heaps using an imperative model with an array (Scheme&amp;rsquo;s &lt;code>vector&lt;/code>) as the back end rather than a functional one with trees. Well, here is is.&lt;/p></description></item><item><title>Sorting via splay heap</title><link>https://blog.jverkamp.com/2013/01/23/sorting-via-splay-heap/</link><pubDate>Wed, 23 Jan 2013 14:00:32 +0000</pubDate><guid>https://blog.jverkamp.com/2013/01/23/sorting-via-splay-heap/</guid><description>&lt;p>&lt;a href="http://programmingpraxis.com/2013/01/22/splay-heaps/" title="Splay Heap">Yesterday&amp;rsquo;s post&lt;/a> from Programming Praxis gives a new (or at least different) vantage point on one of the most common problems in Computer Science: sorting. Today, we&amp;rsquo;re going to implement a data structure known as a &lt;a href="https://en.wikipedia.org/wiki/splay%20heap">splay heap&lt;/a> and use that to perform a &lt;a href="https://en.wikipedia.org/wiki/heapsort">heapsort&lt;/a>.&lt;/p></description></item></channel></rss>