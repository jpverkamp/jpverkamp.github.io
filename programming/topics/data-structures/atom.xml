<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Data Structures on jverkamp.com</title>
    <link>https://blog.jverkamp.com/programming/topics/data-structures/</link>
    <description>Recent content in Data Structures on jverkamp.com</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 29 Jan 2015 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://blog.jverkamp.com/programming/topics/data-structures/atom.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>iOS Backups in Racket: Apps</title>
      <link>https://blog.jverkamp.com/2015/01/29/ios-backups-in-racket-apps/</link>
      <pubDate>Thu, 29 Jan 2015 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2015/01/29/ios-backups-in-racket-apps/</guid>
      <description>&lt;p&gt;So far we&amp;rsquo;ve read &lt;a href=&#34;https://blog.jverkamp.com/2015/01/22/ios-backups-in-racket-groundwork/&#34;&gt;backup files&lt;/a&gt;, parsed &lt;a href=&#34;https://blog.jverkamp.com/2015/01/23/ios-backups-in-racket-contacts/&#34;&gt;contacts&lt;/a&gt;, and parsed &lt;a href=&#34;https://blog.jverkamp.com/2015/01/27/ios-backups-in-racket-messages/&#34;&gt;messages&lt;/a&gt;. Today we&amp;rsquo;re going to dig a little deeper and start parsing apps specifically.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>iOS Backups in Racket: Messages</title>
      <link>https://blog.jverkamp.com/2015/01/27/ios-backups-in-racket-messages/</link>
      <pubDate>Tue, 27 Jan 2015 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2015/01/27/ios-backups-in-racket-messages/</guid>
      <description>&lt;p&gt;So far we&amp;rsquo;ve &lt;a href=&#34;https://blog.jverkamp.com/2015/01/22/ios-backups-in-racket-groundwork/&#34;&gt;laid the groundwork&lt;/a&gt;, loading local iOS backups and parsed out &lt;a href=&#34;https://blog.jverkamp.com/2015/01/23/ios-backups-in-racket-contacts/&#34;&gt;contacts&lt;/a&gt;. Today let&amp;rsquo;s take another step down the rabbit hole and figure out how messages are stored.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>iOS Backups in Racket: Contacts</title>
      <link>https://blog.jverkamp.com/2015/01/23/ios-backups-in-racket-contacts/</link>
      <pubDate>Fri, 23 Jan 2015 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2015/01/23/ios-backups-in-racket-contacts/</guid>
      <description>&lt;p&gt;After &lt;a href=&#34;https://blog.jverkamp.com/2015/01/22/ios-backups-in-racket-groundwork/&#34;&gt;yesterday&amp;rsquo;s post&lt;/a&gt; laying the groundwork for looking into &lt;a href=&#34;https://blog.jverkamp.com/2015/01/29/ios-backups-in-racket-apps/&#34;&gt;iOS Backups&lt;/a&gt;, today why don&amp;rsquo;t we actually start digging into one of the more interesting files: your list of contacts.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>iOS Backups in Racket: Groundwork</title>
      <link>https://blog.jverkamp.com/2015/01/22/ios-backups-in-racket-groundwork/</link>
      <pubDate>Thu, 22 Jan 2015 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2015/01/22/ios-backups-in-racket-groundwork/</guid>
      <description>&lt;p&gt;For the last little while, I&amp;rsquo;ve been spending my spare programming time working on a slightly larger project than I normally do: a &lt;a href=&#34;https://blog.jverkamp.com/2014/06/11/call-stack-bracket-matcher/&#34;&gt;Racket&lt;/a&gt; library for reading iOS backups.&lt;/p&gt;

&lt;p&gt;Basically, I want to take the mess that is an iOS backup (not particularly designed to be easy to read by other programs) and extract some information from it, backing it up in a more easily readable format.&lt;/p&gt;

&lt;p&gt;Specifically, I would like to be able to backup:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Contact information: Even thought they&amp;rsquo;re mostly from Facebook, it will be useful for the other parts&lt;/li&gt;
&lt;li&gt;Messages: These are taking up a large portion of my phone&amp;rsquo;s hard drive, mostly due to attachments. Back them up just in case&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:2&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:2&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/li&gt;
&lt;li&gt;Photos: I&amp;rsquo;m already backing these up, but it would be nice to have it in the same process&lt;/li&gt;
&lt;li&gt;Application data:&lt;/li&gt;
&lt;li&gt;List of applications over time&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.moves-app.com/&#34;&gt;Moves&lt;/a&gt;: GPS location&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.downcastapp.com/&#34;&gt;Downcast&lt;/a&gt;: List of current podcasts&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.sleepcycle.com/&#34;&gt;Sleep Cycle&lt;/a&gt;: Sleep data&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.boardgamescorer.com/&#34;&gt;Boardgame Scorer&lt;/a&gt;: High scores for board games&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Factor trees</title>
      <link>https://blog.jverkamp.com/2014/06/17/factor-trees/</link>
      <pubDate>Tue, 17 Jun 2014 14:00:59 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2014/06/17/factor-trees/</guid>
      <description>&lt;p&gt;Another five minute challenge&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;, this time from &lt;a href=&#34;http://www.reddit.com/r/dailyprogrammer/comments/284uhh/6142014_challenge_166b_intermediate_prime_factor/&#34;&gt;/r/dailyprogrammer&lt;/a&gt;: given any positive integer, create and render a factor tree.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Quadtree image compression</title>
      <link>https://blog.jverkamp.com/2014/05/28/quadtree-image-compression/</link>
      <pubDate>Wed, 28 May 2014 14:00:28 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2014/05/28/quadtree-image-compression/</guid>
      <description>&lt;p&gt;About two weeks ago, I came across a post via &lt;a href=&#34;http://www.reddit.com/r/programming/&#34;&gt;/r/programming&lt;/a&gt;: &lt;a href=&#34;http://www.reddit.com/r/programming/comments/25ptrk/quadtree_art/&#34;&gt;Quadtree Art&lt;/a&gt;&lt;sup&gt;&lt;a href=&#34;https://github.com/fogleman/Quads&#34;&gt;(src)&lt;/a&gt;&lt;/sup&gt;. In a sentence, the goal is to recursively divide an image into a quadtree, at each step expanding the current node with the largest internal variance.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Graph coloring</title>
      <link>https://blog.jverkamp.com/2014/01/15/graph-coloring/</link>
      <pubDate>Wed, 15 Jan 2014 14:00:14 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2014/01/15/graph-coloring/</guid>
      <description>&lt;p&gt;Here&amp;rsquo;s &lt;a href=&#34;http://www.reddit.com/r/dailyprogrammer/comments/1tj0kl/122313_challenge_130_hard_coloring_frances/&#34;&gt;another one&lt;/a&gt; from /r/dailyprogrammer:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&amp;hellip; Your goal is to color a map of these regions with two requirements: 1) make sure that each adjacent department do not share a color, so you can clearly distinguish each department, and 2) minimize these numbers of colors.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Essentially, &lt;a href=&#34;https://en.wikipedia.org/wiki/graph%20coloring&#34;&gt;graph coloring&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Graph radius</title>
      <link>https://blog.jverkamp.com/2014/01/14/graph-radius/</link>
      <pubDate>Tue, 14 Jan 2014 14:00:41 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2014/01/14/graph-radius/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://www.reddit.com/r/dailyprogrammer/comments/1tiz4z/122313_challenge_140_intermediate_graph_radius/&#34;&gt;Here&amp;rsquo;s&lt;/a&gt; a quick problem from the DailyProgrammer subreddit. Basically, we want to calculate the radius of a graph:&lt;/p&gt;

&lt;blockquote&gt;
&lt;span class=&#34;latex-inline&#34;&gt;radius(g) = \min\limits_{n_0 \in g} \max\limits_{n_1 \in g} d_g(n_0, n_1)&lt;/span&gt;

&lt;/blockquote&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Edges to adjacency</title>
      <link>https://blog.jverkamp.com/2013/12/23/edges-to-adjacency/</link>
      <pubDate>Mon, 23 Dec 2013 14:00:02 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2013/12/23/edges-to-adjacency/</guid>
      <description>&lt;p&gt;Another quick one, this time &lt;a href=&#34;http://www.reddit.com/r/dailyprogrammer/comments/1t6dlf/121813_challenge_140_intermediate_adjacency_matrix/&#34;&gt;from /r/dailyprogrammer&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Your goal is to write a program that takes in a list of edge-node relationships, and print a directed adjacency matrix for it. Our convention will follow that rows point to columns. Follow the examples for clarification of this convention.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Functions as lists</title>
      <link>https://blog.jverkamp.com/2013/10/09/functions-as-lists/</link>
      <pubDate>Wed, 09 Oct 2013 14:00:15 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2013/10/09/functions-as-lists/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://programmingpraxis.com/2013/10/08/functional-style-linked-lists/&#34;&gt;Yesterday&amp;rsquo;s challenge&lt;/a&gt; from Programming Praxis challenges us to rebuild a data structure near and dear to any Lisper&amp;rsquo;s/Schemer&amp;rsquo;s/Racketer&amp;rsquo;s&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;/functional programmer&amp;rsquo;s heart: lists. The idea presented in &lt;a href=&#34;http://programmingpraxis.com/2013/10/08/functional-style-linked-lists/2/&#34;&gt;their sample solution&lt;/a&gt; uses two element vectors, directly mimicking the general internal structure of Scheme&amp;rsquo;s lists. How about we do something a bit stranger? 😄&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>