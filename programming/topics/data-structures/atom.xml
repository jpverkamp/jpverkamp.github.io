<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Data Structures on jverkamp.com</title>
    <link>https://blog.jverkamp.com/programming/topics/data-structures/</link>
    <description>Recent content in Data Structures on jverkamp.com</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language><atom:link href="https://blog.jverkamp.com/programming/topics/data-structures/atom.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>AoC 2021 Day 25: Cucumbinator</title>
      <link>https://blog.jverkamp.com/2021/12/25/aoc-2021-day-25-cucumbinator/</link>
      <pubDate>Sat, 25 Dec 2021 00:00:03 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2021/12/25/aoc-2021-day-25-cucumbinator/</guid>
      <description>&lt;h3 id=&#34;source-sea-cucumberhttpsadventofcodecom2021day25&#34;&gt;Source: &lt;a href=&#34;https://adventofcode.com/2021/day/25&#34;&gt;Sea Cucumber&lt;/a&gt;&lt;/h3&gt;
&lt;h4 id=&#34;part-1-load-a-grid-of-empty-cells--east-movers--and-south-movers-v-each-step-move-all-east-movers-than-all-south-movers-only-if-they-can-this-iteration-wrap-eastwest-and-northsouth-how-many-steps-does-it-take-the-movers-to-get-stuck&#34;&gt;&lt;strong&gt;Part 1:&lt;/strong&gt; Load a grid of empty cells (&lt;code&gt;.&lt;/code&gt;), east movers (&lt;code&gt;&amp;gt;&lt;/code&gt;), and south movers (&lt;code&gt;v&lt;/code&gt;). Each step, move all east movers than all south movers (only if they can this iteration). Wrap east/west and north/south. How many steps does it take the movers to get stuck?&lt;/h4&gt;</description>
    </item>
    
    <item>
      <title>AoC 2021 Day 24: Aluinator</title>
      <link>https://blog.jverkamp.com/2021/12/24/aoc-2021-day-24-aluinator/</link>
      <pubDate>Fri, 24 Dec 2021 00:00:03 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2021/12/24/aoc-2021-day-24-aluinator/</guid>
      <description>&lt;h3 id=&#34;source-arithmetic-logic-unithttpsadventofcodecom2021day24&#34;&gt;Source: &lt;a href=&#34;https://adventofcode.com/2021/day/24&#34;&gt;Arithmetic Logic Unit&lt;/a&gt;&lt;/h3&gt;
&lt;h4 id=&#34;part-1-simulate-an-alu-with-4-registers-w-x-y-and-z-and-instructions-defined-below-find-the-largest-14-digit-number-with-no-0-digits-which-result-in-z0&#34;&gt;&lt;strong&gt;Part 1:&lt;/strong&gt; Simulate an ALU with 4 registers (&lt;code&gt;w&lt;/code&gt;, &lt;code&gt;x&lt;/code&gt;, &lt;code&gt;y&lt;/code&gt;, and &lt;code&gt;z&lt;/code&gt;) and instructions defined below. Find the largest 14 digit number with no 0 digits which result in &lt;code&gt;z=0&lt;/code&gt;.&lt;/h4&gt;</description>
    </item>
    
    <item>
      <title>AoC 2021 Day 22: Cubinator</title>
      <link>https://blog.jverkamp.com/2021/12/22/aoc-2021-day-22-cubinator/</link>
      <pubDate>Wed, 22 Dec 2021 00:00:05 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2021/12/22/aoc-2021-day-22-cubinator/</guid>
      <description>&lt;h3 id=&#34;source-reactor-reboothttpsadventofcodecom2021day22&#34;&gt;Source: &lt;a href=&#34;https://adventofcode.com/2021/day/22&#34;&gt;Reactor Reboot&lt;/a&gt;&lt;/h3&gt;
&lt;h4 id=&#34;part-1-given-a-series-of-3d-cubes-that-either-turn-on-all-or-turn-off-all-points-in-their-region-calculate-how-many-points-in-the-region--5050-5050-5050-are-on-at-the-end&#34;&gt;&lt;strong&gt;Part 1:&lt;/strong&gt; Given a series of 3D cubes that either turn ON all or turn OFF all points in their region, calculate how many points in the region (-50..50,-50..50,-50..50) are ON at the end.&lt;/h4&gt;</description>
    </item>
    
    <item>
      <title>AoC 2021 Day 20: Enhancinator</title>
      <link>https://blog.jverkamp.com/2021/12/20/aoc-2021-day-20-enhancinator/</link>
      <pubDate>Mon, 20 Dec 2021 00:00:05 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2021/12/20/aoc-2021-day-20-enhancinator/</guid>
      <description>&lt;h3 id=&#34;source-trench-maphttpsadventofcodecom2021day20&#34;&gt;Source: &lt;a href=&#34;https://adventofcode.com/2021/day/20&#34;&gt;Trench Map&lt;/a&gt;&lt;/h3&gt;
&lt;h4 id=&#34;part-1-given-a-9-1-hahahugoshortcode-s0-hbhb-update-function-take-the-pixel-and-8-surrounding-pixels-as-a-9-bit-index-into-the-function-and-a-binary-image-apply-the-function-twice-and-count-the-number-of-lit-pixels-assume-that-the-canvas-is-infinite&#34;&gt;&lt;strong&gt;Part 1:&lt;/strong&gt; Given a 9-&amp;gt;1 &lt;a href=&#34;https://en.wikipedia.org/wiki/cellular%20automota&#34;&gt;cellular automota&lt;/a&gt; update function (take the pixel and 8 surrounding pixels as a 9-bit index into the function) and a binary image, apply the function twice and count the number of &amp;lsquo;lit&amp;rsquo; pixels. Assume that the canvas is infinite.&lt;/h4&gt;</description>
    </item>
    
    <item>
      <title>AoC 2021 Day 19: Point Matchinator</title>
      <link>https://blog.jverkamp.com/2021/12/19/aoc-2021-day-19-point-matchinator/</link>
      <pubDate>Sun, 19 Dec 2021 00:00:05 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2021/12/19/aoc-2021-day-19-point-matchinator/</guid>
      <description>&lt;h3 id=&#34;source-snailfishhttpsadventofcodecom2021day19&#34;&gt;Source: &lt;a href=&#34;https://adventofcode.com/2021/day/19&#34;&gt;Snailfish&lt;/a&gt;&lt;/h3&gt;
&lt;h4 id=&#34;part-1-you-will-be-given-a-series-of-scanners-each-of-which-will-tell-you-the-location-from-their-point-of-view-of-a-series-of-beacons-each-scanner-may-be-flipped-or-rotated-in-increments-of-90-degrees-in-any-direction-determine-where-each-scanner-and-beacon-is-by-overlaying-the-maps-with-at-least-pairwise-12-matches&#34;&gt;&lt;strong&gt;Part 1:&lt;/strong&gt; You will be given a series of Scanners, each of which will tell you the location (from their point of view) of a series of Beacons. Each Scanner may be flipped or rotated in increments of 90 degrees in any direction. Determine where each Scanner and Beacon is by overlaying the maps (with at least pairwise 12 matches).&lt;/h4&gt;</description>
    </item>
    
    <item>
      <title>AoC 2021 Day 18: Pairs of Pairs</title>
      <link>https://blog.jverkamp.com/2021/12/18/aoc-2021-day-18-pairs-of-pairs/</link>
      <pubDate>Sat, 18 Dec 2021 00:00:05 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2021/12/18/aoc-2021-day-18-pairs-of-pairs/</guid>
      <description>&lt;h3 id=&#34;source-snailfishhttpsadventofcodecom2021day18&#34;&gt;Source: &lt;a href=&#34;https://adventofcode.com/2021/day/18&#34;&gt;Snailfish&lt;/a&gt;&lt;/h3&gt;
&lt;h4 id=&#34;part-1-given-the-following-definition-of-snailfish-numbers-add-a-series-of-snailfish-numbers-and-return-the-magnitude-of-the-result&#34;&gt;&lt;strong&gt;Part 1:&lt;/strong&gt; Given the following definition of Snailfish numbers, add a series of Snailfish numbers and return the magnitude of the result.&lt;/h4&gt;</description>
    </item>
    
    <item>
      <title>AoC 2021 Day 16: Depacketinator</title>
      <link>https://blog.jverkamp.com/2021/12/16/aoc-2021-day-16-depacketinator/</link>
      <pubDate>Thu, 16 Dec 2021 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2021/12/16/aoc-2021-day-16-depacketinator/</guid>
      <description>&lt;h3 id=&#34;source-packet-decoderhttpsadventofcodecom2021day16&#34;&gt;Source: &lt;a href=&#34;https://adventofcode.com/2021/day/16&#34;&gt;Packet Decoder&lt;/a&gt;&lt;/h3&gt;
&lt;h4 id=&#34;part-1-given-a-recursive-binary-packet-definition-see-below-parse-the-given-packet-return-the-sum-of-each-packets-version&#34;&gt;&lt;strong&gt;Part 1:&lt;/strong&gt; Given a recursive binary packet definition (see below), parse the given packet. Return the sum of each packet&amp;rsquo;s &lt;code&gt;version&lt;/code&gt;.&lt;/h4&gt;</description>
    </item>
    
    <item>
      <title>AoC 2021 Day 12: Submarine Spider</title>
      <link>https://blog.jverkamp.com/2021/12/12/aoc-2021-day-12-submarine-spider/</link>
      <pubDate>Sun, 12 Dec 2021 00:00:15 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2021/12/12/aoc-2021-day-12-submarine-spider/</guid>
      <description>&lt;h3 id=&#34;source-passage-pathinghttpsadventofcodecom2021day12&#34;&gt;Source: &lt;a href=&#34;https://adventofcode.com/2021/day/12&#34;&gt;Passage Pathing&lt;/a&gt;&lt;/h3&gt;
&lt;h4 id=&#34;part-1-given-a-list-of-edges-in-a-bi-directional-graph-count-the-number-of-paths-from-start-to-end-such-that-nodes-named-with-lowercase-letters-are-visited-once-and-nodes-with-uppercase-letters-can-be-visited-any-number-of-times&#34;&gt;&lt;strong&gt;Part 1:&lt;/strong&gt; Given a list of edges in a bi-directional graph, count the number of paths from &lt;code&gt;start&lt;/code&gt; to &lt;code&gt;end&lt;/code&gt; such that nodes named with lowercase letters are visited once, and nodes with uppercase letters can be visited any number of times.&lt;/h4&gt;</description>
    </item>
    
    <item>
      <title>AoC 2021 Day 11: Octopus Flashinator</title>
      <link>https://blog.jverkamp.com/2021/12/11/aoc-2021-day-11-octopus-flashinator/</link>
      <pubDate>Sat, 11 Dec 2021 00:00:15 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2021/12/11/aoc-2021-day-11-octopus-flashinator/</guid>
      <description>&lt;h3 id=&#34;source-dumbo-octopushttpsadventofcodecom2021day11&#34;&gt;Source: &lt;a href=&#34;https://adventofcode.com/2021/day/11&#34;&gt;Dumbo Octopus&lt;/a&gt;&lt;/h3&gt;
&lt;h4 id=&#34;part-1-simulate-a-grid-of-numbers-such-that-on-each-tick-advance-all-numbers-by-1-any-number-that-increases-over-9-will-flash-and-add-1-to-all-neighbors-recursively-but-each-cell-can-only-flash-once-and-then-reset-to-0-count-the-number-of-flashes-in-the-first-100-ticks&#34;&gt;&lt;strong&gt;Part 1:&lt;/strong&gt; Simulate a grid of numbers such that on each tick: advance all numbers by 1, any number that increases over 9 will &amp;lsquo;flash&amp;rsquo; and add 1 to all neighbors (recursively, but each cell can only flash once) and then reset to 0. Count the number of flashes in the first 100 ticks.&lt;/h4&gt;</description>
    </item>
    
    <item>
      <title>AoC 2021 Day 10: Chunkinator</title>
      <link>https://blog.jverkamp.com/2021/12/10/aoc-2021-day-10-chunkinator/</link>
      <pubDate>Fri, 10 Dec 2021 00:00:15 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2021/12/10/aoc-2021-day-10-chunkinator/</guid>
      <description>&lt;h3 id=&#34;source-syntax-scoringhttpsadventofcodecom2021day10&#34;&gt;Source: &lt;a href=&#34;https://adventofcode.com/2021/day/10&#34;&gt;Syntax Scoring&lt;/a&gt;&lt;/h3&gt;
&lt;h4 id=&#34;part-1-given-a-sequence-of----and--with-nesting-allowed-find-the-first-syntax-error-where-the-wrong-closing-symbol-is-used-scoring-3-57-1197-and-25137-respectively-for-each-error-calculate-the-total-error-score&#34;&gt;&lt;strong&gt;Part 1:&lt;/strong&gt; Given a sequence of () [] {}, and &amp;lt;&amp;gt; with nesting allowed. Find the first syntax error (where the wrong closing symbol is used). Scoring 3, 57, 1197, and 25137 respectively for each error, calculate the total error score.&lt;/h4&gt;</description>
    </item>
    
    <item>
      <title>AoC 2021 Day 9: Local Minimum Deminifier</title>
      <link>https://blog.jverkamp.com/2021/12/09/aoc-2021-day-9-local-minimum-deminifier/</link>
      <pubDate>Thu, 09 Dec 2021 00:00:15 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2021/12/09/aoc-2021-day-9-local-minimum-deminifier/</guid>
      <description>&lt;h3 id=&#34;source-smoke-basinhttpsadventofcodecom2021day9&#34;&gt;Source: &lt;a href=&#34;https://adventofcode.com/2021/day/9&#34;&gt;Smoke Basin&lt;/a&gt;&lt;/h3&gt;
&lt;h4 id=&#34;part-1-given-a-heightmap-find-all-local-minimums-return-the-sum-of-minimum-height--1-for-each-local-minimum&#34;&gt;&lt;strong&gt;Part 1:&lt;/strong&gt; Given a heightmap, find all local minimums. Return the sum of (minimum height + 1) for each local minimum.&lt;/h4&gt;</description>
    </item>
    
    <item>
      <title>AoC 2017 Day 12: Gridlock</title>
      <link>https://blog.jverkamp.com/2017/12/12/aoc-2017-day-12-gridlock/</link>
      <pubDate>Tue, 12 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2017/12/12/aoc-2017-day-12-gridlock/</guid>
      <description>&lt;h3 id=&#34;source-digital-plumberhttpadventofcodecom2017day12&#34;&gt;Source: &lt;a href=&#34;http://adventofcode.com/2017/day/12&#34;&gt;Digital Plumber&lt;/a&gt;&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Part 1:&lt;/strong&gt; A network of nodes is defined by a list of lines formatted as such:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/blockquote&gt;
&lt;p&gt;2 &amp;lt;-&amp;gt; 0, 3, 4&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>AoC 2017 Day 7: Tree</title>
      <link>https://blog.jverkamp.com/2017/12/07/aoc-2017-day-7-tree/</link>
      <pubDate>Thu, 07 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2017/12/07/aoc-2017-day-7-tree/</guid>
      <description>&lt;h3 id=&#34;source-recursive-circushttpadventofcodecom2017day7&#34;&gt;Source: &lt;a href=&#34;http://adventofcode.com/2017/day/7&#34;&gt;Recursive Circus&lt;/a&gt;&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Part 1:&lt;/strong&gt; A tree is defined as such:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;node (weight) -&amp;gt; child1, child2, ...&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;node (weight)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Where a &lt;code&gt;node&lt;/code&gt; always has a weight, but may or may not have child nodes.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;What is the name of the root &lt;code&gt;node&lt;/code&gt; of the tree (the node without a parent)?&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>AoC 2017 Day 6: Tightrope</title>
      <link>https://blog.jverkamp.com/2017/12/06/aoc-2017-day-6-tightrope/</link>
      <pubDate>Wed, 06 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2017/12/06/aoc-2017-day-6-tightrope/</guid>
      <description>&lt;h3 id=&#34;source-memory-reallocationhttpadventofcodecom2017day6&#34;&gt;Source: &lt;a href=&#34;http://adventofcode.com/2017/day/6&#34;&gt;Memory Reallocation&lt;/a&gt;&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Part 1:&lt;/strong&gt; Start with &lt;code&gt;n&lt;/code&gt; stacks of different sizes. Take the largest block and distribute its items starting with &lt;code&gt;n+1&lt;/code&gt; and looping around. How many iterations of this does it take before you see a state you&amp;rsquo;ve seen before?&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>AoC 2017 Day 3: Spiraly</title>
      <link>https://blog.jverkamp.com/2017/12/03/aoc-2017-day-3-spiraly/</link>
      <pubDate>Sun, 03 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2017/12/03/aoc-2017-day-3-spiraly/</guid>
      <description>&lt;h3 id=&#34;source-spiral-memoryhttpadventofcodecom2017day3&#34;&gt;Source: &lt;a href=&#34;http://adventofcode.com/2017/day/3&#34;&gt;Spiral Memory&lt;/a&gt;&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Part 1:&lt;/strong&gt; Create a grid in a spiral pattern like so:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/blockquote&gt;
&lt;p&gt;17  16  15  14  13
18   5   4   3  12
19   6   1   2  11
20   7   8   9  10
21  22  23&amp;mdash;&amp;gt; &amp;hellip;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>AoC 2016 Day 20: Filter Table</title>
      <link>https://blog.jverkamp.com/2016/12/20/aoc-2016-day-20-filter-table/</link>
      <pubDate>Tue, 20 Dec 2016 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2016/12/20/aoc-2016-day-20-filter-table/</guid>
      <description>&lt;h3 id=&#34;source-firewall-ruleshttpadventofcodecom2016day20&#34;&gt;Source: &lt;a href=&#34;http://adventofcode.com/2016/day/20&#34;&gt;Firewall Rules&lt;/a&gt;&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Part 1:&lt;/strong&gt; Given a list of integer ranges (a la &lt;code&gt;5-8&lt;/code&gt;), what is the first value not in any given range?&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>AoC 2016 Day 11: Radiation Avoider</title>
      <link>https://blog.jverkamp.com/2016/12/11/aoc-2016-day-11-radiation-avoider/</link>
      <pubDate>Sun, 11 Dec 2016 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2016/12/11/aoc-2016-day-11-radiation-avoider/</guid>
      <description>&lt;h3 id=&#34;source-radioisotope-thermoelectric-generatorshttpadventofcodecom2016day11&#34;&gt;Source: &lt;a href=&#34;http://adventofcode.com/2016/day/11&#34;&gt;Radioisotope Thermoelectric Generators&lt;/a&gt;&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Part 1:&lt;/strong&gt; Input will be a list of the following form:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;The first floor contains a hydrogen-compatible microchip and a lithium-compatible microchip.&lt;/li&gt;
&lt;li&gt;The second floor contains a hydrogen generator.&lt;/li&gt;
&lt;li&gt;The third floor contains a lithium generator.&lt;/li&gt;
&lt;li&gt;The fourth floor contains nothing relevant.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;You have an elevator that can move exactly 1 or 2 items. You can only leave a microchip on a floor with a non-matching generator if a matching generator is also present.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Move all items to the top (4th) floor.&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>iOS Backups in Racket: Apps</title>
      <link>https://blog.jverkamp.com/2015/01/29/ios-backups-in-racket-apps/</link>
      <pubDate>Thu, 29 Jan 2015 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2015/01/29/ios-backups-in-racket-apps/</guid>
      <description>&lt;p&gt;So far we&amp;rsquo;ve read &lt;a href=&#34;https://blog.jverkamp.com/2015/01/22/ios-backups-in-racket-groundwork/&#34;&gt;backup files&lt;/a&gt;, parsed &lt;a href=&#34;https://blog.jverkamp.com/2015/01/23/ios-backups-in-racket-contacts/&#34;&gt;contacts&lt;/a&gt;, and parsed &lt;a href=&#34;https://blog.jverkamp.com/2015/01/27/ios-backups-in-racket-messages/&#34;&gt;messages&lt;/a&gt;. Today we&amp;rsquo;re going to dig a little deeper and start parsing apps specifically.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>iOS Backups in Racket: Messages</title>
      <link>https://blog.jverkamp.com/2015/01/27/ios-backups-in-racket-messages/</link>
      <pubDate>Tue, 27 Jan 2015 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2015/01/27/ios-backups-in-racket-messages/</guid>
      <description>&lt;p&gt;So far we&amp;rsquo;ve &lt;a href=&#34;https://blog.jverkamp.com/2015/01/22/ios-backups-in-racket-groundwork/&#34;&gt;laid the groundwork&lt;/a&gt;, loading local iOS backups and parsed out &lt;a href=&#34;https://blog.jverkamp.com/2015/01/23/ios-backups-in-racket-contacts/&#34;&gt;contacts&lt;/a&gt;. Today let&amp;rsquo;s take another step down the rabbit hole and figure out how messages are stored.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>iOS Backups in Racket: Contacts</title>
      <link>https://blog.jverkamp.com/2015/01/23/ios-backups-in-racket-contacts/</link>
      <pubDate>Fri, 23 Jan 2015 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2015/01/23/ios-backups-in-racket-contacts/</guid>
      <description>&lt;p&gt;After &lt;a href=&#34;https://blog.jverkamp.com/2015/01/22/ios-backups-in-racket-groundwork/&#34;&gt;yesterday&amp;rsquo;s post&lt;/a&gt; laying the groundwork for looking into &lt;a href=&#34;https://blog.jverkamp.com/2015/01/29/ios-backups-in-racket-apps/&#34;&gt;iOS Backups&lt;/a&gt;, today why don&amp;rsquo;t we actually start digging into one of the more interesting files: your list of contacts.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>iOS Backups in Racket: Groundwork</title>
      <link>https://blog.jverkamp.com/2015/01/22/ios-backups-in-racket-groundwork/</link>
      <pubDate>Thu, 22 Jan 2015 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2015/01/22/ios-backups-in-racket-groundwork/</guid>
      <description>&lt;p&gt;For the last little while, I&amp;rsquo;ve been spending my spare programming time working on a slightly larger project than I normally do: a &lt;a href=&#34;https://blog.jverkamp.com/2014/06/11/call-stack-bracket-matcher/&#34;&gt;Racket&lt;/a&gt; library for reading iOS backups.&lt;/p&gt;
&lt;p&gt;Basically, I want to take the mess that is an iOS backup (not particularly designed to be easy to read by other programs) and extract some information from it, backing it up in a more easily readable format.&lt;/p&gt;
&lt;p&gt;Specifically, I would like to be able to backup:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Contact information: Even thought they&amp;rsquo;re mostly from Facebook, it will be useful for the other parts&lt;/li&gt;
&lt;li&gt;Messages: These are taking up a large portion of my phone&amp;rsquo;s hard drive, mostly due to attachments. Back them up just in case&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/li&gt;
&lt;li&gt;Photos: I&amp;rsquo;m already backing these up, but it would be nice to have it in the same process&lt;/li&gt;
&lt;li&gt;Application data:&lt;/li&gt;
&lt;li&gt;List of applications over time&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.moves-app.com/&#34;&gt;Moves&lt;/a&gt;: GPS location&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.downcastapp.com/&#34;&gt;Downcast&lt;/a&gt;: List of current podcasts&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.sleepcycle.com/&#34;&gt;Sleep Cycle&lt;/a&gt;: Sleep data&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.boardgamescorer.com/&#34;&gt;Boardgame Scorer&lt;/a&gt;: High scores for board games&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>Factor trees</title>
      <link>https://blog.jverkamp.com/2014/06/17/factor-trees/</link>
      <pubDate>Tue, 17 Jun 2014 14:00:59 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2014/06/17/factor-trees/</guid>
      <description>&lt;p&gt;Another five minute challenge&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;, this time from &lt;a href=&#34;http://www.reddit.com/r/dailyprogrammer/comments/284uhh/6142014_challenge_166b_intermediate_prime_factor/&#34;&gt;/r/dailyprogrammer&lt;/a&gt;: given any positive integer, create and render a factor tree.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Quadtree image compression</title>
      <link>https://blog.jverkamp.com/2014/05/28/quadtree-image-compression/</link>
      <pubDate>Wed, 28 May 2014 14:00:28 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2014/05/28/quadtree-image-compression/</guid>
      <description>&lt;p&gt;About two weeks ago, I came across a post via &lt;a href=&#34;http://www.reddit.com/r/programming/&#34;&gt;/r/programming&lt;/a&gt;: &lt;a href=&#34;http://www.reddit.com/r/programming/comments/25ptrk/quadtree_art/&#34;&gt;Quadtree Art&lt;/a&gt;&lt;sup&gt;&lt;a href=&#34;https://github.com/fogleman/Quads&#34;&gt;(src)&lt;/a&gt;&lt;/sup&gt;. In a sentence, the goal is to recursively divide an image into a quadtree, at each step expanding the current node with the largest internal variance.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Graph coloring</title>
      <link>https://blog.jverkamp.com/2014/01/15/graph-coloring/</link>
      <pubDate>Wed, 15 Jan 2014 14:00:14 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2014/01/15/graph-coloring/</guid>
      <description>&lt;p&gt;Here&amp;rsquo;s &lt;a href=&#34;http://www.reddit.com/r/dailyprogrammer/comments/1tj0kl/122313_challenge_130_hard_coloring_frances/&#34;&gt;another one&lt;/a&gt; from /r/dailyprogrammer:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;hellip; Your goal is to color a map of these regions with two requirements: 1) make sure that each adjacent department do not share a color, so you can clearly distinguish each department, and 2) minimize these numbers of colors.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Essentially, &lt;a href=&#34;https://en.wikipedia.org/wiki/graph%20coloring&#34;&gt;graph coloring&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Graph radius</title>
      <link>https://blog.jverkamp.com/2014/01/14/graph-radius/</link>
      <pubDate>Tue, 14 Jan 2014 14:00:41 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2014/01/14/graph-radius/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://www.reddit.com/r/dailyprogrammer/comments/1tiz4z/122313_challenge_140_intermediate_graph_radius/&#34;&gt;Here&amp;rsquo;s&lt;/a&gt; a quick problem from the DailyProgrammer subreddit. Basically, we want to calculate the radius of a graph:&lt;/p&gt;
&lt;blockquote&gt;
&lt;span class=&#34;latex-inline&#34;&gt;radius(g) = \min\limits_{n_0 \in g} \max\limits_{n_1 \in g} d_g(n_0, n_1)&lt;/span&gt;

&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>Edges to adjacency</title>
      <link>https://blog.jverkamp.com/2013/12/23/edges-to-adjacency/</link>
      <pubDate>Mon, 23 Dec 2013 14:00:02 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2013/12/23/edges-to-adjacency/</guid>
      <description>&lt;p&gt;Another quick one, this time &lt;a href=&#34;http://www.reddit.com/r/dailyprogrammer/comments/1t6dlf/121813_challenge_140_intermediate_adjacency_matrix/&#34;&gt;from /r/dailyprogrammer&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Your goal is to write a program that takes in a list of edge-node relationships, and print a directed adjacency matrix for it. Our convention will follow that rows point to columns. Follow the examples for clarification of this convention.&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>Functions as lists</title>
      <link>https://blog.jverkamp.com/2013/10/09/functions-as-lists/</link>
      <pubDate>Wed, 09 Oct 2013 14:00:15 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2013/10/09/functions-as-lists/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://programmingpraxis.com/2013/10/08/functional-style-linked-lists/&#34;&gt;Yesterday&amp;rsquo;s challenge&lt;/a&gt; from Programming Praxis challenges us to rebuild a data structure near and dear to any Lisper&amp;rsquo;s/Schemer&amp;rsquo;s/Racketer&amp;rsquo;s&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;/functional programmer&amp;rsquo;s heart: lists. The idea presented in &lt;a href=&#34;http://programmingpraxis.com/2013/10/08/functional-style-linked-lists/2/&#34;&gt;their sample solution&lt;/a&gt; uses two element vectors, directly mimicking the general internal structure of Scheme&amp;rsquo;s lists. How about we do something a bit stranger? 😄&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Large scale asynchronous DNS scans</title>
      <link>https://blog.jverkamp.com/2013/09/27/large-scale-asynchronous-dns-scans/</link>
      <pubDate>Fri, 27 Sep 2013 14:00:11 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2013/09/27/large-scale-asynchronous-dns-scans/</guid>
      <description>&lt;p&gt;On Monday we &lt;a href=&#34;https://blog.jverkamp.com/2013/09/23/extending-racket-structs-to-bitfields/&#34;&gt;laid out a framework&lt;/a&gt; for converting structures into bytes. On Wednesday, we used that to &lt;a href=&#34;https://blog.jverkamp.com/2013/09/25/extending-rackets-dns-capabilities/&#34;&gt;enhance Racket&amp;rsquo;s UDP and DNS capabilities&lt;/a&gt;. Today, we&amp;rsquo;re going to take that all one step further and scan large portions of the Internet. The end goal will be to look for &lt;a href=&#34;https://blog.jverkamp.com/2013/02/09/isma-2013-aims-5-dns-based-censorship/&#34;&gt;DNS-based&lt;/a&gt; on a worldwide scale.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Extending Racket&#39;s DNS capabilities</title>
      <link>https://blog.jverkamp.com/2013/09/25/extending-rackets-dns-capabilities/</link>
      <pubDate>Wed, 25 Sep 2013 14:00:35 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2013/09/25/extending-rackets-dns-capabilities/</guid>
      <description>&lt;p&gt;As I &lt;a href=&#34;https://blog.jverkamp.com/2013/09/23/extending-racket-structs-to-bitfields/&#34;&gt;mentioned&lt;/a&gt; on Monday, I wrote my &lt;a href=&#34;https://blog.jverkamp.com/2013/02/09/isma-2013-aims-5-dns-based-censorship/&#34;&gt;DNS-based censorship&lt;/a&gt; around the world&amp;ndash;and to do that, I need a fair bit of control over the DNS packets that I&amp;rsquo;m sending back and over parsing the ones that I get back.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Extending Racket structs to bitfields</title>
      <link>https://blog.jverkamp.com/2013/09/23/extending-racket-structs-to-bitfields/</link>
      <pubDate>Mon, 23 Sep 2013 14:00:09 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2013/09/23/extending-racket-structs-to-bitfields/</guid>
      <description>&lt;p&gt;Keen eyed observers may have noticed that last Friday when I &lt;a href=&#34;https://blog.jverkamp.com/2013/09/20/deploy-racket-libraries-to-planet-2/&#34;&gt;posted about converting&lt;/a&gt; my various Racket libraries to Planet 2 packages, that there was a new package there I haven&amp;rsquo;t otherwise talked about: &lt;a href=&#34;http://racket.jverkamp.com/bit-struct/&#34;&gt;bit-struct&lt;/a&gt;. Today seems like a good time to talk about that. Theoretically, I&amp;rsquo;ll also have another post or two this week showing exactly what I&amp;rsquo;m doing with it (spoilers: it involves sending on the order of billions of DNS requests&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;).&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Cyclic equality</title>
      <link>https://blog.jverkamp.com/2013/04/09/cyclic-equality/</link>
      <pubDate>Tue, 09 Apr 2013 14:00:15 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2013/04/09/cyclic-equality/</guid>
      <description>&lt;p&gt;In &lt;a title=&#34;Cyclic equality on Programming Praxis&#34; href=&#34;http://programmingpraxis.com/2013/04/09/cyclic-equality/&#34;&gt;today&amp;rsquo;s post&lt;/a&gt; from Programming Praxis, the goal is to check if two cyclic lists are equal. So if you have the cycles &lt;code&gt;↻(1 2 3 4 5)&lt;/code&gt; and &lt;code&gt;↻(3 4 5 1 2)&lt;/code&gt;, they&amp;rsquo;re equal. Likewise, &lt;code&gt;↻(1 2 2 1)&lt;/code&gt; and &lt;code&gt;↻(2 1 1 2)&lt;/code&gt; are equal. But &lt;code&gt;↻(1 2 3 4)&lt;/code&gt; and &lt;code&gt;↻(1 2 3 5)&lt;/code&gt; are not since they have different elements while &lt;code&gt;↻(1 1 1)&lt;/code&gt; and &lt;code&gt;↻(1 1 1 1)&lt;/code&gt; aren&amp;rsquo;t since they have different elements.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Splay heaps redux-imperative model</title>
      <link>https://blog.jverkamp.com/2013/01/24/splay-heaps-redux-imperative-model/</link>
      <pubDate>Thu, 24 Jan 2013 14:00:32 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2013/01/24/splay-heaps-redux-imperative-model/</guid>
      <description>&lt;p&gt;I did say in &lt;a href=&#34;https://blog.jverkamp.com/2013/01/23/sorting-via-splay-heap/&#34;&gt;yesterday&amp;rsquo;s comments&lt;/a&gt; that I would try re-implementing splay heaps using an imperative model with an array (Scheme&amp;rsquo;s &lt;code&gt;vector&lt;/code&gt;) as the back end rather than a functional one with trees. Well, here is is.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Sorting via splay heap</title>
      <link>https://blog.jverkamp.com/2013/01/23/sorting-via-splay-heap/</link>
      <pubDate>Wed, 23 Jan 2013 14:00:32 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2013/01/23/sorting-via-splay-heap/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://programmingpraxis.com/2013/01/22/splay-heaps/&#34; title=&#34;Splay Heap&#34;&gt;Yesterday&amp;rsquo;s post&lt;/a&gt; from Programming Praxis gives a new (or at least different) vantage point on one of the most common problems in Computer Science: sorting. Today, we&amp;rsquo;re going to implement a data structure known as a &lt;a href=&#34;https://en.wikipedia.org/wiki/splay%20heap&#34;&gt;splay heap&lt;/a&gt; and use that to perform a &lt;a href=&#34;https://en.wikipedia.org/wiki/heapsort&#34;&gt;heapsort&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Bitvectors in Racket</title>
      <link>https://blog.jverkamp.com/2012/10/29/bitvectors-in-racket/</link>
      <pubDate>Mon, 29 Oct 2012 14:00:50 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2012/10/29/bitvectors-in-racket/</guid>
      <description>&lt;p&gt;A bit shorter on time today, so I&amp;rsquo;ve just got a quick library that I worked out to solve another problem (I&amp;rsquo;ll post it later this week when it&amp;rsquo;s actually working). Basically, when you need to store a heck of a lot of binary flags and don&amp;rsquo;t want to waste space, the best way to do it would be as one long list of bits. It&amp;rsquo;s really easy to do in a language like C, but how can you do it in Racket?&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Memoization in Racket</title>
      <link>https://blog.jverkamp.com/2012/10/20/memoization-in-racket/</link>
      <pubDate>Sat, 20 Oct 2012 13:55:48 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2012/10/20/memoization-in-racket/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Memoization&#34;&gt;Memoization&lt;/a&gt; is awesome!&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;ve already written &lt;a href=&#34;https://blog.jverkamp.com/2012/09/29/pickles-and-memoization/&#34;&gt;one post&lt;/a&gt; on the subject in Python, but this time we&amp;rsquo;ll do the same in Racket. It&amp;rsquo;s particularly timely as without it, &lt;a href=&#34;https://blog.jverkamp.com/2012/10/22/prime-partitions-ii-the-listing/&#34;&gt;today&amp;rsquo;s post&lt;/a&gt; on determining the number of prime partitions of a number would take longer to run than I care to wait.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Dictionary tries in Racket</title>
      <link>https://blog.jverkamp.com/2012/10/11/dictionary-tries-in-racket/</link>
      <pubDate>Thu, 11 Oct 2012 13:55:38 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2012/10/11/dictionary-tries-in-racket/</guid>
      <description>For the next few posts, we&amp;rsquo;re going to need a way to represent a dictionary. You could go with just a flat list containing all of the words in the dictionary, but the runtime doesn&amp;rsquo;t seem optimal. Instead, we want a data structure that lets you easily get all possible words that start with a given prefix. We want a trie.
  . Source: dictionary source code</description>
    </item>
    
    <item>
      <title>Evaluating prefix/infix/postfix expressions</title>
      <link>https://blog.jverkamp.com/2012/10/08/evaluating-prefix/infix/postfix-expressions/</link>
      <pubDate>Mon, 08 Oct 2012 14:00:30 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2012/10/08/evaluating-prefix/infix/postfix-expressions/</guid>
      <description>In yesterday&amp;rsquo;s post, I talked about three different ways to write expressions: prefix, infix, and postfix expressions. I also promised to write up a web-based example that would show the guts of each algorithm in action. Well, here it is!
Use the three buttons at the top to switch between the different machines. Enter an expression in the box and click run to evaluate it. The only things that are supported at the moment are numbers (integers or floating point) and the operators +, -, *, and /, although the code is extensible enough that adding more shouldn&amp;rsquo;t be an issue.</description>
    </item>
    
    <item>
      <title>Three ways to write expressions</title>
      <link>https://blog.jverkamp.com/2012/10/07/three-ways-to-write-expressions/</link>
      <pubDate>Sun, 07 Oct 2012 14:00:42 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2012/10/07/three-ways-to-write-expressions/</guid>
      <description>&lt;pre&gt;&lt;code&gt;(- (- (+ 4 (* 2 7)) (* (- 1 6) 5)) 1)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;is the same as&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;4 + 2 * 7 - (1 - 6) * 5 - 1
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;is the same as&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;4 2 7 * + 1 6 - 5 * - 1 -
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Madness right?&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
