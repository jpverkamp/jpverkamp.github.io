<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Command line on jverkamp.com</title><link>https://blog.jverkamp.com/programming/topics/command-line/</link><description>Recent content in Command line on jverkamp.com</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://blog.jverkamp.com/programming/topics/command-line/atom.xml" rel="self" type="application/rss+xml"/><item><title>Creating a temporary SMTP server to 'catch' domain validation emails</title><link>https://blog.jverkamp.com/2018/07/09/creating-a-temporary-smtp-server-to-catch-domain-validation-emails/</link><pubDate>Mon, 09 Jul 2018 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2018/07/09/creating-a-temporary-smtp-server-to-catch-domain-validation-emails/</guid><description>&lt;p>One problem that has come up a time or two is dealing with email-based domain validation (specifically in this case for the issuance of TLS certificates) on domains that aren&amp;rsquo;t actually configured to receive email. Yes, in a perfect world, it would be easier to switch to DNS-based validation (since we have to have control of the DNS for the domain, we need it later), but let&amp;rsquo;s just assume that&amp;rsquo;s not an option. So, how do we &amp;lsquo;catch&amp;rsquo; the activation email so we can prove we can receive email on that domain?&lt;/p></description></item><item><title>Making Fish Shell Smile</title><link>https://blog.jverkamp.com/2018/01/12/making-fish-shell-smile/</link><pubDate>Fri, 12 Jan 2018 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2018/01/12/making-fish-shell-smile/</guid><description>&lt;p>When working in a shell, from time to time, I need to know if a command succeeded or failed. Sometimes, it&amp;rsquo;s easy:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-fish" data-lang="fish">&lt;span style="display:flex;">&lt;span>$ make noise
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">make&lt;/span>: *** No rule to make target `noise&amp;#39;. Stop.
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Sometimes, less so:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-fish" data-lang="fish">&lt;span style="display:flex;">&lt;span>$ grep frog podcasts.json &lt;span style="color:#f92672">&amp;gt;&lt;/span> podcasts-about-frogs.txt
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Since, alas, I don&amp;rsquo;t have any podcasts about frogs, that command would fail silently. But that&amp;rsquo;s fixable!&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-fish" data-lang="fish">&lt;span style="display:flex;">&lt;span>$ grep frog podcasts.json &lt;span style="color:#f92672">&amp;gt;&lt;/span> podcasts-about-frogs.txt
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ &lt;span style="color:#75715e"># Bash/Zsh
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>$ echo $?
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ &lt;span style="color:#75715e"># Fish
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>$ echo $status
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">1&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>SSH Config ProxyCommand Tricks</title><link>https://blog.jverkamp.com/2017/12/18/ssh-config-proxycommand-tricks/</link><pubDate>Mon, 18 Dec 2017 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2017/12/18/ssh-config-proxycommand-tricks/</guid><description>&lt;p>Working in security/operations in the tech industry, I use &lt;a href="https://en.wikipedia.org/wiki/SSH">SSH&lt;/a> a lot. To various different machines (some with hostnames, some without), using various different users and keys, and often (as was the case in my &lt;a href="https://blog.jverkamp.com/2017/12/13/dynamic-automatic-proxies/">previous post&lt;/a>) via a &lt;a href="https://en.wikipedia.org/wiki/bastion%20host">bastion host&lt;/a>. Over the years, I&amp;rsquo;ve collected a number of SSH tricks that make my life easier.&lt;/p></description></item><item><title>Dynamic Automatic Proxies</title><link>https://blog.jverkamp.com/2017/12/13/dynamic-automatic-proxies/</link><pubDate>Wed, 13 Dec 2017 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2017/12/13/dynamic-automatic-proxies/</guid><description>&lt;p>On of the advantages of working in computer programming is that I can work from anywhere I have a computer and an internet connection. One of the disadvantages is that many of the resources that I need to do my job are locked to only be accessible within a specific network (albeit with a &lt;a href="https://en.wikipedia.org/wiki/bastion%20host">bastion host&lt;/a>).&lt;/p>
&lt;p>I long ago set up my SSH config to create an SSH tunnel and I can proxy many applications through that just by setting the &lt;code>HTTP_PROXY&lt;/code> and/or &lt;code>HTTPS_PROXY&lt;/code> environment variables. The downside of this though is that if I&amp;rsquo;m actually on a &amp;lsquo;safe&amp;rsquo; network, there&amp;rsquo;s no reason to use the bastion host and I would actually be putting extra load on it.&lt;/p>
&lt;p>My goal: write something that would let me automatically proxy applications when I need to but not when I don&amp;rsquo;t.&lt;/p></description></item><item><title>AoC 2017: Library Functions</title><link>https://blog.jverkamp.com/2017/12/01/aoc-2017-library-functions/</link><pubDate>Fri, 01 Dec 2017 00:00:02 +0000</pubDate><guid>https://blog.jverkamp.com/2017/12/01/aoc-2017-library-functions/</guid><description>&lt;p>As mentioned in the &lt;a href="https://blog.jverkamp.com/2018/01/08/advent-of-code-2017/">main post&lt;/a>, I&amp;rsquo;m structuring my solutions a bit differently this year. Rather than repeating the same relatively lengthy header in each function, we&amp;rsquo;re going to have a few shared files that can be imported or used for every problem.&lt;/p></description></item><item><title>Command line unicode search</title><link>https://blog.jverkamp.com/2016/01/06/command-line-unicode-search/</link><pubDate>Wed, 06 Jan 2016 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2016/01/06/command-line-unicode-search/</guid><description>&lt;p>Similar to Monday&amp;rsquo;s post about &lt;a href="https://blog.jverkamp.com/2016/01/04/command-line-emoji-search/">command line emoji search&lt;/a>, I often find myself wanting to look up Unicode characters. I have a custom search engine / bookmark set up in Chrome / Firefox (&lt;code>uni %s&lt;/code> maps to &lt;code>http://unicode-search.net/unicode-namesearch.pl?term=%s&amp;amp;.submit=Submit&amp;amp;subs=1&lt;/code>). That actually works great, but given how relatively much of my day I spend on the command line, I thought it would be interesting to do something there:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ uni delta
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>⍋ apl functional symbol delta stile
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>⍙ apl functional symbol delta underbar
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>⍍ apl functional symbol quad delta
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>≜ delta equal to
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Δ greek capital letter delta
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>δ greek small letter delta
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ẟ latin small letter delta
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ƍ latin small letter turned delta
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>𝚫 mathematical bold capital delta
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>𝜟 mathematical bold italic capital delta
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>𝜹 mathematical bold italic small delta
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>𝛅 mathematical bold small delta
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>𝛥 mathematical italic capital delta
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>𝛿 mathematical italic small delta
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>𝝙 mathematical sans-serif bold capital delta
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>𝞓 mathematical sans-serif bold italic capital delta
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>𝞭 mathematical sans-serif bold italic small delta
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>𝝳 mathematical sans-serif bold small delta
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ᵟ modifier letter small delta
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Command line emoji search</title><link>https://blog.jverkamp.com/2016/01/04/command-line-emoji-search/</link><pubDate>Mon, 04 Jan 2016 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2016/01/04/command-line-emoji-search/</guid><description>&lt;p>Sometimes, I find myself wanting to communicate in &lt;a href="https://en.wikipedia.org/wiki/emoji">emoji&lt;/a>.&lt;/p>
&lt;p>🐔&lt;/p>
&lt;p>How about this:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ emoji chicken
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>🐔
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ emoji &lt;span style="color:#e6db74">&amp;#34;which came first, the 🐔 or the 🥚&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>which came first, the 🐔 or the 🍳
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item></channel></rss>