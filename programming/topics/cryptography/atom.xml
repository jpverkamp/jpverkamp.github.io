<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Cryptography on jverkamp.com</title><link>https://blog.jverkamp.com/programming/topics/cryptography/</link><description>Recent content in Cryptography on jverkamp.com</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://blog.jverkamp.com/programming/topics/cryptography/atom.xml" rel="self" type="application/rss+xml"/><item><title>WebCrypto SHA-256 HMAC</title><link>https://blog.jverkamp.com/2025/02/05/webcrypto-sha-256-hmac/</link><pubDate>Wed, 05 Feb 2025 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2025/02/05/webcrypto-sha-256-hmac/</guid><description>&lt;p>A quick random thing I learned that I found helpful (and you might too!):&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">async&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">hmac&lt;/span>(&lt;span style="color:#a6e22e">text&lt;/span>, &lt;span style="color:#a6e22e">secret&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">let&lt;/span> &lt;span style="color:#a6e22e">enc&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> &lt;span style="color:#a6e22e">TextEncoder&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;utf-8&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">let&lt;/span> &lt;span style="color:#a6e22e">algorithm&lt;/span> &lt;span style="color:#f92672">=&lt;/span> { &lt;span style="color:#a6e22e">name&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#34;HMAC&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">hash&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#34;SHA-256&amp;#34;&lt;/span> };
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">let&lt;/span> &lt;span style="color:#a6e22e">key&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">await&lt;/span> &lt;span style="color:#a6e22e">crypto&lt;/span>.&lt;span style="color:#a6e22e">subtle&lt;/span>.&lt;span style="color:#a6e22e">importKey&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;raw&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">enc&lt;/span>.&lt;span style="color:#a6e22e">encode&lt;/span>(&lt;span style="color:#a6e22e">secret&lt;/span>), &lt;span style="color:#a6e22e">algorithm&lt;/span>, &lt;span style="color:#66d9ef">false&lt;/span>, [&lt;span style="color:#e6db74">&amp;#34;sign&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;verify&amp;#34;&lt;/span>]);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">let&lt;/span> &lt;span style="color:#a6e22e">signature&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">await&lt;/span> &lt;span style="color:#a6e22e">crypto&lt;/span>.&lt;span style="color:#a6e22e">subtle&lt;/span>.&lt;span style="color:#a6e22e">sign&lt;/span>(&lt;span style="color:#a6e22e">algorithm&lt;/span>.&lt;span style="color:#a6e22e">name&lt;/span>, &lt;span style="color:#a6e22e">key&lt;/span>, &lt;span style="color:#a6e22e">enc&lt;/span>.&lt;span style="color:#a6e22e">encode&lt;/span>(&lt;span style="color:#a6e22e">text&lt;/span>));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">let&lt;/span> &lt;span style="color:#a6e22e">digest&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">btoa&lt;/span>(String.&lt;span style="color:#a6e22e">fromCharCode&lt;/span>(...&lt;span style="color:#66d9ef">new&lt;/span> &lt;span style="color:#a6e22e">Uint8Array&lt;/span>(&lt;span style="color:#a6e22e">signature&lt;/span>)));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">digest&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This is a function that uses the &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Web_Crypto_API" target="_blank" rel="noopener">Web Crypto API&lt;/a> to calculate a &lt;a href="https://en.wikipedia.org/wiki/SHA-256">SHA-256&lt;/a> &lt;a href="https://en.wikipedia.org/wiki/HMAC">HMAC&lt;/a> of a string given a secret value.&lt;/p>
&lt;p>I mostly worked this out so that I could figure out how &lt;em>exactly&lt;/em> &lt;code>TextEncoder&lt;/code> worked, along with &lt;code>importKey&lt;/code> (to turn a secret into proper key material) and also how to convert that back into a hex digest.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">&amp;gt;&amp;gt;&lt;/span> &lt;span style="color:#66d9ef">await&lt;/span> &lt;span style="color:#a6e22e">hmac&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;lorem ipsum&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;super secret&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">&amp;#34;qArFX93Zi83ccIayhYnuFDpd4pk3eB4rZYDvNteobSU=&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">&amp;gt;&amp;gt;&lt;/span> &lt;span style="color:#66d9ef">await&lt;/span> &lt;span style="color:#a6e22e">hmac&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;lorem ipsum doler sit amet&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;super secret&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">&amp;#34;klTAioH5nNkguNhU2YcJshaZZtJW9DEb+MTqz4NWq8E=&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">&amp;gt;&amp;gt;&lt;/span> &lt;span style="color:#66d9ef">await&lt;/span> &lt;span style="color:#a6e22e">hmac&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;lorem ipsum&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;even more super secret!&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">&amp;#34;RoQLg2uz5KWLMJM72VExH5gZOls5bdZZyzHi678eDWs=&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">&amp;gt;&amp;gt;&lt;/span> &lt;span style="color:#66d9ef">await&lt;/span> &lt;span style="color:#a6e22e">hmac&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;lorem ipsum&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;super secret&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">&amp;#34;qArFX93Zi83ccIayhYnuFDpd4pk3eB4rZYDvNteobSU=&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Disclaimer: This totally counts as rolling your own crypto. Don&amp;rsquo;t do this unless you know what you&amp;rsquo;re doing. ðŸ˜„&lt;/p>
&lt;p>Disclaimer disclaimer: I only rarely know what I&amp;rsquo;m doing. ðŸ˜„ ðŸ˜„&lt;/p>
&lt;p>Also, for what it&amp;rsquo;s worth, this is equivalent to the Python standard libraries&amp;rsquo; &lt;code>&lt;a href="https://docs.python.org/3/search.html?q=hmac">hmac&lt;/a>&lt;/code>
+ &lt;code>&lt;a href="https://docs.python.org/3/search.html?q=base64">base64&lt;/a>&lt;/code>
:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">&amp;gt;&amp;gt;&amp;gt;&lt;/span> base64&lt;span style="color:#f92672">.&lt;/span>b64encode(hmac&lt;span style="color:#f92672">.&lt;/span>digest(&lt;span style="color:#e6db74">b&lt;/span>&lt;span style="color:#e6db74">&amp;#39;super secret&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">b&lt;/span>&lt;span style="color:#e6db74">&amp;#39;lorem ipsum&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;SHA256&amp;#39;&lt;/span>))&lt;span style="color:#f92672">.&lt;/span>decode()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">&amp;#39;qArFX93Zi83ccIayhYnuFDpd4pk3eB4rZYDvNteobSU=&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Setting up Postfix and OpenDKIM</title><link>https://blog.jverkamp.com/2015/08/10/setting-up-postfix-and-opendkim/</link><pubDate>Mon, 10 Aug 2015 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2015/08/10/setting-up-postfix-and-opendkim/</guid><description>&lt;p>Last week, I was presented with a fairly interesting challenge: add DKIM (via &lt;a href="http://www.opendkim.org/">OpenDKIM&lt;/a>) support to our mail servers (running &lt;a href="http://www.postfix.org/">Postfix&lt;/a>). Given that I&amp;rsquo;ve never actually worked on a mail server before, it sounded fun. ðŸ˜„&lt;/p></description></item><item><title>Caesar cipher</title><link>https://blog.jverkamp.com/2014/03/12/caesar-cipher/</link><pubDate>Wed, 12 Mar 2014 14:00:10 +0000</pubDate><guid>https://blog.jverkamp.com/2014/03/12/caesar-cipher/</guid><description>&lt;p>&lt;a href="http://programmingpraxis.com/2014/03/11/caesar-cipher/">Here&amp;rsquo;s&lt;/a> a 5 minute&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup> coding challenge from Programming Praxis:&lt;/p>
&lt;blockquote>
&lt;p>A &lt;a href="https://en.wikipedia.org/wiki/Caesar%20cipher">caeser cipher&lt;/a>, named after Julius Caesar, who either invented the cipher or was an early user of it, is a simple substitution cipher in which letters are substituted at a fixed distance along the alphabet, which cycles; childrenâ€™s magic decoder rings implement a caesar cipher. Non-alphabetic characters are passed unchanged. For instance, the plaintext PROGRAMMINGPRAXIS is rendered as the ciphertext SURJUDPPLQJSUDALV with a shift of 3 positions.&lt;/p>
&lt;/blockquote>
&lt;p>&lt;figure>&lt;img src="https://blog.jverkamp.com/embeds/2014/caesar-shift.png"/>
&lt;/figure>
&amp;ndash; Source: &lt;a href="https://en.wikipedia.org/wiki/File:Caesar%20cipher%20left%20shift%20of%203.svg">Wikipedia&lt;/a>, public domain&lt;/p></description></item><item><title>An optimal alphabetizing cipher</title><link>https://blog.jverkamp.com/2013/01/25/an-optimal-alphabetizing-cipher/</link><pubDate>Fri, 25 Jan 2013 19:45:37 +0000</pubDate><guid>https://blog.jverkamp.com/2013/01/25/an-optimal-alphabetizing-cipher/</guid><description>&lt;p>Here is &lt;a href="http://www.reddit.com/r/dailyprogrammer/comments/178vsz/012513_challenge_118_hard_alphabetizing_cipher/" title="Challenge #118 [Hard] Alphabetizing cipher">today&amp;rsquo;s /r/dailyprogramming challenge&lt;/a>: Generate a simple substitution cipher such that the maximum number of words in a given dictionary of six letter words (there are 7,260 of them) are encoded as strings in alphabetical order.&lt;/p></description></item></channel></rss>