<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Trees on jverkamp.com</title>
    <link>https://blog.jverkamp.com/programming/topics/trees/</link>
    <description>Recent content in Trees on jverkamp.com</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 07 Dec 2017 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://blog.jverkamp.com/programming/topics/trees/atom.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>AoC 2017 Day 7: Tree</title>
      <link>https://blog.jverkamp.com/2017/12/07/aoc-2017-day-7-tree/</link>
      <pubDate>Thu, 07 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2017/12/07/aoc-2017-day-7-tree/</guid>
      <description>&lt;h3 id=&#34;source-recursive-circus-http-adventofcode-com-2017-day-7&#34;&gt;Source: &lt;a href=&#34;http://adventofcode.com/2017/day/7&#34;&gt;Recursive Circus&lt;/a&gt;&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Part 1:&lt;/strong&gt; A tree is defined as such:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;node (weight) -&amp;gt; child1, child2, ...&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;node (weight)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Where a &lt;code&gt;node&lt;/code&gt; always has a weight, but may or may not have child nodes.&lt;/p&gt;

&lt;p&gt;What is the name of the root &lt;code&gt;node&lt;/code&gt; of the tree (the node without a parent)?&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>Generating omnichromatic images</title>
      <link>https://blog.jverkamp.com/2015/01/01/generating-omnichromatic-images/</link>
      <pubDate>Thu, 01 Jan 2015 00:10:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2015/01/01/generating-omnichromatic-images/</guid>
      <description>&lt;p&gt;Inspired half by a &lt;a href=&#34;https://codegolf.stackexchange.com/questions/22144/images-with-all-colors&#34;&gt;post on the Code Golf StackExchange&lt;/a&gt; and half by the corresponding website &lt;a href=&#34;http://allrgb.com/&#34;&gt;allrgb.com&lt;/a&gt;, today&amp;rsquo;s post tasks us with making images like this:&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&#34;https://blog.jverkamp.com/embeds/2015/grow-minimum_gray-code_400x200.png&#34;/&gt; 
&lt;/figure&gt;


&lt;p&gt;So what&amp;rsquo;s so interesting about that picture?&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Palette Swapping</title>
      <link>https://blog.jverkamp.com/2014/12/23/palette-swapping/</link>
      <pubDate>Tue, 23 Dec 2014 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2014/12/23/palette-swapping/</guid>
      <description>&lt;p&gt;Today&amp;rsquo;s task comes from the &lt;a href=&#34;https://codegolf.stackexchange.com/&#34;&gt;Code Golf StackExchange&lt;/a&gt;. The idea behind &lt;a href=&#34;https://en.wikipedia.org/wiki/code%20golf&#34;&gt;code golf&lt;/a&gt; is to write a program with as few characters as possible, often rendering the code nigh on unreadable. Luckily, the same StackExchange also host popularity contests, one of which is the inspiration behind today&amp;rsquo;s post:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;You are given two true color images, the Source and the Palette. They do not necessarily have the same dimensions but it is guaranteed that their areas are the same, i.e. they have the same number of pixels.
Your task is to create an algorithm that makes the most accurate looking copy of the Source by only using the pixels in the Palette. Each pixel in the Palette must be used exactly once in a unique position in this copy. The copy must have the same dimensions as the Source.
&amp;ndash; &lt;a href=&#34;https://codegolf.stackexchange.com/questions/33172/american-gothic-in-the-palette-of-mona-lisa-rearrange-the-pixels&#34;&gt;American Gothic in the palette of Mona Lisa: Rearrange the pixels&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>Factor trees</title>
      <link>https://blog.jverkamp.com/2014/06/17/factor-trees/</link>
      <pubDate>Tue, 17 Jun 2014 14:00:59 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2014/06/17/factor-trees/</guid>
      <description>&lt;p&gt;Another five minute challenge&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;, this time from &lt;a href=&#34;http://www.reddit.com/r/dailyprogrammer/comments/284uhh/6142014_challenge_166b_intermediate_prime_factor/&#34;&gt;/r/dailyprogrammer&lt;/a&gt;: given any positive integer, create and render a factor tree.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Brownian trees</title>
      <link>https://blog.jverkamp.com/2014/03/11/brownian-trees/</link>
      <pubDate>Tue, 11 Mar 2014 14:00:06 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2014/03/11/brownian-trees/</guid>
      <description>&lt;p&gt;Pretty pretty picture time&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;:&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&#34;https://blog.jverkamp.com/embeds/2014/brownian-tree.png&#34;/&gt; 
&lt;/figure&gt;</description>
    </item>
    
    <item>
      <title>Dis/re-emvowelification</title>
      <link>https://blog.jverkamp.com/2014/02/27/dis/re-emvowelification/</link>
      <pubDate>Thu, 27 Feb 2014 14:00:21 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2014/02/27/dis/re-emvowelification/</guid>
      <description>&lt;p&gt;So far this week we&amp;rsquo;ve had a pair of related posts at the DailyProgrammer subreddit&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.reddit.com/r/dailyprogrammer/comments/1ystvb/022414_challenge_149_easy_disemvoweler/&#34;&gt;[02/24/14] Challenge #149 [Easy] Disemvoweler&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.reddit.com/r/dailyprogrammer/comments/1yzlde/022614_challenge_150_intermediate_reemvoweler_1/&#34;&gt;[02/26/14] Challenge #150 [Intermediate] Re-emvoweler 1&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Basically, if you&amp;rsquo;re given a string with vowels, take them out. If you&amp;rsquo;re given one without vowels, put them back in. One of the two is certainly easier than the other&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;. :)&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Predecessor and successor in a binary search tree</title>
      <link>https://blog.jverkamp.com/2013/02/13/predecessor-and-successor-in-a-binary-search-tree/</link>
      <pubDate>Wed, 13 Feb 2013 14:00:53 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2013/02/13/predecessor-and-successor-in-a-binary-search-tree/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://programmingpraxis.com/2013/02/12/binary-search-tree-in-order-predecessor-and-successor/&#34; title=&#34;Binary Search Tree: In-Order Predecessor And Successor&#34;&gt;Yesterday&amp;rsquo;s post&lt;/a&gt; from Programming Praxis has us trying to find the predecessor and successor to a given value in a binary search tree. There are actually two general algorithms for doing this, depending on if you have parent pointers or not&amp;ndash;but they&amp;rsquo;re asking for the algorithm without.&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>