<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Disk Fragmentation on jverkamp.com</title><link>https://blog.jverkamp.com/programming/topics/disk-fragmentation/</link><description>Recent content in Disk Fragmentation on jverkamp.com</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Mon, 09 Dec 2024 00:00:03 +0000</lastBuildDate><atom:link href="https://blog.jverkamp.com/programming/topics/disk-fragmentation/atom.xml" rel="self" type="application/rss+xml"/><item><title>AoC 2024 Day 9: Defraginator</title><link>https://blog.jverkamp.com/2024/12/09/aoc-2024-day-9-defraginator/</link><pubDate>Mon, 09 Dec 2024 00:00:03 +0000</pubDate><guid>https://blog.jverkamp.com/2024/12/09/aoc-2024-day-9-defraginator/</guid><description>&lt;h2 id="source-day-9-disk-fragmenter">Source: &lt;a href="https://adventofcode.com/2024/day/9" target="_blank" rel="noopener">Day 9: Disk Fragmenter&lt;/a>&lt;/h2>
&lt;p>&lt;a href="https://github.com/jpverkamp/advent-of-code/blob/master/2024/src/day9.rs" target="_blank" rel="noopener">Full solution&lt;/a> for today (spoilers!).&lt;/p>
&lt;nav id="TableOfContents">
 &lt;ul>
 &lt;li>&lt;a href="#source-day-9-disk-fragmenter">Source: &lt;a href="https://adventofcode.com/2024/day/9">Day 9: Disk Fragmenter&lt;/a>&lt;/a>&lt;/li>
 &lt;li>&lt;a href="#part-1">Part 1&lt;/a>&lt;/li>
 &lt;li>&lt;a href="#part-2">Part 2&lt;/a>
 &lt;ul>
 &lt;li>&lt;a href="#optimization-attempt-1-btree-representation">Optimization (attempt) 1: BTree representation&lt;/a>&lt;/li>
 &lt;/ul>
 &lt;/li>
 &lt;li>&lt;a href="#optimization-2-track-the-leftmost-empty-space">Optimization 2: Track the leftmost empty space&lt;/a>&lt;/li>
 &lt;li>&lt;a href="#benchmarks">Benchmarks&lt;/a>&lt;/li>
 &lt;/ul>
&lt;/nav>

&lt;h2 id="part-1">Part 1&lt;/h2>
&lt;blockquote>
&lt;p>Given a disk layout alternating between files and empty spaces, move all files as early on the disk is possible, splitting into multiple blocks. Return a checksum on the disk.&lt;/p>
&lt;p>Alternating means: &lt;code>23331&lt;/code> would mean a 2 block file, 3 empty, a 3 block file, 3 empty, and a 1 block file.&lt;/p>
&lt;p>The checksum is the sum of &lt;code>file_id * block_index&lt;/code> for all occupied blocks. File IDs are assigned sequentially on initial generation.&lt;/p>&lt;/blockquote></description></item></channel></rss>