<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Esolangs on jverkamp.com</title><link>https://blog.jverkamp.com/programming/topics/esolangs/</link><description>Recent content in Esolangs on jverkamp.com</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Mon, 25 Dec 2017 00:00:00 +0000</lastBuildDate><atom:link href="https://blog.jverkamp.com/programming/topics/esolangs/atom.xml" rel="self" type="application/rss+xml"/><item><title>AoC 2017 Day 25: Turing</title><link>https://blog.jverkamp.com/2017/12/25/aoc-2017-day-25-turing/</link><pubDate>Mon, 25 Dec 2017 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2017/12/25/aoc-2017-day-25-turing/</guid><description>&lt;h3 id="source-the-halting-problem">Source: &lt;a href="http://adventofcode.com/2017/day/25" target="_blank" rel="noopener">The Halting Problem&lt;/a>&lt;/h3>
&lt;blockquote>
&lt;p>&lt;strong>Part 1:&lt;/strong> Implement a &lt;a href="https://en.wikipedia.org/wiki/Turing%20machine">Turing machine&lt;/a> defined as such:&lt;/p>&lt;/blockquote>
&lt;blockquote>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-text" data-lang="text">&lt;/code>&lt;/pre>&lt;/div>&lt;/blockquote>
&lt;p>Begin in state A.
Perform a diagnostic checksum after 6 steps.&lt;/p>
&lt;p>In state A:
If the current value is 0:
- Write the value 1.
- Move one slot to the right.
- Continue with state B.
If the current value is 1:
- Write the value 0.
- Move one slot to the left.
- Continue with state B.&lt;/p>
&lt;p>&amp;hellip;&lt;/p>
&lt;pre tabindex="0">&lt;code>

&amp;gt; What is the final number of `1s` on the tape?





Most of this problem actually came down to reading the input:

```python
# Map of (current state, current value, key) -&amp;gt; value
# key is one of value, offset, state
transitions = {}
breakpoint = 0
state = None
pointer = 0
one_bits = set()

for line in lib.input():
 line = line.strip(&amp;#39;- &amp;#39;)
 arg = line.split()[-1][:-1]

 if arg == &amp;#39;steps&amp;#39;:
 arg = line.split()[-2]

 try:
 arg = int(arg)
 except:
 pass

 # Store values based on that argument
 if line.startswith(&amp;#39;Begin&amp;#39;):
 state = arg
 elif line.startswith(&amp;#39;Perform&amp;#39;):
 breakpoint = arg
 elif line.startswith(&amp;#39;In&amp;#39;):
 current_state = arg
 elif line.startswith(&amp;#39;If&amp;#39;):
 current_value = arg
 elif line.startswith(&amp;#39;Write&amp;#39;):
 transitions[current_state, current_value, &amp;#39;value&amp;#39;] = arg == 1
 elif line.startswith(&amp;#39;Move&amp;#39;):
 transitions[current_state, current_value, &amp;#39;offset&amp;#39;] = 1 if arg == &amp;#39;right&amp;#39; else -1
 elif line.startswith(&amp;#39;Continue&amp;#39;):
 transitions[current_state, current_value, &amp;#39;state&amp;#39;] = arg
&lt;/code>&lt;/pre>&lt;p>As we did in part 1 of &lt;a href="https://blog.jverkamp.com/2017/12/22/aoc-2017-day-22-langtons-ant/">day 22&lt;/a>, we&amp;rsquo;ll use a &lt;code>set&lt;/code> to store the current state (store &lt;code>1&lt;/code>, if an index is not in the &lt;code>set&lt;/code>, it&amp;rsquo;s &lt;code>0&lt;/code>). That gives us the ability to grow unbounded (so long as we have enough RAM).&lt;/p></description></item><item><title>What the (be)funge‽</title><link>https://blog.jverkamp.com/2014/06/10/what-the-befunge/</link><pubDate>Tue, 10 Jun 2014 14:00:29 +0000</pubDate><guid>https://blog.jverkamp.com/2014/06/10/what-the-befunge/</guid><description>&lt;p>Here&amp;rsquo;s a fun little bit of code for you:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>55*4*v _ v
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>v &amp;lt;&amp;gt;:1-:^
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> |:&amp;lt;$ &amp;lt; ,*48 &amp;lt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> @&amp;gt;0&lt;span style="color:#e6db74">&amp;#34;zzif&amp;#34;&lt;/span>&amp;gt;:#,_$ v
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;gt;:3%!| &amp;gt;0&lt;span style="color:#e6db74">&amp;#34;zzub&amp;#34;&lt;/span>&amp;gt;:#,_$^
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;gt;:5%!|
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>v &lt;span style="color:#e6db74">&amp;#34;buzz&amp;#34;&lt;/span>0&amp;lt;&amp;gt;:. ^
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> |!%5: &amp;lt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;gt;:#,_ $&amp;gt; ^
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Gibberish you say? No! &lt;a href="https://en.wikipedia.org/wiki/Befunge">Befuge&lt;/a>!&lt;/p></description></item><item><title>Parallel BF</title><link>https://blog.jverkamp.com/2012/12/31/parallel-bf/</link><pubDate>Mon, 31 Dec 2012 22:45:11 +0000</pubDate><guid>https://blog.jverkamp.com/2012/12/31/parallel-bf/</guid><description>&lt;p>Getting a bit close to the deadline, but I think I have something that&amp;rsquo;s pretty interesting. Basically, it&amp;rsquo;s the same BF interpreter that I wrote about &lt;a href="https://blog.jverkamp.com/2012/12/30/a-brainfk-interpreter/">yesterday&lt;/a> with four additional commands:&lt;/p>
&lt;table>
 &lt;thead>
 &lt;tr>
 &lt;th>&amp;amp;&lt;/th>
 &lt;th>Spawn a new thread; set the current cell to 0 in the parent and 1 in the child&lt;/th>
 &lt;/tr>
 &lt;/thead>
 &lt;tbody>
 &lt;tr>
 &lt;td>~&lt;/td>
 &lt;td>Kill the current thread&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>!&lt;/td>
 &lt;td>Send a ping on the channel specified by the current cell&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>?&lt;/td>
 &lt;td>Wait for a ping on the channel specified by the current cell&lt;/td>
 &lt;/tr>
 &lt;/tbody>
&lt;/table></description></item><item><title>A Brainf**k Interpreter</title><link>https://blog.jverkamp.com/2012/12/30/a-brainfk-interpreter/</link><pubDate>Sun, 30 Dec 2012 14:00:14 +0000</pubDate><guid>https://blog.jverkamp.com/2012/12/30/a-brainfk-interpreter/</guid><description>&lt;p>The &lt;a title="PLT Games" href="http://www.pltgames.com/">PLT Games&lt;/a> website has a competition going where each month there will be some sort of theme for a completely new program. The &lt;a title="PLT Games: December 2012" href="http://www.pltgames.com/competition/2012/12">first theme&lt;/a> is a &lt;a href="https://en.wikipedia.org/wiki/Turing%20Tarpit">Turing Tarpit&lt;/a>&amp;ndash;a language that is technically Turing complete and thus can do anything any other Turing complete language can, but is so minimal as to make doing anything worthwhile overly difficult.&lt;/p>
&lt;blockquote>
&lt;ol start="54">
&lt;li>Beware of the Turing tar-pit in which everything is possible but nothing of interest is easy.
&amp;ndash; Alan Perlis, &lt;cite>&lt;strong>&lt;a href="https://en.wikipedia.org/wiki/Epigrams%20on%20Programming">Epigrams on Programming&lt;/a>&lt;/strong>&lt;/cite>&lt;/li>
&lt;/ol>&lt;/blockquote>
&lt;p>To that end, I&amp;rsquo;ve been working on a little something special which I may or may not finish by the end of the month (yes, I know that&amp;rsquo;s tomorrow). But while I was working on it, I put together a Brainf**k (BF) interpreter which I found pretty interesting to play with.&lt;/p></description></item></channel></rss>