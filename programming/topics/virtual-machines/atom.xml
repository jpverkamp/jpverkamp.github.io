<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Virtual Machines on jverkamp.com</title><link>https://blog.jverkamp.com/programming/topics/virtual-machines/</link><description>Recent content in Virtual Machines on jverkamp.com</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Mon, 21 Jul 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://blog.jverkamp.com/programming/topics/virtual-machines/atom.xml" rel="self" type="application/rss+xml"/><item><title>Building a virtual CPU from NAND gates up</title><link>https://blog.jverkamp.com/2025/07/21/building-a-virtual-cpu-from-nand-gates-up/</link><pubDate>Mon, 21 Jul 2025 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2025/07/21/building-a-virtual-cpu-from-nand-gates-up/</guid><description>&lt;p>Over the past couple of weeks, I&amp;rsquo;ve spent entirely longer than I probably should have falling down the rabbit hole that is the game &lt;a href="https://store.steampowered.com/app/1444480/Turing_Complete/" target="_blank" rel="noopener">Turing Complete&lt;/a>.&lt;/p>
&lt;p>In a nutshell, you start with basically nothing, build up simple logic gates, create memory cells and 1-bit addition, build that into 8-bit math and logic, read instructions RAM, implement loops, and function calls (in hardware!), and eventually use your very own custom built CPU to solve a few programming challenges.&lt;/p></description></item><item><title>StackLang Part IX: Better Testing</title><link>https://blog.jverkamp.com/2023/08/12/stacklang-part-ix-better-testing/</link><pubDate>Sat, 12 Aug 2023 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2023/08/12/stacklang-part-ix-better-testing/</guid><description>&lt;p>Two posts in two days? Madness!&lt;/p>
&lt;div class="ranking">
 &lt;h3 class="title">Posts in &lt;a href="https://blog.jverkamp.com/series/stacklang/">StackLang&lt;/a>:&lt;/h3>
 &lt;div class="content">
 &lt;ul>&lt;li>
 &lt;a href="https://blog.jverkamp.com/2023/08/12/stacklang-part-ix-better-testing/">
 StackLang Part IX: Better Testing
 &lt;/a>&lt;/li>&lt;li>
 &lt;a href="https://blog.jverkamp.com/2023/08/11/stacklang-part-viii-compiler-stacks/">
 StackLang Part VIII: Compiler Stacks
 &lt;/a>&lt;/li>&lt;li>
 &lt;a href="https://blog.jverkamp.com/2023/08/05/stacklang-part-vii-new-cli-and-datatypes/">
 StackLang Part VII: New CLI and Datatypes
 &lt;/a>&lt;/li>&lt;li>
 &lt;a href="https://blog.jverkamp.com/2023/07/16/stacklang-part-vi-some-examples/">
 StackLang Part VI: Some Examples
 &lt;/a>&lt;/li>&lt;li>
 &lt;a href="https://blog.jverkamp.com/2023/07/12/stacklang-part-v-compiling-to-c/">
 StackLang Part V: Compiling to C
 &lt;/a>&lt;/li>&lt;li>
 &lt;a href="https://blog.jverkamp.com/2023/05/01/stacklang-part-iv-an-interpreter/">
 StackLang Part IV: An Interpreter
 &lt;/a>&lt;/li>&lt;li>
 &lt;a href="https://blog.jverkamp.com/2023/04/24/stacklang-part-iii-the-parser/">
 StackLang Part III: The Parser
 &lt;/a>&lt;/li>&lt;li>
 &lt;a href="https://blog.jverkamp.com/2023/04/16/stacklang-part-ii-the-lexer/">
 StackLang Part II: The Lexer
 &lt;/a>&lt;/li>&lt;li>
 &lt;a href="https://blog.jverkamp.com/2023/04/14/stacklang-part-i-the-idea/">
 StackLang Part I: The Idea
 &lt;/a>&lt;/li>&lt;/ul>
 &lt;/div>
&lt;/div>

&lt;p>But really, it got a bit late yesterday so I figured I&amp;rsquo;d split this into two different posts.&lt;/p></description></item><item><title>StackLang Part VIII: Compiler Stacks</title><link>https://blog.jverkamp.com/2023/08/11/stacklang-part-viii-compiler-stacks/</link><pubDate>Fri, 11 Aug 2023 23:59:00 +0000</pubDate><guid>https://blog.jverkamp.com/2023/08/11/stacklang-part-viii-compiler-stacks/</guid><description>&lt;p>Let&amp;rsquo;s continue &lt;a href="https://blog.jverkamp.com/2023/08/05/stacklang-part-vii-new-cli-and-datatypes/">StackLang Part VII: New CLI and Datatypes&lt;/a> and implement &lt;del>lists&lt;/del> stacks in the compiler!&lt;/p>
&lt;div class="ranking">
 &lt;h3 class="title">Posts in &lt;a href="https://blog.jverkamp.com/series/stacklang/">StackLang&lt;/a>:&lt;/h3>
 &lt;div class="content">
 &lt;ul>&lt;li>
 &lt;a href="https://blog.jverkamp.com/2023/08/12/stacklang-part-ix-better-testing/">
 StackLang Part IX: Better Testing
 &lt;/a>&lt;/li>&lt;li>
 &lt;a href="https://blog.jverkamp.com/2023/08/11/stacklang-part-viii-compiler-stacks/">
 StackLang Part VIII: Compiler Stacks
 &lt;/a>&lt;/li>&lt;li>
 &lt;a href="https://blog.jverkamp.com/2023/08/05/stacklang-part-vii-new-cli-and-datatypes/">
 StackLang Part VII: New CLI and Datatypes
 &lt;/a>&lt;/li>&lt;li>
 &lt;a href="https://blog.jverkamp.com/2023/07/16/stacklang-part-vi-some-examples/">
 StackLang Part VI: Some Examples
 &lt;/a>&lt;/li>&lt;li>
 &lt;a href="https://blog.jverkamp.com/2023/07/12/stacklang-part-v-compiling-to-c/">
 StackLang Part V: Compiling to C
 &lt;/a>&lt;/li>&lt;li>
 &lt;a href="https://blog.jverkamp.com/2023/05/01/stacklang-part-iv-an-interpreter/">
 StackLang Part IV: An Interpreter
 &lt;/a>&lt;/li>&lt;li>
 &lt;a href="https://blog.jverkamp.com/2023/04/24/stacklang-part-iii-the-parser/">
 StackLang Part III: The Parser
 &lt;/a>&lt;/li>&lt;li>
 &lt;a href="https://blog.jverkamp.com/2023/04/16/stacklang-part-ii-the-lexer/">
 StackLang Part II: The Lexer
 &lt;/a>&lt;/li>&lt;li>
 &lt;a href="https://blog.jverkamp.com/2023/04/14/stacklang-part-i-the-idea/">
 StackLang Part I: The Idea
 &lt;/a>&lt;/li>&lt;/ul>
 &lt;/div>
&lt;/div>

&lt;p>In this post:&lt;/p></description></item><item><title>StackLang Part VII: New CLI and Datatypes</title><link>https://blog.jverkamp.com/2023/08/05/stacklang-part-vii-new-cli-and-datatypes/</link><pubDate>Sat, 05 Aug 2023 23:59:00 +0000</pubDate><guid>https://blog.jverkamp.com/2023/08/05/stacklang-part-vii-new-cli-and-datatypes/</guid><description>&lt;p>Another day, another Stacklang!&lt;/p>
&lt;div class="ranking">
 &lt;h3 class="title">Posts in &lt;a href="https://blog.jverkamp.com/series/stacklang/">StackLang&lt;/a>:&lt;/h3>
 &lt;div class="content">
 &lt;ul>&lt;li>
 &lt;a href="https://blog.jverkamp.com/2023/08/12/stacklang-part-ix-better-testing/">
 StackLang Part IX: Better Testing
 &lt;/a>&lt;/li>&lt;li>
 &lt;a href="https://blog.jverkamp.com/2023/08/11/stacklang-part-viii-compiler-stacks/">
 StackLang Part VIII: Compiler Stacks
 &lt;/a>&lt;/li>&lt;li>
 &lt;a href="https://blog.jverkamp.com/2023/08/05/stacklang-part-vii-new-cli-and-datatypes/">
 StackLang Part VII: New CLI and Datatypes
 &lt;/a>&lt;/li>&lt;li>
 &lt;a href="https://blog.jverkamp.com/2023/07/16/stacklang-part-vi-some-examples/">
 StackLang Part VI: Some Examples
 &lt;/a>&lt;/li>&lt;li>
 &lt;a href="https://blog.jverkamp.com/2023/07/12/stacklang-part-v-compiling-to-c/">
 StackLang Part V: Compiling to C
 &lt;/a>&lt;/li>&lt;li>
 &lt;a href="https://blog.jverkamp.com/2023/05/01/stacklang-part-iv-an-interpreter/">
 StackLang Part IV: An Interpreter
 &lt;/a>&lt;/li>&lt;li>
 &lt;a href="https://blog.jverkamp.com/2023/04/24/stacklang-part-iii-the-parser/">
 StackLang Part III: The Parser
 &lt;/a>&lt;/li>&lt;li>
 &lt;a href="https://blog.jverkamp.com/2023/04/16/stacklang-part-ii-the-lexer/">
 StackLang Part II: The Lexer
 &lt;/a>&lt;/li>&lt;li>
 &lt;a href="https://blog.jverkamp.com/2023/04/14/stacklang-part-i-the-idea/">
 StackLang Part I: The Idea
 &lt;/a>&lt;/li>&lt;/ul>
 &lt;/div>
&lt;/div>

&lt;p>Today, we&amp;rsquo;ve got two main parts to work on:&lt;/p></description></item><item><title>StackLang Part VI: Some Examples</title><link>https://blog.jverkamp.com/2023/07/16/stacklang-part-vi-some-examples/</link><pubDate>Sun, 16 Jul 2023 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2023/07/16/stacklang-part-vi-some-examples/</guid><description>&lt;p>We&amp;rsquo;ve gone through all sorts of things building up the StackLang language so far:&lt;/p>
&lt;div class="ranking">
 &lt;h3 class="title">Posts in &lt;a href="https://blog.jverkamp.com/series/stacklang/">StackLang&lt;/a>:&lt;/h3>
 &lt;div class="content">
 &lt;ul>&lt;li>
 &lt;a href="https://blog.jverkamp.com/2023/08/12/stacklang-part-ix-better-testing/">
 StackLang Part IX: Better Testing
 &lt;/a>&lt;/li>&lt;li>
 &lt;a href="https://blog.jverkamp.com/2023/08/11/stacklang-part-viii-compiler-stacks/">
 StackLang Part VIII: Compiler Stacks
 &lt;/a>&lt;/li>&lt;li>
 &lt;a href="https://blog.jverkamp.com/2023/08/05/stacklang-part-vii-new-cli-and-datatypes/">
 StackLang Part VII: New CLI and Datatypes
 &lt;/a>&lt;/li>&lt;li>
 &lt;a href="https://blog.jverkamp.com/2023/07/16/stacklang-part-vi-some-examples/">
 StackLang Part VI: Some Examples
 &lt;/a>&lt;/li>&lt;li>
 &lt;a href="https://blog.jverkamp.com/2023/07/12/stacklang-part-v-compiling-to-c/">
 StackLang Part V: Compiling to C
 &lt;/a>&lt;/li>&lt;li>
 &lt;a href="https://blog.jverkamp.com/2023/05/01/stacklang-part-iv-an-interpreter/">
 StackLang Part IV: An Interpreter
 &lt;/a>&lt;/li>&lt;li>
 &lt;a href="https://blog.jverkamp.com/2023/04/24/stacklang-part-iii-the-parser/">
 StackLang Part III: The Parser
 &lt;/a>&lt;/li>&lt;li>
 &lt;a href="https://blog.jverkamp.com/2023/04/16/stacklang-part-ii-the-lexer/">
 StackLang Part II: The Lexer
 &lt;/a>&lt;/li>&lt;li>
 &lt;a href="https://blog.jverkamp.com/2023/04/14/stacklang-part-i-the-idea/">
 StackLang Part I: The Idea
 &lt;/a>&lt;/li>&lt;/ul>
 &lt;/div>
&lt;/div>

&lt;p>But what can we actually &lt;em>do&lt;/em> with it?&lt;/p></description></item><item><title>StackLang Part V: Compiling to C</title><link>https://blog.jverkamp.com/2023/07/12/stacklang-part-v-compiling-to-c/</link><pubDate>Wed, 12 Jul 2023 12:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2023/07/12/stacklang-part-v-compiling-to-c/</guid><description>&lt;p>It&amp;rsquo;s been a bit, but I hope it&amp;rsquo;s worth it. StackLang, part 5: compiling to C!&lt;/p></description></item><item><title>StackLang Part IV: An Interpreter</title><link>https://blog.jverkamp.com/2023/05/01/stacklang-part-iv-an-interpreter/</link><pubDate>Mon, 01 May 2023 23:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2023/05/01/stacklang-part-iv-an-interpreter/</guid><description>&lt;p>StackLang, part 4: an interpreter. Here we go again!&lt;/p>
&lt;p>This time, the goal is to actually get code running&lt;/p></description></item><item><title>StackLang Part III: The Parser</title><link>https://blog.jverkamp.com/2023/04/24/stacklang-part-iii-the-parser/</link><pubDate>Mon, 24 Apr 2023 00:01:00 +0000</pubDate><guid>https://blog.jverkamp.com/2023/04/24/stacklang-part-iii-the-parser/</guid><description>&lt;p>StackLang, part 3: parsing. This is going to be the most complicated one thus far! Onward.&lt;/p></description></item><item><title>StackLang Part II: The Lexer</title><link>https://blog.jverkamp.com/2023/04/16/stacklang-part-ii-the-lexer/</link><pubDate>Sun, 16 Apr 2023 23:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2023/04/16/stacklang-part-ii-the-lexer/</guid><description>&lt;p>StackLang, part 2: lexing.&lt;/p>
&lt;p>It&amp;rsquo;s quite often the simplest part of implementing a programming language (although parsers for s-expression based languages come close), but it&amp;rsquo;s still something that needs done. So here we go!&lt;/p></description></item><item><title>StackLang Part I: The Idea</title><link>https://blog.jverkamp.com/2023/04/14/stacklang-part-i-the-idea/</link><pubDate>Fri, 14 Apr 2023 23:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2023/04/14/stacklang-part-i-the-idea/</guid><description>&lt;p>I enjoy writing programming languages. &lt;a href="https://blog.jverkamp.com/2013/08/21/a-tiny-virtual-machine-in-racket/">Example: Tiny&lt;/a>. Let’s do that again.&lt;/p>
&lt;p>This time, StackLang:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-text" data-lang="text">&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> @[n fact]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> { n 1 - $fact fact n * }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> N 1 &amp;lt;= if
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>} @fact
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>5 $fact fact writeln
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Bit of gibberish there, I suppose, but the goal is to write everything in a postfix/stack based model. So &lt;code>n 1 - $fact fact n *&lt;/code> is equivalent to &lt;code>fact(fact, n - 1) * n&lt;/code> in a more traditional language.&lt;/p>
&lt;p>Over the next few posts, I hope to write up where I am thus far and what’s next.&lt;/p></description></item><item><title>AoC 2017 Day 25: Turing</title><link>https://blog.jverkamp.com/2017/12/25/aoc-2017-day-25-turing/</link><pubDate>Mon, 25 Dec 2017 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2017/12/25/aoc-2017-day-25-turing/</guid><description>&lt;h3 id="source-the-halting-problem">Source: &lt;a href="http://adventofcode.com/2017/day/25" target="_blank" rel="noopener">The Halting Problem&lt;/a>&lt;/h3>
&lt;blockquote>
&lt;p>&lt;strong>Part 1:&lt;/strong> Implement a &lt;a href="https://en.wikipedia.org/wiki/Turing%20machine">Turing machine&lt;/a> defined as such:&lt;/p>&lt;/blockquote>
&lt;blockquote>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-text" data-lang="text">&lt;/code>&lt;/pre>&lt;/div>&lt;/blockquote>
&lt;p>Begin in state A.
Perform a diagnostic checksum after 6 steps.&lt;/p>
&lt;p>In state A:
If the current value is 0:
- Write the value 1.
- Move one slot to the right.
- Continue with state B.
If the current value is 1:
- Write the value 0.
- Move one slot to the left.
- Continue with state B.&lt;/p>
&lt;p>&amp;hellip;&lt;/p>
&lt;pre tabindex="0">&lt;code>

&amp;gt; What is the final number of `1s` on the tape?





Most of this problem actually came down to reading the input:

```python
# Map of (current state, current value, key) -&amp;gt; value
# key is one of value, offset, state
transitions = {}
breakpoint = 0
state = None
pointer = 0
one_bits = set()

for line in lib.input():
 line = line.strip(&amp;#39;- &amp;#39;)
 arg = line.split()[-1][:-1]

 if arg == &amp;#39;steps&amp;#39;:
 arg = line.split()[-2]

 try:
 arg = int(arg)
 except:
 pass

 # Store values based on that argument
 if line.startswith(&amp;#39;Begin&amp;#39;):
 state = arg
 elif line.startswith(&amp;#39;Perform&amp;#39;):
 breakpoint = arg
 elif line.startswith(&amp;#39;In&amp;#39;):
 current_state = arg
 elif line.startswith(&amp;#39;If&amp;#39;):
 current_value = arg
 elif line.startswith(&amp;#39;Write&amp;#39;):
 transitions[current_state, current_value, &amp;#39;value&amp;#39;] = arg == 1
 elif line.startswith(&amp;#39;Move&amp;#39;):
 transitions[current_state, current_value, &amp;#39;offset&amp;#39;] = 1 if arg == &amp;#39;right&amp;#39; else -1
 elif line.startswith(&amp;#39;Continue&amp;#39;):
 transitions[current_state, current_value, &amp;#39;state&amp;#39;] = arg
&lt;/code>&lt;/pre>&lt;p>As we did in part 1 of &lt;a href="https://blog.jverkamp.com/2017/12/22/aoc-2017-day-22-langtons-ant/">day 22&lt;/a>, we&amp;rsquo;ll use a &lt;code>set&lt;/code> to store the current state (store &lt;code>1&lt;/code>, if an index is not in the &lt;code>set&lt;/code>, it&amp;rsquo;s &lt;code>0&lt;/code>). That gives us the ability to grow unbounded (so long as we have enough RAM).&lt;/p></description></item><item><title>AoC 2017 Day 18: Duetvm</title><link>https://blog.jverkamp.com/2017/12/18/aoc-2017-day-18-duetvm/</link><pubDate>Mon, 18 Dec 2017 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2017/12/18/aoc-2017-day-18-duetvm/</guid><description>&lt;h3 id="source-duet">Source: &lt;a href="http://adventofcode.com/2017/day/18" target="_blank" rel="noopener">Duet&lt;/a>&lt;/h3>
&lt;blockquote>
&lt;p>&lt;strong>Part 1:&lt;/strong> Create a virtual machine with the following instruction set:&lt;/p>&lt;/blockquote>
&lt;blockquote>
&lt;ul>
&lt;li>&lt;code>snd X&lt;/code> plays a sound with a frequency equal to the value of &lt;code>X&lt;/code>&lt;/li>
&lt;li>&lt;code>set X Y&lt;/code> sets register &lt;code>X&lt;/code> to &lt;code>Y&lt;/code>&lt;/li>
&lt;li>&lt;code>add X Y&lt;/code> set register &lt;code>X&lt;/code> to &lt;code>X + Y&lt;/code>&lt;/li>
&lt;li>&lt;code>mul X Y&lt;/code> sets register &lt;code>X&lt;/code> to &lt;code>X * Y&lt;/code>&lt;/li>
&lt;li>&lt;code>mod X Y&lt;/code> sets register &lt;code>X&lt;/code> to &lt;code>X mod Y&lt;/code>&lt;/li>
&lt;li>&lt;code>rcv X&lt;/code> recovers the frequency of the last sound played, if &lt;code>X&lt;/code> is not zero&lt;/li>
&lt;li>&lt;code>jgz X Y&lt;/code> jumps with an offset of the value of &lt;code>Y&lt;/code>, iff &lt;code>X&lt;/code> is greater than zero&lt;/li>
&lt;/ul>&lt;/blockquote>
&lt;blockquote>
&lt;p>In most cases, &lt;code>X&lt;/code> and &lt;code>Y&lt;/code> can be either an integer value or a register.&lt;/p>&lt;/blockquote>
&lt;blockquote>
&lt;p>What is the value recovered by &lt;code>rcv&lt;/code> the first time &lt;code>X&lt;/code> is non-zero?&lt;/p>&lt;/blockquote></description></item><item><title>AoC 2017 Day 16: Swing Your Partner</title><link>https://blog.jverkamp.com/2017/12/16/aoc-2017-day-16-swing-your-partner/</link><pubDate>Sat, 16 Dec 2017 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2017/12/16/aoc-2017-day-16-swing-your-partner/</guid><description>&lt;h3 id="source-permutation-promenade">Source: &lt;a href="http://adventofcode.com/2017/day/16" target="_blank" rel="noopener">Permutation Promenade&lt;/a>&lt;/h3>
&lt;blockquote>
&lt;p>&lt;strong>Part 1:&lt;/strong> Running on the string &lt;code>a...p&lt;/code> apply a series of the following commands:&lt;/p>&lt;/blockquote>
&lt;blockquote>
&lt;ul>
&lt;li>&lt;code>sX&lt;/code> rotates the string right by &lt;code>X&lt;/code> positions&lt;/li>
&lt;li>&lt;code>xX/Y&lt;/code> swaps positions &lt;code>X&lt;/code> and &lt;code>Y&lt;/code>&lt;/li>
&lt;li>&lt;code>pA/B&lt;/code> swaps the letters &lt;code>A&lt;/code> and &lt;code>B&lt;/code> no matter their positions&lt;/li>
&lt;/ul>&lt;/blockquote></description></item><item><title>AoC 2017 Day 8: Conditiputer</title><link>https://blog.jverkamp.com/2017/12/08/aoc-2017-day-8-conditiputer/</link><pubDate>Fri, 08 Dec 2017 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2017/12/08/aoc-2017-day-8-conditiputer/</guid><description>&lt;h3 id="source-i-heard-you-like-registers">Source: &lt;a href="http://adventofcode.com/2017/day/8" target="_blank" rel="noopener">I Heard You Like Registers&lt;/a>&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>&lt;/h3>
&lt;blockquote>
&lt;p>&lt;strong>Part 1:&lt;/strong> Given a set of registers initialized to 0, interpret a series of instruction of the form:&lt;/p>&lt;/blockquote>
&lt;blockquote>
&lt;ul>
&lt;li>&lt;code>{register} (inc|dec) {number|register} if {number|register} (&amp;lt;|&amp;lt;=|=|!=|=&amp;gt;|&amp;gt;) {number|register}&lt;/code>&lt;/li>
&lt;/ul>&lt;/blockquote>
&lt;blockquote>
&lt;p>What is the largest value in any register?&lt;/p>&lt;/blockquote></description></item><item><title>AoC 2016 Day 25: Assembunny3</title><link>https://blog.jverkamp.com/2016/12/25/aoc-2016-day-25-assembunny3/</link><pubDate>Sun, 25 Dec 2016 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2016/12/25/aoc-2016-day-25-assembunny3/</guid><description>&lt;h3 id="source-clock-signal">Source: &lt;a href="http://adventofcode.com/2016/day/25" target="_blank" rel="noopener">Clock Signal&lt;/a>&lt;/h3>
&lt;blockquote>
&lt;p>&lt;strong>Part 1:&lt;/strong> Take the &lt;a href="https://blog.jverkamp.com/2016/12/12/aoc-2016-day-12-assembunny/">assembunny interpreter from day 12&lt;/a> and add one new instruction (out &lt;code>x&lt;/code>) which transmits the value &lt;code>x&lt;/code> (either an integer or register). Find the lowest value we can initialize &lt;code>a&lt;/code> to so that the &lt;code>out&lt;/code>put signals form an infinite repeating pattern of &lt;code>0&lt;/code>, &lt;code>1&lt;/code>, &lt;code>0&lt;/code>, &lt;code>1&lt;/code>, &amp;hellip;&lt;/p>&lt;/blockquote></description></item><item><title>AoC 2016 Day 23: Assembunny2</title><link>https://blog.jverkamp.com/2016/12/23/aoc-2016-day-23-assembunny2/</link><pubDate>Fri, 23 Dec 2016 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2016/12/23/aoc-2016-day-23-assembunny2/</guid><description>&lt;h3 id="source-safe-cracking">Source: &lt;a href="http://adventofcode.com/2016/day/23" target="_blank" rel="noopener">Safe Cracking&lt;/a>&lt;/h3>
&lt;blockquote>
&lt;p>&lt;strong>Part 1:&lt;/strong> Take the &lt;a href="https://blog.jverkamp.com/2016/12/12/aoc-2016-day-12-assembunny/">assembunny interpreter from day 12&lt;/a> and add an instruction (tgl &lt;code>X&lt;/code>) that modifies the code at an offset of &lt;code>X&lt;/code> instructions.&lt;/p>&lt;/blockquote>
&lt;blockquote>
&lt;ul>
&lt;li>&lt;code>inc&lt;/code> becomes &lt;code>dec&lt;/code>; any other one argument instruction (including &lt;code>tgl&lt;/code>) becomes &lt;code>inc&lt;/code>&lt;/li>
&lt;li>&lt;code>jnz&lt;/code> becomes &lt;code>cpy&lt;/code>; any other two argument instructions become &lt;code>jnz&lt;/code>&lt;/li>
&lt;li>Toggling an instruction outside of the program does nothing (it does not halt execution)&lt;/li>
&lt;li>If toggling produces an invalid instruction, ignore it&lt;/li>
&lt;/ul>&lt;/blockquote>
&lt;blockquote>
&lt;p>Run the given program with the initial register of &lt;code>a = 7&lt;/code>. What is the final value in register &lt;code>a&lt;/code>?&lt;/p>&lt;/blockquote></description></item><item><title>AoC 2016 Day 12: Assembunny</title><link>https://blog.jverkamp.com/2016/12/12/aoc-2016-day-12-assembunny/</link><pubDate>Mon, 12 Dec 2016 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2016/12/12/aoc-2016-day-12-assembunny/</guid><description>&lt;h3 id="source-leonardo">Source: &lt;a href="http://adventofcode.com/2016/day/12" target="_blank" rel="noopener">Leonardo&amp;rsquo;s Monorail&lt;/a>&lt;/h3>
&lt;blockquote>
&lt;p>&lt;strong>Part 1:&lt;/strong> Create a &lt;a href="https://en.wikipedia.org/wiki/virtual%20machine">virtual machine&lt;/a> that has four registers (&lt;code>a&lt;/code>, &lt;code>b&lt;/code>, &lt;code>c&lt;/code>, and &lt;code>d&lt;/code>) and can process the following instructions:&lt;/p>&lt;/blockquote>
&lt;blockquote>
&lt;ul>
&lt;li>&lt;code>cpy x y&lt;/code> - copies &lt;code>x&lt;/code> into &lt;code>y&lt;/code> (&lt;code>x&lt;/code> can be an integer or a register)&lt;/li>
&lt;li>&lt;code>inc x&lt;/code> - increases register &lt;code>x&lt;/code> by one&lt;/li>
&lt;li>&lt;code>dec x&lt;/code> - decreases register &lt;code>x&lt;/code> by one&lt;/li>
&lt;li>&lt;code>jnz x y&lt;/code> - jumps over &lt;code>y&lt;/code> instructions if &lt;code>x&lt;/code> is not zero (&lt;code>x&lt;/code> can be an integer or a register)&lt;/li>
&lt;/ul>&lt;/blockquote>
&lt;blockquote>
&lt;p>What is the final value in register &lt;code>a&lt;/code>?&lt;/p>&lt;/blockquote></description></item><item><title>'Tiny' Turing completeness without MMOV</title><link>https://blog.jverkamp.com/2013/08/22/tiny-turing-completeness-without-mmov/</link><pubDate>Thu, 22 Aug 2013 21:00:54 +0000</pubDate><guid>https://blog.jverkamp.com/2013/08/22/tiny-turing-completeness-without-mmov/</guid><description>&lt;p>Something was bugging me about my proof from yesterday. If we take another tack on proving Turing completeness, all we would have to prove is that we can simulate &lt;a href="https://en.wikipedia.org/wiki/Subleq#Subtract%20and%20branch%20if%20less%20than%20or%20equal%20to%20zero">SUBLEQ&lt;/a>. Since &lt;code>SUBLEQ&lt;/code> is Turing complete, that&amp;rsquo;s all we need&amp;ndash;just convert each &lt;code>SUBLEQ&lt;/code> into a &lt;code>SUB&lt;/code>, &lt;code>JZ&lt;/code>, and a &lt;code>JLS&lt;/code>. So that means that Tiny as written should be Turing complete.&lt;/p>
&lt;p>So how does that work?&lt;/p></description></item><item><title>A 'Tiny' virtual machine in Racket</title><link>https://blog.jverkamp.com/2013/08/21/a-tiny-virtual-machine-in-racket/</link><pubDate>Wed, 21 Aug 2013 00:00:28 +0000</pubDate><guid>https://blog.jverkamp.com/2013/08/21/a-tiny-virtual-machine-in-racket/</guid><description>&lt;p>&lt;a href="http://www.reddit.com/r/dailyprogrammer/comments/1kqxz9/080813_challenge_132_intermediate_tiny_assembler/">Today&amp;rsquo;s challenge&lt;/a> at /r/dailyprogrammer asks to implement an assembler for a small virtual machine. It has only 16 &lt;a href="https://en.wikipedia.org/wiki/Assembly%20language#Opcode%20mnemonics%20and%20extended%20mnemonics">mnemonics&lt;/a> which in unique &lt;a href="https://en.wikipedia.org/wiki/Opcode">opcodes&lt;/a> (each instruction can have multiple forms for if they&amp;rsquo;re accessing memory or literals), so it&amp;rsquo;s a simple virtual machine indeed. As a challenge, you&amp;rsquo;re supposed to write an interesting program (I actually wrote a virtual machine as well to test them). As an even better challenge, we&amp;rsquo;re supposed to prove that Tiny is &lt;a href="https://en.wikipedia.org/wiki/Turing%20complete">Turing complete&lt;/a>. Well, let&amp;rsquo;s get to it!&lt;/p></description></item></channel></rss>