<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>OEIS on jverkamp.com</title><link>https://blog.jverkamp.com/programming/topics/oeis/</link><description>Recent content in OEIS on jverkamp.com</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://blog.jverkamp.com/programming/topics/oeis/atom.xml" rel="self" type="application/rss+xml"/><item><title>Lunar Arithmetic in Rust</title><link>https://blog.jverkamp.com/2022/09/21/lunar-arithmetic-in-rust/</link><pubDate>Wed, 21 Sep 2022 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2022/09/21/lunar-arithmetic-in-rust/</guid><description>I&amp;rsquo;ve been playing with various languages / language design a lot recently (inspired by my Runelang series). As I tweak and change what I&amp;rsquo;d like to implement in a language&amp;hellip; I kept finding myself coming back to more or less exactly how Rust looks (albeit without the borrowing). So&amp;hellip; that seems like a pretty good reason to start picking up some Rust.
In another thread of thought, I stumbled upon two OEIS (on-line encyclopedia of integer sequences) sequences: A087061: Array T(n,k) = lunar sum n+k (n &amp;gt;= 0, k &amp;gt;= 0) read by antidiagonals and A087062: Array T(n,k) = lunar product n*k (n &amp;gt;= 1, k &amp;gt;= 1) read by antidiagonals.</description></item></channel></rss>