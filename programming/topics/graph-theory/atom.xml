<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Graph Theory on jverkamp.com</title><link>https://blog.jverkamp.com/programming/topics/graph-theory/</link><description>Recent content in Graph Theory on jverkamp.com</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://blog.jverkamp.com/programming/topics/graph-theory/atom.xml" rel="self" type="application/rss+xml"/><item><title>AoC 2017 Day 12: Gridlock</title><link>https://blog.jverkamp.com/2017/12/12/aoc-2017-day-12-gridlock/</link><pubDate>Tue, 12 Dec 2017 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2017/12/12/aoc-2017-day-12-gridlock/</guid><description>&lt;h3 id="source-digital-plumberhttpadventofcodecom2017day12">Source: &lt;a href="http://adventofcode.com/2017/day/12">Digital Plumber&lt;/a>&lt;/h3>
&lt;blockquote>
&lt;p>&lt;strong>Part 1:&lt;/strong> A network of nodes is defined by a list of lines formatted as such:&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;pre tabindex="0">&lt;code>&lt;/code>&lt;/pre>&lt;/blockquote>
&lt;p>2 &amp;lt;-&amp;gt; 0, 3, 4&lt;/p></description></item><item><title>Cracker Barrel Peg Game, Part 3</title><link>https://blog.jverkamp.com/2014/07/10/cracker-barrel-peg-game-part-3/</link><pubDate>Thu, 10 Jul 2014 09:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2014/07/10/cracker-barrel-peg-game-part-3/</guid><description>&lt;p>If you were paying attention when I posted part 2 to GitHub (&lt;a href="https://github.com/jpverkamp/small-projects/blob/master/blog/pegs.rkt">pegs.rkt&lt;/a>), you might have noticed a function I hadn&amp;rsquo;t talked about: &lt;code>play&lt;/code>&lt;/p></description></item><item><title>Cracker Barrel Peg Game, Part 2</title><link>https://blog.jverkamp.com/2014/07/09/cracker-barrel-peg-game-part-2/</link><pubDate>Wed, 09 Jul 2014 09:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2014/07/09/cracker-barrel-peg-game-part-2/</guid><description>&lt;p>Hey, remember that post a few days ago about the &lt;a href="https://blog.jverkamp.com/2014/07/10/cracker-barrel-peg-game-part-3/">Cracker Barrel peg game&lt;/a>? Right at the end, I mentioned that there would be a part two, all about how to bend the puzzle at least a bit to your advantage. Basically, rather than finding the first solution to the peg game, we&amp;rsquo;re going to find &lt;em>all&lt;/em> of them. From there, we can determine which moves are easier to win from, which are harder, and which are downright impossible. Let&amp;rsquo;s do it!&lt;/p></description></item><item><title>Cracker Barrel Peg Game</title><link>https://blog.jverkamp.com/2014/07/05/cracker-barrel-peg-game/</link><pubDate>Sat, 05 Jul 2014 09:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2014/07/05/cracker-barrel-peg-game/</guid><description>&lt;p>Ever been to &lt;a href="http://www.crackerbarrel.com/">Cracker Barrel&lt;/a>? Remember that &lt;a href="http://shop.crackerbarrel.com/Peg-Game/dp/B0050PMMQA">peg game&lt;/a>? It seems that rather a few people are interested in how to solve it: &lt;a href="https://www.google.com/?q=cracker+barrel+peg+game">Google&lt;/a>. Let&amp;rsquo;s do that.&lt;/p></description></item><item><title>Graph coloring</title><link>https://blog.jverkamp.com/2014/01/15/graph-coloring/</link><pubDate>Wed, 15 Jan 2014 14:00:14 +0000</pubDate><guid>https://blog.jverkamp.com/2014/01/15/graph-coloring/</guid><description>&lt;p>Here&amp;rsquo;s &lt;a href="http://www.reddit.com/r/dailyprogrammer/comments/1tj0kl/122313_challenge_130_hard_coloring_frances/">another one&lt;/a> from /r/dailyprogrammer:&lt;/p>
&lt;blockquote>
&lt;p>&amp;hellip; Your goal is to color a map of these regions with two requirements: 1) make sure that each adjacent department do not share a color, so you can clearly distinguish each department, and 2) minimize these numbers of colors.&lt;/p>
&lt;/blockquote>
&lt;p>Essentially, &lt;a href="https://en.wikipedia.org/wiki/graph%20coloring">graph coloring&lt;/a>.&lt;/p></description></item><item><title>Graph radius</title><link>https://blog.jverkamp.com/2014/01/14/graph-radius/</link><pubDate>Tue, 14 Jan 2014 14:00:41 +0000</pubDate><guid>https://blog.jverkamp.com/2014/01/14/graph-radius/</guid><description>&lt;p>&lt;a href="http://www.reddit.com/r/dailyprogrammer/comments/1tiz4z/122313_challenge_140_intermediate_graph_radius/">Here&amp;rsquo;s&lt;/a> a quick problem from the DailyProgrammer subreddit. Basically, we want to calculate the radius of a graph:&lt;/p>
&lt;blockquote>
&lt;span class="latex-inline">radius(g) = \min\limits_{n_0 \in g} \max\limits_{n_1 \in g} d_g(n_0, n_1)&lt;/span>
&lt;/blockquote></description></item><item><title>Edges to adjacency</title><link>https://blog.jverkamp.com/2013/12/23/edges-to-adjacency/</link><pubDate>Mon, 23 Dec 2013 14:00:02 +0000</pubDate><guid>https://blog.jverkamp.com/2013/12/23/edges-to-adjacency/</guid><description>&lt;p>Another quick one, this time &lt;a href="http://www.reddit.com/r/dailyprogrammer/comments/1t6dlf/121813_challenge_140_intermediate_adjacency_matrix/">from /r/dailyprogrammer&lt;/a>:&lt;/p>
&lt;blockquote>
&lt;p>Your goal is to write a program that takes in a list of edge-node relationships, and print a directed adjacency matrix for it. Our convention will follow that rows point to columns. Follow the examples for clarification of this convention.&lt;/p>
&lt;/blockquote></description></item><item><title>Path to philosophy</title><link>https://blog.jverkamp.com/2013/03/28/path-to-philosophy/</link><pubDate>Thu, 28 Mar 2013 14:00:05 +0000</pubDate><guid>https://blog.jverkamp.com/2013/03/28/path-to-philosophy/</guid><description>&lt;p>Yesterday, &lt;a title="Daily programmer sub-reddit" href="http://www.reddit.com/r/dailyprogrammer/">the daily programmer Subreddit&lt;/a> had &lt;a title="[03/27/13] Challenge #121 [Intermediate] Path to Philosophy" href="http://www.reddit.com/r/dailyprogrammer/comments/1b3ka1/032713_challenge_121_intermediate_path_to/">a post that&lt;/a> mirrored a problem I&amp;rsquo;ve often seen before: the idea that if you follow first links ((With some caveats)) on &lt;a href="https://en.wikipedia.org/wiki/Main%20Page">Wikipedia&lt;/a>, you eventually end with &lt;a href="https://en.wikipedia.org/wiki/Philosophy">Philosophy&lt;/a>. For example, if you follow the first links from &lt;a href="https://en.wikipedia.org/wiki/Molecule">Molecule&lt;/a>, you get the following path:&lt;/p>
&lt;blockquote>
&lt;p>&lt;a href="https://en.wikipedia.org/wiki/Molecule">Molecule&lt;/a> → &lt;a href="https://en.wikipedia.org/wiki/Atom">Atom&lt;/a> → &lt;a href="https://en.wikipedia.org/wiki/Matter">Matter&lt;/a> → &lt;a href="https://en.wikipedia.org/wiki/Rest%20Mass">Rest Mass&lt;/a> → &lt;a href="https://en.wikipedia.org/wiki/Invariant%20Mass">Invariant Mass&lt;/a> → &lt;a href="https://en.wikipedia.org/wiki/Energy">Energy&lt;/a> → &lt;a href="https://en.wikipedia.org/wiki/Kinetic%20Energy">Kinetic Energy&lt;/a> → &lt;a href="https://en.wikipedia.org/wiki/Physics">Physics&lt;/a> → &lt;a href="https://en.wikipedia.org/wiki/Natural%20Philosophy">Natural Philosophy&lt;/a> → &lt;a href="https://en.wikipedia.org/wiki/Philosophy">Philosophy&lt;/a>&lt;/p>
&lt;/blockquote></description></item></channel></rss>