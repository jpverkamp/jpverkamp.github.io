<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Web Development on jverkamp.com</title>
    <link>https://blog.jverkamp.com/programming/topics/web-development/</link>
    <description>Recent content in Web Development on jverkamp.com</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 15 Feb 2018 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://blog.jverkamp.com/programming/topics/web-development/atom.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Automatic self-signed HTTPS for local development</title>
      <link>https://blog.jverkamp.com/2018/02/15/automatic-self-signed-https-for-local-development/</link>
      <pubDate>Thu, 15 Feb 2018 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2018/02/15/automatic-self-signed-https-for-local-development/</guid>
      <description>&lt;p&gt;From time to time when doing web development, you need to test something related to HTTPS. In some cases, the application you&amp;rsquo;re writing already supports HTTPS natively and that&amp;rsquo;s no problem. But more often (and probably better, in my opinion) is the case when you have another service (be it an AWS ELB or an nginx layer) that will terminate the HTTPS connection for you so your application doesn&amp;rsquo;t have to know how to speak HTTPS.&lt;/p&gt;

&lt;p&gt;In those cases, how can you test functionality that specifically interacts with HTTPS?&lt;/p&gt;

&lt;p&gt;Today I will show you &lt;code&gt;autohttps&lt;/code&gt;, a thin nginx proxy using Docker and a &lt;a href=&#34;https://en.wikipedia.org/wiki/self%20signed%20certificate&#34;&gt;self signed certificate&lt;/a&gt; to automatically create an HTTPS proxy in front of your application.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Audiobooks to Podcasts</title>
      <link>https://blog.jverkamp.com/2016/02/26/audiobooks-to-podcasts/</link>
      <pubDate>Fri, 26 Feb 2016 00:05:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2016/02/26/audiobooks-to-podcasts/</guid>
      <description>&lt;p&gt;I&amp;rsquo;ve recently started to listen to audiobooks again (The Aeronaut&amp;rsquo;s Windlass). If you buy books through Audible or some other setup that has their own app, it&amp;rsquo;s a straight forward enough process. On the other hand, if you have them on CD and want to play them on a mobile device&amp;hellip; It&amp;rsquo;s a little more interesting.&lt;/p&gt;

&lt;p&gt;I tried a few different apps that purport to do exactly what I wanted: import an audiobook as a folder full of MP3s and play them, but none that quite meet what I wanted. Since I also listen to a lot of podcasts and have more than one podcast app that I really like (I&amp;rsquo;ve used and liked both &lt;a href=&#34;http://www.downcastapp.com/&#34;&gt;Downcast&lt;/a&gt; and &lt;a href=&#34;http://www.shiftyjelly.com/pocketcasts&#34;&gt;Pocket Casts&lt;/a&gt;), I decided to see if I couldn&amp;rsquo;t use one of those as an audiobook player.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Generating YouTube user RSS feeds</title>
      <link>https://blog.jverkamp.com/2015/05/11/generating-youtube-user-rss-feeds/</link>
      <pubDate>Mon, 11 May 2015 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2015/05/11/generating-youtube-user-rss-feeds/</guid>
      <description>&lt;p&gt;On 4 March 2014, YouTube deprecated the v2.0 API for YouTube (&lt;a href=&#34;https://developers.google.com/youtube/2.0/developers_guide_protocol_deprecated&#34;&gt;source&lt;/a&gt;). One of the unfortunate side effects was that RSS feeds for user uploads were included in what was deprecated.&lt;/p&gt;

&lt;p&gt;Previously, you could get an RSS feed with a link of the form: &lt;code&gt;https://gdata.youtube.com/feeds/base/users/{user}/uploads&lt;/code&gt; For the longest time, even after the deprecation, those links still worked, but a couple weeks ago, more and more of the video feeds I was subscribed to started redirecting to &lt;a href=&#34;https://www.youtube.com/channel/UCMDQxm7cUx3yXkfeHa5zJIQ/videos&#34;&gt;YouTube Help account&lt;/a&gt;. As thrilling as that channel is, it&amp;rsquo;s not what I&amp;rsquo;m looking for.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s fix it.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>CSRF protection injection with jQuery and Zend</title>
      <link>https://blog.jverkamp.com/2014/01/13/csrf-protection-injection-with-jquery-and-zend/</link>
      <pubDate>Mon, 13 Jan 2014 14:00:24 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2014/01/13/csrf-protection-injection-with-jquery-and-zend/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Csrf&#34;&gt;Cross-site request forgery&lt;/a&gt; attacks are among the most common vulnerabilities against websites, listed as &lt;a href=&#34;https://www.owasp.org/index.php/Top_10_2013-A8-Cross-Site_Request_Forgery_(CSRF)&#34;&gt;number 8&lt;/a&gt; on &lt;a href=&#34;https://www.owasp.org/index.php/Top_10_2013-Top_10&#34;&gt;OWASP&amp;rsquo;s 2013 Top 10 list&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Approximating Pi with Buffon&#39;s Needle</title>
      <link>https://blog.jverkamp.com/2013/03/18/approximating-pi-with-buffons-needle/</link>
      <pubDate>Mon, 18 Mar 2013 14:00:14 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2013/03/18/approximating-pi-with-buffons-needle/</guid>
      <description>&lt;p&gt;I&amp;rsquo;m a bit late for Pi Day, but Programming Praxis had &lt;a href=&#34;http://programmingpraxis.com/2013/03/15/buffons-needle/&#34; title=&#34;Buffon&#39;s Needle&#34;&gt;a neat problem on Friday&lt;/a&gt; that I wanted to check out:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Suppose we have a floor made of parallel strips of wood, each the same width, and we drop a needle onto the floor. What is the probability that the needle will lie across a line between two strips?&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>Partitioning the Dutch national flag</title>
      <link>https://blog.jverkamp.com/2013/03/06/partitioning-the-dutch-national-flag/</link>
      <pubDate>Wed, 06 Mar 2013 14:00:08 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2013/03/06/partitioning-the-dutch-national-flag/</guid>
      <description>&lt;p&gt;&lt;a title=&#34;Dutch National Flag&#34; href=&#34;http://programmingpraxis.com/2013/03/05/dutch-national-flag/&#34;&gt;Yesterday&amp;rsquo;s post&lt;/a&gt; from Programming Praxis asks us to solve a problem known as the Dutch National Flag problem (attributed to &lt;a href=&#34;https://en.wikipedia.org/wiki/Edsgar%20Dijkstra&#34;&gt;Edsgar Dijkstra&lt;/a&gt;): &lt;em&gt;sort an array of red, white and blue symbols so that all reds come together, followed by all whites, followed finally by all blues&lt;/em&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Translate CSV to HTML</title>
      <link>https://blog.jverkamp.com/2013/01/16/translate-csv-to-html/</link>
      <pubDate>Wed, 16 Jan 2013 04:55:10 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2013/01/16/translate-csv-to-html/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://programmingpraxis.com/2013/01/15/translate-csv-to-html/&#34; title=&#34;Translate CSV to HTML&#34;&gt;Yesterday&amp;rsquo;s post&lt;/a&gt; from Programming Praxis asks us to write a function that will read content formatted as &lt;a href=&#34;https://en.wikipedia.org/wiki/comma-separated%20values&#34;&gt;comma-separated values&lt;/a&gt; and output the result as an HTML table. Their solution uses the &lt;a href=&#34;http://programmingpraxis.com/essays/#text-file-databases&#34; title=&#34;Text file database&#34;&gt;text file database library&lt;/a&gt; that they posted about (which is a neat concept, you should check it out), but I think I&amp;rsquo;m going to work out the solution more directly.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Generated HTML index</title>
      <link>https://blog.jverkamp.com/2012/10/06/generated-html-index/</link>
      <pubDate>Sat, 06 Oct 2012 14:00:12 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2012/10/06/generated-html-index/</guid>
      <description>&lt;p&gt;A simple script today to generate an HTML index listing all of the files in a given directory. This has come in handy in the past when Apache has had &lt;code&gt;Options -Indexes&lt;/code&gt; set (disabling their automatically generated indexes) and I didn&amp;rsquo;t have the permissions to override it.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Elementary cellular automaton</title>
      <link>https://blog.jverkamp.com/2012/10/03/elementary-cellular-automaton/</link>
      <pubDate>Wed, 03 Oct 2012 14:00:47 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2012/10/03/elementary-cellular-automaton/</guid>
      <description>&lt;p&gt;Today we&amp;rsquo;re going to be playing with an HTML5 canvas again (previously we made &lt;a href=&#34;https://blog.jverkamp.com/2012/09/26/line-art-with-an-html5-canvas/&#34;&gt;line art&lt;/a&gt; and &lt;a href=&#34;https://blog.jverkamp.com/2012/09/27/html5-bugs/&#34;&gt;bugs&lt;/a&gt;). This time, the goal is to make a tool where you can explore &lt;a href=&#34;http://mathworld.wolfram.com/ElementaryCellularAutomaton.html&#34; title=&#34;Wolfram Mathworld: Elementary Cellular Automaton&#34;&gt;elementary cellular automaton&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>HTML5 Bugs</title>
      <link>https://blog.jverkamp.com/2012/09/27/html5-bugs/</link>
      <pubDate>Thu, 27 Sep 2012 14:00:13 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2012/09/27/html5-bugs/</guid>
      <description>&lt;p&gt;In the spirit of &lt;a href=&#34;https://blog.jverkamp.com/2012/09/26/line-art-with-an-html5-canvas/&#34;&gt;yesterday&amp;rsquo;s post&lt;/a&gt; about HTML5&amp;rsquo;s &lt;code&gt;canvas&lt;/code&gt;, I&amp;rsquo;ve got another post. This time, it&amp;rsquo;s a little buggy. 😄&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>