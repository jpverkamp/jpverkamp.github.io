<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>p5js on jverkamp.com</title><link>https://blog.jverkamp.com/programming/topics/p5js/</link><description>Recent content in p5js on jverkamp.com</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://blog.jverkamp.com/programming/topics/p5js/atom.xml" rel="self" type="application/rss+xml"/><item><title>Neural Network Cellular Automata</title><link>https://blog.jverkamp.com/2021/09/06/neural-network-cellular-automata/</link><pubDate>Mon, 06 Sep 2021 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2021/09/06/neural-network-cellular-automata/</guid><description>&lt;p>Okay. A &lt;a href="https://old.reddit.com/r/cellular_automata/comments/ph1zez/random_neural_network_based_cellular_automata/">random post&lt;/a> on the &lt;a href="https://old.reddit.com/r/cellular_automata/">/r/cellular_automata subreddit&lt;/a> inspired me.&lt;/p>
&lt;p>Let&amp;rsquo;s generate a cellular automata where each pixel updates based on a neural network given as input:&lt;/p>
&lt;ul>
&lt;li>The x/y coordinates (scaled to the range 0-1)&lt;/li>
&lt;li>An optional random value (to make it more dynamic)&lt;/li>
&lt;li>A variety of neighboring data, such as:
&lt;ul>
&lt;li>The number of neighbors that are &amp;lsquo;active&amp;rsquo; (&amp;gt; 50% white), ranges 0-8 scaled to 0-1. This should allow &lt;a href="https://en.wikipedia.org/wiki/Conway%27s%20Game%20of%20Life">Conway&amp;#39;s Game of Life&lt;/a>&lt;/li>
&lt;li>The RGB values of all neighbors (allows a superset of the above)&lt;/li>
&lt;li>Gradients, subtract color value of the left from the right so that you get edges and side to side movement&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>Let&amp;rsquo;s do it!&lt;/p></description></item><item><title>Genuary: Triple Nested Loops</title><link>https://blog.jverkamp.com/2021/01/08/genuary-triple-nested-loops/</link><pubDate>Fri, 08 Jan 2021 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2021/01/08/genuary-triple-nested-loops/</guid><description>&lt;p>The fine people of &lt;a href="https://old.reddit.com/r/generative/">/r/generative&lt;/a> / &lt;a href="https://genuary2021.github.io/">Genuary2021&lt;/a> have a series of challenges for generative works for the month of January. I don&amp;rsquo;t think I&amp;rsquo;m going to do all of them, but pick and choose. For example, the very first prompt is:&lt;/p>
&lt;blockquote>
&lt;p>&lt;code>// TRIPLE NESTED LOOP&lt;/code>&lt;/p>
&lt;/blockquote>
&lt;p>My goal was to draw a grid of circles across the X/Y the image and nest them for the third dimension. To make it a little more interesting, I added a few different color modes. &lt;code>seededRandom&lt;/code> is my personal favorite, that was interesting to get working.&lt;/p></description></item><item><title>Pictogenesis: Stack Transpiling</title><link>https://blog.jverkamp.com/2020/12/11/pictogenesis-stack-transpiling/</link><pubDate>Fri, 11 Dec 2020 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2020/12/11/pictogenesis-stack-transpiling/</guid><description>&lt;p>Much like &lt;a href="https://blog.jverkamp.com/2020/12/03/pictogenesis-transpiling/">transpiling register machines&lt;/a>, now we have a chance to transpile &lt;a href="https://blog.jverkamp.com/2020/12/09/pictogenesis-stack-machine/">stack machines&lt;/a>. Unfortunately, it doesn&amp;rsquo;t actually speed up the code nearly so much (the stack is just not as effective of a memory structure in this case), but it&amp;rsquo;s still an interesting bit of code.&lt;/p>
&lt;p>In this case, we turn something like this:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-asm" data-lang="asm">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">invsub&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">polT&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">writeG&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">id&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">neg&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">zero&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">?&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">sin&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">invsub&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">ZERO&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">inv&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Into this:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">function&lt;/span>(&lt;span style="color:#a6e22e">X&lt;/span>, &lt;span style="color:#a6e22e">Y&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">x&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">X&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">y&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">Y&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">stack&lt;/span> &lt;span style="color:#f92672">=&lt;/span> [];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">r&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">undefined&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">g&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">undefined&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">b&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">undefined&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">stack&lt;/span>.&lt;span style="color:#a6e22e">push&lt;/span>(&lt;span style="color:#a6e22e">X&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">stack&lt;/span>.&lt;span style="color:#a6e22e">push&lt;/span>(&lt;span style="color:#a6e22e">Y&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">arg0&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">arg1&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">arg2&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">result&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// invsub
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">arg0&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">stack&lt;/span>.&lt;span style="color:#a6e22e">pop&lt;/span>() &lt;span style="color:#f92672">||&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">result&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span> &lt;span style="color:#f92672">-&lt;/span> &lt;span style="color:#a6e22e">arg0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">result&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">result&lt;/span> &lt;span style="color:#f92672">%&lt;/span> &lt;span style="color:#ae81ff">1.0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">stack&lt;/span>.&lt;span style="color:#a6e22e">push&lt;/span>(&lt;span style="color:#a6e22e">result&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// polT
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">arg0&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">stack&lt;/span>.&lt;span style="color:#a6e22e">pop&lt;/span>() &lt;span style="color:#f92672">||&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">arg1&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">stack&lt;/span>.&lt;span style="color:#a6e22e">pop&lt;/span>() &lt;span style="color:#f92672">||&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">result&lt;/span> &lt;span style="color:#f92672">=&lt;/span> Math.&lt;span style="color:#a6e22e">atan2&lt;/span>(&lt;span style="color:#a6e22e">arg0&lt;/span>, &lt;span style="color:#a6e22e">arg1&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">result&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">result&lt;/span> &lt;span style="color:#f92672">%&lt;/span> &lt;span style="color:#ae81ff">1.0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">stack&lt;/span>.&lt;span style="color:#a6e22e">push&lt;/span>(&lt;span style="color:#a6e22e">result&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// writeG
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">arg0&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">stack&lt;/span>.&lt;span style="color:#a6e22e">pop&lt;/span>() &lt;span style="color:#f92672">||&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">g&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">arg0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// id
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">arg0&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">stack&lt;/span>.&lt;span style="color:#a6e22e">pop&lt;/span>() &lt;span style="color:#f92672">||&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">result&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">arg0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">result&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">result&lt;/span> &lt;span style="color:#f92672">%&lt;/span> &lt;span style="color:#ae81ff">1.0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">stack&lt;/span>.&lt;span style="color:#a6e22e">push&lt;/span>(&lt;span style="color:#a6e22e">result&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// neg
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">arg0&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">stack&lt;/span>.&lt;span style="color:#a6e22e">pop&lt;/span>() &lt;span style="color:#f92672">||&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">result&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#a6e22e">arg0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">result&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">result&lt;/span> &lt;span style="color:#f92672">%&lt;/span> &lt;span style="color:#ae81ff">1.0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">stack&lt;/span>.&lt;span style="color:#a6e22e">push&lt;/span>(&lt;span style="color:#a6e22e">result&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// zero?
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">arg0&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">stack&lt;/span>.&lt;span style="color:#a6e22e">pop&lt;/span>() &lt;span style="color:#f92672">||&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">arg1&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">stack&lt;/span>.&lt;span style="color:#a6e22e">pop&lt;/span>() &lt;span style="color:#f92672">||&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">arg2&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">stack&lt;/span>.&lt;span style="color:#a6e22e">pop&lt;/span>() &lt;span style="color:#f92672">||&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">result&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">arg0&lt;/span> &lt;span style="color:#f92672">===&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#f92672">?&lt;/span> &lt;span style="color:#a6e22e">arg1&lt;/span> &lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">arg2&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">result&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">result&lt;/span> &lt;span style="color:#f92672">%&lt;/span> &lt;span style="color:#ae81ff">1.0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">stack&lt;/span>.&lt;span style="color:#a6e22e">push&lt;/span>(&lt;span style="color:#a6e22e">result&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// sin
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">arg0&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">stack&lt;/span>.&lt;span style="color:#a6e22e">pop&lt;/span>() &lt;span style="color:#f92672">||&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">result&lt;/span> &lt;span style="color:#f92672">=&lt;/span> Math.&lt;span style="color:#a6e22e">sin&lt;/span>(&lt;span style="color:#a6e22e">arg0&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">result&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">result&lt;/span> &lt;span style="color:#f92672">%&lt;/span> &lt;span style="color:#ae81ff">1.0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">stack&lt;/span>.&lt;span style="color:#a6e22e">push&lt;/span>(&lt;span style="color:#a6e22e">result&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// invsub
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">arg0&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">stack&lt;/span>.&lt;span style="color:#a6e22e">pop&lt;/span>() &lt;span style="color:#f92672">||&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">result&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span> &lt;span style="color:#f92672">-&lt;/span> &lt;span style="color:#a6e22e">arg0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">result&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">result&lt;/span> &lt;span style="color:#f92672">%&lt;/span> &lt;span style="color:#ae81ff">1.0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">stack&lt;/span>.&lt;span style="color:#a6e22e">push&lt;/span>(&lt;span style="color:#a6e22e">result&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// ZERO
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">result&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">result&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">result&lt;/span> &lt;span style="color:#f92672">%&lt;/span> &lt;span style="color:#ae81ff">1.0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">stack&lt;/span>.&lt;span style="color:#a6e22e">push&lt;/span>(&lt;span style="color:#a6e22e">result&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// inv
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">arg0&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">stack&lt;/span>.&lt;span style="color:#a6e22e">pop&lt;/span>() &lt;span style="color:#f92672">||&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">result&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span> &lt;span style="color:#f92672">/&lt;/span> &lt;span style="color:#a6e22e">arg0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">result&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">result&lt;/span> &lt;span style="color:#f92672">%&lt;/span> &lt;span style="color:#ae81ff">1.0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">stack&lt;/span>.&lt;span style="color:#a6e22e">push&lt;/span>(&lt;span style="color:#a6e22e">result&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> [
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">r&lt;/span> &lt;span style="color:#f92672">===&lt;/span> &lt;span style="color:#66d9ef">undefined&lt;/span> &lt;span style="color:#f92672">?&lt;/span> &lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">stack&lt;/span>.&lt;span style="color:#a6e22e">pop&lt;/span>() &lt;span style="color:#f92672">||&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">r&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">g&lt;/span> &lt;span style="color:#f92672">===&lt;/span> &lt;span style="color:#66d9ef">undefined&lt;/span> &lt;span style="color:#f92672">?&lt;/span> &lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">stack&lt;/span>.&lt;span style="color:#a6e22e">pop&lt;/span>() &lt;span style="color:#f92672">||&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">g&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">b&lt;/span> &lt;span style="color:#f92672">===&lt;/span> &lt;span style="color:#66d9ef">undefined&lt;/span> &lt;span style="color:#f92672">?&lt;/span> &lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">stack&lt;/span>.&lt;span style="color:#a6e22e">pop&lt;/span>() &lt;span style="color:#f92672">||&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">b&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Pictogenesis: Stack Machine</title><link>https://blog.jverkamp.com/2020/12/09/pictogenesis-stack-machine/</link><pubDate>Wed, 09 Dec 2020 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2020/12/09/pictogenesis-stack-machine/</guid><description>&lt;p>Okay, enough with &lt;a href="https://blog.jverkamp.com/2020/11/24/pictogenesis-register-machine/">register machines&lt;/a>. Let&amp;rsquo;s make something new. This time, a stack based machine!&lt;/p>
&lt;p>Rather than keeping it&amp;rsquo;s memory in a series of memory cells, there will be a single stack of values. All functions can &lt;code>pop&lt;/code> values from the top of the stack or &lt;code>push&lt;/code> them back on. I will add the ability to &lt;code>read&lt;/code> the X/Y value and directly &lt;code>write&lt;/code> R/G/B, but you can&amp;rsquo;t write to the former or read from the latter, so you can&amp;rsquo;t use them as registers. Let&amp;rsquo;s see what that looks like!&lt;/p></description></item><item><title>Pictogenesis: Transpiling</title><link>https://blog.jverkamp.com/2020/12/03/pictogenesis-transpiling/</link><pubDate>Thu, 03 Dec 2020 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2020/12/03/pictogenesis-transpiling/</guid><description>&lt;p>Okay. That is &lt;em>slow&lt;/em>&amp;hellip; Let&amp;rsquo;s make it faster!&lt;/p>
&lt;p>So the main problem we have is that we&amp;rsquo;re interpreting the code. For every single pixel, for every line of code, we&amp;rsquo;re doing a few housekeeping things and making at least one function call. For a 400x400 image with just 10 lines of code, that&amp;rsquo;s 1.6M function calls. Like I said, &lt;em>slow&lt;/em>.&lt;/p>
&lt;p>So let&amp;rsquo;s make it faster!&lt;/p>
&lt;p>My first idea? &lt;a href="https://en.wikipedia.org/wiki/Transpile">Transpile&lt;/a> it to Javascript!&lt;/p></description></item><item><title>Pictogenesis: Wrapping Modes</title><link>https://blog.jverkamp.com/2020/12/01/pictogenesis-wrapping-modes/</link><pubDate>Tue, 01 Dec 2020 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2020/12/01/pictogenesis-wrapping-modes/</guid><description>&lt;p>Now that I&amp;rsquo;ve got &lt;a href="https://blog.jverkamp.com/2020/11/24/pictogenesis-register-machine/">register machines&lt;/a> working, one of the next ideas I had was to implement different wrapping modes. Currently, as it stands, &lt;code>X&lt;/code> and &lt;code>Y&lt;/code> are passed into the machine as floating point numbers from [0, 1] across the image and output is expected to be [0, 1] for each of &lt;code>R&lt;/code>, &lt;code>G&lt;/code>, and &lt;code>B&lt;/code>. Any values that end up outside of that range, we truncate down to that range. But some of our mathematical functions (multiplication, exponentiation, negation, etc) tend to generate numbers way out of this range. But they don&amp;rsquo;t have to!&lt;/p></description></item><item><title>Pictogenesis: Register Machine</title><link>https://blog.jverkamp.com/2020/11/24/pictogenesis-register-machine/</link><pubDate>Tue, 24 Nov 2020 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2020/11/24/pictogenesis-register-machine/</guid><description>&lt;p>Okay. First &lt;a href="https://blog.jverkamp.com/2020/11/23/pictogenesis-the-idea/">Pictogeneis&lt;/a> machine: a register based machine. Today we&amp;rsquo;re going to create a very small language with a small number of registers that can read from the outside world, write colors, and act as temporary variables.&lt;/p>
&lt;p>Something like this:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-asm" data-lang="asm">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">gt&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">?&lt;/span> &lt;span style="color:#66d9ef">t0&lt;/span> &lt;span style="color:#66d9ef">b&lt;/span> &lt;span style="color:#66d9ef">y&lt;/span> &lt;span style="color:#66d9ef">x&lt;/span> &lt;span style="color:#66d9ef">r&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">add&lt;/span> &lt;span style="color:#66d9ef">g&lt;/span> &lt;span style="color:#66d9ef">y&lt;/span> &lt;span style="color:#66d9ef">x&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">abs&lt;/span> &lt;span style="color:#66d9ef">b&lt;/span> &lt;span style="color:#66d9ef">x&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">inv&lt;/span> &lt;span style="color:#66d9ef">t0&lt;/span> &lt;span style="color:#66d9ef">g&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">add&lt;/span> &lt;span style="color:#66d9ef">r&lt;/span> &lt;span style="color:#66d9ef">g&lt;/span> &lt;span style="color:#66d9ef">x&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">sub&lt;/span> &lt;span style="color:#66d9ef">t0&lt;/span> &lt;span style="color:#66d9ef">b&lt;/span> &lt;span style="color:#66d9ef">r&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">mul&lt;/span> &lt;span style="color:#66d9ef">x&lt;/span> &lt;span style="color:#66d9ef">r&lt;/span> &lt;span style="color:#66d9ef">b&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">abs&lt;/span> &lt;span style="color:#66d9ef">y&lt;/span> &lt;span style="color:#66d9ef">x&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;figure>&lt;img src="https://blog.jverkamp.com/embeds/2020/pictogenesis-register-1.png"/>
&lt;/figure>
&lt;p>In each case, the first argument is the output and the rest are inputs. So:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">#&lt;/span> &lt;span style="color:#a6e22e">gt&lt;/span>&lt;span style="color:#f92672">?&lt;/span> &lt;span style="color:#a6e22e">t0&lt;/span> &lt;span style="color:#a6e22e">b&lt;/span> &lt;span style="color:#a6e22e">y&lt;/span> &lt;span style="color:#a6e22e">x&lt;/span> &lt;span style="color:#a6e22e">r&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">if&lt;/span> (&lt;span style="color:#a6e22e">b&lt;/span> &lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#a6e22e">y&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">t0&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">x&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>} &lt;span style="color:#66d9ef">else&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">t0&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">r&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">#&lt;/span> &lt;span style="color:#a6e22e">add&lt;/span> &lt;span style="color:#a6e22e">g&lt;/span> &lt;span style="color:#a6e22e">y&lt;/span> &lt;span style="color:#a6e22e">x&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">g&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">y&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#a6e22e">x&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">#&lt;/span> &lt;span style="color:#a6e22e">abs&lt;/span> &lt;span style="color:#a6e22e">b&lt;/span> &lt;span style="color:#a6e22e">x&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">b&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#f92672">|&lt;/span>&lt;span style="color:#a6e22e">x&lt;/span>&lt;span style="color:#f92672">|&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>...
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Where &lt;code>x&lt;/code> and &lt;code>y&lt;/code> are the input point x and y mapped to the range [0, 1]; &lt;code>r&lt;/code>, &lt;code>g&lt;/code>, &lt;code>b&lt;/code> are the output colors in the same range and &lt;code>t{n}&lt;/code> are temporary registers just used during the program.&lt;/p></description></item><item><title>Pictogenesis: The Idea</title><link>https://blog.jverkamp.com/2020/11/23/pictogenesis-the-idea/</link><pubDate>Mon, 23 Nov 2020 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2020/11/23/pictogenesis-the-idea/</guid><description>&lt;p>PICTOGENESIS REBORN!&lt;/p>
&lt;p>I don&amp;rsquo;t know if I ever actually posted it publically, but one of the ideas I&amp;rsquo;ve had percolating for the longest time is combining tiny &lt;a href="https://en.wikipedia.org/wiki/interpreters">interpreters&lt;/a> and &lt;a href="https://en.wikipedia.org/wiki/genetic%20algorithms">genetic algorithms&lt;/a> to make &lt;a href="https://en.wikipedia.org/wiki/generative%20art">generative art&lt;/a>.&lt;/p>
&lt;p>The basic idea is to generate programs (in various styles) that can take x,y coordinates and return colors. Then apply that to every pixel on an image to make generative art. Once we have, figure out a way to mutate/breed the programs so that we can apply a genetic algorithm to them and make awesome images! Sort of like &lt;a href="https://electricsheep.org/">Electric Sheep&lt;/a> (that brings back memories).&lt;/p>
&lt;p>The evolution point of view was actually a pretty tricky problem, since programs can have a number of different representations. I could compile them to bytecode and mutate that, but how do I make most code at least potentially meaningful?&lt;/p></description></item><item><title>Backtracking Worm Coral</title><link>https://blog.jverkamp.com/2020/11/20/backtracking-worm-coral/</link><pubDate>Fri, 20 Nov 2020 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2020/11/20/backtracking-worm-coral/</guid><description>&lt;p>Let&amp;rsquo;s take &lt;a href="https://blog.jverkamp.com/2020/11/19/worm-coral/">yesterday&amp;rsquo;s Worm Coral&lt;/a> and turn it up to 11!&lt;/p>
&lt;p>Now we have:&lt;/p>
&lt;ul>
&lt;li>Whenever a worm gets stuck, it will &amp;lsquo;backtrack&amp;rsquo;: it will instead expand from the previous position recursively&lt;/li>
&lt;/ul>
&lt;p>That means that the initial 10 worms should always be able to fill the entire world! Even if one closes off an area, that one can eventually fill it up:&lt;/p>
&lt;figure>&lt;img src="https://blog.jverkamp.com/embeds/2020/backtracking-worm-full.png"/>
&lt;/figure>
&lt;p>I like how occiasionally you get one spindly bit (usually early in the run) that another goes through. It reminds me of &lt;a href="https://boardgamegeek.com/boardgame/2453/blokus">Blokus&lt;/a> It does take a while.&lt;/p>
&lt;p>In addition, I wanted to play a bit with simulationism:&lt;/p>
&lt;ul>
&lt;li>Worms can potentially &lt;code>changeColor&lt;/code> each frame&lt;/li>
&lt;li>Every &lt;code>framesPerGeneration&lt;/code> check if each worm dies &lt;code>deathChance&lt;/code> or spawns a child worm (&lt;code>spawnChance&lt;/code>)&lt;/li>
&lt;li>If a worm dies, it is removed from the simulation&lt;/li>
&lt;li>If a worm spawns, it creates a new child at it&amp;rsquo;s current location
&lt;ul>
&lt;li>If &lt;code>spawnIncludesHistory&lt;/code> is set, the child can backtrack into the parent&amp;rsquo;s history&lt;/li>
&lt;li>If &lt;code>spawnVariesColor&lt;/code> is set, the child will (potentially, it&amp;rsquo;s random) have a slightly different color&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>Let&amp;rsquo;s check it out!&lt;/p></description></item><item><title>Worm Coral</title><link>https://blog.jverkamp.com/2020/11/19/worm-coral/</link><pubDate>Thu, 19 Nov 2020 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2020/11/19/worm-coral/</guid><description>&lt;p>Today, I&amp;rsquo;m going to work on using &lt;a href="https://blog.jverkamp.com/2020/11/17/p5js-worms/">worms&lt;/a> to generate coral, similar to what I did way back when I was &lt;a href="https://blog.jverkamp.com/2015/01/01/generating-omnichromatic-images/">generating omnichromatic images&lt;/a>.&lt;/p>
&lt;figure>&lt;img src="https://blog.jverkamp.com/embeds/2020/worm-coral.png"/>
&lt;/figure>
&lt;p>In a nutshell:&lt;/p>
&lt;ul>
&lt;li>Spawn n worms&lt;/li>
&lt;li>On each tick:
&lt;ul>
&lt;li>Each worm tries to randomly move one direction&lt;/li>
&lt;li>If it cannot, increment that worm&amp;rsquo;s &lt;code>stuck&lt;/code> counter&lt;/li>
&lt;li>If it can, restart the &lt;code>stuck&lt;/code> counter&lt;/li>
&lt;li>If a worm is &lt;code>stuck&lt;/code> long enough, kill it off and spawn a new worm&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>Eventually, we&amp;rsquo;ll fill the entire space with colors that end up looking a bit like coral. I&amp;rsquo;ll probably extend this later, since there are a lot of cool tweaks you can do with this general idea.&lt;/p></description></item><item><title>p5js Boids</title><link>https://blog.jverkamp.com/2020/11/18/p5js-boids/</link><pubDate>Wed, 18 Nov 2020 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2020/11/18/p5js-boids/</guid><description>&lt;p>Okay, sketch 2: &lt;a href="https://en.wikipedia.org/wiki/Boids">Boids&lt;/a>!&lt;/p>
&lt;p>The basic idea is to create a bunch of particles (the Boids in this case) and apply to them each a series of simple, limited rules that rely neither on communcation between the Boids nor a global controller and see what behaviors you can generate. Specifically, can you replicate the flocking behavior found in birds, since birds can obviously fly together without hitting one another and also without some lead bird giving orders.&lt;/p>
&lt;p>Something like this:&lt;/p>
&lt;figure>&lt;img src="https://blog.jverkamp.com/embeds/2020/boids.png"/>
&lt;/figure>
&lt;p>For this case, there are three rules:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>seperation&lt;/strong> - Fly away from any Boids that are too close to you (to avoid collision)&lt;/li>
&lt;li>&lt;strong>alignment&lt;/strong> - Align yourself to fly in the same direction as any Boids in your field of vision&lt;/li>
&lt;li>&lt;strong>cohesion&lt;/strong> - Fly towards the center point of the Boids you can see&lt;/li>
&lt;/ul></description></item><item><title>p5js Worms</title><link>https://blog.jverkamp.com/2020/11/17/p5js-worms/</link><pubDate>Tue, 17 Nov 2020 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2020/11/17/p5js-worms/</guid><description>&lt;p>One thing that I&amp;rsquo;ve been hoping to get into a bit more is the idea of &lt;a href="https://en.wikipedia.org/wiki/Generative%20Art">Generative Art&lt;/a>. Essentially, use any of a wide variety of algorithms to generate art. To do that, and so that the art can be generated right in front of you in the browser, I&amp;rsquo;m going to use the &lt;a href="https://p5js.org/">p5js&lt;/a> library. It gives you a nice API of graphical primitives and takes a simple &lt;code>setup&lt;/code> and &lt;code>draw&lt;/code> function and does the rest.&lt;/p></description></item></channel></rss>