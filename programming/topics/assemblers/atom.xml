<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Assemblers on jverkamp.com</title>
    <link>https://blog.jverkamp.com/programming/topics/assemblers/</link>
    <description>Recent content in Assemblers on jverkamp.com</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language><atom:link href="https://blog.jverkamp.com/programming/topics/assemblers/atom.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>AoC 2017 Day 25: Turing</title>
      <link>https://blog.jverkamp.com/2017/12/25/aoc-2017-day-25-turing/</link>
      <pubDate>Mon, 25 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2017/12/25/aoc-2017-day-25-turing/</guid>
      <description>&lt;h3 id=&#34;source-the-halting-problemhttpadventofcodecom2017day25&#34;&gt;Source: &lt;a href=&#34;http://adventofcode.com/2017/day/25&#34;&gt;The Halting Problem&lt;/a&gt;&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Part 1:&lt;/strong&gt; Implement a &lt;a href=&#34;https://en.wikipedia.org/wiki/Turing%20machine&#34;&gt;Turing machine&lt;/a&gt; defined as such:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;Begin in state A.
Perform a diagnostic checksum after 6 steps.&lt;/p&gt;
&lt;p&gt;In state A:
If the current value is 0:
- Write the value 1.
- Move one slot to the right.
- Continue with state B.
If the current value is 1:
- Write the value 0.
- Move one slot to the left.
- Continue with state B.&lt;/p&gt;
&lt;p&gt;&amp;hellip;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>AoC 2017 Day 18: Duetvm</title>
      <link>https://blog.jverkamp.com/2017/12/18/aoc-2017-day-18-duetvm/</link>
      <pubDate>Mon, 18 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2017/12/18/aoc-2017-day-18-duetvm/</guid>
      <description>&lt;h3 id=&#34;source-duethttpadventofcodecom2017day18&#34;&gt;Source: &lt;a href=&#34;http://adventofcode.com/2017/day/18&#34;&gt;Duet&lt;/a&gt;&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Part 1:&lt;/strong&gt; Create a virtual machine with the following instruction set:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;snd X&lt;/code&gt; plays a sound with a frequency equal to the value of &lt;code&gt;X&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;set X Y&lt;/code&gt; sets register &lt;code&gt;X&lt;/code&gt; to &lt;code&gt;Y&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;add X Y&lt;/code&gt; set register &lt;code&gt;X&lt;/code&gt; to &lt;code&gt;X + Y&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mul X Y&lt;/code&gt; sets register &lt;code&gt;X&lt;/code&gt; to &lt;code&gt;X * Y&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mod X Y&lt;/code&gt; sets register &lt;code&gt;X&lt;/code&gt; to &lt;code&gt;X mod Y&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;rcv X&lt;/code&gt; recovers the frequency of the last sound played, if &lt;code&gt;X&lt;/code&gt; is not zero&lt;/li&gt;
&lt;li&gt;&lt;code&gt;jgz X Y&lt;/code&gt; jumps with an offset of the value of &lt;code&gt;Y&lt;/code&gt;, iff &lt;code&gt;X&lt;/code&gt; is greater than zero&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;In most cases, &lt;code&gt;X&lt;/code&gt; and &lt;code&gt;Y&lt;/code&gt; can be either an integer value or a register.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;What is the value recovered by &lt;code&gt;rcv&lt;/code&gt; the first time &lt;code&gt;X&lt;/code&gt; is non-zero?&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>AoC 2017 Day 16: Swing Your Partner</title>
      <link>https://blog.jverkamp.com/2017/12/16/aoc-2017-day-16-swing-your-partner/</link>
      <pubDate>Sat, 16 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2017/12/16/aoc-2017-day-16-swing-your-partner/</guid>
      <description>&lt;h3 id=&#34;source-permutation-promenadehttpadventofcodecom2017day16&#34;&gt;Source: &lt;a href=&#34;http://adventofcode.com/2017/day/16&#34;&gt;Permutation Promenade&lt;/a&gt;&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Part 1:&lt;/strong&gt; Running on the string &lt;code&gt;a...p&lt;/code&gt; apply a series of the following commands:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;sX&lt;/code&gt; rotates the string right by &lt;code&gt;X&lt;/code&gt; positions&lt;/li&gt;
&lt;li&gt;&lt;code&gt;xX/Y&lt;/code&gt; swaps positions &lt;code&gt;X&lt;/code&gt; and &lt;code&gt;Y&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pA/B&lt;/code&gt; swaps the letters &lt;code&gt;A&lt;/code&gt; and &lt;code&gt;B&lt;/code&gt; no matter their positions&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>AoC 2017 Day 8: Conditiputer</title>
      <link>https://blog.jverkamp.com/2017/12/08/aoc-2017-day-8-conditiputer/</link>
      <pubDate>Fri, 08 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2017/12/08/aoc-2017-day-8-conditiputer/</guid>
      <description>&lt;h3 id=&#34;source-i-heard-you-like-registershttpadventofcodecom2017day8yo&#34;&gt;Source: &lt;a href=&#34;http://adventofcode.com/2017/day/8&#34;&gt;I Heard You Like Registers&lt;/a&gt;&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Part 1:&lt;/strong&gt; Given a set of registers initialized to 0, interpret a series of instruction of the form:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;{register} (inc|dec) {number|register} if {number|register} (&amp;lt;|&amp;lt;=|=|!=|=&amp;gt;|&amp;gt;) {number|register}&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;What is the largest value in any register?&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>AoC 2016 Day 25: Assembunny3</title>
      <link>https://blog.jverkamp.com/2016/12/25/aoc-2016-day-25-assembunny3/</link>
      <pubDate>Sun, 25 Dec 2016 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2016/12/25/aoc-2016-day-25-assembunny3/</guid>
      <description>&lt;h3 id=&#34;source-clock-signalhttpadventofcodecom2016day25&#34;&gt;Source: &lt;a href=&#34;http://adventofcode.com/2016/day/25&#34;&gt;Clock Signal&lt;/a&gt;&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Part 1:&lt;/strong&gt; Take the &lt;a href=&#34;https://blog.jverkamp.com/2016/12/12/aoc-2016-day-12-assembunny/&#34;&gt;assembunny interpreter from day 12&lt;/a&gt; and add one new instruction (out &lt;code&gt;x&lt;/code&gt;) which transmits the value &lt;code&gt;x&lt;/code&gt; (either an integer or register). Find the lowest value we can initialize &lt;code&gt;a&lt;/code&gt; to so that the &lt;code&gt;out&lt;/code&gt;put signals form an infinite repeating pattern of &lt;code&gt;0&lt;/code&gt;, &lt;code&gt;1&lt;/code&gt;, &lt;code&gt;0&lt;/code&gt;, &lt;code&gt;1&lt;/code&gt;, &amp;hellip;&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>AoC 2016 Day 23: Assembunny2</title>
      <link>https://blog.jverkamp.com/2016/12/23/aoc-2016-day-23-assembunny2/</link>
      <pubDate>Fri, 23 Dec 2016 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2016/12/23/aoc-2016-day-23-assembunny2/</guid>
      <description>&lt;h3 id=&#34;source-safe-crackinghttpadventofcodecom2016day23&#34;&gt;Source: &lt;a href=&#34;http://adventofcode.com/2016/day/23&#34;&gt;Safe Cracking&lt;/a&gt;&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Part 1:&lt;/strong&gt; Take the &lt;a href=&#34;https://blog.jverkamp.com/2016/12/12/aoc-2016-day-12-assembunny/&#34;&gt;assembunny interpreter from day 12&lt;/a&gt; and add an instruction (tgl &lt;code&gt;X&lt;/code&gt;) that modifies the code at an offset of &lt;code&gt;X&lt;/code&gt; instructions.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;inc&lt;/code&gt; becomes &lt;code&gt;dec&lt;/code&gt;; any other one argument instruction (including &lt;code&gt;tgl&lt;/code&gt;) becomes &lt;code&gt;inc&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;jnz&lt;/code&gt; becomes &lt;code&gt;cpy&lt;/code&gt;; any other two argument instructions become &lt;code&gt;jnz&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Toggling an instruction outside of the program does nothing (it does not halt execution)&lt;/li&gt;
&lt;li&gt;If toggling produces an invalid instruction, ignore it&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Run the given program with the initial register of &lt;code&gt;a = 7&lt;/code&gt;. What is the final value in register &lt;code&gt;a&lt;/code&gt;?&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>AoC 2016 Day 21: Scrambler</title>
      <link>https://blog.jverkamp.com/2016/12/21/aoc-2016-day-21-scrambler/</link>
      <pubDate>Wed, 21 Dec 2016 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2016/12/21/aoc-2016-day-21-scrambler/</guid>
      <description>&lt;h3 id=&#34;source-scrambled-letters-and-hashhttpadventofcodecom2016day21&#34;&gt;Source: &lt;a href=&#34;http://adventofcode.com/2016/day/21&#34;&gt;Scrambled Letters and Hash&lt;/a&gt;&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Part 1:&lt;/strong&gt; &lt;a href=&#34;https://blog.jverkamp.com/2016/12/12/aoc-2016-day-12-assembunny/&#34;&gt;Another&lt;/a&gt; &lt;a href=&#34;https://en.wikipedia.org/wiki/virtual%20machine&#34;&gt;virtual machine&lt;/a&gt;, of sorts. Start with the string &lt;code&gt;abcdefgh&lt;/code&gt; and apply a sequence of the following commands to it:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;swap position &lt;code&gt;X&lt;/code&gt; with position &lt;code&gt;Y&lt;/code&gt; = swap two positions&lt;/li&gt;
&lt;li&gt;swap letter &lt;code&gt;X&lt;/code&gt; with letter &lt;code&gt;Y&lt;/code&gt; = swap to letters, no matter where they are&lt;/li&gt;
&lt;li&gt;rotate (left|right) &lt;code&gt;X&lt;/code&gt; steps = rotate forward or backward&lt;/li&gt;
&lt;li&gt;rotate based on position of letter &lt;code&gt;X&lt;/code&gt; = find &lt;code&gt;X&lt;/code&gt;, rotate right based on its position; if the original position was &amp;gt;= 4, rotate one more&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/li&gt;
&lt;li&gt;reverse positions &lt;code&gt;X&lt;/code&gt; through &lt;code&gt;Y&lt;/code&gt; = reverse a subset of the string&lt;/li&gt;
&lt;li&gt;move position &lt;code&gt;X&lt;/code&gt; to position &lt;code&gt;Y&lt;/code&gt; = take a character at a position out of the string and put it somewhere else specific&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>AoC 2016 Day 12: Assembunny</title>
      <link>https://blog.jverkamp.com/2016/12/12/aoc-2016-day-12-assembunny/</link>
      <pubDate>Mon, 12 Dec 2016 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2016/12/12/aoc-2016-day-12-assembunny/</guid>
      <description>&lt;h3 id=&#34;source-leonardos-monorailhttpadventofcodecom2016day12&#34;&gt;Source: &lt;a href=&#34;http://adventofcode.com/2016/day/12&#34;&gt;Leonardo&amp;rsquo;s Monorail&lt;/a&gt;&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Part 1:&lt;/strong&gt; Create a &lt;a href=&#34;https://en.wikipedia.org/wiki/virtual%20machine&#34;&gt;virtual machine&lt;/a&gt; that has four registers (&lt;code&gt;a&lt;/code&gt;, &lt;code&gt;b&lt;/code&gt;, &lt;code&gt;c&lt;/code&gt;, and &lt;code&gt;d&lt;/code&gt;) and can process the following instructions:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;cpy x y&lt;/code&gt; - copies &lt;code&gt;x&lt;/code&gt; into &lt;code&gt;y&lt;/code&gt; (&lt;code&gt;x&lt;/code&gt; can be an integer or a register)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;inc x&lt;/code&gt; - increases register &lt;code&gt;x&lt;/code&gt; by one&lt;/li&gt;
&lt;li&gt;&lt;code&gt;dec x&lt;/code&gt; - decreases register &lt;code&gt;x&lt;/code&gt; by one&lt;/li&gt;
&lt;li&gt;&lt;code&gt;jnz x y&lt;/code&gt; - jumps over &lt;code&gt;y&lt;/code&gt; instructions if &lt;code&gt;x&lt;/code&gt; is not zero (&lt;code&gt;x&lt;/code&gt; can be an integer or a register)&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;What is the final value in register &lt;code&gt;a&lt;/code&gt;?&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>&#39;Tiny&#39; Turing completeness without MMOV</title>
      <link>https://blog.jverkamp.com/2013/08/22/tiny-turing-completeness-without-mmov/</link>
      <pubDate>Thu, 22 Aug 2013 21:00:54 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2013/08/22/tiny-turing-completeness-without-mmov/</guid>
      <description>&lt;p&gt;Something was bugging me about my proof from yesterday. If we take another tack on proving Turing completeness, all we would have to prove is that we can simulate &lt;a href=&#34;https://en.wikipedia.org/wiki/Subleq#Subtract%20and%20branch%20if%20less%20than%20or%20equal%20to%20zero&#34;&gt;`SUBLEQ`&lt;/a&gt;. Since &lt;code&gt;SUBLEQ&lt;/code&gt; is Turing complete, that&amp;rsquo;s all we need&amp;ndash;just convert each &lt;code&gt;SUBLEQ&lt;/code&gt; into a &lt;code&gt;SUB&lt;/code&gt;, &lt;code&gt;JZ&lt;/code&gt;, and a &lt;code&gt;JLS&lt;/code&gt;. So that means that Tiny as written should be Turing complete.&lt;/p&gt;
&lt;p&gt;So how does that work?&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>A &#39;Tiny&#39; virtual machine in Racket</title>
      <link>https://blog.jverkamp.com/2013/08/21/a-tiny-virtual-machine-in-racket/</link>
      <pubDate>Wed, 21 Aug 2013 00:00:28 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2013/08/21/a-tiny-virtual-machine-in-racket/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://www.reddit.com/r/dailyprogrammer/comments/1kqxz9/080813_challenge_132_intermediate_tiny_assembler/&#34;&gt;Today&amp;rsquo;s challenge&lt;/a&gt; at /r/dailyprogrammer asks to implement an assembler for a small virtual machine. It has only 16 &lt;a href=&#34;https://en.wikipedia.org/wiki/Assembly%20language#Opcode%20mnemonics%20and%20extended%20mnemonics&#34;&gt;mnemonics&lt;/a&gt; which in unique &lt;a href=&#34;https://en.wikipedia.org/wiki/Opcode&#34;&gt;opcodes&lt;/a&gt; (each instruction can have multiple forms for if they&amp;rsquo;re accessing memory or literals), so it&amp;rsquo;s a simple virtual machine indeed. As a challenge, you&amp;rsquo;re supposed to write an interesting program (I actually wrote a virtual machine as well to test them). As an even better challenge, we&amp;rsquo;re supposed to prove that Tiny is &lt;a href=&#34;https://en.wikipedia.org/wiki/Turing%20complete&#34;&gt;Turing complete&lt;/a&gt;. Well, let&amp;rsquo;s get to it!&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
