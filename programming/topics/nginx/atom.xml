<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>nginx on jverkamp.com</title>
    <link>https://blog.jverkamp.com/programming/topics/nginx/</link>
    <description>Recent content in nginx on jverkamp.com</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 15 Feb 2018 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://blog.jverkamp.com/programming/topics/nginx/atom.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Automatic self-signed HTTPS for local development</title>
      <link>https://blog.jverkamp.com/2018/02/15/automatic-self-signed-https-for-local-development/</link>
      <pubDate>Thu, 15 Feb 2018 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2018/02/15/automatic-self-signed-https-for-local-development/</guid>
      <description>&lt;p&gt;From time to time when doing web development, you need to test something related to HTTPS. In some cases, the application you&amp;rsquo;re writing already supports HTTPS natively and that&amp;rsquo;s no problem. But more often (and probably better, in my opinion) is the case when you have another service (be it an AWS ELB or an nginx layer) that will terminate the HTTPS connection for you so your application doesn&amp;rsquo;t have to know how to speak HTTPS.&lt;/p&gt;

&lt;p&gt;In those cases, how can you test functionality that specifically interacts with HTTPS?&lt;/p&gt;

&lt;p&gt;Today I will show you &lt;code&gt;autohttps&lt;/code&gt;, a thin nginx proxy using Docker and a &lt;a href=&#34;https://en.wikipedia.org/wiki/self%20signed%20certificate&#34;&gt;self signed certificate&lt;/a&gt; to automatically create an HTTPS proxy in front of your application.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Audiobooks to Podcasts</title>
      <link>https://blog.jverkamp.com/2016/02/26/audiobooks-to-podcasts/</link>
      <pubDate>Fri, 26 Feb 2016 00:05:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2016/02/26/audiobooks-to-podcasts/</guid>
      <description>&lt;p&gt;I&amp;rsquo;ve recently started to listen to audiobooks again (The Aeronaut&amp;rsquo;s Windlass). If you buy books through Audible or some other setup that has their own app, it&amp;rsquo;s a straight forward enough process. On the other hand, if you have them on CD and want to play them on a mobile device&amp;hellip; It&amp;rsquo;s a little more interesting.&lt;/p&gt;

&lt;p&gt;I tried a few different apps that purport to do exactly what I wanted: import an audiobook as a folder full of MP3s and play them, but none that quite meet what I wanted. Since I also listen to a lot of podcasts and have more than one podcast app that I really like (I&amp;rsquo;ve used and liked both &lt;a href=&#34;http://www.downcastapp.com/&#34;&gt;Downcast&lt;/a&gt; and &lt;a href=&#34;http://www.shiftyjelly.com/pocketcasts&#34;&gt;Pocket Casts&lt;/a&gt;), I decided to see if I couldn&amp;rsquo;t use one of those as an audiobook player.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Configuring Websockets behind an AWS ELB</title>
      <link>https://blog.jverkamp.com/2015/07/20/configuring-websockets-behind-an-aws-elb/</link>
      <pubDate>Mon, 20 Jul 2015 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2015/07/20/configuring-websockets-behind-an-aws-elb/</guid>
      <description>&lt;p&gt;Recently at work, we were trying to get an application that uses &lt;a href=&#34;https://en.wikipedia.org/wiki/websockets&#34;&gt;websockets&lt;/a&gt; working on an &lt;a href=&#34;https://aws.amazon.com/&#34;&gt;AWS&lt;/a&gt; instance behind an &lt;a href=&#34;https://aws.amazon.com/elasticloadbalancing/&#34;&gt;ELB (load balancer)&lt;/a&gt; and &lt;a href=&#34;http://nginx.org/&#34;&gt;nginx&lt;/a&gt; on the instance.&lt;/p&gt;

&lt;p&gt;If you&amp;rsquo;re either not using a secure connection or handling the cryptography on the instance (either in nginx or Flask), it works right out of the box. But if you want the ELB to handle TLS termination it doesn&amp;rsquo;t work nearly as well&amp;hellip; Luckily, after a bit of fiddling, I got it working.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Update 2018-05-31:&lt;/strong&gt; A much easier solution, &lt;a href=&#34;just use an ALB&#34;&gt;https://aws.amazon.com/blogs/aws/new-aws-application-load-balancer/&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;WebSocket&lt;/strong&gt; allows you to set up long-standing TCP connections between your client and your server. This is a more efficient alternative to the old-school method which involved HTTP connections that were held open with a “heartbeat” for very long periods of time. WebSocket is great for mobile devices and can be used to deliver stock quotes, sports scores, and other dynamic data while minimizing power consumption. ALB provides native support for WebSocket via the &lt;code&gt;ws://&lt;/code&gt; and &lt;code&gt;wss://&lt;/code&gt; protocols.&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>Performance problems with Flask and Docker</title>
      <link>https://blog.jverkamp.com/2015/04/03/performance-problems-with-flask-and-docker/</link>
      <pubDate>Fri, 03 Apr 2015 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2015/04/03/performance-problems-with-flask-and-docker/</guid>
      <description>&lt;p&gt;I had an interesting problem recently on a project I was working on. It&amp;rsquo;s a simple &lt;a href=&#34;http://flask.pocoo.org/&#34;&gt;Flask&lt;/a&gt;-based webapp, designed to be deployed to &lt;a href=&#34;https://aws.amazon.com/&#34;&gt;AWS&lt;/a&gt; using &lt;a href=&#34;https://www.docker.com/&#34;&gt;Docker&lt;/a&gt;. The application worked just fine when I was running it locally, but as soon as I pushed the docker container&amp;hellip;&lt;/p&gt;

&lt;p&gt;Latency spikes. Bad enough that the application was failing AWS&amp;rsquo;s healthy host checks, cycling in and out of existence&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;:&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&#34;https://blog.jverkamp.com/embeds/2015/health-check.png&#34;/&gt; 
&lt;/figure&gt;</description>
    </item>
    
  </channel>
</rss>