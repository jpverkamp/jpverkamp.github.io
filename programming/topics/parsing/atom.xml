<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Parsing on jverkamp.com</title><link>https://blog.jverkamp.com/programming/topics/parsing/</link><description>Recent content in Parsing on jverkamp.com</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://blog.jverkamp.com/programming/topics/parsing/atom.xml" rel="self" type="application/rss+xml"/><item><title>AoC 2022 Day 13: List Parsinator</title><link>https://blog.jverkamp.com/2022/12/13/aoc-2022-day-13-list-parsinator/</link><pubDate>Tue, 13 Dec 2022 00:00:03 +0000</pubDate><guid>https://blog.jverkamp.com/2022/12/13/aoc-2022-day-13-list-parsinator/</guid><description>&lt;h2 id="source-distress-signalhttpsadventofcodecom2022day13">Source: &lt;a href="https://adventofcode.com/2022/day/13">Distress Signal&lt;/a>&lt;/h2>
&lt;h2 id="part-1">Part 1&lt;/h2>
&lt;blockquote>
&lt;p>Given pairs of &lt;code>Signal&lt;/code>s (where a &lt;code>Signal&lt;/code> is a nested list ;example: &lt;code>[[1],[2,3,4]]&lt;/code>), count how many pairs are &amp;lsquo;in order&amp;rsquo;.&lt;/p>
&lt;/blockquote>
&lt;p>One &lt;code>Signal&lt;/code> is less than the other if:&lt;/p>
&lt;ul>
&lt;li>Both are an integer and the first is less than the second&lt;/li>
&lt;li>Both are a list and the first value is less than the second
&lt;ul>
&lt;li>If the first values are the same, compare the second&lt;/li>
&lt;li>If the first has fewer elements, it is treated as less than the second&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>When comparing an integer and a list, wrap the integer as a single element list and compare them&lt;/li>
&lt;/ul></description></item><item><title>AoC 2022 Day 12: Climbiantor</title><link>https://blog.jverkamp.com/2022/12/12/aoc-2022-day-12-climbiantor/</link><pubDate>Mon, 12 Dec 2022 00:00:03 +0000</pubDate><guid>https://blog.jverkamp.com/2022/12/12/aoc-2022-day-12-climbiantor/</guid><description>&lt;h2 id="source-hill-climbing-algorithmhttpsadventofcodecom2022day12">Source: &lt;a href="https://adventofcode.com/2022/day/12">Hill Climbing Algorithm&lt;/a>&lt;/h2>
&lt;h2 id="part-1">Part 1&lt;/h2>
&lt;blockquote>
&lt;p>Given a height map, find the shortest path between two points such that the path can descend any distance but can only climb by a maximum of 1.&lt;/p>
&lt;/blockquote></description></item><item><title>AoC 2022 Day 11: Monkeyinator</title><link>https://blog.jverkamp.com/2022/12/11/aoc-2022-day-11-monkeyinator/</link><pubDate>Sun, 11 Dec 2022 00:00:03 +0000</pubDate><guid>https://blog.jverkamp.com/2022/12/11/aoc-2022-day-11-monkeyinator/</guid><description>&lt;h2 id="source-monkey-in-the-middlehttpsadventofcodecom2022day11">Source: &lt;a href="https://adventofcode.com/2022/day/11">Monkey in the Middle&lt;/a>&lt;/h2>
&lt;h2 id="part-1">Part 1&lt;/h2>
&lt;blockquote>
&lt;p>Simulate a collection of &amp;lsquo;monkeys&amp;rsquo;. Each monkey will have a number of items which it will then apply a mathematical operation to, then always divide by 3, then test divisibility to pass to one of two other monkeys. Return as answer the product of the two highest number of times a monkey applies it&amp;rsquo;s main function to individual items after 20 steps.&lt;/p>
&lt;/blockquote>
&lt;p>Note: Monkeys will always be evaluated in order (so monkey 1 will evaluate any items passed by monkey 0 again in the same round).&lt;/p></description></item><item><title>AoC 2021 Day 24: Aluinator</title><link>https://blog.jverkamp.com/2021/12/24/aoc-2021-day-24-aluinator/</link><pubDate>Fri, 24 Dec 2021 00:00:03 +0000</pubDate><guid>https://blog.jverkamp.com/2021/12/24/aoc-2021-day-24-aluinator/</guid><description>&lt;h3 id="source-arithmetic-logic-unithttpsadventofcodecom2021day24">Source: &lt;a href="https://adventofcode.com/2021/day/24">Arithmetic Logic Unit&lt;/a>&lt;/h3>
&lt;h4 id="part-1-simulate-an-alu-with-4-registers-w-x-y-and-z-and-instructions-defined-below-find-the-largest-14-digit-number-with-no-0-digits-which-result-in-z0">&lt;strong>Part 1:&lt;/strong> Simulate an ALU with 4 registers (&lt;code>w&lt;/code>, &lt;code>x&lt;/code>, &lt;code>y&lt;/code>, and &lt;code>z&lt;/code>) and instructions defined below. Find the largest 14 digit number with no 0 digits which result in &lt;code>z=0&lt;/code>.&lt;/h4></description></item><item><title>AoC 2021 Day 16: Depacketinator</title><link>https://blog.jverkamp.com/2021/12/16/aoc-2021-day-16-depacketinator/</link><pubDate>Thu, 16 Dec 2021 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2021/12/16/aoc-2021-day-16-depacketinator/</guid><description>&lt;h3 id="source-packet-decoderhttpsadventofcodecom2021day16">Source: &lt;a href="https://adventofcode.com/2021/day/16">Packet Decoder&lt;/a>&lt;/h3>
&lt;h4 id="part-1-given-a-recursive-binary-packet-definition-see-below-parse-the-given-packet-return-the-sum-of-each-packets-version">&lt;strong>Part 1:&lt;/strong> Given a recursive binary packet definition (see below), parse the given packet. Return the sum of each packet&amp;rsquo;s &lt;code>version&lt;/code>.&lt;/h4></description></item><item><title>AoC 2021 Day 10: Chunkinator</title><link>https://blog.jverkamp.com/2021/12/10/aoc-2021-day-10-chunkinator/</link><pubDate>Fri, 10 Dec 2021 00:00:15 +0000</pubDate><guid>https://blog.jverkamp.com/2021/12/10/aoc-2021-day-10-chunkinator/</guid><description>&lt;h3 id="source-syntax-scoringhttpsadventofcodecom2021day10">Source: &lt;a href="https://adventofcode.com/2021/day/10">Syntax Scoring&lt;/a>&lt;/h3>
&lt;h4 id="part-1-given-a-sequence-of----and--with-nesting-allowed-find-the-first-syntax-error-where-the-wrong-closing-symbol-is-used-scoring-3-57-1197-and-25137-respectively-for-each-error-calculate-the-total-error-score">&lt;strong>Part 1:&lt;/strong> Given a sequence of () [] {}, and &amp;lt;&amp;gt; with nesting allowed. Find the first syntax error (where the wrong closing symbol is used). Scoring 3, 57, 1197, and 25137 respectively for each error, calculate the total error score.&lt;/h4></description></item><item><title>AoC 2017 Day 9: Garbage Gobbler</title><link>https://blog.jverkamp.com/2017/12/09/aoc-2017-day-9-garbage-gobbler/</link><pubDate>Sat, 09 Dec 2017 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2017/12/09/aoc-2017-day-9-garbage-gobbler/</guid><description>&lt;h3 id="source-stream-processinghttpadventofcodecom2017day9">Source: &lt;a href="http://adventofcode.com/2017/day/9">Stream Processing&lt;/a>&lt;/h3>
&lt;blockquote>
&lt;p>&lt;strong>Part 1:&lt;/strong> An input stream can contain:&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;ul>
&lt;li>&lt;code>groups&lt;/code> are delimited by &lt;code>{&lt;/code> and &lt;code>}&lt;/code>, &lt;code>groups&lt;/code> are nestable and may contain &lt;code>garbage&lt;/code> or data (objects within a &lt;code>group&lt;/code> are &lt;a href="https://en.wikipedia.org/wiki/comma%20delimited">comma delimited&lt;/a>)&lt;/li>
&lt;li>&lt;code>garbage&lt;/code> is delimited by &lt;code>&amp;lt;&lt;/code> and &lt;code>&amp;gt;&lt;/code>, &lt;code>groups&lt;/code> cannot be nested within &lt;code>garbage&lt;/code>, a &lt;code>!&lt;/code> within &lt;code>garbage&lt;/code> is an &lt;a href="https://en.wikipedia.org/wiki/escape%20character">escape character&lt;/a>: &lt;code>!&amp;gt;&lt;/code> does not end a garbage segment&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;blockquote>
&lt;p>The score of a single group is equal to how many times it is nested (the innermost group of &lt;code>{{{}}}&lt;/code> has score &lt;code>3&lt;/code>).&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>The score of a stream is the sum of the scores of all groups in that stream.&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>What is the total score of your input?&lt;/p>
&lt;/blockquote></description></item><item><title>Making music, part 3: Making noise</title><link>https://blog.jverkamp.com/2013/11/12/making-music-part-3-making-noise/</link><pubDate>Tue, 12 Nov 2013 14:00:25 +0000</pubDate><guid>https://blog.jverkamp.com/2013/11/12/making-music-part-3-making-noise/</guid><description>&lt;p>&lt;a href="https://blog.jverkamp.com/2013/11/07/making-music-part-2-taking-shape/">Last week&lt;/a> we parsed some music. That post was in a bit of a hurry, so we had to leave off a fair few important pieces (like ties and slurs for one; chords for a rather bigger one). We&amp;rsquo;ll get to them soon, but for now we want to actually get something playing back.&lt;/p></description></item><item><title>Making music, part 2: Taking shape</title><link>https://blog.jverkamp.com/2013/11/07/making-music-part-2-taking-shape/</link><pubDate>Thu, 07 Nov 2013 14:00:55 +0000</pubDate><guid>https://blog.jverkamp.com/2013/11/07/making-music-part-2-taking-shape/</guid><description>&lt;p>It&amp;rsquo;s been a bit, but as you may have noticed life is a bit mad at the moment. But I&amp;rsquo;ve still made some progress.&lt;/p>
&lt;p>When we left off &lt;a href="https://blog.jverkamp.com/2013/10/29/making-music-part-1-reading-abc-notation/">last time&lt;/a>, we&amp;rsquo;d finished the first step towards making some lovely music with Racket: &lt;a href="https://en.wikipedia.org/wiki/tokenization">tokenization&lt;/a>. Now we want to take those songs and form them into something actually approaching music.&lt;/p></description></item><item><title>Making music, part 1: Reading ABC notation</title><link>https://blog.jverkamp.com/2013/10/29/making-music-part-1-reading-abc-notation/</link><pubDate>Tue, 29 Oct 2013 14:00:12 +0000</pubDate><guid>https://blog.jverkamp.com/2013/10/29/making-music-part-1-reading-abc-notation/</guid><description>&lt;p>It&amp;rsquo;s been a bit since I&amp;rsquo;ve had time to post&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>, but I&amp;rsquo;ve got an interesting new project that I&amp;rsquo;ve been working on. It&amp;rsquo;s a bit more complicated, ergo spread out over a few posts, but those tend to be the more interesting posts anyway, eh?&lt;/p>
&lt;p>The basic idea is that I want to be able to write and play music in Racket. One end goal would be to make a library available for the C211 class to give them something else to work with (in addition to &amp;lt;a href=&amp;quot;//blog.jverkamp.com&amp;quot;/wombat-ide/c211-image-api/&amp;quot;&amp;gt;images&lt;/a> and &amp;lt;a href=&amp;quot;//blog.jverkamp.com&amp;quot;/wombat-ide/c211-turtle-api/&amp;quot;&amp;gt;turtles&lt;/a>). To that end, here&amp;rsquo;s my current plan of attack&lt;sup id="fnref:2">&lt;a href="#fn:2" class="footnote-ref" role="doc-noteref">2&lt;/a>&lt;/sup>:&lt;/p>
&lt;ul>
&lt;li>Write a &lt;a href="https://en.wikipedia.org/wiki/Lexical%20analysis">lexer&lt;/a> for &lt;a href="https://en.wikipedia.org/wiki/ABC%20notation">ABC notation&lt;/a> to turn raw text into a list of tokens&lt;/li>
&lt;li>Write a parser to turn those tokens into a song (for example dealing with the interactions between key signature/accidentals and meter/note duration)&lt;/li>
&lt;li>Use the &lt;a href="http://pkg.racket-lang.org/#%5Brsound%5D">rsound&lt;/a> library on &lt;a href="http://pkg.racket-lang.org/">Planet2 / pkg&lt;/a> to play back individuals notes and chords&lt;/li>
&lt;li>Tie it all together to play a parsed song in ABC notation using the rsound library&lt;/li>
&lt;li>&lt;em>(maybe)&lt;/em>: Use the rsound library to save ABC files as WAV audio&lt;/li>
&lt;li>&lt;em>(maybe)&lt;/em>: Figure out the format and save ABC files as MIDI&lt;/li>
&lt;li>&lt;em>(maybe)&lt;/em>: Render songs as music sheets/li&amp;gt;&lt;/li>
&lt;/ul>
&lt;p>Sounds like fun! Let&amp;rsquo;s get started.&lt;/p></description></item></channel></rss>