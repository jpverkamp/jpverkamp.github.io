<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Security on jverkamp.com</title>
    <link>https://blog.jverkamp.com/programming/topics/security/</link>
    <description>Recent content in Security on jverkamp.com</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 14 Apr 2015 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://blog.jverkamp.com/programming/topics/security/atom.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>A Quick Look at RC4</title>
      <link>https://blog.jverkamp.com/2015/04/14/a-quick-look-at-rc4/</link>
      <pubDate>Tue, 14 Apr 2015 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2015/04/14/a-quick-look-at-rc4/</guid>
      <description>&lt;p&gt;In cryptography work, &lt;a href=&#34;https://en.wikipedia.org/wiki/RC4&#34;&gt;RC4&lt;/a&gt; (Rivest Cipher 4) is well known as both one of the easiest to implement and fastest to run &lt;a href=&#34;https://en.wikipedia.org/wiki/symmetric%20encryption&#34;&gt;symmetric encryption&lt;/a&gt; algorithms. Unfortunately, over time there have been a number of attacks on RC4, both in poorly written protocols (such as in the case of &lt;a href=&#34;https://en.wikipedia.org/wiki/WEP&#34;&gt;WEP&lt;/a&gt;) or statistical attacks against the protocol itself.&lt;/p&gt;

&lt;p&gt;Still, for how well it formed, it&amp;rsquo;s an amazingly simple algorithm, so I decided to try my hand at implementing it.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>CSRF protection injection with jQuery and Zend</title>
      <link>https://blog.jverkamp.com/2014/01/13/csrf-protection-injection-with-jquery-and-zend/</link>
      <pubDate>Mon, 13 Jan 2014 14:00:24 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2014/01/13/csrf-protection-injection-with-jquery-and-zend/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Csrf&#34;&gt;Cross-site request forgery&lt;/a&gt; attacks are among the most common vulnerabilities against websites, listed as &lt;a href=&#34;https://www.owasp.org/index.php/Top_10_2013-A8-Cross-Site_Request_Forgery_(CSRF)&#34;&gt;number 8&lt;/a&gt; on &lt;a href=&#34;https://www.owasp.org/index.php/Top_10_2013-Top_10&#34;&gt;OWASP&amp;rsquo;s 2013 Top 10 list&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Scanning for DNS resolvers</title>
      <link>https://blog.jverkamp.com/2013/01/31/scanning-for-dns-resolvers/</link>
      <pubDate>Thu, 31 Jan 2013 14:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2013/01/31/scanning-for-dns-resolvers/</guid>
      <description>&lt;p&gt;For a research project I&amp;rsquo;m working on, it has become necessary to scan potentially large &lt;a href=&#34;https://en.wikipedia.org/wiki/Cidr&#34;&gt;IPv4 prefixes&lt;/a&gt; in order to find any &lt;a href=&#34;https://en.wikipedia.org/wiki/DNS%20resolver&#34;&gt;DNS revolvers&lt;/a&gt; that I can and classify them as either open (accepting queries from anyone) or closed.&lt;/p&gt;

&lt;p&gt;Disclaimer: This is a form of &lt;a href=&#34;https://en.wikipedia.org/wiki/port%20scanning&#34;&gt;port scanning&lt;/a&gt; and thus has associated ethical and legal considerations. Use it at your own risk. &lt;/p&gt;

&lt;p&gt;This project is available on GitHub: &lt;a href=&#34;https://github.com/jpverkamp/dnsscan&#34; title=&#34;GitHub: jpverkamp: dnsscan&#34;&gt;jpverkamp/dnsscan&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>