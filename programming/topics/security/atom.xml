<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Security on jverkamp.com</title><link>https://blog.jverkamp.com/programming/topics/security/</link><description>Recent content in Security on jverkamp.com</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Fri, 25 Jul 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://blog.jverkamp.com/programming/topics/security/atom.xml" rel="self" type="application/rss+xml"/><item><title>Using CSP unsafe-hashes</title><link>https://blog.jverkamp.com/2025/07/25/using-csp-unsafe-hashes/</link><pubDate>Fri, 25 Jul 2025 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2025/07/25/using-csp-unsafe-hashes/</guid><description>&lt;p>So here&amp;rsquo;s a fun one: how does the &lt;code>unsafe-hashes&lt;/code> directive in a &lt;a href="https://en.wikipedia.org/wiki/content%20security%20police">content security police&lt;/a> work?&lt;/p>
&lt;p>In a perfect world, you don&amp;rsquo;t need it. You can write a CSP with a minimal &lt;code>script-src&lt;/code> policy, including only scripts from your own domains (&lt;code>self&lt;/code>) or a list of specific other scripts or at worst domains.&lt;/p>
&lt;p>But sometimes real life (and third party libraries) get in the way.&lt;/p>
&lt;p>It starts with inline scripts. So you have to add &lt;code>unsafe-inline&lt;/code>. But there&amp;rsquo;s a better way to do that: CSP nonces. Specify a randomly generated (per request) nonce in the CSP header and then apply that same nonce to every &lt;code>script&lt;/code> tag. Voila. Better.&lt;/p>
&lt;h2 id="the-problem-inline-javascript-events">The problem: inline JavaScript events&lt;/h2>
&lt;p>But what about something like this:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-html" data-lang="html">&lt;span style="display:flex;">&lt;span>&amp;lt;&lt;span style="color:#f92672">button&lt;/span> &lt;span style="color:#a6e22e">onClick&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;doSomething();&amp;#34;&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Well, you might say, don&amp;rsquo;t do that. Write it as a script:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-html" data-lang="html">&lt;span style="display:flex;">&lt;span>&amp;lt;&lt;span style="color:#f92672">button&lt;/span> &lt;span style="color:#a6e22e">id&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;doSomethinger&amp;#34;&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;lt;&lt;span style="color:#f92672">script&lt;/span> &lt;span style="color:#a6e22e">nonce&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;correctHorseBatteryStable&amp;#34;&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>document.&lt;span style="color:#a6e22e">getElementById&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;doSomethinger&amp;#34;&lt;/span>).&lt;span style="color:#a6e22e">addEventListener&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;click&amp;#34;&lt;/span>, &lt;span style="color:#66d9ef">function&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">doSomething&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>});
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;lt;/&lt;span style="color:#f92672">script&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>But like I said&amp;ndash;third parties scripts can be imperfect. And sometimes, they just &lt;em>insist&lt;/em> on embedding their own event handlers inline.&lt;/p>
&lt;h2 id="a-solution-unsafe-hashes">A solution: &lt;code>unsafe-hashes&lt;/code>&lt;/h2>
&lt;p>Enter: &lt;code>unsafe-hashes&lt;/code>.&lt;/p>
&lt;p>Basically, you can add this to your CSP:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-text" data-lang="text">&lt;span style="display:flex;">&lt;span>script-src &amp;#39;unsafe-hashes&amp;#39; &amp;#39;sha256-44558f2c36efd8163eac2903cec13ed1fafcca51abd91d9f696321ab895f1107&amp;#39;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This tells the browser that you &lt;em>are&lt;/em> allowed to have event listeners directly on HTML elements&amp;hellip; so long as the content of the JavaScript hashes &lt;em>exactly&lt;/em> to any hash listed as an &lt;code>unsafe-hash&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ echo -n &lt;span style="color:#e6db74">&amp;#34;doSomething();&amp;#34;&lt;/span> | sha256
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>44558f2c36efd8163eac2903cec13ed1fafcca51abd91d9f696321ab895f1107
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="it-gets-worse-dynamically-generated-javascript">It gets worse: dynamically generated JavaScript&lt;/h2>
&lt;p>There is, however, one problem with this that does come up unfortunately often. If you&amp;rsquo;re already dealing with third parties not doing things you wish they would, well then you have to deal with fun code like this:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-php" data-lang="php">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">&amp;lt;?&lt;/span>&lt;span style="color:#a6e22e">php&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">foreach&lt;/span> ($buttonIds &lt;span style="color:#66d9ef">as&lt;/span> $buttonId) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">echo&lt;/span> &lt;span style="color:#e6db74">&amp;#39;&amp;lt;button onclick=&amp;#34;doSomething(&amp;#39;&lt;/span> &lt;span style="color:#f92672">.&lt;/span> $buttonId &lt;span style="color:#f92672">.&lt;/span> &lt;span style="color:#e6db74">&amp;#39;);&amp;#34;&amp;gt;Button &amp;#39;&lt;/span> &lt;span style="color:#f92672">.&lt;/span> $buttonId &lt;span style="color:#f92672">.&lt;/span> &lt;span style="color:#e6db74">&amp;#39;&amp;lt;/button&amp;gt;&amp;#39;&lt;/span> &lt;span style="color:#f92672">.&lt;/span> &lt;span style="color:#a6e22e">PHP_EOL&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">?&amp;gt;&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Unfortunately&amp;hellip; that completely blows up the CSP. Because&amp;hellip;&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ echo -n &lt;span style="color:#e6db74">&amp;#34;doSomething(1);&amp;#34;&lt;/span> | sha256
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>2ef899c15aae95711855a45a5bb93c55363162e0e75e295aad4f189f20323d7c
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ echo -n &lt;span style="color:#e6db74">&amp;#34;doSomething(5);&amp;#34;&lt;/span> | sha256
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>0e03bb385169b89c95eb62659f50604ffb8283154bd58ab8cc7e692c4b5c05a3
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ echo -n &lt;span style="color:#e6db74">&amp;#34;doSomething(42);&amp;#34;&lt;/span> | sha256
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>4d9691449db6740ee19207c5bb52361eb97e18f06352ed400f83ae7caee270da
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Just hashes doing hash things there. So basically, you have to be able to dynamically generate your CSP on the fly, including all of the hashes of all of the functions &lt;em>and with each of their arguments&lt;/em> that are either possible or (even better) actually used.&lt;/p>
&lt;p>And this isn&amp;rsquo;t fun at all.&lt;/p>
&lt;p>Now, you might say: but you can do something like this:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-php" data-lang="php">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">&amp;lt;?&lt;/span>&lt;span style="color:#a6e22e">php&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">foreach&lt;/span> ($buttonIds &lt;span style="color:#66d9ef">as&lt;/span> $buttonId) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">echo&lt;/span> &lt;span style="color:#e6db74">&amp;#39;&amp;lt;button data-id=&amp;#34;$buttonId&amp;#34; onclick=&amp;#34;doSomething(this.dataset.id);&amp;#34;&amp;gt;&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">?&amp;gt;&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>After all&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ echo -n &lt;span style="color:#e6db74">&amp;#34;doSomething(this.dataset.id);&amp;#34;&lt;/span> | sha256
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>d2ecabb98b1bb7cc81cd75d43dcb7bac08ce31055339920976cb92aa2f5dd2f5
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Only one hash!&lt;/p>
&lt;p>But if you have that much control&amp;hellip; then why are you using inline JavaScript in the first place?&lt;/p>
&lt;h2 id="is-it-safe">Is it safe?&lt;/h2>
&lt;p>Is this safe?&lt;/p>
&lt;p>No. It&amp;rsquo;s called &lt;code>unsafe-*&lt;/code> for a reason. An attacker that controls input can theoretically take any of the hashed functions you&amp;rsquo;re including (like &lt;code>submitPayment&lt;/code>&amp;hellip;) and inject them in places they shouldn&amp;rsquo;t be. And heck, if you manage to find a SHA-256 hash collision? Well, then you have far more interesting things to do with &lt;em>that&lt;/em> then attacking some site that found themselves force to used &lt;code>unsafe-hashes&lt;/code>&amp;hellip;&lt;/p>
&lt;p>&lt;em>But&lt;/em> it&amp;rsquo;s better than &lt;code>unsafe-inline&lt;/code> without &lt;code>nonces&lt;/code> which allows arbitrary inline scripts. And unfortunately, there&amp;rsquo;s no way to actually use &lt;code>nonces&lt;/code> with inline scripts.&lt;/p>
&lt;p>And while a perfectly secure system would be the best case, it&amp;rsquo;s absolutely better to do as much as you can to secure a system rather than doing nothing waiting for the perfect solution to become possible.&lt;/p>
&lt;p>Onward!&lt;/p></description></item><item><title>Rebuilding Streams with TShark</title><link>https://blog.jverkamp.com/2023/11/14/rebuilding-streams-with-tshark/</link><pubDate>Tue, 14 Nov 2023 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2023/11/14/rebuilding-streams-with-tshark/</guid><description>&lt;p>Another quick post in a list of CTF techniques: filtering streams with &lt;a href="https://www.wireshark.org/docs/man-pages/tshark.html" target="_blank" rel="noopener">tshark&lt;/a>. tshark is the command line half of the packet capture tool &lt;a href="https://www.wireshark.org/" target="_blank" rel="noopener">Wireshark&lt;/a>. The advantage here is it let&amp;rsquo;s you do all manner of filtering on the command line.&lt;/p></description></item><item><title>SQLite Metadata via SQL Injection</title><link>https://blog.jverkamp.com/2023/11/09/sqlite-metadata-via-sql-injection/</link><pubDate>Thu, 09 Nov 2023 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2023/11/09/sqlite-metadata-via-sql-injection/</guid><description>&lt;p>As mentioned in my &lt;a href="https://blog.jverkamp.com/2023/11/07/mongo-db-data-exfiltration-via-search-conditions/">previous post&lt;/a>, I recently participated in a security CTF exercise and wanted to write out a few interesting techniques.&lt;/p>
&lt;p>This is the second: extracting SQL metadata from a SQLite database.&lt;/p></description></item><item><title>Mongo DB Data Exfiltration via Search Conditions</title><link>https://blog.jverkamp.com/2023/11/07/mongo-db-data-exfiltration-via-search-conditions/</link><pubDate>Tue, 07 Nov 2023 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2023/11/07/mongo-db-data-exfiltration-via-search-conditions/</guid><description>&lt;p>I recently participated in a security capture the flag (CTF) exercise through work. The goal was&amp;ndash;in a wide variety of ways&amp;ndash;to find a hidden string of the form &lt;code>flag{...}&lt;/code> somewhere in the problem. Some required exploiting sample websites, some parsing various data formats or captures, some required reverse engineering code or binaries, and (new this year) some required messing with LLMs.&lt;/p>
&lt;p>As I tend to do for just about everything, I ended up writing up my own experiences. I won&amp;rsquo;t share that, since it&amp;rsquo;s fairly tuned to the specific problems and thus 1) not interesting and 2) probably not mine to share, but I did want want to share a few interesting techniques I found/used. If it helps anyone either defend against similar attacks in the real world or (more importantly &amp;#x1f604;) someone comes across this while trying to solve a CTF of their own, all the better.&lt;/p>
&lt;p>Okay, first technique: extracting data from a MongoDB database using search conditions.&lt;/p></description></item><item><title>A CLI Tool for Bulk Processing Github Dependabot Alerts (with GraphQL!)</title><link>https://blog.jverkamp.com/2022/02/03/a-cli-tool-for-bulk-processing-github-dependabot-alerts-with-graphql/</link><pubDate>Thu, 03 Feb 2022 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2022/02/03/a-cli-tool-for-bulk-processing-github-dependabot-alerts-with-graphql/</guid><description>&lt;p>Dependabot is &amp;hellip; &lt;em>somewhat useful&lt;/em>. When it comes to letting you know that there are critical issues in your dependencies that can be fixed simply by upgrading the package (they did all the work for you*). The biggest problem is that it can just be &lt;em>insanely&lt;/em> noisy. In a busy repo with multiple Node.JS codebases (especially), you can get dozens to even hundreds of reports a week. And for each one, you optimally would update the code&amp;hellip; but sometimes it&amp;rsquo;s just not practical. So you have to decide which updates you actually apply.&lt;/p>
&lt;p>So. How do we do it?&lt;/p>
&lt;p>Well the traditional rest based Github APIs don&amp;rsquo;t expose the dependabot data, &lt;em>but&lt;/em> the newer GraphQL one does! I&amp;rsquo;ll admit, I haven&amp;rsquo;t used as much GraphQL as I probably should, it&amp;rsquo;s&amp;hellip; a bit more complicated than REST. But it does expose what I need.&lt;/p></description></item><item><title>A simple Flask Logging/Echo Server</title><link>https://blog.jverkamp.com/2022/02/01/a-simple-flask-logging/echo-server/</link><pubDate>Tue, 01 Feb 2022 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2022/02/01/a-simple-flask-logging/echo-server/</guid><description>&lt;p>A very simple server that can be used to catch all incoming HTTP requests and just echo them back + log their contents. I needed it to test what a webhook actually returned to me, but I&amp;rsquo;m sure that there are a number of other things it could be dropped in for.&lt;/p>
&lt;p>It will take in any GET/POST/PATCH/DELETE HTTP request with any path/params/data (optionally JSON), pack that data into a JSON object, and both log that to a file (with a UUID1 based name) plus return this object to the request.&lt;/p>
&lt;p>Warning: Off hand, there is already a potential security problem in this regarding DoS. It will happily try to log anything you throw at it, no matter how big and will store those in memory first. So long running requests / large requests / many requests will quickly eat up your RAM/disk. So&amp;hellip; don&amp;rsquo;t leave this running unattended? At least not without additional configuration.&lt;/p>
&lt;p>That&amp;rsquo;s it! Hope it&amp;rsquo;s helpful.&lt;/p></description></item><item><title>Pulling more than 5000 logs from datadog</title><link>https://blog.jverkamp.com/2022/01/25/pulling-more-than-5000-logs-from-datadog/</link><pubDate>Tue, 25 Jan 2022 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2022/01/25/pulling-more-than-5000-logs-from-datadog/</guid><description>&lt;p>&lt;a href="https://www.datadoghq.com/" target="_blank" rel="noopener">Datadog&lt;/a> is pretty awesome. I wish I had it at my previous job, but better late than never. In particular, I&amp;rsquo;ve used it a lot for digging through recent logs to try to construct various events for various (security related) reasons.&lt;/p>
&lt;p>One of the problems I&amp;rsquo;ve come into though is that eventually you&amp;rsquo;re going to hit the limits of what datadog can do. In particular, I was trying to reconstruct user&amp;rsquo;s sessions and then check if they made one specific sequence of calls or another one. So far as I know, that isn&amp;rsquo;t directly possible, so instead, I wanted to download a subset of the datadog logs and process them locally.&lt;/p>
&lt;p>Easy enough, yes? Well: &lt;a href="https://stackoverflow.com/questions/67281698/datadog-export-logs-more-than-5-000" target="_blank" rel="noopener">https://stackoverflow.com/questions/67281698/datadog-export-logs-more-than-5-000&lt;/a>&lt;/p>
&lt;p>Turns out, you just can&amp;rsquo;t export more than 5000 logs directly. &lt;em>But&lt;/em>&amp;hellip; they have an API with pagination!&lt;/p></description></item><item><title>SSRF Protection in Rails</title><link>https://blog.jverkamp.com/2020/06/30/ssrf-protection-in-rails/</link><pubDate>Tue, 30 Jun 2020 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2020/06/30/ssrf-protection-in-rails/</guid><description>&lt;p>One of the more subtle bugs that a lot of companies miss is Server Side Request Forgery (SSRF). Like it&amp;rsquo;s cousin CSRF (cross-site request forgery), SSRF involves carefully crafting a request that runs in a way that the original developers didn&amp;rsquo;t expect to do things that shouldn&amp;rsquo;t be done. In the case of CSRF, one site is making a request on behalf of another in a user&amp;rsquo;s browser (cross-site), but in SSRF, a request is being made by a server on behalf of a client, but you can trick it into making a request that wasn&amp;rsquo;t intended.&lt;/p>
&lt;p>For a perhaps more obvious example, consider a website with a service that will render webpages as preview images&amp;ndash;consider sharing links on a social network. A user makes a request such as &lt;code>/render?url=https://www.google.com&lt;/code>. This goes to the server, which will then fetch &lt;a href="https://www.google.com" target="_blank" rel="noopener">https://www.google.com&lt;/a>, render the page to a screenshot, and then return that as a thumbnail.&lt;/p>
&lt;p>This seems like rather useful functionality, but what if instead, the user gives the url: &lt;code>/render?url=https://secret-internal-site.company.com&lt;/code>. Normally, &lt;code>company.com&lt;/code> would be an internal only domain that cannot be viewed by users, but in this case&amp;ndash;the server is within the corporate network. Off the server goes, helpfully taking and returning a screenshot. Another option&amp;ndash;if you&amp;rsquo;re hosted on AWS&amp;ndash;is the AWS &lt;a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-metadata.html" target="_blank" rel="noopener">metadata endpoint&lt;/a>: &lt;code>http://169.254.169.254/latest/meta-data/&lt;/code>. All sorts of interesting private things there. Or even more insidious, &lt;code>/render?url=file:///etc/password&lt;/code>. That shouldn&amp;rsquo;t work in most cases, since most libraries know better than to rener &lt;code>file://&lt;/code> protocol URLs, but&amp;hellip; not always!&lt;/p></description></item><item><title>Rack::Cors Configuration Tricks</title><link>https://blog.jverkamp.com/2020/01/16/rackcors-configuration-tricks/</link><pubDate>Thu, 16 Jan 2020 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2020/01/16/rackcors-configuration-tricks/</guid><description>&lt;p>&lt;a href="https://github.com/cyu/rack-cors">cyu&amp;rsquo;s Rack::Cors middleware&lt;/a> is rather handy if want to control your &lt;a href="https://en.wikipedia.org/wiki/CORS">CORS&lt;/a> (Cross-Origin Resource Sharing) settings in a Ruby-on-Rails project. Previously, there was a fairly major issue where &lt;code>:credentials =&amp;gt; true&lt;/code> was the default (which you generally do not want), but there were also some more complicated tweaks that I wanted to make.&lt;/p>
&lt;p>One problem I recently had to deal with was wanting to:&lt;/p>
&lt;ul>
&lt;li>Allow CORS connections from arbitrary domains (this site functions as an API)&lt;/li>
&lt;li>Do not allow CORS from http domains at all&lt;/li>
&lt;li>Only allow cookies (&lt;code>Access-Control-Allow-Credentials&lt;/code>) to be sent for sibling subdomains&lt;/li>
&lt;li>Prevent cookies from being sent from specific sibling subdomains (that are actually run by a third party)&lt;/li>
&lt;li>On development (non-production) versions of the site, allow credentials from localhost&lt;/li>
&lt;/ul></description></item><item><title>Prevent JavaScript links by parsing URLs</title><link>https://blog.jverkamp.com/2019/05/02/prevent-javascript-links-by-parsing-urls/</link><pubDate>Thu, 02 May 2019 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2019/05/02/prevent-javascript-links-by-parsing-urls/</guid><description>&lt;p>If you have a website that allows users to submit URLs, one of the (many many) things people will try to do to break your site is to submit URLs that use the &lt;code>javascript:&lt;/code> protocol (rather than the more expected &lt;code>http:&lt;/code> or &lt;code>https:&lt;/code>). This is almost never something that you want, since it allows users to submit essentially arbitrary code that other users will run on click in the context of your domain (&lt;a href="https://en.wikipedia.org/wiki/same%20origin%20policy">same origin policy&lt;/a>).&lt;/p>
&lt;p>So how do you fix it?&lt;/p>
&lt;p>First thought would be to try to check the protocol:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#a6e22e">safe_url&lt;/span> &lt;span style="color:#f92672">=&lt;/span> (&lt;span style="color:#a6e22e">url&lt;/span>) =&amp;gt; &lt;span style="color:#f92672">!&lt;/span>&lt;span style="color:#a6e22e">url&lt;/span>.&lt;span style="color:#a6e22e">match&lt;/span>(&lt;span style="color:#e6db74">/^javascript:/&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>[Function&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">safe_url&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#a6e22e">safe_url&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;http://www.example.com&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#a6e22e">safe_url&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;javascript:alert(1)&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">false&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Forcing Secure Cookies Behind an ELB in Ruby/Rails</title><link>https://blog.jverkamp.com/2019/04/30/forcing-secure-cookies-behind-an-elb-in-ruby/rails/</link><pubDate>Tue, 30 Apr 2019 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2019/04/30/forcing-secure-cookies-behind-an-elb-in-ruby/rails/</guid><description>&lt;p>As part of general security good practices, you should always (whenever possible):&lt;/p>
&lt;ul>
&lt;li>use HTTPS to serve all requests&lt;/li>
&lt;li>serve redirects to upgrade HTTP requests to HTTPS&lt;/li>
&lt;li>set session cookies to &lt;code>secure&lt;/code> and &lt;code>http_only&lt;/code>&lt;/li>
&lt;li>enable HTTP Strict Transport Security (&lt;code>HSTS&lt;/code>)&lt;/li>
&lt;/ul></description></item><item><title>A Quick Look at RC4</title><link>https://blog.jverkamp.com/2015/04/14/a-quick-look-at-rc4/</link><pubDate>Tue, 14 Apr 2015 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2015/04/14/a-quick-look-at-rc4/</guid><description>&lt;p>In cryptography work, &lt;a href="https://en.wikipedia.org/wiki/RC4">RC4&lt;/a> (Rivest Cipher 4) is well known as both one of the easiest to implement and fastest to run &lt;a href="https://en.wikipedia.org/wiki/symmetric%20encryption">symmetric encryption&lt;/a> algorithms. Unfortunately, over time there have been a number of attacks on RC4, both in poorly written protocols (such as in the case of &lt;a href="https://en.wikipedia.org/wiki/WEP">WEP&lt;/a>) or statistical attacks against the protocol itself.&lt;/p>
&lt;p>Still, for how well it formed, it&amp;rsquo;s an amazingly simple algorithm, so I decided to try my hand at implementing it.&lt;/p></description></item><item><title>CSRF protection injection with jQuery and Zend</title><link>https://blog.jverkamp.com/2014/01/13/csrf-protection-injection-with-jquery-and-zend/</link><pubDate>Mon, 13 Jan 2014 14:00:24 +0000</pubDate><guid>https://blog.jverkamp.com/2014/01/13/csrf-protection-injection-with-jquery-and-zend/</guid><description>&lt;p>&lt;a href="https://en.wikipedia.org/wiki/Csrf">Cross-site request forgery&lt;/a> attacks are among the most common vulnerabilities against websites, listed as &lt;a href="https://www.owasp.org/index.php/Top_10_2013-A8-Cross-Site_Request_Forgery_(CSRF)">number 8&lt;/a> on &lt;a href="https://www.owasp.org/index.php/Top_10_2013-Top_10">OWASP&amp;rsquo;s 2013 Top 10 list&lt;/a>.&lt;/p></description></item><item><title>Scanning for DNS resolvers</title><link>https://blog.jverkamp.com/2013/01/31/scanning-for-dns-resolvers/</link><pubDate>Thu, 31 Jan 2013 14:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2013/01/31/scanning-for-dns-resolvers/</guid><description>&lt;p>For a research project I&amp;rsquo;m working on, it has become necessary to scan potentially large &lt;a href="https://en.wikipedia.org/wiki/Cidr">IPv4 prefixes&lt;/a> in order to find any &lt;a href="https://en.wikipedia.org/wiki/DNS%20resolver">DNS revolvers&lt;/a> that I can and classify them as either open (accepting queries from anyone) or closed.&lt;/p>
&lt;p>Disclaimer: This is a form of &lt;a href="https://en.wikipedia.org/wiki/port%20scanning">port scanning&lt;/a> and thus has associated ethical and legal considerations. Use it at your own risk. &lt;/p>
&lt;p>This project is available on GitHub: &lt;a href="https://github.com/jpverkamp/dnsscan" title="GitHub: jpverkamp: dnsscan">jpverkamp/dnsscan&lt;/a>&lt;/p></description></item></channel></rss>