<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Generative Art on jverkamp.com</title>
    <link>https://blog.jverkamp.com/programming/topics/generative-art/</link>
    <description>Recent content in Generative Art on jverkamp.com</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 20 Nov 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://blog.jverkamp.com/programming/topics/generative-art/atom.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Backtracking Worm Coral</title>
      <link>https://blog.jverkamp.com/2020/11/20/backtracking-worm-coral/</link>
      <pubDate>Fri, 20 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2020/11/20/backtracking-worm-coral/</guid>
      <description>&lt;p&gt;Let&amp;rsquo;s take [yesterday&amp;rsquo;s Worm Coral]https://blog.jverkamp.com/2020/11/19/worm-coral/ and turn it up to 11!&lt;/p&gt;

&lt;p&gt;Now we have:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Whenever a worm gets stuck, it will &amp;lsquo;backtrack&amp;rsquo;: it will instead expand from the previous position recursively&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;That means that the initial 10 worms should always be able to fill the entire world! Even if one closes off an area, that one can eventually fill it up:&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&#34;https://blog.jverkamp.com/embeds/2020/backtracking-worm-full.png&#34;/&gt; 
&lt;/figure&gt;


&lt;p&gt;I like how occiasionally you get one spindly bit (usually early in the run) that another goes through. It reminds me of &lt;a href=&#34;https://boardgamegeek.com/boardgame/2453/blokus&#34;&gt;Blokus&lt;/a&gt; It does take a while.&lt;/p&gt;

&lt;p&gt;In addition, I wanted to play a bit with simulationism:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Worms can potentially &lt;code&gt;changeColor&lt;/code&gt; each frame&lt;/li&gt;
&lt;li&gt;Every &lt;code&gt;framesPerGeneration&lt;/code&gt; check if each worm dies &lt;code&gt;deathChance&lt;/code&gt; or spawns a child worm (&lt;code&gt;spawnChance&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;If a worm dies, it is removed from the simulation&lt;/li&gt;
&lt;li&gt;If a worm spawns, it creates a new child at it&amp;rsquo;s current location

&lt;ul&gt;
&lt;li&gt;If &lt;code&gt;spawnIncludesHistory&lt;/code&gt; is set, the child can backtrack into the parent&amp;rsquo;s history&lt;/li&gt;
&lt;li&gt;If &lt;code&gt;spawnVariesColor&lt;/code&gt; is set, the child will (potentially, it&amp;rsquo;s random) have a slightly different color&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let&amp;rsquo;s check it out!&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Worm Coral</title>
      <link>https://blog.jverkamp.com/2020/11/19/worm-coral/</link>
      <pubDate>Thu, 19 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2020/11/19/worm-coral/</guid>
      <description>&lt;p&gt;Today, I&amp;rsquo;m going to work on using [worms](https://blog.jverkamp.com/2020/11/17/p5js-worms/ to generate coral, similar to what I did way back when I was &lt;a href=&#34;https://blog.jverkamp.com/2015/01/01/generating-omnichromatic-images/&#34;&gt;generating omnichromatic images&lt;/a&gt;.&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&#34;https://blog.jverkamp.com/embeds/2020/worm-coral.png&#34;/&gt; 
&lt;/figure&gt;


&lt;p&gt;In a nutshell:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Spawn n worms&lt;/li&gt;
&lt;li&gt;On each tick:

&lt;ul&gt;
&lt;li&gt;Each worm tries to randomly move one direction&lt;/li&gt;
&lt;li&gt;If it cannot, increment that worm&amp;rsquo;s &lt;code&gt;stuck&lt;/code&gt; counter&lt;/li&gt;
&lt;li&gt;If it can, restart the &lt;code&gt;stuck&lt;/code&gt; counter&lt;/li&gt;
&lt;li&gt;If a worm is &lt;code&gt;stuck&lt;/code&gt; long enough, kill it off and spawn a new worm&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Eventually, we&amp;rsquo;ll fill the entire space with colors that end up looking a bit like coral. I&amp;rsquo;ll probably extend this later, since there are a lot of cool tweaks you can do with this general idea.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>p5js Boids</title>
      <link>https://blog.jverkamp.com/2020/11/18/p5js-boids/</link>
      <pubDate>Wed, 18 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2020/11/18/p5js-boids/</guid>
      <description>&lt;p&gt;Okay, sketch 2: &lt;a href=&#34;https://en.wikipedia.org/wiki/Boids&#34;&gt;Boids&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;The basic idea is to create a bunch of particles (the Boids in this case) and apply to them each a series of simple, limited rules that rely neither on communcation between the Boids nor a global controller and see what behaviors you can generate. Specifically, can you replicate the flocking behavior found in birds, since birds can obviously fly together without hitting one another and also without some lead bird giving orders.&lt;/p&gt;

&lt;p&gt;Something like this:&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&#34;https://blog.jverkamp.com/embeds/2020/boids.png&#34;/&gt; 
&lt;/figure&gt;


&lt;p&gt;For this case, there are three rules:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;seperation&lt;/strong&gt; - Fly away from any Boids that are too close to you (to avoid collision)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;alignment&lt;/strong&gt; - Align yourself to fly in the same direction as any Boids in your field of vision&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;cohesion&lt;/strong&gt; - Fly towards the center point of the Boids you can see&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>p5js Worms</title>
      <link>https://blog.jverkamp.com/2020/11/17/p5js-worms/</link>
      <pubDate>Tue, 17 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2020/11/17/p5js-worms/</guid>
      <description>&lt;p&gt;One thing that I&amp;rsquo;ve been hoping to get into a bit more is the idea of &lt;a href=&#34;https://en.wikipedia.org/wiki/Generative%20Art&#34;&gt;Generative Art&lt;/a&gt;. Essentially, use any of a wide variety of algorithms to generate art. To do that, and so that the art can be generated right in front of you in the browser, I&amp;rsquo;m going to use the &lt;a href=&#34;https://p5js.org/&#34;&gt;p5js&lt;/a&gt; library. It gives you a nice API of graphical primitives and takes a simple &lt;code&gt;setup&lt;/code&gt; and &lt;code&gt;draw&lt;/code&gt; function and does the rest.&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>