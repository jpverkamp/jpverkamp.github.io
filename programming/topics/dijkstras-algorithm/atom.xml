<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Dijkstra's Algorithm on jverkamp.com</title><link>https://blog.jverkamp.com/programming/topics/dijkstras-algorithm/</link><description>Recent content in Dijkstra's Algorithm on jverkamp.com</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Fri, 20 Dec 2024 00:00:03 +0000</lastBuildDate><atom:link href="https://blog.jverkamp.com/programming/topics/dijkstras-algorithm/atom.xml" rel="self" type="application/rss+xml"/><item><title>AoC 2024 Day 20: Shadow Catinator</title><link>https://blog.jverkamp.com/2024/12/20/aoc-2024-day-20-shadow-catinator/</link><pubDate>Fri, 20 Dec 2024 00:00:03 +0000</pubDate><guid>https://blog.jverkamp.com/2024/12/20/aoc-2024-day-20-shadow-catinator/</guid><description>&lt;h2 id="source-day-20-race-condition">Source: &lt;a href="https://adventofcode.com/2024/day/20" target="_blank" rel="noopener">Day 20: Race Condition&lt;/a>&lt;/h2>
&lt;p>&lt;a href="https://github.com/jpverkamp/advent-of-code/blob/master/2024/src/day20.rs" target="_blank" rel="noopener">Full solution&lt;/a> for today (spoilers!).&lt;/p>
&lt;nav id="TableOfContents">
 &lt;ul>
 &lt;li>&lt;a href="#source-day-20-race-condition">Source: &lt;a href="https://adventofcode.com/2024/day/20">Day 20: Race Condition&lt;/a>&lt;/a>&lt;/li>
 &lt;li>&lt;a href="#part-1">Part 1&lt;/a>
 &lt;ul>
 &lt;li>&lt;a href="#version-1-entirely-over-complicated">Version 1: Entirely over complicated&amp;hellip;&lt;/a>&lt;/li>
 &lt;li>&lt;a href="#version-2-floodfill">Version 2: Floodfill&lt;/a>&lt;/li>
 &lt;li>&lt;a href="#version-3-directly-scan-along-the-path">Version 3: Directly scan along the path&lt;/a>&lt;/li>
 &lt;li>&lt;a href="#optimization-1-calculate-distances-once-dijkstras-algorithm">Optimization 1: Calculate distances once (Dijkstra&amp;rsquo;s algorithm)&lt;/a>&lt;/li>
 &lt;li>&lt;a href="#optimization-2-store-distances-in-a-grid">Optimization 2: Store distances in a &lt;code>Grid&lt;/code>&lt;/a>&lt;/li>
 &lt;li>&lt;a href="#pretty-pictures">Pretty pictures&lt;/a>&lt;/li>
 &lt;/ul>
 &lt;/li>
 &lt;li>&lt;a href="#part-2">Part 2&lt;/a>
 &lt;ul>
 &lt;li>&lt;a href="#optimization-3-store-distances-in-a-grid">Optimization 3: Store distances in a &lt;code>Grid&lt;/code>&lt;/a>&lt;/li>
 &lt;li>&lt;a href="#optimization-4-inverting-the-loop">Optimization 4: Inverting the loop&lt;/a>&lt;/li>
 &lt;li>&lt;a href="#prettier-pictures">Prettier pictures&lt;/a>&lt;/li>
 &lt;/ul>
 &lt;/li>
 &lt;li>&lt;a href="#benchmarks">Benchmarks&lt;/a>&lt;/li>
 &lt;/ul>
&lt;/nav>

&lt;h2 id="part-1">Part 1&lt;/h2>
&lt;blockquote>
&lt;p>Given a maze with exactly one path, find how many single walls you can walk through (remove) that shorten the best path by at least 100 units.&lt;/p>&lt;/blockquote></description></item></channel></rss>