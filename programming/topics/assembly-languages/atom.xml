<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Assembly Languages on jverkamp.com</title><link>https://blog.jverkamp.com/programming/topics/assembly-languages/</link><description>Recent content in Assembly Languages on jverkamp.com</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Mon, 21 Jul 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://blog.jverkamp.com/programming/topics/assembly-languages/atom.xml" rel="self" type="application/rss+xml"/><item><title>Building a virtual CPU from NAND gates up</title><link>https://blog.jverkamp.com/2025/07/21/building-a-virtual-cpu-from-nand-gates-up/</link><pubDate>Mon, 21 Jul 2025 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2025/07/21/building-a-virtual-cpu-from-nand-gates-up/</guid><description>&lt;p>Over the past couple of weeks, I&amp;rsquo;ve spent entirely longer than I probably should have falling down the rabbit hole that is the game &lt;a href="https://store.steampowered.com/app/1444480/Turing_Complete/" target="_blank" rel="noopener">Turing Complete&lt;/a>.&lt;/p>
&lt;p>In a nutshell, you start with basically nothing, build up simple logic gates, create memory cells and 1-bit addition, build that into 8-bit math and logic, read instructions RAM, implement loops, and function calls (in hardware!), and eventually use your very own custom built CPU to solve a few programming challenges.&lt;/p></description></item></channel></rss>