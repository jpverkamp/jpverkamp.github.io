<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Regular Expressions on jverkamp.com</title><link>https://blog.jverkamp.com/programming/topics/regular-expressions/</link><description>Recent content in Regular Expressions on jverkamp.com</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://blog.jverkamp.com/programming/topics/regular-expressions/atom.xml" rel="self" type="application/rss+xml"/><item><title>AoC 2017 Day 4: Password Validator</title><link>https://blog.jverkamp.com/2017/12/04/aoc-2017-day-4-password-validator/</link><pubDate>Mon, 04 Dec 2017 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2017/12/04/aoc-2017-day-4-password-validator/</guid><description>&lt;h3 id="source-high-entropy-passphraseshttpadventofcodecom2017day4">Source: &lt;a href="http://adventofcode.com/2017/day/4">High-Entropy Passphrases&lt;/a>&lt;/h3>
&lt;blockquote>
&lt;p>&lt;strong>Part 1:&lt;/strong> Given a list of &lt;a href="https://en.wikipedia.org/wiki/passphrases">passphrases&lt;/a>, count how many contain no duplicate words.&lt;/p>
&lt;/blockquote></description></item><item><title>AoC 2016 Day 7: IPv7 Support Counter</title><link>https://blog.jverkamp.com/2016/12/07/aoc-2016-day-7-ipv7-support-counter/</link><pubDate>Wed, 07 Dec 2016 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2016/12/07/aoc-2016-day-7-ipv7-support-counter/</guid><description>&lt;h3 id="source-internet-protocol-version-7httpadventofcodecom2016day7">Source: &lt;a href="http://adventofcode.com/2016/day/7">Internet Protocol Version 7&lt;/a>&lt;/h3>
&lt;blockquote>
&lt;p>&lt;strong>Part 1:&lt;/strong> The input is a list of strings, potentially containing sequences in square brackets. Find all strings that have an ABBA sequence (two characters followed by the same two in reverse order) outside of any square brackets, but no ABBA sequences in square brackets.&lt;/p>
&lt;/blockquote></description></item><item><title>AoC 2016 Day 4: Room Validator</title><link>https://blog.jverkamp.com/2016/12/04/aoc-2016-day-4-room-validator/</link><pubDate>Sun, 04 Dec 2016 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2016/12/04/aoc-2016-day-4-room-validator/</guid><description>&lt;h3 id="source-security-through-obscurityhttpadventofcodecom2016day41">Source: &lt;a href="http://adventofcode.com/2016/day/4">Security Through Obscurity&lt;/a>&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>&lt;/h3>
&lt;blockquote>
&lt;p>&lt;strong>Part 1:&lt;/strong> A room is described as a name, a sector ID, and a checksum as follows:&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;pre tabindex="0">&lt;code>&lt;/code>&lt;/pre>&lt;/blockquote>
&lt;p>aaaaa-bbb-z-y-x-123[abxyz]&lt;/p>
&lt;p>name: aaaaa-bbb-z-y-x
sector ID: 123
checksum: abxyz&lt;/p></description></item><item><title>Number words</title><link>https://blog.jverkamp.com/2014/08/13/number-words/</link><pubDate>Wed, 13 Aug 2014 14:00:55 +0000</pubDate><guid>https://blog.jverkamp.com/2014/08/13/number-words/</guid><description>&lt;p>Today&amp;rsquo;s five minute post brought to you via &lt;a href="http://programmingpraxis.com/2014/07/25/number-words/">Programming Praxis&lt;/a> / &lt;a href="http://www.careercup.com/question?id=5120347909128192">Career Cup&lt;/a>:&lt;/p>
&lt;blockquote>
&lt;p>Given a positive integer, return all the ways that the integer can be represented by letters using the mapping 1 -&amp;gt; A, 2 -&amp;gt; B, …, 26 -&amp;gt; Z. For instance, the number 1234 can be represented by the words ABCD, AWD and LCD.&lt;/p>
&lt;/blockquote></description></item><item><title>Decoding escaped Unicode strings</title><link>https://blog.jverkamp.com/2013/01/17/decoding-escaped-unicode-strings/</link><pubDate>Thu, 17 Jan 2013 14:00:56 +0000</pubDate><guid>https://blog.jverkamp.com/2013/01/17/decoding-escaped-unicode-strings/</guid><description>&lt;p>In one of my current research projects involving large amounts of &lt;a href="https://twitter.com/" title="Twitter">Twitter&lt;/a> data from a variety of countries, I came across an interesting problem. The Twitter stream is encoded as a series of &lt;a href="https://en.wikipedia.org/wiki/JSON">JSON&lt;/a> objects&amp;ndash;each of which has been written out using &lt;a href="https://en.wikipedia.org/wiki/ASCII">ASCII&lt;/a> characters. But not all of the Tweets (or even a majority in this case) can be represented with only ASCII. So what happens?&lt;/p>
&lt;p>Well, it turns out that they encode the data as JSON strings with &lt;a href="https://en.wikipedia.org/wiki/Unicode">Unicode&lt;/a> &lt;a href="https://en.wikipedia.org/wiki/escape%20characters">escape characters&lt;/a>. So if we had the Russian hashtag #победазанами (victory is ours), that would be encoded as such:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#e6db74">&amp;#34;#&lt;/span>&lt;span style="color:#ae81ff">\u043f\u043e\u0431\u0435\u0434\u0430\u0437\u0430\u043d\u0430\u043c\u0438&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div></description></item></channel></rss>