<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Hashes on jverkamp.com</title>
    <link>https://blog.jverkamp.com/programming/topics/hashes/</link>
    <description>Recent content in Hashes on jverkamp.com</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language><atom:link href="https://blog.jverkamp.com/programming/topics/hashes/atom.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>AoC 2017 Day 14: Knot Hash Gridinator</title>
      <link>https://blog.jverkamp.com/2017/12/14/aoc-2017-day-14-knot-hash-gridinator/</link>
      <pubDate>Thu, 14 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2017/12/14/aoc-2017-day-14-knot-hash-gridinator/</guid>
      <description>&lt;h3 id=&#34;source-disk-defragmentationhttpadventofcodecom2017day14&#34;&gt;Source: &lt;a href=&#34;http://adventofcode.com/2017/day/14&#34;&gt;Disk Defragmentation&lt;/a&gt;&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Part 1:&lt;/strong&gt; Create a 128x128 grid. Generate each row by taking the &lt;a href=&#34;https://blog.jverkamp.com/2017/12/10/aoc-2017-day-10-knot-cool/&#34;&gt;knot hash&lt;/a&gt; of &lt;code&gt;salt-{index}&lt;/code&gt;. The bits of the hash represent if a tile in the grid is &lt;code&gt;free&lt;/code&gt; (&lt;code&gt;0&lt;/code&gt;) or &lt;code&gt;used&lt;/code&gt; (&lt;code&gt;1&lt;/code&gt;).&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Given your salt as input, how many squares are &lt;code&gt;used&lt;/code&gt;?&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>Deterministic Shuffling Using Hashes</title>
      <link>https://blog.jverkamp.com/2017/12/11/deterministic-shuffling-using-hashes/</link>
      <pubDate>Mon, 11 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2017/12/11/deterministic-shuffling-using-hashes/</guid>
      <description>&lt;p&gt;Whenever I create my &lt;a href=&#34;https://blog.jverkamp.com/2017/01/01/2017-reading-list/&#34;&gt;yearly reading list&lt;/a&gt;, I need a way to order the books. Sure, I could just shuffle them normally, but that leads me to the temptation of cheating and re-shuffling them so that the books I want to read most are first. What I really need is a shuffle that will shuffle the same way every time.&lt;/p&gt;
&lt;p&gt;Enter: hashsort&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>AoC 2017 Day 10: Knot Cool</title>
      <link>https://blog.jverkamp.com/2017/12/10/aoc-2017-day-10-knot-cool/</link>
      <pubDate>Sun, 10 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2017/12/10/aoc-2017-day-10-knot-cool/</guid>
      <description>&lt;h3 id=&#34;source-knot-hashhttpadventofcodecom2017day10&#34;&gt;Source: &lt;a href=&#34;http://adventofcode.com/2017/day/10&#34;&gt;Knot Hash&lt;/a&gt;&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Part 1:&lt;/strong&gt; Starting with a list of the numbers from &lt;code&gt;1&lt;/code&gt; to &lt;code&gt;n&lt;/code&gt; and a list of &lt;code&gt;lengths&lt;/code&gt; (as input):&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;Initialize &lt;code&gt;current_position&lt;/code&gt; and &lt;code&gt;skip_size&lt;/code&gt; to &lt;code&gt;0&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;For each &lt;code&gt;length&lt;/code&gt; element in the &lt;code&gt;lengths&lt;/code&gt; list:&lt;/li&gt;
&lt;li&gt;Reverse the first &lt;code&gt;length&lt;/code&gt; elements of the list (starting at &lt;code&gt;current_position&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Move forward by &lt;code&gt;length&lt;/code&gt; plus &lt;code&gt;skip_size&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Increment &lt;code&gt;skip_size&lt;/code&gt; by 1&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;After applying the above algorithm, what is the product of the first two elements in the list (from the original first position, not the &lt;code&gt;current_position&lt;/code&gt;)?&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>AoC 2016 Day 17: Md5 Maze</title>
      <link>https://blog.jverkamp.com/2016/12/17/aoc-2016-day-17-md5-maze/</link>
      <pubDate>Sat, 17 Dec 2016 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2016/12/17/aoc-2016-day-17-md5-maze/</guid>
      <description>&lt;h3 id=&#34;source-two-steps-forwardhttpadventofcodecom2016day17&#34;&gt;Source: &lt;a href=&#34;http://adventofcode.com/2016/day/17&#34;&gt;Two Steps Forward&lt;/a&gt;&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Part 1:&lt;/strong&gt; Create a 4x4 grid of rooms with doors &lt;code&gt;U&lt;/code&gt;p, &lt;code&gt;D&lt;/code&gt;own, &lt;code&gt;L&lt;/code&gt;eft, and &lt;code&gt;R&lt;/code&gt;ight from each location. To determine if a door is currently open:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Calculate &lt;code&gt;MD5(salt + sequence)&lt;/code&gt; where sequence is a string containing any combination of &lt;code&gt;UDLR&lt;/code&gt; depending on how you got to this room&lt;/li&gt;
&lt;li&gt;The first four hex values represent the doors &lt;code&gt;U&lt;/code&gt;p, &lt;code&gt;D&lt;/code&gt;own, &lt;code&gt;L&lt;/code&gt;eft, and &lt;code&gt;R&lt;/code&gt;ight respectively: &lt;code&gt;bcdef&lt;/code&gt; means open; anything else is closed&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Find the shortest path from &lt;code&gt;(0, 0)&lt;/code&gt; to &lt;code&gt;(3, 3)&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>AoC 2016 Day 14: Bad One Time Pads</title>
      <link>https://blog.jverkamp.com/2016/12/14/aoc-2016-day-14-bad-one-time-pads/</link>
      <pubDate>Wed, 14 Dec 2016 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2016/12/14/aoc-2016-day-14-bad-one-time-pads/</guid>
      <description>&lt;h3 id=&#34;source-one-time-padhttpadventofcodecom2016day14&#34;&gt;Source: &lt;a href=&#34;http://adventofcode.com/2016/day/14&#34;&gt;One-Time Pad&lt;/a&gt;&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Part 1:&lt;/strong&gt; Calculate a series of MD5 hashes (the same as &lt;a href=&#34;https://blog.jverkamp.com/2016/12/05/aoc-2016-day-5-password-cracker/&#34;&gt;Day 5&lt;/a&gt;). A hash is considered valid if it contains a triple (three characters in a row) and somewhere in the next 1000 hashes there is a quintuple of that same character.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;What index produces the 64th key?&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>AoC 2016 Day 5: Password Cracker</title>
      <link>https://blog.jverkamp.com/2016/12/05/aoc-2016-day-5-password-cracker/</link>
      <pubDate>Mon, 05 Dec 2016 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2016/12/05/aoc-2016-day-5-password-cracker/</guid>
      <description>&lt;h3 id=&#34;source-how-about-a-nice-game-of-chesshttpadventofcodecom2016day5&#34;&gt;Source: &lt;a href=&#34;http://adventofcode.com/2016/day/5&#34;&gt;How About a Nice Game of Chess?&lt;/a&gt;&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Part 1:&lt;/strong&gt; Generate a series of hashes: MD5(salt + index). For each hash starting with five zeros, write down the sixth character.&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>Exploring parallelism in Racket with SHA-512 mining</title>
      <link>https://blog.jverkamp.com/2014/02/16/exploring-parallelism-in-racket-with-sha-512-mining/</link>
      <pubDate>Sun, 16 Feb 2014 14:00:30 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2014/02/16/exploring-parallelism-in-racket-with-sha-512-mining/</guid>
      <description>&lt;p&gt;While I&amp;rsquo;ve been getting a fair few programming exercises from Reddit&amp;rsquo;s &lt;a href=&#34;http://www.reddit.com/r/dailyprogrammer&#34;&gt;/r/dailyprogrammer&lt;/a&gt;, more recently I&amp;rsquo;ve started following a few other sub-Reddits, such as &lt;a href=&#34;http://www.reddit.com/r/programming&#34;&gt;/r/programming&lt;/a&gt; and &lt;a href=&#34;http://www.reddit.com/r/netsec&#34;&gt;/r/netsec&lt;/a&gt;. While browsing the former, I came across this intriguing gem of a problem:Â &lt;a tabindex=&#34;1&#34; href=&#34;http://www.h11e.com/&#34;&gt;HashChallenge: can you find the lowest value SHA-512 hash?&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
