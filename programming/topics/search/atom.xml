<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Search on jverkamp.com</title><link>https://blog.jverkamp.com/programming/topics/search/</link><description>Recent content in Search on jverkamp.com</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://blog.jverkamp.com/programming/topics/search/atom.xml" rel="self" type="application/rss+xml"/><item><title>AoC 2024 Day 10: Take-a-Hikinator</title><link>https://blog.jverkamp.com/2024/12/10/aoc-2024-day-10-take-a-hikinator/</link><pubDate>Tue, 10 Dec 2024 00:00:03 +0000</pubDate><guid>https://blog.jverkamp.com/2024/12/10/aoc-2024-day-10-take-a-hikinator/</guid><description>&lt;h2 id="source-day-10-hoof-ithttpsadventofcodecom2024day10">Source: &lt;a href="https://adventofcode.com/2024/day/10" target="_blank" rel="noopener">Day 10: Hoof It&lt;/a>&lt;/h2>
&lt;p>&lt;a href="https://github.com/jpverkamp/advent-of-code/blob/master/2024/src/day10.rs" target="_blank" rel="noopener">Full solution&lt;/a> for today (spoilers!).&lt;/p>
&lt;nav id="TableOfContents">
&lt;ul>
&lt;li>&lt;a href="#source-day-10-hoof-ithttpsadventofcodecom2024day10">Source: &lt;a href="https://adventofcode.com/2024/day/10">Day 10: Hoof It&lt;/a>&lt;/a>&lt;/li>
&lt;li>&lt;a href="#part-1">Part 1&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#optimization-1-using-dynamic-programming">Optimization 1: Using dynamic programming&lt;/a>&lt;/li>
&lt;li>&lt;a href="#optimization-2-smarter-bitmasks">Optimization 2: Smarter bitmasks&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#part-2">Part 2&lt;/a>&lt;/li>
&lt;li>&lt;a href="#benchmarks">Benchmarks&lt;/a>&lt;/li>
&lt;/ul>
&lt;/nav>
&lt;h2 id="part-1">Part 1&lt;/h2>
&lt;blockquote>
&lt;p>Given a heightmap (&lt;code>0&lt;/code> to &lt;code>9&lt;/code>), for each &lt;code>0&lt;/code> count how many &lt;code>9&lt;/code> you can reach on paths that only ever increase height by exactly 1 at a time. Sum these values.&lt;/p>
&lt;/blockquote></description></item><item><title>AoC 2024 Day 7: Mathinator</title><link>https://blog.jverkamp.com/2024/12/07/aoc-2024-day-7-mathinator/</link><pubDate>Sat, 07 Dec 2024 00:00:03 +0000</pubDate><guid>https://blog.jverkamp.com/2024/12/07/aoc-2024-day-7-mathinator/</guid><description>&lt;h2 id="source-day-7-bridge-repairhttpsadventofcodecom2024day7">Source: &lt;a href="https://adventofcode.com/2024/day/7" target="_blank" rel="noopener">Day 7: Bridge Repair&lt;/a>&lt;/h2>
&lt;p>&lt;a href="https://github.com/jpverkamp/advent-of-code/blob/master/2024/src/day7.rs" target="_blank" rel="noopener">Full solution&lt;/a> for today (spoilers!).&lt;/p>
&lt;nav id="TableOfContents">
&lt;ul>
&lt;li>&lt;a href="#source-day-7-bridge-repairhttpsadventofcodecom2024day7">Source: &lt;a href="https://adventofcode.com/2024/day/7">Day 7: Bridge Repair&lt;/a>&lt;/a>&lt;/li>
&lt;li>&lt;a href="#part-1">Part 1&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#optimization-attempt-1-queue">Optimization (attempt) 1: Queue&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#part-2">Part 2&lt;/a>&lt;/li>
&lt;li>&lt;a href="#a-cleaner-way-of-looking-at-it-opset">A &amp;lsquo;cleaner&amp;rsquo; way of looking at it: &lt;code>OpSet&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="#benchmarks">Benchmarks&lt;/a>&lt;/li>
&lt;li>&lt;a href="#future-work">Future work&lt;/a>&lt;/li>
&lt;/ul>
&lt;/nav>
&lt;h2 id="part-1">Part 1&lt;/h2>
&lt;blockquote>
&lt;p>Given a result and a list of numbers, determine if any combination of addition (&lt;code>+&lt;/code>) and/or multiplication (&lt;code>*&lt;/code>) using all the given numbers in order can return the result. Ignore order of operations.&lt;/p>
&lt;/blockquote></description></item><item><title>Infinite Craft Bot</title><link>https://blog.jverkamp.com/2024/03/14/infinite-craft-bot/</link><pubDate>Thu, 14 Mar 2024 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2024/03/14/infinite-craft-bot/</guid><description>&lt;p>You&amp;rsquo;ve probably seen &lt;a href="https://neil.fun" target="_blank" rel="noopener">Neil.fun&lt;/a>&amp;rsquo;s &lt;a href="https://neal.fun/infinite-craft/" target="_blank" rel="noopener">Infinite Craft&lt;/a> game somewhere on the internet. If not, in a nutshell:&lt;/p>
&lt;ul>
&lt;li>You start with 4 blocks: &lt;code>Earth&lt;/code>, &lt;code>Fire&lt;/code>, &lt;code>Water&lt;/code>, and &lt;code>Wind&lt;/code>.&lt;/li>
&lt;li>You can combine any two blocks, for example:
&lt;ul>
&lt;li>&lt;code>Earth + Water = Plant&lt;/code>&lt;/li>
&lt;li>&lt;code>Plant + Fire = Smoke&lt;/code>&lt;/li>
&lt;li>&lt;code>Smoke + Smoke = Cloud&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>That&amp;rsquo;s&amp;hellip; pretty much it, from a gameplay perspective. There&amp;rsquo;s not really any goal, other than what you set yourself (try to make Cthulhu!). Although if you manage to find something no one has ever made before, you get a neat little note for it!&lt;/p>
&lt;p>So wait, what do I mean by &amp;lsquo;something no one has ever seen before&amp;rsquo;?&lt;/p>
&lt;p>Well, if two elements have ever been combined by anyone before, you get a cached response. Barring resets of the game (no idea if / how often this has happened, but I assume it has), if &lt;code>A + B = C&lt;/code> for you, &lt;code>A + B = C&lt;/code> for everyone.&lt;/p>
&lt;p>And here&amp;rsquo;s the fun part: if you find a combination no one has ever found before: &lt;code>Neil.fun&lt;/code> will send the combination out to an LLM to generate the new answer. The specific prompt isn&amp;rsquo;t public (so far as I know), but essentially what that means is that you have a basically infinite crafting tree&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>!&lt;/p>
&lt;p>So of course seeing something like this I want to automate it. ðŸ˜„&lt;/p>
&lt;hr></description></item></channel></rss>