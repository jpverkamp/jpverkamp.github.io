<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Fractals on jverkamp.com</title><link>https://blog.jverkamp.com/programming/topics/fractals/</link><description>Recent content in Fractals on jverkamp.com</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://blog.jverkamp.com/programming/topics/fractals/atom.xml" rel="self" type="application/rss+xml"/><item><title>AoC 2017 Day 21: Fractal Expander</title><link>https://blog.jverkamp.com/2017/12/21/aoc-2017-day-21-fractal-expander/</link><pubDate>Thu, 21 Dec 2017 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2017/12/21/aoc-2017-day-21-fractal-expander/</guid><description>&lt;h3 id="source-fractal-arthttpadventofcodecom2017day21">Source: &lt;a href="http://adventofcode.com/2017/day/21" target="_blank" rel="noopener">Fractal Art&lt;/a>&lt;/h3>
&lt;blockquote>
&lt;p>&lt;strong>Part 1:&lt;/strong> Start with an input image made of &lt;code>.&lt;/code> and &lt;code>#&lt;/code> pixels. For &lt;code>n&lt;/code> iterations, break the image into blocks:&lt;/p>
&lt;ul>
&lt;li>If the current size is even, break the image into 2x2 chunks and replace each with a 3x3 chunk&lt;/li>
&lt;li>If the current size is odd, break the image into 3x3 chunks and replace each with a 4x4 chunk&lt;/li>
&lt;/ul>
&lt;p>The replacement rules will be specified in the following format (example is a 3x3 -&amp;gt; 4x4 rule):&lt;/p>
&lt;pre tabindex="0">&lt;code>.#./..#/### =&amp;gt; #..#/..../..../#..#
&lt;/code>&lt;/pre>&lt;p>In that example, replace this:&lt;/p>
&lt;pre tabindex="0">&lt;code>.#.
..#
###
&lt;/code>&lt;/pre>&lt;p>With this:&lt;/p>
&lt;pre tabindex="0">&lt;code>#..#
....
....
#..#
&lt;/code>&lt;/pre>&lt;p>Any rotation or reflection of a chunk can be used to match the input of a replacement rule.&lt;/p>
&lt;p>After &lt;code>n = 18&lt;/code> iterations, how many &lt;code>#&lt;/code> pixels are there?&lt;/p>
&lt;/blockquote></description></item><item><title>Mandelbrot</title><link>https://blog.jverkamp.com/2015/09/14/mandelbrot/</link><pubDate>Mon, 14 Sep 2015 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2015/09/14/mandelbrot/</guid><description>&lt;p>Perhaps the best known fractal of all: the &lt;a href="https://en.wikipedia.org/wiki/Mandelbrot%20set">Mandelbrot set&lt;/a>.&lt;/p>
&lt;figure>&lt;img src="https://blog.jverkamp.com/embeds/2015/mandelbrot_default_400x300_hot-and-cold.png"/>
&lt;/figure>
&lt;p>Since I was already working on Python code that would render an image given a function (for a future post), I figured that I might as well render fractals with it.&lt;/p></description></item><item><title>Clockception</title><link>https://blog.jverkamp.com/2014/11/04/clockception/</link><pubDate>Tue, 04 Nov 2014 09:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2014/11/04/clockception/</guid><description>&lt;p>Let&amp;rsquo;s talk about clocks.&lt;/p>
&lt;p>We can draw traditional analog clocks&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>:&lt;/p>
&lt;figure>&lt;img src="https://blog.jverkamp.com/embeds/2014/analog.png"/>
&lt;/figure>
&lt;p>We can draw nice digital clocks:&lt;/p>
&lt;pre tabindex="0">&lt;code>┌─┐ │ │ ─┐ ┌─┐
│ │└─┤ │ │ │
└─┘ │ │ ─┴─└─┘
&lt;/code>&lt;/pre>&lt;p>Or we can go downright mad and make clocks out of clocks:&lt;/p>
&lt;figure>&lt;img src="https://blog.jverkamp.com/embeds/2014/clockception.png"/>
&lt;/figure>
&lt;p>Even animated!&lt;/p>
&lt;figure>&lt;img src="https://blog.jverkamp.com/embeds/2014/animated.gif"/>
&lt;/figure></description></item><item><title>Regular Expression Fractals</title><link>https://blog.jverkamp.com/2014/10/05/regular-expression-fractals/</link><pubDate>Sun, 05 Oct 2014 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2014/10/05/regular-expression-fractals/</guid><description>&lt;p>Oops, turns out I haven&amp;rsquo;t had a post in a good long while. Before it gets even longer, I figure that I should take one off my backlog and just write it up, even if it is a little on the shorter side.&lt;/p>
&lt;p>Today&amp;rsquo;s post was inspired by this post on /r/dailyprogrammer a month ago today:
&lt;a href="https://www.reddit.com/r/dailyprogrammer/comments/2fkh8u/9052014_challenge_178_hard_regular_expression/">Challenge #178 [Hard] Regular Expression Fractals&lt;/a>. The basic idea is that you are going to take a rectangular region and divide it into four quadrants, again and again, recording the path as you go (images from that post):&lt;/p>
&lt;p>&lt;figure>&lt;img src="https://blog.jverkamp.com/embeds/2014/step-1.png"/>
&lt;/figure>
&lt;figure>&lt;img src="https://blog.jverkamp.com/embeds/2014/step-2.png"/>
&lt;/figure>
&lt;figure>&lt;img src="https://blog.jverkamp.com/embeds/2014/step-3.png"/>
&lt;/figure>
&lt;/p></description></item><item><title>Invader Fractals</title><link>https://blog.jverkamp.com/2014/09/17/invader-fractals/</link><pubDate>Wed, 17 Sep 2014 09:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2014/09/17/invader-fractals/</guid><description>&lt;p>First we had &lt;a href="https://blog.jverkamp.com/2014/09/14/procedural-invaders/">Procedural Invaders&lt;/a>. Then we used them fill up space with &lt;a href="https://blog.jverkamp.com/2014/09/16/fractal-invaders/">Fractal Invaders&lt;/a>. But we&amp;rsquo;re not &lt;em>quite&lt;/em> done yet! This time, let&amp;rsquo;s mix things up a bit and make Invader Fractals.&lt;/p>
&lt;figure>&lt;img src="https://blog.jverkamp.com/embeds/2014/invader-fractal-3.png"/>
&lt;/figure></description></item><item><title>Fractal Invaders</title><link>https://blog.jverkamp.com/2014/09/16/fractal-invaders/</link><pubDate>Tue, 16 Sep 2014 09:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2014/09/16/fractal-invaders/</guid><description>&lt;p>Today&amp;rsquo;s post is a follow up to Sunday&amp;rsquo;s post &lt;a href="https://blog.jverkamp.com/2014/09/14/procedural-invaders/">Procedural Invaders&lt;/a>. This time around, we&amp;rsquo;re going to work through two different space filling algorithms in order to eventually generate something like this:&lt;/p>
&lt;figure>&lt;img src="https://blog.jverkamp.com/embeds/2014/fractal-invaders-100x100.png"/>
&lt;/figure></description></item><item><title>Fun with turtle graphics and stars</title><link>https://blog.jverkamp.com/2012/09/10/fun-with-turtle-graphics-and-stars/</link><pubDate>Mon, 10 Sep 2012 14:00:15 +0000</pubDate><guid>https://blog.jverkamp.com/2012/09/10/fun-with-turtle-graphics-and-stars/</guid><description>&lt;p>After &lt;a href="https://blog.jverkamp.com/2012/09/08/the-first-two-problems/">Saturday&amp;rsquo;s post&lt;/a> on using &lt;a href="https://blog.jverkamp.com/2012/04/13/wombat-ide-turtle-graphics/">turtle graphics&lt;/a> to draw letters, I wanted to get back into drawing some &lt;a href="https://en.wikipedia.org/wiki/fractals">fractals&lt;/a>. Fractals are cool.&lt;/p></description></item></channel></rss>