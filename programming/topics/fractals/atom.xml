<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Fractals on jverkamp.com</title>
    <link>https://blog.jverkamp.com/programming/topics/fractals/</link>
    <description>Recent content in Fractals on jverkamp.com</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 21 Dec 2017 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://blog.jverkamp.com/programming/topics/fractals/atom.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>AoC 2017 Day 21: Fractal Expander</title>
      <link>https://blog.jverkamp.com/2017/12/21/aoc-2017-day-21-fractal-expander/</link>
      <pubDate>Thu, 21 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2017/12/21/aoc-2017-day-21-fractal-expander/</guid>
      <description>&lt;h3 id=&#34;source-fractal-art-http-adventofcode-com-2017-day-21&#34;&gt;Source: &lt;a href=&#34;http://adventofcode.com/2017/day/21&#34;&gt;Fractal Art&lt;/a&gt;&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Part 1:&lt;/strong&gt; Start with an input image made of &lt;code&gt;.&lt;/code&gt; and &lt;code&gt;#&lt;/code&gt; pixels. For &lt;code&gt;n&lt;/code&gt; iterations, break the image into blocks:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;If the current size is even, break the image into 2x2 chunks and replace each with a 3x3 chunk&lt;/li&gt;
&lt;li&gt;If the current size is odd, break the image into 3x3 chunks and replace each with a 4x4 chunk&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The replacement rules will be specified in the following format (example is a 3x3 -&amp;gt; 4x4 rule):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;.#./..#/### =&amp;gt; #..#/..../..../#..#
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In that example, replace this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;.#.
..#
###
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;With this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#..#
....
....
#..#
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Any rotation or reflection of a chunk can be used to match the input of a replacement rule.&lt;/p&gt;

&lt;p&gt;After &lt;code&gt;n = 18&lt;/code&gt; iterations, how many &lt;code&gt;#&lt;/code&gt; pixels are there?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Mandelbrot</title>
      <link>https://blog.jverkamp.com/2015/09/14/mandelbrot/</link>
      <pubDate>Mon, 14 Sep 2015 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2015/09/14/mandelbrot/</guid>
      <description>&lt;p&gt;Perhaps the best known fractal of all: the &lt;a href=&#34;https://en.wikipedia.org/wiki/Mandelbrot%20set&#34;&gt;Mandelbrot set&lt;/a&gt;.&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://blog.jverkamp.com/embeds/2015/mandelbrot_default_400x300_hot-and-cold.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;Since I was already working on Python code that would render an image given a function (for a future post), I figured that I might as well render fractals with it.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Clockception</title>
      <link>https://blog.jverkamp.com/2014/11/04/clockception/</link>
      <pubDate>Tue, 04 Nov 2014 09:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2014/11/04/clockception/</guid>
      <description>&lt;p&gt;Let&amp;rsquo;s talk about clocks.&lt;/p&gt;

&lt;p&gt;We can draw traditional analog clocks&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;:&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://blog.jverkamp.com/embeds/2014/analog.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;We can draw nice digital clocks:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;┌─┐  │ │ ─┐ ┌─┐
│ │└─┤    │ │ │
└─┘  │ │ ─┴─└─┘
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Or we can go downright mad and make clocks out of clocks:&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://blog.jverkamp.com/embeds/2014/clockception.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;Even animated!&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://blog.jverkamp.com/embeds/2014/animated.gif&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Regular Expression Fractals</title>
      <link>https://blog.jverkamp.com/2014/10/05/regular-expression-fractals/</link>
      <pubDate>Sun, 05 Oct 2014 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2014/10/05/regular-expression-fractals/</guid>
      <description>&lt;p&gt;Oops, turns out I haven&amp;rsquo;t had a post in a good long while. Before it gets even longer, I figure that I should take one off my backlog and just write it up, even if it is a little on the shorter side.&lt;/p&gt;

&lt;p&gt;Today&amp;rsquo;s post was inspired by this post on /r/dailyprogrammer a month ago today:
&lt;a href=&#34;https://www.reddit.com/r/dailyprogrammer/comments/2fkh8u/9052014_challenge_178_hard_regular_expression/&#34;&gt;Challenge #178 [Hard] Regular Expression Fractals&lt;/a&gt;. The basic idea is that you are going to take a rectangular region and divide it into four quadrants, again and again, recording the path as you go (images from that post):&lt;/p&gt;

&lt;p&gt;
&lt;figure &gt;
    
        &lt;img src=&#34;https://blog.jverkamp.com/embeds/2014/step-1.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://blog.jverkamp.com/embeds/2014/step-2.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://blog.jverkamp.com/embeds/2014/step-3.png&#34; /&gt;
    
    
&lt;/figure&gt;
&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Invader Fractals</title>
      <link>https://blog.jverkamp.com/2014/09/17/invader-fractals/</link>
      <pubDate>Wed, 17 Sep 2014 09:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2014/09/17/invader-fractals/</guid>
      <description>&lt;p&gt;First we had &lt;a href=&#34;https://blog.jverkamp.com/2014/09/14/procedural-invaders/&#34;&gt;Procedural Invaders&lt;/a&gt;. Then we used them fill up space with &lt;a href=&#34;https://blog.jverkamp.com/2014/09/16/fractal-invaders/&#34;&gt;Fractal Invaders&lt;/a&gt;. But we&amp;rsquo;re not &lt;em&gt;quite&lt;/em&gt; done yet! This time, let&amp;rsquo;s mix things up a bit and make Invader Fractals.&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://blog.jverkamp.com/embeds/2014/invader-fractal-3.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Fractal Invaders</title>
      <link>https://blog.jverkamp.com/2014/09/16/fractal-invaders/</link>
      <pubDate>Tue, 16 Sep 2014 09:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2014/09/16/fractal-invaders/</guid>
      <description>&lt;p&gt;Today&amp;rsquo;s post is a follow up to Sunday&amp;rsquo;s post &lt;a href=&#34;https://blog.jverkamp.com/2014/09/14/procedural-invaders/&#34;&gt;Procedural Invaders&lt;/a&gt;. This time around, we&amp;rsquo;re going to work through two different space filling algorithms in order to eventually generate something like this:&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://blog.jverkamp.com/embeds/2014/fractal-invaders-100x100.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Fun with turtle graphics and stars</title>
      <link>https://blog.jverkamp.com/2012/09/10/fun-with-turtle-graphics-and-stars/</link>
      <pubDate>Mon, 10 Sep 2012 14:00:15 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2012/09/10/fun-with-turtle-graphics-and-stars/</guid>
      <description>&lt;p&gt;After &lt;a href=&#34;https://blog.jverkamp.com/2012/09/08/the-first-two-problems/&#34;&gt;Saturday&amp;rsquo;s post&lt;/a&gt; on using &lt;a href=&#34;https://blog.jverkamp.com/2012/04/13/wombat-ide---turtle-graphics/&#34;&gt;turtle graphics&lt;/a&gt; to draw letters, I wanted to get back into drawing some &lt;a href=&#34;https://en.wikipedia.org/wiki/fractals&#34;&gt;fractals&lt;/a&gt;. Fractals are cool.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>