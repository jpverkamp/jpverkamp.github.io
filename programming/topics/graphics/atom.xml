<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Graphics on jverkamp.com</title><link>https://blog.jverkamp.com/programming/topics/graphics/</link><description>Recent content in Graphics on jverkamp.com</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://blog.jverkamp.com/programming/topics/graphics/atom.xml" rel="self" type="application/rss+xml"/><item><title>AoC 2021 Day 9: Local Minimum Deminifier</title><link>https://blog.jverkamp.com/2021/12/09/aoc-2021-day-9-local-minimum-deminifier/</link><pubDate>Thu, 09 Dec 2021 00:00:15 +0000</pubDate><guid>https://blog.jverkamp.com/2021/12/09/aoc-2021-day-9-local-minimum-deminifier/</guid><description>&lt;h3 id="source-smoke-basinhttpsadventofcodecom2021day9">Source: &lt;a href="https://adventofcode.com/2021/day/9">Smoke Basin&lt;/a>&lt;/h3>
&lt;h4 id="part-1-given-a-heightmap-find-all-local-minimums-return-the-sum-of-minimum-height--1-for-each-local-minimum">&lt;strong>Part 1:&lt;/strong> Given a heightmap, find all local minimums. Return the sum of (minimum height + 1) for each local minimum.&lt;/h4></description></item><item><title>Splitting Images</title><link>https://blog.jverkamp.com/2021/08/10/splitting-images/</link><pubDate>Tue, 10 Aug 2021 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2021/08/10/splitting-images/</guid><description>&lt;p>I recently came across a problem where I had a single image with a transparent background containing multiple images that I wanted to split into their component parts. For example, split this:&lt;/p>
&lt;figure class="border">&lt;img src="https://blog.jverkamp.com/embeds/2021/hi.png"/>
&lt;/figure>
&lt;p>Into these:&lt;/p>
&lt;p>&lt;figure class="border">&lt;img src="https://blog.jverkamp.com/embeds/2021/hi_1.png"/>
&lt;/figure>
&lt;figure class="border">&lt;img src="https://blog.jverkamp.com/embeds/2021/hi_2.png"/>
&lt;/figure>
&lt;figure class="border">&lt;img src="https://blog.jverkamp.com/embeds/2021/hi_3.png"/>
&lt;/figure>
&lt;figure class="border">&lt;img src="https://blog.jverkamp.com/embeds/2021/hi_4.png"/>
&lt;/figure>
&lt;figure class="border">&lt;img src="https://blog.jverkamp.com/embeds/2021/hi_5.png"/>
&lt;/figure>
&lt;/p></description></item><item><title>raco pkg install noise</title><link>https://blog.jverkamp.com/2021/08/05/raco-pkg-install-noise/</link><pubDate>Thu, 05 Aug 2021 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2021/08/05/raco-pkg-install-noise/</guid><description>&lt;p>What feels like a million years and a lifetime ago, I wrote up a &lt;a href="https://blog.jverkamp.com/2013/04/11/perlin-and-simplex-noise-in-racket/">library for perlin and simple noise in Racket&lt;/a>. Inspired by &lt;a href="https://github.com/soegaard/sketching">Jens Axel Søgaard&amp;rsquo;s new Sketching library&lt;/a> (processing in Racket) and a conversation thereabout, I figure it&amp;rsquo;s about time to push noise to the &lt;code>raco&lt;/code> package manager!&lt;/p></description></item><item><title>Mandelbrot</title><link>https://blog.jverkamp.com/2015/09/14/mandelbrot/</link><pubDate>Mon, 14 Sep 2015 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2015/09/14/mandelbrot/</guid><description>&lt;p>Perhaps the best known fractal of all: the &lt;a href="https://en.wikipedia.org/wiki/Mandelbrot%20set">Mandelbrot set&lt;/a>.&lt;/p>
&lt;figure>&lt;img src="https://blog.jverkamp.com/embeds/2015/mandelbrot_default_400x300_hot-and-cold.png"/>
&lt;/figure>
&lt;p>Since I was already working on Python code that would render an image given a function (for a future post), I figured that I might as well render fractals with it.&lt;/p></description></item><item><title>Tupper's self-referential formula</title><link>https://blog.jverkamp.com/2015/05/07/tuppers-self-referential-formula/</link><pubDate>Thu, 07 May 2015 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2015/05/07/tuppers-self-referential-formula/</guid><description>&lt;p>Quick post today. Let&amp;rsquo;s implement &lt;a href="https://en.wikipedia.org/wiki/Tupper%27s%20self-referential%20formula">Tupper&amp;#39;s self-referential formula&lt;/a> in Racket!&lt;/p>
&lt;div class="latex-block">\frac{1}{2} &lt; \left \lfloor mod \left ( \left \lfloor \frac{y}{17} 2^{-17 \lfloor x \rfloor - mod(\lfloor y \rfloor, 2)} \right \rfloor, 2 \right ) \right \rfloor&lt;/div>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-racket" data-lang="racket">(tupper &lt;span style="color:#ae81ff">960939379918958884971672962127852754715004339660129306651505519271702802395266424689642842174350718121267153782770623355993237280874144307891325963941337723487857735749823926629715517173716995165232890538221612403238855866184013235585136048828693337902491454229288667081096184496091705183454067827731551705405381627380967602565625016981482083418783163849115590225610003652351370343874461848378737238198224849863465033159410054974700593138339226497249461751545728366702369745461014655997933798537483143786841806593422227898388722980000748404719&lt;/span>)
&lt;/code>&lt;/pre>&lt;/div>&lt;figure>&lt;img src="https://blog.jverkamp.com/embeds/2015/tupper.png"/>
&lt;/figure>
&lt;p>That&amp;rsquo;s the result of graphing the above function at a point rather far away from the origin. Specifically, where &lt;code>y&lt;/code> is around that crazy big number. Look familiar?&lt;/p></description></item><item><title>gif shrinkage with ImageMagick</title><link>https://blog.jverkamp.com/2015/03/05/gif-shrinkage-with-imagemagick/</link><pubDate>Thu, 05 Mar 2015 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2015/03/05/gif-shrinkage-with-imagemagick/</guid><description>&lt;p>I have a gif collection now. :)&lt;/p>
&lt;figure>&lt;img src="https://blog.jverkamp.com/embeds/2015/dun-dun-dunnnnn.gif"/>
&lt;/figure></description></item><item><title>Let it snow!</title><link>https://blog.jverkamp.com/2015/01/09/let-it-snow/</link><pubDate>Fri, 09 Jan 2015 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2015/01/09/let-it-snow/</guid><description>&lt;p>♫ Oh the weather outside is frightful&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>&amp;hellip; ♫&lt;/p>
&lt;figure>&lt;img src="https://blog.jverkamp.com/embeds/2015/snowflake.gif"/>
&lt;/figure></description></item><item><title>Generating omnichromatic images</title><link>https://blog.jverkamp.com/2015/01/01/generating-omnichromatic-images/</link><pubDate>Thu, 01 Jan 2015 00:10:00 +0000</pubDate><guid>https://blog.jverkamp.com/2015/01/01/generating-omnichromatic-images/</guid><description>&lt;p>Inspired half by a &lt;a href="https://codegolf.stackexchange.com/questions/22144/images-with-all-colors">post on the Code Golf StackExchange&lt;/a> and half by the corresponding website &lt;a href="http://allrgb.com/">allrgb.com&lt;/a>, today&amp;rsquo;s post tasks us with making images like this:&lt;/p>
&lt;figure>&lt;img src="https://blog.jverkamp.com/embeds/2015/grow-minimum_gray-code_400x200.png"/>
&lt;/figure>
&lt;p>So what&amp;rsquo;s so interesting about that picture?&lt;/p></description></item><item><title>Palette Swapping</title><link>https://blog.jverkamp.com/2014/12/23/palette-swapping/</link><pubDate>Tue, 23 Dec 2014 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2014/12/23/palette-swapping/</guid><description>&lt;p>Today&amp;rsquo;s task comes from the &lt;a href="https://codegolf.stackexchange.com/">Code Golf StackExchange&lt;/a>. The idea behind &lt;a href="https://en.wikipedia.org/wiki/code%20golf">code golf&lt;/a> is to write a program with as few characters as possible, often rendering the code nigh on unreadable. Luckily, the same StackExchange also host popularity contests, one of which is the inspiration behind today&amp;rsquo;s post:&lt;/p>
&lt;blockquote>
&lt;p>You are given two true color images, the Source and the Palette. They do not necessarily have the same dimensions but it is guaranteed that their areas are the same, i.e. they have the same number of pixels.
Your task is to create an algorithm that makes the most accurate looking copy of the Source by only using the pixels in the Palette. Each pixel in the Palette must be used exactly once in a unique position in this copy. The copy must have the same dimensions as the Source.
&amp;ndash; &lt;a href="https://codegolf.stackexchange.com/questions/33172/american-gothic-in-the-palette-of-mona-lisa-rearrange-the-pixels">American Gothic in the palette of Mona Lisa: Rearrange the pixels&lt;/a>&lt;/p>
&lt;/blockquote></description></item><item><title>Clockception</title><link>https://blog.jverkamp.com/2014/11/04/clockception/</link><pubDate>Tue, 04 Nov 2014 09:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2014/11/04/clockception/</guid><description>&lt;p>Let&amp;rsquo;s talk about clocks.&lt;/p>
&lt;p>We can draw traditional analog clocks&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>:&lt;/p>
&lt;figure>&lt;img src="https://blog.jverkamp.com/embeds/2014/analog.png"/>
&lt;/figure>
&lt;p>We can draw nice digital clocks:&lt;/p>
&lt;pre tabindex="0">&lt;code>┌─┐ │ │ ─┐ ┌─┐
│ │└─┤ │ │ │
└─┘ │ │ ─┴─└─┘
&lt;/code>&lt;/pre>&lt;p>Or we can go downright mad and make clocks out of clocks:&lt;/p>
&lt;figure>&lt;img src="https://blog.jverkamp.com/embeds/2014/clockception.png"/>
&lt;/figure>
&lt;p>Even animated!&lt;/p>
&lt;figure>&lt;img src="https://blog.jverkamp.com/embeds/2014/animated.gif"/>
&lt;/figure></description></item><item><title>Tile Puzzle</title><link>https://blog.jverkamp.com/2014/10/28/tile-puzzle/</link><pubDate>Tue, 28 Oct 2014 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2014/10/28/tile-puzzle/</guid><description>&lt;p>It&amp;rsquo;s been a while&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>, but I&amp;rsquo;m back. Today&amp;rsquo;s post is inspired by a post from /r/dailyprogrammer almost a month ago now: &lt;a href="https://www.reddit.com/r/dailyprogrammer/comments/2ip1gj/10082014_challenge_183_intermediate_edge_matching/">Challenge #183 [Intermediate] Edge Matching Tile Puzzle&lt;/a>. Basically, we&amp;rsquo;re going to solve puzzles like this:&lt;/p>
&lt;p>&lt;figure>&lt;img src="https://blog.jverkamp.com/embeds/2014/unsolved-3x3.png"/>
&lt;/figure>
&lt;figure>&lt;img src="https://blog.jverkamp.com/embeds/2014/solved-3x3.png"/>
&lt;/figure>
&lt;/p>
&lt;p>If you look carefully, the tiles are the same between the two, although they might be rotated.&lt;/p></description></item><item><title>Regular Expression Fractals</title><link>https://blog.jverkamp.com/2014/10/05/regular-expression-fractals/</link><pubDate>Sun, 05 Oct 2014 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2014/10/05/regular-expression-fractals/</guid><description>&lt;p>Oops, turns out I haven&amp;rsquo;t had a post in a good long while. Before it gets even longer, I figure that I should take one off my backlog and just write it up, even if it is a little on the shorter side.&lt;/p>
&lt;p>Today&amp;rsquo;s post was inspired by this post on /r/dailyprogrammer a month ago today:
&lt;a href="https://www.reddit.com/r/dailyprogrammer/comments/2fkh8u/9052014_challenge_178_hard_regular_expression/">Challenge #178 [Hard] Regular Expression Fractals&lt;/a>. The basic idea is that you are going to take a rectangular region and divide it into four quadrants, again and again, recording the path as you go (images from that post):&lt;/p>
&lt;p>&lt;figure>&lt;img src="https://blog.jverkamp.com/embeds/2014/step-1.png"/>
&lt;/figure>
&lt;figure>&lt;img src="https://blog.jverkamp.com/embeds/2014/step-2.png"/>
&lt;/figure>
&lt;figure>&lt;img src="https://blog.jverkamp.com/embeds/2014/step-3.png"/>
&lt;/figure>
&lt;/p></description></item><item><title>Invader Fractals</title><link>https://blog.jverkamp.com/2014/09/17/invader-fractals/</link><pubDate>Wed, 17 Sep 2014 09:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2014/09/17/invader-fractals/</guid><description>&lt;p>First we had &lt;a href="https://blog.jverkamp.com/2014/09/14/procedural-invaders/">Procedural Invaders&lt;/a>. Then we used them fill up space with &lt;a href="https://blog.jverkamp.com/2014/09/16/fractal-invaders/">Fractal Invaders&lt;/a>. But we&amp;rsquo;re not &lt;em>quite&lt;/em> done yet! This time, let&amp;rsquo;s mix things up a bit and make Invader Fractals.&lt;/p>
&lt;figure>&lt;img src="https://blog.jverkamp.com/embeds/2014/invader-fractal-3.png"/>
&lt;/figure></description></item><item><title>Fractal Invaders</title><link>https://blog.jverkamp.com/2014/09/16/fractal-invaders/</link><pubDate>Tue, 16 Sep 2014 09:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2014/09/16/fractal-invaders/</guid><description>&lt;p>Today&amp;rsquo;s post is a follow up to Sunday&amp;rsquo;s post &lt;a href="https://blog.jverkamp.com/2014/09/14/procedural-invaders/">Procedural Invaders&lt;/a>. This time around, we&amp;rsquo;re going to work through two different space filling algorithms in order to eventually generate something like this:&lt;/p>
&lt;figure>&lt;img src="https://blog.jverkamp.com/embeds/2014/fractal-invaders-100x100.png"/>
&lt;/figure></description></item><item><title>Procedural Invaders</title><link>https://blog.jverkamp.com/2014/09/14/procedural-invaders/</link><pubDate>Sun, 14 Sep 2014 09:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2014/09/14/procedural-invaders/</guid><description>&lt;p>Today&amp;rsquo;s post comes from a long line of &amp;lsquo;inspired by posts&amp;rsquo; all pretty much leading back (so far as I can tell) to this post by j.tarbell: &lt;a href="http://www.complexification.net/gallery/machines/invaderfractal/">invader.procedural&lt;/a> from 2003.&lt;/p>
&lt;p>The basic idea is that we want to generate &amp;lsquo;invaders&amp;rsquo; in the style of &lt;a href="https://en.wikipedia.org/wiki/space%20invaders">space invaders&lt;/a>. Except we don&amp;rsquo;t want 10 or 20, we want tens of thousands. So how do we do it? Well, take a look at this:&lt;/p>
&lt;figure>&lt;img src="https://blog.jverkamp.com/embeds/2014/procedural-invader-big.png"/>
&lt;/figure></description></item><item><title>Braille unicode pixelation</title><link>https://blog.jverkamp.com/2014/05/30/braille-unicode-pixelation/</link><pubDate>Fri, 30 May 2014 14:00:11 +0000</pubDate><guid>https://blog.jverkamp.com/2014/05/30/braille-unicode-pixelation/</guid><description>&lt;p>What would you do if you were on a machine that had no higher level graphics, but you still wanted to display images?&lt;/p></description></item><item><title>Quadtree image compression</title><link>https://blog.jverkamp.com/2014/05/28/quadtree-image-compression/</link><pubDate>Wed, 28 May 2014 14:00:28 +0000</pubDate><guid>https://blog.jverkamp.com/2014/05/28/quadtree-image-compression/</guid><description>&lt;p>About two weeks ago, I came across a post via &lt;a href="http://www.reddit.com/r/programming/">/r/programming&lt;/a>: &lt;a href="http://www.reddit.com/r/programming/comments/25ptrk/quadtree_art/">Quadtree Art&lt;/a>&lt;sup>&lt;a href="https://github.com/fogleman/Quads">(src)&lt;/a>&lt;/sup>. In a sentence, the goal is to recursively divide an image into a quadtree, at each step expanding the current node with the largest internal variance.&lt;/p></description></item><item><title>Brownian trees</title><link>https://blog.jverkamp.com/2014/03/11/brownian-trees/</link><pubDate>Tue, 11 Mar 2014 14:00:06 +0000</pubDate><guid>https://blog.jverkamp.com/2014/03/11/brownian-trees/</guid><description>&lt;p>Pretty pretty picture time&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>:&lt;/p>
&lt;figure>&lt;img src="https://blog.jverkamp.com/embeds/2014/brownian-tree.png"/>
&lt;/figure></description></item><item><title>Twitter puddle</title><link>https://blog.jverkamp.com/2013/11/30/twitter-puddle/</link><pubDate>Sat, 30 Nov 2013 04:55:28 +0000</pubDate><guid>https://blog.jverkamp.com/2013/11/30/twitter-puddle/</guid><description>&lt;p>This one has been sitting in my backlog for a while and its been a while since I&amp;rsquo;ve gotten to write a programming post&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>, but now seems as good time as ever: &lt;a href="http://programmingpraxis.com/2013/11/15/twitter-puddle/">Twitter puzzle&lt;/a>&lt;/p></description></item><item><title>Adventures in optimization, re: Typed Racket</title><link>https://blog.jverkamp.com/2013/04/16/adventures-in-optimization-re-typed-racket/</link><pubDate>Tue, 16 Apr 2013 14:00:47 +0000</pubDate><guid>https://blog.jverkamp.com/2013/04/16/adventures-in-optimization-re-typed-racket/</guid><description>&lt;p>Last Thursday I wrote a &lt;a href="https://blog.jverkamp.com/2013/04/11/perlin-and-simplex-noise-in-racket/">post about generating Perlin/simplex noise&lt;/a> in Racket. Later that day, I &lt;a title="[racket] Perlin and simplex noise - optimizing Racket code" href="http://lists.racket-lang.org/users/archive/2013-April/057245.html">posted to the Racket mailing list&lt;/a> asking how I could make it faster. What resulted was a whole sequence of responses (primarily about Typed Racket) and a bit of a rabbit hole that I&amp;rsquo;m still trying to wrap my head around.&lt;/p></description></item><item><title>Perlin and simplex noise in Racket</title><link>https://blog.jverkamp.com/2013/04/11/perlin-and-simplex-noise-in-racket/</link><pubDate>Thu, 11 Apr 2013 14:00:28 +0000</pubDate><guid>https://blog.jverkamp.com/2013/04/11/perlin-and-simplex-noise-in-racket/</guid><description>&lt;p>Many games need noise. No, not &lt;a href="https://en.wikipedia.org/wiki/Noise">that noise&lt;/a>&amp;ndash;&lt;a href="https://en.wikipedia.org/wiki/Perlin%20noise">this noise&lt;/a>. Or better yet, &lt;a href="https://en.wikipedia.org/wiki/Simplex%20noise">this noise&lt;/a>. More seriously, noise in this context refers to psuedo-randomly generated images that can be used for natural looking terrain generation&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>. Something like this:&lt;/p>
&lt;figure>&lt;img src="https://blog.jverkamp.com/embeds/2013/simplex-colored-256x256-16x.png"/>
&lt;/figure></description></item></channel></rss>