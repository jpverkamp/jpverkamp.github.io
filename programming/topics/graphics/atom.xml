<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Graphics on jverkamp.com</title>
    <link>https://blog.jverkamp.com/programming/topics/graphics/</link>
    <description>Recent content in Graphics on jverkamp.com</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 14 Sep 2015 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://blog.jverkamp.com/programming/topics/graphics/atom.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Mandelbrot</title>
      <link>https://blog.jverkamp.com/2015/09/14/mandelbrot/</link>
      <pubDate>Mon, 14 Sep 2015 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2015/09/14/mandelbrot/</guid>
      <description>&lt;p&gt;Perhaps the best known fractal of all: the &lt;a href=&#34;https://en.wikipedia.org/wiki/Mandelbrot%20set&#34;&gt;Mandelbrot set&lt;/a&gt;.&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&#34;https://blog.jverkamp.com/embeds/2015/mandelbrot_default_400x300_hot-and-cold.png&#34;/&gt; 
&lt;/figure&gt;


&lt;p&gt;Since I was already working on Python code that would render an image given a function (for a future post), I figured that I might as well render fractals with it.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Tupper&#39;s self-referential formula</title>
      <link>https://blog.jverkamp.com/2015/05/07/tuppers-self-referential-formula/</link>
      <pubDate>Thu, 07 May 2015 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2015/05/07/tuppers-self-referential-formula/</guid>
      <description>&lt;p&gt;Quick post today. Let&amp;rsquo;s implement &lt;a href=&#34;https://en.wikipedia.org/wiki/Tupper%27s%20self-referential%20formula&#34;&gt;Tupper&amp;#39;s self-referential formula&lt;/a&gt; in Racket!&lt;/p&gt;

&lt;div class=&#34;latex-block&#34;&gt;
    \frac{1}{2} &lt; \left \lfloor mod \left ( \left \lfloor \frac{y}{17} 2^{-17 \lfloor x \rfloor - mod(\lfloor y \rfloor, 2)} \right \rfloor, 2 \right ) \right \rfloor
&lt;/div&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-racket&#34; data-lang=&#34;racket&#34;&gt;(tupper &lt;span style=&#34;color:#ae81ff&#34;&gt;960939379918958884971672962127852754715004339660129306651505519271702802395266424689642842174350718121267153782770623355993237280874144307891325963941337723487857735749823926629715517173716995165232890538221612403238855866184013235585136048828693337902491454229288667081096184496091705183454067827731551705405381627380967602565625016981482083418783163849115590225610003652351370343874461848378737238198224849863465033159410054974700593138339226497249461751545728366702369745461014655997933798537483143786841806593422227898388722980000748404719&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;figure&gt;
    &lt;img src=&#34;https://blog.jverkamp.com/embeds/2015/tupper.png&#34;/&gt; 
&lt;/figure&gt;


&lt;p&gt;That&amp;rsquo;s the result of graphing the above function at a point rather far away from the origin. Specifically, where &lt;code&gt;y&lt;/code&gt; is around that crazy big number. Look familiar?&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>gif shrinkage with ImageMagick</title>
      <link>https://blog.jverkamp.com/2015/03/05/gif-shrinkage-with-imagemagick/</link>
      <pubDate>Thu, 05 Mar 2015 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2015/03/05/gif-shrinkage-with-imagemagick/</guid>
      <description>&lt;p&gt;I have a gif collection now. :)&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&#34;https://blog.jverkamp.com/embeds/2015/dun-dun-dunnnnn.gif&#34;/&gt; 
&lt;/figure&gt;</description>
    </item>
    
    <item>
      <title>Let it snow!</title>
      <link>https://blog.jverkamp.com/2015/01/09/let-it-snow/</link>
      <pubDate>Fri, 09 Jan 2015 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2015/01/09/let-it-snow/</guid>
      <description>&lt;p&gt;♫ Oh the weather outside is frightful&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;&amp;hellip; ♫&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&#34;https://blog.jverkamp.com/embeds/2015/snowflake.gif&#34;/&gt; 
&lt;/figure&gt;</description>
    </item>
    
    <item>
      <title>Generating omnichromatic images</title>
      <link>https://blog.jverkamp.com/2015/01/01/generating-omnichromatic-images/</link>
      <pubDate>Thu, 01 Jan 2015 00:10:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2015/01/01/generating-omnichromatic-images/</guid>
      <description>&lt;p&gt;Inspired half by a &lt;a href=&#34;https://codegolf.stackexchange.com/questions/22144/images-with-all-colors&#34;&gt;post on the Code Golf StackExchange&lt;/a&gt; and half by the corresponding website &lt;a href=&#34;http://allrgb.com/&#34;&gt;allrgb.com&lt;/a&gt;, today&amp;rsquo;s post tasks us with making images like this:&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&#34;https://blog.jverkamp.com/embeds/2015/grow-minimum_gray-code_400x200.png&#34;/&gt; 
&lt;/figure&gt;


&lt;p&gt;So what&amp;rsquo;s so interesting about that picture?&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Palette Swapping</title>
      <link>https://blog.jverkamp.com/2014/12/23/palette-swapping/</link>
      <pubDate>Tue, 23 Dec 2014 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2014/12/23/palette-swapping/</guid>
      <description>&lt;p&gt;Today&amp;rsquo;s task comes from the &lt;a href=&#34;https://codegolf.stackexchange.com/&#34;&gt;Code Golf StackExchange&lt;/a&gt;. The idea behind &lt;a href=&#34;https://en.wikipedia.org/wiki/code%20golf&#34;&gt;code golf&lt;/a&gt; is to write a program with as few characters as possible, often rendering the code nigh on unreadable. Luckily, the same StackExchange also host popularity contests, one of which is the inspiration behind today&amp;rsquo;s post:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;You are given two true color images, the Source and the Palette. They do not necessarily have the same dimensions but it is guaranteed that their areas are the same, i.e. they have the same number of pixels.
Your task is to create an algorithm that makes the most accurate looking copy of the Source by only using the pixels in the Palette. Each pixel in the Palette must be used exactly once in a unique position in this copy. The copy must have the same dimensions as the Source.
&amp;ndash; &lt;a href=&#34;https://codegolf.stackexchange.com/questions/33172/american-gothic-in-the-palette-of-mona-lisa-rearrange-the-pixels&#34;&gt;American Gothic in the palette of Mona Lisa: Rearrange the pixels&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>Clockception</title>
      <link>https://blog.jverkamp.com/2014/11/04/clockception/</link>
      <pubDate>Tue, 04 Nov 2014 09:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2014/11/04/clockception/</guid>
      <description>&lt;p&gt;Let&amp;rsquo;s talk about clocks.&lt;/p&gt;

&lt;p&gt;We can draw traditional analog clocks&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;:&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&#34;https://blog.jverkamp.com/embeds/2014/analog.png&#34;/&gt; 
&lt;/figure&gt;


&lt;p&gt;We can draw nice digital clocks:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;┌─┐  │ │ ─┐ ┌─┐
│ │└─┤    │ │ │
└─┘  │ │ ─┴─└─┘
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Or we can go downright mad and make clocks out of clocks:&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&#34;https://blog.jverkamp.com/embeds/2014/clockception.png&#34;/&gt; 
&lt;/figure&gt;


&lt;p&gt;Even animated!&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&#34;https://blog.jverkamp.com/embeds/2014/animated.gif&#34;/&gt; 
&lt;/figure&gt;</description>
    </item>
    
    <item>
      <title>Tile Puzzle</title>
      <link>https://blog.jverkamp.com/2014/10/28/tile-puzzle/</link>
      <pubDate>Tue, 28 Oct 2014 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2014/10/28/tile-puzzle/</guid>
      <description>&lt;p&gt;It&amp;rsquo;s been a while&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;, but I&amp;rsquo;m back. Today&amp;rsquo;s post is inspired by a post from /r/dailyprogrammer almost a month ago now: &lt;a href=&#34;https://www.reddit.com/r/dailyprogrammer/comments/2ip1gj/10082014_challenge_183_intermediate_edge_matching/&#34;&gt;Challenge #183 [Intermediate] Edge Matching Tile Puzzle&lt;/a&gt;. Basically, we&amp;rsquo;re going to solve puzzles like this:&lt;/p&gt;

&lt;p&gt;&lt;figure&gt;
    &lt;img src=&#34;https://blog.jverkamp.com/embeds/2014/unsolved-3x3.png&#34;/&gt; 
&lt;/figure&gt;

&lt;figure&gt;
    &lt;img src=&#34;https://blog.jverkamp.com/embeds/2014/solved-3x3.png&#34;/&gt; 
&lt;/figure&gt;
&lt;/p&gt;

&lt;p&gt;If you look carefully, the tiles are the same between the two, although they might be rotated.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Regular Expression Fractals</title>
      <link>https://blog.jverkamp.com/2014/10/05/regular-expression-fractals/</link>
      <pubDate>Sun, 05 Oct 2014 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2014/10/05/regular-expression-fractals/</guid>
      <description>&lt;p&gt;Oops, turns out I haven&amp;rsquo;t had a post in a good long while. Before it gets even longer, I figure that I should take one off my backlog and just write it up, even if it is a little on the shorter side.&lt;/p&gt;

&lt;p&gt;Today&amp;rsquo;s post was inspired by this post on /r/dailyprogrammer a month ago today:
&lt;a href=&#34;https://www.reddit.com/r/dailyprogrammer/comments/2fkh8u/9052014_challenge_178_hard_regular_expression/&#34;&gt;Challenge #178 [Hard] Regular Expression Fractals&lt;/a&gt;. The basic idea is that you are going to take a rectangular region and divide it into four quadrants, again and again, recording the path as you go (images from that post):&lt;/p&gt;

&lt;p&gt;&lt;figure&gt;
    &lt;img src=&#34;https://blog.jverkamp.com/embeds/2014/step-1.png&#34;/&gt; 
&lt;/figure&gt;

&lt;figure&gt;
    &lt;img src=&#34;https://blog.jverkamp.com/embeds/2014/step-2.png&#34;/&gt; 
&lt;/figure&gt;

&lt;figure&gt;
    &lt;img src=&#34;https://blog.jverkamp.com/embeds/2014/step-3.png&#34;/&gt; 
&lt;/figure&gt;
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Invader Fractals</title>
      <link>https://blog.jverkamp.com/2014/09/17/invader-fractals/</link>
      <pubDate>Wed, 17 Sep 2014 09:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2014/09/17/invader-fractals/</guid>
      <description>&lt;p&gt;First we had &lt;a href=&#34;https://blog.jverkamp.com/2014/09/14/procedural-invaders/&#34;&gt;Procedural Invaders&lt;/a&gt;. Then we used them fill up space with &lt;a href=&#34;https://blog.jverkamp.com/2014/09/16/fractal-invaders/&#34;&gt;Fractal Invaders&lt;/a&gt;. But we&amp;rsquo;re not &lt;em&gt;quite&lt;/em&gt; done yet! This time, let&amp;rsquo;s mix things up a bit and make Invader Fractals.&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&#34;https://blog.jverkamp.com/embeds/2014/invader-fractal-3.png&#34;/&gt; 
&lt;/figure&gt;</description>
    </item>
    
  </channel>
</rss>