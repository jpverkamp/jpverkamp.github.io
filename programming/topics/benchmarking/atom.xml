<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Benchmarking on jverkamp.com</title><link>https://blog.jverkamp.com/programming/topics/benchmarking/</link><description>Recent content in Benchmarking on jverkamp.com</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://blog.jverkamp.com/programming/topics/benchmarking/atom.xml" rel="self" type="application/rss+xml"/><item><title>AoC 2024 Day 11: Exponential Growthinator</title><link>https://blog.jverkamp.com/2024/12/11/aoc-2024-day-11-exponential-growthinator/</link><pubDate>Wed, 11 Dec 2024 00:00:03 +0000</pubDate><guid>https://blog.jverkamp.com/2024/12/11/aoc-2024-day-11-exponential-growthinator/</guid><description>&lt;h2 id="source-day-11-plutonian-pebbleshttpsadventofcodecom2024day11">Source: &lt;a href="https://adventofcode.com/2024/day/11" target="_blank" rel="noopener">Day 11: Plutonian Pebbles&lt;/a>&lt;/h2>
&lt;p>&lt;a href="https://github.com/jpverkamp/advent-of-code/blob/master/2024/src/day11.rs" target="_blank" rel="noopener">Full solution&lt;/a> for today (spoilers!).&lt;/p>
&lt;nav id="TableOfContents">
&lt;ul>
&lt;li>&lt;a href="#source-day-11-plutonian-pebbleshttpsadventofcodecom2024day11">Source: &lt;a href="https://adventofcode.com/2024/day/11">Day 11: Plutonian Pebbles&lt;/a>&lt;/a>&lt;/li>
&lt;li>&lt;a href="#part-1">Part 1&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#optimization-1-recursion">Optimization 1: Recursion&lt;/a>&lt;/li>
&lt;li>&lt;a href="#optimization-2-memoization">Optimization 2: Memoization&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#part-2">Part 2&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#optimization-attempt-3-association-list-cache">Optimization (attempt) 3: Association list cache&lt;/a>&lt;/li>
&lt;li>&lt;a href="#optimization-attempt-4-btree-cache">Optimization (attempt) 4: &lt;code>BTree&lt;/code> cache&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#benchmarks">Benchmarks&lt;/a>&lt;/li>
&lt;/ul>
&lt;/nav>
&lt;h2 id="part-1">Part 1&lt;/h2>
&lt;blockquote>
&lt;p>Given a sequence of values &lt;code>v_n&lt;/code>, replace each value with the first matching rule:&lt;/p>
&lt;ul>
&lt;li>&lt;code>if v = 0 -&amp;gt; 1&lt;/code>&lt;/li>
&lt;li>If &lt;code>v&lt;/code> has an even number of digits, split it (so &lt;code>v = 8675&lt;/code> becomes &lt;code>[86, 75]&lt;/code>)&lt;/li>
&lt;li>Otherwise, &lt;code>v -&amp;gt; v * 2024&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>Calculate how many elements are in the sequence after 25 iterations.&lt;/p>
&lt;/blockquote></description></item><item><title>AoC 2024 Day 10: Take-a-Hikinator</title><link>https://blog.jverkamp.com/2024/12/10/aoc-2024-day-10-take-a-hikinator/</link><pubDate>Tue, 10 Dec 2024 00:00:03 +0000</pubDate><guid>https://blog.jverkamp.com/2024/12/10/aoc-2024-day-10-take-a-hikinator/</guid><description>&lt;h2 id="source-day-10-hoof-ithttpsadventofcodecom2024day10">Source: &lt;a href="https://adventofcode.com/2024/day/10" target="_blank" rel="noopener">Day 10: Hoof It&lt;/a>&lt;/h2>
&lt;p>&lt;a href="https://github.com/jpverkamp/advent-of-code/blob/master/2024/src/day10.rs" target="_blank" rel="noopener">Full solution&lt;/a> for today (spoilers!).&lt;/p>
&lt;nav id="TableOfContents">
&lt;ul>
&lt;li>&lt;a href="#source-day-10-hoof-ithttpsadventofcodecom2024day10">Source: &lt;a href="https://adventofcode.com/2024/day/10">Day 10: Hoof It&lt;/a>&lt;/a>&lt;/li>
&lt;li>&lt;a href="#part-1">Part 1&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#optimization-1-using-dynamic-programming">Optimization 1: Using dynamic programming&lt;/a>&lt;/li>
&lt;li>&lt;a href="#optimization-2-smarter-bitmasks">Optimization 2: Smarter bitmasks&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#part-2">Part 2&lt;/a>&lt;/li>
&lt;li>&lt;a href="#benchmarks">Benchmarks&lt;/a>&lt;/li>
&lt;/ul>
&lt;/nav>
&lt;h2 id="part-1">Part 1&lt;/h2>
&lt;blockquote>
&lt;p>Given a heightmap (&lt;code>0&lt;/code> to &lt;code>9&lt;/code>), for each &lt;code>0&lt;/code> count how many &lt;code>9&lt;/code> you can reach on paths that only ever increase height by exactly 1 at a time. Sum these values.&lt;/p>
&lt;/blockquote></description></item><item><title>AoC 2024 Day 9: Defraginator</title><link>https://blog.jverkamp.com/2024/12/09/aoc-2024-day-9-defraginator/</link><pubDate>Mon, 09 Dec 2024 00:00:03 +0000</pubDate><guid>https://blog.jverkamp.com/2024/12/09/aoc-2024-day-9-defraginator/</guid><description>&lt;h2 id="source-day-9-disk-fragmenterhttpsadventofcodecom2024day9">Source: &lt;a href="https://adventofcode.com/2024/day/9" target="_blank" rel="noopener">Day 9: Disk Fragmenter&lt;/a>&lt;/h2>
&lt;p>&lt;a href="https://github.com/jpverkamp/advent-of-code/blob/master/2024/src/day9.rs" target="_blank" rel="noopener">Full solution&lt;/a> for today (spoilers!).&lt;/p>
&lt;nav id="TableOfContents">
&lt;ul>
&lt;li>&lt;a href="#source-day-9-disk-fragmenterhttpsadventofcodecom2024day9">Source: &lt;a href="https://adventofcode.com/2024/day/9">Day 9: Disk Fragmenter&lt;/a>&lt;/a>&lt;/li>
&lt;li>&lt;a href="#part-1">Part 1&lt;/a>&lt;/li>
&lt;li>&lt;a href="#part-2">Part 2&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#optimization-attempt-1-btree-representation">Optimization (attempt) 1: BTree representation&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#optimization-2-track-the-leftmost-empty-space">Optimization 2: Track the leftmost empty space&lt;/a>&lt;/li>
&lt;li>&lt;a href="#benchmarks">Benchmarks&lt;/a>&lt;/li>
&lt;/ul>
&lt;/nav>
&lt;h2 id="part-1">Part 1&lt;/h2>
&lt;blockquote>
&lt;p>Given a disk layout alternating between files and empty spaces, move all files as early on the disk is possible, splitting into multiple blocks. Return a checksum on the disk.&lt;/p>
&lt;p>Alternating means: &lt;code>23331&lt;/code> would mean a 2 block file, 3 empty, a 3 block file, 3 empty, and a 1 block file.&lt;/p>
&lt;p>The checksum is the sum of &lt;code>file_id * block_index&lt;/code> for all occupied blocks. File IDs are assigned sequentially on initial generation.&lt;/p>
&lt;/blockquote></description></item><item><title>AoC 2024 Day 8: Vectorinator</title><link>https://blog.jverkamp.com/2024/12/08/aoc-2024-day-8-vectorinator/</link><pubDate>Sun, 08 Dec 2024 00:00:03 +0000</pubDate><guid>https://blog.jverkamp.com/2024/12/08/aoc-2024-day-8-vectorinator/</guid><description>&lt;h2 id="source-day-8-resonant-collinearityhttpsadventofcodecom2024day8">Source: &lt;a href="https://adventofcode.com/2024/day/8" target="_blank" rel="noopener">Day 8: Resonant Collinearity&lt;/a>&lt;/h2>
&lt;p>&lt;a href="https://github.com/jpverkamp/advent-of-code/blob/master/2024/src/day8.rs" target="_blank" rel="noopener">Full solution&lt;/a> for today (spoilers!).&lt;/p>
&lt;nav id="TableOfContents">
&lt;ul>
&lt;li>&lt;a href="#source-day-8-resonant-collinearityhttpsadventofcodecom2024day8">Source: &lt;a href="https://adventofcode.com/2024/day/8">Day 8: Resonant Collinearity&lt;/a>&lt;/a>&lt;/li>
&lt;li>&lt;a href="#part-1">Part 1&lt;/a>&lt;/li>
&lt;li>&lt;a href="#part-2">Part 2&lt;/a>&lt;/li>
&lt;li>&lt;a href="#benchmarks">Benchmarks&lt;/a>&lt;/li>
&lt;/ul>
&lt;/nav>
&lt;h2 id="part-1">Part 1&lt;/h2>
&lt;blockquote>
&lt;p>Given a grid with either open tiles (&lt;code>.&lt;/code>) or towers (anything else), for each pair of towers, there is an antinode at each of the points that is 2x as far from one tower as the other. How many antinodes are there still within the bounds of the map?&lt;/p>
&lt;/blockquote></description></item><item><title>AoC 2024 Day 7: Mathinator</title><link>https://blog.jverkamp.com/2024/12/07/aoc-2024-day-7-mathinator/</link><pubDate>Sat, 07 Dec 2024 00:00:03 +0000</pubDate><guid>https://blog.jverkamp.com/2024/12/07/aoc-2024-day-7-mathinator/</guid><description>&lt;h2 id="source-day-7-bridge-repairhttpsadventofcodecom2024day7">Source: &lt;a href="https://adventofcode.com/2024/day/7" target="_blank" rel="noopener">Day 7: Bridge Repair&lt;/a>&lt;/h2>
&lt;p>&lt;a href="https://github.com/jpverkamp/advent-of-code/blob/master/2024/src/day7.rs" target="_blank" rel="noopener">Full solution&lt;/a> for today (spoilers!).&lt;/p>
&lt;nav id="TableOfContents">
&lt;ul>
&lt;li>&lt;a href="#source-day-7-bridge-repairhttpsadventofcodecom2024day7">Source: &lt;a href="https://adventofcode.com/2024/day/7">Day 7: Bridge Repair&lt;/a>&lt;/a>&lt;/li>
&lt;li>&lt;a href="#part-1">Part 1&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#optimization-attempt-1-queue">Optimization (attempt) 1: Queue&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#part-2">Part 2&lt;/a>&lt;/li>
&lt;li>&lt;a href="#a-cleaner-way-of-looking-at-it-opset">A &amp;lsquo;cleaner&amp;rsquo; way of looking at it: &lt;code>OpSet&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="#benchmarks">Benchmarks&lt;/a>&lt;/li>
&lt;li>&lt;a href="#future-work">Future work&lt;/a>&lt;/li>
&lt;/ul>
&lt;/nav>
&lt;h2 id="part-1">Part 1&lt;/h2>
&lt;blockquote>
&lt;p>Given a result and a list of numbers, determine if any combination of addition (&lt;code>+&lt;/code>) and/or multiplication (&lt;code>*&lt;/code>) using all the given numbers in order can return the result. Ignore order of operations.&lt;/p>
&lt;/blockquote></description></item></channel></rss>