<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>CTF on jverkamp.com</title><link>https://blog.jverkamp.com/programming/topics/ctf/</link><description>Recent content in CTF on jverkamp.com</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://blog.jverkamp.com/programming/topics/ctf/atom.xml" rel="self" type="application/rss+xml"/><item><title>Rebuilding Streams with TShark</title><link>https://blog.jverkamp.com/2023/11/14/rebuilding-streams-with-tshark/</link><pubDate>Tue, 14 Nov 2023 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2023/11/14/rebuilding-streams-with-tshark/</guid><description>&lt;p>Another quick post in a list of CTF techniques: filtering streams with &lt;a href="https://www.wireshark.org/docs/man-pages/tshark.html" target="_blank" rel="noopener">tshark&lt;/a>. tshark is the command line half of the packet capture tool &lt;a href="https://www.wireshark.org/" target="_blank" rel="noopener">Wireshark&lt;/a>. The advantage here is it let&amp;rsquo;s you do all manner of filtering on the command line.&lt;/p></description></item><item><title>SQLite Metadata via SQL Injection</title><link>https://blog.jverkamp.com/2023/11/09/sqlite-metadata-via-sql-injection/</link><pubDate>Thu, 09 Nov 2023 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2023/11/09/sqlite-metadata-via-sql-injection/</guid><description>&lt;p>As mentioned in my &lt;a href="https://blog.jverkamp.com/2023/11/07/mongo-db-data-exfiltration-via-search-conditions/">previous post&lt;/a>, I recently participated in a security CTF exercise and wanted to write out a few interesting techniques.&lt;/p>
&lt;p>This is the second: extracting SQL metadata from a SQLite database.&lt;/p></description></item><item><title>Mongo DB Data Exfiltration via Search Conditions</title><link>https://blog.jverkamp.com/2023/11/07/mongo-db-data-exfiltration-via-search-conditions/</link><pubDate>Tue, 07 Nov 2023 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2023/11/07/mongo-db-data-exfiltration-via-search-conditions/</guid><description>&lt;p>I recently participated in a security capture the flag (CTF) exercise through work. The goal was&amp;ndash;in a wide variety of ways&amp;ndash;to find a hidden string of the form &lt;code>flag{...}&lt;/code> somewhere in the problem. Some required exploiting sample websites, some parsing various data formats or captures, some required reverse engineering code or binaries, and (new this year) some required messing with LLMs.&lt;/p>
&lt;p>As I tend to do for just about everything, I ended up writing up my own experiences. I won&amp;rsquo;t share that, since it&amp;rsquo;s fairly tuned to the specific problems and thus 1) not interesting and 2) probably not mine to share, but I did want want to share a few interesting techniques I found/used. If it helps anyone either defend against similar attacks in the real world or (more importantly ðŸ˜„) someone comes across this while trying to solve a CTF of their own, all the better.&lt;/p>
&lt;p>Okay, first technique: extracting data from a MongoDB database using search conditions.&lt;/p></description></item></channel></rss>