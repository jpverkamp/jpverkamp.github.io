<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Sorting on jverkamp.com</title>
    <link>https://blog.jverkamp.com/programming/topics/sorting/</link>
    <description>Recent content in Sorting on jverkamp.com</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 11 Dec 2017 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://blog.jverkamp.com/programming/topics/sorting/atom.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Deterministic Shuffling Using Hashes</title>
      <link>https://blog.jverkamp.com/2017/12/11/deterministic-shuffling-using-hashes/</link>
      <pubDate>Mon, 11 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2017/12/11/deterministic-shuffling-using-hashes/</guid>
      <description>&lt;p&gt;Whenever I create my &lt;a href=&#34;https://blog.jverkamp.com/2017/01/01/2017-reading-list/&#34;&gt;yearly reading list&lt;/a&gt;, I need a way to order the books. Sure, I could just shuffle them normally, but that leads me to the temptation of cheating and re-shuffling them so that the books I want to read most are first. What I really need is a shuffle that will shuffle the same way every time.&lt;/p&gt;

&lt;p&gt;Enter: hashsort&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Partitioning the Dutch national flag</title>
      <link>https://blog.jverkamp.com/2013/03/06/partitioning-the-dutch-national-flag/</link>
      <pubDate>Wed, 06 Mar 2013 14:00:08 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2013/03/06/partitioning-the-dutch-national-flag/</guid>
      <description>&lt;p&gt;&lt;a title=&#34;Dutch National Flag&#34; href=&#34;http://programmingpraxis.com/2013/03/05/dutch-national-flag/&#34;&gt;Yesterday&amp;rsquo;s post&lt;/a&gt; from Programming Praxis asks us to solve a problem known as the Dutch National Flag problem (attributed to &lt;a href=&#34;https://en.wikipedia.org/wiki/Edsgar%20Dijkstra&#34;&gt;Edsgar Dijkstra&lt;/a&gt;): &lt;em&gt;sort an array of red, white and blue symbols so that all reds come together, followed by all whites, followed finally by all blues&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Predecessor and successor in a binary search tree</title>
      <link>https://blog.jverkamp.com/2013/02/13/predecessor-and-successor-in-a-binary-search-tree/</link>
      <pubDate>Wed, 13 Feb 2013 14:00:53 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2013/02/13/predecessor-and-successor-in-a-binary-search-tree/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://programmingpraxis.com/2013/02/12/binary-search-tree-in-order-predecessor-and-successor/&#34; title=&#34;Binary Search Tree: In-Order Predecessor And Successor&#34;&gt;Yesterday&amp;rsquo;s post&lt;/a&gt; from Programming Praxis has us trying to find the predecessor and successor to a given value in a binary search tree. There are actually two general algorithms for doing this, depending on if you have parent pointers or not&amp;ndash;but they&amp;rsquo;re asking for the algorithm without.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Splay heaps redux-imperative model</title>
      <link>https://blog.jverkamp.com/2013/01/24/splay-heaps-redux-imperative-model/</link>
      <pubDate>Thu, 24 Jan 2013 14:00:32 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2013/01/24/splay-heaps-redux-imperative-model/</guid>
      <description>&lt;p&gt;I did say in &lt;a href=&#34;https://blog.jverkamp.com/2013/01/23/sorting-via-splay-heap/&#34;&gt;yesterday&amp;rsquo;s comments&lt;/a&gt; that I would try re-implementing splay heaps using an imperative model with an array (Scheme&amp;rsquo;s &lt;code&gt;vector&lt;/code&gt;) as the back end rather than a functional one with trees. Well, here is is.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Sorting via splay heap</title>
      <link>https://blog.jverkamp.com/2013/01/23/sorting-via-splay-heap/</link>
      <pubDate>Wed, 23 Jan 2013 14:00:32 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2013/01/23/sorting-via-splay-heap/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://programmingpraxis.com/2013/01/22/splay-heaps/&#34; title=&#34;Splay Heap&#34;&gt;Yesterday&amp;rsquo;s post&lt;/a&gt; from Programming Praxis gives a new (or at least different) vantage point on one of the most common problems in Computer Science: sorting. Today, we&amp;rsquo;re going to implement a data structure known as a &lt;a href=&#34;https://en.wikipedia.org/wiki/splay%20heap&#34;&gt;splay heap&lt;/a&gt; and use that to perform a &lt;a href=&#34;https://en.wikipedia.org/wiki/heapsort&#34;&gt;heapsort&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>