<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Sorting on jverkamp.com</title><link>https://blog.jverkamp.com/programming/topics/sorting/</link><description>Recent content in Sorting on jverkamp.com</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Thu, 05 Dec 2024 00:00:03 +0000</lastBuildDate><atom:link href="https://blog.jverkamp.com/programming/topics/sorting/atom.xml" rel="self" type="application/rss+xml"/><item><title>AoC 2024 Day 5: (Not) Transitivinator</title><link>https://blog.jverkamp.com/2024/12/05/aoc-2024-day-5-not-transitivinator/</link><pubDate>Thu, 05 Dec 2024 00:00:03 +0000</pubDate><guid>https://blog.jverkamp.com/2024/12/05/aoc-2024-day-5-not-transitivinator/</guid><description>&lt;h2 id="source-day-day-5-print-queue">Source: &lt;a href="https://adventofcode.com/2024/day/5" target="_blank" rel="noopener">Day Day 5: Print Queue&lt;/a>&lt;/h2>
&lt;p>&lt;a href="https://github.com/jpverkamp/advent-of-code/blob/master/2024/src/day5.rs" target="_blank" rel="noopener">Full solution&lt;/a> for today (spoilers!).&lt;/p>
&lt;nav id="TableOfContents">
 &lt;ul>
 &lt;li>&lt;a href="#source-day-day-5-print-queue">Source: &lt;a href="https://adventofcode.com/2024/day/5">Day Day 5: Print Queue&lt;/a>&lt;/a>&lt;/li>
 &lt;li>&lt;a href="#part-1">Part 1&lt;/a>
 &lt;ul>
 &lt;li>&lt;a href="#parsing">Parsing&lt;/a>&lt;/li>
 &lt;li>&lt;a href="#is-it-transitive">Is it transitive?&lt;/a>&lt;/li>
 &lt;/ul>
 &lt;/li>
 &lt;li>&lt;a href="#part-2">Part 2&lt;/a>&lt;/li>
 &lt;li>&lt;a href="#benchmarks">Benchmarks&lt;/a>&lt;/li>
 &lt;li>&lt;a href="#optimization-1-drop-the-hashmap">Optimization 1: Drop the &lt;code>hashmap&lt;/code>&lt;/a>&lt;/li>
 &lt;li>&lt;a href="#optimization-2-bitvec">Optimization 2: &lt;code>bitvec&lt;/code>&lt;/a>&lt;/li>
 &lt;li>&lt;a href="#optimization-attempt-3-a-vec-of-pairs">Optimization (attempt) 3: A &lt;code>vec&lt;/code> of pairs&lt;/a>
 &lt;ul>
 &lt;li>&lt;a href="#optimization-attempt-4-sorted-vec-of-pairs">Optimization (attempt) 4: Sorted &lt;code>vec&lt;/code> of pairs&lt;/a>&lt;/li>
 &lt;/ul>
 &lt;/li>
 &lt;li>&lt;a href="#overall-timing-graph">Overall timing graph&lt;/a>&lt;/li>
 &lt;/ul>
&lt;/nav>

&lt;h2 id="part-1">Part 1&lt;/h2>
&lt;blockquote>
&lt;p>The input is a list of pairs of the form &lt;code>a|b&lt;/code> which defines that &lt;code>b&lt;/code> must not come before &lt;code>a&lt;/code>, an empty line, and then a list of values &lt;code>a,b,c,d&lt;/code>.&lt;/p>
&lt;p>For each line that is valid for all given &lt;code>a|b&lt;/code> rules, sum the middle number of each list.&lt;/p>&lt;/blockquote></description></item><item><title>Deterministic Shuffling Using Hashes</title><link>https://blog.jverkamp.com/2017/12/11/deterministic-shuffling-using-hashes/</link><pubDate>Mon, 11 Dec 2017 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2017/12/11/deterministic-shuffling-using-hashes/</guid><description>&lt;p>Whenever I create my &lt;a href="https://blog.jverkamp.com/2017/01/01/2017-reading-list/">yearly reading list&lt;/a>, I need a way to order the books. Sure, I could just shuffle them normally, but that leads me to the temptation of cheating and re-shuffling them so that the books I want to read most are first. What I really need is a shuffle that will shuffle the same way every time.&lt;/p>
&lt;p>Enter: hashsort&lt;/p></description></item><item><title>Partitioning the Dutch national flag</title><link>https://blog.jverkamp.com/2013/03/06/partitioning-the-dutch-national-flag/</link><pubDate>Wed, 06 Mar 2013 14:00:08 +0000</pubDate><guid>https://blog.jverkamp.com/2013/03/06/partitioning-the-dutch-national-flag/</guid><description>&lt;p>&lt;a title="Dutch National Flag" href="http://programmingpraxis.com/2013/03/05/dutch-national-flag/">Yesterday&amp;rsquo;s post&lt;/a> from Programming Praxis asks us to solve a problem known as the Dutch National Flag problem (attributed to &lt;a href="https://en.wikipedia.org/wiki/Edsgar%20Dijkstra">Edsgar Dijkstra&lt;/a>): &lt;em>sort an array of red, white and blue symbols so that all reds come together, followed by all whites, followed finally by all blues&lt;/em>.&lt;/p></description></item><item><title>Predecessor and successor in a binary search tree</title><link>https://blog.jverkamp.com/2013/02/13/predecessor-and-successor-in-a-binary-search-tree/</link><pubDate>Wed, 13 Feb 2013 14:00:53 +0000</pubDate><guid>https://blog.jverkamp.com/2013/02/13/predecessor-and-successor-in-a-binary-search-tree/</guid><description>&lt;p>&lt;a href="http://programmingpraxis.com/2013/02/12/binary-search-tree-in-order-predecessor-and-successor/" title="Binary Search Tree: In-Order Predecessor And Successor">Yesterday&amp;rsquo;s post&lt;/a> from Programming Praxis has us trying to find the predecessor and successor to a given value in a binary search tree. There are actually two general algorithms for doing this, depending on if you have parent pointers or not&amp;ndash;but they&amp;rsquo;re asking for the algorithm without.&lt;/p></description></item><item><title>Splay heaps redux-imperative model</title><link>https://blog.jverkamp.com/2013/01/24/splay-heaps-redux-imperative-model/</link><pubDate>Thu, 24 Jan 2013 14:00:32 +0000</pubDate><guid>https://blog.jverkamp.com/2013/01/24/splay-heaps-redux-imperative-model/</guid><description>&lt;p>I did say in &lt;a href="https://blog.jverkamp.com/2013/01/23/sorting-via-splay-heap/">yesterday&amp;rsquo;s comments&lt;/a> that I would try re-implementing splay heaps using an imperative model with an array (Scheme&amp;rsquo;s &lt;code>vector&lt;/code>) as the back end rather than a functional one with trees. Well, here is is.&lt;/p></description></item><item><title>Sorting via splay heap</title><link>https://blog.jverkamp.com/2013/01/23/sorting-via-splay-heap/</link><pubDate>Wed, 23 Jan 2013 14:00:32 +0000</pubDate><guid>https://blog.jverkamp.com/2013/01/23/sorting-via-splay-heap/</guid><description>&lt;p>&lt;a href="http://programmingpraxis.com/2013/01/22/splay-heaps/" title="Splay Heap">Yesterday&amp;rsquo;s post&lt;/a> from Programming Praxis gives a new (or at least different) vantage point on one of the most common problems in Computer Science: sorting. Today, we&amp;rsquo;re going to implement a data structure known as a &lt;a href="https://en.wikipedia.org/wiki/splay%20heap">splay heap&lt;/a> and use that to perform a &lt;a href="https://en.wikipedia.org/wiki/heapsort">heapsort&lt;/a>.&lt;/p></description></item></channel></rss>