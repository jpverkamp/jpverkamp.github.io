<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Sorting on jverkamp.com</title><link>https://blog.jverkamp.com/programming/topics/sorting/</link><description>Recent content in Sorting on jverkamp.com</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://blog.jverkamp.com/programming/topics/sorting/atom.xml" rel="self" type="application/rss+xml"/><item><title>Deterministic Shuffling Using Hashes</title><link>https://blog.jverkamp.com/2017/12/11/deterministic-shuffling-using-hashes/</link><pubDate>Mon, 11 Dec 2017 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2017/12/11/deterministic-shuffling-using-hashes/</guid><description>&lt;p>Whenever I create my &lt;a href="https://blog.jverkamp.com/2017/01/01/2017-reading-list/">yearly reading list&lt;/a>, I need a way to order the books. Sure, I could just shuffle them normally, but that leads me to the temptation of cheating and re-shuffling them so that the books I want to read most are first. What I really need is a shuffle that will shuffle the same way every time.&lt;/p>
&lt;p>Enter: hashsort&lt;/p></description></item><item><title>Partitioning the Dutch national flag</title><link>https://blog.jverkamp.com/2013/03/06/partitioning-the-dutch-national-flag/</link><pubDate>Wed, 06 Mar 2013 14:00:08 +0000</pubDate><guid>https://blog.jverkamp.com/2013/03/06/partitioning-the-dutch-national-flag/</guid><description>&lt;p>&lt;a title="Dutch National Flag" href="http://programmingpraxis.com/2013/03/05/dutch-national-flag/">Yesterday&amp;rsquo;s post&lt;/a> from Programming Praxis asks us to solve a problem known as the Dutch National Flag problem (attributed to &lt;a href="https://en.wikipedia.org/wiki/Edsgar%20Dijkstra">Edsgar Dijkstra&lt;/a>): &lt;em>sort an array of red, white and blue symbols so that all reds come together, followed by all whites, followed finally by all blues&lt;/em>.&lt;/p></description></item><item><title>Predecessor and successor in a binary search tree</title><link>https://blog.jverkamp.com/2013/02/13/predecessor-and-successor-in-a-binary-search-tree/</link><pubDate>Wed, 13 Feb 2013 14:00:53 +0000</pubDate><guid>https://blog.jverkamp.com/2013/02/13/predecessor-and-successor-in-a-binary-search-tree/</guid><description>&lt;p>&lt;a href="http://programmingpraxis.com/2013/02/12/binary-search-tree-in-order-predecessor-and-successor/" title="Binary Search Tree: In-Order Predecessor And Successor">Yesterday&amp;rsquo;s post&lt;/a> from Programming Praxis has us trying to find the predecessor and successor to a given value in a binary search tree. There are actually two general algorithms for doing this, depending on if you have parent pointers or not&amp;ndash;but they&amp;rsquo;re asking for the algorithm without.&lt;/p></description></item><item><title>Splay heaps redux-imperative model</title><link>https://blog.jverkamp.com/2013/01/24/splay-heaps-redux-imperative-model/</link><pubDate>Thu, 24 Jan 2013 14:00:32 +0000</pubDate><guid>https://blog.jverkamp.com/2013/01/24/splay-heaps-redux-imperative-model/</guid><description>&lt;p>I did say in &lt;a href="https://blog.jverkamp.com/2013/01/23/sorting-via-splay-heap/">yesterday&amp;amp;rsquo;s comments&lt;/a> that I would try re-implementing splay heaps using an imperative model with an array (Scheme&amp;rsquo;s &lt;code>vector&lt;/code>) as the back end rather than a functional one with trees. Well, here is is.&lt;/p></description></item><item><title>Sorting via splay heap</title><link>https://blog.jverkamp.com/2013/01/23/sorting-via-splay-heap/</link><pubDate>Wed, 23 Jan 2013 14:00:32 +0000</pubDate><guid>https://blog.jverkamp.com/2013/01/23/sorting-via-splay-heap/</guid><description>&lt;p>&lt;a href="http://programmingpraxis.com/2013/01/22/splay-heaps/" title="Splay Heap">Yesterday&amp;rsquo;s post&lt;/a> from Programming Praxis gives a new (or at least different) vantage point on one of the most common problems in Computer Science: sorting. Today, we&amp;rsquo;re going to implement a data structure known as a &lt;a href="https://en.wikipedia.org/wiki/splay%20heap">splay heap&lt;/a> and use that to perform a &lt;a href="https://en.wikipedia.org/wiki/heapsort">heapsort&lt;/a>.&lt;/p></description></item></channel></rss>