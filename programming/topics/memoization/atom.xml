<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Memoization on jverkamp.com</title><link>https://blog.jverkamp.com/programming/topics/memoization/</link><description>Recent content in Memoization on jverkamp.com</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://blog.jverkamp.com/programming/topics/memoization/atom.xml" rel="self" type="application/rss+xml"/><item><title>AoC 2024 Day 11: Exponential Growthinator</title><link>https://blog.jverkamp.com/2024/12/11/aoc-2024-day-11-exponential-growthinator/</link><pubDate>Wed, 11 Dec 2024 00:00:03 +0000</pubDate><guid>https://blog.jverkamp.com/2024/12/11/aoc-2024-day-11-exponential-growthinator/</guid><description>&lt;h2 id="source-day-11-plutonian-pebbleshttpsadventofcodecom2024day11">Source: &lt;a href="https://adventofcode.com/2024/day/11" target="_blank" rel="noopener">Day 11: Plutonian Pebbles&lt;/a>&lt;/h2>
&lt;p>&lt;a href="https://github.com/jpverkamp/advent-of-code/blob/master/2024/src/day11.rs" target="_blank" rel="noopener">Full solution&lt;/a> for today (spoilers!).&lt;/p>
&lt;nav id="TableOfContents">
&lt;ul>
&lt;li>&lt;a href="#source-day-11-plutonian-pebbleshttpsadventofcodecom2024day11">Source: &lt;a href="https://adventofcode.com/2024/day/11">Day 11: Plutonian Pebbles&lt;/a>&lt;/a>&lt;/li>
&lt;li>&lt;a href="#part-1">Part 1&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#optimization-1-recursion">Optimization 1: Recursion&lt;/a>&lt;/li>
&lt;li>&lt;a href="#optimization-2-memoization">Optimization 2: Memoization&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#part-2">Part 2&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#optimization-attempt-3-association-list-cache">Optimization (attempt) 3: Association list cache&lt;/a>&lt;/li>
&lt;li>&lt;a href="#optimization-attempt-4-btree-cache">Optimization (attempt) 4: &lt;code>BTree&lt;/code> cache&lt;/a>&lt;/li>
&lt;li>&lt;a href="#optimization-5-iterate-over-hashmapvalue-count">Optimization 5: Iterate over &lt;code>HashMap&amp;lt;value, count&amp;gt;&lt;/code>&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#benchmarks">Benchmarks&lt;/a>&lt;/li>
&lt;/ul>
&lt;/nav>
&lt;h2 id="part-1">Part 1&lt;/h2>
&lt;blockquote>
&lt;p>Given a sequence of values &lt;code>v_n&lt;/code>, replace each value with the first matching rule:&lt;/p>
&lt;ul>
&lt;li>&lt;code>if v = 0 -&amp;gt; 1&lt;/code>&lt;/li>
&lt;li>If &lt;code>v&lt;/code> has an even number of digits, split it (so &lt;code>v = 8675&lt;/code> becomes &lt;code>[86, 75]&lt;/code>)&lt;/li>
&lt;li>Otherwise, &lt;code>v -&amp;gt; v * 2024&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>Calculate how many elements are in the sequence after 25 iterations.&lt;/p>
&lt;/blockquote></description></item><item><title>AoC 2024 Day 7: Mathinator</title><link>https://blog.jverkamp.com/2024/12/07/aoc-2024-day-7-mathinator/</link><pubDate>Sat, 07 Dec 2024 00:00:03 +0000</pubDate><guid>https://blog.jverkamp.com/2024/12/07/aoc-2024-day-7-mathinator/</guid><description>&lt;h2 id="source-day-7-bridge-repairhttpsadventofcodecom2024day7">Source: &lt;a href="https://adventofcode.com/2024/day/7" target="_blank" rel="noopener">Day 7: Bridge Repair&lt;/a>&lt;/h2>
&lt;p>&lt;a href="https://github.com/jpverkamp/advent-of-code/blob/master/2024/src/day7.rs" target="_blank" rel="noopener">Full solution&lt;/a> for today (spoilers!).&lt;/p>
&lt;nav id="TableOfContents">
&lt;ul>
&lt;li>&lt;a href="#source-day-7-bridge-repairhttpsadventofcodecom2024day7">Source: &lt;a href="https://adventofcode.com/2024/day/7">Day 7: Bridge Repair&lt;/a>&lt;/a>&lt;/li>
&lt;li>&lt;a href="#part-1">Part 1&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#optimization-attempt-1-queue">Optimization (attempt) 1: Queue&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#part-2">Part 2&lt;/a>&lt;/li>
&lt;li>&lt;a href="#a-cleaner-way-of-looking-at-it-opset">A &amp;lsquo;cleaner&amp;rsquo; way of looking at it: &lt;code>OpSet&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="#benchmarks">Benchmarks&lt;/a>&lt;/li>
&lt;li>&lt;a href="#future-work">Future work&lt;/a>&lt;/li>
&lt;/ul>
&lt;/nav>
&lt;h2 id="part-1">Part 1&lt;/h2>
&lt;blockquote>
&lt;p>Given a result and a list of numbers, determine if any combination of addition (&lt;code>+&lt;/code>) and/or multiplication (&lt;code>*&lt;/code>) using all the given numbers in order can return the result. Ignore order of operations.&lt;/p>
&lt;/blockquote></description></item><item><title>StackLang Part VII: New CLI and Datatypes</title><link>https://blog.jverkamp.com/2023/08/05/stacklang-part-vii-new-cli-and-datatypes/</link><pubDate>Sat, 05 Aug 2023 23:59:00 +0000</pubDate><guid>https://blog.jverkamp.com/2023/08/05/stacklang-part-vii-new-cli-and-datatypes/</guid><description>Another day, another Stacklang!
Posts in StackLang: StackLang Part I: The Idea StackLang Part II: The Lexer StackLang Part III: The Parser StackLang Part IV: An Interpreter StackLang Part V: Compiling to C StackLang Part VI: Some Examples StackLang Part VII: New CLI and Datatypes StackLang Part VIII: Compiler Stacks StackLang Part IX: Better Testing Today, we&amp;rsquo;ve got two main parts to work on:
A new CLI New datatypes (VM only; so far!</description></item></channel></rss>