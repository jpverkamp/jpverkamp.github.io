<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Puzzles on jverkamp.com</title>
    <link>https://blog.jverkamp.com/programming/sources/puzzles/</link>
    <description>Recent content in Puzzles on jverkamp.com</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language><atom:link href="https://blog.jverkamp.com/programming/sources/puzzles/atom.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Solving Snakebird</title>
      <link>https://blog.jverkamp.com/2021/08/18/solving-snakebird/</link>
      <pubDate>Wed, 18 Aug 2021 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2021/08/18/solving-snakebird/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://store.steampowered.com/app/357300/Snakebird/&#34;&gt;Snakebird!&lt;/a&gt;&lt;/p&gt;
&lt;figure&gt;
    &lt;img src=&#34;https://blog.jverkamp.com/embeds/2021/snakebird-0.png&#34;/&gt; 
&lt;/figure&gt;

&lt;p&gt;A cute little puzzle game, where you move around snake(birds). Move any number of snakes around the level, eating fruit, and getting to the exit. The main gotchas are that you have gravity to content with&amp;ndash;your snake will easily fall off the edge of the world&amp;ndash;and each time you eat a fruit, your snake gets bigger. This can help get longer to get into hard to reach places or it can cause trouble when you trap yourself in corners.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s use the new &lt;a href=&#34;2021-08-17-immutable.js-solvers&#34;&gt;immutable.js solver&lt;/a&gt; to solve these problems!&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Immutable.js Solvers</title>
      <link>https://blog.jverkamp.com/2021/08/17/immutable.js-solvers/</link>
      <pubDate>Tue, 17 Aug 2021 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2021/08/17/immutable.js-solvers/</guid>
      <description>&lt;p&gt;A bit ago I wrote about writing a &lt;a href=&#34;https://blog.jverkamp.com/2021/06/25/a-generic-brute-force-backtracking-solver/&#34;&gt;generic brute force solver&lt;/a&gt; (wow, was that really two months ago?). It got &amp;hellip; complicate. Mostly, because every time I wrote a &lt;code&gt;step&lt;/code&gt; function, I had to be careful to undo the same. Wouldn&amp;rsquo;t it be nice if we could just write a step function and get backtracking for &amp;lsquo;free&amp;rsquo;?&lt;/p&gt;
&lt;p&gt;Well, with immutability you can!&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>A Generic Brute Force Backtracking Solver</title>
      <link>https://blog.jverkamp.com/2021/06/25/a-generic-brute-force-backtracking-solver/</link>
      <pubDate>Fri, 25 Jun 2021 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2021/06/25/a-generic-brute-force-backtracking-solver/</guid>
      <description>&lt;p&gt;One of the projects I&amp;rsquo;ve had vaguely in the back of my head is a sort of generic puzzle solver. I really love puzzles, but of the pencil and paper and video game varieties. So I think it would be awesome to write out a definition of a puzzle (say how to play Sudoku), give it input, and have it give me an answer back.&lt;/p&gt;
&lt;p&gt;Well, I finally got around to trying it!&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
