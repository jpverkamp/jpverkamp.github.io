<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Advent of Code on jverkamp.com</title><link>https://blog.jverkamp.com/programming/sources/advent-of-code/</link><description>Recent content in Advent of Code on jverkamp.com</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://blog.jverkamp.com/programming/sources/advent-of-code/atom.xml" rel="self" type="application/rss+xml"/><item><title>AoC 2023 Day 23: Looong Mazinator</title><link>https://blog.jverkamp.com/2023/12/23/aoc-2023-day-23-looong-mazinator/</link><pubDate>Sat, 23 Dec 2023 00:00:03 +0000</pubDate><guid>https://blog.jverkamp.com/2023/12/23/aoc-2023-day-23-looong-mazinator/</guid><description>&lt;h2 id="source-day-23-a-long-walkhttpsadventofcodecom2023day23">Source: &lt;a href="https://adventofcode.com/2023/day/23" target="_blank" rel="noopener">Day 23: A Long Walk&lt;/a>&lt;/h2>
&lt;p>&lt;a href="https://github.com/jpverkamp/advent-of-code/tree/master/2023/solutions/day23" target="_blank" rel="noopener">Full solution&lt;/a> for today (spoilers!)&lt;/p>
&lt;nav id="TableOfContents">
&lt;ul>
&lt;li>&lt;a href="#source-day-23-a-long-walkhttpsadventofcodecom2023day23">Source: &lt;a href="https://adventofcode.com/2023/day/23">Day 23: A Long Walk&lt;/a>&lt;/a>&lt;/li>
&lt;li>&lt;a href="#part-1">Part 1&lt;/a>&lt;/li>
&lt;li>&lt;a href="#part-2">Part 2&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#solution-1-brute-force">Solution 1: Brute force&lt;/a>&lt;/li>
&lt;li>&lt;a href="#solution-2-a-better-path">Solution 2: A better &lt;code>Path&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="#solution-3-finding-points-of-interest">Solution 3: Finding points of interest&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#performance">Performance&lt;/a>&lt;/li>
&lt;/ul>
&lt;/nav>
&lt;h2 id="part-1">Part 1&lt;/h2>
&lt;blockquote>
&lt;p>Find the longest non-overlapping path through a maze with walls (&lt;code>#&lt;/code>) and one way paths (&lt;code>^v&amp;lt;&amp;gt;&lt;/code>).&lt;/p>
&lt;/blockquote></description></item><item><title>AoC 2023 Day 22: Block Dropinator</title><link>https://blog.jverkamp.com/2023/12/22/aoc-2023-day-22-block-dropinator/</link><pubDate>Fri, 22 Dec 2023 00:00:03 +0000</pubDate><guid>https://blog.jverkamp.com/2023/12/22/aoc-2023-day-22-block-dropinator/</guid><description>&lt;h2 id="source-day-22-sand-slabshttpsadventofcodecom2023day22">Source: &lt;a href="https://adventofcode.com/2023/day/22" target="_blank" rel="noopener">Day 22: Sand Slabs&lt;/a>&lt;/h2>
&lt;p>&lt;a href="https://github.com/jpverkamp/advent-of-code/tree/master/2023/solutions/day22" target="_blank" rel="noopener">Full solution&lt;/a> for today (spoilers!)&lt;/p>
&lt;nav id="TableOfContents">
&lt;ul>
&lt;li>&lt;a href="#source-day-22-sand-slabshttpsadventofcodecom2023day22">Source: &lt;a href="https://adventofcode.com/2023/day/22">Day 22: Sand Slabs&lt;/a>&lt;/a>&lt;/li>
&lt;li>&lt;a href="#part-1">Part 1&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#types-and-parsing">Types and Parsing&lt;/a>&lt;/li>
&lt;li>&lt;a href="#solution">Solution&lt;/a>&lt;/li>
&lt;li>&lt;a href="#edit-1-now-with-faster-dropping">Edit 1, Now with faster dropping&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#part-2">Part 2&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#heading">&lt;/a>&lt;/li>
&lt;li>&lt;a href="#trying-other-datatypes">Trying other datatypes&lt;/a>&lt;/li>
&lt;li>&lt;a href="#remove-debugging">Remove debugging&lt;/a>&lt;/li>
&lt;li>&lt;a href="#edit-1-using-fast-drop">Edit 1, Using fast drop&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#performance">Performance&lt;/a>&lt;/li>
&lt;/ul>
&lt;/nav>
&lt;h2 id="part-1">Part 1&lt;/h2>
&lt;blockquote>
&lt;p>Given a series of 3D blocks, allow them to fall until the simulation is stable. Any cube of a block is sufficient to support another block, ignore rotations etc.&lt;/p>
&lt;p>How many blocks are not the sole supporter for any other block?&lt;/p>
&lt;/blockquote></description></item><item><title>AoC 2023 Day 21: Step Step Stepinator</title><link>https://blog.jverkamp.com/2023/12/21/aoc-2023-day-21-step-step-stepinator/</link><pubDate>Thu, 21 Dec 2023 00:00:03 +0000</pubDate><guid>https://blog.jverkamp.com/2023/12/21/aoc-2023-day-21-step-step-stepinator/</guid><description>&lt;h2 id="source-day-21-step-counterhttpsadventofcodecom2023day21">Source: &lt;a href="https://adventofcode.com/2023/day/21" target="_blank" rel="noopener">Day 21: Step Counter&lt;/a>&lt;/h2>
&lt;p>&lt;a href="https://github.com/jpverkamp/advent-of-code/tree/master/2023/solutions/day21" target="_blank" rel="noopener">Full solution&lt;/a> for today (spoilers!)&lt;/p>
&lt;nav id="TableOfContents">
&lt;ul>
&lt;li>&lt;a href="#source-day-21-step-counterhttpsadventofcodecom2023day21">Source: &lt;a href="https://adventofcode.com/2023/day/21">Day 21: Step Counter&lt;/a>&lt;/a>&lt;/li>
&lt;li>&lt;a href="#part-1">Part 1&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#parsing">Parsing&lt;/a>&lt;/li>
&lt;li>&lt;a href="#solution">Solution&lt;/a>&lt;/li>
&lt;li>&lt;a href="#re-calculating-bounds">Re-calculating Bounds&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#part-2">Part 2&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#brute-force">Brute Force&lt;/a>&lt;/li>
&lt;li>&lt;a href="#solution-1">Solution&lt;/a>&lt;/li>
&lt;li>&lt;a href="#another-option">Another option&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#performance">Performance&lt;/a>&lt;/li>
&lt;/ul>
&lt;/nav>
&lt;h2 id="part-1">Part 1&lt;/h2>
&lt;blockquote>
&lt;p>Given a(n infinite) grid of walls &lt;code>#&lt;/code>, count how many points can be reached by exactly 64 steps from a starting point.&lt;/p>
&lt;/blockquote></description></item><item><title>AoC 2023 Day 20: Flip-Flopinator</title><link>https://blog.jverkamp.com/2023/12/20/aoc-2023-day-20-flip-flopinator/</link><pubDate>Wed, 20 Dec 2023 00:00:03 +0000</pubDate><guid>https://blog.jverkamp.com/2023/12/20/aoc-2023-day-20-flip-flopinator/</guid><description>&lt;h2 id="source-day-20-pulse-propagationhttpsadventofcodecom2023day20">Source: &lt;a href="https://adventofcode.com/2023/day/20" target="_blank" rel="noopener">Day 20: Pulse Propagation&lt;/a>&lt;/h2>
&lt;p>&lt;a href="https://github.com/jpverkamp/advent-of-code/tree/master/2023/solutions/day20" target="_blank" rel="noopener">Full solution&lt;/a> for today (spoilers!)&lt;/p>
&lt;nav id="TableOfContents">
&lt;ul>
&lt;li>&lt;a href="#source-day-20-pulse-propagationhttpsadventofcodecom2023day20">Source: &lt;a href="https://adventofcode.com/2023/day/20">Day 20: Pulse Propagation&lt;/a>&lt;/a>&lt;/li>
&lt;li>&lt;a href="#part-1">Part 1&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#types-and-parsing">Types and Parsing&lt;/a>&lt;/li>
&lt;li>&lt;a href="#solution">Solution&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#part-2">Part 2&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#solution-1-brute-force">Solution 1: Brute Force&lt;/a>&lt;/li>
&lt;li>&lt;a href="#a-pretty-picture">A pretty picture&lt;/a>&lt;/li>
&lt;li>&lt;a href="#solution-2-least-common-multiple">Solution 2: Least common multiple&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#performance">Performance&lt;/a>&lt;/li>
&lt;/ul>
&lt;/nav>
&lt;h2 id="part-1">Part 1&lt;/h2>
&lt;blockquote>
&lt;p>Simulate a virtual circuit with &lt;code>high&lt;/code> and &lt;code>low&lt;/code> pulses and four kinds of chips:&lt;/p>
&lt;ul>
&lt;li>Broadcast - Re-transmit all pulses&lt;/li>
&lt;li>Flip-flops - On a &lt;code>low&lt;/code> pulse, toggle internal state; if it was on, send &lt;code>high&lt;/code>; otherwise send &lt;code>low&lt;/code>&lt;/li>
&lt;li>Conjunction - Remember input from each attached module; if all inputs were &lt;code>high&lt;/code>, send a &lt;code>low&lt;/code>, otherwise send &lt;code>high&lt;/code>&lt;/li>
&lt;li>Output - Do nothing; just receive pulses&lt;/li>
&lt;/ul>
&lt;p>Count the product of &lt;code>low&lt;/code> and &lt;code>high&lt;/code> pulses sent after 1000 &lt;code>low&lt;/code> inputs to &lt;code>broadcaster&lt;/code>.&lt;/p>
&lt;/blockquote></description></item><item><title>AoC 2023 Day 19: Assembly Lininator</title><link>https://blog.jverkamp.com/2023/12/19/aoc-2023-day-19-assembly-lininator/</link><pubDate>Tue, 19 Dec 2023 00:00:03 +0000</pubDate><guid>https://blog.jverkamp.com/2023/12/19/aoc-2023-day-19-assembly-lininator/</guid><description>&lt;h2 id="source-day-19-aplentyhttpsadventofcodecom2023day19">Source: &lt;a href="https://adventofcode.com/2023/day/19" target="_blank" rel="noopener">Day 19: Aplenty&lt;/a>&lt;/h2>
&lt;p>&lt;a href="https://github.com/jpverkamp/advent-of-code/tree/master/2023/solutions/day19" target="_blank" rel="noopener">Full solution&lt;/a> for today (spoilers!)&lt;/p>
&lt;nav id="TableOfContents">
&lt;ul>
&lt;li>&lt;a href="#source-day-19-aplentyhttpsadventofcodecom2023day19">Source: &lt;a href="https://adventofcode.com/2023/day/19">Day 19: Aplenty&lt;/a>&lt;/a>&lt;/li>
&lt;li>&lt;a href="#part-1">Part 1&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#types-and-parsing">Types and Parsing&lt;/a>&lt;/li>
&lt;li>&lt;a href="#simulation">Simulation&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#part-2">Part 2&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#brute-force">Brute Force&lt;/a>&lt;/li>
&lt;li>&lt;a href="#ranges">Ranges&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#performance">Performance&lt;/a>&lt;/li>
&lt;/ul>
&lt;/nav>
&lt;h2 id="part-1">Part 1&lt;/h2>
&lt;blockquote>
&lt;p>You are given a series of parts with 4 ratings as such:&lt;/p>
&lt;p>&lt;code>{x=787,m=2655,a=1222,s=2876}&lt;/code>&lt;/p>
&lt;p>In addition, you are given a series of rules describing a graph as such:&lt;/p>
&lt;p>&lt;code>px{a&amp;lt;2006:qkq,m&amp;gt;2090:A,rfg}&lt;/code>&lt;/p>
&lt;p>In this example, if you are at the node &lt;code>px&lt;/code>, if &lt;code>a &amp;lt; 2006&lt;/code>, move to &lt;code>qkq&lt;/code>. Otherwise, if &lt;code>m &amp;gt; 2090&lt;/code> move to &lt;code>A&lt;/code>. If no other case matches, the last defaults to &lt;code>rfg&lt;/code>.&lt;/p>
&lt;p>&lt;code>A&lt;/code> and &lt;code>R&lt;/code> are special cases for accept and reject.&lt;/p>
&lt;p>Calculate the sum of sum of all four ratings for all nodes that end at &lt;code>Accept&lt;/code>.&lt;/p>
&lt;/blockquote></description></item><item><title>AoC 2023 Day 18: Flood Fillinator</title><link>https://blog.jverkamp.com/2023/12/18/aoc-2023-day-18-flood-fillinator/</link><pubDate>Mon, 18 Dec 2023 00:00:03 +0000</pubDate><guid>https://blog.jverkamp.com/2023/12/18/aoc-2023-day-18-flood-fillinator/</guid><description>&lt;h2 id="source-day-18-lavaduct-lagoonhttpsadventofcodecom2023day18">Source: &lt;a href="https://adventofcode.com/2023/day/18" target="_blank" rel="noopener">Day 18: Lavaduct Lagoon&lt;/a>&lt;/h2>
&lt;p>&lt;a href="https://github.com/jpverkamp/advent-of-code/tree/master/2023/solutions/day18" target="_blank" rel="noopener">Full solution&lt;/a> for today (spoilers!)&lt;/p>
&lt;nav id="TableOfContents">
&lt;ul>
&lt;li>&lt;a href="#source-day-18-lavaduct-lagoonhttpsadventofcodecom2023day18">Source: &lt;a href="https://adventofcode.com/2023/day/18">Day 18: Lavaduct Lagoon&lt;/a>&lt;/a>&lt;/li>
&lt;li>&lt;a href="#part-1">Part 1&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#types-and-parsing">Types and Parsing&lt;/a>&lt;/li>
&lt;li>&lt;a href="#solution">Solution&lt;/a>&lt;/li>
&lt;li>&lt;a href="#adding-flood-fill-to-grid">Adding flood fill to Grid&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#part-2">Part 2&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#using-math">Using MATH&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#performance">Performance&lt;/a>&lt;/li>
&lt;/ul>
&lt;/nav>
&lt;h2 id="part-1">Part 1&lt;/h2>
&lt;blockquote>
&lt;p>Given a sequence of direction + distance that draws a polygon, calculate the area.&lt;/p>
&lt;/blockquote></description></item><item><title>AoC 2023 Day 17: A-Starinator</title><link>https://blog.jverkamp.com/2023/12/17/aoc-2023-day-17-a-starinator/</link><pubDate>Sun, 17 Dec 2023 00:00:03 +0000</pubDate><guid>https://blog.jverkamp.com/2023/12/17/aoc-2023-day-17-a-starinator/</guid><description>&lt;h2 id="source-day-17-clumsy-cruciblehttpsadventofcodecom2023day17">Source: &lt;a href="https://adventofcode.com/2023/day/17" target="_blank" rel="noopener">Day 17: Clumsy Crucible&lt;/a>&lt;/h2>
&lt;p>&lt;a href="https://github.com/jpverkamp/advent-of-code/tree/master/2023/solutions/day17" target="_blank" rel="noopener">Full solution&lt;/a> for today (spoilers!)&lt;/p>
&lt;nav id="TableOfContents">
&lt;ul>
&lt;li>&lt;a href="#source-day-17-clumsy-cruciblehttpsadventofcodecom2023day17">Source: &lt;a href="https://adventofcode.com/2023/day/17">Day 17: Clumsy Crucible&lt;/a>&lt;/a>&lt;/li>
&lt;li>&lt;a href="#part-1">Part 1&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#types-and-parsing">Types and Parsing&lt;/a>&lt;/li>
&lt;li>&lt;a href="#attempts">Attempts&lt;/a>&lt;/li>
&lt;li>&lt;a href="#solution">Solution&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#part-2">Part 2&lt;/a>&lt;/li>
&lt;li>&lt;a href="#performance">Performance&lt;/a>&lt;/li>
&lt;/ul>
&lt;/nav>
&lt;h2 id="part-1">Part 1&lt;/h2>
&lt;blockquote>
&lt;p>Given a grid of costs, find the shortest path from top left to bottom right. You may not double back or go straight more than 3 steps in a row.&lt;/p>
&lt;/blockquote></description></item><item><title>AoC 2023 Day 16: Reflectinator</title><link>https://blog.jverkamp.com/2023/12/16/aoc-2023-day-16-reflectinator/</link><pubDate>Sat, 16 Dec 2023 00:00:03 +0000</pubDate><guid>https://blog.jverkamp.com/2023/12/16/aoc-2023-day-16-reflectinator/</guid><description>&lt;h2 id="source-day-16-the-floor-will-be-lavahttpsadventofcodecom2023day16">Source: &lt;a href="https://adventofcode.com/2023/day/16" target="_blank" rel="noopener">Day 16: The Floor Will Be Lava&lt;/a>&lt;/h2>
&lt;p>&lt;video controls src="https://blog.jverkamp.com/embeds/2023/aoc23-16.mp4">&lt;/video>&lt;/p>
&lt;p>&lt;a href="https://github.com/jpverkamp/advent-of-code/tree/master/2023/solutions/day16" target="_blank" rel="noopener">Full solution&lt;/a> for today (spoilers!)&lt;/p>
&lt;nav id="TableOfContents">
&lt;ul>
&lt;li>&lt;a href="#source-day-16-the-floor-will-be-lavahttpsadventofcodecom2023day16">Source: &lt;a href="https://adventofcode.com/2023/day/16">Day 16: The Floor Will Be Lava&lt;/a>&lt;/a>&lt;/li>
&lt;li>&lt;a href="#part-1">Part 1&lt;/a>&lt;/li>
&lt;li>&lt;a href="#part-2">Part 2&lt;/a>&lt;/li>
&lt;li>&lt;a href="#performance">Performance&lt;/a>&lt;/li>
&lt;li>&lt;a href="#grid">Grid&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#implementation">Implementation&lt;/a>&lt;/li>
&lt;li>&lt;a href="#point">Point&lt;/a>&lt;/li>
&lt;li>&lt;a href="#bounds">Bounds&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#edit-1-adding-to_string-and-to_image-for-grid">Edit 1, Adding to_string and to_image for Grid&lt;/a>&lt;/li>
&lt;/ul>
&lt;/nav>
&lt;h2 id="part-1">Part 1&lt;/h2>
&lt;blockquote>
&lt;p>You are given a grid of mirrors (&lt;code>|-\/&lt;/code>) and empty space (&lt;code>.&lt;/code>).&lt;/p>
&lt;p>Diagonal mirrors just relect the light.&lt;/p>
&lt;p>The horizontal and vertical mirrors are splitters, light hitting them head on (like &lt;code>&amp;gt;|&lt;/code>) will split to go both directions. Light hitting edge on will just go through it.&lt;/p>
&lt;p>Starting in the top left going East, how many total tiles will a light beam illuminate?&lt;/p>
&lt;/blockquote></description></item><item><title>AoC 2023 Day 15: Hashinator</title><link>https://blog.jverkamp.com/2023/12/15/aoc-2023-day-15-hashinator/</link><pubDate>Fri, 15 Dec 2023 00:00:03 +0000</pubDate><guid>https://blog.jverkamp.com/2023/12/15/aoc-2023-day-15-hashinator/</guid><description>&lt;h2 id="source-day-15-lens-libraryhttpsadventofcodecom2023day15">Source: &lt;a href="https://adventofcode.com/2023/day/15" target="_blank" rel="noopener">Day 15: Lens Library&lt;/a>&lt;/h2>
&lt;p>&lt;a href="https://github.com/jpverkamp/advent-of-code/tree/master/2023/solutions/day15" target="_blank" rel="noopener">Full solution&lt;/a> for today (spoilers!)&lt;/p>
&lt;nav id="TableOfContents">
&lt;ul>
&lt;li>&lt;a href="#source-day-15-lens-libraryhttpsadventofcodecom2023day15">Source: &lt;a href="https://adventofcode.com/2023/day/15">Day 15: Lens Library&lt;/a>&lt;/a>&lt;/li>
&lt;li>&lt;a href="#part-1">Part 1&lt;/a>&lt;/li>
&lt;li>&lt;a href="#part-2">Part 2&lt;/a>&lt;/li>
&lt;li>&lt;a href="#performance">Performance&lt;/a>&lt;/li>
&lt;/ul>
&lt;/nav>
&lt;h2 id="part-1">Part 1&lt;/h2>
&lt;blockquote>
&lt;p>Hash each input (comma separated) with &lt;code>h(v, c) = (v + c) * 17&lt;/code> (modulo 256 / as a byte). Sum these values.&lt;/p>
&lt;/blockquote></description></item><item><title>AoC 2023 Day 14: Spininator</title><link>https://blog.jverkamp.com/2023/12/14/aoc-2023-day-14-spininator/</link><pubDate>Thu, 14 Dec 2023 00:00:03 +0000</pubDate><guid>https://blog.jverkamp.com/2023/12/14/aoc-2023-day-14-spininator/</guid><description>&lt;h2 id="source-day-14-parabolic-reflector-dishhttpsadventofcodecom2023day14">Source: &lt;a href="https://adventofcode.com/2023/day/14" target="_blank" rel="noopener">Day 14: Parabolic Reflector Dish&lt;/a>&lt;/h2>
&lt;p>&lt;video controls src="https://blog.jverkamp.com/embeds/2023/aoc23-14-direction.mp4">&lt;/video>&lt;/p>
&lt;p>&lt;a href="https://github.com/jpverkamp/advent-of-code/tree/master/2023/solutions/day14" target="_blank" rel="noopener">Full solution&lt;/a> for today (spoilers!)&lt;/p>
&lt;nav id="TableOfContents">
&lt;ul>
&lt;li>&lt;a href="#source-day-14-parabolic-reflector-dishhttpsadventofcodecom2023day14">Source: &lt;a href="https://adventofcode.com/2023/day/14">Day 14: Parabolic Reflector Dish&lt;/a>&lt;/a>&lt;/li>
&lt;li>&lt;a href="#part-1">Part 1&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#types-and-parsing">Types and parsing&lt;/a>&lt;/li>
&lt;li>&lt;a href="#simulation">Simulation&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#part-2">Part 2&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#solution-spinning-each-way">Solution: Spinning each way&lt;/a>&lt;/li>
&lt;li>&lt;a href="#optimization-1-cycle-detection">Optimization 1: Cycle Detection&lt;/a>&lt;/li>
&lt;li>&lt;a href="#optimization-2-data-structures">Optimization 2: Data Structures&lt;/a>&lt;/li>
&lt;li>&lt;a href="#optimization-3-multislide">Optimization 3: Multislide&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#performance">Performance&lt;/a>&lt;/li>
&lt;li>&lt;a href="#edit-1-optimization-4--removing-a-debugging-line">Edit 1, Optimization 4: &amp;hellip; removing a debugging line&lt;/a>&lt;/li>
&lt;li>&lt;a href="#edit-2-optimization-5-pre-sorting-the-rocks">Edit 2, Optimization 5: Pre-sorting the rocks&lt;/a>&lt;/li>
&lt;li>&lt;a href="#edit-3-rendering">Edit 3, Rendering&lt;/a>&lt;/li>
&lt;/ul>
&lt;/nav>
&lt;h2 id="part-1">Part 1&lt;/h2>
&lt;blockquote>
&lt;p>Given a grid of &lt;code>#&lt;/code> and &lt;code>O&lt;/code> (among empty &lt;code>.&lt;/code> points) where &lt;code>O&lt;/code> can move, slide each &lt;code>O&lt;/code> as far north as it can. Score each based on how far north it is.&lt;/p>
&lt;/blockquote></description></item><item><title>AoC 2023 Day 13: Reflectinator</title><link>https://blog.jverkamp.com/2023/12/13/aoc-2023-day-13-reflectinator/</link><pubDate>Wed, 13 Dec 2023 00:00:03 +0000</pubDate><guid>https://blog.jverkamp.com/2023/12/13/aoc-2023-day-13-reflectinator/</guid><description>&lt;h2 id="source-day-13-point-of-incidencehttpsadventofcodecom2023day13">Source: &lt;a href="https://adventofcode.com/2023/day/13" target="_blank" rel="noopener">Day 13: Point of Incidence&lt;/a>&lt;/h2>
&lt;p>&lt;a href="https://github.com/jpverkamp/advent-of-code/tree/master/2023/solutions/day13" target="_blank" rel="noopener">Full solution&lt;/a> for today (spoilers!)&lt;/p>
&lt;nav id="TableOfContents">
&lt;ul>
&lt;li>&lt;a href="#source-day-13-point-of-incidencehttpsadventofcodecom2023day13">Source: &lt;a href="https://adventofcode.com/2023/day/13">Day 13: Point of Incidence&lt;/a>&lt;/a>&lt;/li>
&lt;li>&lt;a href="#part-1">Part 1&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#basic-types-and-parsing">Basic types and parsing&lt;/a>&lt;/li>
&lt;li>&lt;a href="#reflection">Reflection&lt;/a>&lt;/li>
&lt;li>&lt;a href="#solution">Solution&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#part-2">Part 2&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#refactoring">Refactoring&lt;/a>&lt;/li>
&lt;li>&lt;a href="#solution-1">Solution&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#performance">Performance&lt;/a>&lt;/li>
&lt;/ul>
&lt;/nav>
&lt;h2 id="part-1">Part 1&lt;/h2>
&lt;blockquote>
&lt;p>You are given a grid of &lt;code>.&lt;/code> and &lt;code>#&lt;/code>. Find the (single) axis of reflection (between two rows or columns).&lt;/p>
&lt;/blockquote></description></item><item><title>AoC 2023 Day 12: Question Markinator</title><link>https://blog.jverkamp.com/2023/12/12/aoc-2023-day-12-question-markinator/</link><pubDate>Tue, 12 Dec 2023 00:00:03 +0000</pubDate><guid>https://blog.jverkamp.com/2023/12/12/aoc-2023-day-12-question-markinator/</guid><description>&lt;h2 id="source-day-12-hot-springshttpsadventofcodecom2023day12">Source: &lt;a href="https://adventofcode.com/2023/day/12" target="_blank" rel="noopener">Day 12: Hot Springs&lt;/a>&lt;/h2>
&lt;p>&lt;a href="https://github.com/jpverkamp/advent-of-code/tree/master/2023/solutions/day12" target="_blank" rel="noopener">Full solution&lt;/a> for today (spoilers!)&lt;/p>
&lt;nav id="TableOfContents">
&lt;ul>
&lt;li>&lt;a href="#source-day-12-hot-springshttpsadventofcodecom2023day12">Source: &lt;a href="https://adventofcode.com/2023/day/12">Day 12: Hot Springs&lt;/a>&lt;/a>&lt;/li>
&lt;li>&lt;a href="#part-1">Part 1&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#types-and-parsing">Types and Parsing&lt;/a>&lt;/li>
&lt;li>&lt;a href="#solution">Solution&lt;/a>&lt;/li>
&lt;li>&lt;a href="#cleaning-up">Cleaning up&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#part-2">Part 2&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#almost-brute-force">(Almost) Brute Force&lt;/a>&lt;/li>
&lt;li>&lt;a href="#caching">Caching&lt;/a>&lt;/li>
&lt;li>&lt;a href="#a-choice-of-map">A choice of map&lt;/a>&lt;/li>
&lt;li>&lt;a href="#rewriting-it-with-types">Rewriting it with types&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#performance">Performance&lt;/a>&lt;/li>
&lt;/ul>
&lt;/nav>
&lt;h2 id="part-1">Part 1&lt;/h2>
&lt;blockquote>
&lt;p>Given a sequence of &lt;code>#.?&lt;/code> as on, off, and unknown and a sequence of group sizes, determine how many possible arrangements there are that match the given groups.&lt;/p>
&lt;p>More specifically, if you have &lt;code>???.## 1,2&lt;/code> you need a single &lt;code>#&lt;/code> and a set of two &lt;code>##&lt;/code>, there are three possibilities: &lt;code>#...###&lt;/code>, &lt;code>.#..###&lt;/code>, and &lt;code>..#.###&lt;/code>.&lt;/p>
&lt;/blockquote></description></item><item><title>AoC 2023 Day 11: Big Banginator</title><link>https://blog.jverkamp.com/2023/12/11/aoc-2023-day-11-big-banginator/</link><pubDate>Mon, 11 Dec 2023 00:00:03 +0000</pubDate><guid>https://blog.jverkamp.com/2023/12/11/aoc-2023-day-11-big-banginator/</guid><description>&lt;h2 id="source-day-11-cosmic-expansionhttpsadventofcodecom2023day11">Source: &lt;a href="https://adventofcode.com/2023/day/11" target="_blank" rel="noopener">Day 11: Cosmic Expansion&lt;/a>&lt;/h2>
&lt;p>&lt;a href="https://github.com/jpverkamp/advent-of-code/tree/master/2023/solutions/day11" target="_blank" rel="noopener">Full solution&lt;/a> for today (spoilers!)&lt;/p>
&lt;nav id="TableOfContents">
&lt;ul>
&lt;li>&lt;a href="#source-day-11-cosmic-expansionhttpsadventofcodecom2023day11">Source: &lt;a href="https://adventofcode.com/2023/day/11">Day 11: Cosmic Expansion&lt;/a>&lt;/a>&lt;/li>
&lt;li>&lt;a href="#part-1">Part 1&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#parsing">Parsing&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#part-2">Part 2&lt;/a>&lt;/li>
&lt;li>&lt;a href="#performance">Performance&lt;/a>&lt;/li>
&lt;/ul>
&lt;/nav>
&lt;h2 id="part-1">Part 1&lt;/h2>
&lt;blockquote>
&lt;p>Read a grid of &lt;code>#&lt;/code> (stars) and &lt;code>.&lt;/code> (empty space). For each completely empty line or row, add another. Calculate the sum of the &lt;a href="https://en.wikipedia.org/wiki/Manhattan%20distances">Manhattan distances&lt;/a> between all pairs of stars.&lt;/p>
&lt;/blockquote></description></item><item><title>AoC 2023 Day 10: Pipinator</title><link>https://blog.jverkamp.com/2023/12/10/aoc-2023-day-10-pipinator/</link><pubDate>Sun, 10 Dec 2023 00:00:03 +0000</pubDate><guid>https://blog.jverkamp.com/2023/12/10/aoc-2023-day-10-pipinator/</guid><description>&lt;h2 id="source-day-10-pipe-mazehttpsadventofcodecom2023day10">Source: &lt;a href="https://adventofcode.com/2023/day/10" target="_blank" rel="noopener">Day 10: Pipe Maze&lt;/a>&lt;/h2>
&lt;p>&lt;a href="https://github.com/jpverkamp/advent-of-code/tree/master/2023/solutions/day10" target="_blank" rel="noopener">Full solution&lt;/a> for today (spoilers!)&lt;/p>
&lt;nav id="TableOfContents">
&lt;ul>
&lt;li>&lt;a href="#source-day-10-pipe-mazehttpsadventofcodecom2023day10">Source: &lt;a href="https://adventofcode.com/2023/day/10">Day 10: Pipe Maze&lt;/a>&lt;/a>&lt;/li>
&lt;li>&lt;a href="#part-1">Part 1&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#types-and-parsing">Types and Parsing&lt;/a>&lt;/li>
&lt;li>&lt;a href="#iterating">Iterating&lt;/a>&lt;/li>
&lt;li>&lt;a href="#solution">Solution&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#part-2">Part 2&lt;/a>&lt;/li>
&lt;li>&lt;a href="#performance">Performance&lt;/a>&lt;/li>
&lt;/ul>
&lt;/nav>
&lt;h2 id="part-1">Part 1&lt;/h2>
&lt;blockquote>
&lt;p>You are given as input an &lt;a href="https://en.wikipedia.org/wiki/ASCII%20art">ASCII art&lt;/a> pipe diagram with straight pipes &lt;code>|-&lt;/code>, right angle turns &lt;code>LJ7F&lt;/code>, ground &lt;code>.&lt;/code>, and a start tile &lt;code>S&lt;/code>.&lt;/p>
&lt;p>The start tile will be part of a loop of pipes.&lt;/p>
&lt;p>Find the distance to the furthest connected pipe segment from &lt;code>S&lt;/code> (or half the length of the loop).&lt;/p>
&lt;/blockquote></description></item><item><title>AoC 2023 Day 9: Stackinator</title><link>https://blog.jverkamp.com/2023/12/09/aoc-2023-day-9-stackinator/</link><pubDate>Sat, 09 Dec 2023 00:00:03 +0000</pubDate><guid>https://blog.jverkamp.com/2023/12/09/aoc-2023-day-9-stackinator/</guid><description>&lt;h2 id="source-day-9-mirage-maintenancehttpsadventofcodecom2023day9">Source: &lt;a href="https://adventofcode.com/2023/day/9" target="_blank" rel="noopener">Day 9: Mirage Maintenance&lt;/a>&lt;/h2>
&lt;p>&lt;a href="https://github.com/jpverkamp/advent-of-code/tree/master/2023/solutions/day09" target="_blank" rel="noopener">Full solution&lt;/a> for today (spoilers!)&lt;/p>
&lt;nav id="TableOfContents">
&lt;ul>
&lt;li>&lt;a href="#source-day-9-mirage-maintenancehttpsadventofcodecom2023day9">Source: &lt;a href="https://adventofcode.com/2023/day/9">Day 9: Mirage Maintenance&lt;/a>&lt;/a>&lt;/li>
&lt;li>&lt;a href="#part-1">Part 1&lt;/a>&lt;/li>
&lt;li>&lt;a href="#part-2">Part 2&lt;/a>&lt;/li>
&lt;li>&lt;a href="#performance">Performance&lt;/a>&lt;/li>
&lt;/ul>
&lt;/nav>
&lt;h2 id="part-1">Part 1&lt;/h2>
&lt;blockquote>
&lt;p>Given a list of terms, repeatedly calculate the differences of terms until these differences are 0. So:&lt;/p>
&lt;pre>&lt;code>0 3 6 9 12 15
3 3 3 3 3
0 0 0 0
&lt;/code>&lt;/pre>
&lt;p>Calculate the sum of next terms for each sequence (18 for this one).&lt;/p>
&lt;/blockquote></description></item><item><title>AoC 2023 Day 8: Mazinator</title><link>https://blog.jverkamp.com/2023/12/08/aoc-2023-day-8-mazinator/</link><pubDate>Fri, 08 Dec 2023 00:00:03 +0000</pubDate><guid>https://blog.jverkamp.com/2023/12/08/aoc-2023-day-8-mazinator/</guid><description>&lt;h2 id="source-day-8-haunted-wastelandhttpsadventofcodecom2023day8">Source: &lt;a href="https://adventofcode.com/2023/day/8" target="_blank" rel="noopener">Day 8: Haunted Wasteland&lt;/a>&lt;/h2>
&lt;p>&lt;a href="https://github.com/jpverkamp/advent-of-code/tree/master/2023/solutions/day08" target="_blank" rel="noopener">Full solution&lt;/a> for today (spoilers!)&lt;/p>
&lt;nav id="TableOfContents">
&lt;ul>
&lt;li>&lt;a href="#source-day-8-haunted-wastelandhttpsadventofcodecom2023day8">Source: &lt;a href="https://adventofcode.com/2023/day/8">Day 8: Haunted Wasteland&lt;/a>&lt;/a>&lt;/li>
&lt;li>&lt;a href="#part-1">Part 1&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#types-and-parsing">Types and Parsing&lt;/a>&lt;/li>
&lt;li>&lt;a href="#solution">Solution&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#part-2">Part 2&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#brute-force">Brute Force&lt;/a>&lt;/li>
&lt;li>&lt;a href="#detecting-cycles">Detecting Cycles&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#performance">Performance&lt;/a>&lt;/li>
&lt;/ul>
&lt;/nav>
&lt;h2 id="part-1">Part 1&lt;/h2>
&lt;blockquote>
&lt;p>Given a (repeated) sequence of moves (&lt;code>L&lt;/code> for left and &lt;code>R&lt;/code> for right) and a directed graph where each node has two neighbors (left and right), count how many total steps it takes to get from the node &lt;code>AAA&lt;/code> to the node &lt;code>ZZZ&lt;/code>. The sequence of moves can (and will) need to repeat.&lt;/p>
&lt;/blockquote></description></item><item><title>AoC 2023 Day 7: Pokinator</title><link>https://blog.jverkamp.com/2023/12/07/aoc-2023-day-7-pokinator/</link><pubDate>Thu, 07 Dec 2023 00:00:03 +0000</pubDate><guid>https://blog.jverkamp.com/2023/12/07/aoc-2023-day-7-pokinator/</guid><description>&lt;h2 id="source-day-7-camel-cardshttpsadventofcodecom2023day7">Source: &lt;a href="https://adventofcode.com/2023/day/7" target="_blank" rel="noopener">Day 7: Camel Cards&lt;/a>&lt;/h2>
&lt;p>&lt;a href="https://github.com/jpverkamp/advent-of-code/tree/master/2023/solutions/day07" target="_blank" rel="noopener">Full solution&lt;/a> for today (spoilers!)&lt;/p>
&lt;nav id="TableOfContents">
&lt;ul>
&lt;li>&lt;a href="#source-day-7-camel-cardshttpsadventofcodecom2023day7">Source: &lt;a href="https://adventofcode.com/2023/day/7">Day 7: Camel Cards&lt;/a>&lt;/a>&lt;/li>
&lt;li>&lt;a href="#part-1">Part 1&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#types-and-parsing">Types and Parsing&lt;/a>&lt;/li>
&lt;li>&lt;a href="#solving-the-problem">Solving the Problem&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#part-2">Part 2&lt;/a>&lt;/li>
&lt;li>&lt;a href="#performance">Performance&lt;/a>&lt;/li>
&lt;/ul>
&lt;/nav>
&lt;h2 id="part-1">Part 1&lt;/h2>
&lt;blockquote>
&lt;p>Simulate a limited poker game with no suits and break otherwise tied hands &lt;a href="https://en.wikipedia.org/wiki/lexicographically">lexicographically&lt;/a> (&lt;code>AAAA2&lt;/code> beats &lt;code>AKAAA&lt;/code>) because the the hands are both four of a kind, the first cards are both &lt;code>A&lt;/code>, but the second &lt;code>A&lt;/code> beats the &lt;code>K&lt;/code>. It doesn&amp;rsquo;t matter that the first hand&amp;rsquo;s off card was a &lt;code>2&lt;/code>&lt;/p>
&lt;p>Order all hands then calculate the sum of the ordering of hands (1 for best etc) times the bet for each.&lt;/p>
&lt;/blockquote></description></item><item><title>AoC 2023 Day 6: Racinator</title><link>https://blog.jverkamp.com/2023/12/06/aoc-2023-day-6-racinator/</link><pubDate>Wed, 06 Dec 2023 00:00:03 +0000</pubDate><guid>https://blog.jverkamp.com/2023/12/06/aoc-2023-day-6-racinator/</guid><description>&lt;h2 id="source-day-6-wait-for-ithttpsadventofcodecom2023day6">Source: &lt;a href="https://adventofcode.com/2023/day/6" target="_blank" rel="noopener">Day 6: Wait For It&lt;/a>&lt;/h2>
&lt;p>&lt;a href="https://github.com/jpverkamp/advent-of-code/tree/master/2023/solutions/day06" target="_blank" rel="noopener">Full solution&lt;/a> for today (spoilers!)&lt;/p>
&lt;nav id="TableOfContents">
&lt;ul>
&lt;li>&lt;a href="#source-day-6-wait-for-ithttpsadventofcodecom2023day6">Source: &lt;a href="https://adventofcode.com/2023/day/6">Day 6: Wait For It&lt;/a>&lt;/a>&lt;/li>
&lt;li>&lt;a href="#part-1">Part 1&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#types-and-parsing">Types and Parsing&lt;/a>&lt;/li>
&lt;li>&lt;a href="#initial-brute-force-solution">Initial Brute Force Solution&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#part-2">Part 2&lt;/a>&lt;/li>
&lt;li>&lt;a href="#premature-optimization">(Premature) Optimization&lt;/a>&lt;/li>
&lt;/ul>
&lt;/nav>
&lt;h2 id="part-1">Part 1&lt;/h2>
&lt;blockquote>
&lt;p>Simulate charging up race boats with the behavior that waiting X seconds to start means you move at X units per second. Given time allowed and a target distance, determine how many (integer) numbers of seconds will beat the target distance.&lt;/p>
&lt;/blockquote></description></item><item><title>AoC 2023 Day 5: Growinator</title><link>https://blog.jverkamp.com/2023/12/05/aoc-2023-day-5-growinator/</link><pubDate>Tue, 05 Dec 2023 00:00:03 +0000</pubDate><guid>https://blog.jverkamp.com/2023/12/05/aoc-2023-day-5-growinator/</guid><description>&lt;h2 id="source-day-5-if-you-give-a-seed-a-fertilizerhttpsadventofcodecom2023day5">Source: &lt;a href="https://adventofcode.com/2023/day/5" target="_blank" rel="noopener">Day 5: If You Give A Seed A Fertilizer&lt;/a>&lt;/h2>
&lt;p>&lt;a href="https://github.com/jpverkamp/advent-of-code/tree/master/2023/solutions/day05" target="_blank" rel="noopener">Full solution&lt;/a> for today (spoilers!)&lt;/p>
&lt;nav id="TableOfContents">
&lt;ul>
&lt;li>&lt;a href="#source-day-5-if-you-give-a-seed-a-fertilizerhttpsadventofcodecom2023day5">Source: &lt;a href="https://adventofcode.com/2023/day/5">Day 5: If You Give A Seed A Fertilizer&lt;/a>&lt;/a>&lt;/li>
&lt;li>&lt;a href="#part-1">Part 1&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#types">Types&lt;/a>&lt;/li>
&lt;li>&lt;a href="#parsing">Parsing&lt;/a>&lt;/li>
&lt;li>&lt;a href="#solution">Solution&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#part-2">Part 2&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#solution-1-brute-force">Solution 1: Brute Force&lt;/a>&lt;/li>
&lt;li>&lt;a href="#solution-2-parallel-brute-force">Solution 2: Parallel Brute Force&lt;/a>&lt;/li>
&lt;li>&lt;a href="#solution-3-treat-the-ranges-as--ranges">Solution 3: Treat the Ranges as &amp;hellip; Ranges&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#performance">Performance&lt;/a>&lt;/li>
&lt;/ul>
&lt;/nav>
&lt;h2 id="part-1">Part 1&lt;/h2>
&lt;blockquote>
&lt;p>You are given a set of initial values (seeds) and a series of range maps (where a range of numbers &lt;code>src..src+len&lt;/code> maps to &lt;code>dst..dst+len&lt;/code>). Apply each range map in tur, return the lowest resulting value.&lt;/p>
&lt;/blockquote></description></item><item><title>AoC 2023 Day 4: Scratchinator</title><link>https://blog.jverkamp.com/2023/12/04/aoc-2023-day-4-scratchinator/</link><pubDate>Mon, 04 Dec 2023 00:00:03 +0000</pubDate><guid>https://blog.jverkamp.com/2023/12/04/aoc-2023-day-4-scratchinator/</guid><description>&lt;h2 id="source-day-4-scratchcardshttpsadventofcodecom2023day4">Source: &lt;a href="https://adventofcode.com/2023/day/4" target="_blank" rel="noopener">Day 4: Scratchcards&lt;/a>&lt;/h2>
&lt;p>&lt;a href="https://github.com/jpverkamp/advent-of-code/tree/master/2023/solutions/day04" target="_blank" rel="noopener">Full solution&lt;/a> for today (spoilers!). Note: I did slightly change my solutions template after writing this blog post, so the final solution is structured slightly differently than the code in this post. The functionality itself hasn&amp;rsquo;t changed.&lt;/p>
&lt;nav id="TableOfContents">
&lt;ul>
&lt;li>&lt;a href="#source-day-4-scratchcardshttpsadventofcodecom2023day4">Source: &lt;a href="https://adventofcode.com/2023/day/4">Day 4: Scratchcards&lt;/a>&lt;/a>&lt;/li>
&lt;li>&lt;a href="#part-1">Part 1&lt;/a>&lt;/li>
&lt;li>&lt;a href="#part-2">Part 2&lt;/a>&lt;/li>
&lt;li>&lt;a href="#performance">Performance&lt;/a>&lt;/li>
&lt;/ul>
&lt;/nav>
&lt;h2 id="part-1">Part 1&lt;/h2>
&lt;blockquote>
&lt;p>Simulate &lt;a href="https://en.wikipedia.org/wiki/scratchcards">scratchcards&lt;/a>. Given a list of winning numbers and guessed numbers, count how many guessed numbers are in the winning list. Your score is 1, 2, 4, 8, &amp;hellip; for 1, 2, 3, 4, &amp;hellip; matching numbers.&lt;/p>
&lt;/blockquote></description></item><item><title>AoC 2023 Day 3: Gearinator</title><link>https://blog.jverkamp.com/2023/12/03/aoc-2023-day-3-gearinator/</link><pubDate>Sun, 03 Dec 2023 00:00:03 +0000</pubDate><guid>https://blog.jverkamp.com/2023/12/03/aoc-2023-day-3-gearinator/</guid><description>&lt;h2 id="source-day-3-gear-ratioshttpsadventofcodecom2023day3">Source: &lt;a href="https://adventofcode.com/2023/day/3" target="_blank" rel="noopener">Day 3: Gear Ratios&lt;/a>&lt;/h2>
&lt;p>&lt;a href="https://github.com/jpverkamp/advent-of-code/tree/master/2023/solutions/day03" target="_blank" rel="noopener">Full solution&lt;/a> for today (spoilers!). Note: I did slightly change my solutions template after writing this blog post, so the final solution is structured slightly differently than the code in this post. The functionality itself hasn&amp;rsquo;t changed.&lt;/p>
&lt;nav id="TableOfContents">
&lt;ul>
&lt;li>&lt;a href="#source-day-3-gear-ratioshttpsadventofcodecom2023day3">Source: &lt;a href="https://adventofcode.com/2023/day/3">Day 3: Gear Ratios&lt;/a>&lt;/a>&lt;/li>
&lt;li>&lt;a href="#part-1">Part 1&lt;/a>&lt;/li>
&lt;li>&lt;a href="#part-2">Part 2&lt;/a>&lt;/li>
&lt;li>&lt;a href="#performance">Performance&lt;/a>&lt;/li>
&lt;/ul>
&lt;/nav>
&lt;h2 id="part-1">Part 1&lt;/h2>
&lt;blockquote>
&lt;p>Take as input a 2D grid of numbers or symbols (&lt;code>.&lt;/code> represents empty space). Numbers will be 1 or more digits written horizontally which should be concatenated (&lt;code>.467*&lt;/code> is the number &lt;code>467&lt;/code> followed by the symbol &lt;code>*&lt;/code>).&lt;/p>
&lt;p>Sum all numbers that are adjacent (including diagonally) to at least one symbol.&lt;/p>
&lt;/blockquote></description></item><item><title>AoC 2023 Day 2: Playinator</title><link>https://blog.jverkamp.com/2023/12/02/aoc-2023-day-2-playinator/</link><pubDate>Sat, 02 Dec 2023 00:00:03 +0000</pubDate><guid>https://blog.jverkamp.com/2023/12/02/aoc-2023-day-2-playinator/</guid><description>&lt;h2 id="source-day-2-cube-conundrumhttpsadventofcodecom2023day2">Source: &lt;a href="https://adventofcode.com/2023/day/2" target="_blank" rel="noopener">Day 2: Cube Conundrum&lt;/a>&lt;/h2>
&lt;p>&lt;a href="https://github.com/jpverkamp/advent-of-code/tree/master/2023/solutions/day02" target="_blank" rel="noopener">Full solution&lt;/a> for today (spoilers!). Note: I did slightly change my solutions template after writing this blog post, so the final solution is structured slightly differently than the code in this post. The functionality itself hasn&amp;rsquo;t changed.&lt;/p>
&lt;nav id="TableOfContents">
&lt;ul>
&lt;li>&lt;a href="#source-day-2-cube-conundrumhttpsadventofcodecom2023day2">Source: &lt;a href="https://adventofcode.com/2023/day/2">Day 2: Cube Conundrum&lt;/a>&lt;/a>&lt;/li>
&lt;li>&lt;a href="#part-1">Part 1&lt;/a>&lt;/li>
&lt;li>&lt;a href="#part-2">Part 2&lt;/a>&lt;/li>
&lt;li>&lt;a href="#performance">Performance&lt;/a>&lt;/li>
&lt;/ul>
&lt;/nav>
&lt;h2 id="part-1">Part 1&lt;/h2>
&lt;blockquote>
&lt;p>Play a game where you have some number of red, green, and blue dice in a cup, which you draw and roll (without replacement). Which game is possible with only 12 red, 13 gree, and 14 blue cubes?&lt;/p>
&lt;/blockquote>
&lt;p>Input will look like: &lt;code>Game 1: 3 blue, 4 red; 1 red, 2 green, 6 blue; 2 green&lt;/code>&lt;/p></description></item><item><title>AoC 2023 Day 1: Calibrationinator</title><link>https://blog.jverkamp.com/2023/12/01/aoc-2023-day-1-calibrationinator/</link><pubDate>Fri, 01 Dec 2023 00:00:03 +0000</pubDate><guid>https://blog.jverkamp.com/2023/12/01/aoc-2023-day-1-calibrationinator/</guid><description>&lt;h2 id="source-day-1-trebuchethttpsadventofcodecom2023day1">Source: &lt;a href="https://adventofcode.com/2023/day/1" target="_blank" rel="noopener">Day 1: Trebuchet?!&lt;/a>&lt;/h2>
&lt;p>&lt;a href="https://github.com/jpverkamp/advent-of-code/tree/master/2023/solutions/day01" target="_blank" rel="noopener">Full solution&lt;/a> for today (spoilers!). Note: I did slightly change my solutions template after writing this blog post, so the final solution is structured slightly differently than the code in this post. The functionality itself hasn&amp;rsquo;t changed.&lt;/p>
&lt;nav id="TableOfContents">
&lt;ul>
&lt;li>&lt;a href="#source-day-1-trebuchethttpsadventofcodecom2023day1">Source: &lt;a href="https://adventofcode.com/2023/day/1">Day 1: Trebuchet?!&lt;/a>&lt;/a>&lt;/li>
&lt;li>&lt;a href="#part-1">Part 1&lt;/a>&lt;/li>
&lt;li>&lt;a href="#part-2">Part 2&lt;/a>&lt;/li>
&lt;li>&lt;a href="#performance">Performance&lt;/a>&lt;/li>
&lt;/ul>
&lt;/nav>
&lt;h2 id="part-1">Part 1&lt;/h2>
&lt;blockquote>
&lt;p>Given a list of alphanumeric strings, find the first and last digit on each line (they may be the same). Concatenate each pair and sum them.&lt;/p>
&lt;/blockquote></description></item><item><title>Advent of Code 2023</title><link>https://blog.jverkamp.com/2023/12/01/advent-of-code-2023/</link><pubDate>Fri, 01 Dec 2023 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2023/12/01/advent-of-code-2023/</guid><description>&lt;p>Another year, another &lt;a href="https://blog.jverkamp.com/2015/12/01/advent-of-code/">Advent of Code&lt;/a>.&lt;/p>
&lt;p>Like last year, we&amp;rsquo;re doing Rust. I&amp;rsquo;ve really grown to love the language since last year&amp;hellip; and hopefully I&amp;rsquo;ve learned a bit more about how to write more &amp;lsquo;proper&amp;rsquo; Rust. I know I had some issues last year. Functional&amp;hellip; but it could be better.&lt;/p>
&lt;p>Let&amp;rsquo;s see how it goes!&lt;/p>
&lt;p>For full solutions, as always, I post to GitHub (including previous years and possibly some I haven&amp;rsquo;t written up yet): &lt;a href="https://github.com/jpverkamp/advent-of-code">jpverkamp/advent-of-code&lt;/a>&lt;/p></description></item><item><title>AoC 2022 Day 25: Snafuinator</title><link>https://blog.jverkamp.com/2022/12/25/aoc-2022-day-25-snafuinator/</link><pubDate>Sun, 25 Dec 2022 00:00:03 +0000</pubDate><guid>https://blog.jverkamp.com/2022/12/25/aoc-2022-day-25-snafuinator/</guid><description>&lt;h2 id="source-full-of-hot-airhttpsadventofcodecom2022day25">Source: &lt;a href="https://adventofcode.com/2022/day/25" target="_blank" rel="noopener">Full of Hot Air&lt;/a>&lt;/h2>
&lt;h2 id="part-1">Part 1&lt;/h2>
&lt;blockquote>
&lt;p>Let a Snafu number be a base 5 number with the curious property that in addition to the digits 0, 1, and 2, it has the numbers &lt;code>-&lt;/code> as &lt;code>-1&lt;/code> and &lt;code>=&lt;/code> as &lt;code>-2&lt;/code>. Sum up a list of Snafu numbers.&lt;/p>
&lt;/blockquote></description></item><item><title>AoC 2022 Day 24: Blizzinator</title><link>https://blog.jverkamp.com/2022/12/24/aoc-2022-day-24-blizzinator/</link><pubDate>Sat, 24 Dec 2022 00:00:03 +0000</pubDate><guid>https://blog.jverkamp.com/2022/12/24/aoc-2022-day-24-blizzinator/</guid><description>&lt;h2 id="source-blizzard-basinhttpsadventofcodecom2022day24">Source: &lt;a href="https://adventofcode.com/2022/day/24" target="_blank" rel="noopener">Blizzard Basin&lt;/a>&lt;/h2>
&lt;h2 id="part-1">Part 1&lt;/h2>
&lt;blockquote>
&lt;p>Given a map with a series of moving walls (that wrap when the hit the edges of the simulation), calculate the fastest route from the top left to the bottom right.&lt;/p>
&lt;/blockquote></description></item><item><title>AoC 2022 Day 23: Elf Scattinator</title><link>https://blog.jverkamp.com/2022/12/23/aoc-2022-day-23-elf-scattinator/</link><pubDate>Fri, 23 Dec 2022 00:00:03 +0000</pubDate><guid>https://blog.jverkamp.com/2022/12/23/aoc-2022-day-23-elf-scattinator/</guid><description>&lt;h2 id="source-unstable-diffusionhttpsadventofcodecom2022day23">Source: &lt;a href="https://adventofcode.com/2022/day/23" target="_blank" rel="noopener">Unstable Diffusion&lt;/a>&lt;/h2>
&lt;h2 id="part-1">Part 1&lt;/h2>
&lt;blockquote>
&lt;p>Implement a &lt;a href="https://en.wikipedia.org/wiki/cellular%20automaton">cellular automaton&lt;/a> with the following rules:&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>If you have no neighbors, don&amp;rsquo;t move (&lt;em>important, I forgot this one for a while&lt;/em>)&lt;/li>
&lt;li>Otherwise:
&lt;ul>
&lt;li>Calculate a potential move:
&lt;ul>
&lt;li>If you have no neighbors to the north, move north&lt;/li>
&lt;li>If not, check likewise for south, then west, than east&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>If no other agent is moving to the same space, move to your potential move&lt;/li>
&lt;li>Otherwise, don&amp;rsquo;t move&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>On each frame, rotate the order the directions are checked in (&lt;code>NSWE&lt;/code>, &lt;code>SWEN&lt;/code>, &lt;code>WENS&lt;/code>, &lt;code>ENSW&lt;/code>, &lt;code>NSWE&lt;/code>, &amp;hellip;)&lt;/li>
&lt;/ul></description></item><item><title>AoC 2022 Day 22: Wonderator</title><link>https://blog.jverkamp.com/2022/12/22/aoc-2022-day-22-wonderator/</link><pubDate>Thu, 22 Dec 2022 00:00:03 +0000</pubDate><guid>https://blog.jverkamp.com/2022/12/22/aoc-2022-day-22-wonderator/</guid><description>&lt;h2 id="source-monkey-maphttpsadventofcodecom2022day22">Source: &lt;a href="https://adventofcode.com/2022/day/22" target="_blank" rel="noopener">Monkey Map&lt;/a>&lt;/h2>
&lt;h2 id="part-1">Part 1&lt;/h2>
&lt;blockquote>
&lt;p>Given a map and a series of instructions formatted as distance + turn (&lt;code>L&lt;/code> or &lt;code>R&lt;/code>), find the final position. Any time you would walk off the edge of the map, wrap to the opposite edge.&lt;/p>
&lt;/blockquote></description></item><item><title>AoC 2022 Day 21: Yellinator</title><link>https://blog.jverkamp.com/2022/12/21/aoc-2022-day-21-yellinator/</link><pubDate>Wed, 21 Dec 2022 00:00:03 +0000</pubDate><guid>https://blog.jverkamp.com/2022/12/21/aoc-2022-day-21-yellinator/</guid><description>&lt;h2 id="source-monkey-mathhttpsadventofcodecom2022day21">Source: &lt;a href="https://adventofcode.com/2022/day/21" target="_blank" rel="noopener">Monkey Math&lt;/a>&lt;/h2>
&lt;h2 id="part-1">Part 1&lt;/h2>
&lt;blockquote>
&lt;p>Given a series of equations of either the form &lt;code>dbpl: 5&lt;/code> or &lt;code>cczh: sllz + lgvd&lt;/code>, determine what the value of the node labeled &lt;code>root&lt;/code> is.&lt;/p>
&lt;/blockquote></description></item><item><title>AoC 2022 Day 20: Deencryptinator</title><link>https://blog.jverkamp.com/2022/12/20/aoc-2022-day-20-deencryptinator/</link><pubDate>Tue, 20 Dec 2022 00:00:03 +0000</pubDate><guid>https://blog.jverkamp.com/2022/12/20/aoc-2022-day-20-deencryptinator/</guid><description>&lt;h2 id="source-grove-positioning-systemhttpsadventofcodecom2022day20">Source: &lt;a href="https://adventofcode.com/2022/day/20" target="_blank" rel="noopener">Grove Positioning System&lt;/a>&lt;/h2>
&lt;h2 id="part-1">Part 1&lt;/h2>
&lt;blockquote>
&lt;p>Given a list of numbers &lt;code>mix&lt;/code> them by moving each number forward/backward in the list based on it&amp;rsquo;s value. For example, in &lt;code>4, -2, 5, 6, 7, 8, 9&lt;/code> moving the &lt;code>-2&lt;/code> will result in &lt;code>4, 5, 6, 7, 8, -2, 9&lt;/code>. Each number should be moved exactly once in the &lt;em>original order&lt;/em> they appeared in the list.&lt;/p>
&lt;/blockquote></description></item><item><title>AoC 2022 Day 19: Blueprintinator</title><link>https://blog.jverkamp.com/2022/12/19/aoc-2022-day-19-blueprintinator/</link><pubDate>Mon, 19 Dec 2022 00:00:03 +0000</pubDate><guid>https://blog.jverkamp.com/2022/12/19/aoc-2022-day-19-blueprintinator/</guid><description>&lt;h2 id="source-not-enough-mineralshttpsadventofcodecom2022day19">Source: &lt;a href="https://adventofcode.com/2022/day/19" target="_blank" rel="noopener">Not Enough Minerals&lt;/a>&lt;/h2>
&lt;h2 id="part-1">Part 1&lt;/h2>
&lt;blockquote>
&lt;p>Given a series of given a series of &lt;code>blueprints&lt;/code>, each of which gives instructions for how to build a single &lt;code>robot&lt;/code> from a collection of &lt;code>materials&lt;/code> that in turn will produce one of a given &lt;code>material&lt;/code> per turn, determine the best order of builds to maximize your &lt;code>geode&lt;/code> (the most valuable &lt;code>material&lt;/code>) production for each &lt;code>blueprint&lt;/code> given a time limit of &lt;code>24 minutes&lt;/code>.&lt;/p>
&lt;/blockquote></description></item><item><title>AoC 2022 Day 18: Lavinator</title><link>https://blog.jverkamp.com/2022/12/18/aoc-2022-day-18-lavinator/</link><pubDate>Sun, 18 Dec 2022 00:00:03 +0000</pubDate><guid>https://blog.jverkamp.com/2022/12/18/aoc-2022-day-18-lavinator/</guid><description>&lt;h2 id="source-boiling-bouldershttpsadventofcodecom2022day18">Source: &lt;a href="https://adventofcode.com/2022/day/18" target="_blank" rel="noopener">Boiling Boulders&lt;/a>&lt;/h2>
&lt;h2 id="part-1">Part 1&lt;/h2>
&lt;blockquote>
&lt;p>Given a list of 1x1x1 cubes, determine the total surface area of the cubes.&lt;/p>
&lt;/blockquote></description></item><item><title>AoC 2022 Day 17: Tetrisinator</title><link>https://blog.jverkamp.com/2022/12/17/aoc-2022-day-17-tetrisinator/</link><pubDate>Sat, 17 Dec 2022 00:00:03 +0000</pubDate><guid>https://blog.jverkamp.com/2022/12/17/aoc-2022-day-17-tetrisinator/</guid><description>&lt;h2 id="source-pyroclastic-flowhttpsadventofcodecom2022day17">Source: &lt;a href="https://adventofcode.com/2022/day/17" target="_blank" rel="noopener">Pyroclastic Flow&lt;/a>&lt;/h2>
&lt;h2 id="part-1">Part 1&lt;/h2>
&lt;blockquote>
&lt;p>Simulate &lt;a href="https://en.wikipedia.org/wiki/Tetris">Tetris&lt;/a> on a 7 wide board with a given (infinitely repeated) series of left and right inputs to be applied on each frame before dropping the block and a given (infinitely repeated) set of blocks. Once 2022 blocks have been dropped, what is the total height of the placed blocks?&lt;/p>
&lt;/blockquote></description></item><item><title>AoC 2022 Day 16: Pressurinator</title><link>https://blog.jverkamp.com/2022/12/16/aoc-2022-day-16-pressurinator/</link><pubDate>Fri, 16 Dec 2022 00:00:03 +0000</pubDate><guid>https://blog.jverkamp.com/2022/12/16/aoc-2022-day-16-pressurinator/</guid><description>&lt;h2 id="source-proboscidea-volcaniumhttpsadventofcodecom2022day16">Source: &lt;a href="https://adventofcode.com/2022/day/16" target="_blank" rel="noopener">Proboscidea Volcanium&lt;/a>&lt;/h2>
&lt;nav id="TableOfContents">
&lt;ul>
&lt;li>&lt;a href="#source-proboscidea-volcaniumhttpsadventofcodecom2022day16">Source: &lt;a href="https://adventofcode.com/2022/day/16">Proboscidea Volcanium&lt;/a>&lt;/a>&lt;/li>
&lt;li>&lt;a href="#part-1">Part 1&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#optimized-version-with-multiple-steps-and-no-repeats">Optimized version with multiple steps and no-repeats&lt;/a>&lt;/li>
&lt;li>&lt;a href="#the-actual-code">The actual code&lt;/a>&lt;/li>
&lt;li>&lt;a href="#attempted-to-solve-via-30-steps-of-all-possibilities">Attempted to solve via 30 steps of all possibilities&lt;/a>&lt;/li>
&lt;li>&lt;a href="#a-priority-queue-edit-2-dec-20">A Priority Queue (Edit 2, Dec 20)&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#part-2">Part 2&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#simulating-n-agents">Simulating &lt;em>n&lt;/em> agents&lt;/a>&lt;/li>
&lt;li>&lt;a href="#new-multi-agent-code-with-one-agent">New multi-agent code with one agent&lt;/a>&lt;/li>
&lt;li>&lt;a href="#checking-with-multiple-agents">Checking with multiple agents&lt;/a>&lt;/li>
&lt;li>&lt;a href="#problems-with-memory-">Problems with memory (?)&lt;/a>&lt;/li>
&lt;li>&lt;a href="#improving-memory-usage">Improving memory usage&lt;/a>&lt;/li>
&lt;li>&lt;a href="#improving-runtime">Improving runtime&lt;/a>&lt;/li>
&lt;li>&lt;a href="#to-be-continued">To be continued&amp;hellip;&lt;/a>&lt;/li>
&lt;li>&lt;a href="#let-it-run-edit-dec-20">Let it run! (Edit, Dec 20)&lt;/a>&lt;/li>
&lt;li>&lt;a href="#queues-to-the-rescue-edit-3-dec-20">Queues to the rescue (Edit 3, Dec 20)&lt;/a>&lt;/li>
&lt;li>&lt;a href="#optimization-remaining_best_case-edit-4-dec-21">Optimization: &lt;code>remaining_best_case&lt;/code> (Edit 4, Dec 21)&lt;/a>&lt;/li>
&lt;li>&lt;a href="#optimization-seen_skip-edit-4-dec-21">Optimization: &lt;code>seen_skip&lt;/code> (Edit 4, Dec 21)&lt;/a>&lt;/li>
&lt;li>&lt;a href="#threading">Threading&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#graphviz-visualizations">Graphviz visualizations&lt;/a>&lt;/li>
&lt;li>&lt;a href="#performance">Performance&lt;/a>&lt;/li>
&lt;/ul>
&lt;/nav>
&lt;h2 id="part-1">Part 1&lt;/h2>
&lt;blockquote>
&lt;p>Given a graph of nodes, some of which have a &lt;code>pressure&lt;/code> (per tick output value) and an agent that can move through the graph and activate specific nodes (so that they output their per tick value every future tick), what is the maximum total output possible in 30 steps?&lt;/p>
&lt;/blockquote></description></item><item><title>AoC 2022 Day 15: Beaconator</title><link>https://blog.jverkamp.com/2022/12/15/aoc-2022-day-15-beaconator/</link><pubDate>Thu, 15 Dec 2022 00:00:03 +0000</pubDate><guid>https://blog.jverkamp.com/2022/12/15/aoc-2022-day-15-beaconator/</guid><description>&lt;h2 id="source-beacon-exclusion-zonehttpsadventofcodecom2022day15">Source: &lt;a href="https://adventofcode.com/2022/day/15" target="_blank" rel="noopener">Beacon Exclusion Zone&lt;/a>&lt;/h2>
&lt;h2 id="part-1">Part 1&lt;/h2>
&lt;blockquote>
&lt;p>There are a collections of &lt;code>Sensor&lt;/code>s and &lt;code>Beacon&lt;/code>s. As input, you are given the &lt;code>Beacon&lt;/code> closest to each &lt;code>Sensor&lt;/code> (using &lt;a href="https://en.wikipedia.org/wiki/Manhattan%20Distance">Manhattan Distance&lt;/a>). If a &lt;code>Beacon&lt;/code> is not closest to any sensor, it will not appear in this list. Calculate how many points in the given row (&lt;code>y=2000000&lt;/code>) cannot contain a &lt;code>Beacon&lt;/code>.&lt;/p>
&lt;/blockquote></description></item><item><title>AoC 2022 Day 14: Sandinator</title><link>https://blog.jverkamp.com/2022/12/14/aoc-2022-day-14-sandinator/</link><pubDate>Wed, 14 Dec 2022 00:00:03 +0000</pubDate><guid>https://blog.jverkamp.com/2022/12/14/aoc-2022-day-14-sandinator/</guid><description>&lt;h2 id="source-regolith-reservoirhttpsadventofcodecom2022day14">Source: &lt;a href="https://adventofcode.com/2022/day/14" target="_blank" rel="noopener">Regolith Reservoir&lt;/a>&lt;/h2>
&lt;h2 id="part-1">Part 1&lt;/h2>
&lt;blockquote>
&lt;p>Given a series of walls as input, run a &lt;a href="https://en.wikipedia.org/wiki/falling%20sand">falling sand&lt;/a> simulation until any new sand falls of the map. Count how many grains of sand we end up with.&lt;/p>
&lt;/blockquote></description></item><item><title>AoC 2022 Day 13: List Parsinator</title><link>https://blog.jverkamp.com/2022/12/13/aoc-2022-day-13-list-parsinator/</link><pubDate>Tue, 13 Dec 2022 00:00:03 +0000</pubDate><guid>https://blog.jverkamp.com/2022/12/13/aoc-2022-day-13-list-parsinator/</guid><description>&lt;h2 id="source-distress-signalhttpsadventofcodecom2022day13">Source: &lt;a href="https://adventofcode.com/2022/day/13" target="_blank" rel="noopener">Distress Signal&lt;/a>&lt;/h2>
&lt;h2 id="part-1">Part 1&lt;/h2>
&lt;blockquote>
&lt;p>Given pairs of &lt;code>Signal&lt;/code>s (where a &lt;code>Signal&lt;/code> is a nested list ;example: &lt;code>[[1],[2,3,4]]&lt;/code>), count how many pairs are &amp;lsquo;in order&amp;rsquo;.&lt;/p>
&lt;/blockquote>
&lt;p>One &lt;code>Signal&lt;/code> is less than the other if:&lt;/p>
&lt;ul>
&lt;li>Both are an integer and the first is less than the second&lt;/li>
&lt;li>Both are a list and the first value is less than the second
&lt;ul>
&lt;li>If the first values are the same, compare the second&lt;/li>
&lt;li>If the first has fewer elements, it is treated as less than the second&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>When comparing an integer and a list, wrap the integer as a single element list and compare them&lt;/li>
&lt;/ul></description></item><item><title>AoC 2022 Day 12: Climbiantor</title><link>https://blog.jverkamp.com/2022/12/12/aoc-2022-day-12-climbiantor/</link><pubDate>Mon, 12 Dec 2022 00:00:03 +0000</pubDate><guid>https://blog.jverkamp.com/2022/12/12/aoc-2022-day-12-climbiantor/</guid><description>&lt;h2 id="source-hill-climbing-algorithmhttpsadventofcodecom2022day12">Source: &lt;a href="https://adventofcode.com/2022/day/12" target="_blank" rel="noopener">Hill Climbing Algorithm&lt;/a>&lt;/h2>
&lt;h2 id="part-1">Part 1&lt;/h2>
&lt;blockquote>
&lt;p>Given a height map, find the shortest path between two points such that the path can descend any distance but can only climb by a maximum of 1.&lt;/p>
&lt;/blockquote></description></item><item><title>AoC 2022 Day 11: Monkeyinator</title><link>https://blog.jverkamp.com/2022/12/11/aoc-2022-day-11-monkeyinator/</link><pubDate>Sun, 11 Dec 2022 00:00:03 +0000</pubDate><guid>https://blog.jverkamp.com/2022/12/11/aoc-2022-day-11-monkeyinator/</guid><description>&lt;h2 id="source-monkey-in-the-middlehttpsadventofcodecom2022day11">Source: &lt;a href="https://adventofcode.com/2022/day/11" target="_blank" rel="noopener">Monkey in the Middle&lt;/a>&lt;/h2>
&lt;h2 id="part-1">Part 1&lt;/h2>
&lt;blockquote>
&lt;p>Simulate a collection of &amp;lsquo;monkeys&amp;rsquo;. Each monkey will have a number of items which it will then apply a mathematical operation to, then always divide by 3, then test divisibility to pass to one of two other monkeys. Return as answer the product of the two highest number of times a monkey applies it&amp;rsquo;s main function to individual items after 20 steps.&lt;/p>
&lt;/blockquote>
&lt;p>Note: Monkeys will always be evaluated in order (so monkey 1 will evaluate any items passed by monkey 0 again in the same round).&lt;/p></description></item><item><title>AoC 2022 Day 10: Interpretator</title><link>https://blog.jverkamp.com/2022/12/10/aoc-2022-day-10-interpretator/</link><pubDate>Sat, 10 Dec 2022 00:00:03 +0000</pubDate><guid>https://blog.jverkamp.com/2022/12/10/aoc-2022-day-10-interpretator/</guid><description>&lt;h2 id="source-cathode-ray-tubehttpsadventofcodecom2022day10">Source: &lt;a href="https://adventofcode.com/2022/day/10" target="_blank" rel="noopener">Cathode-Ray Tube&lt;/a>&lt;/h2>
&lt;h2 id="part-1">Part 1&lt;/h2>
&lt;blockquote>
&lt;p>Implement a simple virtual machine with two instructions: &lt;code>nop&lt;/code> which does nothing for 1 cycles and &lt;code>addx $n&lt;/code> which adds &lt;code>$n&lt;/code> to the &lt;code>X&lt;/code> register (initial value 1) in two cycles. Calculate the sum of &lt;code>cycle * X&lt;/code> for the cycles 20, 60, 100, 140, 180, 220.&lt;/p>
&lt;/blockquote></description></item><item><title>AoC 2022 Day 9: Ropeinator</title><link>https://blog.jverkamp.com/2022/12/09/aoc-2022-day-9-ropeinator/</link><pubDate>Fri, 09 Dec 2022 00:00:03 +0000</pubDate><guid>https://blog.jverkamp.com/2022/12/09/aoc-2022-day-9-ropeinator/</guid><description>&lt;h2 id="source-rope-bridgehttpsadventofcodecom2022day9">Source: &lt;a href="https://adventofcode.com/2022/day/9" target="_blank" rel="noopener">Rope Bridge&lt;/a>&lt;/h2>
&lt;h2 id="part-1">Part 1&lt;/h2>
&lt;blockquote>
&lt;p>Simulate two connected links such that whenever the first link (head) moves, the tail moves to follow according to the following rules:&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>If the tail is at the same location as head, don&amp;rsquo;t move&lt;/li>
&lt;li>If the tail is adjacent to the head (orthogonal or diagonal), don&amp;rsquo;t move&lt;/li>
&lt;li>If the tail is in the same row/column as the head, move one directly towards it orthogonally&lt;/li>
&lt;li>If the tail is in neither the same row nor column, move one towards diagonally&lt;/li>
&lt;/ul>
&lt;p>Count how many unique spaces are visited by the &lt;code>tail&lt;/code> of the link.&lt;/p></description></item><item><title>AoC 2022 Day 8: Treetopinator</title><link>https://blog.jverkamp.com/2022/12/08/aoc-2022-day-8-treetopinator/</link><pubDate>Thu, 08 Dec 2022 00:00:03 +0000</pubDate><guid>https://blog.jverkamp.com/2022/12/08/aoc-2022-day-8-treetopinator/</guid><description>&lt;h2 id="source-treetop-tree-househttpsadventofcodecom2022day8">Source: &lt;a href="https://adventofcode.com/2022/day/8" target="_blank" rel="noopener">Treetop Tree House&lt;/a>&lt;/h2>
&lt;h2 id="part-1">Part 1&lt;/h2>
&lt;blockquote>
&lt;p>Given a grid of numbers, count how many of these numbers have a direct path in any cardinal direction to the edge of the grid.&lt;/p>
&lt;/blockquote></description></item><item><title>AoC 2022 Day 7: Recursive Fileinator</title><link>https://blog.jverkamp.com/2022/12/07/aoc-2022-day-7-recursive-fileinator/</link><pubDate>Wed, 07 Dec 2022 00:00:03 +0000</pubDate><guid>https://blog.jverkamp.com/2022/12/07/aoc-2022-day-7-recursive-fileinator/</guid><description>&lt;h2 id="source-no-space-left-on-devicehttpsadventofcodecom2022day7">Source: &lt;a href="https://adventofcode.com/2022/day/7" target="_blank" rel="noopener">No Space Left On Device&lt;/a>&lt;/h2>
&lt;h2 id="part-1">Part 1&lt;/h2>
&lt;blockquote>
&lt;p>Give the output of a very simple shell with only the commands &lt;code>cd&lt;/code> and &lt;code>ls&lt;/code> (the output of which is either &lt;code>&amp;quot;dir&amp;quot; name&lt;/code> for directories or &lt;code>size name&lt;/code> for files), find the largest directory (disk usage calculated recursively) with a size no greater than 100,000.&lt;/p>
&lt;/blockquote></description></item><item><title>AoC 2022 Day 6: Ring Buffinator</title><link>https://blog.jverkamp.com/2022/12/06/aoc-2022-day-6-ring-buffinator/</link><pubDate>Tue, 06 Dec 2022 00:00:03 +0000</pubDate><guid>https://blog.jverkamp.com/2022/12/06/aoc-2022-day-6-ring-buffinator/</guid><description>&lt;h2 id="source-tuning-troublehttpsadventofcodecom2022day6">Source: &lt;a href="https://adventofcode.com/2022/day/6" target="_blank" rel="noopener">Tuning Trouble&lt;/a>&lt;/h2>
&lt;h2 id="part-1">Part 1&lt;/h2>
&lt;blockquote>
&lt;p>Given input as a list of characters, find the index of the first &lt;a href="https://en.wikipedia.org/wiki/sliding%20window">sliding window&lt;/a> (size 4) where all of the characters are distinct.&lt;/p>
&lt;/blockquote></description></item><item><title>AoC 2022 Day 5: Stackinator</title><link>https://blog.jverkamp.com/2022/12/05/aoc-2022-day-5-stackinator/</link><pubDate>Mon, 05 Dec 2022 00:00:03 +0000</pubDate><guid>https://blog.jverkamp.com/2022/12/05/aoc-2022-day-5-stackinator/</guid><description>&lt;h2 id="source-supply-stackshttpsadventofcodecom2022day5">Source: &lt;a href="https://adventofcode.com/2022/day/5" target="_blank" rel="noopener">Supply Stacks&lt;/a>&lt;/h2>
&lt;h2 id="part-1">Part 1&lt;/h2>
&lt;blockquote>
&lt;p>Given a list of stacks of &lt;em>syntax 1&lt;/em> and instructions in the form &lt;em>syntax 2&lt;/em>, apply each instruction to pop &lt;code>qty&lt;/code> items from the stack &lt;code>src&lt;/code> and put them on &lt;code>dst&lt;/code> one at a time.&lt;/p>
&lt;/blockquote>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-text" data-lang="text">&lt;span style="display:flex;">&lt;span>Syntax 1: Stacks
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> [D]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>[N] [C]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>[Z] [M] [P]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 1 2 3
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Syntax 2: Instructions
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>move 1 from 2 to 1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>move 3 from 1 to 3
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>move 2 from 2 to 1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>move 1 from 1 to 2
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>AoC 2022 Day 4: Overlapinator</title><link>https://blog.jverkamp.com/2022/12/04/aoc-2022-day-4-overlapinator/</link><pubDate>Sun, 04 Dec 2022 00:00:03 +0000</pubDate><guid>https://blog.jverkamp.com/2022/12/04/aoc-2022-day-4-overlapinator/</guid><description>&lt;h2 id="source-camp-cleanuphttpsadventofcodecom2022day4">Source: &lt;a href="https://adventofcode.com/2022/day/4" target="_blank" rel="noopener">Camp Cleanup&lt;/a>&lt;/h2>
&lt;h2 id="part-1">Part 1&lt;/h2>
&lt;blockquote>
&lt;p>Given a list of pairs of spans (of the form a-b,x-y) count how many spans have one span entirely contained within the other.&lt;/p>
&lt;/blockquote></description></item><item><title>AoC 2022 Day 3: Rucksackinator</title><link>https://blog.jverkamp.com/2022/12/03/aoc-2022-day-3-rucksackinator/</link><pubDate>Sat, 03 Dec 2022 00:00:03 +0000</pubDate><guid>https://blog.jverkamp.com/2022/12/03/aoc-2022-day-3-rucksackinator/</guid><description>&lt;h2 id="source-rucksack-reorganizationhttpsadventofcodecom2022day3">Source: &lt;a href="https://adventofcode.com/2022/day/3" target="_blank" rel="noopener">Rucksack Reorganization&lt;/a>&lt;/h2>
&lt;h2 id="part-1">Part 1&lt;/h2>
&lt;blockquote>
&lt;p>Take a list of characters. For each line, split the line exactly in half and find the one character that&amp;rsquo;s in both halves. Assign a-z to values 1-26 and A-Z to 27-52. Sum these values.&lt;/p>
&lt;/blockquote></description></item><item><title>AoC 2022 Day 2: Roshamboinator</title><link>https://blog.jverkamp.com/2022/12/02/aoc-2022-day-2-roshamboinator/</link><pubDate>Fri, 02 Dec 2022 00:00:03 +0000</pubDate><guid>https://blog.jverkamp.com/2022/12/02/aoc-2022-day-2-roshamboinator/</guid><description>&lt;h2 id="source-rock-paper-scissorshttpsadventofcodecom2022day2">Source: &lt;a href="https://adventofcode.com/2022/day/2" target="_blank" rel="noopener">Rock Paper Scissors&lt;/a>&lt;/h2>
&lt;h2 id="part-1">Part 1&lt;/h2>
&lt;blockquote>
&lt;p>Given a list of Rock Paper Scissors matches with A,B,C or X,Y,Z corresponding to those plays and scoring 1,2,3 points for your play plus 0,3,6 for a loss, draw, or win, what is your total score.&lt;/p>
&lt;/blockquote></description></item><item><title>AoC 2022 Day 1: Calorinator</title><link>https://blog.jverkamp.com/2022/12/01/aoc-2022-day-1-calorinator/</link><pubDate>Thu, 01 Dec 2022 00:00:03 +0000</pubDate><guid>https://blog.jverkamp.com/2022/12/01/aoc-2022-day-1-calorinator/</guid><description>&lt;h2 id="source-calorie-countinghttpsadventofcodecom2022day1">Source: &lt;a href="https://adventofcode.com/2022/day/1" target="_blank" rel="noopener">Calorie Counting&lt;/a>&lt;/h2>
&lt;h2 id="part-1">Part 1&lt;/h2>
&lt;blockquote>
&lt;p>Given multiple lists of numbers, find the list with the largest sum.&lt;/p>
&lt;/blockquote></description></item><item><title>Advent of Code 2022</title><link>https://blog.jverkamp.com/2022/12/01/advent-of-code-2022/</link><pubDate>Thu, 01 Dec 2022 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2022/12/01/advent-of-code-2022/</guid><description>&lt;p>Let&amp;rsquo;s do this thing!&lt;/p>
&lt;p>I&amp;rsquo;m going to try Rust this time, since it&amp;rsquo;s 1) awesome 2) fast and 3) crazy. :D&lt;/p>
&lt;p>Let&amp;rsquo;s see how it goes!&lt;/p>
&lt;p>If you&amp;rsquo;d like to see the full form of any particular solution, you can do so on GitHub (including previous years and possibly some I haven&amp;rsquo;t written up yet): &lt;a href="https://github.com/jpverkamp/advent-of-code">jpverkamp/advent-of-code&lt;/a>&lt;/p></description></item></channel></rss>