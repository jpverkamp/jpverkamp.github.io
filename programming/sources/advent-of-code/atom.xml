<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Advent of Code on jverkamp.com</title><link>https://blog.jverkamp.com/programming/sources/advent-of-code/</link><description>Recent content in Advent of Code on jverkamp.com</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://blog.jverkamp.com/programming/sources/advent-of-code/atom.xml" rel="self" type="application/rss+xml"/><item><title>AoC 2022 Day 25: Snafuinator</title><link>https://blog.jverkamp.com/2022/12/25/aoc-2022-day-25-snafuinator/</link><pubDate>Sun, 25 Dec 2022 00:00:03 +0000</pubDate><guid>https://blog.jverkamp.com/2022/12/25/aoc-2022-day-25-snafuinator/</guid><description>&lt;h2 id="source-full-of-hot-airhttpsadventofcodecom2022day25">Source: &lt;a href="https://adventofcode.com/2022/day/25">Full of Hot Air&lt;/a>&lt;/h2>
&lt;h2 id="part-1">Part 1&lt;/h2>
&lt;blockquote>
&lt;p>Let a Snafu number be a base 5 number with the curious property that in addition to the digits 0, 1, and 2, it has the numbers &lt;code>-&lt;/code> as &lt;code>-1&lt;/code> and &lt;code>=&lt;/code> as &lt;code>-2&lt;/code>. Sum up a list of Snafu numbers.&lt;/p>
&lt;/blockquote></description></item><item><title>AoC 2022 Day 24: Blizzinator</title><link>https://blog.jverkamp.com/2022/12/24/aoc-2022-day-24-blizzinator/</link><pubDate>Sat, 24 Dec 2022 00:00:03 +0000</pubDate><guid>https://blog.jverkamp.com/2022/12/24/aoc-2022-day-24-blizzinator/</guid><description>&lt;h2 id="source-blizzard-basinhttpsadventofcodecom2022day24">Source: &lt;a href="https://adventofcode.com/2022/day/24">Blizzard Basin&lt;/a>&lt;/h2>
&lt;h2 id="part-1">Part 1&lt;/h2>
&lt;blockquote>
&lt;p>Given a map with a series of moving walls (that wrap when the hit the edges of the simulation), calculate the fastest route from the top left to the bottom right.&lt;/p>
&lt;/blockquote></description></item><item><title>AoC 2022 Day 23: Elf Scattinator</title><link>https://blog.jverkamp.com/2022/12/23/aoc-2022-day-23-elf-scattinator/</link><pubDate>Fri, 23 Dec 2022 00:00:03 +0000</pubDate><guid>https://blog.jverkamp.com/2022/12/23/aoc-2022-day-23-elf-scattinator/</guid><description>&lt;h2 id="source-unstable-diffusionhttpsadventofcodecom2022day23">Source: &lt;a href="https://adventofcode.com/2022/day/23">Unstable Diffusion&lt;/a>&lt;/h2>
&lt;h2 id="part-1">Part 1&lt;/h2>
&lt;blockquote>
&lt;p>Implement a &lt;a href="https://en.wikipedia.org/wiki/cellular%20automaton">cellular automaton&lt;/a> with the following rules:&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>If you have no neighbors, don&amp;rsquo;t move (&lt;em>important, I forgot this one for a while&lt;/em>)&lt;/li>
&lt;li>Otherwise:
&lt;ul>
&lt;li>Calculate a potential move:
&lt;ul>
&lt;li>If you have no neighbors to the north, move north&lt;/li>
&lt;li>If not, check likewise for south, then west, than east&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>If no other agent is moving to the same space, move to your potential move&lt;/li>
&lt;li>Otherwise, don&amp;rsquo;t move&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>On each frame, rotate the order the directions are checked in (&lt;code>NSWE&lt;/code>, &lt;code>SWEN&lt;/code>, &lt;code>WENS&lt;/code>, &lt;code>ENSW&lt;/code>, &lt;code>NSWE&lt;/code>, &amp;hellip;)&lt;/li>
&lt;/ul></description></item><item><title>AoC 2022 Day 22: Wonderator</title><link>https://blog.jverkamp.com/2022/12/22/aoc-2022-day-22-wonderator/</link><pubDate>Thu, 22 Dec 2022 00:00:03 +0000</pubDate><guid>https://blog.jverkamp.com/2022/12/22/aoc-2022-day-22-wonderator/</guid><description>&lt;h2 id="source-monkey-maphttpsadventofcodecom2022day22">Source: &lt;a href="https://adventofcode.com/2022/day/22">Monkey Map&lt;/a>&lt;/h2>
&lt;h2 id="part-1">Part 1&lt;/h2>
&lt;blockquote>
&lt;p>Given a map and a series of instructions formatted as distance + turn (&lt;code>L&lt;/code> or &lt;code>R&lt;/code>), find the final position. Any time you would walk off the edge of the map, wrap to the opposite edge.&lt;/p>
&lt;/blockquote></description></item><item><title>AoC 2022 Day 21: Yellinator</title><link>https://blog.jverkamp.com/2022/12/21/aoc-2022-day-21-yellinator/</link><pubDate>Wed, 21 Dec 2022 00:00:03 +0000</pubDate><guid>https://blog.jverkamp.com/2022/12/21/aoc-2022-day-21-yellinator/</guid><description>&lt;h2 id="source-monkey-mathhttpsadventofcodecom2022day21">Source: &lt;a href="https://adventofcode.com/2022/day/21">Monkey Math&lt;/a>&lt;/h2>
&lt;h2 id="part-1">Part 1&lt;/h2>
&lt;blockquote>
&lt;p>Given a series of equations of either the form &lt;code>dbpl: 5&lt;/code> or &lt;code>cczh: sllz + lgvd&lt;/code>, determine what the value of the node labeled &lt;code>root&lt;/code> is.&lt;/p>
&lt;/blockquote></description></item><item><title>AoC 2022 Day 20: Deencryptinator</title><link>https://blog.jverkamp.com/2022/12/20/aoc-2022-day-20-deencryptinator/</link><pubDate>Tue, 20 Dec 2022 00:00:03 +0000</pubDate><guid>https://blog.jverkamp.com/2022/12/20/aoc-2022-day-20-deencryptinator/</guid><description>&lt;h2 id="source-grove-positioning-systemhttpsadventofcodecom2022day20">Source: &lt;a href="https://adventofcode.com/2022/day/20">Grove Positioning System&lt;/a>&lt;/h2>
&lt;h2 id="part-1">Part 1&lt;/h2>
&lt;blockquote>
&lt;p>Given a list of numbers &lt;code>mix&lt;/code> them by moving each number forward/backward in the list based on it&amp;rsquo;s value. For example, in &lt;code>4, -2, 5, 6, 7, 8, 9&lt;/code> moving the &lt;code>-2&lt;/code> will result in &lt;code>4, 5, 6, 7, 8, -2, 9&lt;/code>. Each number should be moved exactly once in the &lt;em>original order&lt;/em> they appeared in the list.&lt;/p>
&lt;/blockquote></description></item><item><title>AoC 2022 Day 19: Blueprintinator</title><link>https://blog.jverkamp.com/2022/12/19/aoc-2022-day-19-blueprintinator/</link><pubDate>Mon, 19 Dec 2022 00:00:03 +0000</pubDate><guid>https://blog.jverkamp.com/2022/12/19/aoc-2022-day-19-blueprintinator/</guid><description>&lt;h2 id="source-not-enough-mineralshttpsadventofcodecom2022day19">Source: &lt;a href="https://adventofcode.com/2022/day/19">Not Enough Minerals&lt;/a>&lt;/h2>
&lt;h2 id="part-1">Part 1&lt;/h2>
&lt;blockquote>
&lt;p>Given a series of given a series of &lt;code>blueprints&lt;/code>, each of which gives instructions for how to build a single &lt;code>robot&lt;/code> from a collection of &lt;code>materials&lt;/code> that in turn will produce one of a given &lt;code>material&lt;/code> per turn, determine the best order of builds to maximize your &lt;code>geode&lt;/code> (the most valuable &lt;code>material&lt;/code>) production for each &lt;code>blueprint&lt;/code> given a time limit of &lt;code>24 minutes&lt;/code>.&lt;/p>
&lt;/blockquote></description></item><item><title>AoC 2022 Day 18: Lavinator</title><link>https://blog.jverkamp.com/2022/12/18/aoc-2022-day-18-lavinator/</link><pubDate>Sun, 18 Dec 2022 00:00:03 +0000</pubDate><guid>https://blog.jverkamp.com/2022/12/18/aoc-2022-day-18-lavinator/</guid><description>&lt;h2 id="source-boiling-bouldershttpsadventofcodecom2022day18">Source: &lt;a href="https://adventofcode.com/2022/day/18">Boiling Boulders&lt;/a>&lt;/h2>
&lt;h2 id="part-1">Part 1&lt;/h2>
&lt;blockquote>
&lt;p>Given a list of 1x1x1 cubes, determine the total surface area of the cubes.&lt;/p>
&lt;/blockquote></description></item><item><title>AoC 2022 Day 17: Tetrisinator</title><link>https://blog.jverkamp.com/2022/12/17/aoc-2022-day-17-tetrisinator/</link><pubDate>Sat, 17 Dec 2022 00:00:03 +0000</pubDate><guid>https://blog.jverkamp.com/2022/12/17/aoc-2022-day-17-tetrisinator/</guid><description>&lt;h2 id="source-pyroclastic-flowhttpsadventofcodecom2022day17">Source: &lt;a href="https://adventofcode.com/2022/day/17">Pyroclastic Flow&lt;/a>&lt;/h2>
&lt;h2 id="part-1">Part 1&lt;/h2>
&lt;blockquote>
&lt;p>Simulate &lt;a href="https://en.wikipedia.org/wiki/Tetris">Tetris&lt;/a> on a 7 wide board with a given (infinitely repeated) series of left and right inputs to be applied on each frame before dropping the block and a given (infinitely repeated) set of blocks. Once 2022 blocks have been dropped, what is the total height of the placed blocks?&lt;/p>
&lt;/blockquote></description></item><item><title>AoC 2022 Day 16: Pressurinator</title><link>https://blog.jverkamp.com/2022/12/16/aoc-2022-day-16-pressurinator/</link><pubDate>Fri, 16 Dec 2022 00:00:03 +0000</pubDate><guid>https://blog.jverkamp.com/2022/12/16/aoc-2022-day-16-pressurinator/</guid><description>&lt;h2 id="source-proboscidea-volcaniumhttpsadventofcodecom2022day16">Source: &lt;a href="https://adventofcode.com/2022/day/16">Proboscidea Volcanium&lt;/a>&lt;/h2>
&lt;nav id="TableOfContents">
&lt;ul>
&lt;li>&lt;a href="#source-proboscidea-volcaniumhttpsadventofcodecom2022day16">Source: &lt;a href="https://adventofcode.com/2022/day/16">Proboscidea Volcanium&lt;/a>&lt;/a>&lt;/li>
&lt;li>&lt;a href="#part-1">Part 1&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#optimized-version-with-multiple-steps-and-no-repeats">Optimized version with multiple steps and no-repeats&lt;/a>&lt;/li>
&lt;li>&lt;a href="#the-actual-code">The actual code&lt;/a>&lt;/li>
&lt;li>&lt;a href="#attempted-to-solve-via-30-steps-of-all-possibilities">Attempted to solve via 30 steps of all possibilities&lt;/a>&lt;/li>
&lt;li>&lt;a href="#a-priority-queue-edit-2-dec-20">A Priority Queue (Edit 2, Dec 20)&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#part-2">Part 2&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#simulating-n-agents">Simulating &lt;em>n&lt;/em> agents&lt;/a>&lt;/li>
&lt;li>&lt;a href="#new-multi-agent-code-with-one-agent">New multi-agent code with one agent&lt;/a>&lt;/li>
&lt;li>&lt;a href="#checking-with-multiple-agents">Checking with multiple agents&lt;/a>&lt;/li>
&lt;li>&lt;a href="#problems-with-memory-">Problems with memory (?)&lt;/a>&lt;/li>
&lt;li>&lt;a href="#improving-memory-usage">Improving memory usage&lt;/a>&lt;/li>
&lt;li>&lt;a href="#improving-runtime">Improving runtime&lt;/a>&lt;/li>
&lt;li>&lt;a href="#to-be-continued">To be continued&amp;hellip;&lt;/a>&lt;/li>
&lt;li>&lt;a href="#let-it-run-edit-dec-20">Let it run! (Edit, Dec 20)&lt;/a>&lt;/li>
&lt;li>&lt;a href="#queues-to-the-rescue-edit-3-dec-20">Queues to the rescue (Edit 3, Dec 20)&lt;/a>&lt;/li>
&lt;li>&lt;a href="#optimization-remaining_best_case-edit-4-dec-21">Optimization: &lt;code>remaining_best_case&lt;/code> (Edit 4, Dec 21)&lt;/a>&lt;/li>
&lt;li>&lt;a href="#optimization-seen_skip-edit-4-dec-21">Optimization: &lt;code>seen_skip&lt;/code> (Edit 4, Dec 21)&lt;/a>&lt;/li>
&lt;li>&lt;a href="#threading">Threading&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#graphviz-visualizations">Graphviz visualizations&lt;/a>&lt;/li>
&lt;li>&lt;a href="#performance">Performance&lt;/a>&lt;/li>
&lt;/ul>
&lt;/nav>
&lt;h2 id="part-1">Part 1&lt;/h2>
&lt;blockquote>
&lt;p>Given a graph of nodes, some of which have a &lt;code>pressure&lt;/code> (per tick output value) and an agent that can move through the graph and activate specific nodes (so that they output their per tick value every future tick), what is the maximum total output possible in 30 steps?&lt;/p>
&lt;/blockquote></description></item><item><title>AoC 2022 Day 15: Beaconator</title><link>https://blog.jverkamp.com/2022/12/15/aoc-2022-day-15-beaconator/</link><pubDate>Thu, 15 Dec 2022 00:00:03 +0000</pubDate><guid>https://blog.jverkamp.com/2022/12/15/aoc-2022-day-15-beaconator/</guid><description>&lt;h2 id="source-beacon-exclusion-zonehttpsadventofcodecom2022day15">Source: &lt;a href="https://adventofcode.com/2022/day/15">Beacon Exclusion Zone&lt;/a>&lt;/h2>
&lt;h2 id="part-1">Part 1&lt;/h2>
&lt;blockquote>
&lt;p>There are a collections of &lt;code>Sensor&lt;/code>s and &lt;code>Beacon&lt;/code>s. As input, you are given the &lt;code>Beacon&lt;/code> closest to each &lt;code>Sensor&lt;/code> (using &lt;a href="https://en.wikipedia.org/wiki/Manhattan%20Distance">Manhattan Distance&lt;/a>). If a &lt;code>Beacon&lt;/code> is not closest to any sensor, it will not appear in this list. Calculate how many points in the given row (&lt;code>y=2000000&lt;/code>) cannot contain a &lt;code>Beacon&lt;/code>.&lt;/p>
&lt;/blockquote></description></item><item><title>AoC 2022 Day 14: Sandinator</title><link>https://blog.jverkamp.com/2022/12/14/aoc-2022-day-14-sandinator/</link><pubDate>Wed, 14 Dec 2022 00:00:03 +0000</pubDate><guid>https://blog.jverkamp.com/2022/12/14/aoc-2022-day-14-sandinator/</guid><description>&lt;h2 id="source-regolith-reservoirhttpsadventofcodecom2022day14">Source: &lt;a href="https://adventofcode.com/2022/day/14">Regolith Reservoir&lt;/a>&lt;/h2>
&lt;h2 id="part-1">Part 1&lt;/h2>
&lt;blockquote>
&lt;p>Given a series of walls as input, run a &lt;a href="https://en.wikipedia.org/wiki/falling%20sand">falling sand&lt;/a> simulation until any new sand falls of the map. Count how many grains of sand we end up with.&lt;/p>
&lt;/blockquote></description></item><item><title>AoC 2022 Day 13: List Parsinator</title><link>https://blog.jverkamp.com/2022/12/13/aoc-2022-day-13-list-parsinator/</link><pubDate>Tue, 13 Dec 2022 00:00:03 +0000</pubDate><guid>https://blog.jverkamp.com/2022/12/13/aoc-2022-day-13-list-parsinator/</guid><description>&lt;h2 id="source-distress-signalhttpsadventofcodecom2022day13">Source: &lt;a href="https://adventofcode.com/2022/day/13">Distress Signal&lt;/a>&lt;/h2>
&lt;h2 id="part-1">Part 1&lt;/h2>
&lt;blockquote>
&lt;p>Given pairs of &lt;code>Signal&lt;/code>s (where a &lt;code>Signal&lt;/code> is a nested list ;example: &lt;code>[[1],[2,3,4]]&lt;/code>), count how many pairs are &amp;lsquo;in order&amp;rsquo;.&lt;/p>
&lt;/blockquote>
&lt;p>One &lt;code>Signal&lt;/code> is less than the other if:&lt;/p>
&lt;ul>
&lt;li>Both are an integer and the first is less than the second&lt;/li>
&lt;li>Both are a list and the first value is less than the second
&lt;ul>
&lt;li>If the first values are the same, compare the second&lt;/li>
&lt;li>If the first has fewer elements, it is treated as less than the second&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>When comparing an integer and a list, wrap the integer as a single element list and compare them&lt;/li>
&lt;/ul></description></item><item><title>AoC 2022 Day 12: Climbiantor</title><link>https://blog.jverkamp.com/2022/12/12/aoc-2022-day-12-climbiantor/</link><pubDate>Mon, 12 Dec 2022 00:00:03 +0000</pubDate><guid>https://blog.jverkamp.com/2022/12/12/aoc-2022-day-12-climbiantor/</guid><description>&lt;h2 id="source-hill-climbing-algorithmhttpsadventofcodecom2022day12">Source: &lt;a href="https://adventofcode.com/2022/day/12">Hill Climbing Algorithm&lt;/a>&lt;/h2>
&lt;h2 id="part-1">Part 1&lt;/h2>
&lt;blockquote>
&lt;p>Given a height map, find the shortest path between two points such that the path can descend any distance but can only climb by a maximum of 1.&lt;/p>
&lt;/blockquote></description></item><item><title>AoC 2022 Day 11: Monkeyinator</title><link>https://blog.jverkamp.com/2022/12/11/aoc-2022-day-11-monkeyinator/</link><pubDate>Sun, 11 Dec 2022 00:00:03 +0000</pubDate><guid>https://blog.jverkamp.com/2022/12/11/aoc-2022-day-11-monkeyinator/</guid><description>&lt;h2 id="source-monkey-in-the-middlehttpsadventofcodecom2022day11">Source: &lt;a href="https://adventofcode.com/2022/day/11">Monkey in the Middle&lt;/a>&lt;/h2>
&lt;h2 id="part-1">Part 1&lt;/h2>
&lt;blockquote>
&lt;p>Simulate a collection of &amp;lsquo;monkeys&amp;rsquo;. Each monkey will have a number of items which it will then apply a mathematical operation to, then always divide by 3, then test divisibility to pass to one of two other monkeys. Return as answer the product of the two highest number of times a monkey applies it&amp;rsquo;s main function to individual items after 20 steps.&lt;/p>
&lt;/blockquote>
&lt;p>Note: Monkeys will always be evaluated in order (so monkey 1 will evaluate any items passed by monkey 0 again in the same round).&lt;/p></description></item><item><title>AoC 2022 Day 10: Interpretator</title><link>https://blog.jverkamp.com/2022/12/10/aoc-2022-day-10-interpretator/</link><pubDate>Sat, 10 Dec 2022 00:00:03 +0000</pubDate><guid>https://blog.jverkamp.com/2022/12/10/aoc-2022-day-10-interpretator/</guid><description>&lt;h2 id="source-cathode-ray-tubehttpsadventofcodecom2022day10">Source: &lt;a href="https://adventofcode.com/2022/day/10">Cathode-Ray Tube&lt;/a>&lt;/h2>
&lt;h2 id="part-1">Part 1&lt;/h2>
&lt;blockquote>
&lt;p>Implement a simple virtual machine with two instructions: &lt;code>nop&lt;/code> which does nothing for 1 cycles and &lt;code>addx $n&lt;/code> which adds &lt;code>$n&lt;/code> to the &lt;code>X&lt;/code> register (initial value 1) in two cycles. Calculate the sum of &lt;code>cycle * X&lt;/code> for the cycles 20, 60, 100, 140, 180, 220.&lt;/p>
&lt;/blockquote></description></item><item><title>AoC 2022 Day 9: Ropeinator</title><link>https://blog.jverkamp.com/2022/12/09/aoc-2022-day-9-ropeinator/</link><pubDate>Fri, 09 Dec 2022 00:00:03 +0000</pubDate><guid>https://blog.jverkamp.com/2022/12/09/aoc-2022-day-9-ropeinator/</guid><description>&lt;h2 id="source-rope-bridgehttpsadventofcodecom2022day9">Source: &lt;a href="https://adventofcode.com/2022/day/9">Rope Bridge&lt;/a>&lt;/h2>
&lt;h2 id="part-1">Part 1&lt;/h2>
&lt;blockquote>
&lt;p>Simulate two connected links such that whenever the first link (head) moves, the tail moves to follow according to the following rules:&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>If the tail is at the same location as head, don&amp;rsquo;t move&lt;/li>
&lt;li>If the tail is adjacent to the head (orthogonal or diagonal), don&amp;rsquo;t move&lt;/li>
&lt;li>If the tail is in the same row/column as the head, move one directly towards it orthogonally&lt;/li>
&lt;li>If the tail is in neither the same row nor column, move one towards diagonally&lt;/li>
&lt;/ul>
&lt;p>Count how many unique spaces are visited by the &lt;code>tail&lt;/code> of the link.&lt;/p></description></item><item><title>AoC 2022 Day 8: Treetopinator</title><link>https://blog.jverkamp.com/2022/12/08/aoc-2022-day-8-treetopinator/</link><pubDate>Thu, 08 Dec 2022 00:00:03 +0000</pubDate><guid>https://blog.jverkamp.com/2022/12/08/aoc-2022-day-8-treetopinator/</guid><description>&lt;h2 id="source-treetop-tree-househttpsadventofcodecom2022day8">Source: &lt;a href="https://adventofcode.com/2022/day/8">Treetop Tree House&lt;/a>&lt;/h2>
&lt;h2 id="part-1">Part 1&lt;/h2>
&lt;blockquote>
&lt;p>Given a grid of numbers, count how many of these numbers have a direct path in any cardinal direction to the edge of the grid.&lt;/p>
&lt;/blockquote></description></item><item><title>AoC 2022 Day 7: Recursive Fileinator</title><link>https://blog.jverkamp.com/2022/12/07/aoc-2022-day-7-recursive-fileinator/</link><pubDate>Wed, 07 Dec 2022 00:00:03 +0000</pubDate><guid>https://blog.jverkamp.com/2022/12/07/aoc-2022-day-7-recursive-fileinator/</guid><description>&lt;h2 id="source-no-space-left-on-devicehttpsadventofcodecom2022day7">Source: &lt;a href="https://adventofcode.com/2022/day/7">No Space Left On Device&lt;/a>&lt;/h2>
&lt;h2 id="part-1">Part 1&lt;/h2>
&lt;blockquote>
&lt;p>Give the output of a very simple shell with only the commands &lt;code>cd&lt;/code> and &lt;code>ls&lt;/code> (the output of which is either &lt;code>&amp;quot;dir&amp;quot; name&lt;/code> for directories or &lt;code>size name&lt;/code> for files), find the largest directory (disk usage calculated recursively) with a size no greater than 100,000.&lt;/p>
&lt;/blockquote></description></item><item><title>AoC 2022 Day 6: Ring Buffinator</title><link>https://blog.jverkamp.com/2022/12/06/aoc-2022-day-6-ring-buffinator/</link><pubDate>Tue, 06 Dec 2022 00:00:03 +0000</pubDate><guid>https://blog.jverkamp.com/2022/12/06/aoc-2022-day-6-ring-buffinator/</guid><description>&lt;h2 id="source-tuning-troublehttpsadventofcodecom2022day6">Source: &lt;a href="https://adventofcode.com/2022/day/6">Tuning Trouble&lt;/a>&lt;/h2>
&lt;h2 id="part-1">Part 1&lt;/h2>
&lt;blockquote>
&lt;p>Given input as a list of characters, find the index of the first &lt;a href="https://en.wikipedia.org/wiki/sliding%20window">sliding window&lt;/a> (size 4) where all of the characters are distinct.&lt;/p>
&lt;/blockquote></description></item><item><title>AoC 2022 Day 5: Stackinator</title><link>https://blog.jverkamp.com/2022/12/05/aoc-2022-day-5-stackinator/</link><pubDate>Mon, 05 Dec 2022 00:00:03 +0000</pubDate><guid>https://blog.jverkamp.com/2022/12/05/aoc-2022-day-5-stackinator/</guid><description>&lt;h2 id="source-supply-stackshttpsadventofcodecom2022day5">Source: &lt;a href="https://adventofcode.com/2022/day/5">Supply Stacks&lt;/a>&lt;/h2>
&lt;h2 id="part-1">Part 1&lt;/h2>
&lt;blockquote>
&lt;p>Given a list of stacks of &lt;em>syntax 1&lt;/em> and instructions in the form &lt;em>syntax 2&lt;/em>, apply each instruction to pop &lt;code>qty&lt;/code> items from the stack &lt;code>src&lt;/code> and put them on &lt;code>dst&lt;/code> one at a time.&lt;/p>
&lt;/blockquote>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-text" data-lang="text">&lt;span style="display:flex;">&lt;span>Syntax 1: Stacks
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> [D]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>[N] [C]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>[Z] [M] [P]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 1 2 3
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Syntax 2: Instructions
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>move 1 from 2 to 1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>move 3 from 1 to 3
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>move 2 from 2 to 1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>move 1 from 1 to 2
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>AoC 2022 Day 4: Overlapinator</title><link>https://blog.jverkamp.com/2022/12/04/aoc-2022-day-4-overlapinator/</link><pubDate>Sun, 04 Dec 2022 00:00:03 +0000</pubDate><guid>https://blog.jverkamp.com/2022/12/04/aoc-2022-day-4-overlapinator/</guid><description>&lt;h2 id="source-camp-cleanuphttpsadventofcodecom2022day4">Source: &lt;a href="https://adventofcode.com/2022/day/4">Camp Cleanup&lt;/a>&lt;/h2>
&lt;h2 id="part-1">Part 1&lt;/h2>
&lt;blockquote>
&lt;p>Given a list of pairs of spans (of the form a-b,x-y) count how many spans have one span entirely contained within the other.&lt;/p>
&lt;/blockquote></description></item><item><title>AoC 2022 Day 3: Rucksackinator</title><link>https://blog.jverkamp.com/2022/12/03/aoc-2022-day-3-rucksackinator/</link><pubDate>Sat, 03 Dec 2022 00:00:03 +0000</pubDate><guid>https://blog.jverkamp.com/2022/12/03/aoc-2022-day-3-rucksackinator/</guid><description>&lt;h2 id="source-rucksack-reorganizationhttpsadventofcodecom2022day3">Source: &lt;a href="https://adventofcode.com/2022/day/3">Rucksack Reorganization&lt;/a>&lt;/h2>
&lt;h2 id="part-1">Part 1&lt;/h2>
&lt;blockquote>
&lt;p>Take a list of characters. For each line, split the line exactly in half and find the one character that&amp;rsquo;s in both halves. Assign a-z to values 1-26 and A-Z to 27-52. Sum these values.&lt;/p>
&lt;/blockquote></description></item><item><title>AoC 2022 Day 2: Roshamboinator</title><link>https://blog.jverkamp.com/2022/12/02/aoc-2022-day-2-roshamboinator/</link><pubDate>Fri, 02 Dec 2022 00:00:03 +0000</pubDate><guid>https://blog.jverkamp.com/2022/12/02/aoc-2022-day-2-roshamboinator/</guid><description>&lt;h2 id="source-rock-paper-scissorshttpsadventofcodecom2022day2">Source: &lt;a href="https://adventofcode.com/2022/day/2">Rock Paper Scissors&lt;/a>&lt;/h2>
&lt;h2 id="part-1">Part 1&lt;/h2>
&lt;blockquote>
&lt;p>Given a list of Rock Paper Scissors matches with A,B,C or X,Y,Z corresponding to those plays and scoring 1,2,3 points for your play plus 0,3,6 for a loss, draw, or win, what is your total score.&lt;/p>
&lt;/blockquote></description></item><item><title>AoC 2022 Day 1: Calorinator</title><link>https://blog.jverkamp.com/2022/12/01/aoc-2022-day-1-calorinator/</link><pubDate>Thu, 01 Dec 2022 00:00:03 +0000</pubDate><guid>https://blog.jverkamp.com/2022/12/01/aoc-2022-day-1-calorinator/</guid><description>&lt;h2 id="source-calorie-countinghttpsadventofcodecom2022day1">Source: &lt;a href="https://adventofcode.com/2022/day/1">Calorie Counting&lt;/a>&lt;/h2>
&lt;h2 id="part-1">Part 1&lt;/h2>
&lt;blockquote>
&lt;p>Given multiple lists of numbers, find the list with the largest sum.&lt;/p>
&lt;/blockquote></description></item><item><title>Advent of Code 2022</title><link>https://blog.jverkamp.com/2022/12/01/advent-of-code-2022/</link><pubDate>Thu, 01 Dec 2022 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2022/12/01/advent-of-code-2022/</guid><description>&lt;p>Let&amp;rsquo;s do this thing!&lt;/p>
&lt;p>I&amp;rsquo;m going to try Rust this time, since it&amp;rsquo;s 1) awesome 2) fast and 3) crazy. :D&lt;/p>
&lt;p>Let&amp;rsquo;s see how it goes!&lt;/p>
&lt;p>If you&amp;rsquo;d like to see the full form of any particular solution, you can do so on GitHub (including previous years and possibly some I haven&amp;rsquo;t written up yet): &lt;a href="https://github.com/jpverkamp/advent-of-code">jpverkamp/advent-of-code&lt;/a>&lt;/p></description></item><item><title>AoC 2021 Day 25: Cucumbinator</title><link>https://blog.jverkamp.com/2021/12/25/aoc-2021-day-25-cucumbinator/</link><pubDate>Sat, 25 Dec 2021 00:00:03 +0000</pubDate><guid>https://blog.jverkamp.com/2021/12/25/aoc-2021-day-25-cucumbinator/</guid><description>&lt;h3 id="source-sea-cucumberhttpsadventofcodecom2021day25">Source: &lt;a href="https://adventofcode.com/2021/day/25">Sea Cucumber&lt;/a>&lt;/h3>
&lt;h4 id="part-1-load-a-grid-of-empty-cells--east-movers--and-south-movers-v-each-step-move-all-east-movers-than-all-south-movers-only-if-they-can-this-iteration-wrap-eastwest-and-northsouth-how-many-steps-does-it-take-the-movers-to-get-stuck">&lt;strong>Part 1:&lt;/strong> Load a grid of empty cells (&lt;code>.&lt;/code>), east movers (&lt;code>&amp;gt;&lt;/code>), and south movers (&lt;code>v&lt;/code>). Each step, move all east movers than all south movers (only if they can this iteration). Wrap east/west and north/south. How many steps does it take the movers to get stuck?&lt;/h4></description></item><item><title>AoC 2021 Day 24: Aluinator</title><link>https://blog.jverkamp.com/2021/12/24/aoc-2021-day-24-aluinator/</link><pubDate>Fri, 24 Dec 2021 00:00:03 +0000</pubDate><guid>https://blog.jverkamp.com/2021/12/24/aoc-2021-day-24-aluinator/</guid><description>&lt;h3 id="source-arithmetic-logic-unithttpsadventofcodecom2021day24">Source: &lt;a href="https://adventofcode.com/2021/day/24">Arithmetic Logic Unit&lt;/a>&lt;/h3>
&lt;h4 id="part-1-simulate-an-alu-with-4-registers-w-x-y-and-z-and-instructions-defined-below-find-the-largest-14-digit-number-with-no-0-digits-which-result-in-z0">&lt;strong>Part 1:&lt;/strong> Simulate an ALU with 4 registers (&lt;code>w&lt;/code>, &lt;code>x&lt;/code>, &lt;code>y&lt;/code>, and &lt;code>z&lt;/code>) and instructions defined below. Find the largest 14 digit number with no 0 digits which result in &lt;code>z=0&lt;/code>.&lt;/h4></description></item><item><title>AoC 2021 Day 23: Amphipodinator</title><link>https://blog.jverkamp.com/2021/12/23/aoc-2021-day-23-amphipodinator/</link><pubDate>Thu, 23 Dec 2021 00:00:03 +0000</pubDate><guid>https://blog.jverkamp.com/2021/12/23/aoc-2021-day-23-amphipodinator/</guid><description>&lt;h3 id="source-amphipodhttpsadventofcodecom2021day23">Source: &lt;a href="https://adventofcode.com/2021/day/23">Amphipod&lt;/a>&lt;/h3>
&lt;h4 id="part-1-given-4-rooms-full-of-amphipods-with-various-energy-costs-for-movement-a1-b10-c100-d1000-and-a-hallway-how-much-energy-does-it-take-at-minimum-to-sort-the-amphipods-into-their-own-rooms-with-the-following-conditions">&lt;strong>Part 1:&lt;/strong> Given 4 rooms full of amphipods with various energy costs for movement (a=1, b=10, c=100, d=1000) and a hallway, how much energy does it take (at minimum) to sort the amphipods into their own rooms with the following conditions:&lt;/h4></description></item><item><title>AoC 2021 Day 22: Cubinator</title><link>https://blog.jverkamp.com/2021/12/22/aoc-2021-day-22-cubinator/</link><pubDate>Wed, 22 Dec 2021 00:00:05 +0000</pubDate><guid>https://blog.jverkamp.com/2021/12/22/aoc-2021-day-22-cubinator/</guid><description>&lt;h3 id="source-reactor-reboothttpsadventofcodecom2021day22">Source: &lt;a href="https://adventofcode.com/2021/day/22">Reactor Reboot&lt;/a>&lt;/h3>
&lt;h4 id="part-1-given-a-series-of-3d-cubes-that-either-turn-on-all-or-turn-off-all-points-in-their-region-calculate-how-many-points-in-the-region--5050-5050-5050-are-on-at-the-end">&lt;strong>Part 1:&lt;/strong> Given a series of 3D cubes that either turn ON all or turn OFF all points in their region, calculate how many points in the region (-50..50,-50..50,-50..50) are ON at the end.&lt;/h4></description></item><item><title>AoC 2021 Day 21: Dicinator</title><link>https://blog.jverkamp.com/2021/12/21/aoc-2021-day-21-dicinator/</link><pubDate>Tue, 21 Dec 2021 00:00:05 +0000</pubDate><guid>https://blog.jverkamp.com/2021/12/21/aoc-2021-day-21-dicinator/</guid><description>&lt;h3 id="source-dirac-dicehttpsadventofcodecom2021day21">Source: &lt;a href="https://adventofcode.com/2021/day/21">Dirac Dice&lt;/a>&lt;/h3>
&lt;h4 id="part-1-play-a-simple-game-describe-below-with-a-loaded-d100-that-always-rolls-1-2-3--99-100-1--return-the-score-of-the-losing-player-times-the-number-of-times-the-die-was-rolled">&lt;strong>Part 1:&lt;/strong> Play a simple game (describe below) with a loaded D100 (that always rolls 1, 2, 3, &amp;hellip; 99, 100, 1, &amp;hellip;). Return the score of the losing player times the number of times the die was rolled.&lt;/h4></description></item><item><title>AoC 2021 Day 20: Enhancinator</title><link>https://blog.jverkamp.com/2021/12/20/aoc-2021-day-20-enhancinator/</link><pubDate>Mon, 20 Dec 2021 00:00:05 +0000</pubDate><guid>https://blog.jverkamp.com/2021/12/20/aoc-2021-day-20-enhancinator/</guid><description>&lt;h3 id="source-trench-maphttpsadventofcodecom2021day20">Source: &lt;a href="https://adventofcode.com/2021/day/20">Trench Map&lt;/a>&lt;/h3>
&lt;h4 id="part-1-given-a-9-1-hahahugoshortcode-s0-hbhb-update-function-take-the-pixel-and-8-surrounding-pixels-as-a-9-bit-index-into-the-function-and-a-binary-image-apply-the-function-twice-and-count-the-number-of-lit-pixels-assume-that-the-canvas-is-infinite">&lt;strong>Part 1:&lt;/strong> Given a 9-&amp;gt;1 &lt;a href="https://en.wikipedia.org/wiki/cellular%20automota">cellular automota&lt;/a> update function (take the pixel and 8 surrounding pixels as a 9-bit index into the function) and a binary image, apply the function twice and count the number of &amp;rsquo;lit&amp;rsquo; pixels. Assume that the canvas is infinite.&lt;/h4></description></item><item><title>AoC 2021 Day 19: Point Matchinator</title><link>https://blog.jverkamp.com/2021/12/19/aoc-2021-day-19-point-matchinator/</link><pubDate>Sun, 19 Dec 2021 00:00:05 +0000</pubDate><guid>https://blog.jverkamp.com/2021/12/19/aoc-2021-day-19-point-matchinator/</guid><description>&lt;h3 id="source-snailfishhttpsadventofcodecom2021day19">Source: &lt;a href="https://adventofcode.com/2021/day/19">Snailfish&lt;/a>&lt;/h3>
&lt;h4 id="part-1-you-will-be-given-a-series-of-scanners-each-of-which-will-tell-you-the-location-from-their-point-of-view-of-a-series-of-beacons-each-scanner-may-be-flipped-or-rotated-in-increments-of-90-degrees-in-any-direction-determine-where-each-scanner-and-beacon-is-by-overlaying-the-maps-with-at-least-pairwise-12-matches">&lt;strong>Part 1:&lt;/strong> You will be given a series of Scanners, each of which will tell you the location (from their point of view) of a series of Beacons. Each Scanner may be flipped or rotated in increments of 90 degrees in any direction. Determine where each Scanner and Beacon is by overlaying the maps (with at least pairwise 12 matches).&lt;/h4></description></item><item><title>AoC 2021 Day 18: Pairs of Pairs</title><link>https://blog.jverkamp.com/2021/12/18/aoc-2021-day-18-pairs-of-pairs/</link><pubDate>Sat, 18 Dec 2021 00:00:05 +0000</pubDate><guid>https://blog.jverkamp.com/2021/12/18/aoc-2021-day-18-pairs-of-pairs/</guid><description>&lt;h3 id="source-snailfishhttpsadventofcodecom2021day18">Source: &lt;a href="https://adventofcode.com/2021/day/18">Snailfish&lt;/a>&lt;/h3>
&lt;h4 id="part-1-given-the-following-definition-of-snailfish-numbers-add-a-series-of-snailfish-numbers-and-return-the-magnitude-of-the-result">&lt;strong>Part 1:&lt;/strong> Given the following definition of Snailfish numbers, add a series of Snailfish numbers and return the magnitude of the result.&lt;/h4></description></item><item><title>AoC 2021 Day 17: Pew-Pewinator</title><link>https://blog.jverkamp.com/2021/12/17/aoc-2021-day-17-pew-pewinator/</link><pubDate>Fri, 17 Dec 2021 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2021/12/17/aoc-2021-day-17-pew-pewinator/</guid><description>&lt;h3 id="source-trick-shothttpsadventofcodecom2021day17">Source: &lt;a href="https://adventofcode.com/2021/day/17">Trick Shot&lt;/a>&lt;/h3>
&lt;h4 id="part-1-simulate-a-projectile-with-an-integer-initial-velocity-x-y-air-resistance-that-tries-to-reduce-x-velocity-to-0-and-gravity-that-increases-y-velocity-by-1-each-time-given-a-target-range-find-the-highest-point-reached-by-a-projectile-that-ends-a-tick-not-one-that-crosses-over-within-the-target-area">&lt;strong>Part 1:&lt;/strong> Simulate a projectile with an integer initial velocity (x, y), air resistance that tries to reduce x-velocity to 0, and gravity that increases y-velocity by 1 each time. Given a target range, find the highest point reached by a projectile that ends a tick (not one that crosses over) within the target area.&lt;/h4></description></item><item><title>AoC 2021 Day 16: Depacketinator</title><link>https://blog.jverkamp.com/2021/12/16/aoc-2021-day-16-depacketinator/</link><pubDate>Thu, 16 Dec 2021 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2021/12/16/aoc-2021-day-16-depacketinator/</guid><description>&lt;h3 id="source-packet-decoderhttpsadventofcodecom2021day16">Source: &lt;a href="https://adventofcode.com/2021/day/16">Packet Decoder&lt;/a>&lt;/h3>
&lt;h4 id="part-1-given-a-recursive-binary-packet-definition-see-below-parse-the-given-packet-return-the-sum-of-each-packets-version">&lt;strong>Part 1:&lt;/strong> Given a recursive binary packet definition (see below), parse the given packet. Return the sum of each packet&amp;rsquo;s &lt;code>version&lt;/code>.&lt;/h4></description></item><item><title>AoC 2021 Day 15: Low Ceiling Simulator</title><link>https://blog.jverkamp.com/2021/12/15/aoc-2021-day-15-low-ceiling-simulator/</link><pubDate>Wed, 15 Dec 2021 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2021/12/15/aoc-2021-day-15-low-ceiling-simulator/</guid><description>&lt;h3 id="source-chitonhttpsadventofcodecom2021day15">Source: &lt;a href="https://adventofcode.com/2021/day/15">Chiton&lt;/a>&lt;/h3>
&lt;h4 id="part-1-given-a-grid-of-weights-find-the-minimum-path-from-top-left-to-top-right-return-the-total-weight-along-that-path">&lt;strong>Part 1:&lt;/strong> Given a grid of weights, find the minimum path from top left to top right. Return the total weight along that path.&lt;/h4></description></item><item><title>AoC 2021 Day 14: Polymerizationinator</title><link>https://blog.jverkamp.com/2021/12/14/aoc-2021-day-14-polymerizationinator/</link><pubDate>Tue, 14 Dec 2021 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2021/12/14/aoc-2021-day-14-polymerizationinator/</guid><description>&lt;h3 id="source-extended-polymerizationhttpsadventofcodecom2021day14">Source: &lt;a href="https://adventofcode.com/2021/day/14">Extended Polymerization&lt;/a>&lt;/h3>
&lt;h4 id="part-1-given-a-complete-function-fa-b---c-where-any-string-ab-becomes-acb-and-an-input-string-apply-the-function-at-the-same-time-to-every-overlapping-pair-of-letters-repeat-this-time-times-report-the-difference-in-counts-between-the-most-and-least-common-letters-in-the-final-situation">&lt;strong>Part 1:&lt;/strong> Given a complete function &lt;code>f(a, b) -&amp;gt; c&lt;/code> where any string &lt;code>ab&lt;/code> becomes &lt;code>acb&lt;/code> and an input string, apply the function at the same time to every (overlapping) pair of letters. Repeat this time times. Report the difference in counts between the most and least common letters in the final situation.&lt;/h4></description></item><item><title>AoC 2021 Day 13: Foldinator</title><link>https://blog.jverkamp.com/2021/12/13/aoc-2021-day-13-foldinator/</link><pubDate>Mon, 13 Dec 2021 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2021/12/13/aoc-2021-day-13-foldinator/</guid><description>&lt;h3 id="source-transparent-origamihttpsadventofcodecom2021day13">Source: &lt;a href="https://adventofcode.com/2021/day/13">Transparent Origami&lt;/a>&lt;/h3>
&lt;h4 id="part-1-given-a-set-of-points-and-a-sequence-of-fold-lines-where-you-either-fold-the-bottom-over-the-top-or-right-over-left-determine-how-many-points-exist-after-the-first-fold">&lt;strong>Part 1:&lt;/strong> Given a set of points and a sequence of &amp;lsquo;fold&amp;rsquo; lines (where you either fold the bottom over the top or right over left), determine how many points exist after the first fold.&lt;/h4></description></item><item><title>AoC 2021 Day 12: Submarine Spider</title><link>https://blog.jverkamp.com/2021/12/12/aoc-2021-day-12-submarine-spider/</link><pubDate>Sun, 12 Dec 2021 00:00:15 +0000</pubDate><guid>https://blog.jverkamp.com/2021/12/12/aoc-2021-day-12-submarine-spider/</guid><description>&lt;h3 id="source-passage-pathinghttpsadventofcodecom2021day12">Source: &lt;a href="https://adventofcode.com/2021/day/12">Passage Pathing&lt;/a>&lt;/h3>
&lt;h4 id="part-1-given-a-list-of-edges-in-a-bi-directional-graph-count-the-number-of-paths-from-start-to-end-such-that-nodes-named-with-lowercase-letters-are-visited-once-and-nodes-with-uppercase-letters-can-be-visited-any-number-of-times">&lt;strong>Part 1:&lt;/strong> Given a list of edges in a bi-directional graph, count the number of paths from &lt;code>start&lt;/code> to &lt;code>end&lt;/code> such that nodes named with lowercase letters are visited once, and nodes with uppercase letters can be visited any number of times.&lt;/h4></description></item><item><title>AoC 2021 Day 11: Octopus Flashinator</title><link>https://blog.jverkamp.com/2021/12/11/aoc-2021-day-11-octopus-flashinator/</link><pubDate>Sat, 11 Dec 2021 00:00:15 +0000</pubDate><guid>https://blog.jverkamp.com/2021/12/11/aoc-2021-day-11-octopus-flashinator/</guid><description>&lt;h3 id="source-dumbo-octopushttpsadventofcodecom2021day11">Source: &lt;a href="https://adventofcode.com/2021/day/11">Dumbo Octopus&lt;/a>&lt;/h3>
&lt;h4 id="part-1-simulate-a-grid-of-numbers-such-that-on-each-tick-advance-all-numbers-by-1-any-number-that-increases-over-9-will-flash-and-add-1-to-all-neighbors-recursively-but-each-cell-can-only-flash-once-and-then-reset-to-0-count-the-number-of-flashes-in-the-first-100-ticks">&lt;strong>Part 1:&lt;/strong> Simulate a grid of numbers such that on each tick: advance all numbers by 1, any number that increases over 9 will &amp;lsquo;flash&amp;rsquo; and add 1 to all neighbors (recursively, but each cell can only flash once) and then reset to 0. Count the number of flashes in the first 100 ticks.&lt;/h4></description></item><item><title>AoC 2021 Day 10: Chunkinator</title><link>https://blog.jverkamp.com/2021/12/10/aoc-2021-day-10-chunkinator/</link><pubDate>Fri, 10 Dec 2021 00:00:15 +0000</pubDate><guid>https://blog.jverkamp.com/2021/12/10/aoc-2021-day-10-chunkinator/</guid><description>&lt;h3 id="source-syntax-scoringhttpsadventofcodecom2021day10">Source: &lt;a href="https://adventofcode.com/2021/day/10">Syntax Scoring&lt;/a>&lt;/h3>
&lt;h4 id="part-1-given-a-sequence-of----and--with-nesting-allowed-find-the-first-syntax-error-where-the-wrong-closing-symbol-is-used-scoring-3-57-1197-and-25137-respectively-for-each-error-calculate-the-total-error-score">&lt;strong>Part 1:&lt;/strong> Given a sequence of () [] {}, and &amp;lt;&amp;gt; with nesting allowed. Find the first syntax error (where the wrong closing symbol is used). Scoring 3, 57, 1197, and 25137 respectively for each error, calculate the total error score.&lt;/h4></description></item><item><title>AoC 2021 Day 9: Local Minimum Deminifier</title><link>https://blog.jverkamp.com/2021/12/09/aoc-2021-day-9-local-minimum-deminifier/</link><pubDate>Thu, 09 Dec 2021 00:00:15 +0000</pubDate><guid>https://blog.jverkamp.com/2021/12/09/aoc-2021-day-9-local-minimum-deminifier/</guid><description>&lt;h3 id="source-smoke-basinhttpsadventofcodecom2021day9">Source: &lt;a href="https://adventofcode.com/2021/day/9">Smoke Basin&lt;/a>&lt;/h3>
&lt;h4 id="part-1-given-a-heightmap-find-all-local-minimums-return-the-sum-of-minimum-height--1-for-each-local-minimum">&lt;strong>Part 1:&lt;/strong> Given a heightmap, find all local minimums. Return the sum of (minimum height + 1) for each local minimum.&lt;/h4></description></item><item><title>AoC 2021 Day 8: Seven Segment Demystifier</title><link>https://blog.jverkamp.com/2021/12/08/aoc-2021-day-8-seven-segment-demystifier/</link><pubDate>Wed, 08 Dec 2021 00:00:10 +0000</pubDate><guid>https://blog.jverkamp.com/2021/12/08/aoc-2021-day-8-seven-segment-demystifier/</guid><description>&lt;h3 id="source-seven-segment-searchhttpsadventofcodecom2021day8">Source: &lt;a href="https://adventofcode.com/2021/day/8">Seven Segment Search&lt;/a>&lt;/h3>
&lt;h4 id="part-1-simulate-a-hahahugoshortcode-s0-hbhb-where-you-do-not-know-which-input-wire-controls-which-segment-given-the-wires-used-in-all-ten-digits-and-four-output-digits-count-how-many-times-1-4-7-and-8-are-outputted">&lt;strong>Part 1:&lt;/strong> Simulate a &lt;a href="https://en.wikipedia.org/wiki/seven%20segment%20displey">seven segment displey&lt;/a> where you do not know which input wire controls which segment. Given the wires used in all ten digits and four output digits, count how many times 1, 4, 7, and 8 are outputted.&lt;/h4></description></item><item><title>AoC 2021 Day 7: Brachyura Aligner</title><link>https://blog.jverkamp.com/2021/12/07/aoc-2021-day-7-brachyura-aligner/</link><pubDate>Tue, 07 Dec 2021 00:00:10 +0000</pubDate><guid>https://blog.jverkamp.com/2021/12/07/aoc-2021-day-7-brachyura-aligner/</guid><description>&lt;h3 id="source-the-treachery-of-whaleshttpsadventofcodecom2021day7">Source: &lt;a href="https://adventofcode.com/2021/day/7">The Treachery of Whales&lt;/a>&lt;/h3>
&lt;h4 id="part-1-given-a-list-of-numbers-find-the-minimum-integer-i-such-the-sum-difference-of-each-number-and-i-is-minimized">&lt;strong>Part 1:&lt;/strong> Given a list of numbers, find the minimum integer &lt;code>I&lt;/code> such the sum difference of each number and I is minimized.&lt;/h4></description></item><item><title>AoC 2021 Day 6: We All Glow Down Here</title><link>https://blog.jverkamp.com/2021/12/06/aoc-2021-day-6-we-all-glow-down-here/</link><pubDate>Mon, 06 Dec 2021 00:00:10 +0000</pubDate><guid>https://blog.jverkamp.com/2021/12/06/aoc-2021-day-6-we-all-glow-down-here/</guid><description>&lt;h3 id="source-latternfishhttpsadventofcodecom2021day6">Source: &lt;a href="https://adventofcode.com/2021/day/6">Latternfish&lt;/a>&lt;/h3>
&lt;h4 id="part-1-simulate-a-population-of-lanternfish-each-fish-is-immortal-starts-having-children-after-9-days-and-has-another-child-after-7-more-days-calculate-the-number-of-fish-after-80-days">&lt;strong>Part 1:&lt;/strong> Simulate a population of lanternfish. Each fish is immortal, starts having children after 9 days, and has another child after 7 more days. Calculate the number of fish after 80 days.&lt;/h4></description></item><item><title>AoC 2021 Day 5: Linear Avoidinator</title><link>https://blog.jverkamp.com/2021/12/05/aoc-2021-day-5-linear-avoidinator/</link><pubDate>Sun, 05 Dec 2021 00:00:10 +0000</pubDate><guid>https://blog.jverkamp.com/2021/12/05/aoc-2021-day-5-linear-avoidinator/</guid><description>&lt;h3 id="source-hydrothermal-venturehttpsadventofcodecom2021day5">Source: &lt;a href="https://adventofcode.com/2021/day/5">Hydrothermal Venture&lt;/a>&lt;/h3>
&lt;h4 id="part-1-given-a-list-of-lines-find-the-number-of-integer-points-which-are-covered-by-more-than-one-line-ignore-non-vertical-and-non-horizontal-lines">&lt;strong>Part 1:&lt;/strong> Given a list of lines, find the number of integer points which are covered by more than one line (ignore non-vertical and non-horizontal lines).&lt;/h4>
&lt;p>Okay. Start with the data structures:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">@dataclass&lt;/span>(frozen&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#66d9ef">True&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Point&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> x: int
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> y: int
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">@dataclass&lt;/span>(frozen&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#66d9ef">True&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Line&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> p1: Point
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> p2: Point
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">is_vertical&lt;/span>(self):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> self&lt;span style="color:#f92672">.&lt;/span>p1&lt;span style="color:#f92672">.&lt;/span>x &lt;span style="color:#f92672">==&lt;/span> self&lt;span style="color:#f92672">.&lt;/span>p2&lt;span style="color:#f92672">.&lt;/span>x
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">is_horizontal&lt;/span>(self):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> self&lt;span style="color:#f92672">.&lt;/span>p1&lt;span style="color:#f92672">.&lt;/span>y &lt;span style="color:#f92672">==&lt;/span> self&lt;span style="color:#f92672">.&lt;/span>p2&lt;span style="color:#f92672">.&lt;/span>y
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">is_orthagonal&lt;/span>(self):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> self&lt;span style="color:#f92672">.&lt;/span>is_vertical() &lt;span style="color:#f92672">or&lt;/span> self&lt;span style="color:#f92672">.&lt;/span>is_horizontal()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">points&lt;/span>(self):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># TODO: handle lines that aren&amp;#39;t vertical, horizontal, or diagonal&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> xd &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> self&lt;span style="color:#f92672">.&lt;/span>p1&lt;span style="color:#f92672">.&lt;/span>x &lt;span style="color:#f92672">==&lt;/span> self&lt;span style="color:#f92672">.&lt;/span>p2&lt;span style="color:#f92672">.&lt;/span>x &lt;span style="color:#66d9ef">else&lt;/span> (&lt;span style="color:#ae81ff">1&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> self&lt;span style="color:#f92672">.&lt;/span>p1&lt;span style="color:#f92672">.&lt;/span>x &lt;span style="color:#f92672">&amp;lt;&lt;/span> self&lt;span style="color:#f92672">.&lt;/span>p2&lt;span style="color:#f92672">.&lt;/span>x &lt;span style="color:#66d9ef">else&lt;/span> &lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> yd &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> self&lt;span style="color:#f92672">.&lt;/span>p1&lt;span style="color:#f92672">.&lt;/span>y &lt;span style="color:#f92672">==&lt;/span> self&lt;span style="color:#f92672">.&lt;/span>p2&lt;span style="color:#f92672">.&lt;/span>y &lt;span style="color:#66d9ef">else&lt;/span> (&lt;span style="color:#ae81ff">1&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> self&lt;span style="color:#f92672">.&lt;/span>p1&lt;span style="color:#f92672">.&lt;/span>y &lt;span style="color:#f92672">&amp;lt;&lt;/span> self&lt;span style="color:#f92672">.&lt;/span>p2&lt;span style="color:#f92672">.&lt;/span>y &lt;span style="color:#66d9ef">else&lt;/span> &lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> p &lt;span style="color:#f92672">=&lt;/span> self&lt;span style="color:#f92672">.&lt;/span>p1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">while&lt;/span> p &lt;span style="color:#f92672">!=&lt;/span> self&lt;span style="color:#f92672">.&lt;/span>p2:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">yield&lt;/span> p
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> p &lt;span style="color:#f92672">=&lt;/span> Point(p&lt;span style="color:#f92672">.&lt;/span>x &lt;span style="color:#f92672">+&lt;/span> xd, p&lt;span style="color:#f92672">.&lt;/span>y &lt;span style="color:#f92672">+&lt;/span> yd)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">yield&lt;/span> p
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Dataclasses are great. They give you constructors and a bunch of other things for free. On top of that, if you specify &lt;code>frozen=True&lt;/code>, making them immutable, you also get &lt;code>hashable&lt;/code> types for free (which I&amp;rsquo;ll use in the problem).&lt;/p>
&lt;p>Perhaps the most interesting bit here is the function that will iterate through the &lt;code>points&lt;/code> in a &lt;code>List&lt;/code>. Specifically, it will figure out the x and y delta (&lt;code>xd&lt;/code> and &lt;code>yd&lt;/code>) and repeatedly add that until you hit the end point.&lt;/p>
&lt;p>&lt;strong>Note:&lt;/strong> this only works for lines that are vertical, horizontal, or diagonal (at 45 degrees). Anything else needs a better &lt;a href="https://en.wikipedia.org/wiki/line%20drawing%20algorithm">line drawing algorithm&lt;/a> (of which there are a few). If we need it, I&amp;rsquo;ll implement it.&lt;/p>
&lt;p>Next, use that to parse:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">parse&lt;/span>(file: TextIO) &lt;span style="color:#f92672">-&amp;gt;&lt;/span> List[Line]:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> result &lt;span style="color:#f92672">=&lt;/span> []
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> line &lt;span style="color:#f92672">in&lt;/span> file:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> x1, y1, x2, y2 &lt;span style="color:#f92672">=&lt;/span> [int(v) &lt;span style="color:#66d9ef">for&lt;/span> v &lt;span style="color:#f92672">in&lt;/span> line&lt;span style="color:#f92672">.&lt;/span>replace(&lt;span style="color:#e6db74">&amp;#39; -&amp;gt; &amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;,&amp;#39;&lt;/span>)&lt;span style="color:#f92672">.&lt;/span>split(&lt;span style="color:#e6db74">&amp;#39;,&amp;#39;&lt;/span>)]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> result&lt;span style="color:#f92672">.&lt;/span>append(Line(Point(x1, y1), Point(x2, y2)))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> result
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The input format is &lt;code>x1,y1 -&amp;gt; x2,y2&lt;/code>, but it&amp;rsquo;s easier to split and convert if we do it all directly. There are a few other ways we could have done this: splitting on anything non-numeric or using a regular expression / something else for parsing directly. But I think this is clear enough.&lt;/p>
&lt;p>And with all that, the problem is actually pretty short:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">part1&lt;/span>(file: typer&lt;span style="color:#f92672">.&lt;/span>FileText):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> lines &lt;span style="color:#f92672">=&lt;/span> parse(file)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> counter: MutableMapping[Point, int] &lt;span style="color:#f92672">=&lt;/span> collections&lt;span style="color:#f92672">.&lt;/span>Counter()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> line &lt;span style="color:#f92672">in&lt;/span> lines:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#f92672">not&lt;/span> line&lt;span style="color:#f92672">.&lt;/span>is_orthagonal():
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">continue&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> point &lt;span style="color:#f92672">in&lt;/span> line&lt;span style="color:#f92672">.&lt;/span>points():
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> counter[point] &lt;span style="color:#f92672">+=&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print(sum(&lt;span style="color:#ae81ff">1&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> count &lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span> &lt;span style="color:#66d9ef">else&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#66d9ef">for&lt;/span> point, count &lt;span style="color:#f92672">in&lt;/span> counter&lt;span style="color:#f92672">.&lt;/span>items()))
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>We&amp;rsquo;ll use the built in &lt;code>collections.Counter&lt;/code> datatype, since that&amp;rsquo;s exactly what we&amp;rsquo;re doing: counting things. Then just iterate over every line, skip the non-orthagonal ones, iterate over every point, and count them up. At the end, print the number that we saw more than once. Et voila.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ python3 linear-avoidinator.py part1 input.txt
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">5632&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>AoC 2021 Day 4: His Name Oh</title><link>https://blog.jverkamp.com/2021/12/04/aoc-2021-day-4-his-name-oh/</link><pubDate>Sat, 04 Dec 2021 00:00:10 +0000</pubDate><guid>https://blog.jverkamp.com/2021/12/04/aoc-2021-day-4-his-name-oh/</guid><description>&lt;h3 id="source-giant-squidhttpsadventofcodecom2021day4">Source: &lt;a href="https://adventofcode.com/2021/day/4">Giant Squid&lt;/a>&lt;/h3>
&lt;h4 id="part-1-given-a-set-of-bingo-boards-and-a-list-of-numbers-find-the-first-board-to-win-multiply-the-sum-of-the-un-called-numbers-on-that-board-times-the-last-number-called">&lt;strong>Part 1:&lt;/strong> Given a set of bingo boards and a list of numbers, find the first board to win. Multiply the sum of the un-called numbers on that board times the last number called.&lt;/h4></description></item><item><title>AoC 2021 Day 3: Binary Contraption</title><link>https://blog.jverkamp.com/2021/12/03/aoc-2021-day-3-binary-contraption/</link><pubDate>Fri, 03 Dec 2021 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2021/12/03/aoc-2021-day-3-binary-contraption/</guid><description>&lt;h3 id="source-binary-diagnostichttpsadventofcodecom2021day3">Source: &lt;a href="https://adventofcode.com/2021/day/3">Binary Diagnostic&lt;/a>&lt;/h3>
&lt;h4 id="part-1-given-a-list-of-binary-numbers-calculate-gamma-such-that-each-bit-is-the-most-common-bit-in-that-position-in-the-input-and-epsilon-which-is-the-binary-inverse-of-gamma-return-the-product">&lt;strong>Part 1:&lt;/strong> Given a list of binary numbers, calculate gamma such that each bit is the most common bit in that position in the input and epsilon which is the binary inverse of gamma. Return the product.&lt;/h4></description></item><item><title>AoC 2021 Day 2: Submarine Simulator</title><link>https://blog.jverkamp.com/2021/12/02/aoc-2021-day-2-submarine-simulator/</link><pubDate>Thu, 02 Dec 2021 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2021/12/02/aoc-2021-day-2-submarine-simulator/</guid><description>&lt;h3 id="source-divehttpsadventofcodecom2021day2">Source: &lt;a href="https://adventofcode.com/2021/day/2">Dive!&lt;/a>&lt;/h3>
&lt;h4 id="part-1-simulate-a-submarine-with-3-commands-forward-n-down-n-and-up-n-that-move-forward-increase-depth-and-decrease-depth-in-that-order-calculate-the-product-of-the-final-position-and-depth">&lt;strong>Part 1:&lt;/strong> Simulate a submarine with 3 commands: &lt;code>forward N&lt;/code>, &lt;code>down N&lt;/code>, and &lt;code>up N&lt;/code> that move forward, increase depth, and decrease depth in that order. Calculate the product of the final position and depth.&lt;/h4></description></item></channel></rss>