<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Advent of Code on jverkamp.com</title><link>https://blog.jverkamp.com/programming/sources/advent-of-code/</link><description>Recent content in Advent of Code on jverkamp.com</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://blog.jverkamp.com/programming/sources/advent-of-code/atom.xml" rel="self" type="application/rss+xml"/><item><title>AoC 2022 Day 4: Overlapinator</title><link>https://blog.jverkamp.com/2022/12/04/aoc-2022-day-4-overlapinator/</link><pubDate>Sun, 04 Dec 2022 00:00:03 +0000</pubDate><guid>https://blog.jverkamp.com/2022/12/04/aoc-2022-day-4-overlapinator/</guid><description>&lt;h3 id="source-camp-cleanuphttpsadventofcodecom2022day4">Source: &lt;a href="https://adventofcode.com/2022/day/4">Camp Cleanup&lt;/a>&lt;/h3>
&lt;h4 id="part-1-given-a-list-of-pairs-of-spans-of-the-form-a-bx-y-count-how-many-spans-have-one-span-entirely-contained-within-the-other">&lt;strong>Part 1:&lt;/strong> Given a list of pairs of spans (of the form a-b,x-y) count how many spans have one span entirely contained within the other.&lt;/h4></description></item><item><title>AoC 2022 Day 3: Rucksackinator</title><link>https://blog.jverkamp.com/2022/12/03/aoc-2022-day-3-rucksackinator/</link><pubDate>Sat, 03 Dec 2022 00:00:03 +0000</pubDate><guid>https://blog.jverkamp.com/2022/12/03/aoc-2022-day-3-rucksackinator/</guid><description>&lt;h3 id="source-rucksack-reorganizationhttpsadventofcodecom2022day3">Source: &lt;a href="https://adventofcode.com/2022/day/3">Rucksack Reorganization&lt;/a>&lt;/h3>
&lt;h4 id="part-1-take-a-list-of-characters-for-each-line-split-the-line-exactly-in-half-and-find-the-one-character-thats-in-both-halves-assign-a-z-to-values-1-26-and-a-z-to-27-52-sum-these-values">&lt;strong>Part 1:&lt;/strong> Take a list of characters. For each line, split the line exactly in half and find the one character that&amp;rsquo;s in both halves. Assign a-z to values 1-26 and A-Z to 27-52. Sum these values.&lt;/h4></description></item><item><title>AoC 2022 Day 2: Roshamboinator</title><link>https://blog.jverkamp.com/2022/12/02/aoc-2022-day-2-roshamboinator/</link><pubDate>Fri, 02 Dec 2022 00:00:03 +0000</pubDate><guid>https://blog.jverkamp.com/2022/12/02/aoc-2022-day-2-roshamboinator/</guid><description>&lt;h3 id="source-rock-paper-scissorshttpsadventofcodecom2022day2">Source: &lt;a href="https://adventofcode.com/2022/day/2">Rock Paper Scissors&lt;/a>&lt;/h3>
&lt;h4 id="part-1-given-a-list-of-rock-paper-scissors-matches-with-abc-or-xyz-corresponding-to-those-plays-and-scoring-123-points-for-your-play-plus-036-for-a-loss-draw-or-win-what-is-your-total-score">&lt;strong>Part 1:&lt;/strong> Given a list of Rock Paper Scissors matches with A,B,C or X,Y,Z corresponding to those plays and scoring 1,2,3 points for your play plus 0,3,6 for a loss, draw, or win, what is your total score.&lt;/h4></description></item><item><title>AoC 2022 Day 1: Calorinator</title><link>https://blog.jverkamp.com/2022/12/01/aoc-2022-day-1-calorinator/</link><pubDate>Thu, 01 Dec 2022 00:00:03 +0000</pubDate><guid>https://blog.jverkamp.com/2022/12/01/aoc-2022-day-1-calorinator/</guid><description>&lt;h3 id="source-calorie-countinghttpsadventofcodecom2022day1">Source: &lt;a href="https://adventofcode.com/2022/day/1">Calorie Counting&lt;/a>&lt;/h3>
&lt;h4 id="part-1-given-multiple-lists-of-numbers-find-the-list-with-the-largest-sum">&lt;strong>Part 1:&lt;/strong> Given multiple lists of numbers, find the list with the largest sum.&lt;/h4></description></item><item><title>Advent of Code 2022</title><link>https://blog.jverkamp.com/2022/12/01/advent-of-code-2022/</link><pubDate>Thu, 01 Dec 2022 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2022/12/01/advent-of-code-2022/</guid><description>&lt;p>Let&amp;rsquo;s do this thing!&lt;/p>
&lt;p>I&amp;rsquo;m going to try Rust this time, since it&amp;rsquo;s 1) awesome 2) fast and 3) crazy. :D&lt;/p>
&lt;p>Let&amp;rsquo;s see how it goes!&lt;/p>
&lt;p>If you&amp;rsquo;d like to see the full form of any particular solution, you can do so on GitHub (including previous years and possibly some I haven&amp;rsquo;t written up yet): &lt;a href="https://github.com/jpverkamp/advent-of-code">jpverkamp/advent-of-code&lt;/a>&lt;/p></description></item><item><title>AoC 2021 Day 25: Cucumbinator</title><link>https://blog.jverkamp.com/2021/12/25/aoc-2021-day-25-cucumbinator/</link><pubDate>Sat, 25 Dec 2021 00:00:03 +0000</pubDate><guid>https://blog.jverkamp.com/2021/12/25/aoc-2021-day-25-cucumbinator/</guid><description>&lt;h3 id="source-sea-cucumberhttpsadventofcodecom2021day25">Source: &lt;a href="https://adventofcode.com/2021/day/25">Sea Cucumber&lt;/a>&lt;/h3>
&lt;h4 id="part-1-load-a-grid-of-empty-cells--east-movers--and-south-movers-v-each-step-move-all-east-movers-than-all-south-movers-only-if-they-can-this-iteration-wrap-eastwest-and-northsouth-how-many-steps-does-it-take-the-movers-to-get-stuck">&lt;strong>Part 1:&lt;/strong> Load a grid of empty cells (&lt;code>.&lt;/code>), east movers (&lt;code>&amp;gt;&lt;/code>), and south movers (&lt;code>v&lt;/code>). Each step, move all east movers than all south movers (only if they can this iteration). Wrap east/west and north/south. How many steps does it take the movers to get stuck?&lt;/h4></description></item><item><title>AoC 2021 Day 24: Aluinator</title><link>https://blog.jverkamp.com/2021/12/24/aoc-2021-day-24-aluinator/</link><pubDate>Fri, 24 Dec 2021 00:00:03 +0000</pubDate><guid>https://blog.jverkamp.com/2021/12/24/aoc-2021-day-24-aluinator/</guid><description>&lt;h3 id="source-arithmetic-logic-unithttpsadventofcodecom2021day24">Source: &lt;a href="https://adventofcode.com/2021/day/24">Arithmetic Logic Unit&lt;/a>&lt;/h3>
&lt;h4 id="part-1-simulate-an-alu-with-4-registers-w-x-y-and-z-and-instructions-defined-below-find-the-largest-14-digit-number-with-no-0-digits-which-result-in-z0">&lt;strong>Part 1:&lt;/strong> Simulate an ALU with 4 registers (&lt;code>w&lt;/code>, &lt;code>x&lt;/code>, &lt;code>y&lt;/code>, and &lt;code>z&lt;/code>) and instructions defined below. Find the largest 14 digit number with no 0 digits which result in &lt;code>z=0&lt;/code>.&lt;/h4></description></item><item><title>AoC 2021 Day 23: Amphipodinator</title><link>https://blog.jverkamp.com/2021/12/23/aoc-2021-day-23-amphipodinator/</link><pubDate>Thu, 23 Dec 2021 00:00:03 +0000</pubDate><guid>https://blog.jverkamp.com/2021/12/23/aoc-2021-day-23-amphipodinator/</guid><description>&lt;h3 id="source-amphipodhttpsadventofcodecom2021day23">Source: &lt;a href="https://adventofcode.com/2021/day/23">Amphipod&lt;/a>&lt;/h3>
&lt;h4 id="part-1-given-4-rooms-full-of-amphipods-with-various-energy-costs-for-movement-a1-b10-c100-d1000-and-a-hallway-how-much-energy-does-it-take-at-minimum-to-sort-the-amphipods-into-their-own-rooms-with-the-following-conditions">&lt;strong>Part 1:&lt;/strong> Given 4 rooms full of amphipods with various energy costs for movement (a=1, b=10, c=100, d=1000) and a hallway, how much energy does it take (at minimum) to sort the amphipods into their own rooms with the following conditions:&lt;/h4></description></item><item><title>AoC 2021 Day 22: Cubinator</title><link>https://blog.jverkamp.com/2021/12/22/aoc-2021-day-22-cubinator/</link><pubDate>Wed, 22 Dec 2021 00:00:05 +0000</pubDate><guid>https://blog.jverkamp.com/2021/12/22/aoc-2021-day-22-cubinator/</guid><description>&lt;h3 id="source-reactor-reboothttpsadventofcodecom2021day22">Source: &lt;a href="https://adventofcode.com/2021/day/22">Reactor Reboot&lt;/a>&lt;/h3>
&lt;h4 id="part-1-given-a-series-of-3d-cubes-that-either-turn-on-all-or-turn-off-all-points-in-their-region-calculate-how-many-points-in-the-region--5050-5050-5050-are-on-at-the-end">&lt;strong>Part 1:&lt;/strong> Given a series of 3D cubes that either turn ON all or turn OFF all points in their region, calculate how many points in the region (-50..50,-50..50,-50..50) are ON at the end.&lt;/h4></description></item><item><title>AoC 2021 Day 21: Dicinator</title><link>https://blog.jverkamp.com/2021/12/21/aoc-2021-day-21-dicinator/</link><pubDate>Tue, 21 Dec 2021 00:00:05 +0000</pubDate><guid>https://blog.jverkamp.com/2021/12/21/aoc-2021-day-21-dicinator/</guid><description>&lt;h3 id="source-dirac-dicehttpsadventofcodecom2021day21">Source: &lt;a href="https://adventofcode.com/2021/day/21">Dirac Dice&lt;/a>&lt;/h3>
&lt;h4 id="part-1-play-a-simple-game-describe-below-with-a-loaded-d100-that-always-rolls-1-2-3--99-100-1--return-the-score-of-the-losing-player-times-the-number-of-times-the-die-was-rolled">&lt;strong>Part 1:&lt;/strong> Play a simple game (describe below) with a loaded D100 (that always rolls 1, 2, 3, &amp;hellip; 99, 100, 1, &amp;hellip;). Return the score of the losing player times the number of times the die was rolled.&lt;/h4></description></item><item><title>AoC 2021 Day 20: Enhancinator</title><link>https://blog.jverkamp.com/2021/12/20/aoc-2021-day-20-enhancinator/</link><pubDate>Mon, 20 Dec 2021 00:00:05 +0000</pubDate><guid>https://blog.jverkamp.com/2021/12/20/aoc-2021-day-20-enhancinator/</guid><description>&lt;h3 id="source-trench-maphttpsadventofcodecom2021day20">Source: &lt;a href="https://adventofcode.com/2021/day/20">Trench Map&lt;/a>&lt;/h3>
&lt;h4 id="part-1-given-a-9-1-hahahugoshortcode-s0-hbhb-update-function-take-the-pixel-and-8-surrounding-pixels-as-a-9-bit-index-into-the-function-and-a-binary-image-apply-the-function-twice-and-count-the-number-of-lit-pixels-assume-that-the-canvas-is-infinite">&lt;strong>Part 1:&lt;/strong> Given a 9-&amp;gt;1 &lt;a href="https://en.wikipedia.org/wiki/cellular%20automota">cellular automota&lt;/a> update function (take the pixel and 8 surrounding pixels as a 9-bit index into the function) and a binary image, apply the function twice and count the number of &amp;rsquo;lit&amp;rsquo; pixels. Assume that the canvas is infinite.&lt;/h4></description></item><item><title>AoC 2021 Day 19: Point Matchinator</title><link>https://blog.jverkamp.com/2021/12/19/aoc-2021-day-19-point-matchinator/</link><pubDate>Sun, 19 Dec 2021 00:00:05 +0000</pubDate><guid>https://blog.jverkamp.com/2021/12/19/aoc-2021-day-19-point-matchinator/</guid><description>&lt;h3 id="source-snailfishhttpsadventofcodecom2021day19">Source: &lt;a href="https://adventofcode.com/2021/day/19">Snailfish&lt;/a>&lt;/h3>
&lt;h4 id="part-1-you-will-be-given-a-series-of-scanners-each-of-which-will-tell-you-the-location-from-their-point-of-view-of-a-series-of-beacons-each-scanner-may-be-flipped-or-rotated-in-increments-of-90-degrees-in-any-direction-determine-where-each-scanner-and-beacon-is-by-overlaying-the-maps-with-at-least-pairwise-12-matches">&lt;strong>Part 1:&lt;/strong> You will be given a series of Scanners, each of which will tell you the location (from their point of view) of a series of Beacons. Each Scanner may be flipped or rotated in increments of 90 degrees in any direction. Determine where each Scanner and Beacon is by overlaying the maps (with at least pairwise 12 matches).&lt;/h4></description></item><item><title>AoC 2021 Day 18: Pairs of Pairs</title><link>https://blog.jverkamp.com/2021/12/18/aoc-2021-day-18-pairs-of-pairs/</link><pubDate>Sat, 18 Dec 2021 00:00:05 +0000</pubDate><guid>https://blog.jverkamp.com/2021/12/18/aoc-2021-day-18-pairs-of-pairs/</guid><description>&lt;h3 id="source-snailfishhttpsadventofcodecom2021day18">Source: &lt;a href="https://adventofcode.com/2021/day/18">Snailfish&lt;/a>&lt;/h3>
&lt;h4 id="part-1-given-the-following-definition-of-snailfish-numbers-add-a-series-of-snailfish-numbers-and-return-the-magnitude-of-the-result">&lt;strong>Part 1:&lt;/strong> Given the following definition of Snailfish numbers, add a series of Snailfish numbers and return the magnitude of the result.&lt;/h4></description></item><item><title>AoC 2021 Day 17: Pew-Pewinator</title><link>https://blog.jverkamp.com/2021/12/17/aoc-2021-day-17-pew-pewinator/</link><pubDate>Fri, 17 Dec 2021 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2021/12/17/aoc-2021-day-17-pew-pewinator/</guid><description>&lt;h3 id="source-trick-shothttpsadventofcodecom2021day17">Source: &lt;a href="https://adventofcode.com/2021/day/17">Trick Shot&lt;/a>&lt;/h3>
&lt;h4 id="part-1-simulate-a-projectile-with-an-integer-initial-velocity-x-y-air-resistance-that-tries-to-reduce-x-velocity-to-0-and-gravity-that-increases-y-velocity-by-1-each-time-given-a-target-range-find-the-highest-point-reached-by-a-projectile-that-ends-a-tick-not-one-that-crosses-over-within-the-target-area">&lt;strong>Part 1:&lt;/strong> Simulate a projectile with an integer initial velocity (x, y), air resistance that tries to reduce x-velocity to 0, and gravity that increases y-velocity by 1 each time. Given a target range, find the highest point reached by a projectile that ends a tick (not one that crosses over) within the target area.&lt;/h4></description></item><item><title>AoC 2021 Day 16: Depacketinator</title><link>https://blog.jverkamp.com/2021/12/16/aoc-2021-day-16-depacketinator/</link><pubDate>Thu, 16 Dec 2021 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2021/12/16/aoc-2021-day-16-depacketinator/</guid><description>&lt;h3 id="source-packet-decoderhttpsadventofcodecom2021day16">Source: &lt;a href="https://adventofcode.com/2021/day/16">Packet Decoder&lt;/a>&lt;/h3>
&lt;h4 id="part-1-given-a-recursive-binary-packet-definition-see-below-parse-the-given-packet-return-the-sum-of-each-packets-version">&lt;strong>Part 1:&lt;/strong> Given a recursive binary packet definition (see below), parse the given packet. Return the sum of each packet&amp;rsquo;s &lt;code>version&lt;/code>.&lt;/h4></description></item><item><title>AoC 2021 Day 15: Low Ceiling Simulator</title><link>https://blog.jverkamp.com/2021/12/15/aoc-2021-day-15-low-ceiling-simulator/</link><pubDate>Wed, 15 Dec 2021 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2021/12/15/aoc-2021-day-15-low-ceiling-simulator/</guid><description>&lt;h3 id="source-chitonhttpsadventofcodecom2021day15">Source: &lt;a href="https://adventofcode.com/2021/day/15">Chiton&lt;/a>&lt;/h3>
&lt;h4 id="part-1-given-a-grid-of-weights-find-the-minimum-path-from-top-left-to-top-right-return-the-total-weight-along-that-path">&lt;strong>Part 1:&lt;/strong> Given a grid of weights, find the minimum path from top left to top right. Return the total weight along that path.&lt;/h4></description></item><item><title>AoC 2021 Day 14: Polymerizationinator</title><link>https://blog.jverkamp.com/2021/12/14/aoc-2021-day-14-polymerizationinator/</link><pubDate>Tue, 14 Dec 2021 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2021/12/14/aoc-2021-day-14-polymerizationinator/</guid><description>&lt;h3 id="source-extended-polymerizationhttpsadventofcodecom2021day14">Source: &lt;a href="https://adventofcode.com/2021/day/14">Extended Polymerization&lt;/a>&lt;/h3>
&lt;h4 id="part-1-given-a-complete-function-fa-b---c-where-any-string-ab-becomes-acb-and-an-input-string-apply-the-function-at-the-same-time-to-every-overlapping-pair-of-letters-repeat-this-time-times-report-the-difference-in-counts-between-the-most-and-least-common-letters-in-the-final-situation">&lt;strong>Part 1:&lt;/strong> Given a complete function &lt;code>f(a, b) -&amp;gt; c&lt;/code> where any string &lt;code>ab&lt;/code> becomes &lt;code>acb&lt;/code> and an input string, apply the function at the same time to every (overlapping) pair of letters. Repeat this time times. Report the difference in counts between the most and least common letters in the final situation.&lt;/h4></description></item><item><title>AoC 2021 Day 13: Foldinator</title><link>https://blog.jverkamp.com/2021/12/13/aoc-2021-day-13-foldinator/</link><pubDate>Mon, 13 Dec 2021 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2021/12/13/aoc-2021-day-13-foldinator/</guid><description>&lt;h3 id="source-transparent-origamihttpsadventofcodecom2021day13">Source: &lt;a href="https://adventofcode.com/2021/day/13">Transparent Origami&lt;/a>&lt;/h3>
&lt;h4 id="part-1-given-a-set-of-points-and-a-sequence-of-fold-lines-where-you-either-fold-the-bottom-over-the-top-or-right-over-left-determine-how-many-points-exist-after-the-first-fold">&lt;strong>Part 1:&lt;/strong> Given a set of points and a sequence of &amp;lsquo;fold&amp;rsquo; lines (where you either fold the bottom over the top or right over left), determine how many points exist after the first fold.&lt;/h4></description></item><item><title>AoC 2021 Day 12: Submarine Spider</title><link>https://blog.jverkamp.com/2021/12/12/aoc-2021-day-12-submarine-spider/</link><pubDate>Sun, 12 Dec 2021 00:00:15 +0000</pubDate><guid>https://blog.jverkamp.com/2021/12/12/aoc-2021-day-12-submarine-spider/</guid><description>&lt;h3 id="source-passage-pathinghttpsadventofcodecom2021day12">Source: &lt;a href="https://adventofcode.com/2021/day/12">Passage Pathing&lt;/a>&lt;/h3>
&lt;h4 id="part-1-given-a-list-of-edges-in-a-bi-directional-graph-count-the-number-of-paths-from-start-to-end-such-that-nodes-named-with-lowercase-letters-are-visited-once-and-nodes-with-uppercase-letters-can-be-visited-any-number-of-times">&lt;strong>Part 1:&lt;/strong> Given a list of edges in a bi-directional graph, count the number of paths from &lt;code>start&lt;/code> to &lt;code>end&lt;/code> such that nodes named with lowercase letters are visited once, and nodes with uppercase letters can be visited any number of times.&lt;/h4></description></item><item><title>AoC 2021 Day 11: Octopus Flashinator</title><link>https://blog.jverkamp.com/2021/12/11/aoc-2021-day-11-octopus-flashinator/</link><pubDate>Sat, 11 Dec 2021 00:00:15 +0000</pubDate><guid>https://blog.jverkamp.com/2021/12/11/aoc-2021-day-11-octopus-flashinator/</guid><description>&lt;h3 id="source-dumbo-octopushttpsadventofcodecom2021day11">Source: &lt;a href="https://adventofcode.com/2021/day/11">Dumbo Octopus&lt;/a>&lt;/h3>
&lt;h4 id="part-1-simulate-a-grid-of-numbers-such-that-on-each-tick-advance-all-numbers-by-1-any-number-that-increases-over-9-will-flash-and-add-1-to-all-neighbors-recursively-but-each-cell-can-only-flash-once-and-then-reset-to-0-count-the-number-of-flashes-in-the-first-100-ticks">&lt;strong>Part 1:&lt;/strong> Simulate a grid of numbers such that on each tick: advance all numbers by 1, any number that increases over 9 will &amp;lsquo;flash&amp;rsquo; and add 1 to all neighbors (recursively, but each cell can only flash once) and then reset to 0. Count the number of flashes in the first 100 ticks.&lt;/h4></description></item><item><title>AoC 2021 Day 10: Chunkinator</title><link>https://blog.jverkamp.com/2021/12/10/aoc-2021-day-10-chunkinator/</link><pubDate>Fri, 10 Dec 2021 00:00:15 +0000</pubDate><guid>https://blog.jverkamp.com/2021/12/10/aoc-2021-day-10-chunkinator/</guid><description>&lt;h3 id="source-syntax-scoringhttpsadventofcodecom2021day10">Source: &lt;a href="https://adventofcode.com/2021/day/10">Syntax Scoring&lt;/a>&lt;/h3>
&lt;h4 id="part-1-given-a-sequence-of----and--with-nesting-allowed-find-the-first-syntax-error-where-the-wrong-closing-symbol-is-used-scoring-3-57-1197-and-25137-respectively-for-each-error-calculate-the-total-error-score">&lt;strong>Part 1:&lt;/strong> Given a sequence of () [] {}, and &amp;lt;&amp;gt; with nesting allowed. Find the first syntax error (where the wrong closing symbol is used). Scoring 3, 57, 1197, and 25137 respectively for each error, calculate the total error score.&lt;/h4></description></item><item><title>AoC 2021 Day 9: Local Minimum Deminifier</title><link>https://blog.jverkamp.com/2021/12/09/aoc-2021-day-9-local-minimum-deminifier/</link><pubDate>Thu, 09 Dec 2021 00:00:15 +0000</pubDate><guid>https://blog.jverkamp.com/2021/12/09/aoc-2021-day-9-local-minimum-deminifier/</guid><description>&lt;h3 id="source-smoke-basinhttpsadventofcodecom2021day9">Source: &lt;a href="https://adventofcode.com/2021/day/9">Smoke Basin&lt;/a>&lt;/h3>
&lt;h4 id="part-1-given-a-heightmap-find-all-local-minimums-return-the-sum-of-minimum-height--1-for-each-local-minimum">&lt;strong>Part 1:&lt;/strong> Given a heightmap, find all local minimums. Return the sum of (minimum height + 1) for each local minimum.&lt;/h4></description></item><item><title>AoC 2021 Day 8: Seven Segment Demystifier</title><link>https://blog.jverkamp.com/2021/12/08/aoc-2021-day-8-seven-segment-demystifier/</link><pubDate>Wed, 08 Dec 2021 00:00:10 +0000</pubDate><guid>https://blog.jverkamp.com/2021/12/08/aoc-2021-day-8-seven-segment-demystifier/</guid><description>&lt;h3 id="source-seven-segment-searchhttpsadventofcodecom2021day8">Source: &lt;a href="https://adventofcode.com/2021/day/8">Seven Segment Search&lt;/a>&lt;/h3>
&lt;h4 id="part-1-simulate-a-hahahugoshortcode-s0-hbhb-where-you-do-not-know-which-input-wire-controls-which-segment-given-the-wires-used-in-all-ten-digits-and-four-output-digits-count-how-many-times-1-4-7-and-8-are-outputted">&lt;strong>Part 1:&lt;/strong> Simulate a &lt;a href="https://en.wikipedia.org/wiki/seven%20segment%20displey">seven segment displey&lt;/a> where you do not know which input wire controls which segment. Given the wires used in all ten digits and four output digits, count how many times 1, 4, 7, and 8 are outputted.&lt;/h4></description></item><item><title>AoC 2021 Day 7: Brachyura Aligner</title><link>https://blog.jverkamp.com/2021/12/07/aoc-2021-day-7-brachyura-aligner/</link><pubDate>Tue, 07 Dec 2021 00:00:10 +0000</pubDate><guid>https://blog.jverkamp.com/2021/12/07/aoc-2021-day-7-brachyura-aligner/</guid><description>&lt;h3 id="source-the-treachery-of-whaleshttpsadventofcodecom2021day7">Source: &lt;a href="https://adventofcode.com/2021/day/7">The Treachery of Whales&lt;/a>&lt;/h3>
&lt;h4 id="part-1-given-a-list-of-numbers-find-the-minimum-integer-i-such-the-sum-difference-of-each-number-and-i-is-minimized">&lt;strong>Part 1:&lt;/strong> Given a list of numbers, find the minimum integer &lt;code>I&lt;/code> such the sum difference of each number and I is minimized.&lt;/h4></description></item><item><title>AoC 2021 Day 6: We All Glow Down Here</title><link>https://blog.jverkamp.com/2021/12/06/aoc-2021-day-6-we-all-glow-down-here/</link><pubDate>Mon, 06 Dec 2021 00:00:10 +0000</pubDate><guid>https://blog.jverkamp.com/2021/12/06/aoc-2021-day-6-we-all-glow-down-here/</guid><description>&lt;h3 id="source-latternfishhttpsadventofcodecom2021day6">Source: &lt;a href="https://adventofcode.com/2021/day/6">Latternfish&lt;/a>&lt;/h3>
&lt;h4 id="part-1-simulate-a-population-of-lanternfish-each-fish-is-immortal-starts-having-children-after-9-days-and-has-another-child-after-7-more-days-calculate-the-number-of-fish-after-80-days">&lt;strong>Part 1:&lt;/strong> Simulate a population of lanternfish. Each fish is immortal, starts having children after 9 days, and has another child after 7 more days. Calculate the number of fish after 80 days.&lt;/h4></description></item><item><title>AoC 2021 Day 5: Linear Avoidinator</title><link>https://blog.jverkamp.com/2021/12/05/aoc-2021-day-5-linear-avoidinator/</link><pubDate>Sun, 05 Dec 2021 00:00:10 +0000</pubDate><guid>https://blog.jverkamp.com/2021/12/05/aoc-2021-day-5-linear-avoidinator/</guid><description>&lt;h3 id="source-hydrothermal-venturehttpsadventofcodecom2021day5">Source: &lt;a href="https://adventofcode.com/2021/day/5">Hydrothermal Venture&lt;/a>&lt;/h3>
&lt;h4 id="part-1-given-a-list-of-lines-find-the-number-of-integer-points-which-are-covered-by-more-than-one-line-ignore-non-vertical-and-non-horizontal-lines">&lt;strong>Part 1:&lt;/strong> Given a list of lines, find the number of integer points which are covered by more than one line (ignore non-vertical and non-horizontal lines).&lt;/h4>
&lt;p>Okay. Start with the data structures:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">@dataclass&lt;/span>(frozen&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#66d9ef">True&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Point&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> x: int
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> y: int
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">@dataclass&lt;/span>(frozen&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#66d9ef">True&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Line&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> p1: Point
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> p2: Point
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">is_vertical&lt;/span>(self):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> self&lt;span style="color:#f92672">.&lt;/span>p1&lt;span style="color:#f92672">.&lt;/span>x &lt;span style="color:#f92672">==&lt;/span> self&lt;span style="color:#f92672">.&lt;/span>p2&lt;span style="color:#f92672">.&lt;/span>x
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">is_horizontal&lt;/span>(self):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> self&lt;span style="color:#f92672">.&lt;/span>p1&lt;span style="color:#f92672">.&lt;/span>y &lt;span style="color:#f92672">==&lt;/span> self&lt;span style="color:#f92672">.&lt;/span>p2&lt;span style="color:#f92672">.&lt;/span>y
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">is_orthagonal&lt;/span>(self):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> self&lt;span style="color:#f92672">.&lt;/span>is_vertical() &lt;span style="color:#f92672">or&lt;/span> self&lt;span style="color:#f92672">.&lt;/span>is_horizontal()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">points&lt;/span>(self):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># TODO: handle lines that aren&amp;#39;t vertical, horizontal, or diagonal&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> xd &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> self&lt;span style="color:#f92672">.&lt;/span>p1&lt;span style="color:#f92672">.&lt;/span>x &lt;span style="color:#f92672">==&lt;/span> self&lt;span style="color:#f92672">.&lt;/span>p2&lt;span style="color:#f92672">.&lt;/span>x &lt;span style="color:#66d9ef">else&lt;/span> (&lt;span style="color:#ae81ff">1&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> self&lt;span style="color:#f92672">.&lt;/span>p1&lt;span style="color:#f92672">.&lt;/span>x &lt;span style="color:#f92672">&amp;lt;&lt;/span> self&lt;span style="color:#f92672">.&lt;/span>p2&lt;span style="color:#f92672">.&lt;/span>x &lt;span style="color:#66d9ef">else&lt;/span> &lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> yd &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> self&lt;span style="color:#f92672">.&lt;/span>p1&lt;span style="color:#f92672">.&lt;/span>y &lt;span style="color:#f92672">==&lt;/span> self&lt;span style="color:#f92672">.&lt;/span>p2&lt;span style="color:#f92672">.&lt;/span>y &lt;span style="color:#66d9ef">else&lt;/span> (&lt;span style="color:#ae81ff">1&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> self&lt;span style="color:#f92672">.&lt;/span>p1&lt;span style="color:#f92672">.&lt;/span>y &lt;span style="color:#f92672">&amp;lt;&lt;/span> self&lt;span style="color:#f92672">.&lt;/span>p2&lt;span style="color:#f92672">.&lt;/span>y &lt;span style="color:#66d9ef">else&lt;/span> &lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> p &lt;span style="color:#f92672">=&lt;/span> self&lt;span style="color:#f92672">.&lt;/span>p1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">while&lt;/span> p &lt;span style="color:#f92672">!=&lt;/span> self&lt;span style="color:#f92672">.&lt;/span>p2:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">yield&lt;/span> p
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> p &lt;span style="color:#f92672">=&lt;/span> Point(p&lt;span style="color:#f92672">.&lt;/span>x &lt;span style="color:#f92672">+&lt;/span> xd, p&lt;span style="color:#f92672">.&lt;/span>y &lt;span style="color:#f92672">+&lt;/span> yd)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">yield&lt;/span> p
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Dataclasses are great. They give you constructors and a bunch of other things for free. On top of that, if you specify &lt;code>frozen=True&lt;/code>, making them immutable, you also get &lt;code>hashable&lt;/code> types for free (which I&amp;rsquo;ll use in the problem).&lt;/p>
&lt;p>Perhaps the most interesting bit here is the function that will iterate through the &lt;code>points&lt;/code> in a &lt;code>List&lt;/code>. Specifically, it will figure out the x and y delta (&lt;code>xd&lt;/code> and &lt;code>yd&lt;/code>) and repeatedly add that until you hit the end point.&lt;/p>
&lt;p>&lt;strong>Note:&lt;/strong> this only works for lines that are vertical, horizontal, or diagonal (at 45 degrees). Anything else needs a better &lt;a href="https://en.wikipedia.org/wiki/line%20drawing%20algorithm">line drawing algorithm&lt;/a> (of which there are a few). If we need it, I&amp;rsquo;ll implement it.&lt;/p>
&lt;p>Next, use that to parse:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">parse&lt;/span>(file: TextIO) &lt;span style="color:#f92672">-&amp;gt;&lt;/span> List[Line]:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> result &lt;span style="color:#f92672">=&lt;/span> []
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> line &lt;span style="color:#f92672">in&lt;/span> file:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> x1, y1, x2, y2 &lt;span style="color:#f92672">=&lt;/span> [int(v) &lt;span style="color:#66d9ef">for&lt;/span> v &lt;span style="color:#f92672">in&lt;/span> line&lt;span style="color:#f92672">.&lt;/span>replace(&lt;span style="color:#e6db74">&amp;#39; -&amp;gt; &amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;,&amp;#39;&lt;/span>)&lt;span style="color:#f92672">.&lt;/span>split(&lt;span style="color:#e6db74">&amp;#39;,&amp;#39;&lt;/span>)]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> result&lt;span style="color:#f92672">.&lt;/span>append(Line(Point(x1, y1), Point(x2, y2)))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> result
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The input format is &lt;code>x1,y1 -&amp;gt; x2,y2&lt;/code>, but it&amp;rsquo;s easier to split and convert if we do it all directly. There are a few other ways we could have done this: splitting on anything non-numeric or using a regular expression / something else for parsing directly. But I think this is clear enough.&lt;/p>
&lt;p>And with all that, the problem is actually pretty short:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">part1&lt;/span>(file: typer&lt;span style="color:#f92672">.&lt;/span>FileText):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> lines &lt;span style="color:#f92672">=&lt;/span> parse(file)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> counter: MutableMapping[Point, int] &lt;span style="color:#f92672">=&lt;/span> collections&lt;span style="color:#f92672">.&lt;/span>Counter()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> line &lt;span style="color:#f92672">in&lt;/span> lines:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#f92672">not&lt;/span> line&lt;span style="color:#f92672">.&lt;/span>is_orthagonal():
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">continue&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> point &lt;span style="color:#f92672">in&lt;/span> line&lt;span style="color:#f92672">.&lt;/span>points():
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> counter[point] &lt;span style="color:#f92672">+=&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print(sum(&lt;span style="color:#ae81ff">1&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> count &lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span> &lt;span style="color:#66d9ef">else&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#66d9ef">for&lt;/span> point, count &lt;span style="color:#f92672">in&lt;/span> counter&lt;span style="color:#f92672">.&lt;/span>items()))
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>We&amp;rsquo;ll use the built in &lt;code>collections.Counter&lt;/code> datatype, since that&amp;rsquo;s exactly what we&amp;rsquo;re doing: counting things. Then just iterate over every line, skip the non-orthagonal ones, iterate over every point, and count them up. At the end, print the number that we saw more than once. Et voila.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ python3 linear-avoidinator.py part1 input.txt
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">5632&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>AoC 2021 Day 4: His Name Oh</title><link>https://blog.jverkamp.com/2021/12/04/aoc-2021-day-4-his-name-oh/</link><pubDate>Sat, 04 Dec 2021 00:00:10 +0000</pubDate><guid>https://blog.jverkamp.com/2021/12/04/aoc-2021-day-4-his-name-oh/</guid><description>&lt;h3 id="source-giant-squidhttpsadventofcodecom2021day4">Source: &lt;a href="https://adventofcode.com/2021/day/4">Giant Squid&lt;/a>&lt;/h3>
&lt;h4 id="part-1-given-a-set-of-bingo-boards-and-a-list-of-numbers-find-the-first-board-to-win-multiply-the-sum-of-the-un-called-numbers-on-that-board-times-the-last-number-called">&lt;strong>Part 1:&lt;/strong> Given a set of bingo boards and a list of numbers, find the first board to win. Multiply the sum of the un-called numbers on that board times the last number called.&lt;/h4></description></item><item><title>AoC 2021 Day 3: Binary Contraption</title><link>https://blog.jverkamp.com/2021/12/03/aoc-2021-day-3-binary-contraption/</link><pubDate>Fri, 03 Dec 2021 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2021/12/03/aoc-2021-day-3-binary-contraption/</guid><description>&lt;h3 id="source-binary-diagnostichttpsadventofcodecom2021day3">Source: &lt;a href="https://adventofcode.com/2021/day/3">Binary Diagnostic&lt;/a>&lt;/h3>
&lt;h4 id="part-1-given-a-list-of-binary-numbers-calculate-gamma-such-that-each-bit-is-the-most-common-bit-in-that-position-in-the-input-and-epsilon-which-is-the-binary-inverse-of-gamma-return-the-product">&lt;strong>Part 1:&lt;/strong> Given a list of binary numbers, calculate gamma such that each bit is the most common bit in that position in the input and epsilon which is the binary inverse of gamma. Return the product.&lt;/h4></description></item><item><title>AoC 2021 Day 2: Submarine Simulator</title><link>https://blog.jverkamp.com/2021/12/02/aoc-2021-day-2-submarine-simulator/</link><pubDate>Thu, 02 Dec 2021 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2021/12/02/aoc-2021-day-2-submarine-simulator/</guid><description>&lt;h3 id="source-divehttpsadventofcodecom2021day2">Source: &lt;a href="https://adventofcode.com/2021/day/2">Dive!&lt;/a>&lt;/h3>
&lt;h4 id="part-1-simulate-a-submarine-with-3-commands-forward-n-down-n-and-up-n-that-move-forward-increase-depth-and-decrease-depth-in-that-order-calculate-the-product-of-the-final-position-and-depth">&lt;strong>Part 1:&lt;/strong> Simulate a submarine with 3 commands: &lt;code>forward N&lt;/code>, &lt;code>down N&lt;/code>, and &lt;code>up N&lt;/code> that move forward, increase depth, and decrease depth in that order. Calculate the product of the final position and depth.&lt;/h4></description></item><item><title>AoC 2021 Day 1: Depth Finder</title><link>https://blog.jverkamp.com/2021/12/01/aoc-2021-day-1-depth-finder/</link><pubDate>Wed, 01 Dec 2021 00:00:03 +0000</pubDate><guid>https://blog.jverkamp.com/2021/12/01/aoc-2021-day-1-depth-finder/</guid><description>&lt;h3 id="source-depth-finderhttpsadventofcodecom2021day1">Source: &lt;a href="https://adventofcode.com/2021/day/1">Depth Finder&lt;/a>&lt;/h3>
&lt;h4 id="part-1-given-a-list-of-numbers-count-how-many-times-sequential-numbers-increase">&lt;strong>Part 1:&lt;/strong> Given a list of numbers, count how many times sequential numbers increase.&lt;/h4></description></item><item><title>Advent of Code 2021</title><link>https://blog.jverkamp.com/2021/12/01/advent-of-code-2021/</link><pubDate>Wed, 01 Dec 2021 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2021/12/01/advent-of-code-2021/</guid><description>&lt;p>Been a while since I&amp;rsquo;ve done an advent of code! I&amp;rsquo;ll probably backfill a few years eventually, but for now, let&amp;rsquo;s just write some code!&lt;/p>
&lt;p>As always, these problems are wonderful to try to solve yourself. If you agree, &lt;em>stop reading now&lt;/em>. This post isn&amp;rsquo;t going anywhere.&lt;/p>
&lt;p>If you&amp;rsquo;d like to see the full form of any particular solution, you can do so on GitHub (including previous years and possibly some I haven&amp;rsquo;t written up yet): &lt;a href="https://github.com/jpverkamp/advent-of-code">jpverkamp/advent-of-code&lt;/a>&lt;/p></description></item><item><title>AoC 2018 Day 14: Functionally Circular Elfs</title><link>https://blog.jverkamp.com/2018/12/14/aoc-2018-day-14-functionally-circular-elfs/</link><pubDate>Fri, 14 Dec 2018 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2018/12/14/aoc-2018-day-14-functionally-circular-elfs/</guid><description>&lt;h3 id="source-chocolate-chartshttpsadventofcodecom2018day14">Source: &lt;a href="https://adventofcode.com/2018/day/14">Chocolate Charts&lt;/a>&lt;/h3>
&lt;blockquote>
&lt;p>&lt;strong>Part 1:&lt;/strong> Create an infinite stream of numbers, by starting with [3, 7] with two pointers: 0 and 1. To add values to the list:&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;ul>
&lt;li>Add the current values of the two pointers
&lt;ul>
&lt;li>If the value is less than ten, add that value to the end of the list&lt;/li>
&lt;li>If the value is greater or equal to ten, add 1 and then the ones digits to the end of the list&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Update each pointer by adding the value it is pointing at to its current index plus one&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;blockquote>
&lt;p>With that algorithm, find the ten digits after a given index.&lt;/p>
&lt;/blockquote></description></item><item><title>AoC 2018 Day 13: Mine Cart Madness</title><link>https://blog.jverkamp.com/2018/12/13/aoc-2018-day-13-mine-cart-madness/</link><pubDate>Thu, 13 Dec 2018 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2018/12/13/aoc-2018-day-13-mine-cart-madness/</guid><description>&lt;h3 id="source-mine-cart-madnesshttpsadventofcodecom2018day13">Source: &lt;a href="https://adventofcode.com/2018/day/13">Mine Cart Madness&lt;/a>&lt;/h3>
&lt;blockquote>
&lt;p>&lt;strong>Part 1:&lt;/strong> Load a minecart track that looks like this:&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;pre tabindex="0">&lt;code>&lt;/code>&lt;/pre>&lt;/blockquote>
&lt;p>/-&amp;gt;-\ &lt;br>
| | /&amp;mdash;-&lt;br>
| /-+&amp;ndash;+-\ |
| | | | v |
-+-/ -+&amp;ndash;/
-&amp;mdash;&amp;ndash;/&lt;/p></description></item><item><title>AoC 2018 Day 12: Fat Cellular Automaton</title><link>https://blog.jverkamp.com/2018/12/12/aoc-2018-day-12-fat-cellular-automaton/</link><pubDate>Wed, 12 Dec 2018 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2018/12/12/aoc-2018-day-12-fat-cellular-automaton/</guid><description>&lt;h3 id="source-subterranean-sustainabilityhttpsadventofcodecom2018day12">Source: &lt;a href="https://adventofcode.com/2018/day/12">Subterranean Sustainability&lt;/a>&lt;/h3>
&lt;blockquote>
&lt;p>&lt;strong>Part 1:&lt;/strong> Create an infinite 2D &lt;a href="https://en.wikipedia.org/wiki/cellular%20automaton">cellular automaton&lt;/a> with transition rules based on two points to each side, starting with initial state at index 0 to the right.&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>After 20 generations, what is the sum of indexes of points turned on?&lt;/p>
&lt;/blockquote></description></item><item><title>AoC 2018 Day 11: Gridlocked Fuel</title><link>https://blog.jverkamp.com/2018/12/11/aoc-2018-day-11-gridlocked-fuel/</link><pubDate>Tue, 11 Dec 2018 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2018/12/11/aoc-2018-day-11-gridlocked-fuel/</guid><description>&lt;h3 id="source-chronal-chargehttpsadventofcodecom2018day11">Source: &lt;a href="https://adventofcode.com/2018/day/11">Chronal Charge&lt;/a>&lt;/h3>
&lt;blockquote>
&lt;p>&lt;strong>Part 1:&lt;/strong> Define a grid as follows (x,y coordinates + a constant C):&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;ul>
&lt;li>&lt;span class="latex-inline">r(x) = x &amp;#43; 10&lt;/span>
&lt;/li>
&lt;li>&lt;span class="latex-inline">G(x, y) = hundreds(r(x) * (r(x) * y &amp;#43; C)) - 5&lt;/span>
&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;blockquote>
&lt;p>Find the 3x3 area in a 300x300 grid with the highest total &lt;span class="latex-inline">G(x, y)&lt;/span>
.&lt;/p>
&lt;/blockquote></description></item><item><title>AoC 2018 Day 10: It's Full of Stars!</title><link>https://blog.jverkamp.com/2018/12/10/aoc-2018-day-10-its-full-of-stars/</link><pubDate>Mon, 10 Dec 2018 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2018/12/10/aoc-2018-day-10-its-full-of-stars/</guid><description>&lt;h3 id="source-the-stars-alignhttpsadventofcodecom2018day10">Source: &lt;a href="https://adventofcode.com/2018/day/10">The Stars Align&lt;/a>&lt;/h3>
&lt;blockquote>
&lt;p>&lt;strong>Part 1:&lt;/strong> Given a system of moving particles (with position and velocity) find the point where the particles spell a message. What is that message?&lt;/p>
&lt;/blockquote></description></item><item><title>AoC 2018 Day 9: Marble Madness</title><link>https://blog.jverkamp.com/2018/12/09/aoc-2018-day-9-marble-madness/</link><pubDate>Sun, 09 Dec 2018 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2018/12/09/aoc-2018-day-9-marble-madness/</guid><description>&lt;h3 id="source-marble-maniahttpsadventofcodecom2018day9">Source: &lt;a href="https://adventofcode.com/2018/day/9">Marble Mania&lt;/a>&lt;/h3>
&lt;blockquote>
&lt;p>&lt;strong>Part 1:&lt;/strong> Place marbles in a circle such that each marble is placed by skipping one place &lt;em>except&lt;/em> for marbles divisible by 23. For those, don&amp;rsquo;t place them, skip back 7 places, and remove that marble as well. Add these two marbles to your current score.&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>Given a specific player count and last marble, what&amp;rsquo;s the highest score?&lt;/p>
&lt;/blockquote></description></item><item><title>AoC 2018 Day 8: Checksum Treeification</title><link>https://blog.jverkamp.com/2018/12/08/aoc-2018-day-8-checksum-treeification/</link><pubDate>Sat, 08 Dec 2018 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2018/12/08/aoc-2018-day-8-checksum-treeification/</guid><description>&lt;h3 id="source-the-sum-of-its-partshttpsadventofcodecom2018day8">Source: &lt;a href="https://adventofcode.com/2018/day/8">The Sum of Its Parts&lt;/a>&lt;/h3>
&lt;blockquote>
&lt;p>&lt;strong>Part 1:&lt;/strong> A custom tree data structure is defined as:&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;ul>
&lt;li>child count&lt;/li>
&lt;li>metadata count&lt;/li>
&lt;li>&lt;code>child count&lt;/code> additional subtrees (recursive)&lt;/li>
&lt;li>&lt;code>metadata count&lt;/code> metadata nodes&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;blockquote>
&lt;p>Calculate the sum of all metadata nodes.&lt;/p>
&lt;/blockquote></description></item><item><title>AoC 2018 Day 7: Job Simulator</title><link>https://blog.jverkamp.com/2018/12/07/aoc-2018-day-7-job-simulator/</link><pubDate>Fri, 07 Dec 2018 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2018/12/07/aoc-2018-day-7-job-simulator/</guid><description>&lt;h3 id="source-the-sum-of-its-partshttpsadventofcodecom2018day7">Source: &lt;a href="https://adventofcode.com/2018/day/7">The Sum of Its Parts&lt;/a>&lt;/h3>
&lt;blockquote>
&lt;p>&lt;strong>Part 1:&lt;/strong> Given a list of job dependencies (job A must be before job B), determine the order jobs must be done in. Break ties lexicographically.&lt;/p>
&lt;/blockquote></description></item><item><title>AoC 2018 Day 6: Infinite Area Simulator</title><link>https://blog.jverkamp.com/2018/12/06/aoc-2018-day-6-infinite-area-simulator/</link><pubDate>Thu, 06 Dec 2018 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2018/12/06/aoc-2018-day-6-infinite-area-simulator/</guid><description>&lt;h3 id="source-chronal-coordinateshttpsadventofcodecom2018day6">Source: &lt;a href="https://adventofcode.com/2018/day/6">Chronal Coordinates&lt;/a>&lt;/h3>
&lt;blockquote>
&lt;p>&lt;strong>Part 1:&lt;/strong> Given a list of points, calculate the region of points closest to each point (using &lt;a href="https://en.wikipedia.org/wiki/Manhattan%20distance">Manhattan distance&lt;/a>). Return the size of the largest non-infinite region.&lt;/p>
&lt;/blockquote></description></item><item><title>AoC 2018 Day 5: Alchemical reduction</title><link>https://blog.jverkamp.com/2018/12/05/aoc-2018-day-5-alchemical-reduction/</link><pubDate>Wed, 05 Dec 2018 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2018/12/05/aoc-2018-day-5-alchemical-reduction/</guid><description>&lt;h3 id="source-alchemical-reductionhttpsadventofcodecom2018day5">Source: &lt;a href="https://adventofcode.com/2018/day/5">Alchemical Reduction&lt;/a>&lt;/h3>
&lt;blockquote>
&lt;p>&lt;strong>Part 1:&lt;/strong> Given a string, reduce it by removing pairs of letters that are the same letter but different cases. Repeat until you have a minimal string.&lt;/p>
&lt;/blockquote></description></item><item><title>AoC 2018 Day 4: Sleeping on the job</title><link>https://blog.jverkamp.com/2018/12/04/aoc-2018-day-4-sleeping-on-the-job/</link><pubDate>Tue, 04 Dec 2018 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2018/12/04/aoc-2018-day-4-sleeping-on-the-job/</guid><description>&lt;h3 id="source-repose-recordhttpsadventofcodecom2018day4">Source: &lt;a href="https://adventofcode.com/2018/day/4">Repose Record&lt;/a>&lt;/h3>
&lt;blockquote>
&lt;p>&lt;strong>Part 1:&lt;/strong> Given a log of guard shifts and times asleep/awake, calculate the guard that was asleep most often and which minute they were most asleep for.&lt;/p>
&lt;/blockquote></description></item><item><title>AoC 2018 Day 3: Regionification</title><link>https://blog.jverkamp.com/2018/12/03/aoc-2018-day-3-regionification/</link><pubDate>Mon, 03 Dec 2018 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2018/12/03/aoc-2018-day-3-regionification/</guid><description>&lt;h3 id="source-no-matter-how-you-slice-ithttpsadventofcodecom2018day3">Source: &lt;a href="https://adventofcode.com/2018/day/3">No Matter How You Slice It&lt;/a>&lt;/h3>
&lt;blockquote>
&lt;p>&lt;strong>Part 1:&lt;/strong> Given a list of overlapping regions defined by (left, top, width, height) count how many integer points occur in more than one region.&lt;/p>
&lt;/blockquote></description></item><item><title>AoC 2018 Day 2: Counting letters</title><link>https://blog.jverkamp.com/2018/12/02/aoc-2018-day-2-counting-letters/</link><pubDate>Sun, 02 Dec 2018 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2018/12/02/aoc-2018-day-2-counting-letters/</guid><description>&lt;h3 id="source-inventory-management-systemhttpsadventofcodecom2018day2">Source: &lt;a href="https://adventofcode.com/2018/day/2">Inventory Management System&lt;/a>&lt;/h3>
&lt;blockquote>
&lt;p>&lt;strong>Part 1:&lt;/strong> Given a list of strings, count how many contain exactly two of a letter (&lt;code>a&lt;/code>) and how many contain exactly three of a letter (&lt;code>b&lt;/code>). Calculate &lt;code>a*b&lt;/code>.&lt;/p>
&lt;/blockquote></description></item><item><title>AoC 2018 Day 1: Sum-thing to start with</title><link>https://blog.jverkamp.com/2018/12/01/aoc-2018-day-1-sum-thing-to-start-with/</link><pubDate>Sat, 01 Dec 2018 00:00:03 +0000</pubDate><guid>https://blog.jverkamp.com/2018/12/01/aoc-2018-day-1-sum-thing-to-start-with/</guid><description>&lt;h3 id="source-chronal-calibrationhttpsadventofcodecom2018day1">Source: &lt;a href="https://adventofcode.com/2018/day/1">Chronal Calibration&lt;/a>&lt;/h3>
&lt;blockquote>
&lt;p>&lt;strong>Part 1:&lt;/strong> Given a list of numbers (positive and negative) calculate the sum.&lt;/p>
&lt;/blockquote></description></item><item><title>Advent of Code 2018</title><link>https://blog.jverkamp.com/2018/12/01/advent-of-code-2018/</link><pubDate>Sat, 01 Dec 2018 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2018/12/01/advent-of-code-2018/</guid><description>&lt;p>Let&amp;rsquo;s do it again! I&amp;rsquo;m starting a day late, but much better than &lt;a href="https://blog.jverkamp.com/2018/01/08/advent-of-code-2017/">last year&lt;/a> 😄!&lt;/p>
&lt;p>This time around, I&amp;rsquo;m hoping to solve each problem in both Python and Racket, both to show an example of how the languages differ and &amp;hellip; well, because I can 😇.&lt;/p>
&lt;p>&lt;em>EDIT 2018-12-05&lt;/em>: Yeah&amp;hellip; I&amp;rsquo;m not actually going to do these in both Racket and Python. The solutions are ending up being near direct translations. Since there are probably fewer people solving these in Racket, I&amp;rsquo;ll do that first and Python eventually™.&lt;/p>
&lt;p>As always, these problems are wonderful to try to solve yourself. If you agree, &lt;em>stop reading now&lt;/em>. This post isn&amp;rsquo;t going anywhere.&lt;/p>
&lt;p>If you&amp;rsquo;d like to see the full form of any particular solution, you can do so on GitHub (including previous years and possibly some I haven&amp;rsquo;t written up yet): &lt;a href="https://github.com/jpverkamp/advent-of-code">jpverkamp/advent-of-code&lt;/a>&lt;/p></description></item><item><title>Advent of Code 2017</title><link>https://blog.jverkamp.com/2018/01/08/advent-of-code-2017/</link><pubDate>Mon, 08 Jan 2018 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2018/01/08/advent-of-code-2017/</guid><description>&lt;p>As I did with &lt;a href="https://blog.jverkamp.com/2018/01/03/advent-of-code-2016/">last year&lt;/a> / &lt;a href="https://blog.jverkamp.com/2018/01/03/advent-of-code-2016/">yesterday&lt;/a>, I&amp;rsquo;ve written up a series of posts for the Advent of Code 2017 problems. Again, I didn&amp;rsquo;t manage to write them up as I did them, but this time around I least I finished mostly on time.&lt;/p></description></item><item><title>Advent of Code 2016</title><link>https://blog.jverkamp.com/2018/01/03/advent-of-code-2016/</link><pubDate>Wed, 03 Jan 2018 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2018/01/03/advent-of-code-2016/</guid><description>&lt;p>As I did &lt;a href="https://blog.jverkamp.com/2015/12/01/advent-of-code/">last year&lt;/a>, I&amp;rsquo;m going to solve the Advent of Code problems again this year.&lt;/p>
&lt;p>Or that was the plan. It turns out that instead I put down my blog for almost a year and a half and never quite got around to doing these problems. So I&amp;rsquo;m actually backdating these posts from the early days of 2018 to where they would have been had I solved them on time. They&amp;rsquo;re still interesting problems, so give them a read.&lt;/p></description></item><item><title>AoC 2017 Day 25: Turing</title><link>https://blog.jverkamp.com/2017/12/25/aoc-2017-day-25-turing/</link><pubDate>Mon, 25 Dec 2017 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2017/12/25/aoc-2017-day-25-turing/</guid><description>&lt;h3 id="source-the-halting-problemhttpadventofcodecom2017day25">Source: &lt;a href="http://adventofcode.com/2017/day/25">The Halting Problem&lt;/a>&lt;/h3>
&lt;blockquote>
&lt;p>&lt;strong>Part 1:&lt;/strong> Implement a &lt;a href="https://en.wikipedia.org/wiki/Turing%20machine">Turing machine&lt;/a> defined as such:&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-text" data-lang="text">&lt;/code>&lt;/pre>&lt;/div>&lt;/blockquote>
&lt;p>Begin in state A.
Perform a diagnostic checksum after 6 steps.&lt;/p>
&lt;p>In state A:
If the current value is 0:
- Write the value 1.
- Move one slot to the right.
- Continue with state B.
If the current value is 1:
- Write the value 0.
- Move one slot to the left.
- Continue with state B.&lt;/p>
&lt;p>&amp;hellip;&lt;/p></description></item><item><title>AoC 2017 Day 24: Maker Of Bridges</title><link>https://blog.jverkamp.com/2017/12/24/aoc-2017-day-24-maker-of-bridges/</link><pubDate>Sun, 24 Dec 2017 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2017/12/24/aoc-2017-day-24-maker-of-bridges/</guid><description>&lt;h3 id="source-electromagnetic-moathttpadventofcodecom2017day24">Source: &lt;a href="http://adventofcode.com/2017/day/24">Electromagnetic Moat&lt;/a>&lt;/h3>
&lt;blockquote>
&lt;p>&lt;strong>Part 1:&lt;/strong> Given a series of reversible components of the form &lt;code>3/4&lt;/code> (can connect a &lt;code>3&lt;/code> on one end to a &lt;code>4&lt;/code> on the other), form a bridge of components. The bridge&amp;rsquo;s strength is equal to the sum of component values. So &lt;code>0/3, 3/7, and 7/4&lt;/code> has a strength of &lt;code>0+3 + 3+7 + 7+4 = 24&lt;/code>.&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>What is the strongest possible bridge?&lt;/p>
&lt;/blockquote></description></item></channel></rss>