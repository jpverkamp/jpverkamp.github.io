<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Daily Programmer on jverkamp.com</title>
    <link>https://blog.jverkamp.com/programming/sources/daily-programmer/</link>
    <description>Recent content in Daily Programmer on jverkamp.com</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 29 Oct 2015 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://blog.jverkamp.com/programming/sources/daily-programmer/atom.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Takuzu solver</title>
      <link>https://blog.jverkamp.com/2015/10/29/takuzu-solver/</link>
      <pubDate>Thu, 29 Oct 2015 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2015/10/29/takuzu-solver/</guid>
      <description>&lt;p&gt;Based on a &lt;a href=&#34;&#34;&gt;/r/dailyprogrammer&lt;/a&gt; puzzle: &lt;a href=&#34;https://www.reddit.com/r/dailyprogrammer/comments/3pwf17/20151023_challenge_237_hard_takuzu_solver/&#34;&gt;Takuzu solver&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Basically, Takuzu is a logic puzzle similar to Sudoku. You are given a grid partially filled with 0s and 1s. You have to fill in the rest of the grid according to three simple rules:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;You cannot have more than three of the same number in a line&lt;/li&gt;
&lt;li&gt;Each column must have an equal number of 0s and 1s&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/li&gt;
&lt;li&gt;No two rows or no two columns can be identical&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Thus, if you have a puzzle like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;0.01.1
0....1
..00..
..00..
1....0
10.0.0&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;One valid solution (most puzzles should have only a single valid answer, but that doesn&amp;rsquo;t always seem to be the case):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;010101
001101
110010
010011
101100
101010&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Let&amp;rsquo;s do it!&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Adjacency Matrix Generator</title>
      <link>https://blog.jverkamp.com/2015/08/24/adjacency-matrix-generator/</link>
      <pubDate>Mon, 24 Aug 2015 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2015/08/24/adjacency-matrix-generator/</guid>
      <description>&lt;p&gt;Been a while since I&amp;rsquo;ve actually tackled one of the &lt;a href=&#34;https://blog.jverkamp.com/programming/sources/daily-programmer/&#34;&gt;Daily Programmer&lt;/a&gt; challenges, so let&amp;rsquo;s try one out. From &lt;a href=&#34;https://www.reddit.com/r/dailyprogrammer/comments/3h0uki/20150814_challenge_227_hard_adjacency_matrix/)&#34;&gt;a week and a half ago&lt;/a&gt;, we are challeneged to make an adjacency matrix generator, turning a graphical representation of a graph into an &lt;a href=&#34;https://en.wikipedia.org/wiki/adjacency%20matrix&#34;&gt;adjacency matrix&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Input:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;a-----b
|\   / \
| \ /   \
|  /     e
| / \   /
|/   \ /
c-----d&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Output:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;01110
10101
11010
10101
01010&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Tile Puzzle</title>
      <link>https://blog.jverkamp.com/2014/10/28/tile-puzzle/</link>
      <pubDate>Tue, 28 Oct 2014 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2014/10/28/tile-puzzle/</guid>
      <description>&lt;p&gt;It&amp;rsquo;s been a while&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;, but I&amp;rsquo;m back. Today&amp;rsquo;s post is inspired by a post from /r/dailyprogrammer almost a month ago now: &lt;a href=&#34;https://www.reddit.com/r/dailyprogrammer/comments/2ip1gj/10082014_challenge_183_intermediate_edge_matching/&#34;&gt;Challenge #183 [Intermediate] Edge Matching Tile Puzzle&lt;/a&gt;. Basically, we&amp;rsquo;re going to solve puzzles like this:&lt;/p&gt;

&lt;p&gt;
&lt;figure &gt;
    
        &lt;img src=&#34;https://blog.jverkamp.com/embeds/2014/unsolved-3x3.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://blog.jverkamp.com/embeds/2014/solved-3x3.png&#34; /&gt;
    
    
&lt;/figure&gt;
&lt;/p&gt;

&lt;p&gt;If you look carefully, the tiles are the same between the two, although they might be rotated.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Regular Expression Fractals</title>
      <link>https://blog.jverkamp.com/2014/10/05/regular-expression-fractals/</link>
      <pubDate>Sun, 05 Oct 2014 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2014/10/05/regular-expression-fractals/</guid>
      <description>&lt;p&gt;Oops, turns out I haven&amp;rsquo;t had a post in a good long while. Before it gets even longer, I figure that I should take one off my backlog and just write it up, even if it is a little on the shorter side.&lt;/p&gt;

&lt;p&gt;Today&amp;rsquo;s post was inspired by this post on /r/dailyprogrammer a month ago today:
&lt;a href=&#34;https://www.reddit.com/r/dailyprogrammer/comments/2fkh8u/9052014_challenge_178_hard_regular_expression/&#34;&gt;Challenge #178 [Hard] Regular Expression Fractals&lt;/a&gt;. The basic idea is that you are going to take a rectangular region and divide it into four quadrants, again and again, recording the path as you go (images from that post):&lt;/p&gt;

&lt;p&gt;
&lt;figure &gt;
    
        &lt;img src=&#34;https://blog.jverkamp.com/embeds/2014/step-1.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://blog.jverkamp.com/embeds/2014/step-2.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://blog.jverkamp.com/embeds/2014/step-3.png&#34; /&gt;
    
    
&lt;/figure&gt;
&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Look and Say</title>
      <link>https://blog.jverkamp.com/2014/09/15/look-and-say/</link>
      <pubDate>Mon, 15 Sep 2014 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2014/09/15/look-and-say/</guid>
      <description>&lt;p&gt;Random quick post today&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;. Basically, we want to write code to generate what&amp;rsquo;s known as &lt;a href=&#34;https://en.wikipedia.org/wiki/Look%20and%20Say%20sequence&#34;&gt;Look and Say sequence&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;To generate a member of the sequence from the previous member, read off the digits of the previous member, counting the number of digits in groups of the same digit. For example:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;1 is read off as &amp;ldquo;one 1&amp;rdquo; or 11.&lt;/li&gt;
&lt;li&gt;11 is read off as &amp;ldquo;two 1s&amp;rdquo; or 21.&lt;/li&gt;
&lt;li&gt;21 is read off as &amp;ldquo;one 2, then one 1&amp;rdquo; or 1211.&lt;/li&gt;
&lt;li&gt;1211 is read off as &amp;ldquo;one 1, then one 2, then two 1s&amp;rdquo; or 111221.&lt;/li&gt;
&lt;li&gt;111221 is read off as &amp;ldquo;three 1s, then two 2s, then one 1&amp;rdquo; or 312211.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Langton&#39;s ant</title>
      <link>https://blog.jverkamp.com/2014/08/07/langtons-ant/</link>
      <pubDate>Thu, 07 Aug 2014 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2014/08/07/langtons-ant/</guid>
      <description>&lt;p&gt;Here&amp;rsquo;s another post from /r/DailyProgrammer: &lt;a href=&#34;http://www.reddit.com/r/dailyprogrammer/comments/2c4ka3/7302014_challenge_173_intermediate_advanced/&#34;&gt;Advanced Langton&amp;rsquo;s Ant&lt;/a&gt;. I&amp;rsquo;m a bit behind the times (see tomorrow&amp;rsquo;s post), but it&amp;rsquo;s still an interesting enough exercise, so let&amp;rsquo;s go for it!&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://blog.jverkamp.com/embeds/2014/LR.gif&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Factor trees</title>
      <link>https://blog.jverkamp.com/2014/06/17/factor-trees/</link>
      <pubDate>Tue, 17 Jun 2014 14:00:59 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2014/06/17/factor-trees/</guid>
      <description>&lt;p&gt;Another five minute challenge&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;, this time from &lt;a href=&#34;http://www.reddit.com/r/dailyprogrammer/comments/284uhh/6142014_challenge_166b_intermediate_prime_factor/&#34;&gt;/r/dailyprogrammer&lt;/a&gt;: given any positive integer, create and render a factor tree.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Phone networks</title>
      <link>https://blog.jverkamp.com/2014/05/21/phone-networks/</link>
      <pubDate>Wed, 21 May 2014 14:00:47 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2014/05/21/phone-networks/</guid>
      <description>&lt;p&gt;Another day, &lt;a href=&#34;http://www.reddit.com/r/dailyprogrammer/comments/25576s/592014_challenge_161_hard_phone_network/&#34;&gt;another challenge from /r/dailyprogrammer&lt;/a&gt;. It&amp;rsquo;s almost two weeks old now, but I&amp;rsquo;ve just now had a chance to get around it.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Your company has built its own telephone network. This allows all your remote locations to talk to each other. It is your job to implement the program to establish calls between locations.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Novel compression</title>
      <link>https://blog.jverkamp.com/2014/05/19/novel-compression/</link>
      <pubDate>Mon, 19 May 2014 14:00:56 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2014/05/19/novel-compression/</guid>
      <description>&lt;p&gt;Last week on /r/dailyprogrammer, there was a neat trio of posts all about a new compression algorithm:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.reddit.com/r/dailyprogrammer/comments/25clki/5122014_challenge_162_easy_novel_compression_pt_1/&#34;&gt;Novel Compression, pt. 1: Unpacking the Data&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.reddit.com/r/dailyprogrammer/comments/25hlo9/5142014_challenge_162_intermediate_novel/&#34;&gt;Novel Compression, pt. 2: Compressing the Data&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.reddit.com/r/dailyprogrammer/comments/25o2bd/5162014_challenge_162_hard_novel_compression_pt_3/&#34;&gt;Novel Compression, pt. 3: Putting it all together&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;More specifically, we&amp;rsquo;re going to represent compressed text with the following rules:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;If the chunk is just a number (eg. 37), word number 37 from the dictionary (zero-indexed, so 0 is the 1st word) is printed lower-case.&lt;/li&gt;
&lt;li&gt;If the chunk is a number followed by a caret (eg. 37^), then word 37 from the dictionary will be printed lower-case, with the first letter capitalised.&lt;/li&gt;
&lt;li&gt;If the chunk is a number followed by an exclamation point (eg. 37!), then word 37 from the dictionary will be printed upper-case.&lt;/li&gt;
&lt;li&gt;If it&amp;rsquo;s a hyphen (-), then instead of putting a space in-between the previous and next words, put a hyphen instead.&lt;/li&gt;
&lt;li&gt;If it&amp;rsquo;s any of the following symbols: . , ? ! ; : (&lt;strong&gt;edit:&lt;/strong&gt; also &amp;lsquo; and &amp;ldquo;), then put that symbol at the end of the previous outputted word.&lt;/li&gt;
&lt;li&gt;If it&amp;rsquo;s a letter R (upper or lower), print a new line.&lt;/li&gt;
&lt;li&gt;If it&amp;rsquo;s a letter E (upper or lower), the end of input has been reached.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;edit:&lt;/strong&gt; any other block of text, represent as a literal &amp;lsquo;word&amp;rsquo; in the dictionary&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Got it? Let&amp;rsquo;s go!&lt;/p&gt;

&lt;p&gt;(If you&amp;rsquo;d like to follow along: &lt;a href=&#34;https://github.com/jpverkamp/small-projects/blob/master/blog/novel-compression.rkt&#34;&gt;full source&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Trigonometric Triangle Trouble</title>
      <link>https://blog.jverkamp.com/2014/05/02/trigonometric-triangle-trouble/</link>
      <pubDate>Fri, 02 May 2014 14:00:26 +0000</pubDate>
      
      <guid>https://blog.jverkamp.com/2014/05/02/trigonometric-triangle-trouble/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://www.reddit.com/r/dailyprogrammer/comments/24hr25/522014_challenge_160_hard_trigonometric_triangle/&#34;&gt;Yesterday&amp;rsquo;s post&lt;/a&gt; at &lt;a href=&#34;http://www.reddit.com/r/dailyprogrammer/&#34;&gt;/r/dailyprogrammer&lt;/a&gt; managed to pique my interest&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;A triangle on a flat plane is described by its angles and side lengths, and you don&amp;rsquo;t need all of the angles and side lengths to work out everything about the triangle. (This is the same as last time.) However, this time, the triangle will not necessarily have a right angle. This is where more trigonometry comes in. Break out your trig again, people.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>