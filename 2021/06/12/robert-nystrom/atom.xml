<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Robert Nystrom on jverkamp.com</title><link>https://blog.jverkamp.com/2021/06/12/robert-nystrom/</link><description>Recent content in Robert Nystrom on jverkamp.com</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Sat, 12 Jun 2021 19:43:58 +0000</lastBuildDate><atom:link href="https://blog.jverkamp.com/2021/06/12/robert-nystrom/atom.xml" rel="self" type="application/rss+xml"/><item><title>Crafting Interpreters</title><link>https://blog.jverkamp.com/2021/06/12/crafting-interpreters/</link><pubDate>Sat, 12 Jun 2021 19:43:58 +0000</pubDate><guid>https://blog.jverkamp.com/2021/06/12/crafting-interpreters/</guid><description>&lt;p>Programming languages are something of a hobby of mine. Going as far back as undergrad, I’ve written a fair few interpreters and compilers over the years. I’ve never really gotten beyond a strong basic level, but I’ve always wanted to. Crafting Interpreters is a great book for exactly that.&lt;/p>
&lt;p>The book essentially walks you through two styles of interpreter of the same language: just an AST walking style written in Java (the sort I’ve done a few times) and then a much more optimized one based on bytecode. There was something to learn on both sections though, since the the introduced language (lox) includes higher order functions and closures—certainly more interesting bits of languages to implement.&lt;/p></description></item></channel></rss>