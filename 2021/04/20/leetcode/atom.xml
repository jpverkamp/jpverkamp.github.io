<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>LeetCode on jverkamp.com</title><link>https://blog.jverkamp.com/2021/04/20/leetcode/</link><description>Recent content in LeetCode on jverkamp.com</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Tue, 20 Apr 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://blog.jverkamp.com/2021/04/20/leetcode/atom.xml" rel="self" type="application/rss+xml"/><item><title>Partitioning a Linked List</title><link>https://blog.jverkamp.com/2021/04/20/partitioning-a-linked-list/</link><pubDate>Tue, 20 Apr 2021 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2021/04/20/partitioning-a-linked-list/</guid><description>&lt;p>One more fairly standard tech interview problem (for better or for worse, you&amp;rsquo;re likely to see one of these if you go for a programming job):&lt;/p>
&lt;blockquote>
&lt;p>Given a &lt;a href="https://en.wikipedia.org/wiki/linked%20list">linked list&lt;/a> and an element &lt;code>x&lt;/code>. Partition the list so that all elements less than &lt;code>x&lt;/code> are before elements greater than or equal to &lt;code>x&lt;/code>, but do not otherwise change the order of the elements.&lt;/p>&lt;/blockquote></description></item><item><title>Dynamic Programming over a Matrix</title><link>https://blog.jverkamp.com/2021/04/13/dynamic-programming-over-a-matrix/</link><pubDate>Tue, 13 Apr 2021 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2021/04/13/dynamic-programming-over-a-matrix/</guid><description>&lt;p>Another LeetCode problem.&lt;/p>
&lt;blockquote>
&lt;p>Given an &lt;code>MxN&lt;/code> matrix of numbers, find the longest path of strictly increasing numbers.&lt;/p>&lt;/blockquote>
&lt;p>So for example in this matrix:&lt;/p>
&lt;table>
&lt;tr>&lt;td>9&lt;/td>&lt;td>9&lt;/td>&lt;td>4&lt;/td>&lt;/tr>
&lt;tr>&lt;td>6&lt;/td>&lt;td>6&lt;/td>&lt;td>8&lt;/td>&lt;/tr>
&lt;tr>&lt;td>2&lt;/td>&lt;td>1&lt;/td>&lt;td>1&lt;/td>&lt;/tr>
&lt;/table>
&lt;p>You can start with the 1 in the bottom center, go left to the two, then up to the 6, and 9. That&amp;rsquo;s the longest path, so return a 4.&lt;/p>
&lt;p>In this 3x3 case, it&amp;rsquo;s really easy to just brute force. Calculate all possible paths. An upper bound would be visiting every node exactly once, so &lt;span class="latex-inline">\sum_{i=1}^9 \binom{9}{i} = 511&lt;/span>
 (choose &lt;code>n&lt;/code> elements for each of 1 to 9 cases). Not so bad. But if you have a 10x10 matrix, that&amp;rsquo;s already 1e30&amp;ndash;which is freaking gigantic. So we need to do better.&lt;/p></description></item><item><title>Phone Words--In English!</title><link>https://blog.jverkamp.com/2021/04/09/phone-words--in-english/</link><pubDate>Fri, 09 Apr 2021 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2021/04/09/phone-words--in-english/</guid><description>&lt;p>Okay, let&amp;rsquo;s take this one step further. Rather than generating just phone words, let&amp;rsquo;s actually generate phone &lt;em>words&lt;/em>. Someone has provided a list of words in English as a package, so we&amp;rsquo;ll add a filter to add that to our comprehension:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">from&lt;/span> english_words &lt;span style="color:#f92672">import&lt;/span> english_words_set
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">letterCombinations&lt;/span>(self, digits: str) &lt;span style="color:#f92672">-&amp;gt;&lt;/span> List[str]:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#f92672">not&lt;/span> digits:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> []
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> letters &lt;span style="color:#f92672">=&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#39;1&amp;#39;&lt;/span>: &lt;span style="color:#e6db74">&amp;#39;&amp;#39;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#39;2&amp;#39;&lt;/span>: &lt;span style="color:#e6db74">&amp;#39;abc&amp;#39;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#39;3&amp;#39;&lt;/span>: &lt;span style="color:#e6db74">&amp;#39;def&amp;#39;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#39;4&amp;#39;&lt;/span>: &lt;span style="color:#e6db74">&amp;#39;ghi&amp;#39;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#39;5&amp;#39;&lt;/span>: &lt;span style="color:#e6db74">&amp;#39;jkl&amp;#39;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#39;6&amp;#39;&lt;/span>: &lt;span style="color:#e6db74">&amp;#39;mno&amp;#39;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#39;7&amp;#39;&lt;/span>: &lt;span style="color:#e6db74">&amp;#39;pqrs&amp;#39;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#39;8&amp;#39;&lt;/span>: &lt;span style="color:#e6db74">&amp;#39;tuv&amp;#39;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#39;9&amp;#39;&lt;/span>: &lt;span style="color:#e6db74">&amp;#39;wxyz&amp;#39;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#39;0&amp;#39;&lt;/span>: &lt;span style="color:#e6db74">&amp;#39; &amp;#39;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> [
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> word
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> product &lt;span style="color:#f92672">in&lt;/span> itertools&lt;span style="color:#f92672">.&lt;/span>product(&lt;span style="color:#f92672">*&lt;/span>[
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> letters[digit] &lt;span style="color:#66d9ef">for&lt;/span> digit &lt;span style="color:#f92672">in&lt;/span> digits
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> ((word &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;&amp;#39;&lt;/span>&lt;span style="color:#f92672">.&lt;/span>join(product)) &lt;span style="color:#f92672">in&lt;/span> english_word_set)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ]
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>I think I like the Walrus/assignment operator (&lt;code>:=&lt;/code>), but it still is a bit bizarre at times. Basically, what it does is assign a call to a value (&lt;code>word = ''.join(product)&lt;/code> in this case), but also returns it and can be used as an expression, which &lt;code>=&lt;/code> cannot. So we can immediately check if it is &lt;code>in english_words&lt;/code>. Since that&amp;rsquo;s a set, it should be pretty fast.&lt;/p></description></item><item><title>Phone Words</title><link>https://blog.jverkamp.com/2021/04/06/phone-words/</link><pubDate>Tue, 06 Apr 2021 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2021/04/06/phone-words/</guid><description>&lt;p>Working through a few problems on &lt;a href="https://leetcode.com/" target="_blank" rel="noopener">LeetCode&lt;/a>. I haven&amp;rsquo;t quite decided what I think of the site, but it&amp;rsquo;s a fun way to play with simple algorithms. Figured I might as well write up any I find interesting.&lt;/p>
&lt;p>First interesting problem:&lt;/p>
&lt;blockquote>
&lt;p>Given a standard lettered keypad, generate all words from a given phone number.&lt;/p>&lt;/blockquote>
&lt;figure>&lt;img src="https://blog.jverkamp.com/embeds/2021/keypad.png">
&lt;/figure></description></item></channel></rss>