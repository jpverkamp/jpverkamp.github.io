<!DOCTYPE html>
<html>
<head>
        
        

        <title>Swap list nodes | jverkamp.com | John-Paul Verkamp</title>

        <script src="//ajax.googleapis.com/ajax/libs/jquery/1.11.0/jquery.min.js"></script>

        <script src="//code.jquery.com/ui/1.11.1/jquery-ui.min.js"></script>

        <link rel="stylesheet" href="//netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css" />
        <link rel="stylesheet" href="//netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap-theme.min.css" />
        <script src="//netdna.bootstrapcdn.com/bootstrap/3.1.1/js/bootstrap.min.js"></script>

        <link rel="stylesheet" href="//cdnjs.cloudflare.com/ajax/libs/ekko-lightbox/3.0.3a/ekko-lightbox.min.css" />
        <script src="//cdnjs.cloudflare.com/ajax/libs/ekko-lightbox/3.0.3a/ekko-lightbox.min.js"></script>

        <script src="//cdnjs.cloudflare.com/ajax/libs/jquery.transit/0.9.9/jquery.transit.min.js"></script>

        <!-- Highlight.js for syntax highlighting -->
        <link rel="stylesheet" href="/highlight/styles/obsidian.css" />
        <script src="/highlight/highlight.pack.js"></script>

        <!-- MathJax for LaTeX support -->
        <script src="//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML"></script>

        <!-- nanoGallery for Flickr Galleries -->
        <link rel="stylesheet" href="//cdnjs.cloudflare.com/ajax/libs/nanogallery/4.4.2/css/themes/light/nanogallery_light.css" />
        <script type="text/javascript" src="//cdnjs.cloudflare.com/ajax/libs/nanogallery/4.4.2/jquery.nanogallery.min.js"></script>

        <!-- Any custom CSS or JS that I've written; this should be kept minimal -->
        <link rel="stylesheet" href="/custom.css" />
        <script src="/custom.js"></script>

        <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
        <link rel="alternate" type="application/atom+xml" title="jverkamp.com (Atom 2.0)" href="http://blog.jverkamp.com/feed/" />
</head>
<body>
        <header class="container">
        <nav class="navbar navbar-default" role="navigation">
  <div class="container-fluid">
    <!-- Brand and toggle get grouped for better mobile display -->
    <div class="navbar-header">
      <button type="button" class="navbar-toggle" data-toggle="collapse" data-target="#bs-example-navbar-collapse-1">
        <span class="sr-only">Toggle navigation</span>
        <span class="icon-bar"></span>
        <span class="icon-bar"></span>
        <span class="icon-bar"></span>
      </button>
      <a class="navbar-brand" href="http://blog.jverkamp.com"><span style="color: green;">jv</span>erkamp.com</a>
    </div>

    <!-- Collect the nav links, forms, and other content for toggling -->
    <div class="collapse navbar-collapse" id="bs-example-navbar-collapse-1">
      <ul class="nav navbar-nav"><li class="dropdown"><a href="http://blog.jverkamp.com/category/archives" class="dropdown-toggle">Archives<span class="caret"></span></a><ul class="dropdown-menu"><li><a href="http://blog.jverkamp.com/category/archives/2004">2004</a></li><li><a href="http://blog.jverkamp.com/category/archives/2005">2005</a></li><li><a href="http://blog.jverkamp.com/category/archives/2006">2006</a></li><li><a href="http://blog.jverkamp.com/category/archives/2007">2007</a></li><li><a href="http://blog.jverkamp.com/category/archives/2008">2008</a></li><li><a href="http://blog.jverkamp.com/category/archives/2009">2009</a></li><li><a href="http://blog.jverkamp.com/category/archives/2010">2010</a></li><li><a href="http://blog.jverkamp.com/category/archives/2011">2011</a></li><li><a href="http://blog.jverkamp.com/category/archives/2012">2012</a></li><li><a href="http://blog.jverkamp.com/category/archives/2013">2013</a></li><li><a href="http://blog.jverkamp.com/category/archives/2014">2014</a></li></ul></li><li class="dropdown"><a href="http://blog.jverkamp.com/category/other" class="dropdown-toggle">Other<span class="caret"></span></a><ul class="dropdown-menu"><li><a href="http://blog.jverkamp.com/category/other/board-game-reviews">Board Game Reviews</a></li><li><a href="http://blog.jverkamp.com/category/other/cooking">Cooking</a></li><li><a href="http://blog.jverkamp.com/category/other/movie-reviews">Movie Reviews</a></li></ul></li><li class="dropdown"><a href="http://blog.jverkamp.com/category/photography" class="dropdown-toggle">Photography<span class="caret"></span></a><ul class="dropdown-menu"><li><a href="http://blog.jverkamp.com/category/photography/dp-challenge">DP Challenge</a></li><li><a href="http://blog.jverkamp.com/category/photography/photosets">Photosets</a></li><li><a href="http://blog.jverkamp.com/category/photography/photosynth">Photosynth</a></li></ul></li><li class="dropdown"><a href="http://blog.jverkamp.com/category/programming" class="dropdown-toggle">Programming<span class="caret"></span></a><ul class="dropdown-menu"><li><a href="http://blog.jverkamp.com/category/programming/by-language">By Language</a></li><li><a href="http://blog.jverkamp.com/category/programming/by-project">By Project</a></li><li><a href="http://blog.jverkamp.com/category/programming/by-source">By Source</a></li><li><a href="http://blog.jverkamp.com/category/programming/by-topic">By Topic</a></li><li><a href="http://blog.jverkamp.com/category/programming/libraries">Libraries</a></li></ul></li><li class="dropdown"><a href="http://blog.jverkamp.com/category/research" class="dropdown-toggle">Research<span class="caret"></span></a><ul class="dropdown-menu"><li><a href="http://blog.jverkamp.com/category/research/by-topic">By Topic</a></li><li><a href="http://blog.jverkamp.com/category/research/publications">Publications</a></li></ul></li><li class="dropdown"><a href="http://blog.jverkamp.com/category/writing" class="dropdown-toggle">Writing<span class="caret"></span></a><ul class="dropdown-menu"><li><a href="http://blog.jverkamp.com/category/writing/by-genre">By Genre</a></li><li><a href="http://blog.jverkamp.com/category/writing/nanowrimo">NaNoWriMo</a></li><li><a href="http://blog.jverkamp.com/category/writing/novels">Novels</a></li><li><a href="http://blog.jverkamp.com/category/writing/other">Other</a></li><li><a href="http://blog.jverkamp.com/category/writing/short-stories">Short Stories</a></li></ul></li></ul>

      <form action="http://www.google.com/search" method="get" onSubmit="(function(obj){obj.q.value='site:blog.jverkamp.com '+obj.qfront.value;})(this)" class="navbar-form navbar-right" role="search">
        <div class="form-group">
          <input name="q" type="hidden" />
          <input name="qfront" type="text" class="form-control" placeholder="Search" />
          <button type="submit" class="btn btn-default" value="Search">Search</button>
        </p>
      </form>
    </div><!-- /.navbar-collapse -->
  </div><!-- /.container-fluid -->
</nav>
        </header>

        <article class="container">
                <header>
                        <h1 class="entry-title">Swap list nodes</h1>

                        <div class="entry-meta">
                                <span class="posted-on"><time class="entry-date" datetime="2013-06-26"><span class="year">2013</span> <span class="month">June</span> <span class="day">26</span></time></span>
                                <span class="tags"><ul class="tag-list list-inline"><li><a href="http://blog.jverkamp.com/category/programming/by-topic/data-structures/lists">Lists</a></li><li><a href="http://blog.jverkamp.com/category/programming/by-topic/memory">Memory</a></li><li><a href="http://blog.jverkamp.com/category/programming">Programming</a></li><li><a href="http://blog.jverkamp.com/category/programming/by-source/programming-praxis">Programming Praxis</a></li><li><a href="http://blog.jverkamp.com/category/programming/by-language/racket">Racket</a></li><li><a href="http://blog.jverkamp.com/category/programming/by-language/scheme">Scheme</a></li></ul></span>
                        </div>

                        <hr />
                </header>
                <div class="entry-content">
                        <p>It's been rather a while since I've worked out a <a title="Programming Praxis" href="http://programmingpraxis.com/">Programming Praxis</a> problem, but they posted a <a title="Swap list nodes" href="http://programmingpraxis.com/2013/06/25/swap-list-nodes/">new one yesterday</a>, so now seems as good a time as any. The problem is relatively simple:</p>
<blockquote>Given a linked list, swap the kth node from the head of the list with the kth node from the end of the list.</blockquote>
<p>Since all lists in Scheme are linked lists, that part seems easy enough. To make the problem a little more interesting however, I'm going to work it out in a purely functional manner: no mutation.<!--more--></p>
<p>So, let's have at it!</p>
<p>At first, I was interested in trying to do this in a single pass, building up data while recurring down and while back. But that code quickly grew into rather a mess with all sorts of edge cases dealing with things like the kth from the end coming before the kth from the front. So in the end, I abandoned that path in favor of a two pass solution:</p>
<ol>
        <li>Find pointers to the kth node from the head and the kth from the tail.</li>
        <li>Recur down the list, swapping elements when we get to either points.</li>
</ol>
<p>One neat trick that we can use<span class="footnote"><sup><a href="#footnote-1">[1]</a></sup></span> is that the pairs that make up lists in Scheme are distinct memory locations--which means that they are <code>eq?</code>.</p>
<p>So how can we use that? Well, for step one, all we have to do is <code>cdr</code> down the list until we get to the kth node (either from the head or tail). When we find that node, return the current list. This pointer will be <code>eq?</code> to itself during the second iteration rather than using indices. So let's start with that code:</p>
<pre class="scheme"><code>; Get pointers to the kth head and the kth tail
(define-values (_ kth-head kth-tail)
  (let loop ([i 1] [ls ls])
    (cond
      [(null? ls)
       (values 1 #f #f)]
      [else
       (define-values (j kth-head kth-tail)
         (loop (+ i 1) (cdr ls)))
       (values
        (+ j 1)
        (if (= i k) ls kth-head)
        (if (= j k) ls kth-tail))])))</code></pre>
<p>This is a little more complicated than base Scheme because we're returning multiple values. Essentially, this code (the function <code>loop</code>) has the type <code>(int list -> int list list)</code> where the arguments are:</p>
<ol>
        <li>a counter from the front</li>
        <li>the current list pointer</li>
</ol>
<p>In turn, the return values are:</p>
<ol>
        <li>a counter from the back</li>
        <li>a pointer to the <code>kth-head</code> (once we've found it)</li>
        <li>a pointer to the <code>kth-tail</code> (once we've found it)</li>
</ol>
<p>The beauty of this code comes in the last four lines. Essentially, we're always going to increment the end counter, but the two <code>if</code> statements only change the <code>kth-head</code> or <code>kth-tail</code> if we're at the right value, replacing it with the current list <code>ls</code>.</p>
<p>So what can we do with this? Well, this part is much more straight forward:</p>
<pre class="scheme"><code>; Recur again, swapping the pointers
(let loop ([ls ls])
  (cond
    [(null? ls)        '()]
    [(eq? ls kth-head) (cons (car kth-tail) (loop (cdr ls)))]
    [(eq? ls kth-tail) (cons (car kth-head) (loop (cdr ls)))]
    [else              (cons (car ls)       (loop (cdr ls)))]))</code></pre>
<p>If we're at the end, do nothing. Otherwise, rebuild the list, always recurring on the <code>cdr</code> of the list and adding the proper <code>car</code>. One thing to note is that the structure of those last three elements looks awfully similar. So theoretically, we could rewrite it so that we only have a single <code>cons</code>, <code>car</code>, and <code>(loop (cdr ls))</code>. That code would look something like this:</p>
<pre class="scheme"><code>; Recur again, swapping the pointers
(let loop ([ls ls])
  (cond
    [(null? ls) ls]
    [else
     (cons
      (car
       (cond
         [(eq? ls kth-head) kth-tail] ; k from head
         [(eq? ls kth-tail) kth-head] ; k from tail
         [else ls]))                  ; everything else
      (loop (cdr ls)))]))</code></pre>
<p>Personally, I think it gives up something in terms of readability and (given a decent compiler) they should be essentially equivalent. Still, to each their own.</p>
<p>With that though, that's all that we need. Just put it all together:</p>
<pre class="scheme"><code>; Given a list, swap the kth from head and tail
(define (swap-kth ls k)
  ; Get pointers to the kth head and the kth tail
  ...

  ; Recur again, swapping the pointers
  ...)</code></pre>
<p>And it works:</p>
<pre class="scheme"><code>&gt; (swap-kth '(1 2 3 4 5) 2)
'(1 4 3 2 5)</code></pre>
<p>But does it really work? Well, that's what the <code>test module</code> is for:</p>
<pre class="scheme"><code>; Make sure that everything works as it should
(module+ test
  (require rackunit)
  (check-equal? (swap-kth '() 3) '())
  (check-equal? (swap-kth '(1) 3) '(1))
  (check-equal? (swap-kth '(1 2) 3) '(1 2))
  (check-equal? (swap-kth '(1 2 3) 3) '(3 2 1))
  (check-equal? (swap-kth '(1 2 3 4) 3) '(1 3 2 4))
  (check-equal? (swap-kth '(1 2 3 4 5) 3) '(1 2 3 4 5))
  (check-equal? (swap-kth '(1 2 3 4 5 6) 3) '(1 2 4 3 5 6))
  (check-equal? (swap-kth '(1 2 3 4 5 6 7) 3) '(1 2 5 4 3 6 7))
  (check-equal? (swap-kth '(1 2 3 4 5 6 7 8) 3) '(1 2 6 4 5 3 7 8))
  (check-equal? (swap-kth '(1 2 3 4 5 6 7 8 9) 3) '(1 2 7 4 5 6 3 8 9)))</code></pre>
<p>Run it again... all good. So there you have it. Really, you have all of the pointer swapping <del>power</del> madness that you would have in a language like C, but without the headaches of actually manually managing memory<span class="footnote"><sup><a href="#footnote-2">[2]</a></sup></span>.</p>
<p>If you'd like to check out the entire code, you can do so here: - <a href="https://github.com/jpverkamp/small-projects/blob/master/blog/swap-kth.rkt" title="swap kth source on GitHub">swap kth source</a></p>
                </div>
                <div class="entry-footnotes">
                        <div id="footnotes"><ol><li><a name="footnote-1"></a>Which is really the same thing we'd do if we were working in C, just a little nicer looking</li><li><a name="footnote-2"></a>It's on that list of skills every CS should know, but not something I expect many people actually enjoy doing...</li></ol></div>
                </div>

                <div id="disqus_thread"></div>
<script type="text/javascript">
var disqus_shortname = "jverkamp";
var disqus_title = "Swap list nodes";
var disqus_url = "http://blog.jverkamp.com/2013/06/26/swap-list-nodes/";
/* * * DON'T EDIT BELOW THIS LINE * * */
(function() {
  var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
  dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js';
  (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
})();
</script>
<noscript>Please enable JavaScript to view the <a href="http://disqus.com/?ref_noscript">comments powered by Disqus.</a></noscript>
<a href="http://disqus.com" class="dsq-brlink">comments powered by <span class="logo-disqus">Disqus</span></a>
        </article>

        <footer class="container" role="contentinfo">
                <nav class="navbar navbar-default" role="navigation"><ul class="nav navbar-nav nav-justified"><li><a href="http://blog.jverkamp.com/2013/06/23/monsters-university">← Monsters University</a></li><li><a href="http://blog.jverkamp.com/category/archives">Archives</a></li><li><a href="http://blog.jverkamp.com/2013/06/28/world-war-z">World War Z →</a></li></ul><ul class="nav navbar-nav nav-justified"><li><a href="http://blog.jverkamp.com/2013/06/21/racket-roguelike-8-a-million-words">← Racket Roguelike 8: A million words!</a></li><li><a href="http://blog.jverkamp.com/category/programming">Programming</a></li><li><a href="http://blog.jverkamp.com/2013/06/28/racket-roguelike-9-daedalus-wrath">Racket Roguelike 9: Daedalus' wrath! →</a></li></ul></nav>

                <div class="legal">
                        <a href="http://blog.jverkamp.com/feed/atom.xml">feed <img style="border: 0;" src="http://blog.jverkamp.com/rss.png" /></a><br />
                        All posts unless otherwise mentioned are licensed under <a rel="license" href="http://creativecommons.org/licenses/by-nc-sa/3.0/deed.en_US"><img alt="Creative Commons License" style="border-width:0" src="http://i.creativecommons.org/l/by-nc-sa/3.0/80x15.png" /></a><br />
                        Any source code unless otherwise mentioned is licensed under the <a href="http://directory.fsf.org/wiki/License:BSD_3Clause">3 clause BSD license</a>
                </div>
        </footer>

<script>
(function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
(i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
})(window,document,'script','//www.google-analytics.com/analytics.js','ga');

ga('create', 'UA-53688146-1', 'auto');
ga('send', 'pageview');
</script>
</body>
</html>