<!DOCTYPE html>
<html>
<head>
        
        

        <title>Predecessor and successor in a binary search tree | jverkamp.com | John-Paul Verkamp</title>

        <script src="//ajax.googleapis.com/ajax/libs/jquery/1.11.0/jquery.min.js" defer></script>
        <script src="//code.jquery.com/ui/1.11.1/jquery-ui.min.js" defer></script>

        <link rel="stylesheet" href="//netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css" defer />
        <link rel="stylesheet" href="//netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap-theme.min.css" defer />
        <script src="//netdna.bootstrapcdn.com/bootstrap/3.1.1/js/bootstrap.min.js" defer></script>

        <link rel="stylesheet" href="//cdnjs.cloudflare.com/ajax/libs/ekko-lightbox/3.0.3a/ekko-lightbox.min.css" defer />
        <script src="//cdnjs.cloudflare.com/ajax/libs/ekko-lightbox/3.0.3a/ekko-lightbox.min.js" defer></script>

        <script src="//cdnjs.cloudflare.com/ajax/libs/jquery.transit/0.9.9/jquery.transit.min.js" defer></script>

        <!-- Highlight.js for syntax highlighting -->
        <link rel="stylesheet" href="/highlight/styles/obsidian.css" defer />
        <script src="/highlight/highlight.pack.js" defer></script>

        <!-- MathJax for LaTeX support -->
        <script src="//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML" defer></script>

        <!-- nanoGallery for Flickr Galleries -->
        <link rel="stylesheet" href="//cdnjs.cloudflare.com/ajax/libs/nanogallery/4.4.2/css/themes/light/nanogallery_light.css" defer />
        <script type="text/javascript" src="//cdnjs.cloudflare.com/ajax/libs/nanogallery/4.4.2/jquery.nanogallery.min.js" defer ></script>

        <!-- Pretty pretty fonts -->
        <link rel="stylesheet" type="text/css" href="//fonts.googleapis.com/css?family=Calligraffitti" defer />

        <!-- Any custom CSS or JS that I've written; this should be kept minimal -->
        <link rel="stylesheet" href="/custom.css" defer />
        <script src="/custom.js" defer></script>

        <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
        <link rel="alternate" type="application/atom+xml" title="jverkamp.com (Atom 2.0)" href="http://blog.jverkamp.com/feed/" />
</head>
<body>
        <header class="container">
        <nav class="navbar navbar-default" role="navigation">
  <div class="container-fluid">
    <!-- Brand and toggle get grouped for better mobile display -->
    <div class="navbar-header">
      <button type="button" class="navbar-toggle" data-toggle="collapse" data-target="#bs-example-navbar-collapse-1">
        <span class="sr-only">Toggle navigation</span>
        <span class="icon-bar"></span>
        <span class="icon-bar"></span>
        <span class="icon-bar"></span>
      </button>
      <a class="navbar-brand" href="//blog.jverkamp.com"><span style="color: green;">jv</span>erkamp.com</a>
    </div>

    <!-- Collect the nav links, forms, and other content for toggling -->
    <div class="collapse navbar-collapse" id="bs-example-navbar-collapse-1">
      <ul class="nav navbar-nav"><li class="dropdown"><a href="//blog.jverkamp.com/category/archives" class="dropdown-toggle">Archives<span class="caret"></span></a><ul class="dropdown-menu"><li><a href="//blog.jverkamp.com/category/archives/2004">2004</a></li><li><a href="//blog.jverkamp.com/category/archives/2005">2005</a></li><li><a href="//blog.jverkamp.com/category/archives/2006">2006</a></li><li><a href="//blog.jverkamp.com/category/archives/2007">2007</a></li><li><a href="//blog.jverkamp.com/category/archives/2008">2008</a></li><li><a href="//blog.jverkamp.com/category/archives/2009">2009</a></li><li><a href="//blog.jverkamp.com/category/archives/2010">2010</a></li><li><a href="//blog.jverkamp.com/category/archives/2011">2011</a></li><li><a href="//blog.jverkamp.com/category/archives/2012">2012</a></li><li><a href="//blog.jverkamp.com/category/archives/2013">2013</a></li><li><a href="//blog.jverkamp.com/category/archives/2014">2014</a></li><li><a href="//blog.jverkamp.com/category/archives/2015">2015</a></li></ul></li><li class="dropdown"><a href="//blog.jverkamp.com/category/other" class="dropdown-toggle">Other<span class="caret"></span></a><ul class="dropdown-menu"><li><a href="//blog.jverkamp.com/category/other/board-game-reviews">Board Game Reviews</a></li><li><a href="//blog.jverkamp.com/category/other/book-reviews">Book Reviews</a></li><li><a href="//blog.jverkamp.com/category/other/cooking">Cooking</a></li><li><a href="//blog.jverkamp.com/category/other/movie-reviews">Movie Reviews</a></li></ul></li><li class="dropdown"><a href="//blog.jverkamp.com/category/photography" class="dropdown-toggle">Photography<span class="caret"></span></a><ul class="dropdown-menu"><li><a href="//blog.jverkamp.com/category/photography/dp-challenge">DP Challenge</a></li><li><a href="//blog.jverkamp.com/category/photography/photosets">Photosets</a></li><li><a href="//blog.jverkamp.com/category/photography/photosynth">Photosynth</a></li></ul></li><li class="dropdown"><a href="//blog.jverkamp.com/category/programming" class="dropdown-toggle">Programming<span class="caret"></span></a><ul class="dropdown-menu"><li><a href="//blog.jverkamp.com/category/programming/by-language">By Language</a></li><li><a href="//blog.jverkamp.com/category/programming/by-project">By Project</a></li><li><a href="//blog.jverkamp.com/category/programming/by-source">By Source</a></li><li><a href="//blog.jverkamp.com/category/programming/by-topic">By Topic</a></li><li><a href="//blog.jverkamp.com/category/programming/libraries">Libraries</a></li></ul></li><li class="dropdown"><a href="//blog.jverkamp.com/category/research" class="dropdown-toggle">Research<span class="caret"></span></a><ul class="dropdown-menu"><li><a href="//blog.jverkamp.com/category/research/by-topic">By Topic</a></li><li><a href="//blog.jverkamp.com/category/research/publications">Publications</a></li></ul></li><li class="dropdown"><a href="//blog.jverkamp.com/category/writing" class="dropdown-toggle">Writing<span class="caret"></span></a><ul class="dropdown-menu"><li><a href="//blog.jverkamp.com/category/writing/by-genre">By Genre</a></li><li><a href="//blog.jverkamp.com/category/writing/ideas">Ideas</a></li><li><a href="//blog.jverkamp.com/category/writing/nanowrimo">NaNoWriMo</a></li><li><a href="//blog.jverkamp.com/category/writing/novels">Novels</a></li><li><a href="//blog.jverkamp.com/category/writing/other">Other</a></li><li><a href="//blog.jverkamp.com/category/writing/short-stories">Short Stories</a></li><li><a href="//blog.jverkamp.com/category/writing/writing-excuses">Writing Excuses</a></li></ul></li></ul>

      <form action="http://www.google.com/search" method="get" onSubmit="(function(obj){obj.q.value='site:blog.jverkamp.com '+obj.qfront.value;})(this)" class="navbar-form navbar-right" role="search">
        <div class="form-group">
          <input name="q" type="hidden" />
          <input name="qfront" type="text" class="form-control" placeholder="Search" />
          <button type="submit" class="btn btn-default" value="Search">Search</button>
        </p>
      </form>
    </div><!-- /.navbar-collapse -->
  </div><!-- /.container-fluid -->
</nav>
        </header>

        <article class="container">
                <header>
                        <h1 class="entry-title">Predecessor and successor in a binary search tree</h1>

                        <div class="entry-meta">
                                <span class="posted-on"><time class="entry-date" datetime="2013-02-13"><span class="year">2013</span> <span class="month">Feb</span> <span class="day">13</span></time></span>
                                <span class="tags"><ul class="tag-list list-inline"><li><a href="//blog.jverkamp.com/category/programming">Programming</a></li><li><a href="//blog.jverkamp.com/category/programming/by-source/programming-praxis">Programming Praxis</a></li><li><a href="//blog.jverkamp.com/category/programming/by-language/racket">Racket</a></li><li><a href="//blog.jverkamp.com/category/programming/by-language/scheme">Scheme</a></li><li><a href="//blog.jverkamp.com/category/programming/by-topic/algorithms/sorting">Sorting</a></li><li><a href="//blog.jverkamp.com/category/programming/by-topic/data-structures/tree">Tree</a></li></ul></span>
                        </div>

                        <hr />
                </header>
                <div class="entry-content">
                        <p><a href="http://programmingpraxis.com/2013/02/12/binary-search-tree-in-order-predecessor-and-successor/" title="Binary Search Tree: In-Order Predecessor And Successor">Yesterday's post</a> from Programming Praxis has us trying to find the predecessor and successor to a given value in a binary search tree. There are actually two general algorithms for doing this, depending on if you have parent pointers or not--but they're asking for the algorithm without.</p>
<!--more-->
<p>The basic idea is that as you recur down the tree looking for a node, you'll also keep track of the last time you branch in each direction (separately). In their examples, they have the code duplicated for each, but I wrote a single function that returns multiple <code>value</code>s so that behavior at least is shared.</p>
<p>In any case, the first thing we need to do is set up a <code>tree</code> structure:</p>
<pre class="scheme"><code>; set up a tree structure
(define-struct tree (value left right) #:transparent)

(define (leaf val) (tree val (empty-tree) (empty-tree)))
(define (leaf? tr) (and (tree? tr) (not (tree-left? tr)) (not (tree-right? tr))))

(define *empty-tree* (tree (void) (void) (void)))
(define (empty-tree) *empty-tree*)
(define (empty? tr) (eq? tr *empty-tree*))

; test if the left node of a tree is non-empty
(define (tree-left? tr)
  (and (tree? tr)
       (not (empty? (tree-left tr)))))

; test if the right node of a tree is non-empty
(define (tree-right? tr)
  (and (tree? tr)
       (not (empty? (tree-right tr)))))</code></pre>
<p>Here we have the basic struct along with a few helper functions for making an <code>empty-tree</code> and for testing if we have an <code>empty?</code> subtree, either left or right.</p>
<p>The next step will be to go ahead and write a function for finding the <code>minimum</code> and <code>maximum</code> value in a tree. This doesn't actually care at all how the values have been stored, it's just a matter of going left/right until you can't anymore. Here's <code>minimum</code>, you can see <code>maximum</code> <a href="https://github.com/jpverkamp/small-projects/blob/master/blog/bst-pred%2Bsucc.rkt" title="BST predecessor / successor source">on GitHub</a> (although it's essentially the same).</p>
<pre class="scheme"><code>; find the minimum value in a binary search tree
(define (minimum tr)
  (cond
    [(empty? tr) (void)]
    [(tree-left? tr)
     (minimum (tree-left tr))]
    [else
     (tree-value tr)]))</code></pre>
<p>Next, the core of the algorithm, we want to be able to find the node containing a value and the last time we went either left or right. Here's all of that in one function:</p>
<pre class="scheme"><code>; recur to a value, return:
;   the last time we went left
;   the node containing the search values
;   the last time we went right
(define (find-nodes tr &lt; val)
  (let loop ([tr tr] [last-left (void)] [last-right (void)])
    (cond
      [(empty? tr)
       (values last-left tr last-right)]
      [(equal? val (tree-value tr))
       (values last-left tr last-right)]
      [(&lt; val (tree-value tr))
       (loop (tree-left tr) tr last-right)]
      [else
       (loop (tree-right tr) last-left tr)])))</code></pre>
<p>From here, we actually have everything we need to build a <code>successor</code> function:</p>
<pre class="scheme"><code>; get the successor to a value
(define (successor tr &lt; val)
  (define-values (l v r) (find-nodes tr &lt; val))
  (cond
    [(tree-right? v)
     (minimum (tree-right v))]
    [(and (not (void? l)) (not (empty? l)))
     (tree-value l)]))</code></pre>
<p>Basically, we'll get the last left as <code>l</code>, the tree containing the value we're looking for as <code>v</code>, and the last right as <code>r</code>. Then, if we can go right from the value, the <code>minimum</code> node there is the successor. If we can't, that means that we went left at some point getting here. Find the most recent left branch (<code>l</code>) and find it's value instead.</p>
<p>And that's it. Here's <code>predecessor</code> as well:</p>
<pre class="scheme"><code>; get the predecessor to a value
(define (predecessor tr &lt; val)
  (define-values (l v r) (find-nodes tr &lt; val))
  (cond
    [(tree-left? v)
     (maximum (tree-left v))]
    [(and (not (void? r)) (not (empty? r)))
     (tree-value r)]))</code></pre>
<p>One thing that's interesting about these is that you can actually use them to implement a form of tree sort. Start by finding the <code>minimum</code> value. After that, repeatedly find the <code>successor</code> until you have all of the values:</p>
<pre class="scheme"><code>; sort using a tree, using successor
; this is actually O(n log n) believe it or not
(define (tree-sort &lt; ls)
  (define tr (insert-all (empty-tree) &lt; ls))
  (let loop ([x (minimum tr)])
    (cond
      [(void? x) '()]
      [else
       (cons x (loop (successor tr &lt; x)))])))</code></pre>
<p>It's actually still <code>O(n log n)</code> (there are <code>n O(log n)</code> insertions to build the tree, a <code>O(log n)</code> search to find the minimum, and a O(log n) search for each value). I feel like it will have a significantly higher constant than other <code>O(n log n)</code> sorts (particularly if the tree isn't well balanced), but it's surprisingly effective (at least experimentally on the same order as quicksort):</p>
<pre class="scheme"><code>&gt; (define ls (shuffle (range 1000000)))
&gt; (time (quicksort &lt; ls))
cpu time: 13073 real time: 13113 gc time: 6739
...
&gt; (time (tree-sort &lt; ls))
cpu time: 56426 real time: 56795 gc time: 18085
...
&gt; (time (insertion-sort &lt; ls))
; (Stopped after five minutes)
</code></pre>
<p>And that's it. It's a bit differently organized than the code that Programming Praxis posted as <a href="http://programmingpraxis.com/2013/02/12/binary-search-tree-in-order-predecessor-and-successor/2/" title="Binary Search Tree: In-Order Predecessor And Successor">their solution</a>, but I think it's still pretty straight forward.</p>
<p>If you'd like to check out the entire source, you can do so on GitHub: - <a href="https://github.com/jpverkamp/small-projects/blob/master/blog/bst-pred%2Bsucc.rkt">BST predecessor / successor source</a></p>
                </div>
                <div class="entry-footnotes">
                        <div id="footnotes"><ol></ol></div>
                </div>

                <div id="disqus_thread"></div>
<script type="text/javascript">
var disqus_shortname = "jverkamp";
var disqus_title = "Predecessor and successor in a binary search tree";
var disqus_url = "http://blog.jverkamp.com/2013/02/13/predecessor-and-successor-in-a-binary-search-tree/";
/* * * DON'T EDIT BELOW THIS LINE * * */
(function() {
  var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
  dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js';
  (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
})();
</script>
<noscript>Please enable JavaScript to view the <a href="http://disqus.com/?ref_noscript">comments powered by Disqus.</a></noscript>
<a href="http://disqus.com" class="dsq-brlink">comments powered by <span class="logo-disqus">Disqus</span></a>
        </article>

        <footer class="container" role="contentinfo">
                <nav class="navbar navbar-default" role="navigation"><ul class="nav navbar-nav nav-justified"><li><a href="//blog.jverkamp.com/2013/02/09/isma-2013-aims-5-dns-based-censorship">← ISMA 2013 AIMS-5 -- DNS Based Censorship</a></li><li><a href="//blog.jverkamp.com/category/archives">Archives</a></li><li><a href="//blog.jverkamp.com/2013/02/14/hansel-gretel-witch-hunters">Hansel &amp; Gretel: Witch Hunters →</a></li></ul><ul class="nav navbar-nav nav-justified"><li><a href="//blog.jverkamp.com/2013/02/09/isma-2013-aims-5-dns-based-censorship">← ISMA 2013 AIMS-5 -- DNS Based Censorship</a></li><li><a href="//blog.jverkamp.com/category/programming">Programming</a></li><li><a href="//blog.jverkamp.com/2013/02/20/npr-sunday-puzzle">NPR Sunday Puzzle →</a></li></ul></nav>

                <div class="legal">
                        <a href="//blog.jverkamp.com/feed/atom.xml">feed <img style="border: 0;" src="//blog.jverkamp.com/rss.png" /></a><br />
                        All posts unless otherwise mentioned are licensed under <a rel="license" href="http://creativecommons.org/licenses/by-nc-sa/3.0/deed.en_US"><img alt="Creative Commons License" style="border-width:0" src="http://i.creativecommons.org/l/by-nc-sa/3.0/80x15.png" /></a><br />
                        Any source code unless otherwise mentioned is licensed under the <a href="http://directory.fsf.org/wiki/License:BSD_3Clause">3 clause BSD license</a>
                </div>
        </footer>

<script>
(function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
(i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
m=s.getElementsByTagName(o)[0];a.defer=1;a.src=g;m.parentNode.insertBefore(a,m)
})(window,document,'script','//www.google-analytics.com/analytics.js','ga');

ga('create', 'UA-53688146-1', 'auto');
ga('send', 'pageview');
</script>
</body>
</html>