<!DOCTYPE html>
<html>
<head>
        
        

        <title>A prototype object system for Racket | jverkamp.com | John-Paul Verkamp</title>

        <script src="//ajax.googleapis.com/ajax/libs/jquery/1.11.0/jquery.min.js"></script>

        <link rel="stylesheet" href="//netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css" />
        <link rel="stylesheet" href="//netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap-theme.min.css" />
        <script src="//netdna.bootstrapcdn.com/bootstrap/3.1.1/js/bootstrap.min.js"></script>

        <link rel="stylesheet" href="//cdnjs.cloudflare.com/ajax/libs/ekko-lightbox/3.0.3a/ekko-lightbox.min.css" />
        <script src="//cdnjs.cloudflare.com/ajax/libs/ekko-lightbox/3.0.3a/ekko-lightbox.min.js"></script>

        <script src="//cdnjs.cloudflare.com/ajax/libs/jquery.transit/0.9.9/jquery.transit.min.js"></script>

        <!-- Highlight.js for syntax highlighting -->
        <link rel="stylesheet" href="/highlight/styles/tomorrow-night.css" />
        <script src="/highlight/highlight.pack.js"></script>

        <!-- MathJax for LaTeX support -->
        <script src="//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML"></script>

        <!-- nanoGallery for Flickr Galleries -->
        <link rel="stylesheet" href="//cdnjs.cloudflare.com/ajax/libs/nanogallery/4.4.2/css/themes/light/nanogallery_light.css" />
        <script type="text/javascript" src="//cdnjs.cloudflare.com/ajax/libs/nanogallery/4.4.2/jquery.nanogallery.min.js"></script>

        <!-- Any custom CSS or JS that I've written; this should be kept minimal -->
        <link rel="stylesheet" href="/custom.css" />
        <script src="/custom.js"></script>

        <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
</head>
<body>
        <header class="container">
        <nav class="navbar navbar-default" role="navigation">
  <div class="container-fluid">
    <!-- Brand and toggle get grouped for better mobile display -->
    <div class="navbar-header">
      <button type="button" class="navbar-toggle" data-toggle="collapse" data-target="#bs-example-navbar-collapse-1">
        <span class="sr-only">Toggle navigation</span>
        <span class="icon-bar"></span>
        <span class="icon-bar"></span>
        <span class="icon-bar"></span>
      </button>
      <a class="navbar-brand" href="http://jpverkamp.github.io"><span style="color: green;">jv</span>erkamp.com</a>
    </div>

    <!-- Collect the nav links, forms, and other content for toggling -->
    <div class="collapse navbar-collapse" id="bs-example-navbar-collapse-1">
      <ul class="nav navbar-nav"><li class="dropdown"><a href="http://jpverkamp.github.io/category/archives" class="dropdown-toggle">Archives<span class="caret"></span></a><ul class="dropdown-menu"><li><a href="http://jpverkamp.github.io/category/archives/2004">2004</a></li><li><a href="http://jpverkamp.github.io/category/archives/2005">2005</a></li><li><a href="http://jpverkamp.github.io/category/archives/2006">2006</a></li><li><a href="http://jpverkamp.github.io/category/archives/2007">2007</a></li><li><a href="http://jpverkamp.github.io/category/archives/2008">2008</a></li><li><a href="http://jpverkamp.github.io/category/archives/2009">2009</a></li><li><a href="http://jpverkamp.github.io/category/archives/2010">2010</a></li><li><a href="http://jpverkamp.github.io/category/archives/2011">2011</a></li><li><a href="http://jpverkamp.github.io/category/archives/2012">2012</a></li><li><a href="http://jpverkamp.github.io/category/archives/2013">2013</a></li><li><a href="http://jpverkamp.github.io/category/archives/2014">2014</a></li></ul></li><li class="dropdown"><a href="http://jpverkamp.github.io/category/other" class="dropdown-toggle">Other<span class="caret"></span></a><ul class="dropdown-menu"><li><a href="http://jpverkamp.github.io/category/other/board-game-reviews">Board Game Reviews</a></li><li><a href="http://jpverkamp.github.io/category/other/cooking">Cooking</a></li><li><a href="http://jpverkamp.github.io/category/other/movie-reviews">Movie Reviews</a></li></ul></li><li class="dropdown"><a href="http://jpverkamp.github.io/category/photography" class="dropdown-toggle">Photography<span class="caret"></span></a><ul class="dropdown-menu"><li><a href="http://jpverkamp.github.io/category/photography/dp-challenge">DP Challenge</a></li><li><a href="http://jpverkamp.github.io/category/photography/photosets">Photosets</a></li><li><a href="http://jpverkamp.github.io/category/photography/photosynth">Photosynth</a></li></ul></li><li class="dropdown"><a href="http://jpverkamp.github.io/category/programming" class="dropdown-toggle">Programming<span class="caret"></span></a><ul class="dropdown-menu"><li><a href="http://jpverkamp.github.io/category/programming/by-language">By Language</a></li><li><a href="http://jpverkamp.github.io/category/programming/by-project">By Project</a></li><li><a href="http://jpverkamp.github.io/category/programming/by-source">By Source</a></li><li><a href="http://jpverkamp.github.io/category/programming/by-topic">By Topic</a></li><li><a href="http://jpverkamp.github.io/category/programming/libraries">Libraries</a></li></ul></li><li class="dropdown"><a href="http://jpverkamp.github.io/category/research" class="dropdown-toggle">Research<span class="caret"></span></a><ul class="dropdown-menu"><li><a href="http://jpverkamp.github.io/category/research/by-topic">By Topic</a></li><li><a href="http://jpverkamp.github.io/category/research/publications">Publications</a></li></ul></li><li class="dropdown"><a href="http://jpverkamp.github.io/category/writing" class="dropdown-toggle">Writing<span class="caret"></span></a><ul class="dropdown-menu"><li><a href="http://jpverkamp.github.io/category/writing/by-genre">By Genre</a></li><li><a href="http://jpverkamp.github.io/category/writing/nanowrimo">NaNoWriMo</a></li><li><a href="http://jpverkamp.github.io/category/writing/novels">Novels</a></li><li><a href="http://jpverkamp.github.io/category/writing/other">Other</a></li><li><a href="http://jpverkamp.github.io/category/writing/short-stories">Short Stories</a></li></ul></li></ul>

      <!--
      <form class="navbar-form navbar-right" role="search">
        <div class="form-group">
          <input type="text" class="form-control" placeholder="Search">
        </div>
        <button type="submit" class="btn btn-default">Submit</button>
      </form>
      -->
    </div><!-- /.navbar-collapse -->
  </div><!-- /.container-fluid -->
</nav>
        </header>

        <article class="container">
                <header>
                        <h1 class="entry-title">A prototype object system for Racket</h1>

                        <div class="entry-meta">
                                <span class="posted-on"><time class="entry-date" datetime="2013-04-18"><span class="year">2013</span> <span class="month">Apr</span> <span class="day">18</span></time></span>
                                <span class="tags"><ul class="tag-list list-inline"><li><a href="http://jpverkamp.github.io/category/programming">Programming</a></li><li><a href="http://jpverkamp.github.io/category/programming/libraries">Libraries</a></li><li><a href="http://jpverkamp.github.io/category/programming/by-language/racket">Racket</a></li><li><a href="http://jpverkamp.github.io/category/programming/by-topic/object-oriented">Object Oriented</a></li></ul></span>
                        </div>

                        <hr />
                </header>
                <div class="entry-content">
                        <p>As I seem to be <a href="http://jpverkamp.github.io/2013/04/11/perlin-and-simplex-noise-in-racket">wont to do</a>, I needed something to work on my <a href="http://jpverkamp.github.io/2013/04/04/racket-roguelike-1-a-gui-screens-io-and-you">Roguelike in Racket</a> tutorial series--so I wrote it! This time, we're looking to add a <a href="https://en.wikipedia.org/wiki/prototyped-based_object system">Prototype-based programming</a> to Racket. I'm sure that someone has rigged up something similar before, but it's often more interesting to work things like this out for oneself. <!--more--></p>
<p>First, as a short aside, exactly what is a prototype-based object system? Well, Wikipedia says it clearly enough:</p>
<blockquote><b>Prototype-based programming</b> is a style of <a href="https://en.wikipedia.org/wiki/object-oriented_programming">object-oriented programming</a> in which <a href="https://en.wikipedia.org/wiki/classes">Class (programming)</a> are not present, and behavior reuse (known as <a href="https://en.wikipedia.org/wiki/inheritance">Inheritance (programming)</a> in class-based languages) is performed via a process of <a href="https://en.wikipedia.org/wiki/cloning">Cloning (programming)</a>existing <a href="https://en.wikipedia.org/wiki/objects">Object (programming)</a> that serve as <a href="https://en.wikipedia.org/wiki/prototypes">Prototype</a>. This model can also be known as <i>classless</i>, <i>prototype-oriented</i> or<i>instance-based</i> programming. <a href="https://en.wikipedia.org/wiki/Delegation">Delegation (programming)</a> is the language feature that supports prototype-based programming.</blockquote>
<p>Essentially, rather than a dichotomy between classes and objects, everything is the same. If you want to instantiate a class, you clone it. If you want to extend a class, you clone it and add/override previous fields. So you should be able to do something like this:</p>
<pre class="scheme"><code>; Create a basic thing
(define-thing color [red 0] [green 0] [blue 0])

; Extend things
(define-thing red color [red 255])

; Get values, with optional default
(thing-get color 'red) =&gt; 0
(thing-get red 'red) =&gt; 255</code></pre>
<p>Also, we want to be able to set values without altering the parent object:</p>
<pre class="scheme"><code>; Set value, existing or not
(thing-set! red 'red 1.0)
(thing-get red 'red) =&gt; 1.0
(thing-get color 'red) =&gt; 0</code></pre>
<p>So how do we do this?</p>
<p>Well, to start with, we need something to store key/value pairs. It seems like <code><a href="http://docs.racket-lang.org/search/index.html?q=Hash Tables">Hash Tables</a></code> will be the perfect option. So let's create a <code>thing</code> structure (it's not a perfect name, but I've seen worse).</p>
<pre class="scheme"><code>; A simple wrapper for things
(define-struct thing (data)
  #:constructor-name new-thing)</code></pre>
<p><code>#:constructor-name</code> is necessary since I want to define my own <code>make-thing</code>. Basically, we could directly return/use a <code>hasheq</code>. But this way, we get things like the <code>thing?</code> predicate and nice (if not particularly helpful) pretty printing:</p>
<pre class="scheme"><code>&gt; (define-thing color [red 0] [green 0] [blue 0])
&gt; color
#</code></pre>
<p>So let's get down to it. What do we need to make a thing? Well, I want it to be semi-fancy (as you may have noticed already), so we're going to need to write a <code><a href="http://docs.racket-lang.org/search/index.html?q=macro">macro</a></code>. Without it, we wouldn't be able to use values like <code>red</code>/<code>green</code>/<code>blue</code> without quoting them.</p>
<p>So here's a basic first version:</p>
<pre class="scheme"><code>; A very simple prototype based object system
(define-syntax make-thing
  (syntax-rules ()
    ; Add a key/value pair to a thing
    [(_ [k v] rest ...)
     (let ([thing (make-thing rest ...)])
       (hash-set! (thing-data thing) 'k v)
       thing)]
    ; Create an empty thing
    [(_)
     (new-thing (make-hasheq))]))</code></pre>
<p>Basically, this will set up a chain of setting <code>key</code>/<code>value</code> pairs down until the base case which creates the hash itself. We could also create the objects directly in one line with something like this:</p>
<pre class="scheme"><code>(define-syntax-rule (make-thing [k* v*] ...)
  (new-thing
   (for/hash ([k (in-list '(k* ...))]
              [v (in-list (list v* ...))])
     (values k v))))</code></pre>
<p>On the upside, that's much clearner, but on the downside it won't have the extra behavior that I'm going to add in just a moment (extending objects and inline procedure declarations).</p>
<p>So we have a basic system in place. Let's go ahead and write some quick setters/getters. These are actually really straight forward. At first, I wanted to have something where we could use un-quoted keys (which would require another macro), but that wouldn't allow us to pass variable values. So they're just functions. <code>thing-get</code> does allow for default values though, which should be helpful:</p>
<pre class="scheme"><code>; Access a value from a thing
(define (thing-get thing key [default (void)])
  (cond
    [(not (thing? thing))
     (error 'thing-get "~a is not a thing" thing)]
    [(or (not (void? default))
         (hash-has-key? (thing-data thing) key))
     (hash-ref (thing-data thing) key default)]
    [else
     (error 'thing-get "~a does not contain a value for ~a" thing 'key)]))

; Set a value in a thing
(define (thing-set! thing key val)
  (cond
    [(not (thing? thing))
     (error 'thing-set! "~a is not a thing" thing)]
    [else
     (hash-set! (thing-data thing) key val)]))</code></pre>
<p>Nothing much to see here, it all works just like those tests that I defined above.</p>
<p>The next feature I wanted to add was object extension. This is particularly important for a prototype-based system, so we wanted to get it right. Essentially, you can pass an thing as the first argument to <code>make-thing</code> which will copy the values from that thing to the new one before assign key/value pairs. This also lets us override values in a clean manner:</p>
<pre class="scheme"><code>; A very simple prototype based object system
(define-syntax make-thing
  (syntax-rules ()
    ; Add a key/value pair to a thing
    [(_ [k v] rest ...)
     (let ([thing (make-thing rest ...)])
       (hash-set! (thing-data thing) 'k v)
       thing)]
    [(_ base [k v] rest ...)
     (let ([thing (make-thing base rest ...)])
       (hash-set! (thing-data thing) 'k v)
       thing)]
    ; Create an empty thing
    [(_)
     (new-thing (make-hasheq))]
    ; Copy an existing thing
    [(_ base)
     (if (thing? base)
         (new-thing (hash-copy (thing-data base)))
         (error 'make-thing "~a is not a thing to extend" base))]))</code></pre>
<p>Having to duplicate the code between the first two cases is suboptimal, but I'm not sure how to fix it. Because matching will assign the first pair to <code>base</code> if it can, I kept getting infinite loops when I tried to combine the methods.</p>
<p>Now we can do things like this:</p>
<pre class="scheme"><code>&gt; (define color (make-thing [red 0] [green 0] [blue 0]))
&gt; (define red (make-thing color [red 255]))
&gt; (thing-get red 'red)
255
&gt; (thing-get color 'red)
0</code></pre>
<p>That right there would be enough for what I have in mind. We have a full prototype-based system and methods to make getting/setting data easier. But there's one more trick I have up my sleeve. Like Racket's <code><a href="http://docs.racket-lang.org/search/index.html?q=classes">classes</a></code>, I want to have a special syntax for calling methods. I want to be able to do this:</p>
<pre class="scheme"><code>&gt; (define chatterbox (make-thing [(talk name) (format "~a says hello world!" name)]))
&gt; (thing-call chatterbox 'talk "steve")
"steve says hello world!"</code></pre>
<p>Instead of things like this:</p>
<pre class="scheme"><code>&gt; (define chatterbox (make-thing [talk (lambda (name) (format "~a says hello world!" name))]))
&gt; ((thing-get chatterbox 'talk) "steve")
"steve says hello world!"</code></pre>
<p>Although optimally, the two methods can be used interchangeably, internally the former syntax should be converted into the latter. How do we do it? Well, add more to <code>make-thing</code>!</p>
<pre class="scheme"><code>; A very simple prototype based object system
(define-syntax make-thing
  (syntax-rules ()
    ; Create an empty thing, bind a function
    [(_ [(k arg* ...) body* ...] rest ...)
     (let ([thing (make-thing rest ...)])
       (hash-set! (thing-data thing) 'k
                  (lambda (arg* ...)
                    body* ...))
       thing)]
    [(_ base [(k arg* ...) body* ...] rest ...)
     (let ([thing (make-thing base rest ...)])
       (hash-set! (thing-data thing) 'k
                  (lambda (arg* ...)
                    body* ...))
       thing)]
    ; Add a key/value pair to a thing
    [(_ [k v] rest ...)
     (let ([thing (make-thing rest ...)])
       (hash-set! (thing-data thing) 'k v)
       thing)]
    [(_ base [k v] rest ...)
     (let ([thing (make-thing base rest ...)])
       (hash-set! (thing-data thing) 'k v)
       thing)]
    ; Create an empty thing
    [(_)
     (new-thing (make-hasheq))]
    ; Copy an existing thing
    [(_ base)
     (if (thing? base)
         (new-thing (hash-copy (thing-data base)))
         (error 'make-thing "~a is not a thing to extend" base))]))</code></pre>
<p>Finally, we have everything we want. Now we have a short form for procedures in things as an analogue to the short form of <code><a href="http://docs.racket-lang.org/search/index.html?q=define">define</a></code>.</p>
<p>And <code>thing-call</code> is straightforward enough:</p>
<pre class="scheme"><code>; Call a function stored in a thing
(define (thing-call thing key . args)
  (cond
    [(not (thing? thing))
     (error 'thing-call "~a is not a thing" thing)]
    [(thing-get thing key #f)
     =&gt; (lambda (f)
          (if (procedure? f)
              (apply f args)
              (error 'thing-call "~a is not a procedure in ~a, it is ~a"
                     key thing f)))]
    [else
     (error 'thing-get "~a does not contain a value for ~a" thing 'key)]))</code></pre>
<p>Have I mentioned before how much I like the <code>=></code> form of <code>cond</code>?</p>
<p>One last note, what about <code>define-thing</code>? It's a direct merge of <code>define</code> and <code>make-thing</code>.</p>
<pre class="scheme"><code>; Combine define and make-thing
(define-syntax-rule (define-thing name arg* ...)
  (define name (make-thing arg* ...)))</code></pre>
<p>Scheme macros are particularly pleasant.</p>
<p>That's it. Now we have a fairly stable prototype system. Since it's backed by a <code>hasheq</code>, it should be relatively quick as well.</p>
<p>If you'd like to download/use the code, you can do so here: - <a href="https://github.com/jpverkamp/thing" title="thing on GitHub">thing source on GitHub</a></p>
<p>It also makes use of the recently discovered (to me) <code>(module test+ ...)</code> behind the scenes. It lets you write testing cases that won't even be compiled unless you specifically need them. Read more about it here: <code><a href="http://docs.racket-lang.org/search/index.html?q=Main and Test Submodules">Main and Test Submodules</a></code></p>
                </div>
                <div class="entry-footnotes">
                        <div id="footnotes"><ol></ol></div>
                </div>

                <div id="disqus_thread"></div>
<script type="text/javascript">
var disqus_shortname = "jverkamp";
var disqus_title = "A prototype object system for Racket";
var disqus_url = "http://blog.jverkamp.com/2013/04/18/a-prototype-object-system-for-racket/";
/* * * DON'T EDIT BELOW THIS LINE * * */
(function() {
  var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
  dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js';
  (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
})();
</script>
<noscript>Please enable JavaScript to view the <a href="http://disqus.com/?ref_noscript">comments powered by Disqus.</a></noscript>
<a href="http://disqus.com" class="dsq-brlink">comments powered by <span class="logo-disqus">Disqus</span></a>
        </article>

        <footer class="container" role="contentinfo">
                <nav class="navbar navbar-default" role="navigation"><ul class="nav navbar-nav nav-justified"><li><a href="http://jpverkamp.github.io/2013/04/16/adventures-in-optimization-re-typed-racket">← Adventures in optimization, re: Typed Racket</a></li><li><a href="http://jpverkamp.github.io/category/archives">Archives</a></li><li><a href="http://jpverkamp.github.io/2013/04/18/racket-roguelike-3-rats-rats-everywhere">Racket Roguelike 3: Rats, rats, everywhere! →</a></li></ul><ul class="nav navbar-nav nav-justified"><li><a href="http://jpverkamp.github.io/2013/04/16/adventures-in-optimization-re-typed-racket">← Adventures in optimization, re: Typed Racket</a></li><li><a href="http://jpverkamp.github.io/category/programming">Programming</a></li><li><a href="http://jpverkamp.github.io/2013/04/18/racket-roguelike-3-rats-rats-everywhere">Racket Roguelike 3: Rats, rats, everywhere! →</a></li></ul></nav>

                <div class="legal">
                        All posts unless otherwise mentioned are licensed under <a rel="license" href="http://creativecommons.org/licenses/by-nc-sa/3.0/deed.en_US"><img alt="Creative Commons License" style="border-width:0" src="http://i.creativecommons.org/l/by-nc-sa/3.0/80x15.png" /></a><br />
                        Any source code unless otherwise mentioned is licensed under the <a href="http://directory.fsf.org/wiki/License:BSD_3Clause">3 clause BSD license</a>
                </div>
        </footer>
</body>
</html>