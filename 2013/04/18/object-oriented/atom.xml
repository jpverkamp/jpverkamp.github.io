<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Object Oriented on jverkamp.com</title><link>https://blog.jverkamp.com/2013/04/18/object-oriented/</link><description>Recent content in Object Oriented on jverkamp.com</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Thu, 18 Apr 2013 00:00:11 +0000</lastBuildDate><atom:link href="https://blog.jverkamp.com/2013/04/18/object-oriented/atom.xml" rel="self" type="application/rss+xml"/><item><title>A prototype object system for Racket</title><link>https://blog.jverkamp.com/2013/04/18/a-prototype-object-system-for-racket/</link><pubDate>Thu, 18 Apr 2013 00:00:11 +0000</pubDate><guid>https://blog.jverkamp.com/2013/04/18/a-prototype-object-system-for-racket/</guid><description>&lt;p>As I seem to be &lt;a href="https://blog.jverkamp.com/2013/04/11/perlin-and-simplex-noise-in-racket/">wont to do&lt;/a>, I needed something to work on my &lt;a href="https://blog.jverkamp.com/2013/04/04/racket-roguelike-1-a-gui-screens-i/o-and-you/">Roguelike in Racket&lt;/a> tutorial series&amp;ndash;so I wrote it! This time, we&amp;rsquo;re looking to add a &lt;a href="https://en.wikipedia.org/wiki/Prototype-based%20programming">prototyped-based object system&lt;/a> to Racket. I&amp;rsquo;m sure that someone has rigged up something similar before, but it&amp;rsquo;s often more interesting to work things like this out for oneself.&lt;/p></description></item></channel></rss>