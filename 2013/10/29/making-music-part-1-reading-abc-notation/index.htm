<!DOCTYPE html>
<html>
<head>
        
        

        <title>Making music, part 1: Reading ABC notation | jverkamp.com | John-Paul Verkamp</title>

        <script src="//ajax.googleapis.com/ajax/libs/jquery/1.11.0/jquery.min.js"></script>

        <script src="//code.jquery.com/ui/1.11.1/jquery-ui.min.js"></script>

        <link rel="stylesheet" href="//netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css" />
        <link rel="stylesheet" href="//netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap-theme.min.css" />
        <script src="//netdna.bootstrapcdn.com/bootstrap/3.1.1/js/bootstrap.min.js"></script>

        <link rel="stylesheet" href="//cdnjs.cloudflare.com/ajax/libs/ekko-lightbox/3.0.3a/ekko-lightbox.min.css" />
        <script src="//cdnjs.cloudflare.com/ajax/libs/ekko-lightbox/3.0.3a/ekko-lightbox.min.js"></script>

        <script src="//cdnjs.cloudflare.com/ajax/libs/jquery.transit/0.9.9/jquery.transit.min.js"></script>

        <!-- Highlight.js for syntax highlighting -->
        <link rel="stylesheet" href="/highlight/styles/obsidian.css" />
        <script src="/highlight/highlight.pack.js"></script>

        <!-- MathJax for LaTeX support -->
        <script src="//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML"></script>

        <!-- nanoGallery for Flickr Galleries -->
        <link rel="stylesheet" href="//cdnjs.cloudflare.com/ajax/libs/nanogallery/4.4.2/css/themes/light/nanogallery_light.css" />
        <script type="text/javascript" src="//cdnjs.cloudflare.com/ajax/libs/nanogallery/4.4.2/jquery.nanogallery.min.js"></script>

        <!-- Pretty pretty fonts -->
        <link rel="stylesheet" type="text/css" href="//fonts.googleapis.com/css?family=Calligraffitti" />

        <!-- Any custom CSS or JS that I've written; this should be kept minimal -->
        <link rel="stylesheet" href="/custom.css" />
        <script src="/custom.js"></script>

        <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
        <link rel="alternate" type="application/atom+xml" title="jverkamp.com (Atom 2.0)" href="http://blog.jverkamp.com/feed/" />
</head>
<body>
        <header class="container">
        <nav class="navbar navbar-default" role="navigation">
  <div class="container-fluid">
    <!-- Brand and toggle get grouped for better mobile display -->
    <div class="navbar-header">
      <button type="button" class="navbar-toggle" data-toggle="collapse" data-target="#bs-example-navbar-collapse-1">
        <span class="sr-only">Toggle navigation</span>
        <span class="icon-bar"></span>
        <span class="icon-bar"></span>
        <span class="icon-bar"></span>
      </button>
      <a class="navbar-brand" href="http://blog.jverkamp.com"><span style="color: green;">jv</span>erkamp.com</a>
    </div>

    <!-- Collect the nav links, forms, and other content for toggling -->
    <div class="collapse navbar-collapse" id="bs-example-navbar-collapse-1">
      <ul class="nav navbar-nav"><li class="dropdown"><a href="http://blog.jverkamp.com/category/archives" class="dropdown-toggle">Archives<span class="caret"></span></a><ul class="dropdown-menu"><li><a href="http://blog.jverkamp.com/category/archives/2004">2004</a></li><li><a href="http://blog.jverkamp.com/category/archives/2005">2005</a></li><li><a href="http://blog.jverkamp.com/category/archives/2006">2006</a></li><li><a href="http://blog.jverkamp.com/category/archives/2007">2007</a></li><li><a href="http://blog.jverkamp.com/category/archives/2008">2008</a></li><li><a href="http://blog.jverkamp.com/category/archives/2009">2009</a></li><li><a href="http://blog.jverkamp.com/category/archives/2010">2010</a></li><li><a href="http://blog.jverkamp.com/category/archives/2011">2011</a></li><li><a href="http://blog.jverkamp.com/category/archives/2012">2012</a></li><li><a href="http://blog.jverkamp.com/category/archives/2013">2013</a></li><li><a href="http://blog.jverkamp.com/category/archives/2014">2014</a></li><li><a href="http://blog.jverkamp.com/category/archives/2015">2015</a></li></ul></li><li class="dropdown"><a href="http://blog.jverkamp.com/category/other" class="dropdown-toggle">Other<span class="caret"></span></a><ul class="dropdown-menu"><li><a href="http://blog.jverkamp.com/category/other/board-game-reviews">Board Game Reviews</a></li><li><a href="http://blog.jverkamp.com/category/other/book-reviews">Book Reviews</a></li><li><a href="http://blog.jverkamp.com/category/other/cooking">Cooking</a></li><li><a href="http://blog.jverkamp.com/category/other/movie-reviews">Movie Reviews</a></li></ul></li><li class="dropdown"><a href="http://blog.jverkamp.com/category/photography" class="dropdown-toggle">Photography<span class="caret"></span></a><ul class="dropdown-menu"><li><a href="http://blog.jverkamp.com/category/photography/dp-challenge">DP Challenge</a></li><li><a href="http://blog.jverkamp.com/category/photography/photosets">Photosets</a></li><li><a href="http://blog.jverkamp.com/category/photography/photosynth">Photosynth</a></li></ul></li><li class="dropdown"><a href="http://blog.jverkamp.com/category/programming" class="dropdown-toggle">Programming<span class="caret"></span></a><ul class="dropdown-menu"><li><a href="http://blog.jverkamp.com/category/programming/by-language">By Language</a></li><li><a href="http://blog.jverkamp.com/category/programming/by-project">By Project</a></li><li><a href="http://blog.jverkamp.com/category/programming/by-source">By Source</a></li><li><a href="http://blog.jverkamp.com/category/programming/by-topic">By Topic</a></li><li><a href="http://blog.jverkamp.com/category/programming/libraries">Libraries</a></li></ul></li><li class="dropdown"><a href="http://blog.jverkamp.com/category/research" class="dropdown-toggle">Research<span class="caret"></span></a><ul class="dropdown-menu"><li><a href="http://blog.jverkamp.com/category/research/by-topic">By Topic</a></li><li><a href="http://blog.jverkamp.com/category/research/publications">Publications</a></li></ul></li><li class="dropdown"><a href="http://blog.jverkamp.com/category/writing" class="dropdown-toggle">Writing<span class="caret"></span></a><ul class="dropdown-menu"><li><a href="http://blog.jverkamp.com/category/writing/by-genre">By Genre</a></li><li><a href="http://blog.jverkamp.com/category/writing/ideas">Ideas</a></li><li><a href="http://blog.jverkamp.com/category/writing/nanowrimo">NaNoWriMo</a></li><li><a href="http://blog.jverkamp.com/category/writing/novels">Novels</a></li><li><a href="http://blog.jverkamp.com/category/writing/other">Other</a></li><li><a href="http://blog.jverkamp.com/category/writing/short-stories">Short Stories</a></li><li><a href="http://blog.jverkamp.com/category/writing/writing-excuses">Writing Excuses</a></li></ul></li></ul>

      <form action="http://www.google.com/search" method="get" onSubmit="(function(obj){obj.q.value='site:blog.jverkamp.com '+obj.qfront.value;})(this)" class="navbar-form navbar-right" role="search">
        <div class="form-group">
          <input name="q" type="hidden" />
          <input name="qfront" type="text" class="form-control" placeholder="Search" />
          <button type="submit" class="btn btn-default" value="Search">Search</button>
        </p>
      </form>
    </div><!-- /.navbar-collapse -->
  </div><!-- /.container-fluid -->
</nav>
        </header>

        <article class="container">
                <header>
                        <h1 class="entry-title">Making music, part 1: Reading ABC notation</h1>

                        <div class="entry-meta">
                                <span class="posted-on"><time class="entry-date" datetime="2013-10-29"><span class="year">2013</span> <span class="month">Oct</span> <span class="day">29</span></time></span>
                                <span class="tags"><ul class="tag-list list-inline"><li><a href="http://blog.jverkamp.com/category/programming/by-topic/file-formats/abc-notation">ABC Notation</a></li><li><a href="http://blog.jverkamp.com/category/programming/by-topic/audio">Audio</a></li><li><a href="http://blog.jverkamp.com/category/programming/by-topic/programming-languages/lexing">Lexing</a></li><li><a href="http://blog.jverkamp.com/category/programming/by-topic/music">Music</a></li><li><a href="http://blog.jverkamp.com/category/programming/by-topic/programming-languages/parsing">Parsing</a></li><li><a href="http://blog.jverkamp.com/category/programming">Programming</a></li><li><a href="http://blog.jverkamp.com/category/programming/by-topic/programming-languages">Programming Languages</a></li><li><a href="http://blog.jverkamp.com/category/programming/by-language/racket">Racket</a></li><li><a href="http://blog.jverkamp.com/category/programming/by-language/scheme">Scheme</a></li></ul></span>
                        </div>

                        <hr />
                </header>
                <div class="entry-content">
                        <p>It's been a bit since I've had time to post<span class="footnote"><sup><a href="#footnote-1">[1]</a></sup></span>, but I've got an interesting new project that I've been working on. It's a bit more complicated, ergo spread out over a few posts, but those tend to be the more interesting posts anyway, eh?</p>
<p>The basic idea is that I want to be able to write and play music in Racket. One end goal would be to make a library available for the C211 class to give them something else to work with (in addition to <a href="blog.jverkamp.com/wombat-ide/c211-image-api/">images</a> and <a href="blog.jverkamp.com/wombat-ide/c211-turtle-api/">turtles</a>). To that end, here's my current plan of attack<span class="footnote"><sup><a href="#footnote-2">[2]</a></sup></span>:</p>
<ul>
        <li>Write a <a href="https://en.wikipedia.org/wiki/lexer">Lexical analysis</a> for <a href="https://en.wikipedia.org/wiki/ABC_notation">ABC notation</a> to turn raw text into a list of tokens</li>
        <li>Write a parser to turn those tokens into a song (for example dealing with the interactions between key signature/accidentals and meter/note duration)</li>
        <li>Use the <a href="http://pkg.racket-lang.org/#[rsound]">rsound</a> library on <a href="http://pkg.racket-lang.org/">Planet2 / pkg</a> to play back individuals notes and chords</li>
        <li>Tie it all together to play a parsed song in ABC notation using the rsound library</li>
        <li><em>(maybe)</em>: Use the rsound library to save ABC files as WAV audio</li>
        <li><em>(maybe)</em>: Figure out the format and save ABC files as MIDI</li>
        <li><em>(maybe)</em>: Render songs as music sheets/li>
</ul>
<p>Sounds like fun! Let's get started.</p>
<!--more-->
<p>First, we need to build a lexer. I've seen Racket's <code><a href="http://docs.racket-lang.org/search/index.html?q=parser-tools/lex">parser-tools/lex</a></code> module before, but I've never had the chance to try it out. No time like the present.</p>
<p>The format for creating a lexer looks like this:</p>
<pre class="scheme"><code>(lexer [trigger action-expr] ...)</code></pre>
<p>You have a series of trigger / action pairs. For each of the triggers, you have a regular expression written as s-expressions. One such extension that looks a lot like the standard regex patterns we all known and love is <code><a href="http://docs.racket-lang.org/search/index.html?q=parser-tools/lex-sre">parser-tools/lex-sre</a></code>. With that you could write something like this to match simple mathematical expressions:</p>
<pre class="scheme"><code>(require parser-tools/lex
         (prefix-in : parser-tools/lex-sre))

(define math-lexer
  (lexer
   [(:+ numeric) (string-&gt;number lexeme)]
   [#\+ 'PLUS]
   [#\* 'TIMES]
   [whitespace   (math-lexer input-port)]))</code></pre>
<p>There are a few interesting things here:</p>
<ul>
        <li>The <code>lex-sre</code> module is prefixed with <code>:</code>. Since it exports functions like <code>*</code> and <code>+</code>, this prevents conflicts with Racket's operators of the same name(s).</li>
        <li>In the first line, we match one or more digits. Several character identifiers (such as <code>numeric</code> are pre-defined.</li>
        <li>On that same line, we use on of the built in identifiers bound within the action parts: lexeme. This is the string that was matched by the trigger.</li>
        <li>The next two lines are simple tokens. If you had more information you could use a 'heavier' data structure (I'll be doing this later).</li>
        <li>The last line matches against any whitespace character. We just want to ignore it, so we use another variable defined for us (input-port) to recursively call the lexer and move ahead.</li>
</ul>
<p>Once you have all of this, <code>math-lexer</code> is a function that takes a single parameter: an input port. It will then read off a single token. To make it read more than one, you need a fairly simple wrapper:</p>
<pre class="scheme"><code>(define (lex lexer in)
  (for/list ([token (in-port lexer in)]
             #:break (eq? token 'eof))
    token))</code></pre>
<p>This says to read until we get an <code>'eof</code> (provided by <code>lexer</code> by default), wrapping everything into a list. Here's it in action:</p>
<pre class="scheme"><code>&gt; (call-with-input-string "8 + 7 * 6 + 5"
    (curry lex math-lexer))
'(8 PLUS 7 TIMES 6 PLUS 5)</code></pre>
<p>All <code>curry</code> does is provide the first argument (the lexer) and returning a function that takes only the input port (which <code>call-with-input-string</code>) expects. With this basic framework, we should be able to build some rather complicated constructs.</p>
<p>All right, let's get to ABC notation. For the next bit, I'm just going to show each lexer pattern in turn with a short explanation between each. You can see the entire code <a href="https://github.com/jpverkamp/abc/">here</a> or just copy paste them into a lexer body (like the example above) to try them out yourself.</p>
<p>To see what we're dealing with, here's a sample ABC file for Greensleeves:</p>
<pre class="css"><code>X:0994
T:"Green Sleeves"
C:Unattributed
B:O'Neill's Music Of Ireland (The 1850) Lyon & Healy, Chicago, 1903 edition
Z:FROM O'NEILL'S TO NOTEWORTHY, FROM NOTEWORTHY TO ABC, MIDI AND .TXT BY VINCE BRENNAN July 2003 (HTTP://WWW.SOSYOURMOM.COM)
I:abc2nwc
M:6/8
L:1/8
K:C
(A/2B/2|c2)c cde|dBG GAB|cBA ABc|BGE E2(A/2B/2|
c2)c cde|dBG GAB|cBA GE^G|A3A2:|
|:(e/2^f/2|g)ag gfe|dBG GBd|aba aba|gee e2(e/2^f/2|
g)ag gfe|dBG GAB|cBA GE^G|A3A2:|</code></pre>
<p>The first thing to note is a series of character + colon + text lines at the beginning. These form the header section of the piece and include such information as the <em>T</em>title, <em>C</em>omposer, <em>M</em>eter (time signature), <em>K</em>ey, and default note <em>L</em>ength. For the moment, we're not going to try to parse the information we need out of these, just recognize them and wrap them up in a struct:</p>
<pre class="scheme"><code>; Header lines / inline headers
[(:or (:: (:/ "AZ") #\: (:* whitespace) (:* (:~ #\newline)) (:* whitespace) (:? #\newline))
      (:: #\[ (:/ "AZ") #\: (:* whitespace) (:* (:~ #\])) (:* whitespace) #\]))
 (token-header lexeme)]</code></pre>
<p>Originally I was pulling these apart here as well, but that's really the job of the parser, so I'll just go back to lexing them now. For that matter, I could have lexed the header keys and values differently, but I do think they should be treated as a single unit. As a side note, you might be wondering where <code>token-header</code> came from. It actually comes from the <code><a href="http://docs.racket-lang.org/search/index.html?q=define-tokens">define-tokens</a></code> function in <code>parser-tools/lex</code>:</p>
<pre class="scheme"><code>(define-tokens abc
  (header pitch duration text comment ending))</code></pre>
<p>Each of these tokens will be a structure with a <code>token-id</code> (set by the name, so <code>header</code>, <code>pitch</code>, etc. and <code>token-value</code>. For these, I'll just be using the string values that we parse. We can make more sense of them later this week with the parser. In addition to these tokens, we also have a set of 'empty' tokens--simpler tokens without any variation:</p>
<pre class="scheme"><code>(define-empty-tokens abc-empty
  (tie
   chord-start chord-end
   slur-start slur-end
   grace-start grace-end
   rest long-rest
   bar double-bar double-bar-start double-bar-end
   repeat-start repeat-end repeat-end-start
   break linebreak))</code></pre>
<p>So what does it look like to parse these headers?</p>
<pre class="scheme"><code>&gt; (call-with-input-file "greensleeves.abc" (curry lex abc-lexer))
(list
 (token 'header "X:0994\n")
 (token 'header "T:\"Green Sleeves\"\n")
 (token 'header "C:Unattributed\n")
 ...)</code></pre>
<p>Looks sensible thus far.</p>
<p>As you may have noticed though, there were actually two options in the header definition. On continued for a whole line, the other was in square brackets. It turns out that the latter is for changing things like the meter or key signature within a song. I'm sure there are other uses, but those again we can deal with as we parse various songs.</p>
<p>After the headers, the next target is notes. Notes are relatively straight forward and can have up to three parts: accidentals, pitch, and octave. The accidental is <code>^</code> or <code>^^</code> for sharps and double sharps and likewise <code>_</code> or <code>__</code> for flats. Naturals are <code>=</code>. The pitch is just a letter <code>a-g</code> or <code>A-G</code> (capital letters <code>C-B</code> start at middle C while lower case <code>c-b</code> are the octave below that. If you want more range, each <code>'</code> at the end will raise an octave and each <code>,</code> will lower it.</p>
<p>Here are a few example notes:</p>
<pre class="scheme"><code>C = middle C
^f = f sharp below middle C
_b,, = b flat three octaves below middle C
^^E', = e double sharp (so f sharp) just above middle C, the comma and apostrophe cancel out</code></pre>
<p>There are a lot of combinations that don't really make much sense, but then again there are a lot of ... interesting ... composers out there that use them. So we're better off safe than sorry. Here's how I'm lexing these:</p>
<pre class="scheme"><code>; Pitches
[(:: (:? (:or "^^" "^" "__" "_" "="))
     (:/ "agAG")
     (:* (:or "'" ",")))
 (token-pitch lexeme)]</code></pre>
<p>Straight forward enough. It will be interesting to parse these when we get that far, but it shouldn't be too hard. Especially because at that point we'll have context information so we can also take into account the keysignature.</p>
<p>After that, we're almost through the complicated cases. Next, we have timing information. Essentially, the <code>L</code>ength header sets the default length for notes, but a song made of a single length wouldn't be very interesting, now would it<span class="footnote"><sup><a href="#footnote-3">[3]</a></sup></span>? So after any pitch, we can have a length. This will consist essentially of any rational number (fraction):</p>
<pre class="scheme"><code>; Timing information
[(:or (:: (:+ numeric) (:+ #\/) (:+ numeric))
      (:: (:+ #\/) (:+ numeric))
      (:+ numeric)
      (:+ #\/))
 (token-duration lexeme)]</code></pre>
<p>Here there are several parts. You can write a full fraction like <code>1/2</code> to get a note half as long as the duration or you can write a whole number like <code>2</code> to get one twice as long. Alternatively, you can leave out the first number for a fraction, just so long as you want 1 over something (so <code>1/2</code> could be written as <code>/2</code>). Even better, if you want to just write  a slash, it's equivalent to <code>1/2</code>. Two slashes is <code>1/4</code>.</p>
<p>With these, we should be able to lex note/duration pairs (I'll do the definition of the bar lines soon):</p>
<pre class="scheme"><code>&gt; (call-with-input-string "A/2B/2|c2" (curry lex abc-lexer))
(list
 (token 'pitch "A")
 (token 'duration "/2")
 (token 'pitch "B")
 (token 'duration "/2")
 'bar
 (token 'pitch "c")
 (token 'duration "2"))</code></pre>
<p>We'll put the pitch/duration pairs back together in the next step.</p>
<p>Now we've got the hard stuff out of the way, most of what's left is single character or short strings. For example, we have bar lines. These are almost as simple as the above, but since each has it's own meaning we'll wrap them up in a structure. I may change this when I get to parsing if it's not working out, but it makes sense for the time being.</p>
<pre class="scheme"><code>; Bar lines
["||" (token-double-bar)]
["[|" (token-double-bar-start)]
["|]" (token-double-bar-end)]
["|:" (token-repeat-start)]
[":|" (token-repeat-end)]
[(:or ":|:" "::") (token-repeat-end-start)]
["|"  (token-bar)]</code></pre>
<p>After that, we have chords, slurs, and grace notes in square bracket, parentheses, and  curvy brackets respectively. Also dashes as ties and z (lower or capital) as various rests. Since none of these is associated with additional information, we'll just use straight forward symbols:</p>
<pre class="scheme"><code>; Simple tokens
[#\- (token-tie)]
[#\[ (token-chord-start)] [#\] (token-chord-end)]
[#\( (token-slur-start)]  [#\) (token-slur-end)]
[#\{ (token-grace-start)] [#\} (token-grace-end)]
[#\z (token-rest)]        [#\Z (token-long-rest)]</code></pre>
<p>We're going to have to pair the various brackets at some point (read: in the parser), but this is all we need in a lexer.</p>
<p>Finally, we have notes or chord marks for a guitar which will be placed with the song when rendered but that we can mostly ignore. These are in the same format that double quoted strings are in just about every language, so they're pretty easy to parse:</p>
<pre class="scheme"><code>; Text / guitar chords
[(:: #\" (:* (:or (:: #\\ any-char) (:~ #\"))) #\")
 (token-text (string-trim lexeme "\""))]</code></pre>
<p>Next we have comments. ABC notation allows for line comments which have the same format as any other, using <code>%</code> as the comment character and running to the end of the line. The closing newline is optional since we may have a comment at the end of the file.</p>
<pre class="scheme"><code>; Line comments
[(:: #\% (:* (:~ #\newline)))
 (token-comment lexeme)]</code></pre>
<p>And finally whitespace. In the math example we could just ignore this. Here we could as well if we were just playing music, but it's possible that I may try to render the music as well (and then the breaks matter). So we'll leave it in the lexer and ignore it sometimes later. One caveat is that if there's a <code>\</code> at the end of a line, we should treat it as a normal break rather than a linebreak (for formatting purposes). That may be important later.</p>
<pre class="scheme"><code>; Whitespace breaks notes sharing a bar (\ continues lines, so treat as a normal break)
[(:or (:: #\\ (:* whitespace))
      (:+ whitespace))
 (abc-lexer input-port)]

; Newlines break lines in output as well (unless escaped with \, see above)
[#\newline (token-linebreak)]))</code></pre>
<p>And that's all we need. This is enough to lex the Greensleeves example we had above:</p>
<pre class="scheme"><code>&gt; (call-with-input-file "greensleeves.abc" (curry lex abc-lexer))
(list
 (token 'header "X:0994\n")
 ...
 (token 'header "K:C\n")
 'slur-start
 (token 'pitch "A")
 (token 'duration "/2")
 (token 'pitch "B")
 (token 'duration "/2")
 'bar
 ...
 'bar
 (token 'pitch "A")
 (token 'duration "3")
 (token 'pitch "A")
 (token 'duration "2")
 'repeat-end)</code></pre>
<p>Looks like something we can work with! Later this week (if all goes well), I'll work on a parser that can turn those notes and timings along with the headers into an actual sequence of notes to play.</p>
<p>As always, the entire code for this project is / will be available on GitHub: <a href="https://github.com/jpverkamp/abc/">jpverkamp / abc</a>. If you check it out between now and when I next post, you might even get a sneak peak at the parser<span class="footnote"><sup><a href="#footnote-4">[4]</a></sup></span>. <img alt="smile" class="emoji" src="/emoji/smile.svg" /></p>
                </div>
                <div class="entry-footnotes">
                        <div id="footnotes"><ol><li><a name="footnote-1"></a>Moving across the country will do that...</li><li><a name="footnote-2"></a>Although it's been said "no battle plan survives contact with the enemy" -- <a href="https://en.wikipedia.org/wiki/Helmuth_von Moltke">Helmuth von Moltke the Elder</a></li><li><a name="footnote-3"></a>Yes, I'm sure there are many, many counter examples...</li><li><a name="footnote-4"></a>Assuming of course that I don't write it the night before as I'm wont to do</li></ol></div>
                </div>

                <div id="disqus_thread"></div>
<script type="text/javascript">
var disqus_shortname = "jverkamp";
var disqus_title = "Making music, part 1: Reading ABC notation";
var disqus_url = "http://blog.jverkamp.com/2013/10/29/making-music-part-1-reading-abc-notation/";
/* * * DON'T EDIT BELOW THIS LINE * * */
(function() {
  var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
  dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js';
  (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
})();
</script>
<noscript>Please enable JavaScript to view the <a href="http://disqus.com/?ref_noscript">comments powered by Disqus.</a></noscript>
<a href="http://disqus.com" class="dsq-brlink">comments powered by <span class="logo-disqus">Disqus</span></a>
        </article>

        <footer class="container" role="contentinfo">
                <nav class="navbar navbar-default" role="navigation"><ul class="nav navbar-nav nav-justified"><li><a href="http://blog.jverkamp.com/2013/10/12/don-jon">← Don Jon</a></li><li><a href="http://blog.jverkamp.com/category/archives">Archives</a></li><li><a href="http://blog.jverkamp.com/2013/11/03/gravity">Gravity →</a></li></ul><ul class="nav navbar-nav nav-justified"><li><a href="http://blog.jverkamp.com/2013/10/09/functions-as-lists">← Functions as lists</a></li><li><a href="http://blog.jverkamp.com/category/programming">Programming</a></li><li><a href="http://blog.jverkamp.com/2013/11/07/making-music-part-2-taking-shape">Making music, part 2: Taking shape →</a></li></ul></nav>

                <div class="legal">
                        <a href="http://blog.jverkamp.com/feed/atom.xml">feed <img style="border: 0;" src="http://blog.jverkamp.com/rss.png" /></a><br />
                        All posts unless otherwise mentioned are licensed under <a rel="license" href="http://creativecommons.org/licenses/by-nc-sa/3.0/deed.en_US"><img alt="Creative Commons License" style="border-width:0" src="http://i.creativecommons.org/l/by-nc-sa/3.0/80x15.png" /></a><br />
                        Any source code unless otherwise mentioned is licensed under the <a href="http://directory.fsf.org/wiki/License:BSD_3Clause">3 clause BSD license</a>
                </div>
        </footer>

<script>
(function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
(i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
})(window,document,'script','//www.google-analytics.com/analytics.js','ga');

ga('create', 'UA-53688146-1', 'auto');
ga('send', 'pageview');
</script>
</body>
</html>