<!DOCTYPE html>
<html>
<head>
        
        

        <title>Making music, part 3: Making noise | jverkamp.com | John-Paul Verkamp</title>

        <script src="//ajax.googleapis.com/ajax/libs/jquery/1.11.0/jquery.min.js"></script>

        <script src="//code.jquery.com/ui/1.11.1/jquery-ui.min.js"></script>

        <link rel="stylesheet" href="//netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css" />
        <link rel="stylesheet" href="//netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap-theme.min.css" />
        <script src="//netdna.bootstrapcdn.com/bootstrap/3.1.1/js/bootstrap.min.js"></script>

        <link rel="stylesheet" href="//cdnjs.cloudflare.com/ajax/libs/ekko-lightbox/3.0.3a/ekko-lightbox.min.css" />
        <script src="//cdnjs.cloudflare.com/ajax/libs/ekko-lightbox/3.0.3a/ekko-lightbox.min.js"></script>

        <script src="//cdnjs.cloudflare.com/ajax/libs/jquery.transit/0.9.9/jquery.transit.min.js"></script>

        <!-- Highlight.js for syntax highlighting -->
        <link rel="stylesheet" href="/highlight/styles/obsidian.css" />
        <script src="/highlight/highlight.pack.js"></script>

        <!-- MathJax for LaTeX support -->
        <script src="//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML"></script>

        <!-- nanoGallery for Flickr Galleries -->
        <link rel="stylesheet" href="//cdnjs.cloudflare.com/ajax/libs/nanogallery/4.4.2/css/themes/light/nanogallery_light.css" />
        <script type="text/javascript" src="//cdnjs.cloudflare.com/ajax/libs/nanogallery/4.4.2/jquery.nanogallery.min.js"></script>

        <!-- Pretty pretty fonts -->
        <link rel="stylesheet" type="text/css" href="//fonts.googleapis.com/css?family=Calligraffitti" />

        <!-- Any custom CSS or JS that I've written; this should be kept minimal -->
        <link rel="stylesheet" href="/custom.css" />
        <script src="/custom.js"></script>

        <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
        <link rel="alternate" type="application/atom+xml" title="jverkamp.com (Atom 2.0)" href="http://blog.jverkamp.com/feed/" />
</head>
<body>
        <header class="container">
        <nav class="navbar navbar-default" role="navigation">
  <div class="container-fluid">
    <!-- Brand and toggle get grouped for better mobile display -->
    <div class="navbar-header">
      <button type="button" class="navbar-toggle" data-toggle="collapse" data-target="#bs-example-navbar-collapse-1">
        <span class="sr-only">Toggle navigation</span>
        <span class="icon-bar"></span>
        <span class="icon-bar"></span>
        <span class="icon-bar"></span>
      </button>
      <a class="navbar-brand" href="http://blog.jverkamp.com"><span style="color: green;">jv</span>erkamp.com</a>
    </div>

    <!-- Collect the nav links, forms, and other content for toggling -->
    <div class="collapse navbar-collapse" id="bs-example-navbar-collapse-1">
      <ul class="nav navbar-nav"><li class="dropdown"><a href="http://blog.jverkamp.com/category/archives" class="dropdown-toggle">Archives<span class="caret"></span></a><ul class="dropdown-menu"><li><a href="http://blog.jverkamp.com/category/archives/2004">2004</a></li><li><a href="http://blog.jverkamp.com/category/archives/2005">2005</a></li><li><a href="http://blog.jverkamp.com/category/archives/2006">2006</a></li><li><a href="http://blog.jverkamp.com/category/archives/2007">2007</a></li><li><a href="http://blog.jverkamp.com/category/archives/2008">2008</a></li><li><a href="http://blog.jverkamp.com/category/archives/2009">2009</a></li><li><a href="http://blog.jverkamp.com/category/archives/2010">2010</a></li><li><a href="http://blog.jverkamp.com/category/archives/2011">2011</a></li><li><a href="http://blog.jverkamp.com/category/archives/2012">2012</a></li><li><a href="http://blog.jverkamp.com/category/archives/2013">2013</a></li><li><a href="http://blog.jverkamp.com/category/archives/2014">2014</a></li><li><a href="http://blog.jverkamp.com/category/archives/2015">2015</a></li></ul></li><li class="dropdown"><a href="http://blog.jverkamp.com/category/other" class="dropdown-toggle">Other<span class="caret"></span></a><ul class="dropdown-menu"><li><a href="http://blog.jverkamp.com/category/other/board-game-reviews">Board Game Reviews</a></li><li><a href="http://blog.jverkamp.com/category/other/book-reviews">Book Reviews</a></li><li><a href="http://blog.jverkamp.com/category/other/cooking">Cooking</a></li><li><a href="http://blog.jverkamp.com/category/other/movie-reviews">Movie Reviews</a></li></ul></li><li class="dropdown"><a href="http://blog.jverkamp.com/category/photography" class="dropdown-toggle">Photography<span class="caret"></span></a><ul class="dropdown-menu"><li><a href="http://blog.jverkamp.com/category/photography/dp-challenge">DP Challenge</a></li><li><a href="http://blog.jverkamp.com/category/photography/photosets">Photosets</a></li><li><a href="http://blog.jverkamp.com/category/photography/photosynth">Photosynth</a></li></ul></li><li class="dropdown"><a href="http://blog.jverkamp.com/category/programming" class="dropdown-toggle">Programming<span class="caret"></span></a><ul class="dropdown-menu"><li><a href="http://blog.jverkamp.com/category/programming/by-language">By Language</a></li><li><a href="http://blog.jverkamp.com/category/programming/by-project">By Project</a></li><li><a href="http://blog.jverkamp.com/category/programming/by-source">By Source</a></li><li><a href="http://blog.jverkamp.com/category/programming/by-topic">By Topic</a></li><li><a href="http://blog.jverkamp.com/category/programming/libraries">Libraries</a></li></ul></li><li class="dropdown"><a href="http://blog.jverkamp.com/category/research" class="dropdown-toggle">Research<span class="caret"></span></a><ul class="dropdown-menu"><li><a href="http://blog.jverkamp.com/category/research/by-topic">By Topic</a></li><li><a href="http://blog.jverkamp.com/category/research/publications">Publications</a></li></ul></li><li class="dropdown"><a href="http://blog.jverkamp.com/category/writing" class="dropdown-toggle">Writing<span class="caret"></span></a><ul class="dropdown-menu"><li><a href="http://blog.jverkamp.com/category/writing/by-genre">By Genre</a></li><li><a href="http://blog.jverkamp.com/category/writing/ideas">Ideas</a></li><li><a href="http://blog.jverkamp.com/category/writing/nanowrimo">NaNoWriMo</a></li><li><a href="http://blog.jverkamp.com/category/writing/novels">Novels</a></li><li><a href="http://blog.jverkamp.com/category/writing/other">Other</a></li><li><a href="http://blog.jverkamp.com/category/writing/short-stories">Short Stories</a></li><li><a href="http://blog.jverkamp.com/category/writing/writing-excuses">Writing Excuses</a></li></ul></li></ul>

      <form action="http://www.google.com/search" method="get" onSubmit="(function(obj){obj.q.value='site:blog.jverkamp.com '+obj.qfront.value;})(this)" class="navbar-form navbar-right" role="search">
        <div class="form-group">
          <input name="q" type="hidden" />
          <input name="qfront" type="text" class="form-control" placeholder="Search" />
          <button type="submit" class="btn btn-default" value="Search">Search</button>
        </p>
      </form>
    </div><!-- /.navbar-collapse -->
  </div><!-- /.container-fluid -->
</nav>
        </header>

        <article class="container">
                <header>
                        <h1 class="entry-title">Making music, part 3: Making noise</h1>

                        <div class="entry-meta">
                                <span class="posted-on"><time class="entry-date" datetime="2013-11-12"><span class="year">2013</span> <span class="month">Nov</span> <span class="day">12</span></time></span>
                                <span class="tags"><ul class="tag-list list-inline"><li><a href="http://blog.jverkamp.com/category/programming/by-topic/file-formats/abc-notation">ABC Notation</a></li><li><a href="http://blog.jverkamp.com/category/programming/by-topic/audio">Audio</a></li><li><a href="http://blog.jverkamp.com/category/programming/by-topic/programming-languages/lexing">Lexing</a></li><li><a href="http://blog.jverkamp.com/category/programming/by-topic/music">Music</a></li><li><a href="http://blog.jverkamp.com/category/programming/by-topic/programming-languages/parsing">Parsing</a></li><li><a href="http://blog.jverkamp.com/category/programming">Programming</a></li><li><a href="http://blog.jverkamp.com/category/programming/by-topic/programming-languages">Programming Languages</a></li><li><a href="http://blog.jverkamp.com/category/programming/by-language/racket">Racket</a></li><li><a href="http://blog.jverkamp.com/category/programming/by-language/scheme">Scheme</a></li></ul></span>
                        </div>

                        <hr />
                </header>
                <div class="entry-content">
                        <p><a href="http://blog.jverkamp.com/2013/11/07/making-music-part-2-taking-shape">Last week</a> we parsed some music. That post was in a bit of a hurry, so we had to leave off a fair few important pieces (like ties and slurs for one; chords for a rather bigger one). We'll get to them soon, but for now we want to actually get something playing back.</p>
<!--more-->
<p>The main part of the story this time around will be <a href="https://github.com/jbclements">John Clement's</a> <a href="https://github.com/jbclements/RSound/tree/master/">rsound </a>package for Racket. With the new package system (and an adequately new version of Racket), installation is rather straightforward:</p>
<pre class="bash"><code>raco pkg install rsound</code></pre>
<p>This gives us a nice variety of methods for making music. For a quick overview, here's an older version of the documentation: <a href="http://planet.racket-lang.org/package-source/clements/rsound.plt/4/4/planet-docs/rsound/index.html">rsound docs</a>. I'm not sure where / if the new package manager has pre-built docs available, but installing it will build the documentation as well. Still, the API is essentially the same.</p>
<p>The first thing we need is to make a sound. We can use the <code>network</code> and <code>sine-wave</code> macros to generate a simple tone:</p>
<pre class="scheme"><code>(network ()
  [out (sine-wave 440)])</code></pre>
<p>(440 Hz is perhaps the easiest tone on a piano keyboard to remember, it's the A above middle C.)</p>
<p>If we want to play that back, we can do so with <code>signal->rsound</code> to make a note and <code>play</code> to play it back:</p>
<pre class="scheme"><code>(play
 (signal-&gt;rsound
  44100
  (network ()
    [out (sine-wave 440)])))</code></pre>
<p>44100 is the number of frames to generate. Given the default parameters, that will be a one second long sound. Go ahead and give that a whirl if you want something a bit painful. The default volume is... intense.</p>
<p>The last piece we need is the math that turns a piano key into a frequency. Luckily, the math has already been done for us:</p>
<div>$$ f(n) = ( \sqrt[12]{2}\ )^{n-49} \cdot 440\ Hz $$</div>
<p>Combine the previous code and that function and we have a nice way to make single pitches:</p>
<pre class="scheme"><code>(define (note-&gt;rsound 1/2s-above-c)
  (define 12th-root-of-2 (expt 2 (/ 1 12)))
  (define n (+ 1/2s-above-c 40))
  (define freq (* (expt 12th-root-of-2 (- n 49)) 440))
  (rs:network ()
              [out (rs:sine-wave freq)]))</code></pre>
<p>You may have noticed the <code>rs:</code> prefix on rsound functions. That's because it exports at least one function (<code>silence</code>) that conflicts with what we've already written. So by using the <code>prefix-in</code> form of <code>require</code> way we have a namespace of sorts on the rsound functions:</p>
<pre class="scheme"><code>(require (prefix-in rs: rsound))</code></pre>
<p>After single notes, there's a function <code>signal-+s</code> which we can use to add two signals together. This will let us build chords of those notes we were already making:</p>
<pre class="scheme"><code>(define (chord-&gt;rsound notes)
  (rs:signal-+s
   (for/list ([each (in-list notes)])
     (note-&gt;rsound each))))</code></pre>
<p>Unfortunately, that doesn't quite work at the moment (since we don't have the parser working for chords yet), but we can still try it out:</p>
<pre class="scheme"><code>&gt; (play (signal-&gt;rsound 44100 (chord-&gt;rsound '(40 44 47))))</code></pre>
<p>With those being the notes on a standard piano corresponding to middle C and the E and G above it, that should be a nice C Major chord in all it's pure tone glory. It's ugly, but it's definitely a chord.</p>
<p>With that, all that's left is pulling apart a song. We'll go ahead and use our good friend <code>match</code> again, since we've already seen how well it deals with structs:</p>
<pre class="scheme"><code>(define (abc-&gt;rsound current-note)
  (define current-rsound
    (match current-note
      [(or #f '())
       (rs:silence 1)]
      [(note _ length pitch)
       (rs:signal-&gt;rsound (exact-floor (* length 44100)) (note-&gt;rsound pitch))]
      [(silence _ length)
       (rs:silence (exact-floor (* length 44100)))]))

  (define rest-rsound
    (match current-note
      [(or #f '())
       (rs:silence 1)]
      [(item (list-rest next-note rest-notes) _)
       (set-item-next! current-note rest-notes)
       (abc-&gt;rsound next-note)]
      [(item next-note _)
       (abc-&gt;rsound next-note)]))

  (rs:rs-append*
   (list current-rsound
         (rs:silence 10)
         rest-rsound)))</code></pre>
<p>Hopefully that's pretty straight forward. We have three parts. In the first internal define, we're making a sound for the first note. It's either a note or silence, either way we create the correct number of frames, completely ignoring the <code>item-next</code> field (setting it to <code>_</code>).</p>
<p>In the second part, we ignore the first part and <em>only</em> look at the <code>item-next</code>. This lets us know if we have <code>#f</code> at the end of a song, and empty list if we've already played through a repeat enough times, a list of repeated options (which we need to advance with <code>set-item-next!</code><span class="footnote"><sup><a href="#footnote-1">[1]</a></sup></span>, or finally a single note. In all cases but the first, we recursively generate that tone; if there's no <code>next</code>, we generate a single frame of silence (easier than special casing for the last part of the function).</p>
<p>Finally, we put it all together. I put another 10 frames of silence here as a completely randomly chosen break between notes. Without it, repeated notes tend to run together. With it, we get some nice spacing. I'm going to have to tune it a little bit, but for the moment it works great.</p>
<p>So now we can turn a song into an rsound, but how about playing it back? Easy:</p>
<pre class="scheme"><code>(define (abc-play-file filename)
  (rs:play
   (abc-&gt;rsound
    (abc-parse/playback
     (call-with-input-file filename abc-lex)))))</code></pre>
<p>Here's a nice example:</p>
<audio controls="controls"><source src="http://blog.jverkamp.com/wp-content/uploads/2013/11/greensleeves.mp3" type="audio/mpeg" />Your browser does not support HTML5 audio.</audio>
<p>Yes, it's <del>a bit</del> really fuzzy. That's mostly because of the compression involved in making it an mp3. Also, the notes are pure sine waves. In reality, musical notes are a bit more complicated than that. We'll get to that soon, I hope.</p>
<p>How did I generate the file? Glad you asked. The rsound library pretty much does this for us with the <code>rs-write</code> function:</p>
<pre class="scheme"><code>(define (abc-&gt;wav abc-filename wav-filename)
  (rs:rs-write
   (abc-&gt;rsound
    (abc-parse/playback
     (call-with-input-file abc-filename abc-lex)))
   wav-filename))</code></pre>
<p>For this particular file, I used <a href="http://audacity.sourceforge.net/">Audacity</a> to make it into an MP3, but that shouldn't strictly speaking be necessary.</p>
<p>And there you have it. We have audio playback. There's still a whole host of things to do, but I think this is pretty good progress.</p>
<p>As always, you can see the source code for this project on GitHub: <a href="https://github.com/jpverkamp/abc/">jpverkamp/abc</a>. I'd love to see some bug reports; I know there are some issues. <img alt="smile" class="emoji" src="/emoji/smile.svg" /></p>
                </div>
                <div class="entry-footnotes">
                        <div id="footnotes"><ol><li><a name="footnote-1"></a>yes, unfortunately this means songs can only be played once at the moment</li></ol></div>
                </div>

                <div id="disqus_thread"></div>
<script type="text/javascript">
var disqus_shortname = "jverkamp";
var disqus_title = "Making music, part 3: Making noise";
var disqus_url = "http://blog.jverkamp.com/2013/11/12/making-music-part-3-making-noise/";
/* * * DON'T EDIT BELOW THIS LINE * * */
(function() {
  var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
  dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js';
  (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
})();
</script>
<noscript>Please enable JavaScript to view the <a href="http://disqus.com/?ref_noscript">comments powered by Disqus.</a></noscript>
<a href="http://disqus.com" class="dsq-brlink">comments powered by <span class="logo-disqus">Disqus</span></a>
        </article>

        <footer class="container" role="contentinfo">
                <nav class="navbar navbar-default" role="navigation"><ul class="nav navbar-nav nav-justified"><li><a href="http://blog.jverkamp.com/2013/11/10/enders-game">← Ender's Game</a></li><li><a href="http://blog.jverkamp.com/category/archives">Archives</a></li><li><a href="http://blog.jverkamp.com/2013/11/13/chapter-3-summoning-a-demon">Chapter 3 -- Summoning a Demon →</a></li></ul><ul class="nav navbar-nav nav-justified"><li><a href="http://blog.jverkamp.com/2013/11/07/making-music-part-2-taking-shape">← Making music, part 2: Taking shape</a></li><li><a href="http://blog.jverkamp.com/category/programming">Programming</a></li><li><a href="http://blog.jverkamp.com/2013/11/30/twitter-puddle">Twitter puddle →</a></li></ul></nav>

                <div class="legal">
                        <a href="http://blog.jverkamp.com/feed/atom.xml">feed <img style="border: 0;" src="http://blog.jverkamp.com/rss.png" /></a><br />
                        All posts unless otherwise mentioned are licensed under <a rel="license" href="http://creativecommons.org/licenses/by-nc-sa/3.0/deed.en_US"><img alt="Creative Commons License" style="border-width:0" src="http://i.creativecommons.org/l/by-nc-sa/3.0/80x15.png" /></a><br />
                        Any source code unless otherwise mentioned is licensed under the <a href="http://directory.fsf.org/wiki/License:BSD_3Clause">3 clause BSD license</a>
                </div>
        </footer>

<script>
(function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
(i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
})(window,document,'script','//www.google-analytics.com/analytics.js','ga');

ga('create', 'UA-53688146-1', 'auto');
ga('send', 'pageview');
</script>
</body>
</html>