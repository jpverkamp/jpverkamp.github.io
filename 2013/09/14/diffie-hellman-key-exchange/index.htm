<!DOCTYPE html>
<html>
<head>
        
        

        <title>Diffie-Hellman Key Exchange | jverkamp.com | John-Paul Verkamp</title>

        <script src="//ajax.googleapis.com/ajax/libs/jquery/1.11.0/jquery.min.js"></script>

        <link rel="stylesheet" href="//netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css" />
        <link rel="stylesheet" href="//netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap-theme.min.css" />
        <script src="//netdna.bootstrapcdn.com/bootstrap/3.1.1/js/bootstrap.min.js"></script>

        <link rel="stylesheet" href="//cdnjs.cloudflare.com/ajax/libs/ekko-lightbox/3.0.3a/ekko-lightbox.min.css" />
        <script src="//cdnjs.cloudflare.com/ajax/libs/ekko-lightbox/3.0.3a/ekko-lightbox.min.js"></script>

        <script src="//cdnjs.cloudflare.com/ajax/libs/jquery.transit/0.9.9/jquery.transit.min.js"></script>

        <!-- Highlight.js for syntax highlighting -->
        <link rel="stylesheet" href="/highlight/styles/tomorrow-night.css" />
        <script src="/highlight/highlight.pack.js"></script>

        <!-- MathJax for LaTeX support -->
        <script src="//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML"></script>

        <!-- nanoGallery for Flickr Galleries -->
        <link rel="stylesheet" href="//cdnjs.cloudflare.com/ajax/libs/nanogallery/4.4.2/css/themes/light/nanogallery_light.css" />
        <script type="text/javascript" src="//cdnjs.cloudflare.com/ajax/libs/nanogallery/4.4.2/jquery.nanogallery.min.js"></script>

        <!-- Any custom CSS or JS that I've written; this should be kept minimal -->
        <link rel="stylesheet" href="/custom.css" />
        <script src="/custom.js"></script>

        <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
</head>
<body>
        <header class="container">
        <nav class="navbar navbar-default" role="navigation">
  <div class="container-fluid">
    <!-- Brand and toggle get grouped for better mobile display -->
    <div class="navbar-header">
      <button type="button" class="navbar-toggle" data-toggle="collapse" data-target="#bs-example-navbar-collapse-1">
        <span class="sr-only">Toggle navigation</span>
        <span class="icon-bar"></span>
        <span class="icon-bar"></span>
        <span class="icon-bar"></span>
      </button>
      <a class="navbar-brand" href="http://blog.jverkamp.com"><span style="color: green;">jv</span>erkamp.com</a>
    </div>

    <!-- Collect the nav links, forms, and other content for toggling -->
    <div class="collapse navbar-collapse" id="bs-example-navbar-collapse-1">
      <ul class="nav navbar-nav"><li class="dropdown"><a href="http://blog.jverkamp.com/category/archives" class="dropdown-toggle">Archives<span class="caret"></span></a><ul class="dropdown-menu"><li><a href="http://blog.jverkamp.com/category/archives/2004">2004</a></li><li><a href="http://blog.jverkamp.com/category/archives/2005">2005</a></li><li><a href="http://blog.jverkamp.com/category/archives/2006">2006</a></li><li><a href="http://blog.jverkamp.com/category/archives/2007">2007</a></li><li><a href="http://blog.jverkamp.com/category/archives/2008">2008</a></li><li><a href="http://blog.jverkamp.com/category/archives/2009">2009</a></li><li><a href="http://blog.jverkamp.com/category/archives/2010">2010</a></li><li><a href="http://blog.jverkamp.com/category/archives/2011">2011</a></li><li><a href="http://blog.jverkamp.com/category/archives/2012">2012</a></li><li><a href="http://blog.jverkamp.com/category/archives/2013">2013</a></li><li><a href="http://blog.jverkamp.com/category/archives/2014">2014</a></li></ul></li><li class="dropdown"><a href="http://blog.jverkamp.com/category/other" class="dropdown-toggle">Other<span class="caret"></span></a><ul class="dropdown-menu"><li><a href="http://blog.jverkamp.com/category/other/board-game-reviews">Board Game Reviews</a></li><li><a href="http://blog.jverkamp.com/category/other/cooking">Cooking</a></li><li><a href="http://blog.jverkamp.com/category/other/movie-reviews">Movie Reviews</a></li></ul></li><li class="dropdown"><a href="http://blog.jverkamp.com/category/photography" class="dropdown-toggle">Photography<span class="caret"></span></a><ul class="dropdown-menu"><li><a href="http://blog.jverkamp.com/category/photography/dp-challenge">DP Challenge</a></li><li><a href="http://blog.jverkamp.com/category/photography/photosets">Photosets</a></li><li><a href="http://blog.jverkamp.com/category/photography/photosynth">Photosynth</a></li></ul></li><li class="dropdown"><a href="http://blog.jverkamp.com/category/programming" class="dropdown-toggle">Programming<span class="caret"></span></a><ul class="dropdown-menu"><li><a href="http://blog.jverkamp.com/category/programming/by-language">By Language</a></li><li><a href="http://blog.jverkamp.com/category/programming/by-project">By Project</a></li><li><a href="http://blog.jverkamp.com/category/programming/by-source">By Source</a></li><li><a href="http://blog.jverkamp.com/category/programming/by-topic">By Topic</a></li><li><a href="http://blog.jverkamp.com/category/programming/libraries">Libraries</a></li></ul></li><li class="dropdown"><a href="http://blog.jverkamp.com/category/research" class="dropdown-toggle">Research<span class="caret"></span></a><ul class="dropdown-menu"><li><a href="http://blog.jverkamp.com/category/research/by-topic">By Topic</a></li><li><a href="http://blog.jverkamp.com/category/research/publications">Publications</a></li></ul></li><li class="dropdown"><a href="http://blog.jverkamp.com/category/writing" class="dropdown-toggle">Writing<span class="caret"></span></a><ul class="dropdown-menu"><li><a href="http://blog.jverkamp.com/category/writing/by-genre">By Genre</a></li><li><a href="http://blog.jverkamp.com/category/writing/nanowrimo">NaNoWriMo</a></li><li><a href="http://blog.jverkamp.com/category/writing/novels">Novels</a></li><li><a href="http://blog.jverkamp.com/category/writing/other">Other</a></li><li><a href="http://blog.jverkamp.com/category/writing/short-stories">Short Stories</a></li></ul></li></ul>

      <!--
      <form class="navbar-form navbar-right" role="search">
        <div class="form-group">
          <input type="text" class="form-control" placeholder="Search">
        </div>
        <button type="submit" class="btn btn-default">Submit</button>
      </form>
      -->
    </div><!-- /.navbar-collapse -->
  </div><!-- /.container-fluid -->
</nav>
        </header>

        <article class="container">
                <header>
                        <h1 class="entry-title">Diffie-Hellman Key Exchange</h1>

                        <div class="entry-meta">
                                <span class="posted-on"><time class="entry-date" datetime="2013-09-14"><span class="year">2013</span> <span class="month">Sept</span> <span class="day">14</span></time></span>
                                <span class="tags"><ul class="tag-list list-inline"><li><a href="http://blog.jverkamp.com/category/programming/by-topic/mathematics">Mathematics</a></li><li><a href="http://blog.jverkamp.com/category/programming/by-topic/mathematics/prime-numbers">Prime Numbers</a></li><li><a href="http://blog.jverkamp.com/category/programming/by-topic/cryptography">Cryptography</a></li><li><a href="http://blog.jverkamp.com/category/programming">Programming</a></li><li><a href="http://blog.jverkamp.com/category/programming/by-topic/asymmetric-encryption">Asymmetric encryption</a></li><li><a href="http://blog.jverkamp.com/category/programming/by-topic/cryptography/key-exchange">Key Exchange</a></li><li><a href="http://blog.jverkamp.com/category/programming/by-language/scheme">Scheme</a></li><li><a href="http://blog.jverkamp.com/category/programming/by-language/racket">Racket</a></li><li><a href="http://blog.jverkamp.com/category/programming/by-topic/cryptography/public-key-cryptography">Public-key cryptography</a></li></ul></span>
                        </div>

                        <hr />
                </header>
                <div class="entry-content">
                        <p>Today we're going to be talking about cryptography, specifically <a href="https://en.wikipedia.org/wiki/Diffie-Hellman_key exchange">Diffie-Hellman key exchange</a><span class="footnote"><sup><a href="#footnote-1">[1]</a></sup></span>. The basic idea isn't necessarily to communicate in secret, but rather to establish the information that makes doing so much easier.Â <!--more--></p>
<p>The basic idea behind Diffie-Hellman is actually fairly straightforward. We'll go ahead and let this nice image from <a href="https://en.wikipedia.org/wiki/Wikipedia">Diffie-Hellman key exchange</a><span class="footnote"><sup><a href="#footnote-2">[2]</a></sup></span> illustrate for us.</p>
<p>Assume that Alice and Bob wish to establish some secret key. Better yet, they wish to do so such that no eavesdropper (Eve) can figure out what that key is, even if Eve can intercept any communication between Alice and Bob.</p>
<p>The first step is for Alice and Bob to choose some public piece of information (in this case, yellow paint) and a piece of private information each (red paint for Alice and teal for Bob). They then each mix their private color with the public color. Throughout this process, the assumption is that it is easy to mix paint and that the results for mixing two colors will always be the same, but at the same time it is difficult to separate paints once mixed. It turns out to be true for paint, but also true for <a href="https://en.wikipedia.org/wiki/modular_exponentiation">modular exponentiation</a> (which we'll get to shortly). In any case, once both have mixed their paint, they'll send their mixed paint buckets to each other.</p>
<p><a data-toggle="lightbox" href="http://blog.jverkamp.com/2013/09/14/diffie-hellman-key-exchange/dh-1.png"><img src="http://blog.jverkamp.com/2013/09/14/diffie-hellman-key-exchange/dh-1.png" /></a></p>
<p>For the next step, Alice and Bob each have their private paint and a mix of the other's private paint with the shared public color. If they then mix in their own secret, they get this ugly sort of brown<span class="footnote"><sup><a href="#footnote-3">[3]</a></sup></span>. But the secret is, each will have the exact same ugly shade of brown, since they each mixed the same three colors to get it.</p>
<p><a data-toggle="lightbox" href="http://blog.jverkamp.com/2013/09/14/diffie-hellman-key-exchange/dh-2.png"><img src="http://blog.jverkamp.com/2013/09/14/diffie-hellman-key-exchange/dh-2.png" /></a></p>
<p>But look back over what was sent. The public information is the shared paint color (yellow) and the two mixed colors (blue and orange). But at no point is either secret color or the final chosen secret shared. What's more, since you can't unmix colors and mixing the two secrets will double the amount of yellow, there's no way to get to that shade of brown from the three pieces of public information. Ergo, Alice and Bob have a (theoretically) secure shared secret.</p>
<p>How could you use it? Perhaps given a paint color, you can make special goggles that can only see that specific frequency. Then Alice and Bob could write whatever they want in ugly brown on other-nearly-identical-but-not-quite brown and no one (but Bob and Alice) would be able to read it. Who knows. The point is, how do we turn this into code?</p>
<p>Well, it turns out that the algorithm is just as straight forward:</p>
<table class="table table-striped">
<thead>
<tr>
<td colspan="3">Alice</td>
<td></td>
<td colspan="3"><b>Bob</b></td>
</tr>
</thead>
<tbody>
<tr>
<td>Secret</td>
<td>Public</td>
<td>Calculates</td>
<td>Sends</td>
<td>Calculates</td>
<td>Public</td>
<td>Secret</td>
</tr>
<tr>
<td>a</td>
<td>p, g</td>
<td></td>
<td>p,gÂ â</td>
<td></td>
<td></td>
<td>b</td>
</tr>
<tr>
<td>a</td>
<td>p, g, A</td>
<td>g<sup>a</sup> mod p = A</td>
<td>AÂ â</td>
<td></td>
<td>p, g</td>
<td>b</td>
</tr>
<tr>
<td>a</td>
<td>p, g, A</td>
<td></td>
<td>âÂ B</td>
<td>g<sup>b</sup> mod p = B</td>
<td>p, g, A, B</td>
<td>b</td>
</tr>
<tr>
<td>a, <b>s</b></td>
<td>p, g, A, B</td>
<td>B<sup>a</sup> mod p = s</td>
<td></td>
<td>A<sup>b</sup> mod p = s</td>
<td>p, g, A, B</td>
<td>b, <b>s</b></td>
</tr>
</tbody>
</table>
<p>We're going to need some math / number theory (specifically, the ability to generate a prime numberÂ <em>p</em>, calculating a <a href="https://en.wikipedia.org/wiki/primitive_root">Primitive root modulo n</a>Â <em>g</em>, and then performing <a href="https://en.wikipedia.org/wiki/modular_exponentiation">modular exponentiation</a>. Luckily, we have theÂ <code><a href="http://docs.racket-lang.org/search/index.html?q=math/number-theory">math/number-theory</a></code>Â module:</p>
<ul>
        <li><code><a href="http://docs.racket-lang.org/search/index.html?q=prime?">prime?</a></code>Â - test if a number is prime</li>
        <li><code><a href="http://docs.racket-lang.org/search/index.html?q=random-prime">random-prime</a></code>Â - determine a random prime number within a given range</li>
        <li><code><a href="http://docs.racket-lang.org/search/index.html?q=primitive-roots">primitive-roots</a></code>Â - return a list of primitive roots for a primeÂ <em>p</em></li>
        <li><code><a href="http://docs.racket-lang.org/search/index.html?q=with-modulus">with-modulus</a></code>Â - functions within this block are performed with this modulus</li>
        <li><code><a href="http://docs.racket-lang.org/search/index.html?q=modexpt">modexpt</a></code>Â - perform fast modular exponentiation</li>
</ul>
<p>With all of that, we should be good to go. As always, if you'd like to do so, you can follow along on GitHub: <a href="https://github.com/jpverkamp/small-projects/tree/master/blog/dh/">jpverkamp/dh</a>.</p>
<p>To make the code a little more interesting, we're also going to use Racket'sÂ <code><a href="http://docs.racket-lang.org/search/index.html?q=TCP library">TCP library</a></code>. We'll create a server and client that will set up the Diffie-Hellman secret key.</p>
<p>First, we'll create the TCP connection:</p>
<div class="codeswap">
<div class="client">
<h3>Client</h3>

<pre class="scheme"><code>(define (start-dh-client [server-host "localhost"] [server-port 8000])
  ; Generate an ID for this client
  (dh-debug-id (format "client ~a" (random RANGE)))

  ; Connect to the DH server
  (define-values (from-server to-server)
    (tcp-connect server-host server-port))
  ...</code></pre>

</div><div class="server">
<h3>Server</h3>

<pre class="scheme"><code>; Create the main server
(define (start-dh-server [port 8000])
  ; Start listening
  (define server (tcp-listen port))

  ; Accept each client in their own thread
  (let loop ()
    (define-values (from-client to-client) (tcp-accept server))
    (current-thread-id (+ 1 (current-thread-id)))
    (thread (dh-client-thread from-client to-client))
    (loop)))

(define (dh-client-thread from-client to-client)
  (Î» ()
    ; Store the ID for this client
    (dh-debug-id (format "client thread ~a" (current-thread-id)))

    ; Read the shared public values
    (define p (recv from-client))
    (define g (recv from-client))

    ; Read the secret from A
    (define A (recv from-client))
    ...</code></pre>

</div>
<p></div></p>
<p>Then we'll generate the prime <em>p</em> and primitive root <em>g</em> on the client, sending both to the server (<code>send</code> and <code>recv</code> are just wrappers to add some debugging code and make sure that we send a newline and flush after each message; you can find them in <a href="https://github.com/jpverkamp/small-projects/blob/master/blog/dh/dh-shared.rkt">dh-shared.rkt</a>):</p>
<div class="codeswap">
<div class="client">
<h3>Client</h3>

<pre class="scheme"><code>...
; Generate and share the public information
(define p (random-prime RANGE))
(define g (first (shuffle (primitive-roots p))))
(send p to-server)
(send g to-server)
...</code></pre>

</div><div class="server">
<h3>Server</h3>

<pre class="scheme"><code>...
; Read the shared public values
(define p (recv from-client))
(define g (recv from-client))
...</code></pre>

</div>
<p></div></p>
<p>Then both client and server will generate and use their secrets along withÂ <em>p</em>Â andÂ <em>g</em>:</p>
<div class="codeswap">
<div class="client">
<h3>Client</h3>

<pre class="scheme"><code>...
; Generate my secret integer, send the shared secret to the server
(define a (random RANGE))
(define A (with-modulus p (modexpt g a)))
(send A to-server)

; Get their half of the shared secret
(define B (recv from-server))
...</code></pre>

</div><div class="server">
<h3>Server</h3>

<pre class="scheme"><code>...
; Read the secret from A
(define A (recv from-client))

; Generate my own secret number and send it back
(define b (random RANGE))
(define B (with-modulus p (modexpt g b)))
(send B to-client)
...</code></pre>

</div>
<p></div></p>
<p>Finally, both will calculate the secret:</p>
<div class="codeswap">
<div class="client">
<h3>Client</h3>

<pre class="scheme"><code>...
; Calculate the secret
(define s (with-modulus p (modexpt B a)))
...</code></pre>

</div><div class="server">
<h3>Server</h3>

<pre class="scheme"><code>...
; Generate the shared secret
(define s (with-modulus p (modexpt A b)))
...</code></pre>

</div>
<p></div></p>
<p>If all goes well (and there's no reason to think that it wouldn't), both will have the same secret. From here, you can do anything you want with the secret. For example, we could use it for the seed in Racket's <a href="https://en.wikipedia.org/wiki/random_number generator">Pseudorandom number generator</a> and use that with a basic XOR encryption algorithm to talk <a href="https://en.wikipedia.org/wiki/completely_securely">XOR encryption</a><span class="footnote"><sup><a href="#footnote-4">[4]</a></sup></span> (<code>xor-encode/decode</code> are available in <a href="https://github.com/jpverkamp/small-projects/blob/master/blog/dh/dh-shared.rkt">dh-shared.rkt</a>):</p>
<div class="codeswap">
<div class="client">
<h3>Client</h3>

<pre class="scheme"><code>...
; Use it to seed the PRNG
(random-seed s)
(let loop ()
  ; Ask the user for input, encode it, send it
  (printf "client: ")
  (define message (read-line))
  (send (xor-encode message) to-server)

  ; Read a response from the server, print it out
  (define response (xor-decode (read from-server)))
  (printf "server: ~a\n" response)

  ; Loop unless 'exit'
  (unless (equal? message "exit")
    (loop)))
...</code></pre>

</div><div class="server">
<h3>Server</h3>

<pre class="scheme"><code>...
; Use it to seed the PRNG
(random-seed s)
(let loop ()
  ; Read a message from the client, print it out
  (define message (xor-decode (read from-client)))
  (printf "client ~a: ~a\n" (current-thread-id) message)

  ; Respond politely
  (define response
    (if (equal? message "exit")
        "Good-bye."
        "Hello world."))
  (send (xor-encode response) to-client)

  ; Loop unless 'exit'
  (unless (equal? message "exit")
    (loop)))
...</code></pre>

</div>
<p></div></p>
<p>After that's all done, clean up the ports we opened and all is well with the world:</p>
<div class="codeswap">
<div class="client">
<h3>Client</h3>

<pre class="scheme"><code>...
; Close down the connection
(close-input-port from-server)
(close-output-port to-server))</code></pre>

</div><div class="server">
<h3>Server</h3>

<pre class="scheme"><code>...
; Clean up the connection
(close-input-port from-client)
(close-output-port to-client)))</code></pre>

</div>
<p></div></p>
<p>And that's really all you need. Let's take a look at what each end sees (with <code>(dh-debug-mode #t)</code>, see <a href="https://github.com/jpverkamp/small-projects/blob/master/blog/dh/dh-shared.rkt">dh-shared.rkt</a>):</p>
<div class="codeswap">
<div class="client">
<h3>Client</h3>

<pre class="bash"><code>client 52989 send (#&lt;output-port:localhost&gt;): 4391
client 52989 send (#&lt;output-port:localhost&gt;): 3813
client 52989 send (#&lt;output-port:localhost&gt;): 3150
client 52989 recv (#&lt;input-port:localhost&gt;): 4132
client: hi
client 52989 send (#&lt;output-port:localhost&gt;): wpfCvQ==
client 52989 recv (#&lt;input-port:localhost&gt;): XnzChcKCEC9Tw6oRd8KHBQ==
server: Hello world.
client: exit
client 52989 send (#&lt;output-port:localhost&gt;): wrvDshI3
client 52989 recv (#&lt;input-port:localhost&gt;): wqvDuHLDtSbCkgsJw4w=
server: Good-bye.</code></pre>

</div><div class="server">
<h3>Server</h3>

<pre class="bash"><code>server listening
client thread 1 recv (#&lt;input-port:tcp-accepted&gt;): 4391
client thread 1 recv (#&lt;input-port:tcp-accepted&gt;): 3813
client thread 1 recv (#&lt;input-port:tcp-accepted&gt;): 3150
client thread 1 send (#&lt;output-port:tcp-accepted&gt;): 4132
client thread 1 recv (#&lt;input-port:tcp-accepted&gt;): wpfCvQ==
client 1: hi
client thread 1 send (#&lt;output-port:tcp-accepted&gt;): XnzChcKCEC9Tw6oRd8KHBQ==
client thread 1 recv (#&lt;input-port:tcp-accepted&gt;): wrvDshI3
client 1: exit
client thread 1 send (#&lt;output-port:tcp-accepted&gt;): wqvDuHLDtSbCkgsJw4w=
...</code></pre>

</div>
<p></div></p>
<p>There you have it. You can see the four pieces of information sent (<em>p</em>, <em>g</em>, <em>A</em>, <em>B</em> in that order for either), but with just those four, I challenge you to decode the messages being sent (granted, you can see them, but still...). As a note, I <a href="https://en.wikipedia.org/wiki/Base64">Base64</a> encoded the messages so that they would be easier to <code>read</code>, but it's not strictly necessary.</p>
<p>As always, the source code is available on GitHub: <a href="https://github.com/jpverkamp/small-projects/tree/master/blog/dh/">jpverkamp/dh</a>. Check it out!</p>
                </div>
                <div class="entry-footnotes">
                        <div id="footnotes"><ol><li><a name="footnote-1"></a>Inspired by the <a href="http://programmingpraxis.com/2013/09/12/diffie-hellman-key-exchange/">most recent post</a> from <a href="http://programmingpraxis.com/">Programming Praxis</a></li><li><a name="footnote-2"></a>Public domain</li><li><a name="footnote-3"></a>Here's where the analogy breaks down somewhat; almost all trios of paint will end up brown...</li><li><a name="footnote-4"></a>If Racket's RNG were cryptographically secure (it's not)</li></ol></div>
                </div>

                <div id="disqus_thread"></div>
<script type="text/javascript">
var disqus_shortname = "jverkamp";
var disqus_title = "Diffie-Hellman Key Exchange";
var disqus_url = "http://blog.jverkamp.com/2013/09/14/diffie-hellman-key-exchange/";
/* * * DON'T EDIT BELOW THIS LINE * * */
(function() {
  var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
  dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js';
  (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
})();
</script>
<noscript>Please enable JavaScript to view the <a href="http://disqus.com/?ref_noscript">comments powered by Disqus.</a></noscript>
<a href="http://disqus.com" class="dsq-brlink">comments powered by <span class="logo-disqus">Disqus</span></a>
        </article>

        <footer class="container" role="contentinfo">
                <nav class="navbar navbar-default" role="navigation"><ul class="nav navbar-nav nav-justified"><li><a href="http://blog.jverkamp.com/2013/09/10/the-mortal-instruments-city-of-bones">â The Mortal Instruments: City of Bones</a></li><li><a href="http://blog.jverkamp.com/category/archives">Archives</a></li><li><a href="http://blog.jverkamp.com/2013/09/19/smallest-consecutive-four-factor-composites">Smallest consecutive four-factor composites â</a></li></ul><ul class="nav navbar-nav nav-justified"><li><a href="http://blog.jverkamp.com/2013/08/30/visualizing-the-monkey-grid">â Visualizing the Monkey Grid</a></li><li><a href="http://blog.jverkamp.com/category/programming">Programming</a></li><li><a href="http://blog.jverkamp.com/2013/09/19/smallest-consecutive-four-factor-composites">Smallest consecutive four-factor composites â</a></li></ul></nav>

                <div class="legal">
                        All posts unless otherwise mentioned are licensed under <a rel="license" href="http://creativecommons.org/licenses/by-nc-sa/3.0/deed.en_US"><img alt="Creative Commons License" style="border-width:0" src="http://i.creativecommons.org/l/by-nc-sa/3.0/80x15.png" /></a><br />
                        Any source code unless otherwise mentioned is licensed under the <a href="http://directory.fsf.org/wiki/License:BSD_3Clause">3 clause BSD license</a>
                </div>
        </footer>
</body>
</html>