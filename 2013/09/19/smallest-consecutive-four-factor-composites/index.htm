<!DOCTYPE html>
<html>
<head>
        
        

        <title>Smallest consecutive four-factor composites | jverkamp.com | John-Paul Verkamp</title>

        <script src="//ajax.googleapis.com/ajax/libs/jquery/1.11.0/jquery.min.js" defer></script>
        <script src="//code.jquery.com/ui/1.11.1/jquery-ui.min.js" defer></script>

        <link rel="stylesheet" href="//netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css" defer />
        <link rel="stylesheet" href="//netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap-theme.min.css" defer />
        <script src="//netdna.bootstrapcdn.com/bootstrap/3.1.1/js/bootstrap.min.js" defer></script>

        <link rel="stylesheet" href="//cdnjs.cloudflare.com/ajax/libs/ekko-lightbox/3.0.3a/ekko-lightbox.min.css" defer />
        <script src="//cdnjs.cloudflare.com/ajax/libs/ekko-lightbox/3.0.3a/ekko-lightbox.min.js" defer></script>

        <script src="//cdnjs.cloudflare.com/ajax/libs/jquery.transit/0.9.9/jquery.transit.min.js" defer></script>

        <!-- Highlight.js for syntax highlighting -->
        <link rel="stylesheet" href="/highlight/styles/obsidian.css" defer />
        <script src="/highlight/highlight.pack.js" defer></script>

        <!-- MathJax for LaTeX support -->
        <script src="//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML" defer></script>

        <!-- nanoGallery for Flickr Galleries -->
        <link rel="stylesheet" href="//cdnjs.cloudflare.com/ajax/libs/nanogallery/4.4.2/css/themes/light/nanogallery_light.css" defer />
        <script type="text/javascript" src="//cdnjs.cloudflare.com/ajax/libs/nanogallery/4.4.2/jquery.nanogallery.min.js" defer ></script>

        <!-- Pretty pretty fonts -->
        <link rel="stylesheet" type="text/css" href="//fonts.googleapis.com/css?family=Calligraffitti" defer />

        <!-- Any custom CSS or JS that I've written; this should be kept minimal -->
        <link rel="stylesheet" href="/custom.css" defer />
        <script src="/custom.js" defer></script>

        <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
        <link rel="alternate" type="application/atom+xml" title="jverkamp.com (Atom 2.0)" href="http://blog.jverkamp.com/feed/" />
</head>
<body>
        <header class="container">
        <nav class="navbar navbar-default" role="navigation">
  <div class="container-fluid">
    <!-- Brand and toggle get grouped for better mobile display -->
    <div class="navbar-header">
      <button type="button" class="navbar-toggle" data-toggle="collapse" data-target="#bs-example-navbar-collapse-1">
        <span class="sr-only">Toggle navigation</span>
        <span class="icon-bar"></span>
        <span class="icon-bar"></span>
        <span class="icon-bar"></span>
      </button>
      <a class="navbar-brand" href="http://blog.jverkamp.com"><span style="color: green;">jv</span>erkamp.com</a>
    </div>

    <!-- Collect the nav links, forms, and other content for toggling -->
    <div class="collapse navbar-collapse" id="bs-example-navbar-collapse-1">
      <ul class="nav navbar-nav"><li class="dropdown"><a href="http://blog.jverkamp.com/category/archives" class="dropdown-toggle">Archives<span class="caret"></span></a><ul class="dropdown-menu"><li><a href="http://blog.jverkamp.com/category/archives/2004">2004</a></li><li><a href="http://blog.jverkamp.com/category/archives/2005">2005</a></li><li><a href="http://blog.jverkamp.com/category/archives/2006">2006</a></li><li><a href="http://blog.jverkamp.com/category/archives/2007">2007</a></li><li><a href="http://blog.jverkamp.com/category/archives/2008">2008</a></li><li><a href="http://blog.jverkamp.com/category/archives/2009">2009</a></li><li><a href="http://blog.jverkamp.com/category/archives/2010">2010</a></li><li><a href="http://blog.jverkamp.com/category/archives/2011">2011</a></li><li><a href="http://blog.jverkamp.com/category/archives/2012">2012</a></li><li><a href="http://blog.jverkamp.com/category/archives/2013">2013</a></li><li><a href="http://blog.jverkamp.com/category/archives/2014">2014</a></li><li><a href="http://blog.jverkamp.com/category/archives/2015">2015</a></li></ul></li><li class="dropdown"><a href="http://blog.jverkamp.com/category/other" class="dropdown-toggle">Other<span class="caret"></span></a><ul class="dropdown-menu"><li><a href="http://blog.jverkamp.com/category/other/board-game-reviews">Board Game Reviews</a></li><li><a href="http://blog.jverkamp.com/category/other/book-reviews">Book Reviews</a></li><li><a href="http://blog.jverkamp.com/category/other/cooking">Cooking</a></li><li><a href="http://blog.jverkamp.com/category/other/movie-reviews">Movie Reviews</a></li></ul></li><li class="dropdown"><a href="http://blog.jverkamp.com/category/photography" class="dropdown-toggle">Photography<span class="caret"></span></a><ul class="dropdown-menu"><li><a href="http://blog.jverkamp.com/category/photography/dp-challenge">DP Challenge</a></li><li><a href="http://blog.jverkamp.com/category/photography/photosets">Photosets</a></li><li><a href="http://blog.jverkamp.com/category/photography/photosynth">Photosynth</a></li></ul></li><li class="dropdown"><a href="http://blog.jverkamp.com/category/programming" class="dropdown-toggle">Programming<span class="caret"></span></a><ul class="dropdown-menu"><li><a href="http://blog.jverkamp.com/category/programming/by-language">By Language</a></li><li><a href="http://blog.jverkamp.com/category/programming/by-project">By Project</a></li><li><a href="http://blog.jverkamp.com/category/programming/by-source">By Source</a></li><li><a href="http://blog.jverkamp.com/category/programming/by-topic">By Topic</a></li><li><a href="http://blog.jverkamp.com/category/programming/libraries">Libraries</a></li></ul></li><li class="dropdown"><a href="http://blog.jverkamp.com/category/research" class="dropdown-toggle">Research<span class="caret"></span></a><ul class="dropdown-menu"><li><a href="http://blog.jverkamp.com/category/research/by-topic">By Topic</a></li><li><a href="http://blog.jverkamp.com/category/research/publications">Publications</a></li></ul></li><li class="dropdown"><a href="http://blog.jverkamp.com/category/writing" class="dropdown-toggle">Writing<span class="caret"></span></a><ul class="dropdown-menu"><li><a href="http://blog.jverkamp.com/category/writing/by-genre">By Genre</a></li><li><a href="http://blog.jverkamp.com/category/writing/ideas">Ideas</a></li><li><a href="http://blog.jverkamp.com/category/writing/nanowrimo">NaNoWriMo</a></li><li><a href="http://blog.jverkamp.com/category/writing/novels">Novels</a></li><li><a href="http://blog.jverkamp.com/category/writing/other">Other</a></li><li><a href="http://blog.jverkamp.com/category/writing/short-stories">Short Stories</a></li><li><a href="http://blog.jverkamp.com/category/writing/writing-excuses">Writing Excuses</a></li></ul></li></ul>

      <form action="http://www.google.com/search" method="get" onSubmit="(function(obj){obj.q.value='site:blog.jverkamp.com '+obj.qfront.value;})(this)" class="navbar-form navbar-right" role="search">
        <div class="form-group">
          <input name="q" type="hidden" />
          <input name="qfront" type="text" class="form-control" placeholder="Search" />
          <button type="submit" class="btn btn-default" value="Search">Search</button>
        </p>
      </form>
    </div><!-- /.navbar-collapse -->
  </div><!-- /.container-fluid -->
</nav>
        </header>

        <article class="container">
                <header>
                        <h1 class="entry-title">Smallest consecutive four-factor composites</h1>

                        <div class="entry-meta">
                                <span class="posted-on"><time class="entry-date" datetime="2013-09-19"><span class="year">2013</span> <span class="month">Sept</span> <span class="day">19</span></time></span>
                                <span class="tags"><ul class="tag-list list-inline"><li><a href="http://blog.jverkamp.com/category/programming/by-topic/mathematics/prime-numbers">Prime Numbers</a></li><li><a href="http://blog.jverkamp.com/category/programming">Programming</a></li><li><a href="http://blog.jverkamp.com/category/programming/by-source/programming-praxis">Programming Praxis</a></li><li><a href="http://blog.jverkamp.com/category/programming/by-language/racket">Racket</a></li><li><a href="http://blog.jverkamp.com/category/programming/by-language/scheme">Scheme</a></li></ul></span>
                        </div>

                        <hr />
                </header>
                <div class="entry-content">
                        <p><a href="http://programmingpraxis.com/2013/09/17/smallest-consecutive-four-factor-composites/">Another post</a> from Programming Praxis, from this past Tuesday:</p>
<blockquote>The smallest pair of consecutive natural numbers that each have two distinct prime factors are 14 = 2 * 7 and 15 = 3 * 5. The smallest triplet of consecutive natural numbers that each have three distinct prime factors are 644 = 2^2 * 7 * 23, 645 = 3 * 5 * 43 and 646 = 2 * 17 * 19. What is the smallest set of four consecutive natural numbers that each have four distinct prime factors?</blockquote>
<!--more-->
<p>Looks straight forward enough. Although when I first read the problem, I thought that the factors had to be unique between the different numbers, which makes it a bit more interesting. I'll solve that problem as well towards then end.</p>
<p>But directly on target, let's generalize somewhat. Say we want to find the <code>n</code> consecutive numbers with exactly <code>m</code> factors each. So the examples above would be <code>(2, 2)</code> and <code>(3, 3)</code> while our target is <code>(4, 4)</code>. But with this extension, we could look for the first pair with 10 prime factors--<code>(2, 10)</code>--or anything else.</p>
<p>To get that far, the basic idea is to keep a running count of how many consecutive numbers we've seen with the right number of factors. Once we've seen <code>n</code> of them, return. If we haven't and we see another, increment. If we haven't, reset because we don't have a run. In terms of code:</p>
<pre class="scheme"><code>(require math/number-theory)

(define (prime-factors n)
  (map first (factorize n)))

(define (n-consecutive-with-m-factors n m)
  (let loop ([i 1] [count 0])
    (cond
      [(= count n)
       (map (λ (n) (list n (factorize n)))
            (range (- i n) i))]
      [(= (length (prime-factors i)) m)
       (loop (+ i 1) (+ count 1))]
      [else
       (loop (+ i 1) 0)])))</code></pre>
<p>The only mildly complicated part is the first term of the <code>cond</code> case. That's just so we can output each of the <code>n</code> consecutive numbers along with their factors. For example:</p>
<pre class="scheme"><code>&gt; (n-consecutive-with-m-factors 2 2)
'((14 ((2 1) (7 1)))
  (15 ((3 1) (5 1))))</code></pre>
<p>That means that the first 2 consecutive numbers with two factors are <code>14 = 2<sup>1</sup> + 7<sup>1</sup></code> and <code>15 = 3<sup>1</sup> + 5<sup>1</sup></code>.</p>
<p>Likewise:</p>
<pre class="scheme"><code>&gt; (n-consecutive-with-m-factors 3 3)
'((644 ((2 2) (7 1) (23 1)))
  (645 ((3 1) (5 1) (43 1)))
  (646 ((2 1) (17 1) (19 1))))</code></pre>
<p>And finally, we can run the full <code>(4, 4)</code> test:</p>
<pre class="scheme"><code>&gt; (time (n-consecutive-with-m-factors 4 4))
cpu time: 3838 real time: 3878 gc time: 139
'((134043 ((3 1) (7 1) (13 1) (491 1)))
  (134044 ((2 2) (23 1) (31 1) (47 1)))
  (134045 ((5 1) (17 1) (19 1) (83 1)))
  (134046 ((2 1) (3 2) (11 1) (677 1))))</code></pre>
<p>Four seconds seem a bit much though. Let's see if we can't speed it up. Remember how we've done that each time <a href="http://blog.jverkamp.com/2012/11/01/the-sum-of-the-first-billion-primes">in the past</a> with primes? By <a href="https://en.wikipedia.org/wiki/sieving">Prime sieve</a>. Basically, we'll sieve like we always do for primes. But every time we get to a multiple, we don't just mark it as not prime, we also count up how many times we've visited it. This will be the number of unique prime factors. That way, as soon as we see a consecutive sequence, we're done. Something like this:</p>
<pre class="scheme"><code>(define (n-consecutive-with-m-factors-sieved n m #:upper-bound [upper-bound 1000000])
  (define n-range (range n))
  (define sieve (make-vector upper-bound 0))
  (let loop ([i 2])
    ; Sieve but only on primes
    (when (zero? (vector-ref sieve i))
      (let loop ([j (+ i i)])
        (when (&lt; j (vector-length sieve))
          (vector-set! sieve j (+ 1 (vector-ref sieve j)))
          (loop (+ j i)))))

    ; Check for consecutive primes
    (cond
      [(andmap (λ (Δ) (= (vector-ref sieve (+ i Δ)) m)) n-range)
       (map (λ (n) (list n (factorize n)))
            (range i (+ i n)))]
      [else
       (loop (+ i 1))])))</code></pre>
<p>This one runs significantly more quickly:</p>
<pre class="scheme"><code>&gt; (time (n-consecutive-with-m-factors-sieved 4 4))
cpu time: 858 real time: 867 gc time: 47
'((134043 ((3 1) (7 1) (13 1) (491 1)))
  (134044 ((2 2) (23 1) (31 1) (47 1)))
  (134045 ((5 1) (17 1) (19 1) (83 1)))
  (134046 ((2 1) (3 2) (11 1) (677 1))))</code></pre>
<p>About four times as fast. That's much better. Unfortunately, it still can't tell us <code>(2, 10)</code>, since that doesn't happen in the first 50,000,000 primes and we can't actually go higher than that. So it goes.</p>
<p>That's enough for the problem, but let's go back to my original misinterpretation. How do we look for the first <code>n</code> consecutive numbers with <code>m</code> <strong>distinct</strong> prime factors? This time we have to keep around the previous factors. We'll use Racket's <code><a href="http://docs.racket-lang.org/search/index.html?q=sets">sets</a></code> to make finding the unique factors easy, keeping the entire list of <code>n</code> previous factors, popping the oldest off each time. Something like this:</p>
<pre class="scheme"><code>(define (n-consecutive-with-m-distinct-factors n m)
  (let loop ([i (+ n 2)]
             [factors (map (λ (Δ) (list-&gt;set (prime-factors (+ n 2 Δ)))) (range n))])
    (cond
      [(= m (set-count (apply set-union factors)))
       (map (λ (n) (list n (factorize n)))
            (range (- i n) i))]
      [else
       (loop (+ i 1)
             (append (rest factors)
                     (list (list-&gt;set (prime-factors (+ i 1))))))])))</code></pre>
<p>Straight forward. With this we can find the first pair with 2-10 <strong>distinct</strong> prime factors:</p>
<pre class="scheme"><code>&gt; (n-consecutive-with-m-distinct-factors 2 2)
'((2 ((2 1))) (3 ((3 1))))
&gt; (n-consecutive-with-m-distinct-factors 2 3)
'((4 ((2 2))) (5 ((5 1))))
&gt; (n-consecutive-with-m-distinct-factors 2 4)
'((13 ((13 1))) (14 ((2 1) (7 1))))
&gt; (n-consecutive-with-m-distinct-factors 2 5)
'((64 ((2 6))) (65 ((5 1) (13 1))))
&gt; (n-consecutive-with-m-distinct-factors 2 6)
'((208 ((2 4) (13 1))) (209 ((11 1) (19 1))))
&gt; (n-consecutive-with-m-distinct-factors 2 7)
'((713 ((23 1) (31 1))) (714 ((2 1) (3 1) (7 1) (17 1))))
&gt; (n-consecutive-with-m-distinct-factors 2 8)
'((7313 ((71 1) (103 1))) (7314 ((2 1) (3 1) (23 1) (53 1))))
&gt; (n-consecutive-with-m-distinct-factors 2 9)
'((38569 ((38569 1))) (38570 ((2 1) (5 1) (7 1) (19 1) (29 1))))
&gt; (n-consecutive-with-m-distinct-factors 2 10)
'((254539 ((331 1) (769 1))) (254540 ((2 2) (5 1) (11 1) (13 1) (89 1))))</code></pre>
<p>That actually runs significantly faster, mostly since we're not as limited in the number of factors each number has. That means that there is a lot more candidates.</p>
<p>And that's all we have for today. As always, the full code (along with a pile of unit tests that takes a few minutes to run) is available on GitHub: <a href="https://github.com/jpverkamp/small-projects/blob/master/blog/consecutive-factors.rkt">jpverkamp/consecutive-factors</a>.</p>
<p>As a random bonus, I was playing with Racket's plotting library to see just how quickly this things grow. It's pretty impressive:</p>
<pre class="scheme"><code>(require plot)

(define values
  (for*/list ([x (in-range 2 10)]
              [y (in-range 2 10)])
    (with-handlers ([exn? (λ (_) #f)])
      (vectir x y (caar (n-consecutive-with-m-factors-sieved x y))))))

(plot3d
 (discrete-histogram3d
  (filter (λ (x) x) values)
  #:color 4 #:line-color 4))</code></pre>
<p><a href="http://blog.jverkamp.com/2013/09/19/smallest-consecutive-four-factor-composites/consecutive-factors.png" data-toggle="lightbox"><img src="http://blog.jverkamp.com/2013/09/19/smallest-consecutive-four-factor-composites/consecutive-factors.png" /></a></p>
<p>Basically, all it says is that these things grow wicked fast. The <code>x axis</code> is the number of consecutive values we're looking for, while the <code>y axis</code> is how many prime factors we need. <code>(2, 5)</code> is already almost off the charts... I think the most interesting part is that <code>(2, 9)</code> is out of bounds (therefore at least over 1,000,000). Up until then, we find large clusters with two primes. But at 9, they're further apart.</p>
                </div>
                <div class="entry-footnotes">
                        <div id="footnotes"><ol></ol></div>
                </div>

                <div id="disqus_thread"></div>
<script type="text/javascript">
var disqus_shortname = "jverkamp";
var disqus_title = "Smallest consecutive four-factor composites";
var disqus_url = "http://blog.jverkamp.com/2013/09/19/smallest-consecutive-four-factor-composites/";
/* * * DON'T EDIT BELOW THIS LINE * * */
(function() {
  var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
  dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js';
  (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
})();
</script>
<noscript>Please enable JavaScript to view the <a href="http://disqus.com/?ref_noscript">comments powered by Disqus.</a></noscript>
<a href="http://disqus.com" class="dsq-brlink">comments powered by <span class="logo-disqus">Disqus</span></a>
        </article>

        <footer class="container" role="contentinfo">
                <nav class="navbar navbar-default" role="navigation"><ul class="nav navbar-nav nav-justified"><li><a href="http://blog.jverkamp.com/2013/09/14/diffie-hellman-key-exchange">← Diffie-Hellman Key Exchange</a></li><li><a href="http://blog.jverkamp.com/category/archives">Archives</a></li><li><a href="http://blog.jverkamp.com/2013/09/20/deploy-racket-libraries-to-planet-2">Deploy Racket libraries to Planet 2 →</a></li></ul><ul class="nav navbar-nav nav-justified"><li><a href="http://blog.jverkamp.com/2013/09/14/diffie-hellman-key-exchange">← Diffie-Hellman Key Exchange</a></li><li><a href="http://blog.jverkamp.com/category/programming">Programming</a></li><li><a href="http://blog.jverkamp.com/2013/09/20/deploy-racket-libraries-to-planet-2">Deploy Racket libraries to Planet 2 →</a></li></ul></nav>

                <div class="legal">
                        <a href="http://blog.jverkamp.com/feed/atom.xml">feed <img style="border: 0;" src="http://blog.jverkamp.com/rss.png" /></a><br />
                        All posts unless otherwise mentioned are licensed under <a rel="license" href="http://creativecommons.org/licenses/by-nc-sa/3.0/deed.en_US"><img alt="Creative Commons License" style="border-width:0" src="http://i.creativecommons.org/l/by-nc-sa/3.0/80x15.png" /></a><br />
                        Any source code unless otherwise mentioned is licensed under the <a href="http://directory.fsf.org/wiki/License:BSD_3Clause">3 clause BSD license</a>
                </div>
        </footer>

<script>
(function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
(i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
m=s.getElementsByTagName(o)[0];a.defer=1;a.src=g;m.parentNode.insertBefore(a,m)
})(window,document,'script','//www.google-analytics.com/analytics.js','ga');

ga('create', 'UA-53688146-1', 'auto');
ga('send', 'pageview');
</script>
</body>
</html>