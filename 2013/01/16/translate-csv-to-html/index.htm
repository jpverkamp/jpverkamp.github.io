<!DOCTYPE html>
<html>
<head>
        
        

        <title>Translate CSV to HTML | jverkamp.com | John-Paul Verkamp</title>

        <script src="//ajax.googleapis.com/ajax/libs/jquery/1.11.0/jquery.min.js"></script>

        <script src="//code.jquery.com/ui/1.11.1/jquery-ui.min.js"></script>

        <link rel="stylesheet" href="//netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css" />
        <link rel="stylesheet" href="//netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap-theme.min.css" />
        <script src="//netdna.bootstrapcdn.com/bootstrap/3.1.1/js/bootstrap.min.js"></script>

        <link rel="stylesheet" href="//cdnjs.cloudflare.com/ajax/libs/ekko-lightbox/3.0.3a/ekko-lightbox.min.css" />
        <script src="//cdnjs.cloudflare.com/ajax/libs/ekko-lightbox/3.0.3a/ekko-lightbox.min.js"></script>

        <script src="//cdnjs.cloudflare.com/ajax/libs/jquery.transit/0.9.9/jquery.transit.min.js"></script>

        <!-- Highlight.js for syntax highlighting -->
        <link rel="stylesheet" href="/highlight/styles/obsidian.css" />
        <script src="/highlight/highlight.pack.js"></script>

        <!-- MathJax for LaTeX support -->
        <script src="//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML"></script>

        <!-- nanoGallery for Flickr Galleries -->
        <link rel="stylesheet" href="//cdnjs.cloudflare.com/ajax/libs/nanogallery/4.4.2/css/themes/light/nanogallery_light.css" />
        <script type="text/javascript" src="//cdnjs.cloudflare.com/ajax/libs/nanogallery/4.4.2/jquery.nanogallery.min.js"></script>

        <!-- Any custom CSS or JS that I've written; this should be kept minimal -->
        <link rel="stylesheet" href="/custom.css" />
        <script src="/custom.js"></script>

        <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
        <link rel="alternate" type="application/atom+xml" title="jverkamp.com (Atom 2.0)" href="http://blog.jverkamp.com/feed/" />
</head>
<body>
        <header class="container">
        <nav class="navbar navbar-default" role="navigation">
  <div class="container-fluid">
    <!-- Brand and toggle get grouped for better mobile display -->
    <div class="navbar-header">
      <button type="button" class="navbar-toggle" data-toggle="collapse" data-target="#bs-example-navbar-collapse-1">
        <span class="sr-only">Toggle navigation</span>
        <span class="icon-bar"></span>
        <span class="icon-bar"></span>
        <span class="icon-bar"></span>
      </button>
      <a class="navbar-brand" href="http://blog.jverkamp.com"><span style="color: green;">jv</span>erkamp.com</a>
    </div>

    <!-- Collect the nav links, forms, and other content for toggling -->
    <div class="collapse navbar-collapse" id="bs-example-navbar-collapse-1">
      <ul class="nav navbar-nav"><li class="dropdown"><a href="http://blog.jverkamp.com/category/archives" class="dropdown-toggle">Archives<span class="caret"></span></a><ul class="dropdown-menu"><li><a href="http://blog.jverkamp.com/category/archives/2004">2004</a></li><li><a href="http://blog.jverkamp.com/category/archives/2005">2005</a></li><li><a href="http://blog.jverkamp.com/category/archives/2006">2006</a></li><li><a href="http://blog.jverkamp.com/category/archives/2007">2007</a></li><li><a href="http://blog.jverkamp.com/category/archives/2008">2008</a></li><li><a href="http://blog.jverkamp.com/category/archives/2009">2009</a></li><li><a href="http://blog.jverkamp.com/category/archives/2010">2010</a></li><li><a href="http://blog.jverkamp.com/category/archives/2011">2011</a></li><li><a href="http://blog.jverkamp.com/category/archives/2012">2012</a></li><li><a href="http://blog.jverkamp.com/category/archives/2013">2013</a></li><li><a href="http://blog.jverkamp.com/category/archives/2014">2014</a></li></ul></li><li class="dropdown"><a href="http://blog.jverkamp.com/category/other" class="dropdown-toggle">Other<span class="caret"></span></a><ul class="dropdown-menu"><li><a href="http://blog.jverkamp.com/category/other/board-game-reviews">Board Game Reviews</a></li><li><a href="http://blog.jverkamp.com/category/other/cooking">Cooking</a></li><li><a href="http://blog.jverkamp.com/category/other/movie-reviews">Movie Reviews</a></li></ul></li><li class="dropdown"><a href="http://blog.jverkamp.com/category/photography" class="dropdown-toggle">Photography<span class="caret"></span></a><ul class="dropdown-menu"><li><a href="http://blog.jverkamp.com/category/photography/dp-challenge">DP Challenge</a></li><li><a href="http://blog.jverkamp.com/category/photography/photosets">Photosets</a></li><li><a href="http://blog.jverkamp.com/category/photography/photosynth">Photosynth</a></li></ul></li><li class="dropdown"><a href="http://blog.jverkamp.com/category/programming" class="dropdown-toggle">Programming<span class="caret"></span></a><ul class="dropdown-menu"><li><a href="http://blog.jverkamp.com/category/programming/by-language">By Language</a></li><li><a href="http://blog.jverkamp.com/category/programming/by-project">By Project</a></li><li><a href="http://blog.jverkamp.com/category/programming/by-source">By Source</a></li><li><a href="http://blog.jverkamp.com/category/programming/by-topic">By Topic</a></li><li><a href="http://blog.jverkamp.com/category/programming/libraries">Libraries</a></li></ul></li><li class="dropdown"><a href="http://blog.jverkamp.com/category/research" class="dropdown-toggle">Research<span class="caret"></span></a><ul class="dropdown-menu"><li><a href="http://blog.jverkamp.com/category/research/by-topic">By Topic</a></li><li><a href="http://blog.jverkamp.com/category/research/publications">Publications</a></li></ul></li><li class="dropdown"><a href="http://blog.jverkamp.com/category/writing" class="dropdown-toggle">Writing<span class="caret"></span></a><ul class="dropdown-menu"><li><a href="http://blog.jverkamp.com/category/writing/by-genre">By Genre</a></li><li><a href="http://blog.jverkamp.com/category/writing/nanowrimo">NaNoWriMo</a></li><li><a href="http://blog.jverkamp.com/category/writing/novels">Novels</a></li><li><a href="http://blog.jverkamp.com/category/writing/other">Other</a></li><li><a href="http://blog.jverkamp.com/category/writing/short-stories">Short Stories</a></li></ul></li></ul>

      <form action="http://www.google.com/search" method="get" onSubmit="(function(obj){obj.q.value='site:blog.jverkamp.com '+obj.qfront.value;})(this)" class="navbar-form navbar-right" role="search">
        <div class="form-group">
          <input name="q" type="hidden" />
          <input name="qfront" type="text" class="form-control" placeholder="Search" />
          <button type="submit" class="btn btn-default" value="Search">Search</button>
        </p>
      </form>
    </div><!-- /.navbar-collapse -->
  </div><!-- /.container-fluid -->
</nav>
        </header>

        <article class="container">
                <header>
                        <h1 class="entry-title">Translate CSV to HTML</h1>

                        <div class="entry-meta">
                                <span class="posted-on"><time class="entry-date" datetime="2013-01-16"><span class="year">2013</span> <span class="month">Jan</span> <span class="day">16</span></time></span>
                                <span class="tags"><ul class="tag-list list-inline"><li><a href="http://blog.jverkamp.com/category/programming/by-topic/file-formats/csv">CSV</a></li><li><a href="http://blog.jverkamp.com/category/programming/by-language/html">HTML</a></li><li><a href="http://blog.jverkamp.com/category/programming">Programming</a></li><li><a href="http://blog.jverkamp.com/category/programming/by-source/programming-praxis">Programming Praxis</a></li><li><a href="http://blog.jverkamp.com/category/programming/by-language/racket">Racket</a></li><li><a href="http://blog.jverkamp.com/category/programming/by-language/scheme">Scheme</a></li><li><a href="http://blog.jverkamp.com/category/programming/by-topic/web-development">Web Development</a></li></ul></span>
                        </div>

                        <hr />
                </header>
                <div class="entry-content">
                        <p><a href="http://programmingpraxis.com/2013/01/15/translate-csv-to-html/" title="Translate CSV to HTML">Yesterday's post</a> from Programming Praxis asks us to write a function that will read content formatted as <a href="https://en.wikipedia.org/wiki/comma-separated_values">comma-separated values</a> and output the result as an HTML table. Their solution uses the <a href="http://programmingpraxis.com/essays/#text-file-databases" title="Text file database">text file database library</a> that they posted about (which is a neat concept, you should check it out), but I think I'm going to work out the solution more directly.</p>
<!--more-->
<p>To make the problem more interesting, I wanted to add a few additional constraints:</p>
<ul>
<li>The parsed must be able to handle quoted expressions that may themselves contain commas or escaped quotes (example: "to be, or not \"to be\"" should parse as a single item)</li>
<li>Any expression that could be <em>read</em> as a Scheme expression should be</li>
<li>All other expressions should be read as strings</li>
</ul>
<p>So if we were to take this as a sample input file:</p>
<pre class="css"><code>this,is a,"test of awesome"
1,2,3.14
#&lt;void&gt;,"frog, \"neblins\"",#f</code></pre>
<p>The output should be a list of lists like so:</p>
<pre class="scheme"><code>'((this "is a" "test of awesome")
  (1 2 3.14)
  ("#&lt;void&gt;" "frog, \"neblins\"" #f)))</code></pre>
<p>Note how "is a" had to be parsed as a string because it was two objects, both quoted strings parsed correctly (including the escaped quotes and comma), and the numbers and <em>#f</em> all were converted into Scheme objects. Also, since <em>#<void></em> isn't 'readable', it should be read as a string.</p>
<p>From there, we'll want to output that as HTML, but we'll get to that in a bit. If you'd like to follow along with the full code though, you can do so on GitHub: <a href="https://github.com/jpverkamp/small-projects/blob/master/blog/csv-to-html.rkt" title="GitHub: csv to html source">csv to html source</a></p>
<p>My basic avenue of attack is to use a <a href="https://en.wikipedia.org/wiki/finite_state machine">finite state machine</a> to parse the input. I'm going to have four states:</p>
<ul>
<li>start -- when we're starting a line item</li>
<li>string -- while we're reading a string</li>
<li>string/escape -- immediately after an escape in a string</li>
<li>normal -- any non-string line item</li>
</ul>
<p>With these, we'll need to keep track of three additional things (all lists):</p>
<ul>
<li>lines -- all of the completed lines we've read thus far</li>
<li>current-line -- the progress we've made on the current line</li>
<li>current-block -- the progress we've made on the current line item</li>
</ul>
<p>All three will start out empty. So our basic code is going to look something like this:</p>
<pre class="scheme"><code>; read csv content from the current input stream
; try to parse each value as a Scheme value, on fail return a string
; make sure to correctly handle quoted strings
(define (read-csv)
  (let loop ([lines '()]
             [current-line '()]
             [current-block '()]
             [mode 'start]) ; start, string, string/escape, or normal
    ...)</code></pre>
<p>So far, so good. Although it does a whopping lot of nothing as of yet. Let's fix that.</p>
<p>First, we want to read the next character. Then we'll need to process it. The first case to consider will be if we're at the end of the file:</p>
<pre class="scheme"><code>...
(define next (read-char))
(cond
  ; eof, stop reading
  [(eof-object? next)
   (reverse (cons (reverse (cons (try-read (list-&gt;string (reverse current-block)))
                                 current-line))
                  lines))]
...</code></pre>
<p>For the moment, ignore the <em>try-read</em> function. That will do the work of trying to parse a string as a Scheme object and falling back to a string if it fails. Other than that, one additional thing to note is that all three of the lists mentioned above are being built backwards (that's just the nature of <a href="https://en.wikipedia.org/wiki/tail_recursion">tail recursion</a>; ask me why in the comments if you're curious).</p>
<p>That means when we're done with each block/line, we have to <em>reverse</em> it. You incur an <em>O(n)</em> cost, but compared to some of the other stuff we're doing, that'll be negligible. If you're really interested in performance, you'd probably want to read a line at a time into memory and split it using <em>substring</em>.</p>
<p>In any case, now that possibility is out of the way, the next to consider is whether we're in <em>string</em> mode or <em>normal</em> / non-string mode. That's actually probably the easiest state to deal with:</p>
<pre class="scheme"><code>...
; start in string or normal mode
[(eq? mode 'start)
 (loop lines current-line (cons next current-block) (if (eq? next #\") 'string 'normal))]
...</code></pre>
<p>All we have to do is check for an opening quote.</p>
<p>Next, dealing with string mode. Basically, we have three options. Either we continue with normal characters in the string, we find an escape character, or we end the string.</p>
<pre class="scheme"><code>...
      ; look for escaped characters in string mode
      [(and (eq? mode 'string) (eq? next #\\))
       (loop lines current-line (cons next current-block) 'string/escape)]

      ; read next character in escape mode
      [(eq? mode 'string/escape)
       (loop lines current-line (cons next current-block) 'string)]

      ; end the string in string mode (the next character must be a comma or newline)
      ; todo: deal with \r\n newlines
      [(and (eq? mode 'string) (eq? next #\"))
       (define done-block (try-read (list-&gt;string (reverse (cons next current-block)))))
       (define next-next (read-char))
       (cond
         [(eq? next-next #\,)
          (loop lines (cons done-block current-line) '() 'start)]
         [(eq? next-next #\newline)
          (define done-line (reverse (cons done-block current-line)))
          (loop (cons done-line lines) '() '() 'start)]
         [else
          (error 'read-csv "Invalid string literal, missing comma or newline")])]
...</code></pre>
<p>This is a bit more complicated, but only a bit. The interesting parts to note are that if we see an escape, we just skip over (buffering) the next character. That way, we can skip right past things like \". Technically, we could read ahead (like we have to do in the third part of this anyways) and skip the state entirely, but I think this way is cleaner.</p>
<p>To show the other way though, consider the third part where a string mode block ends. There are three possible endings here (each of which could be states, but I'm demonstrating both methods). Either you have a comma after the quote and you go on to another item on this line, you have a newline (I need to but haven't dealt with \r or \r\n <a href="https://en.wikipedia.org/wiki/line_endings">line endings</a>. For now, this is Unix (including OS X) only.), or you have an error. One interesting thing to note: this system actually allows for multiline strings. So these two would be equivalent:</p>
<pre class="css"><code>"hello
world"

"hello\nworld"</code></pre>
<p>Next, we have cases for the end of an item. These are basically the same as the string cases above, but I broke them out into their own cond cases this time.</p>
<pre class="scheme"><code>...
; end an item
[(and (eq? mode 'normal) (eq? next #\,))
 (define done-block (try-read (list-&gt;string (reverse current-block))))
 (loop lines (cons done-block current-line) '() 'start)]

; end a line
; todo: deal with \r\n
[(and (eq? mode 'normal) (eq? next #\newline))
 (define done-block (try-read (list-&gt;string (reverse current-block))))
 (define done-line (reverse (cons done-block current-line)))
 (loop (cons done-line lines) '() '() 'start)]
...</code></pre>
<p>Like I said, this is the same as before.</p>
<p>Finally, we have the default case. If nothing else happens, just buffer the character and keep reading. This should happen most of the time. Note that <em>mode</em> (the FSM state) is preserved. This is important.</p>
<pre class="scheme"><code>...
; buffer all other characters
[else
 (loop lines current-line (cons next current-block) mode)])))
...</code></pre>
<p>And there you have it. A fully functional CSV parser. You can try it out (although you'll need the definite for <em>try-read</em>, which I'll get to in a moment) like so:</p>
<pre class="scheme"><code>&gt; (with-input-from-string
   "Beth,12.75,0,mfg
   Dan,8.50,10,sales
   Kathy,11.40,30,sales
   Mark,12.75,40,mfg
   Mary,7.50,20,mfg
   Susie,10.30,25,acctg"
   read-csv)
'((Beth 12.75 0 mfg) (Dan 8.5 10 sales)
  (Kathy 11.4 30 sales) (Mark 12.75 40 mfg)
  (Mary 7.5 20 mfg) (Susie 10.3 25 acctg))</code></pre>
<p>Note how all of the names and positions were parsed as symbols. If you really wanted them as strings, you could just quote them:</p>
<pre class="scheme"><code>&gt; (with-input-from-string
   "\"Beth\",12.75,0,mfg"
   read-csv)
'(("Beth" 12.75 0 mfg))</code></pre>
<p>Now that I've showed that off sufficiently, what black magic is going on in that <em>try-read</em> function? Remember, the goal is to try to read the input as a single Scheme object. If that fails (for any reason) or if there is more than one object, just fall back and return the original string.</p>
<pre class="scheme"><code>; parse a block into a scheme object
; if that fails, just return the original string
(define (try-read block)
  (with-handlers ([exn? (lambda (err) block)])
    (with-input-from-string
     block
     (lambda ()
       (define result (read))
       (when (not (eof-object? (read)))
         (error 'try-read "unfinished"))
       result))))</code></pre>
<p>This is actually the first time I've worked with Racket's <code><a href="http://docs.racket-lang.org/search/index.html?q=exceptions">exceptions</a></code> and I have to say, they're actually pretty nice to work with. Just add an exception predicate (I used <em>exn?</em> to catch all of them) and say what that should return.</p>
<p>The last bit there, with the <em>(when (not (eof-object? ...)))</em> is to throw just such an exception if there's still more to read. I didn't have this originally, but that mean that something like this would happen:</p>
<pre class="scheme"><code>&gt; (with-input-from-string
   "hello world"
   read-csv)
'(hello)</code></pre>
<p>With the added code, you get a string as expected:</p>
<pre class="scheme"><code>&gt; (with-input-from-string
   "hello world"
   read-csv)
'(("hello world"))</code></pre>
<p>So that's all we need to parse the CSV files. What about the second half of that <a href="http://programmingpraxis.com/2013/01/15/translate-csv-to-html/" title="Translate CSV to HTML">original question</a> though? We still need to output an HTML table!</p>
<p>Well, actually that's by far the easier part. Just use <em>for</em> loops around <em>printf</em> statements.</p>
<pre class="scheme"><code>; write a list of lists to an html table
(define (csv-&gt;html csv)
  (with-output-to-string
   (lambda ()
     (printf "&lt;table class="table table-striped"&gt;\n")
     (for ([line (in-list csv)])
       (printf "  &lt;tr&gt;\n")
       (for ([item (in-list line)])
         (printf "    &lt;td&gt;~a&lt;/td&gt;\n" item))
       (printf "  &lt;/tr&gt;\n"))
     (printf "&lt;/table&gt;\n"))))</code></pre>
<p>It's barely even Racket anymore, but it is cleaner (in my opinion) than the purely functional solution I was working with earlier. I did use <em>with-output-to-string</em> to capture it as a string rather than printing it directly, which is neat. I think Scheme is by far that easiest language to do that in (rather than redirecting output at the shell level).</p>
<p>And that's actually all we need. One simple test run:</p>
<pre class="scheme"><code>&gt; (display
   (csv-&gt;html
    (with-input-from-string
     "Beth,12.75,0,mfg
   Dan,8.50,10,sales
   Kathy,11.40,30,sales
   Mark,12.75,40,mfg
   Mary,7.50,20,mfg
   Susie,10.30,25,acctg"
     read-csv)))
&lt;table class="table table-striped"&gt;
  &lt;tr&gt;
    &lt;td&gt;Beth&lt;/td&gt;
    &lt;td&gt;12.75&lt;/td&gt;
    &lt;td&gt;0&lt;/td&gt;
    &lt;td&gt;mfg&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Dan&lt;/td&gt;
    &lt;td&gt;8.5&lt;/td&gt;
    &lt;td&gt;10&lt;/td&gt;
    &lt;td&gt;sales&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Kathy&lt;/td&gt;
    &lt;td&gt;11.4&lt;/td&gt;
    &lt;td&gt;30&lt;/td&gt;
    &lt;td&gt;sales&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Mark&lt;/td&gt;
    &lt;td&gt;12.75&lt;/td&gt;
    &lt;td&gt;40&lt;/td&gt;
    &lt;td&gt;mfg&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Mary&lt;/td&gt;
    &lt;td&gt;7.5&lt;/td&gt;
    &lt;td&gt;20&lt;/td&gt;
    &lt;td&gt;mfg&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Susie&lt;/td&gt;
    &lt;td&gt;10.3&lt;/td&gt;
    &lt;td&gt;25&lt;/td&gt;
    &lt;td&gt;acctg&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;</code></pre>
<p>Bam. Done.</p>
<p>And there you have it, the ability to read CSV files and write them back out as HTML tables. I think I may actually put this in to replace the (relatively new) <a href="http://blog.jverkamp.com/wombat-ide/c211-csv-api/" title="Wombat API: (c211 csv)">(c211 csv)</a> library in Wombat. It handles quoted strings much more nicely (or at all).</p>
<p>As a final aside, yes. I realize this could be written much more 'concisely' if you remove the constraints on quoted items and trying to convert to Scheme objects:</p>
<pre class="scheme"><code>(require racket/string)

(define (csv-&gt;html csv)
  (printf "&lt;table class="table table-striped"&gt;\n")
  (for ([line (in-list (string-split csv "\n"))])
    (printf "  &lt;tr&gt;\n")
    (for ([item (in-list (string-split line ","))])
      (printf "    &lt;td&gt;~s&lt;/td&gt;\n" item))
    (printf "  &lt;/tr&gt;\n"))
  (printf "&lt;/table&gt;\n"))</code></pre>
<p>Example:</p>
<pre class="scheme"><code>&gt; (csv-&gt;html "Beth,12.75,0,mfg
Dan,8.50,10,sales
Kathy,11.40,30,sales
Mark,12.75,40,mfg
Mary,7.50,20,mfg
Susie,10.30,25,acctg")
&lt;table class="table table-striped"&gt;
  &lt;tr&gt;
    &lt;td&gt;"Beth"&lt;/td&gt;
    &lt;td&gt;"12.75"&lt;/td&gt;
    &lt;td&gt;"0"&lt;/td&gt;
    &lt;td&gt;"mfg"&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;"Dan"&lt;/td&gt;
    &lt;td&gt;"8.50"&lt;/td&gt;
    &lt;td&gt;"10"&lt;/td&gt;
    &lt;td&gt;"sales"&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;"Kathy"&lt;/td&gt;
    &lt;td&gt;"11.40"&lt;/td&gt;
    &lt;td&gt;"30"&lt;/td&gt;
    &lt;td&gt;"sales"&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;"Mark"&lt;/td&gt;
    &lt;td&gt;"12.75"&lt;/td&gt;
    &lt;td&gt;"40"&lt;/td&gt;
    &lt;td&gt;"mfg"&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;"Mary"&lt;/td&gt;
    &lt;td&gt;"7.50"&lt;/td&gt;
    &lt;td&gt;"20"&lt;/td&gt;
    &lt;td&gt;"mfg"&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;"Susie"&lt;/td&gt;
    &lt;td&gt;"10.30"&lt;/td&gt;
    &lt;td&gt;"25"&lt;/td&gt;
    &lt;td&gt;"acctg"&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;</code></pre>
<p>But where's the fun in that? :)</p>
<p>If you'd like to download the full code for today's post, you can do so on GitHub: <a href="https://github.com/jpverkamp/small-projects/blob/master/blog/csv-to-html.rkt" title="GitHub: csv to html source">csv to html source</a></p>
                </div>
                <div class="entry-footnotes">
                        <div id="footnotes"><ol></ol></div>
                </div>

                <div id="disqus_thread"></div>
<script type="text/javascript">
var disqus_shortname = "jverkamp";
var disqus_title = "Translate CSV to HTML";
var disqus_url = "http://blog.jverkamp.com/2013/01/16/translate-csv-to-html/";
/* * * DON'T EDIT BELOW THIS LINE * * */
(function() {
  var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
  dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js';
  (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
})();
</script>
<noscript>Please enable JavaScript to view the <a href="http://disqus.com/?ref_noscript">comments powered by Disqus.</a></noscript>
<a href="http://disqus.com" class="dsq-brlink">comments powered by <span class="logo-disqus">Disqus</span></a>
        </article>

        <footer class="container" role="contentinfo">
                <nav class="navbar navbar-default" role="navigation"><ul class="nav navbar-nav nav-justified"><li><a href="http://blog.jverkamp.com/2013/01/15/all-good-things">← All good things...</a></li><li><a href="http://blog.jverkamp.com/category/archives">Archives</a></li><li><a href="http://blog.jverkamp.com/2013/01/17/decoding-escaped-unicode-characters">Decoding escaped Unicode strings →</a></li></ul><ul class="nav navbar-nav nav-justified"><li><a href="http://blog.jverkamp.com/2013/01/06/wombat-ide-its-alive-bug-fixes">← Wombat IDE - It's Alive! (bug fixes)</a></li><li><a href="http://blog.jverkamp.com/category/programming">Programming</a></li><li><a href="http://blog.jverkamp.com/2013/01/17/decoding-escaped-unicode-characters">Decoding escaped Unicode strings →</a></li></ul></nav>

                <div class="legal">
                        <a href="http://blog.jverkamp.com/feed/atom.xml">feed <img style="border: 0;" src="http://blog.jverkamp.com/rss.png" /></a><br />
                        All posts unless otherwise mentioned are licensed under <a rel="license" href="http://creativecommons.org/licenses/by-nc-sa/3.0/deed.en_US"><img alt="Creative Commons License" style="border-width:0" src="http://i.creativecommons.org/l/by-nc-sa/3.0/80x15.png" /></a><br />
                        Any source code unless otherwise mentioned is licensed under the <a href="http://directory.fsf.org/wiki/License:BSD_3Clause">3 clause BSD license</a>
                </div>
        </footer>

<script>
(function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
(i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
})(window,document,'script','//www.google-analytics.com/analytics.js','ga');

ga('create', 'UA-53688146-1', 'auto');
ga('send', 'pageview');
</script>
</body>
</html>