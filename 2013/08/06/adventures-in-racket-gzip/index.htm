<!DOCTYPE html>
<html>
<head>
        
        

        <title>Adventures in Racket: gzip | jverkamp.com | John-Paul Verkamp</title>

        <script src="//ajax.googleapis.com/ajax/libs/jquery/1.11.0/jquery.min.js"></script>

        <link rel="stylesheet" href="//netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css" />
        <link rel="stylesheet" href="//netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap-theme.min.css" />
        <script src="//netdna.bootstrapcdn.com/bootstrap/3.1.1/js/bootstrap.min.js"></script>

        <link rel="stylesheet" href="//cdnjs.cloudflare.com/ajax/libs/ekko-lightbox/3.0.3a/ekko-lightbox.min.css" />
        <script src="//cdnjs.cloudflare.com/ajax/libs/ekko-lightbox/3.0.3a/ekko-lightbox.min.js"></script>

        <script src="//cdnjs.cloudflare.com/ajax/libs/jquery.transit/0.9.9/jquery.transit.min.js"></script>

        <!-- Highlight.js for syntax highlighting -->
        <link rel="stylesheet" href="/highlight/styles/tomorrow-night.css" />
        <script src="/highlight/highlight.pack.js"></script>

        <!-- MathJax for LaTeX support -->
        <script src="//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML"></script>

        <!-- nanoGallery for Flickr Galleries -->
        <link rel="stylesheet" href="//cdnjs.cloudflare.com/ajax/libs/nanogallery/4.4.2/css/themes/light/nanogallery_light.css" />
        <script type="text/javascript" src="//cdnjs.cloudflare.com/ajax/libs/nanogallery/4.4.2/jquery.nanogallery.min.js"></script>

        <!-- Any custom CSS or JS that I've written; this should be kept minimal -->
        <link rel="stylesheet" href="/custom.css" />
        <script src="/custom.js"></script>

        <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
</head>
<body>
        <header class="container">
        <nav class="navbar navbar-default" role="navigation">
  <div class="container-fluid">
    <!-- Brand and toggle get grouped for better mobile display -->
    <div class="navbar-header">
      <button type="button" class="navbar-toggle" data-toggle="collapse" data-target="#bs-example-navbar-collapse-1">
        <span class="sr-only">Toggle navigation</span>
        <span class="icon-bar"></span>
        <span class="icon-bar"></span>
        <span class="icon-bar"></span>
      </button>
      <a class="navbar-brand" href="http://blog.jverkamp.com"><span style="color: green;">jv</span>erkamp.com</a>
    </div>

    <!-- Collect the nav links, forms, and other content for toggling -->
    <div class="collapse navbar-collapse" id="bs-example-navbar-collapse-1">
      <ul class="nav navbar-nav"><li class="dropdown"><a href="http://blog.jverkamp.com/category/archives" class="dropdown-toggle">Archives<span class="caret"></span></a><ul class="dropdown-menu"><li><a href="http://blog.jverkamp.com/category/archives/2004">2004</a></li><li><a href="http://blog.jverkamp.com/category/archives/2005">2005</a></li><li><a href="http://blog.jverkamp.com/category/archives/2006">2006</a></li><li><a href="http://blog.jverkamp.com/category/archives/2007">2007</a></li><li><a href="http://blog.jverkamp.com/category/archives/2008">2008</a></li><li><a href="http://blog.jverkamp.com/category/archives/2009">2009</a></li><li><a href="http://blog.jverkamp.com/category/archives/2010">2010</a></li><li><a href="http://blog.jverkamp.com/category/archives/2011">2011</a></li><li><a href="http://blog.jverkamp.com/category/archives/2012">2012</a></li><li><a href="http://blog.jverkamp.com/category/archives/2013">2013</a></li><li><a href="http://blog.jverkamp.com/category/archives/2014">2014</a></li></ul></li><li class="dropdown"><a href="http://blog.jverkamp.com/category/other" class="dropdown-toggle">Other<span class="caret"></span></a><ul class="dropdown-menu"><li><a href="http://blog.jverkamp.com/category/other/board-game-reviews">Board Game Reviews</a></li><li><a href="http://blog.jverkamp.com/category/other/cooking">Cooking</a></li><li><a href="http://blog.jverkamp.com/category/other/movie-reviews">Movie Reviews</a></li></ul></li><li class="dropdown"><a href="http://blog.jverkamp.com/category/photography" class="dropdown-toggle">Photography<span class="caret"></span></a><ul class="dropdown-menu"><li><a href="http://blog.jverkamp.com/category/photography/dp-challenge">DP Challenge</a></li><li><a href="http://blog.jverkamp.com/category/photography/photosets">Photosets</a></li><li><a href="http://blog.jverkamp.com/category/photography/photosynth">Photosynth</a></li></ul></li><li class="dropdown"><a href="http://blog.jverkamp.com/category/programming" class="dropdown-toggle">Programming<span class="caret"></span></a><ul class="dropdown-menu"><li><a href="http://blog.jverkamp.com/category/programming/by-language">By Language</a></li><li><a href="http://blog.jverkamp.com/category/programming/by-project">By Project</a></li><li><a href="http://blog.jverkamp.com/category/programming/by-source">By Source</a></li><li><a href="http://blog.jverkamp.com/category/programming/by-topic">By Topic</a></li><li><a href="http://blog.jverkamp.com/category/programming/libraries">Libraries</a></li></ul></li><li class="dropdown"><a href="http://blog.jverkamp.com/category/research" class="dropdown-toggle">Research<span class="caret"></span></a><ul class="dropdown-menu"><li><a href="http://blog.jverkamp.com/category/research/by-topic">By Topic</a></li><li><a href="http://blog.jverkamp.com/category/research/publications">Publications</a></li></ul></li><li class="dropdown"><a href="http://blog.jverkamp.com/category/writing" class="dropdown-toggle">Writing<span class="caret"></span></a><ul class="dropdown-menu"><li><a href="http://blog.jverkamp.com/category/writing/by-genre">By Genre</a></li><li><a href="http://blog.jverkamp.com/category/writing/nanowrimo">NaNoWriMo</a></li><li><a href="http://blog.jverkamp.com/category/writing/novels">Novels</a></li><li><a href="http://blog.jverkamp.com/category/writing/other">Other</a></li><li><a href="http://blog.jverkamp.com/category/writing/short-stories">Short Stories</a></li></ul></li></ul>

      <form action="http://www.google.com/search" method="get" onSubmit="(function(obj){obj.q.value='site:blog.jverkamp.com '+obj.qfront.value;})(this)" class="navbar-form navbar-right" role="search">
        <div class="form-group">
          <input name="q" type="hidden" />
          <input name="qfront" type="text" class="form-control" placeholder="Search" />
          <button type="submit" class="btn btn-default" value="Search">Search</button>
        </p>
      </form>
    </div><!-- /.navbar-collapse -->
  </div><!-- /.container-fluid -->
</nav>
        </header>

        <article class="container">
                <header>
                        <h1 class="entry-title">Adventures in Racket: gzip</h1>

                        <div class="entry-meta">
                                <span class="posted-on"><time class="entry-date" datetime="2013-08-06"><span class="year">2013</span> <span class="month">Aug</span> <span class="day">6</span></time></span>
                                <span class="tags"><ul class="tag-list list-inline"><li><a href="http://blog.jverkamp.com/category/programming/by-topic/file-formats/gzip">Gzip</a></li><li><a href="http://blog.jverkamp.com/category/programming">Programming</a></li><li><a href="http://blog.jverkamp.com/category/programming/libraries">Libraries</a></li><li><a href="http://blog.jverkamp.com/category/programming/by-language/scheme">Scheme</a></li><li><a href="http://blog.jverkamp.com/category/programming/by-language/racket">Racket</a></li></ul></span>
                        </div>

                        <hr />
                </header>
                <div class="entry-content">
                        <p>In my research, I work with a lot of rather large text files--on the order of gigabytes if not terabytes per file. Since they're plain text, they're generally rather compressible though, so it makes sense to <code>gzip</code> them while they're on disk. The drawback though comes when you're working with them. There are a few options though.</p>
<!--more-->
<p>First, you could <code>gunzip</code> the files before use and <code>gzip</code> them again when you're done:</p>
<pre class="bash"><code>gunzip data.txt.gz
analyze data.txt
gzip -9 data.txt</code></pre>
<p>It's simple, it's straight forward, but it requires a heck of a lot more disk space. Even if you only do one file at a time, you still need to have at least enough to deal with the files. In addition, if you could possibly bail out early when dealing with the file, you can't here. You'll have to decompress the entire file, then re-compress it in turn.</p>
<p>The next option would be to use your Unix-fu:<code>gunzip</code> it into a pipe then directly into the program, something like this:</p>
<pre class="bash"><code>gunzip -c data.txt.gz &gt; analyze</code></pre>
<p>It has the same advantages of the previous form in that it's easy to deal with, but we lose a bit of flexibility. For example, what if we want to process more than one file?</p>
<pre class="bash"><code>gunzip -c data.*.txt.gz &gt; analyze</code></pre>
<p>This works, but we lose the delineation between files. If that's important, this is a no go. Also, we still have to decode the entire file.</p>
<p>Okay, so what about to do it directly in the script? Traditionally, I write a lot of scripts in Python. It's quick and generally painless to write and I know the language particularly well. If I wanted to process gzipped files, all I would need is something like this:</p>
<pre class="python"><code>import gzip
with gzip.open('data.txt.gz', 'r') as fin:
    for line in fin:
         print(line)</code></pre>
<p>Quick and easy. In addition, <code>gzip.open</code> returns a file-like object that's only read as we need it. That way, we can only have (roughly) one line in memory at a time. That's exactly what I want when dealing with large files.</p>
<p>More recently though though, I've been writing a lot of scripts in Racket. For slightly more in depth scripts, it has a lot going for it. Racket is<code><a href="http://docs.racket-lang.org/search/index.html?q=batteries included">batteries included</a></code>, nicely functional<span class="footnote"><sup><a href="#footnote-1">[1]</a></sup></span>, and can be much more parallelized to multi-core machines without running into Python's pesky <a href="https://en.wikipedia.org/wiki/Global_Interpreter Lock">Global Interpreter Lock</a><span class="footnote"><sup><a href="#footnote-2">[2]</a></sup></span>.</p>
<p>So how can we write the same code in Racket?</p>
<p>Unfortunately, it's not quite as easy. There is<code><a href="http://docs.racket-lang.org/search/index.html?q=file/unzip">file/unzip</a></code>module, but it doesn't really have a nice <code>with-input-from-gzipped-file</code> or <code>with-gunzip</code> function. The closest thing we have appears to be <code>gunzip-through-ports</code>. It takes two ports,<code>in</code> and <code>out</code>, reading gzipped data from<code>in</code>and writing decompressed data to <code>out</code>. But how do we make use of that?</p>
<p>It took me a while to find what I was looking for, but finally I came across<code><a href="http://docs.racket-lang.org/search/index.html?q=pipes">pipes</a></code>. They're essentially equivalent to Unix-like pipes<span class="footnote"><sup><a href="#footnote-3">[3]</a></sup></span>, forming a sort of bridge between two streams. So theoretically, we can open the file, use <code>gunzip-through-ports</code> to attach it to the pipe, and then read from the other end. Something like this:</p>
<pre class="scheme"><code>(define (with-gunzip thunk)
 (define-values (pipe-from pipe-to) (make-pipe))
 (gunzip-through-ports (current-input-port) pipe-to)
  (parameterize ([current-input-port pipe-from])
    (thunk))
 (thunk))</code></pre>
<p>Parameterize will allow us to redirect the <code>current-input-port</code> and automatically set it back when we're done, even if we bail out with an error.</p>
<p>To use it, we would write code like this:</p>
<pre class="scheme"><code>(with-input-from-file "data.txt.gz"
  (λ ()
    (with-gunzip
      (λ ()
        (for ([i (in-naturals)]
              [line (in-lines)])
          (printf "line ~a: ~a\n" i line))))))</code></pre>
<p>It actually works pretty well, but unfortunately it doesn't work entirely. There are at least three issues that we're going to want to deal with:</p>
<ul>
<li>It doesn't terminate; once the file has been read it hangs in <code>in-lines</code></li>
<li>It doesn't close the ports; if you try to use the same file, you'll get an error</li>
<li>There's no error handling; ugly things happen if you pass it a non-gzipped stream for example</li>
<li>There's no buffering; the entire file is gunzipped in memory (if possible)</li>
</ul>
<p>Let's take each one in order.</p>
<p>First, we have termination. Based on <a href="http://lists.racket-lang.org/users/archive/2013-August/058852.html">a response from Ryan Culpepper</a> on the Racket mailing list, the problem is that <code>gunzip-through-ports</code> doesn't actually close the port. This means that an <code>eof-object?</code> is never sent through the <code>pipe</code> to <code>in-lines</code>.</p>
<p>So at some point we need to close the port. The problem is: when? If we close it at the end as one might expect, it won't work. Since the code hangs in the <code>for</code>, we'll never get to it. So we have to have it before that at least. Let's true putting it right after the <code>gunzip-through-ports</code> line<span class="footnote"><sup><a href="#footnote-4">[4]</a></sup></span>:</p>
<pre class="scheme"><code>(define (with-gunzip thunk)
  (define-values (pipe-from pipe-to) (make-pipe))
  (gunzip-through-ports (current-input-port) pipe-to)
  (close-output-port pipe-to)
  (parameterize ([current-input-port pipe-from])
    (thunk))
  (close-input-port pipe-from))</code></pre>
<p>It turns out, this actually works perfectly. It was counter intuitive to me at first, but then I ran some timing tests. It turns out that the <code>pipe</code> and <code>gunzip-through-ports</code> aren't actually buffering anything. On the latter call, everything that was on <code>current-input-port</code> is gunzipped and written through <code>pipe-to</code> to <code>pipe-from</code>. So we can go ahead and close <code>pipe-to</code> right then. Better yet, we've actually finished the second point as well. Everything should now be closed by the time <code>with-gunzip</code> exits.</p>
<p>This leads us directly to the third problem though. What do we do if we have an error? Since control bails out, the ports will never be closed. Let's check out Racket's <code><a href="http://docs.racket-lang.org/search/index.html?q=exception model">exception model</a></code>.</p>
<p>Theoretically, we're looking for <code>with-handlers</code> looking specifically for a <code>exn:fail?</code> condition (the one raised internally by <code>error</code>). Something like this should do what we need:</p>
<pre class="scheme"><code>(define (with-gunzip thunk)
  (define-values (pipe-from pipe-to) (make-pipe))
  (with-handlers ([exn:fail?
                   (λ (err)
                     (close-output-port pipe-to)
                     (close-input-port pipe-from)
                     (raise err))])
    (gunzip-through-ports (current-input-port) pipe-to)
    (close-output-port pipe-to)
    (parameterize ([current-input-port pipe-from])
      (thunk))
    (close-input-port pipe-from)))</code></pre>
<p><del>This way, we close the two ports and then pass along the error. Originally, I just used <code>(raise err)</code>, but that revealed the guts of my function. I don't mind if people go looking, but I don't want that to be necessary. Using <code>exn-message</code> allows us to pass along the message but not the original error. So if we try do do this:</del></p>
<p><b>Edit 6 Aug 13:</b>: Based on <a href="http://lists.racket-lang.org/users/archive/2013-August/058858.html">this message from Robby Findler</a>, <code>raise</code> is the better option since it will preserve the stack trace into the code I'm using. Plus it's cleaner. Mostly, I got confused when originally using <code>raise</code> since the error didn't appear to be caught (since of course I was re-raising the original).</p>
<pre class="scheme"><code>(with-input-from-file "not-gzipped.txt"
  (λ ()
    (with-gunzip
      (λ ()
        ...))))</code></pre>
<p>We'll get this error:</p>
<pre><span style="color: red;">with-gunzip: gnu-unzip: bad header</span></pre>
<p>It looks a bit strange with the nested colons, but it gives us exactly what we want. Better yet, the ports are correctly being closed.</p>
<p>All that leaves us is buffering. Originally, my biggest problem with this code was that it read the entire file into memory at once. With files in the tens of gigabytes, that could be a problem... So how do we fix it? <a href="http://lists.racket-lang.org/users/archive/2013-August/058852.html">Mailing list</a> to the rescue once again! Essentially, I missed an optional argument to <code>make-pipe</code>. If you pass <code>#f</code> (the default), there's no buffer. But instead, you can pass an <code>exact-positive-integer?</code> which will be the buffer size in bytes.</p>
<p>We don't necessary want to assume that the user either wants buffering or wants a certain size, so we'll make it configurable. Quick and easy:</p>
<pre class="scheme"><code>(define (with-gunzip thunk #:buffer-size [buffer-size #f])
  (define-values (pipe-from pipe-to) (make-pipe buffer-size))
  (with-handlers ([exn:fail?
                   (λ (err)
                     (close-output-port pipe-to)
                     (close-input-port pipe-from)
                     (raise err))])
    (gunzip-through-ports (current-input-port) pipe-to)
    (close-output-port pipe-to)
    (parameterize ([current-input-port pipe-from])
      (thunk))
    (close-input-port pipe-from)))</code></pre>
<p>It's starting to get a bit more complicated, but it works great. If we want a buffer of 1 megabyte:</p>
<pre class="scheme"><code>(with-input-from-file "data.txt.gz"
  (λ ()
    (with-gunzip
      (λ ()
        (for ([i (in-naturals)]
              [line (in-lines)])
          (printf "line ~a: ~a\n" i line)))
      #:buffer-size (* 1024 1024))))</code></pre>
<p>There is one problem though, the user can pass absolutely anything to <code>#:buffer-size</code>. Let's use a Racket feature I probably don't take as much advantage of as I probably should: <code><a href="http://docs.racket-lang.org/search/index.html?q=contracts">contracts</a></code>. Essentially, they work like <a href="https://en.wikipedia.org/wiki/type_signatures">Type signature</a>. It looks a little ugly, but they're fairly easy to work with:</p>
<pre class="scheme"><code>(provide/contract
 (with-gunzip
   (-&gt;* ((-&gt; any))
        (#:buffer-size (or/c false? exact-positive-integer?))
        any)))</code></pre>
<p>Breaking this apart, we have a function (<code>->*</code>, the <code>*</code> signifies optional parameters) which tasks a required thunk--<code>(-> any)</code>, required because it's in the first list--and an optional (because it's in the second list) keyword (<code>#:...</code>) parameter that's either <code>false?</code> or the same <code>exact-positive-integer?</code> that <code>make-pipe</code> is expecting>. After all that, we'll return some generic data value (<code>any</code>). This way, we can't do this:</p>
<pre class="scheme"><code>&gt; (with-gunzip (λ () (read)) #:buffer-size 'frog)</code></pre>
<pre><span style="color: red;">with-gunzip: contract violation
  expected: (or/c false? exact-positive-integer?)
  given: 'frog</span></pre>
<p>Exactly what we wanted!</p>
<p>Well, that's almost it. One thing we can still do is write a parallel <code>with-gzip</code> function. We'll use <code>#f</code> to ignore the filename and the current system time for timestamp (since gzipped files require those), but other than that, everything is pretty much exactly the same:</p>
<pre class="scheme"><code>(provide/contract
 (with-gzip
  (-&gt; (-&gt; any) #:buffer-size [or/c false? exact-positive-integer?] any)))

(define (with-gzip thunk #:buffer-size [buffer-size #f])
  (define-values (pipe-from pipe-to) (make-pipe buffer-size))
  (with-handlers ([exn:fail?
                   (λ (err)
                     (close-output-port pipe-to)
                     (close-input-port pipe-from)
                     (raise err))])
    (gzip-through-ports (current-input-port) pipe-to #f (current-seconds))
    (close-output-port pipe-to)
    (parameterize ([current-input-port pipe-from])
      (thunk))
    (close-input-port pipe-from)))</code></pre>
<p>We can test it by using both in sequence:</p>
<pre class="scheme"><code>(define input "This is a test: The duck quacks at midnight...")

(printf "input: ~s\n" input)

(define gzipped
  (with-output-to-bytes
   (λ ()
     (with-input-from-string input
      (λ ()
        (with-gzip
         (λ ()
           (display (port-&gt;bytes (current-input-port))))))))))

(printf "gzipped: ~s\n" gzipped)

(define gunzipped
  (with-output-to-string
   (λ ()
     (with-input-from-bytes gzipped
      (λ ()
        (with-gunzip
         (λ ()
           (display (port-&gt;string (current-input-port))))))))))

(printf "gunzipped: ~s\n" gunzipped)</code></pre>
<p>The test is a but contrived and the nested thunks are a bit ugly, but it works:</p>
<pre class="text"><code>input: "This is a test: The duck quacks at midnight..."
gzipped: #"\37\213\b\0\336u\0R\0\3\v\311\310,V\0\242D\205\222\324\342\22+\205\220\214T\205\224\322\344l\205\302\322\304\344l\240x\211BnfJ^fzF\211\236\236\36\0G7\244\232.\0\0\0"
gunzipped: "This is a test: The duck quacks at midnight..."</code></pre>
<p>Good to go!</p>
<p>Eventually, I'll put it on PLaneT, but for now it's available on GitHub: <a href="https://github.com/jpverkamp/small-projects/blob/master/blog/with-gzip.rkt">with-gzip</a></p>
<p><b>Edit 6 Aug 2013:</b> Robby Findler had <a href="http://lists.racket-lang.org/users/archive/2013-August/058858.html">another suggestion</a> on the mailing list: rather than using <code>with-handlers</code>, try <code>dynamic-wind</code>. Essentially, <code>dynamic-wind</code> takes three thunks: pre, value, and post. It will call the pre-thunk when control is passed to it, then the value-thunk, then the post-thunk, returning whatever the value-thunk would have. The best part though is that if control exits for other reasons (say, an error), post-thunk will still be called. This way we can handle errors without error handling. If we wanted to turn that into code, we have something like this:</p>
<pre class="scheme"><code>(define (with-gunzip thunk #:buffer-size [buffer-size #f])
  (define-values (pipe-from pipe-to) (make-pipe buffer-size))
  (dynamic-wind
   void
   (λ ()
     (thread
      (λ ()
        (gunzip-through-ports (current-input-port) pipe-to)
        (close-output-port pipe-to)))
     (parameterize ([current-input-port pipe-from])
       (thunk)))
   (λ ()
     (unless (port-closed? pipe-to) (close-output-port pipe-to))
     (unless (port-closed? pipe-from) (close-input-port pipe-from)))))</code></pre>
<p>It's nice and clean, even correctly dealing with closing the pipe whether or not things work correctly. The <code>thread</code> there helps with reading. Without it, <code>gunzip-through-ports</code> will block, depending on how much it is trying to read. This way, it can run in parallel as needed.</p>
                </div>
                <div class="entry-footnotes">
                        <div id="footnotes"><ol><li><a name="footnote-1"></a>Yes, I know I <em>can</em> write functional code in Python. I often do. It's just more natural in Racket</li><li><a name="footnote-2"></a>Using<code><a href="http://docs.racket-lang.org/search/index.html?q=places">places</a></code>;<code><a href="http://docs.racket-lang.org/search/index.html?q=threads">threads</a></code>run in a single OS thread and thus have the same problem</li><li><a name="footnote-3"></a>Although they're implented without them</li><li><a name="footnote-4"></a>While we're at it, we'll go ahead and close <code>pipe-from</code> as well</li></ol></div>
                </div>

                <div id="disqus_thread"></div>
<script type="text/javascript">
var disqus_shortname = "jverkamp";
var disqus_title = "Adventures in Racket: gzip";
var disqus_url = "http://blog.jverkamp.com/2013/08/06/adventures-in-racket-gzip/";
/* * * DON'T EDIT BELOW THIS LINE * * */
(function() {
  var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
  dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js';
  (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
})();
</script>
<noscript>Please enable JavaScript to view the <a href="http://disqus.com/?ref_noscript">comments powered by Disqus.</a></noscript>
<a href="http://disqus.com" class="dsq-brlink">comments powered by <span class="logo-disqus">Disqus</span></a>
        </article>

        <footer class="container" role="contentinfo">
                <nav class="navbar navbar-default" role="navigation"><ul class="nav navbar-nav nav-justified"><li><a href="http://blog.jverkamp.com/2013/08/06/authorship-attribution-part-3">← Authorship attribution: Part 3</a></li><li><a href="http://blog.jverkamp.com/category/archives">Archives</a></li><li><a href="http://blog.jverkamp.com/2013/08/13/usenixfoci-2013-five-incidents-one-theme-twitter-spam-as-a-weapon-to-drown-voices-of-protest">Usenix/FOCI 2013 -- Five incidents, one theme:  Twitter spam as a weapon to drown voices of protest →</a></li></ul><ul class="nav navbar-nav nav-justified"><li><a href="http://blog.jverkamp.com/2013/08/06/authorship-attribution-part-3">← Authorship attribution: Part 3</a></li><li><a href="http://blog.jverkamp.com/category/programming">Programming</a></li><li><a href="http://blog.jverkamp.com/2013/08/13/usenixfoci-2013-five-incidents-one-theme-twitter-spam-as-a-weapon-to-drown-voices-of-protest">Usenix/FOCI 2013 -- Five incidents, one theme:  Twitter spam as a weapon to drown voices of protest →</a></li></ul></nav>

                <div class="legal">
                        All posts unless otherwise mentioned are licensed under <a rel="license" href="http://creativecommons.org/licenses/by-nc-sa/3.0/deed.en_US"><img alt="Creative Commons License" style="border-width:0" src="http://i.creativecommons.org/l/by-nc-sa/3.0/80x15.png" /></a><br />
                        Any source code unless otherwise mentioned is licensed under the <a href="http://directory.fsf.org/wiki/License:BSD_3Clause">3 clause BSD license</a>
                </div>
        </footer>

<script>
(function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
(i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
})(window,document,'script','//www.google-analytics.com/analytics.js','ga');

ga('create', 'UA-53688146-1', 'auto');
ga('send', 'pageview');
</script>
</body>
</html>