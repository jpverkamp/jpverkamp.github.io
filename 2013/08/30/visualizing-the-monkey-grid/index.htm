<!DOCTYPE html>
<html>
<head>
        
        

        <title>Visualizing the Monkey Grid | jverkamp.com | John-Paul Verkamp</title>

        <script src="//ajax.googleapis.com/ajax/libs/jquery/1.11.0/jquery.min.js"></script>

        <link rel="stylesheet" href="//netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css" />
        <link rel="stylesheet" href="//netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap-theme.min.css" />
        <script src="//netdna.bootstrapcdn.com/bootstrap/3.1.1/js/bootstrap.min.js"></script>

        <link rel="stylesheet" href="//cdnjs.cloudflare.com/ajax/libs/ekko-lightbox/3.0.3a/ekko-lightbox.min.css" />
        <script src="//cdnjs.cloudflare.com/ajax/libs/ekko-lightbox/3.0.3a/ekko-lightbox.min.js"></script>

        <script src="//cdnjs.cloudflare.com/ajax/libs/jquery.transit/0.9.9/jquery.transit.min.js"></script>

        <!-- Highlight.js for syntax highlighting -->
        <link rel="stylesheet" href="/highlight/styles/tomorrow-night.css" />
        <script src="/highlight/highlight.pack.js"></script>

        <!-- MathJax for LaTeX support -->
        <script src="//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML"></script>

        <!-- nanoGallery for Flickr Galleries -->
        <link rel="stylesheet" href="//cdnjs.cloudflare.com/ajax/libs/nanogallery/4.4.2/css/themes/light/nanogallery_light.css" />
        <script type="text/javascript" src="//cdnjs.cloudflare.com/ajax/libs/nanogallery/4.4.2/jquery.nanogallery.min.js"></script>

        <!-- Any custom CSS or JS that I've written; this should be kept minimal -->
        <link rel="stylesheet" href="/custom.css" />
        <script src="/custom.js"></script>

        <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
</head>
<body>
        <header class="container">
        <nav class="navbar navbar-default" role="navigation">
  <div class="container-fluid">
    <!-- Brand and toggle get grouped for better mobile display -->
    <div class="navbar-header">
      <button type="button" class="navbar-toggle" data-toggle="collapse" data-target="#bs-example-navbar-collapse-1">
        <span class="sr-only">Toggle navigation</span>
        <span class="icon-bar"></span>
        <span class="icon-bar"></span>
        <span class="icon-bar"></span>
      </button>
      <a class="navbar-brand" href="http://blog.jverkamp.com"><span style="color: green;">jv</span>erkamp.com</a>
    </div>

    <!-- Collect the nav links, forms, and other content for toggling -->
    <div class="collapse navbar-collapse" id="bs-example-navbar-collapse-1">
      <ul class="nav navbar-nav"><li class="dropdown"><a href="http://blog.jverkamp.com/category/archives" class="dropdown-toggle">Archives<span class="caret"></span></a><ul class="dropdown-menu"><li><a href="http://blog.jverkamp.com/category/archives/2004">2004</a></li><li><a href="http://blog.jverkamp.com/category/archives/2005">2005</a></li><li><a href="http://blog.jverkamp.com/category/archives/2006">2006</a></li><li><a href="http://blog.jverkamp.com/category/archives/2007">2007</a></li><li><a href="http://blog.jverkamp.com/category/archives/2008">2008</a></li><li><a href="http://blog.jverkamp.com/category/archives/2009">2009</a></li><li><a href="http://blog.jverkamp.com/category/archives/2010">2010</a></li><li><a href="http://blog.jverkamp.com/category/archives/2011">2011</a></li><li><a href="http://blog.jverkamp.com/category/archives/2012">2012</a></li><li><a href="http://blog.jverkamp.com/category/archives/2013">2013</a></li><li><a href="http://blog.jverkamp.com/category/archives/2014">2014</a></li></ul></li><li class="dropdown"><a href="http://blog.jverkamp.com/category/other" class="dropdown-toggle">Other<span class="caret"></span></a><ul class="dropdown-menu"><li><a href="http://blog.jverkamp.com/category/other/board-game-reviews">Board Game Reviews</a></li><li><a href="http://blog.jverkamp.com/category/other/cooking">Cooking</a></li><li><a href="http://blog.jverkamp.com/category/other/movie-reviews">Movie Reviews</a></li></ul></li><li class="dropdown"><a href="http://blog.jverkamp.com/category/photography" class="dropdown-toggle">Photography<span class="caret"></span></a><ul class="dropdown-menu"><li><a href="http://blog.jverkamp.com/category/photography/dp-challenge">DP Challenge</a></li><li><a href="http://blog.jverkamp.com/category/photography/photosets">Photosets</a></li><li><a href="http://blog.jverkamp.com/category/photography/photosynth">Photosynth</a></li></ul></li><li class="dropdown"><a href="http://blog.jverkamp.com/category/programming" class="dropdown-toggle">Programming<span class="caret"></span></a><ul class="dropdown-menu"><li><a href="http://blog.jverkamp.com/category/programming/by-language">By Language</a></li><li><a href="http://blog.jverkamp.com/category/programming/by-project">By Project</a></li><li><a href="http://blog.jverkamp.com/category/programming/by-source">By Source</a></li><li><a href="http://blog.jverkamp.com/category/programming/by-topic">By Topic</a></li><li><a href="http://blog.jverkamp.com/category/programming/libraries">Libraries</a></li></ul></li><li class="dropdown"><a href="http://blog.jverkamp.com/category/research" class="dropdown-toggle">Research<span class="caret"></span></a><ul class="dropdown-menu"><li><a href="http://blog.jverkamp.com/category/research/by-topic">By Topic</a></li><li><a href="http://blog.jverkamp.com/category/research/publications">Publications</a></li></ul></li><li class="dropdown"><a href="http://blog.jverkamp.com/category/writing" class="dropdown-toggle">Writing<span class="caret"></span></a><ul class="dropdown-menu"><li><a href="http://blog.jverkamp.com/category/writing/by-genre">By Genre</a></li><li><a href="http://blog.jverkamp.com/category/writing/nanowrimo">NaNoWriMo</a></li><li><a href="http://blog.jverkamp.com/category/writing/novels">Novels</a></li><li><a href="http://blog.jverkamp.com/category/writing/other">Other</a></li><li><a href="http://blog.jverkamp.com/category/writing/short-stories">Short Stories</a></li></ul></li></ul>

      <form action="http://www.google.com/search" method="get" onSubmit="(function(obj){obj.q.value='site:blog.jverkamp.com '+obj.qfront.value;})(this)" class="navbar-form navbar-right" role="search">
        <div class="form-group">
          <input name="q" type="hidden" />
          <input name="qfront" type="text" class="form-control" placeholder="Search" />
          <button type="submit" class="btn btn-default" value="Search">Search</button>
        </p>
      </form>
    </div><!-- /.navbar-collapse -->
  </div><!-- /.container-fluid -->
</nav>
        </header>

        <article class="container">
                <header>
                        <h1 class="entry-title">Visualizing the Monkey Grid</h1>

                        <div class="entry-meta">
                                <span class="posted-on"><time class="entry-date" datetime="2013-08-30"><span class="year">2013</span> <span class="month">Aug</span> <span class="day">30</span></time></span>
                                <span class="tags"><ul class="tag-list list-inline"><li><a href="http://blog.jverkamp.com/category/programming/by-source/programming-praxis">Programming Praxis</a></li><li><a href="http://blog.jverkamp.com/category/programming">Programming</a></li><li><a href="http://blog.jverkamp.com/category/programming/by-topic/visualiziation">Visualiziation</a></li><li><a href="http://blog.jverkamp.com/category/programming/by-language/scheme">Scheme</a></li><li><a href="http://blog.jverkamp.com/category/programming/by-language/racket">Racket</a></li></ul></span>
                        </div>

                        <hr />
                </header>
                <div class="entry-content">
                        <p>I'm a bit behind the times, but <a href="http://programmingpraxis.com/2013/08/16/monkey-grid-puzzle/">this post</a> from Programming Praxis intrigued me enough that I kept it in my todo list for rather a while. So let's get around to it.</p>
<p>I'll just copy the description straight from the Programming Praxis website (although there are at least two previous version:<a href="http://stackoverflow.com/questions/9762953/planar-grid-puzzle">[1]</a><a href="http://stackoverflow.com/questions/18133918/improve-the-solution-to-monkey-grid-puzzle">[2]</a>):</p>
<blockquote>There is a monkey which can walk around on a planar grid. The monkey can move one space at a time left, right, up or down. That is, from (x, y) the monkey can go to (x+1, y), (x-1, y), (x, y+1), and (x, y-1). Points where the sum of the digits of the absolute value of the x coordinate plus the sum of the digits of the absolute value of the y coordinate are lesser than or equal to 19 are accessible to the monkey. For example, the point (59, 79) is inaccessible because 5 + 9 + 7 + 9 = 30, which is greater than 19. Another example: the point (-5, -7) is accessible because abs(-5) + abs(-7) = 5 + 7 = 12, which is less than 19. How many points can the monkey access if it starts at (0, 0), including (0, 0) itself?</blockquote>
<!--more-->
<p>I'm going to take a slightly different take since the problem itself isn't that terribly difficult; it's mostly a matter of optimization. You can never go past 300 on either axis since 2+9+9 = 20, so that forms a wall. ~360,000 nodes can be checked rather quickly to begin with and you can further optimize that by only checking a single quadrant because we're always taking the absolute values. But ignore all that. First, we want to actually write the function. And to that, we want to make up a brand new data structure:</p>
<pre class="scheme"><code>(define (make-infinite-grid)
  (make-hasheq))

(define (infinite-grid-ref grid x y [default (void)])
  (hash-ref (hash-ref! grid x (make-hasheq)) y default))

(define (infinite-grid-set! grid x y value)
  (hash-set! (hash-ref! grid x (make-hasheq)) y value))</code></pre>
<p>Check out the source for a few more helper functions: <a href="https://github.com/jpverkamp/small-projects/blob/master/blog/monkey-grid.rkt">GitHub: jpverkamp/small-projects/monkey-grid.rkt</a></p>
<p>Essentially, it's a <a href="https://en.wikipedia.org/wiki/Cartesian_grid">Cartesian coordinate system</a> that can stretch off arbitrarily far without having to pre-allocate the memory and without dealing with the pesky problems of manually doing the nested hashes all of the time. Granted, this particular problem will be pretty dense, so something more like an extensible <a href="https://en.wikipedia.org/wiki/quadtree">quadtree</a> might have worked better, but this is what I went for first.</p>
<p>So that being said, how do we want to approach the actual problem?</p>
<p>My first thought was that we're working in Racket. We should abstract it over the actual generating function, because <a href="https://en.wikipedia.org/wiki/first_order functions">first order functions</a> are awesome. So we can solve the problem for any sort of function, just just the given one.</p>
<p>My second thought was let's just do it:</p>
<pre class="scheme"><code>(define (monkey-grid-df rule)
  (define grid (make-infinite-grid))
  (let loop ([x 0] [y 0])
    (cond
      ; We've already visited this point, skip it
      [(boolean? (infinite-grid-ref grid x y))
       (void)]
      ; The monkey can walk here
      [(rule x y)
       (infinite-grid-set! grid x y #t)
       (loop (- x 1) y)
       (loop (+ x 1) y)
       (loop x (- y 1))
       (loop x (+ y 1))]
      ; The monkey cannot walk here, skip it
      [else
       (infinite-grid-set! grid x y #f)]))
  grid)</code></pre>
<p>Here we have a nice <a href="https://en.wikipedia.org/wiki/depth-first_search">depth-first search</a>that will set each point that the monkey can reach to true (the second case) and ones it cannot to false (the third). The first case there is to stop the monkey from moving west then immediately east again. Once we've visited a point, we'll not recur from it again. We'll still visit points up to five times (the original time and potentially once coming back from each direction), but writing this way is much cleaner than checking before you move.</p>
<p>So how does it work? Well, let's write a quick function to visualize an infinite grid:</p>
<pre class="scheme"><code>(define (infinite-grid-&gt;bitmap grid mapping [default (void)])
  (let-values ([(min-x max-x min-y max-y) (infinite-grid-range grid)])
    (flomap-&gt;bitmap
     (build-flomap*
      3 (- max-x min-x) (- max-y min-y)
      (λ (x y)
        (mapping (infinite-grid-ref grid (+ x min-x) (+ y min-y) default)))))))</code></pre>
<p>This is basically the same technique that we used to draw noise in the <a href="http://blog.jverkamp.com/2013/04/11/perlin-and-simplex-noise-in-racket">Perlin/Simplex noise post</a> and the technique used in the Wombat <a title="(c211 image) API" href="http://blog.jverkamp.com/wombat-ide/c211-image-api/">(c211 image)</a> library. In this case, we pass a generating function to<code><a href="http://docs.racket-lang.org/search/index.html?q=build-flomap*">build-flomap*</a></code>that returns the color at each point. Using a simple coloring where <code>#t</code> is red, <code>#f</code> is black, and <code>(void)</code> (the points we don't visit) is white, we get this:</p>
<p><a data-toggle="lightbox" href="http://blog.jverkamp.com/2013/08/30/visualizing-the-monkey-grid/131072.png"><img src="http://blog.jverkamp.com/2013/08/30/visualizing-the-monkey-grid/131072.png" /></a></p>
<p>That's actually a pretty cool looking image. If you think about it, the triangular patterns make perfect sense. The sides are where the digits of <code>x</code> or <code>y</code> are pushing the total over 19 while the angle in between is where the combination matters. And of course since we're taking absolute values, the entire thing is mirrored over both the <code>x</code> and <code>y</code> axes (the output is automatically scaled the same way the <a title="(c211 turtle) API" href="http://blog.jverkamp.com/wombat-ide/c211-turtle-api/">(c211 turtle)</a> library is).</p>
<p>If that's all there was to it though, this would be a pretty boring post though. So let's take it up a notch.</p>
<p>I mentioned earlier that this is a depth first solution to the problem. That means that we're going to completely exhaust each approach, then back track point by point and keep branching out. In this case, we're looking at <code>(x-1, y)</code> first, so we'll first build the left side of the image. But how can we visualize this?</p>
<p>One option would be to count the number of steps that we've taken and allow the function to bail out early. That way we can generate several images and watch as the entire picture is filled in. Something like this:</p>
<pre class="scheme"><code>(define (monkey-grid-df rule [maximum-steps #f])
  (define grid (make-infinite-grid))
  (define steps (make-parameter 0))
  (let loop ([x 0] [y 0])
    (cond
      ; We're out of steps or points
      [(and (number? maximum-steps) (&gt;= (steps) maximum-steps))
       (void)]
      ; We've already visited this point, skip it
      [(infinite-grid-ref grid x y #f)
       (void)]
      ; The monkey can walk here
      [(rule x y)
       (steps (+ (steps) 1))
       (infinite-grid-set! grid x y (steps))
       (loop (- x 1) y)
       (loop (+ x 1) y)
       (loop x (- y 1))
       (loop x (+ y 1))]
      ; The monkey cannot walk here, skip it
      [else
       (infinite-grid-set! grid x y #f)]))
  grid)</code></pre>
<p>Intuitively, it would probably be more obvious to thread the number of <code>steps</code> through the loop as a variable, but that wouldn't actually do what we want because the four branches don't share state. We could have each call to loop return the number of steps it took, but then it wouldn't be <a href="https://en.wikipedia.org/wiki/tail_recursive">tail recursive</a>, so we'd lose a bit in performance and make the code messier. So instead, we use a<code><a href="http://docs.racket-lang.org/search/index.html?q=parameter">parameter</a></code>, giving us a variable with <a href="https://en.wikipedia.org/wiki/dynamic">Dynamic scope#Dynamic scoping</a>rather than <a href="https://en.wikipedia.org/wiki/lexical">Lexical scope#Lexical scoping</a>scope.</p>
<p>Now we can generate a whole sequence of images (click any image to biggify):</p>
<table class="table table-striped">
<thead>
<tr>
<td>Steps</td>
<td>Image</td>
</tr>
</thead>
<tbody>
<tr>
<td>2<sup>9</sup> = 512</td>
<td><a data-toggle="lightbox" href="http://blog.jverkamp.com/2013/08/30/visualizing-the-monkey-grid/512.png"><img src="http://blog.jverkamp.com/2013/08/30/visualizing-the-monkey-grid/512.png" /></a></td>
</tr>
<tr>
<td>2<sup>10</sup> = 1,024</td>
<td><a data-toggle="lightbox" href="http://blog.jverkamp.com/2013/08/30/visualizing-the-monkey-grid/1024.png"><img src="http://blog.jverkamp.com/2013/08/30/visualizing-the-monkey-grid/1024.png" /></a></td>
</tr>
<tr>
<td>2<sup>11</sup> = 2,048</td>
<td><a data-toggle="lightbox" href="http://blog.jverkamp.com/2013/08/30/visualizing-the-monkey-grid/2048.png"><img src="http://blog.jverkamp.com/2013/08/30/visualizing-the-monkey-grid/2048.png" /></a></td>
</tr>
<tr>
<td>2<sup>12</sup> = 4,096</td>
<td><a data-toggle="lightbox" href="http://blog.jverkamp.com/2013/08/30/visualizing-the-monkey-grid/4096.png"><img src="http://blog.jverkamp.com/2013/08/30/visualizing-the-monkey-grid/4096.png" /></a></td>
</tr>
<tr>
<td>2<sup>13</sup> = 8,192</td>
<td><a data-toggle="lightbox" href="http://blog.jverkamp.com/2013/08/30/visualizing-the-monkey-grid/8192.png"><img src="http://blog.jverkamp.com/2013/08/30/visualizing-the-monkey-grid/8192.png" /></a></td>
</tr>
<tr>
<td>2<sup>14</sup> = 16,384</td>
<td><a data-toggle="lightbox" href="http://blog.jverkamp.com/2013/08/30/visualizing-the-monkey-grid/16384.png"><img src="http://blog.jverkamp.com/2013/08/30/visualizing-the-monkey-grid/16384.png" /></a></td>
</tr>
<tr>
<td>2<sup>15</sup> = 32,768</td>
<td><a data-toggle="lightbox" href="http://blog.jverkamp.com/2013/08/30/visualizing-the-monkey-grid/32768.png"><img src="http://blog.jverkamp.com/2013/08/30/visualizing-the-monkey-grid/32768.png" /></a></td>
</tr>
<tr>
<td>2<sup>16</sup> = 65,536</td>
<td><a data-toggle="lightbox" href="http://blog.jverkamp.com/2013/08/30/visualizing-the-monkey-grid/65536.png"><img src="http://blog.jverkamp.com/2013/08/30/visualizing-the-monkey-grid/65536.png" /></a></td>
</tr>
</tbody>
</table>
<p>We start out by going to the left as expected. After we reach the far end (that 299 limit), we start filling out by right from there (which just doubles back so it's skipped), then we go down and up to fill out that far left triangle. We see the right lines because we'll move up/down and then have a space to go left (which has the second level of priority). From there, we just fill out the whole image.</p>
<p>This is all well and good, but couldn't we fill it in from the inside out?</p>
<p>To do that, we need to take a different approach. Rather than a depth-first search, we want to go <a href="https://en.wikipedia.org/wiki/breadth-first">Breadth-first search</a>. Essentially the idea will be to use a <a href="https://en.wikipedia.org/wiki/queue">Queue (abstract data type)</a>(so that the first points we think to study are the first we do rather than following a branch to the end) rather than the implicit <a href="https://en.wikipedia.org/wiki/stack">Stack (computer science)</a>we get from recurring.</p>
<p>Here's one way to do that:</p>
<pre class="scheme"><code>(define (monkey-grid-bf rule [maximum-steps #f])
  (define grid (make-infinite-grid))
  (define steps (make-parameter 0))
  (let/ec return
    (let loop ([points '((0 0))])
      ; We're out of steps or points
      (when (or (null? points)
                (and (number? maximum-steps) (&gt;= (steps) maximum-steps)))
        (return grid))

      ; Otherwise, unpack and process the next point
      (define x (first (first points)))
      (define y (second (first points)))
      (cond
        ; We've already visited this point, skip it
        [(boolean? (infinite-grid-ref grid x y))
         (loop (rest points))]
        ; The monkey can walk here
        [(rule x y)
         (steps (+ 1 (steps)))
         (infinite-grid-set! grid x y #t)
         (loop (append (rest points)
                       (list (list (- x 1) y)
                             (list (+ x 1) y)
                             (list x (- y 1))
                             (list x (+ y 1)))))]
        ; The monkey cannot walk here, skip it
        [else
         (infinite-grid-set! grid x y #f)
         (loop (rest points))]))))</code></pre>
<p>We can already see that it's going to be far slower since we're <code>append</code>ing to the end of the list (and maintaining the list explicitly in the first place), but it's still worth doing from a learning perspective. The main odd part is <code><a href="http://docs.racket-lang.org/search/index.html?q=let/ec">let/ec</a></code>(it's a short form of <code><a href="http://docs.racket-lang.org/search/index.html?q=call-with-escape-continuation">call-with-escape-continuation</a></code>), but basically that's giving us an escape route. Once we've made enough steps, no matter where we are, we can stop recurring. So what would these in progress shots look like?</p>
<table class="table table-striped">
<thead>
<tr>
<td>Steps</td>
<td>Image</td>
</tr>
</thead>
<tbody>
<tr>
<td>2<sup>9</sup> = 512</td>
<td><a data-toggle="lightbox" href="http://blog.jverkamp.com/2013/08/30/visualizing-the-monkey-grid/bf-512.png"><img src="http://blog.jverkamp.com/2013/08/30/visualizing-the-monkey-grid/bf-512.png" /></a></td>
</tr>
<tr>
<td>2<sup>13</sup> = 8,192</td>
<td><a data-toggle="lightbox" href="http://blog.jverkamp.com/2013/08/30/visualizing-the-monkey-grid/bf-8192.png"><img src="http://blog.jverkamp.com/2013/08/30/visualizing-the-monkey-grid/bf-8192.png" /></a></td>
</tr>
<tr>
<td>2<sup>15</sup> = 32,768</td>
<td><a data-toggle="lightbox" href="http://blog.jverkamp.com/2013/08/30/visualizing-the-monkey-grid/bf-32768.png"><img src="http://blog.jverkamp.com/2013/08/30/visualizing-the-monkey-grid/bf-32768.png" /></a></td>
</tr>
</tbody>
</table>
<p>Exactly as expected, the image is built from the inside out. We process the first four points, then the nine from those and so on. Nice!</p>
<p>But generating all of these images is a bit of a pain. What if we could color them based on how many steps it took to get to them?The change is actually relatively minimal. First, store the number of steps rather than just <code>#t</code> in the grid. Second, we have to change the <code>boolean?</code> check (we can use the fact that numbers are true though). Finally, we need a slightly more complex coloring function:</p>
<pre class="scheme"><code>; Store the number of steps in the grid
... (infinite-grid-set! grid x y (steps)) ...

; Don't revisit using the fact that numbers are true
... (infinite-grid-ref grid x y #f) ...

(define (make-gradient-coloring grid)
  (define max-value (apply max (cons 1 (filter number? (infinite-grid-values grid)))))
  (λ (value)
    (cond
      [(number? value)
       (define g (/ value max-value))
       (vector g 0 (- 1 g))]
      [else
       (vector 0.0 0.0 0.0)])))</code></pre>
<p><code>make-gradient-coloring</code> is interesting because it's a function that returns the actual coloring function. We have to do this because we don't actually know how many steps it took to generate the image (although we could easily restructure the function to return that). Then we use the gradient <code>(g)</code> and <code>(- 1 g)</code> to smoothly blend from blue at low step numbers to red at the highest.</p>
<p>So, what does it look like?</p>
<table class="table table-striped">
<tbody>
<tr>
<td>Depth-first</td>
<td>Breadth-first</td>
</tr>
<tr>
<td><a data-toggle="lightbox" href="http://blog.jverkamp.com/2013/08/30/visualizing-the-monkey-grid/df-gradient.png"><img src="http://blog.jverkamp.com/2013/08/30/visualizing-the-monkey-grid/df-gradient.png" /></a></td>
<td><a data-toggle="lightbox" href="http://blog.jverkamp.com/2013/08/30/visualizing-the-monkey-grid/bf-gradient.png"><img src="http://blog.jverkamp.com/2013/08/30/visualizing-the-monkey-grid/bf-gradient.png" /></a></td>
</tr>
</tbody>
</table>
<p>We see the same patterns here as we did in the sequential images: the depth first starts to the left then rotates counter-clockwise. Breadth-first starts in the middle and works out.</p>
<p>So we've solved the problem (more or less, we haven't actually counted the number of points in the grid). But what else can we use this framework for? Well, first let's build a helper function to abstract anything we might want to do with these:</p>
<pre class="scheme"><code>(define (make-grid default-param function)
  (λ (              [param default-param]
      #:steps       [steps (expt 2 15)]
      #:depth-first [depth-first #t]
      #:gradient    [gradient    #f])

    (define grid
      (monkey-grid
       (function param)
       steps
       #:depth-first depth-first))

    (infinite-grid-&gt;bitmap
     grid
     (if gradient (make-gradient-coloring grid) default-coloring))))</code></pre>
<p>This is another function generating function. In this case we want a default parameter and a function of the form <code>(number? number? -> boolean?)</code>. For the inner function, we have that parameter we defaulted earlier and three optional keyword parameters: the maximum number of steps to run (in case we want to generate a potentially infinite function), if we want to use the breadth- or depth-first, and if we want to use the gradient coloring or the original coloring. All together, it makes defining test functions much cleaner. I used this function to generate all of the images thus far in the post:</p>
<pre class="scheme"><code>(define monkey
  (let ([digits
         (λ (n)
           (let loop ([n n] [ls '()])
             (cond
               [(= n 0) ls]
               [else    (loop (quotient n 10) (cons (remainder n 10) ls))])))])
    (make-grid
     19
     (λ (max-digit-sum)
       (λ (x y) (&lt;= (apply + (append (digits (abs x)) (digits (abs y)))) max-digit-sum))))))</code></pre>
<p>This way the default will be to sum digits no greater than 19, but we can easily generate other values. Say... 10 (we end up with a border at 19):</p>
<pre class="scheme"><code>(monkey 10 #:steps #f #:gradient #t #:depth-first #f)</code></pre>
<p><a data-toggle="lightbox" href="http://blog.jverkamp.com/2013/08/30/visualizing-the-monkey-grid/monkey-10.png"><img src="http://blog.jverkamp.com/2013/08/30/visualizing-the-monkey-grid/monkey-10.png" /></a></p>
<p>Alternatively, we can generate all sorts of nice shapes:</p>
<table class="table table-striped">
<tbody>
<tr>
<td>

<pre class="scheme"><code>(define circle
  (make-grid
   50
   (λ (radius)
     (define r^2 (* radius radius))
     (λ (x y)
       (&lt;= (+ (* x x) (* y y)) r^2)))))</code></pre>

</td>
<td>

<pre class="scheme"><code>(define square
  (make-grid
   50
   (λ (radius)
     (λ (x y)
       (and (&lt;= (abs x) radius)
            (&lt;= (abs y) radius))))))</code></pre>

</td>
</tr>
<tr>
<td><a data-toggle="lightbox" href="http://blog.jverkamp.com/2013/08/30/visualizing-the-monkey-grid/monkey-circle.png"><img src="http://blog.jverkamp.com/2013/08/30/visualizing-the-monkey-grid/monkey-circle.png" /></a></td>
<td><a data-toggle="lightbox" href="http://blog.jverkamp.com/2013/08/30/visualizing-the-monkey-grid/monkey-square1.png"><img src="http://blog.jverkamp.com/2013/08/30/visualizing-the-monkey-grid/monkey-square1.png" /></a></td>
</tr>
</tbody>
</table>
<p>Let's get a little crazier. What if we randomly decide at each tile if it's viable:</p>
<pre class="scheme"><code>(define squiggle
  (make-grid
   2
   (λ (variation)
     (λ (x y)
       (positive? (random variation))))))</code></pre>
<p>Try with the default 50% change:</p>
<pre class="scheme"><code>(squiggle #:gradient #t)</code></pre>
<p><a data-toggle="lightbox" href="http://blog.jverkamp.com/2013/08/30/visualizing-the-monkey-grid/monkey-squiggle.png"><img src="http://blog.jverkamp.com/2013/08/30/visualizing-the-monkey-grid/monkey-squiggle.png" /></a></p>
<p>We actually got really lucky with this one. There's a 50/50 chance that the origin itself won't be visited, so we tend to generate a lot of empty images... (And of course each one will depend on the current <code>random-seed</code>. That was the default depth first version, so we (more or less) see the continual forward motion. Here's one that's breadth-first:</p>
<pre class="scheme"><code>(squiggle #:depth-first #f #:gradient #t)</code></pre>
<p><a data-toggle="lightbox" href="http://blog.jverkamp.com/2013/08/30/visualizing-the-monkey-grid/monkey-squiggle-bf.png"><img src="http://blog.jverkamp.com/2013/08/30/visualizing-the-monkey-grid/monkey-squiggle-bf.png" /></a></p>
<p>We can still see the definite outwards pattern here, along with which branches it generate later (those to the left in this case).</p>
<p>Next, how about visualizing prime numbers?</p>
<pre class="scheme"><code>(require math/number-theory)
(define either-prime
  (make-grid
   +inf.0
   (λ (bound)
     (λ (x y)
       (and (&lt;= (abs x) bound) (&lt;= (abs y) bound)
            (or (&lt;= -2 x 2) (&lt;= -2 y 2)
                (prime? x)  (prime? y)))))))</code></pre>
<p>We have to allow numbers less than 2 or we'll never get away from the origin. In this case, <code><a href="http://docs.racket-lang.org/search/index.html?q=math/number-theory">math/number-theory</a></code> considers negative numbers to be <code>prime?</code> if their <code>abs</code> is <code>prime?</code>, so we get some nice symmetry.</p>
<pre class="scheme"><code>(either-prime 100 #:gradient #t #:depth-first #f)</code></pre>
<p><a data-toggle="lightbox" href="http://blog.jverkamp.com/2013/08/30/visualizing-the-monkey-grid/monkey-prime.png"><img src="http://blog.jverkamp.com/2013/08/30/visualizing-the-monkey-grid/monkey-prime.png" /></a></p>
<p>For those playing at home, here's a bigger one (remember, click to embiggen):</p>
<p><a data-toggle="lightbox" href="http://blog.jverkamp.com/2013/08/30/visualizing-the-monkey-grid/monkey-prime-large.png"><img src="http://blog.jverkamp.com/2013/08/30/visualizing-the-monkey-grid/monkey-prime-large.png" /></a></p>
<p>Another option would be to check if x and y are <a href="https://en.wikipedia.org/wiki/coprime">coprime</a>:</p>
<pre class="scheme"><code>(coprime 100 #:gradient #t #:depth-first #f)</code></pre>
<table class="table table-striped">
<tbody>
<tr>
<td>Depth-first</td>
<td>Breadth-first</td>
</tr>
<tr>
<td><a data-toggle="lightbox" href="http://blog.jverkamp.com/2013/08/30/visualizing-the-monkey-grid/monkey-coprime-df.png"><img src="http://blog.jverkamp.com/2013/08/30/visualizing-the-monkey-grid/monkey-coprime-df.png" /></a></td>
<td><a data-toggle="lightbox" href="http://blog.jverkamp.com/2013/08/30/visualizing-the-monkey-grid/monkey-coprime-bf.png"><img src="http://blog.jverkamp.com/2013/08/30/visualizing-the-monkey-grid/monkey-coprime-bf.png" /></a></td>
</tr>
</tbody>
</table>
<p>There is definitely some interesting structure going on. :)</p>
<p>I think that's about it for now. If you have any other interesting functions you'd like to check out, go ahead and give the code a spin (<a href="https://github.com/jpverkamp/small-projects/blob/master/blog/monkey-grid.rkt">GitHub: jpverkamp/small-projects/monkey-grid.rkt</a>) and/or drop me a line in the comments. I'd love to see what else people come up with!</p>
                </div>
                <div class="entry-footnotes">
                        <div id="footnotes"><ol></ol></div>
                </div>

                <div id="disqus_thread"></div>
<script type="text/javascript">
var disqus_shortname = "jverkamp";
var disqus_title = "Visualizing the Monkey Grid";
var disqus_url = "http://blog.jverkamp.com/2013/08/30/visualizing-the-monkey-grid/";
/* * * DON'T EDIT BELOW THIS LINE * * */
(function() {
  var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
  dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js';
  (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
})();
</script>
<noscript>Please enable JavaScript to view the <a href="http://disqus.com/?ref_noscript">comments powered by Disqus.</a></noscript>
<a href="http://disqus.com" class="dsq-brlink">comments powered by <span class="logo-disqus">Disqus</span></a>
        </article>

        <footer class="container" role="contentinfo">
                <nav class="navbar navbar-default" role="navigation"><ul class="nav navbar-nav nav-justified"><li><a href="http://blog.jverkamp.com/2013/08/30/elysium">← Elysium</a></li><li><a href="http://blog.jverkamp.com/category/archives">Archives</a></li><li><a href="http://blog.jverkamp.com/2013/09/10/the-mortal-instruments-city-of-bones">The Mortal Instruments: City of Bones →</a></li></ul><ul class="nav navbar-nav nav-justified"><li><a href="http://blog.jverkamp.com/2013/08/26/wombat-ide-new-semester-bug-fixes">← Wombat IDE - New semester / bug fixes</a></li><li><a href="http://blog.jverkamp.com/category/programming">Programming</a></li><li><a href="http://blog.jverkamp.com/2013/09/14/diffie-hellman-key-exchange">Diffie-Hellman Key Exchange →</a></li></ul></nav>

                <div class="legal">
                        All posts unless otherwise mentioned are licensed under <a rel="license" href="http://creativecommons.org/licenses/by-nc-sa/3.0/deed.en_US"><img alt="Creative Commons License" style="border-width:0" src="http://i.creativecommons.org/l/by-nc-sa/3.0/80x15.png" /></a><br />
                        Any source code unless otherwise mentioned is licensed under the <a href="http://directory.fsf.org/wiki/License:BSD_3Clause">3 clause BSD license</a>
                </div>
        </footer>

<script>
(function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
(i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
})(window,document,'script','//www.google-analytics.com/analytics.js','ga');

ga('create', 'UA-53688146-1', 'auto');
ga('send', 'pageview');
</script>
</body>
</html>