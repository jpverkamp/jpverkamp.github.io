<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>AWS on jverkamp.com</title><link>https://blog.jverkamp.com/2020/08/11/aws/</link><description>Recent content in AWS on jverkamp.com</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Tue, 11 Aug 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://blog.jverkamp.com/2020/08/11/aws/atom.xml" rel="self" type="application/rss+xml"/><item><title>Extending my EC2 script</title><link>https://blog.jverkamp.com/2020/08/11/extending-my-ec2-script/</link><pubDate>Tue, 11 Aug 2020 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2020/08/11/extending-my-ec2-script/</guid><description>&lt;p>Another quick post.&lt;/p>
&lt;p>What feels like a lifetime ago, I &lt;a href="https://blog.jverkamp.com/2015/10/30/finding-ec2-instances-by-tag/">wrote a post&lt;/a> about finding &lt;code>ec2&lt;/code> instances by name. I honestly use that script just about every day, mostly for automatically finding instances to SSH to (a la &lt;a href="https://blog.jverkamp.com/2017/12/18/ssh-config-proxycommand-tricks/">SSH config tricks&lt;/a>). But there are a few other quick things I&amp;rsquo;ve done with it:&lt;/p>
&lt;ul>
&lt;li>&lt;code>ec2-script&lt;/code> - Run a script on all instances of a given name&lt;/li>
&lt;li>&lt;code>ec2-disk&lt;/code> - A specialization of &lt;code>ec2-script&lt;/code> to check main disk usage&lt;/li>
&lt;li>&lt;code>terminate&lt;/code> - A script that I use with &lt;code>ec2&lt;/code> to terminate instances from the command line&lt;/li>
&lt;li>&lt;code>ec2-cycle&lt;/code> - Slow cycle a given set of &lt;code>ec2&lt;/code> instances by terminating so many per minute&lt;/li>
&lt;/ul>
&lt;p>All of which are included in my &lt;a href="https://github.com/jpverkamp/dotfiles/tree/master/bin" target="_blank" rel="noopener">dotfiles&lt;/a>.&lt;/p></description></item><item><title>Forcing Secure Cookies Behind an ELB in Ruby/Rails</title><link>https://blog.jverkamp.com/2019/04/30/forcing-secure-cookies-behind-an-elb-in-ruby/rails/</link><pubDate>Tue, 30 Apr 2019 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2019/04/30/forcing-secure-cookies-behind-an-elb-in-ruby/rails/</guid><description>&lt;p>As part of general security good practices, you should always (whenever possible):&lt;/p>
&lt;ul>
&lt;li>use HTTPS to serve all requests&lt;/li>
&lt;li>serve redirects to upgrade HTTP requests to HTTPS&lt;/li>
&lt;li>set session cookies to &lt;code>secure&lt;/code> and &lt;code>http_only&lt;/code>&lt;/li>
&lt;li>enable HTTP Strict Transport Security (&lt;code>HSTS&lt;/code>)&lt;/li>
&lt;/ul></description></item><item><title>Listing and Downloading S3 Versions</title><link>https://blog.jverkamp.com/2019/01/04/listing-and-downloading-s3-versions/</link><pubDate>Fri, 04 Jan 2019 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2019/01/04/listing-and-downloading-s3-versions/</guid><description>&lt;p>Today I found the need to look through all old versions of a file in S3 that had versioning turned on. You can do it through the AWS Console, but I prefer command line tools. You can do it with &lt;a href="https://aws.amazon.com/cli/" target="_blank" rel="noopener">awscli&lt;/a>, but the flags are long and I can never quite remember them. So let&amp;rsquo;s write up a quick script using &lt;a href="https://boto3.amazonaws.com/v1/documentation/api/latest/index.html" target="_blank" rel="noopener">boto3&lt;/a> (and as a bonus, try out &lt;a href="https://click.palletsprojects.com/en/7.x/" target="_blank" rel="noopener">click&lt;/a>)!&lt;/p></description></item><item><title>Counting and Sizing S3 Buckets</title><link>https://blog.jverkamp.com/2018/07/15/counting-and-sizing-s3-buckets/</link><pubDate>Sun, 15 Jul 2018 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2018/07/15/counting-and-sizing-s3-buckets/</guid><description>&lt;p>A long time ago in a galaxy far far away, I wrote up a script that I used to take an &lt;a href="https://aws.amazon.com/s3/" target="_blank" rel="noopener">AWS S3&lt;/a> bucket and count how many objects there were in the bucket and calculate its total size. While you could get some of this information from billing reports, there just wasn&amp;rsquo;t a good way to get it other than that at the time. The only way you could do it was to&amp;hellip; iterate through the entire bucket, summing as you go. If you have buckets with millions (or more) objects, this could take a while.&lt;/p>
&lt;p>Basically:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>conn &lt;span style="color:#f92672">=&lt;/span> boto&lt;span style="color:#f92672">.&lt;/span>connect_s3()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">for&lt;/span> bucket &lt;span style="color:#f92672">in&lt;/span> sorted(conn&lt;span style="color:#f92672">.&lt;/span>get_all_buckets()):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">try&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> total_count &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> total_size &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> start &lt;span style="color:#f92672">=&lt;/span> datetime&lt;span style="color:#f92672">.&lt;/span>datetime&lt;span style="color:#f92672">.&lt;/span>now()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> key &lt;span style="color:#f92672">in&lt;/span> bucket&lt;span style="color:#f92672">.&lt;/span>list_versions():
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># Skip deleted files&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> isinstance(key, boto&lt;span style="color:#f92672">.&lt;/span>s3&lt;span style="color:#f92672">.&lt;/span>deletemarker&lt;span style="color:#f92672">.&lt;/span>DeleteMarker):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">continue&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> size &lt;span style="color:#f92672">=&lt;/span> key&lt;span style="color:#f92672">.&lt;/span>size
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> total_count &lt;span style="color:#f92672">+=&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> total_size &lt;span style="color:#f92672">+=&lt;/span> size
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print(&lt;span style="color:#e6db74">&amp;#39;-- &lt;/span>&lt;span style="color:#e6db74">{count}&lt;/span>&lt;span style="color:#e6db74"> files, &lt;/span>&lt;span style="color:#e6db74">{size}&lt;/span>&lt;span style="color:#e6db74">, &lt;/span>&lt;span style="color:#e6db74">{time}&lt;/span>&lt;span style="color:#e6db74"> to calculate&amp;#39;&lt;/span>&lt;span style="color:#f92672">.&lt;/span>format(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> count &lt;span style="color:#f92672">=&lt;/span> total_count,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> size &lt;span style="color:#f92672">=&lt;/span> humanize&lt;span style="color:#f92672">.&lt;/span>naturalsize(total_size),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> time &lt;span style="color:#f92672">=&lt;/span> humanize&lt;span style="color:#f92672">.&lt;/span>naturaltime(datetime&lt;span style="color:#f92672">.&lt;/span>datetime&lt;span style="color:#f92672">.&lt;/span>now() &lt;span style="color:#f92672">-&lt;/span> start)&lt;span style="color:#f92672">.&lt;/span>replace(&lt;span style="color:#e6db74">&amp;#39; ago&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ))
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Generating zone files from Route53</title><link>https://blog.jverkamp.com/2018/03/12/generating-zone-files-from-route53/</link><pubDate>Mon, 12 Mar 2018 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2018/03/12/generating-zone-files-from-route53/</guid><description>&lt;p>Recently I found myself wanting to do some analysis on all of our DNS entires stored in AWS&amp;rsquo;s Route53 for security reasons (specifically to prevent subdomain takeover attacks, I&amp;rsquo;ll probably write that up soon). In doing so, I realized that while Route53 has the ability to import a &lt;a href="https://en.wikipedia.org/wiki/zone%20file">zone file&lt;/a>, it&amp;rsquo;s not possible to export one.&lt;/p>
&lt;p>To some extent, this makes sense. Since Route53 supports ALIAS records (which can automatically determine their values based on other AWS products, such as an ELB changing its public IP) and those aren&amp;rsquo;t actually &amp;lsquo;real&amp;rsquo; DNS entries, things will get confused. But I don&amp;rsquo;t currently intend to re-import these zone files, just use them. So let&amp;rsquo;s see what we can do.&lt;/p></description></item><item><title>SSH Config ProxyCommand Tricks</title><link>https://blog.jverkamp.com/2017/12/18/ssh-config-proxycommand-tricks/</link><pubDate>Mon, 18 Dec 2017 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2017/12/18/ssh-config-proxycommand-tricks/</guid><description>&lt;p>Working in security/operations in the tech industry, I use &lt;a href="https://en.wikipedia.org/wiki/SSH">SSH&lt;/a> a lot. To various different machines (some with hostnames, some without), using various different users and keys, and often (as was the case in my &lt;a href="https://blog.jverkamp.com/2017/12/13/dynamic-automatic-proxies/">previous post&lt;/a>) via a &lt;a href="https://en.wikipedia.org/wiki/bastion%20host">bastion host&lt;/a>. Over the years, I&amp;rsquo;ve collected a number of SSH tricks that make my life easier.&lt;/p></description></item><item><title>Clock drift in Docker containers</title><link>https://blog.jverkamp.com/2017/11/15/clock-drift-in-docker-containers/</link><pubDate>Wed, 15 Nov 2017 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2017/11/15/clock-drift-in-docker-containers/</guid><description>&lt;p>I was working on a docker container which uses the aws cli to mess around with some autoscaling groups when I got a somewhat strange error:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>A client error &lt;span style="color:#f92672">(&lt;/span>SignatureDoesNotMatch&lt;span style="color:#f92672">)&lt;/span> occurred when calling the DescribeAutoScalingGroups operation: Signature not yet current: 20171115T012426Z is still later than 20171115T012420Z &lt;span style="color:#f92672">(&lt;/span>20171115T011920Z + &lt;span style="color:#ae81ff">5&lt;/span> min.&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Hmm.&lt;/p>
&lt;p>Are the clocks off?&lt;/p></description></item><item><title>Finding EC2 instances by tag</title><link>https://blog.jverkamp.com/2015/10/30/finding-ec2-instances-by-tag/</link><pubDate>Fri, 30 Oct 2015 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2015/10/30/finding-ec2-instances-by-tag/</guid><description>&lt;p>Another script similar to my previous post about &lt;a href="https://blog.jverkamp.com/2015/07/22/finding-aws-iam-users-by-access-key/">Finding AWS IAM users by access key&lt;/a>. This time, we want to do much the same thing for EC2 instances by tag.&lt;/p></description></item><item><title>Finding AWS IAM users by access key</title><link>https://blog.jverkamp.com/2015/07/22/finding-aws-iam-users-by-access-key/</link><pubDate>Wed, 22 Jul 2015 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2015/07/22/finding-aws-iam-users-by-access-key/</guid><description>&lt;p>Every once in a while&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>, I find myself with an &lt;a href="https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSGettingStartedGuide/AWSCredentials.html">AWS access key&lt;/a> and need to figure out who in the world it belongs to. Unfortunately, so far as I&amp;rsquo;ve been able to find, there&amp;rsquo;s no way to directly do this in either the &lt;a href="https://aws.amazon.com/console/">AWS console&lt;/a> or with the &lt;a href="https://aws.amazon.com/cli/">AWS api&lt;/a>.&lt;/p></description></item><item><title>Configuring Websockets behind an AWS ELB</title><link>https://blog.jverkamp.com/2015/07/20/configuring-websockets-behind-an-aws-elb/</link><pubDate>Mon, 20 Jul 2015 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2015/07/20/configuring-websockets-behind-an-aws-elb/</guid><description>&lt;p>Recently at work, we were trying to get an application that uses &lt;a href="https://en.wikipedia.org/wiki/websockets">websockets&lt;/a> working on an &lt;a href="https://aws.amazon.com/">AWS&lt;/a> instance behind an &lt;a href="https://aws.amazon.com/elasticloadbalancing/">ELB (load balancer)&lt;/a> and &lt;a href="http://nginx.org/">nginx&lt;/a> on the instance.&lt;/p>
&lt;p>If you&amp;rsquo;re either not using a secure connection or handling the cryptography on the instance (either in nginx or Flask), it works right out of the box. But if you want the ELB to handle TLS termination it doesn&amp;rsquo;t work nearly as well&amp;hellip; Luckily, after a bit of fiddling, I got it working.&lt;/p>
&lt;p>&lt;strong>Update 2018-05-31:&lt;/strong> A much easier solution, [https://aws.amazon.com/blogs/aws/new-aws-application-load-balancer/](just use an ALB):&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>WebSocket&lt;/strong> allows you to set up long-standing TCP connections between your client and your server. This is a more efficient alternative to the old-school method which involved HTTP connections that were held open with a “heartbeat” for very long periods of time. WebSocket is great for mobile devices and can be used to deliver stock quotes, sports scores, and other dynamic data while minimizing power consumption. ALB provides native support for WebSocket via the &lt;code>ws://&lt;/code> and &lt;code>wss://&lt;/code> protocols.&lt;/p>&lt;/blockquote></description></item><item><title>Performance problems with Flask and Docker</title><link>https://blog.jverkamp.com/2015/04/03/performance-problems-with-flask-and-docker/</link><pubDate>Fri, 03 Apr 2015 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2015/04/03/performance-problems-with-flask-and-docker/</guid><description>&lt;p>I had an interesting problem recently on a project I was working on. It&amp;rsquo;s a simple &lt;a href="http://flask.pocoo.org/">Flask&lt;/a>-based webapp, designed to be deployed to &lt;a href="https://aws.amazon.com/">AWS&lt;/a> using &lt;a href="https://www.docker.com/">Docker&lt;/a>. The application worked just fine when I was running it locally, but as soon as I pushed the docker container&amp;hellip;&lt;/p>
&lt;p>Latency spikes. Bad enough that the application was failing AWS&amp;rsquo;s healthy host checks, cycling in and out of existence&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>:&lt;/p>
&lt;figure>&lt;img src="https://blog.jverkamp.com/embeds/2015/health-check.png">
&lt;/figure></description></item><item><title>Parsing AWS instance data with jq</title><link>https://blog.jverkamp.com/2015/04/01/parsing-aws-instance-data-with-jq/</link><pubDate>Wed, 01 Apr 2015 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2015/04/01/parsing-aws-instance-data-with-jq/</guid><description>&lt;p>Semi-random amusing code snippet of the day:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>aws ec2 describe-instances | jq &lt;span style="color:#e6db74">&amp;lt;&amp;lt; EOF
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> .[][].Instances[]
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> | select(.Tags[]?.Value == &amp;#34;production&amp;#34;)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> | .PrivateIpAddress
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">EOF&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item></channel></rss>