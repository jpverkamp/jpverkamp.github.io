<!DOCTYPE html>
<html>
<head>
        
        

        <title>Evaluating prefix/infix/postfix expressions | jverkamp.com | John-Paul Verkamp</title>

        <script src="//ajax.googleapis.com/ajax/libs/jquery/1.11.0/jquery.min.js" defer></script>
        <script src="//code.jquery.com/ui/1.11.1/jquery-ui.min.js" defer></script>

        <link rel="stylesheet" href="//netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css" defer />
        <link rel="stylesheet" href="//netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap-theme.min.css" defer />
        <script src="//netdna.bootstrapcdn.com/bootstrap/3.1.1/js/bootstrap.min.js" defer></script>

        <link rel="stylesheet" href="//cdnjs.cloudflare.com/ajax/libs/ekko-lightbox/3.0.3a/ekko-lightbox.min.css" defer />
        <script src="//cdnjs.cloudflare.com/ajax/libs/ekko-lightbox/3.0.3a/ekko-lightbox.min.js" defer></script>

        <script src="//cdnjs.cloudflare.com/ajax/libs/jquery.transit/0.9.9/jquery.transit.min.js" defer></script>

        <!-- Highlight.js for syntax highlighting -->
        <link rel="stylesheet" href="/highlight/styles/obsidian.css" defer />
        <script src="/highlight/highlight.pack.js" defer></script>

        <!-- MathJax for LaTeX support -->
        <script src="//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML" defer></script>

        <!-- nanoGallery for Flickr Galleries -->
        <link rel="stylesheet" href="//cdnjs.cloudflare.com/ajax/libs/nanogallery/4.4.2/css/themes/light/nanogallery_light.css" defer />
        <script type="text/javascript" src="//cdnjs.cloudflare.com/ajax/libs/nanogallery/4.4.2/jquery.nanogallery.min.js" defer ></script>

        <!-- Pretty pretty fonts -->
        <link rel="stylesheet" type="text/css" href="//fonts.googleapis.com/css?family=Calligraffitti" defer />

        <!-- Any custom CSS or JS that I've written; this should be kept minimal -->
        <link rel="stylesheet" href="/custom.css" defer />
        <script src="/custom.js" defer></script>

        <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
        <link rel="alternate" type="application/atom+xml" title="jverkamp.com (Atom 2.0)" href="http://blog.jverkamp.com/feed/" />
</head>
<body>
        <header class="container">
        <nav class="navbar navbar-default" role="navigation">
  <div class="container-fluid">
    <!-- Brand and toggle get grouped for better mobile display -->
    <div class="navbar-header">
      <button type="button" class="navbar-toggle" data-toggle="collapse" data-target="#bs-example-navbar-collapse-1">
        <span class="sr-only">Toggle navigation</span>
        <span class="icon-bar"></span>
        <span class="icon-bar"></span>
        <span class="icon-bar"></span>
      </button>
      <a class="navbar-brand" href="http://blog.jverkamp.com"><span style="color: green;">jv</span>erkamp.com</a>
    </div>

    <!-- Collect the nav links, forms, and other content for toggling -->
    <div class="collapse navbar-collapse" id="bs-example-navbar-collapse-1">
      <ul class="nav navbar-nav"><li class="dropdown"><a href="http://blog.jverkamp.com/category/archives" class="dropdown-toggle">Archives<span class="caret"></span></a><ul class="dropdown-menu"><li><a href="http://blog.jverkamp.com/category/archives/2004">2004</a></li><li><a href="http://blog.jverkamp.com/category/archives/2005">2005</a></li><li><a href="http://blog.jverkamp.com/category/archives/2006">2006</a></li><li><a href="http://blog.jverkamp.com/category/archives/2007">2007</a></li><li><a href="http://blog.jverkamp.com/category/archives/2008">2008</a></li><li><a href="http://blog.jverkamp.com/category/archives/2009">2009</a></li><li><a href="http://blog.jverkamp.com/category/archives/2010">2010</a></li><li><a href="http://blog.jverkamp.com/category/archives/2011">2011</a></li><li><a href="http://blog.jverkamp.com/category/archives/2012">2012</a></li><li><a href="http://blog.jverkamp.com/category/archives/2013">2013</a></li><li><a href="http://blog.jverkamp.com/category/archives/2014">2014</a></li><li><a href="http://blog.jverkamp.com/category/archives/2015">2015</a></li></ul></li><li class="dropdown"><a href="http://blog.jverkamp.com/category/other" class="dropdown-toggle">Other<span class="caret"></span></a><ul class="dropdown-menu"><li><a href="http://blog.jverkamp.com/category/other/board-game-reviews">Board Game Reviews</a></li><li><a href="http://blog.jverkamp.com/category/other/book-reviews">Book Reviews</a></li><li><a href="http://blog.jverkamp.com/category/other/cooking">Cooking</a></li><li><a href="http://blog.jverkamp.com/category/other/movie-reviews">Movie Reviews</a></li></ul></li><li class="dropdown"><a href="http://blog.jverkamp.com/category/photography" class="dropdown-toggle">Photography<span class="caret"></span></a><ul class="dropdown-menu"><li><a href="http://blog.jverkamp.com/category/photography/dp-challenge">DP Challenge</a></li><li><a href="http://blog.jverkamp.com/category/photography/photosets">Photosets</a></li><li><a href="http://blog.jverkamp.com/category/photography/photosynth">Photosynth</a></li></ul></li><li class="dropdown"><a href="http://blog.jverkamp.com/category/programming" class="dropdown-toggle">Programming<span class="caret"></span></a><ul class="dropdown-menu"><li><a href="http://blog.jverkamp.com/category/programming/by-language">By Language</a></li><li><a href="http://blog.jverkamp.com/category/programming/by-project">By Project</a></li><li><a href="http://blog.jverkamp.com/category/programming/by-source">By Source</a></li><li><a href="http://blog.jverkamp.com/category/programming/by-topic">By Topic</a></li><li><a href="http://blog.jverkamp.com/category/programming/libraries">Libraries</a></li></ul></li><li class="dropdown"><a href="http://blog.jverkamp.com/category/research" class="dropdown-toggle">Research<span class="caret"></span></a><ul class="dropdown-menu"><li><a href="http://blog.jverkamp.com/category/research/by-topic">By Topic</a></li><li><a href="http://blog.jverkamp.com/category/research/publications">Publications</a></li></ul></li><li class="dropdown"><a href="http://blog.jverkamp.com/category/writing" class="dropdown-toggle">Writing<span class="caret"></span></a><ul class="dropdown-menu"><li><a href="http://blog.jverkamp.com/category/writing/by-genre">By Genre</a></li><li><a href="http://blog.jverkamp.com/category/writing/ideas">Ideas</a></li><li><a href="http://blog.jverkamp.com/category/writing/nanowrimo">NaNoWriMo</a></li><li><a href="http://blog.jverkamp.com/category/writing/novels">Novels</a></li><li><a href="http://blog.jverkamp.com/category/writing/other">Other</a></li><li><a href="http://blog.jverkamp.com/category/writing/short-stories">Short Stories</a></li><li><a href="http://blog.jverkamp.com/category/writing/writing-excuses">Writing Excuses</a></li></ul></li></ul>

      <form action="http://www.google.com/search" method="get" onSubmit="(function(obj){obj.q.value='site:blog.jverkamp.com '+obj.qfront.value;})(this)" class="navbar-form navbar-right" role="search">
        <div class="form-group">
          <input name="q" type="hidden" />
          <input name="qfront" type="text" class="form-control" placeholder="Search" />
          <button type="submit" class="btn btn-default" value="Search">Search</button>
        </p>
      </form>
    </div><!-- /.navbar-collapse -->
  </div><!-- /.container-fluid -->
</nav>
        </header>

        <article class="container">
                <header>
                        <h1 class="entry-title">Evaluating prefix/infix/postfix expressions</h1>

                        <div class="entry-meta">
                                <span class="posted-on"><time class="entry-date" datetime="2012-10-08"><span class="year">2012</span> <span class="month">Oct</span> <span class="day">8</span></time></span>
                                <span class="tags"><ul class="tag-list list-inline"><li><a href="http://blog.jverkamp.com/category/programming/by-topic/data-structures">Data Structures</a></li><li><a href="http://blog.jverkamp.com/category/programming/by-language/javascript">JavaScript</a></li><li><a href="http://blog.jverkamp.com/category/programming">Programming</a></li><li><a href="http://blog.jverkamp.com/category/programming/by-topic/programming-languages">Programming Languages</a></li></ul></span>
                        </div>

                        <hr />
                </header>
                <div class="entry-content">
                        <p>In <a href="http://blog.jverkamp.com/2012/10/07/three-ways-to-write-expressions">yesterday's post</a>, I talked about three different ways to write expressions: prefix, infix, and postfix expressions. I also promised to write up a web-based example that would show the guts of each algorithm in action. Well, here it is!</p>
<p>Use the three buttons at the top to switch between the different machines. Enter an expression in the box and click run to evaluate it. The only things that are supported at the moment are numbers (integers or floating point) and the operators +, -, *, and /, although the code is extensible enough that adding more shouldn't be an issue.</p>
<p>Have fun!</p>
<p><button id="prefixShow">Prefix</button> <button id="infixShow">Infix</button> <button id="postfixShow">Postfix</button></p>
<hr />
<div id="prefix">

<h1>Prefix / Scheme</h1>

<input type="text" id="prefixInput" value="+ * 5 8 + 5 - 1 4"> <button id="prefixRun">Run</button>

<h1>Results</h1>

<table class="table table-striped">
<thead><tr><td>Tick</td><td>Input</td><td>Output</td><td>Rest</td><td>Error</td></tr></thead>
<tbody id="prefixResult"></tbody>
</table>

<button id="showHidePrefixSource">Show/Hide Source</button>
<div class="source" id="prefixSource">

<pre class="javascript"><code>
// known operators
var operators = {
        '+': function(a, b) { return a + b; },
        '-': function(a, b) { return a - b; },
        '*': function(a, b) { return a * b; },
        '/': function(a, b) { return a / b; },
};

// process at this level
// return the result of this level and what we didn't use
// return a null value if we fail at any point
function step(current) {
        // directly return numbers
        if (!isNaN(parseFloat(current[0]))) {
                return {
                        value: parseFloat(current[0]),
                        rest: current.slice(1)
                };
        }

        // otherwise, we're going to have to recur
        else {
                var f = operators[current[0]];

                // recur for left, use that rest for right
                var left = step(current.slice(1));
                if (left.value == null) return {value: null, rest: []};
                var right = step(left.rest);
                if (right.value == null) return {value: null, rest: []};

                // return at my level
                return {
                        value: f(left.value, right.value),
                        rest: right.rest
                };
        }
}
step(input);
</code></pre>

</div>

</div>
<div id="infix">

<h1>Infix</h1>

<input type="text" id="infixInput" value="4 + 2 * 7 - 1 * 5 + 6 * 5 - 1"> <button id="infixRun">Run</button>

<h1>Results</h1>

<table class="table table-striped">
<thead><tr><td>Tick</td><td>Command</td><td>Reducing</td><td>Error</td></tr></thead>
<tbody id="infixResult"></tbody>
</table>

<button id="showHideInfixSource">Show/Hide Source</button>
<div class="source" id="infixSource">

<pre class="javascript"><code>
// known operators
var operators = {
        '+': function(a, b) { return a + b; },
        '-': function(a, b) { return a - b; },
        '*': function(a, b) { return a * b; },
        '/': function(a, b) { return a / b; },
};
var precedence = [
        ['*', '/'],
        ['+', '-']
]

// process until we are done
while (input.length &gt; 1) {
        // find the first operator at the lowest level
        var reduceAt = 0;
        var found = false;
        for (var i = 0; i &lt; precedence.length; i++) {
                for (var j = 1; j &lt; input.length - 1; j++) {
                        if ($.inArray(input[j], precedence[i]) &gt;= 0) {
                                reduceAt = j;
                                found = true;
                                break;
                        }
                }
                if (found) break;
        }

        // if we didn't find one, bail
        if (!found) return;

        // otherwise, reduce that operator
        var newInput = [];
        var f = operators[input[reduceAt]];

        for (var i = 0; i &lt; reduceAt - 1; i++)
                newInput.push(input[i]);

        newInput.push("" + f(
                parseFloat(input[reduceAt - 1]),
                parseFloat(input[reduceAt + 1])
        ));

        for (var i = reduceAt + 2; i &lt; input.length; i++)
                newInput.push(input[i]);

        input = newInput;
}
</code></pre>

</div>

</div>
<div id="postfix">

<h1>Postfix / RPN</h1>

<input type="text" id="postfixInput" value="4 2 7 * + 1 6 - 5 * - 1 -"> <button id="postfixRun">Run</button>

<h1>Results</h1>

<table class="table table-striped">
<thead><tr><td>Tick</td><td>Command</td><td>Stack</td><td>Error</td></tr></thead>
<tbody id="postfixResult"></tbody>
</table>

<button id="showHidePostfixSource">Show/Hide Source</button>
<div class="source" id="postfixSource">

<pre class="javascript"><code>
// known operators
var operators = {
        '+': function(a, b) { return a + b; },
        '-': function(a, b) { return a - b; },
        '*': function(a, b) { return a * b; },
        '/': function(a, b) { return a / b; },
};

// run through all commands in the input
var stack = [];
for (var i = 0; i &lt; input.length; i++) {
        var cmd = input[i];

        // known operator
        if (cmd in operators) {
                // get the function
                var f = operators[cmd];

                // sanity check
                if (stack.length &lt; f.length) {
                        error = 'not enough arguments';
                        break;
                }

                // get the correct number of arguments
                var args = [];
                for (var j = 0; j &lt; f.length; j++)
                        args.unshift(stack.shift());

                // apply and push back onto the stack
                // note: the first argument to apply is 'this'
                stack.unshift(f.apply(undefined, args));
        }

        // anything else, push onto the stack as either a number or string
        else {
                stack.unshift(isNaN(parseFloat(cmd)) ? cmd : parseFloat(cmd));
        }
}
</code></pre>

</div>

</div>
<p>Hopefully this helps give some insight into what I was talking about in <a href="http://blog.jverkamp.com/2012/10/07/three-ways-to-write-expressions">yesterday's post</a>. I have to admit, I'm actually starting to like Javascript. It's a bit strange at times, but it does have a nice functional flavor which is always fun.</p>
<p>If you'd like to download the entire source code, you can do so here: <a href="https://github.com/jpverkamp/small-projects/blob/master/blog/evaluating-prefix-infix-postfix.js" title="Evaluating prefix/infix/postfix source code">source code</a></p>
<style>
.warning { color: red; }
</style>
<script>
jQuery(function($) {

// only show one of the three at a time
//$("#prefix").hide();
$("#infix").hide();
$("#postfix").hide();

$("#prefixShow").click(function() {
        $("#prefix").show();
        $("#infix").hide();
        $("#postfix").hide();
});

$("#infixShow").click(function() {
        $("#prefix").hide();
        $("#infix").show();
        $("#postfix").hide();
});

$("#postfixShow").click(function() {
        $("#prefix").hide();
        $("#infix").hide();
        $("#postfix").show();
});

// show/hide source, start with it hidden
$(".source").hide();
$("#showHidePrefixSource").click(function() { $("#prefixSource").toggle(); });
$("#showHideInfixSource").click(function() { $("#infixSource").toggle(); });
$("#showHidePostfixSource").click(function() { $("#postfixSource").toggle(); });

// known operators
var operators = {
        '+': function(a, b) { return a + b; },
        '-': function(a, b) { return a - b; },
        '*': function(a, b) { return a * b; },
        '/': function(a, b) { return a / b; },
};
var precedence = [
        ['*', '/'],
        ['+', '-']
]

// evaluate an prefix expression
function prefixRun() {
        $("#prefixResult").empty();

        var tick = 0;

        var input = $('#prefixInput').val().split(" ");
        var error = null;

        // process at this level
        // return an array of the result of this level and what we didn't use
        function step(current) {
                tick += 1;

                // if we don't have anything else, this is an error
                if (current.length == 0) {
                        $('#prefixResult').append('<tr><td>' + tick + '</td><td>' + current.join(' ') + '</td><td></td><td></td><td class="warning">unable to continue, no input</td></tr>\n');
                        return {value: null, rest: []};;
                }

                // report what we started with
                $('#prefixResult').append('<tr><td>' + tick + '</td><td>' + current.join(' ') + '</td><td></td><td></td><td class="warning"></td></tr>\n');

                // directly return numbers
                if (!isNaN(parseFloat(current[0]))) {
                        var output = parseFloat(current[0]);
                        var rest = current.slice(1);

                        $('#prefixResult').append('<tr><td>' + tick + '</td><td></td><td>' + output + '</td><td>' + rest.join(' ') + '</td><td class="warning"></td></tr>\n');

                        return {value: output, rest: rest};
                }

                // otherwise, we're going to have to recur
                else {
                        var f = operators[current[0]];

                        // recur for left, use that rest for right
                        var left = step(current.slice(1));
                        if (left.value == null) return {value: null, rest: []};
                        var right = step(left.rest);
                        if (right.value == null) return {value: null, rest: []};

                        // apply the function to the two values
                        var output = f(left.value, right.value);
                        var rest = right.rest;

                        $('#prefixResult').append('<tr><td>' + tick + '</td><td></td><td>' + left.value + ' ' + current[0] + ' ' + right.value + ' = ' + output + '</td><td>' + rest.join(' ') + '</td><td class="warning"></td></tr>\n');

                        return {value: output, rest: rest};
                }
        }
        var result = step(input);
        if (result.value == null) {
        } else if (result.rest.length == 0) {
                $('#prefixResult').append('<tr><td>result</td><td></td><td><b>' + result.value + '</b></td><td></td><td class="warning"></td></tr>\n');
        } else {
                $('#prefixResult').append('<tr><td>result</td><td></td><td></td><td>' + result.rest.join(' ') + '</td><td class="warning">malformed expression</td></tr>\n');
        }
}
$("#prefixRun").click(prefixRun);

// evaluate an infix expression
function infixRun() {
        $("#infixResult").empty();

        var tick = 0;

        var input = $('#infixInput').val().split(" ");
        var error = null;

        // process until we are done
        while (input.length > 1) {
                tick += 1;

                // find the first operator at the lowest level
                var reduceAt = 0;
                var reduceWhich = undefined;
                var found = false;
                for (var i = 0; i < precedence.length; i++) {
                        for (var j = 1; j < input.length - 1; j++) {
                                if ($.inArray(input[j], precedence[i]) >= 0) {
                                        reduceAt = j;
                                        reduceWhich = precedence[i].join(' ')
                                        found = true;
                                        break;
                                }
                        }
                        if (found) break;
                }

                // if we didn't find one, error
                if (!found) {
                        $('#infixResult').append('<tr><td>' + tick + '</td><td>' + input.join(' ') + '</td><td></td><td class="warning">unable to find an operator to reduce</td></tr>\n');
                        $('.warning').css('color', 'red');
                        return;
                }

                // report what we're about to do
                $('#infixResult').append('<tr><td>' + tick + '</td><td>' + input.join(' ') + '</td><td>' + reduceWhich + '</td><td class="warning"></td></tr>\n');

                // otherwise, reduce that operator
                var newInput = [];
                var f = operators[input[reduceAt]];

                for (var i = 0; i < reduceAt - 1; i++)
                        newInput.push(input[i]);

                newInput.push("" + f(
                        parseFloat(input[reduceAt - 1]),
                        parseFloat(input[reduceAt + 1])
                ));

                for (var i = reduceAt + 2; i < input.length; i++)
                        newInput.push(input[i]);

                input = newInput;
        }

        // report the final result
        $('#infixResult').append('<tr><td>result</td><td><b>' + input.join(' ') + '</b></td><td></td><td class="warning"></td></tr>\n');
}
$("#infixRun").click(infixRun);

// evaluate a postfix expression
function postfixRun() {
        $("#postfixResult").empty();

        var tick = 0;
        var stack = [];

        var input = $('#postfixInput').val().split(" ");
        var error = null;

        // run through all commands in the input
        for (var i = 0; i < input.length; i++) {
                var cmd = input[i];
                tick += 1;

                // known operator
                if (cmd in operators) {
                        // get the function
                        var f = operators[cmd];

                        // sanity check
                        if (stack.length < f.length) {
                        error = 'not enough arguments';
                        break;
                        }

                        // get the correct number of arguments
                        var args = [];
                        for (var j = 0; j < f.length; j++)
                        args.unshift(stack.shift());

                        // apply and push back onto the stack
                        // note: the first argument to apply is 'this'
                        stack.unshift(f.apply(undefined, args));
                }

                // anything else, push onto the stack as either a number or string
                else {
                        stack.unshift(isNaN(parseFloat(cmd)) ? cmd : parseFloat(cmd));
                }

                // report on current stack
                $('#postfixResult').append('<tr><td>' + tick + '</td><td>' + cmd + '</td><td>' + stack + '</td><td></td></tr>\n');
        }

        // check final stack
        if (stack.length > 1)
                error = 'malformed expression, multiple results on final stack';

        // report final result or error
        if (error == null) {
                $('#postfixResult').append('<tr><td>result</td><td></td><td><b>' + stack + '</b></td><td></td></tr>\n');
        } else {
                $('#postfixResult').append('<tr><td>result</td><td>' + cmd + '</td><td>' + stack + '</td><td class="warning">' + error + '</td></tr>\n');
                error = null;
        }
}
$("#postfixRun").click(postfixRun);
});
</script>
                </div>
                <div class="entry-footnotes">
                        <div id="footnotes"><ol></ol></div>
                </div>

                <div id="disqus_thread"></div>
<script type="text/javascript">
var disqus_shortname = "jverkamp";
var disqus_title = "Evaluating prefix/infix/postfix expressions";
var disqus_url = "http://blog.jverkamp.com/2012/10/08/evaluating-prefixinfixpostfix/";
/* * * DON'T EDIT BELOW THIS LINE * * */
(function() {
  var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
  dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js';
  (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
})();
</script>
<noscript>Please enable JavaScript to view the <a href="http://disqus.com/?ref_noscript">comments powered by Disqus.</a></noscript>
<a href="http://disqus.com" class="dsq-brlink">comments powered by <span class="logo-disqus">Disqus</span></a>
        </article>

        <footer class="container" role="contentinfo">
                <nav class="navbar navbar-default" role="navigation"><ul class="nav navbar-nav nav-justified"><li><a href="http://blog.jverkamp.com/2012/10/07/three-ways-to-write-expressions">← Three ways to write expressions</a></li><li><a href="http://blog.jverkamp.com/category/archives">Archives</a></li><li><a href="http://blog.jverkamp.com/2012/10/09/a-sea-of-stars-ch-13-missing">A Sea of Stars - Ch. 13 - Missing →</a></li></ul><ul class="nav navbar-nav nav-justified"><li><a href="http://blog.jverkamp.com/2012/10/07/three-ways-to-write-expressions">← Three ways to write expressions</a></li><li><a href="http://blog.jverkamp.com/category/programming">Programming</a></li><li><a href="http://blog.jverkamp.com/2012/10/10/two-word-games">Two Word Games →</a></li></ul></nav>

                <div class="legal">
                        <a href="http://blog.jverkamp.com/feed/atom.xml">feed <img style="border: 0;" src="http://blog.jverkamp.com/rss.png" /></a><br />
                        All posts unless otherwise mentioned are licensed under <a rel="license" href="http://creativecommons.org/licenses/by-nc-sa/3.0/deed.en_US"><img alt="Creative Commons License" style="border-width:0" src="http://i.creativecommons.org/l/by-nc-sa/3.0/80x15.png" /></a><br />
                        Any source code unless otherwise mentioned is licensed under the <a href="http://directory.fsf.org/wiki/License:BSD_3Clause">3 clause BSD license</a>
                </div>
        </footer>

<script>
(function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
(i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
m=s.getElementsByTagName(o)[0];a.defer=1;a.src=g;m.parentNode.insertBefore(a,m)
})(window,document,'script','//www.google-analytics.com/analytics.js','ga');

ga('create', 'UA-53688146-1', 'auto');
ga('send', 'pageview');
</script>
</body>
</html>