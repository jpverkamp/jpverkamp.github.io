<!DOCTYPE html>
<html>
<head>
        
        

        <title>Prime Partitions | jverkamp.com | John-Paul Verkamp</title>

        <script src="//ajax.googleapis.com/ajax/libs/jquery/1.11.0/jquery.min.js" defer></script>
        <script src="//code.jquery.com/ui/1.11.1/jquery-ui.min.js" defer></script>

        <link rel="stylesheet" href="//netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css" defer />
        <link rel="stylesheet" href="//netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap-theme.min.css" defer />
        <script src="//netdna.bootstrapcdn.com/bootstrap/3.1.1/js/bootstrap.min.js" defer></script>

        <link rel="stylesheet" href="//cdnjs.cloudflare.com/ajax/libs/ekko-lightbox/3.0.3a/ekko-lightbox.min.css" defer />
        <script src="//cdnjs.cloudflare.com/ajax/libs/ekko-lightbox/3.0.3a/ekko-lightbox.min.js" defer></script>

        <script src="//cdnjs.cloudflare.com/ajax/libs/jquery.transit/0.9.9/jquery.transit.min.js" defer></script>

        <!-- Highlight.js for syntax highlighting -->
        <link rel="stylesheet" href="/highlight/styles/obsidian.css" defer />
        <script src="/highlight/highlight.pack.js" defer></script>

        <!-- MathJax for LaTeX support -->
        <script src="//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML" defer></script>

        <!-- nanoGallery for Flickr Galleries -->
        <link rel="stylesheet" href="//cdnjs.cloudflare.com/ajax/libs/nanogallery/4.4.2/css/themes/light/nanogallery_light.css" defer />
        <script type="text/javascript" src="//cdnjs.cloudflare.com/ajax/libs/nanogallery/4.4.2/jquery.nanogallery.min.js" defer ></script>

        <!-- Pretty pretty fonts -->
        <link rel="stylesheet" type="text/css" href="//fonts.googleapis.com/css?family=Calligraffitti" defer />

        <!-- Any custom CSS or JS that I've written; this should be kept minimal -->
        <link rel="stylesheet" href="/custom.css" defer />
        <script src="/custom.js" defer></script>

        <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
        <link rel="alternate" type="application/atom+xml" title="jverkamp.com (Atom 2.0)" href="http://blog.jverkamp.com/feed/" />
</head>
<body>
        <header class="container">
        <nav class="navbar navbar-default" role="navigation">
  <div class="container-fluid">
    <!-- Brand and toggle get grouped for better mobile display -->
    <div class="navbar-header">
      <button type="button" class="navbar-toggle" data-toggle="collapse" data-target="#bs-example-navbar-collapse-1">
        <span class="sr-only">Toggle navigation</span>
        <span class="icon-bar"></span>
        <span class="icon-bar"></span>
        <span class="icon-bar"></span>
      </button>
      <a class="navbar-brand" href="http://blog.jverkamp.com"><span style="color: green;">jv</span>erkamp.com</a>
    </div>

    <!-- Collect the nav links, forms, and other content for toggling -->
    <div class="collapse navbar-collapse" id="bs-example-navbar-collapse-1">
      <ul class="nav navbar-nav"><li class="dropdown"><a href="http://blog.jverkamp.com/category/archives" class="dropdown-toggle">Archives<span class="caret"></span></a><ul class="dropdown-menu"><li><a href="http://blog.jverkamp.com/category/archives/2004">2004</a></li><li><a href="http://blog.jverkamp.com/category/archives/2005">2005</a></li><li><a href="http://blog.jverkamp.com/category/archives/2006">2006</a></li><li><a href="http://blog.jverkamp.com/category/archives/2007">2007</a></li><li><a href="http://blog.jverkamp.com/category/archives/2008">2008</a></li><li><a href="http://blog.jverkamp.com/category/archives/2009">2009</a></li><li><a href="http://blog.jverkamp.com/category/archives/2010">2010</a></li><li><a href="http://blog.jverkamp.com/category/archives/2011">2011</a></li><li><a href="http://blog.jverkamp.com/category/archives/2012">2012</a></li><li><a href="http://blog.jverkamp.com/category/archives/2013">2013</a></li><li><a href="http://blog.jverkamp.com/category/archives/2014">2014</a></li><li><a href="http://blog.jverkamp.com/category/archives/2015">2015</a></li></ul></li><li class="dropdown"><a href="http://blog.jverkamp.com/category/other" class="dropdown-toggle">Other<span class="caret"></span></a><ul class="dropdown-menu"><li><a href="http://blog.jverkamp.com/category/other/board-game-reviews">Board Game Reviews</a></li><li><a href="http://blog.jverkamp.com/category/other/book-reviews">Book Reviews</a></li><li><a href="http://blog.jverkamp.com/category/other/cooking">Cooking</a></li><li><a href="http://blog.jverkamp.com/category/other/movie-reviews">Movie Reviews</a></li></ul></li><li class="dropdown"><a href="http://blog.jverkamp.com/category/photography" class="dropdown-toggle">Photography<span class="caret"></span></a><ul class="dropdown-menu"><li><a href="http://blog.jverkamp.com/category/photography/dp-challenge">DP Challenge</a></li><li><a href="http://blog.jverkamp.com/category/photography/photosets">Photosets</a></li><li><a href="http://blog.jverkamp.com/category/photography/photosynth">Photosynth</a></li></ul></li><li class="dropdown"><a href="http://blog.jverkamp.com/category/programming" class="dropdown-toggle">Programming<span class="caret"></span></a><ul class="dropdown-menu"><li><a href="http://blog.jverkamp.com/category/programming/by-language">By Language</a></li><li><a href="http://blog.jverkamp.com/category/programming/by-project">By Project</a></li><li><a href="http://blog.jverkamp.com/category/programming/by-source">By Source</a></li><li><a href="http://blog.jverkamp.com/category/programming/by-topic">By Topic</a></li><li><a href="http://blog.jverkamp.com/category/programming/libraries">Libraries</a></li></ul></li><li class="dropdown"><a href="http://blog.jverkamp.com/category/research" class="dropdown-toggle">Research<span class="caret"></span></a><ul class="dropdown-menu"><li><a href="http://blog.jverkamp.com/category/research/by-topic">By Topic</a></li><li><a href="http://blog.jverkamp.com/category/research/publications">Publications</a></li></ul></li><li class="dropdown"><a href="http://blog.jverkamp.com/category/writing" class="dropdown-toggle">Writing<span class="caret"></span></a><ul class="dropdown-menu"><li><a href="http://blog.jverkamp.com/category/writing/by-genre">By Genre</a></li><li><a href="http://blog.jverkamp.com/category/writing/ideas">Ideas</a></li><li><a href="http://blog.jverkamp.com/category/writing/nanowrimo">NaNoWriMo</a></li><li><a href="http://blog.jverkamp.com/category/writing/novels">Novels</a></li><li><a href="http://blog.jverkamp.com/category/writing/other">Other</a></li><li><a href="http://blog.jverkamp.com/category/writing/short-stories">Short Stories</a></li><li><a href="http://blog.jverkamp.com/category/writing/writing-excuses">Writing Excuses</a></li></ul></li></ul>

      <form action="http://www.google.com/search" method="get" onSubmit="(function(obj){obj.q.value='site:blog.jverkamp.com '+obj.qfront.value;})(this)" class="navbar-form navbar-right" role="search">
        <div class="form-group">
          <input name="q" type="hidden" />
          <input name="qfront" type="text" class="form-control" placeholder="Search" />
          <button type="submit" class="btn btn-default" value="Search">Search</button>
        </p>
      </form>
    </div><!-- /.navbar-collapse -->
  </div><!-- /.container-fluid -->
</nav>
        </header>

        <article class="container">
                <header>
                        <h1 class="entry-title">Prime Partitions</h1>

                        <div class="entry-meta">
                                <span class="posted-on"><time class="entry-date" datetime="2012-10-20"><span class="year">2012</span> <span class="month">Oct</span> <span class="day">20</span></time></span>
                                <span class="tags"><ul class="tag-list list-inline"><li><a href="http://blog.jverkamp.com/category/programming/by-topic/mathematics">Mathematics</a></li><li><a href="http://blog.jverkamp.com/category/programming/by-topic/mathematics/prime-numbers">Prime Numbers</a></li><li><a href="http://blog.jverkamp.com/category/programming">Programming</a></li><li><a href="http://blog.jverkamp.com/category/programming/by-source/programming-praxis">Programming Praxis</a></li><li><a href="http://blog.jverkamp.com/category/programming/by-language/racket">Racket</a></li><li><a href="http://blog.jverkamp.com/category/programming/by-language/scheme">Scheme</a></li></ul></span>
                        </div>

                        <hr />
                </header>
                <div class="entry-content">
                        <p>Today we're back into the mathy sort of problems from Programming Praxis, <a href="http://programmingpraxis.com/2012/10/19/prime-partitions/" title="Programming Praxis: Prime Partitions">tasked with</a> calculating the number of <a href="http://mathworld.wolfram.com/PrimePartition.html" title="WolframMathworld: Prime Partition">prime partitions</a> for a given number--essentially, how many different lists of prime numbers are there that sum to the given number.</p>
<p>For example, working with 11, there are six prime partitions (I'll show the code for this later):</p>
<pre class="scheme"><code>&gt; (prime-partitions 11)
'((2 2 2 2 3) (2 2 2 5) (2 2 7) (2 3 3 3) (3 3 5) (11))</code></pre>
<p>Unfortunately, the number of prime partitions quickly gets ridiculous. Once you get to 1000, there are 48 quadrillion prime partitions... So generating all of them isn't exactly feasible.</p>
<!--more-->
<p>Luckily, there's a direct (albeit recursive) formula for calculating the number of prime partitions without actually finding all of them:<div>$$ \kappa(n) = \frac{1}{n} ( sopf(n) + \sum^{n-1}_{j=1} sopf(j) * \kappa(n - j)) $$</div>That's all well and good, but what in the world is <code>sopf</code>? Simply put, it's the sum of (unique) prime factors of a number. So if you have a number like 42, the prime factors are 2, 3, and 7. So <code>sopf(42) = 12</code>. Likewise, 12's prime factors are 2, 2, and 3 but we only want unique values, so <code>sopf(12) = 2 + 3 = 5</code>.</p>
<p>With that, we could directly calculate the value for <span>\( \kappa(1000) \)</span>:<div>$$ \kappa(1000) = \frac{1}{1000} ( sopf(1000) + \sum^{999}{j=1} sopf(j) * \kappa(1000 - j)) = 48278613741845757 $$</div>But that's no fun (if still possible) to work out by hand, so let's write a Racket program to do it for us. Luckily, Racket gives us <code>for/sum</code>. That means that the definition of <code>kappa</code> is rather straight forward:</p>
<pre class="scheme"><code>; determine the number of prime partitions of a number directly
(define (kappa n)
  (* (/ 1 n)
     (+ (sopf  n)
        (for/sum ([j (in-range 1 n)])
          (* (sopf j) (kappa (- n j)))))))</code></pre>
<p>To calculate that, we need <code>sopf</code>:</p>
<pre class="scheme"><code>; calculate the sum of unique prime factors of a number
(define (sopf n)
  (apply + (unique (prime-factors n))))</code></pre>
<p>Which of course means we need a way to calculate <code>prime-factors</code> (I think I've written <code>unique</code> enough times by now):</p>
<pre class="scheme"><code>; does m divide into n evenly?
(define (divides? n m)
  (= 0 (remainder n m)))

; return a list of the prime factors of n
(define (prime-factors n)
  (define rootn (sqrt n))
  (cond
    [(&lt;= n 1) '()]
    [(divides? n 2)
     (cons 2 (prime-factors (/ n 2)))]
    [else
     (let loop ([i 3])
       (cond
          [(&gt; i rootn) (list n)]
          [(divides? n i)
           (cons i (prime-factors (/ n i)))]
          [else
           (loop (+ i 2))]))]))</code></pre>
<p>A bit longer, but it's a really straight forward algorithm. Simply find the smallest prime factor of a given number then use recursion to find the prime factors of the rest. It does optimize slightly by openly checking up to the square root of n and by only checking odd numbers after 3.</p>
<p>And that's all you need. You can now use <code>kappa</code> to directly calculate the number of prime partitions for any number.</p>
<p>To test it, we can compare against the list given on the <a href="http://mathworld.wolfram.com/PrimePartition.html" title="WolframMathWorld: Prime Partitions">WolframMathWolf article</a> on prime partitions:</p>
<pre class="scheme"><code>&gt; (for/list ([i (in-range 2 21)]) (kappa i))
'(1 1 1 2 2 3 3 4 5 6 7 9 10 12 14 17 19 23 26)</code></pre>
<p>Unfortunately, the code we've written is <em>really</em> slow.</p>
<pre class="scheme"><code>&gt; (time (for/list ([i (in-range 2 21)]) (kappa i)))
cpu time: 2545 real time: 2769 gc time: 85
'(1 1 1 2 2 3 3 4 5 6 7 9 10 12 14 17 19 23 26)</code></pre>
<p>If it takes 2.5 seconds to calculate the first 20 values of <code>kappa</code>, I'm not even going to try <code>(kappa 1000)</code>. It's pretty much the equivalent of writing Fibonacci like this:</p>
<pre class="scheme"><code>(define (fib n)
  (cond
    [(&lt; n 1) 1]
    [else (+ (fib (- n 1)) (fib (- n 2)))]))</code></pre>
<p>(Don't do that!)</p>
<p>Since each call to <code>kappa</code> relies on n-1 other calls to <code>kappa</code>, the runtime quickly spirals into an out of control exponential runtime. Wouldn't it be nice if we could just remember each smaller value of <code>kappa</code> as we calculate it so we don't have to do all that work over and over? <a href="https://en.wikipedia.org/wiki/Memoization">Memoization</a> to the rescue! It turns out that there's already a <a href="http://blog.jverkamp.com/2012/10/20/memoization-in-racket">my own</a> (check it out if you're interested in Scheme macros, it's not too complicated).</p>
<p>Luckily, it's just a matter of swapping <code>define-memoized</code> for <code>define</code> in <code>kappa</code> and optionally <code>sopf</code>. Really, that's all you need. (I renamed them to <code>msopf</code> and <code>mkappa</code> so I could test both.)</p>
<pre class="scheme"><code>&gt; (time (for/list ([i (in-range 2 21)]) (mkappa i)))
cpu time: 1 real time: 0 gc time: 0
'(1 1 1 2 2 3 3 4 5 6 7 9 10 12 14 17 19 23 26)</code></pre>
<p>1 ms is just a bit better than 2.5 seconds, wouldn't you say? <img alt="smile" class="emoji" src="/emoji/smile.svg" /> And it should scale almost linearly with <code>n</code>, so now <code>(kappa 1000)</code> shouldn't be a problem:</p>
<pre class="scheme"><code>&gt; (time (mkappa 1000))
cpu time: 505 real time: 507 gc time: 20
48278613741845757</code></pre>
<p>Half a second and exactly the answer we were looking for. None too shabby.</p>
<p>If you'd like to download the code for this post, you can do so here:</p>
<ul>
<li><a href="https://github.com/jpverkamp/small-projects/blob/master/blog/prime-partitions.rkt" title="Source for prime-partitions">prime-partitions source code</a></li>
<li><a href="https://github.com/jpverkamp/small-projects/blob/master/racket-libraries/memoize.rkt" title="memoize source code">memoize source code</a></li>
</ul>
<hr />
<p>As a side note, this problem was particularly problematic at times to debug. Believe it or not, fully formed, correct source code doesn't just spring from my finger tips. For the longest time, I couldn't figure out why all of my <code>kappa</code> values were just slightly off and I couldn't figure out why... It turned out that I had a very minor error in <code>prime-factors</code>. For any number less than or equal to 1, it would return an invalid list, so <code>(kappa 1)</code> wasn't returning the right result. It took longer than I'd care to admit to track the error back to <code>prime-factors</code> though, but that's debugging.</p>
                </div>
                <div class="entry-footnotes">
                        <div id="footnotes"><ol></ol></div>
                </div>

                <div id="disqus_thread"></div>
<script type="text/javascript">
var disqus_shortname = "jverkamp";
var disqus_title = "Prime Partitions";
var disqus_url = "http://blog.jverkamp.com/2012/10/20/prime-partitions/";
/* * * DON'T EDIT BELOW THIS LINE * * */
(function() {
  var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
  dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js';
  (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
})();
</script>
<noscript>Please enable JavaScript to view the <a href="http://disqus.com/?ref_noscript">comments powered by Disqus.</a></noscript>
<a href="http://disqus.com" class="dsq-brlink">comments powered by <span class="logo-disqus">Disqus</span></a>
        </article>

        <footer class="container" role="contentinfo">
                <nav class="navbar navbar-default" role="navigation"><ul class="nav navbar-nav nav-justified"><li><a href="http://blog.jverkamp.com/2012/10/20/memoization-in-racket">← Memoization in Racket</a></li><li><a href="http://blog.jverkamp.com/category/archives">Archives</a></li><li><a href="http://blog.jverkamp.com/2012/10/21/popocatepetl-rising">Popocatepetl Rising →</a></li></ul><ul class="nav navbar-nav nav-justified"><li><a href="http://blog.jverkamp.com/2012/10/20/memoization-in-racket">← Memoization in Racket</a></li><li><a href="http://blog.jverkamp.com/category/programming">Programming</a></li><li><a href="http://blog.jverkamp.com/2012/10/22/prime-partitions-ii-the-listing">Prime Partitions II: The Listing →</a></li></ul></nav>

                <div class="legal">
                        <a href="http://blog.jverkamp.com/feed/atom.xml">feed <img style="border: 0;" src="http://blog.jverkamp.com/rss.png" /></a><br />
                        All posts unless otherwise mentioned are licensed under <a rel="license" href="http://creativecommons.org/licenses/by-nc-sa/3.0/deed.en_US"><img alt="Creative Commons License" style="border-width:0" src="http://i.creativecommons.org/l/by-nc-sa/3.0/80x15.png" /></a><br />
                        Any source code unless otherwise mentioned is licensed under the <a href="http://directory.fsf.org/wiki/License:BSD_3Clause">3 clause BSD license</a>
                </div>
        </footer>

<script>
(function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
(i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
m=s.getElementsByTagName(o)[0];a.defer=1;a.src=g;m.parentNode.insertBefore(a,m)
})(window,document,'script','//www.google-analytics.com/analytics.js','ga');

ga('create', 'UA-53688146-1', 'auto');
ga('send', 'pageview');
</script>
</body>
</html>