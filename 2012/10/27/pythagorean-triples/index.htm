<!DOCTYPE html>
<html>
<head>
        
        

        <title>Pythagorean Triples | jverkamp.com | John-Paul Verkamp</title>

        <script src="//ajax.googleapis.com/ajax/libs/jquery/1.11.0/jquery.min.js" defer></script>
        <script src="//code.jquery.com/ui/1.11.1/jquery-ui.min.js" defer></script>

        <link rel="stylesheet" href="//netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css" defer />
        <link rel="stylesheet" href="//netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap-theme.min.css" defer />
        <script src="//netdna.bootstrapcdn.com/bootstrap/3.1.1/js/bootstrap.min.js" defer></script>

        <link rel="stylesheet" href="//cdnjs.cloudflare.com/ajax/libs/ekko-lightbox/3.0.3a/ekko-lightbox.min.css" defer />
        <script src="//cdnjs.cloudflare.com/ajax/libs/ekko-lightbox/3.0.3a/ekko-lightbox.min.js" defer></script>

        <script src="//cdnjs.cloudflare.com/ajax/libs/jquery.transit/0.9.9/jquery.transit.min.js" defer></script>

        <!-- Highlight.js for syntax highlighting -->
        <link rel="stylesheet" href="/highlight/styles/obsidian.css" defer />
        <script src="/highlight/highlight.pack.js" defer></script>

        <!-- MathJax for LaTeX support -->
        <script src="//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML" defer></script>

        <!-- nanoGallery for Flickr Galleries -->
        <link rel="stylesheet" href="//cdnjs.cloudflare.com/ajax/libs/nanogallery/4.4.2/css/themes/light/nanogallery_light.css" defer />
        <script type="text/javascript" src="//cdnjs.cloudflare.com/ajax/libs/nanogallery/4.4.2/jquery.nanogallery.min.js" defer ></script>

        <!-- Pretty pretty fonts -->
        <link rel="stylesheet" type="text/css" href="//fonts.googleapis.com/css?family=Calligraffitti" defer />

        <!-- Any custom CSS or JS that I've written; this should be kept minimal -->
        <link rel="stylesheet" href="/custom.css" defer />
        <script src="/custom.js" defer></script>

        <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
        <link rel="alternate" type="application/atom+xml" title="jverkamp.com (Atom 2.0)" href="http://blog.jverkamp.com/feed/" />
</head>
<body>
        <header class="container">
        <nav class="navbar navbar-default" role="navigation">
  <div class="container-fluid">
    <!-- Brand and toggle get grouped for better mobile display -->
    <div class="navbar-header">
      <button type="button" class="navbar-toggle" data-toggle="collapse" data-target="#bs-example-navbar-collapse-1">
        <span class="sr-only">Toggle navigation</span>
        <span class="icon-bar"></span>
        <span class="icon-bar"></span>
        <span class="icon-bar"></span>
      </button>
      <a class="navbar-brand" href="//blog.jverkamp.com"><span style="color: green;">jv</span>erkamp.com</a>
    </div>

    <!-- Collect the nav links, forms, and other content for toggling -->
    <div class="collapse navbar-collapse" id="bs-example-navbar-collapse-1">
      <ul class="nav navbar-nav"><li class="dropdown"><a href="//blog.jverkamp.com/category/archives" class="dropdown-toggle">Archives<span class="caret"></span></a><ul class="dropdown-menu"><li><a href="//blog.jverkamp.com/category/archives/2004">2004</a></li><li><a href="//blog.jverkamp.com/category/archives/2005">2005</a></li><li><a href="//blog.jverkamp.com/category/archives/2006">2006</a></li><li><a href="//blog.jverkamp.com/category/archives/2007">2007</a></li><li><a href="//blog.jverkamp.com/category/archives/2008">2008</a></li><li><a href="//blog.jverkamp.com/category/archives/2009">2009</a></li><li><a href="//blog.jverkamp.com/category/archives/2010">2010</a></li><li><a href="//blog.jverkamp.com/category/archives/2011">2011</a></li><li><a href="//blog.jverkamp.com/category/archives/2012">2012</a></li><li><a href="//blog.jverkamp.com/category/archives/2013">2013</a></li><li><a href="//blog.jverkamp.com/category/archives/2014">2014</a></li><li><a href="//blog.jverkamp.com/category/archives/2015">2015</a></li></ul></li><li class="dropdown"><a href="//blog.jverkamp.com/category/other" class="dropdown-toggle">Other<span class="caret"></span></a><ul class="dropdown-menu"><li><a href="//blog.jverkamp.com/category/other/board-game-reviews">Board Game Reviews</a></li><li><a href="//blog.jverkamp.com/category/other/book-reviews">Book Reviews</a></li><li><a href="//blog.jverkamp.com/category/other/cooking">Cooking</a></li><li><a href="//blog.jverkamp.com/category/other/movie-reviews">Movie Reviews</a></li></ul></li><li class="dropdown"><a href="//blog.jverkamp.com/category/photography" class="dropdown-toggle">Photography<span class="caret"></span></a><ul class="dropdown-menu"><li><a href="//blog.jverkamp.com/category/photography/dp-challenge">DP Challenge</a></li><li><a href="//blog.jverkamp.com/category/photography/photosets">Photosets</a></li><li><a href="//blog.jverkamp.com/category/photography/photosynth">Photosynth</a></li></ul></li><li class="dropdown"><a href="//blog.jverkamp.com/category/programming" class="dropdown-toggle">Programming<span class="caret"></span></a><ul class="dropdown-menu"><li><a href="//blog.jverkamp.com/category/programming/by-language">By Language</a></li><li><a href="//blog.jverkamp.com/category/programming/by-project">By Project</a></li><li><a href="//blog.jverkamp.com/category/programming/by-source">By Source</a></li><li><a href="//blog.jverkamp.com/category/programming/by-topic">By Topic</a></li><li><a href="//blog.jverkamp.com/category/programming/libraries">Libraries</a></li></ul></li><li class="dropdown"><a href="//blog.jverkamp.com/category/research" class="dropdown-toggle">Research<span class="caret"></span></a><ul class="dropdown-menu"><li><a href="//blog.jverkamp.com/category/research/by-topic">By Topic</a></li><li><a href="//blog.jverkamp.com/category/research/publications">Publications</a></li></ul></li><li class="dropdown"><a href="//blog.jverkamp.com/category/writing" class="dropdown-toggle">Writing<span class="caret"></span></a><ul class="dropdown-menu"><li><a href="//blog.jverkamp.com/category/writing/by-genre">By Genre</a></li><li><a href="//blog.jverkamp.com/category/writing/ideas">Ideas</a></li><li><a href="//blog.jverkamp.com/category/writing/nanowrimo">NaNoWriMo</a></li><li><a href="//blog.jverkamp.com/category/writing/novels">Novels</a></li><li><a href="//blog.jverkamp.com/category/writing/other">Other</a></li><li><a href="//blog.jverkamp.com/category/writing/short-stories">Short Stories</a></li><li><a href="//blog.jverkamp.com/category/writing/writing-excuses">Writing Excuses</a></li></ul></li></ul>

      <form action="http://www.google.com/search" method="get" onSubmit="(function(obj){obj.q.value='site:blog.jverkamp.com '+obj.qfront.value;})(this)" class="navbar-form navbar-right" role="search">
        <div class="form-group">
          <input name="q" type="hidden" />
          <input name="qfront" type="text" class="form-control" placeholder="Search" />
          <button type="submit" class="btn btn-default" value="Search">Search</button>
        </p>
      </form>
    </div><!-- /.navbar-collapse -->
  </div><!-- /.container-fluid -->
</nav>
        </header>

        <article class="container">
                <header>
                        <h1 class="entry-title">Pythagorean Triples</h1>

                        <div class="entry-meta">
                                <span class="posted-on"><time class="entry-date" datetime="2012-10-27"><span class="year">2012</span> <span class="month">Oct</span> <span class="day">27</span></time></span>
                                <span class="tags"><ul class="tag-list list-inline"><li><a href="//blog.jverkamp.com/category/programming/by-topic/mathematics">Mathematics</a></li><li><a href="//blog.jverkamp.com/category/programming">Programming</a></li><li><a href="//blog.jverkamp.com/category/programming/by-source/programming-praxis">Programming Praxis</a></li><li><a href="//blog.jverkamp.com/category/programming/by-language/racket">Racket</a></li><li><a href="//blog.jverkamp.com/category/programming/by-language/scheme">Scheme</a></li></ul></span>
                        </div>

                        <hr />
                </header>
                <div class="entry-content">
                        <p>When Programming Praxis mentioned that the <a href="http://programmingpraxis.com/2012/10/26/pythagorean-triples/" title="Programming Praxis: Pythagorean Triples">newest challenge</a> sounded like a <a href="http://projecteuler.net/" title="Project Euler">Project Euler</a> problem, they were't wrong. Basically, the idea is to count the number of <a href="https://en.wikipedia.org/wiki/Pythagorean_Triples">Pythagorean Triples</a> with perimeters (sum of the three numbers) under a given value. The necessary code to brute force the problem is really straight forward, but then they asked for the count up to one million. With the brute force <span>\( O(n^2) \)</span> algorithm (and a relatively high constant), that's not really feasible. So that's when we have to get a bit more creative.</p>
<!--more-->
<p>First, how about that brute force solution I promised:</p>
<pre class="scheme"><code>(define (brute-count-triples-under sum)
  (define count 0)
  (for* ([a (in-range 1 sum)]
         [b (in-range 1 a)]
         #:when (let ([c (sqrt (+ (* a a) (* b b)))])
                  (and (&lt;= (+ a b c) sum)
                       (integer? c))))
    (set! count (+ count 1)))
  count)</code></pre>
<p>The basic idea is calculate every a and b such that a < b and such that <span>\( c = \sqrt{a^2 + b^2} \)</span> for some integer c and the sum a+b+c is less than the target. Simple enough, how does that work out?</p>
<pre class="scheme"><code>&gt; (time (brute-count-triples-under 100))
cpu time: 8 real time: 5 gc time: 0
17</code></pre>
<p>And pretty fast too. But if we try to run longer examples:</p>
<pre class="scheme"><code>&gt; (time (brute-count-triples-under 1000))
cpu time: 584 real time: 585 gc time: 48
325

&gt; (time (brute-count-triples-under 10000))
cpu time: 54687 real time: 54840 gc time: 1348
4858</code></pre>
<p>Yeah, I don't really want to try that on one million. So we need a faster algorithm. Luckily, you don't have to try all of the possible ways that could generate a triple--it turns out there are algorithms to <a href="https://en.wikipedia.org/wiki/do_it for you">Formulas for generating Pythagorean triples</a>. One in particularly came from a British math professor A. Hall in the paper <em><a href="http://www.jstor.org/discover/10.2307/3613860?uid=2&uid=4&sid=21101204896923" title="Genealogy of Pythagorean Triads">Genealogy of Pythagorean Triads</a></em> which showed that given any primitive Pythagorean triple (one that is not a multiple of another, smaller triple), you can produce three more primitive triples with the formulas:</p>
<blockquote>
a – 2b + 2c, 2a – b + 2c, 2a – 2b + 3c
a + 2b + 2c, 2a + b + 2c, 2a + 2b + 3c
-a + 2b + 2c, -2a + b + 2c, -2a + 2b + 3c
</blockquote>
<p>You can generate even more primitive triples from those in turn, as long as you choose to do so. In our case, we can stop each branch once the perimeter of the triple is larger than our target as they don't ever get smaller. So how do we turn that into code? We use Racket's <code><a href="http://docs.racket-lang.org/search/index.html?q=generators">generators</a></code>:</p>
<pre class="scheme"><code>(define (primitive-triples [max-sum #f])
  (generator ()
    (let loop ([a 3] [b 4] [c 5])
      (when (or (not max-sum) (&lt;= (+ a b c) max-sum))
        (yield (list (min a b) (max a b) c))
        ; a – 2b + 2c, 2a – b + 2c, 2a – 2b + 3c
        (loop (+ a (* -2 b) (* 2 c))
              (+ (* 2 a) (- b) (* 2 c))
              (+ (* 2 a) (* -2 b) (* 3 c)))
        ; a + 2b + 2c, 2a + b + 2c, 2a + 2b + 3c
        (loop (+ a (* 2 b) (* 2 c))
              (+ (* 2 a) b (* 2 c))
              (+ (* 2 a) (* 2 b) (* 3 c)))
        ; -a + 2b + 2c, -2a + b + 2c, -2a + 2b + 3c
        (loop (+ (- a) (* 2 b) (* 2 c))
              (+ (* -2 a) b (* 2 c))
              (+ (* -2 a) (* 2 b) (* 3 c)))))
    (yield #f)))</code></pre>
<p>Similar to Python's <code>yield</code>, this generator will create a sequence of primitive triples, scanning in a depth first manner down each branch of the aforementioned tree. From there, we just have to calculate each multiple to get a list of all Pythagorean triples with perimeters less than a given value:</p>
<pre class="scheme"><code>(define (triples-under sum)
  (for*/list ([trip (in-producer (primitive-triples sum) #f)]
              [k (in-range 1 (+ 1 (quotient sum (apply + trip))))])
    (map (lambda (n) (* n k)) trip)))</code></pre>
<p>So if we wanted to test this with all 17 triples with perimeters under 100, we could:</p>
<pre class="scheme"><code>&gt; (triples-under 100)
'((3 4 5)    (6 8 10)   (9 12 15)  (12 16 20) (15 20 25) (18 24 30) (21 28 35)
  (24 32 40) (5 12 13)  (10 24 26) (15 36 39) (7 24 25)  (9 40 41)  (20 21 29)
  (8 15 17)  (16 30 34) (12 35 37))</code></pre>
<p>On the other hand though, we don't necessarily care what the actual triples are, we just want to know how many there are. So a slight modification to just count them:</p>
<pre class="scheme"><code>(define (count-triples-under sum)
  (define count 0)
  (for* ([trip (in-producer (primitive-triples sum) #f)]
         [k (in-range 1 (+ 1 (quotient sum (apply + trip))))])
    (set! count (+ count 1)))
  count)</code></pre>
<p>And that's it. We can finally answer the question originally asked of us:</p>
<pre class="scheme"><code>&gt; (time (count-triples-under 1000000))
cpu time: 6116 real time: 6121 gc time: 1792
808950</code></pre>
<p>It's still not as fast as I'd like, but it's certainly faster than it would have been without the fancier algorithm.</p>
<p>And that's all there is to it. If you'd like to download the entire source code for today, you can do so here: <a href="https://github.com/jpverkamp/small-projects/blob/master/blog/pythagorean-triples.rkt">pythagorean-triples source</a></p>
<p>Like I said before, it definitely did have the feel of a Project Euler problem, where the straight forward solution is not generally the best one and if you work at it, you can find something that will run in a fraction of the time.</p>
<p>Perhaps I'll start publishing my Project Euler solutions here. I've worked through a good chunk of the problems on two separate occasions, both in Python and in Scheme and it might be interesting to compare and contrast the different languages. Although since it's sort of a contest, that might be frowned upon. We'll see.</p>
<p><b>Edit:</b></p>
<p>Eesh. When programmingpraxis mentioned that generators were slow down in the comments, I remembered some chatter on the Racket mailing list (the thread from this message) talking about generator performance. But I hadn't realized it would be quite <em>this</em> extensive. It's easy enough to reimplement the code to make <code>primitive-triples</code> just return a list of all of the triples directly:</p>
<pre class="scheme"><code>(define (primitive-triples-nogen max-sum)
  (let loop ([a 3] [b 4] [c 5])
    (if (&gt; (+ a b c) max-sum)
        '()
        (append
         (list (list (min a b) (max a b) c))
         ; a – 2b + 2c, 2a – b + 2c, 2a – 2b + 3c
         (loop (+ a (* -2 b) (* 2 c))
               (+ (* 2 a) (- b) (* 2 c))
               (+ (* 2 a) (* -2 b) (* 3 c)))
         ; a + 2b + 2c, 2a + b + 2c, 2a + 2b + 3c
         (loop (+ a (* 2 b) (* 2 c))
               (+ (* 2 a) b (* 2 c))
               (+ (* 2 a) (* 2 b) (* 3 c)))
         ; -a + 2b + 2c, -2a + b + 2c, -2a + 2b + 3c
         (loop (+ (- a) (* 2 b) (* 2 c))
               (+ (* -2 a) b (* 2 c))
               (+ (* -2 a) (* 2 b) (* 3 c)))))))

(define (count-triples-under-nogen sum)
  (define count 0)
  (for* ([trip (in-list (primitive-triples-nogen sum))]
         [k (in-range 1 (+ 1 (quotient sum (apply + trip))))])
    (set! count (+ count 1)))
  count)</code></pre>
<p>Then look at the performance we get:</p>
<pre class="scheme"><code>&gt; (time (count-triples-under 1000000))
cpu time: 7109 real time: 7129 gc time: 2292
808950

&gt; (time (count-triples-under-nogen 1000000))
cpu time: 352 real time: 348 gc time: 112
808950</code></pre>
<p>Yeah... So there is a bit of a performance penalty for generators after all (most likely due to the use of continuations to implement them according to the aforementioned thread). I'll have to keep that in mind.</p>
<p><b>Edit 2:</b></p>
<p>So I decided to go for the best of both worlds and essentially make a generator while maintaining the state myself. Essentially, I'll use <code>set!</code> to update the list of triples we haven't yet tried, stored in the function's state.</p>
<pre class="scheme"><code>(define (primitive-triples-state [max-sum #f])
  (define triples '((3 4 5)))
  (lambda ()
    (let loop ()
      (cond
        [(null? triples) #f]
        [else
         (define a (caar triples))
         (define b (cadar triples))
         (define c (caddar triples))
         (cond
           [(and max-sum (&gt; (+ a b c) max-sum))
            (set! triples (cdr triples))
            (loop)]
           [else
            (define r (car triples))
            (set! triples
                  (list*
                   ; a – 2b + 2c, 2a – b + 2c, 2a – 2b + 3c
                   (list (+ a (* -2 b) (* 2 c))
                         (+ (* 2 a) (- b) (* 2 c))
                         (+ (* 2 a) (* -2 b) (* 3 c)))
                   ; a + 2b + 2c, 2a + b + 2c, 2a + 2b + 3c
                   (list (+ a (* 2 b) (* 2 c))
                         (+ (* 2 a) b (* 2 c))
                         (+ (* 2 a) (* 2 b) (* 3 c)))
                   ; -a + 2b + 2c, -2a + b + 2c, -2a + 2b + 3c
                   (list (+ (- a) (* 2 b) (* 2 c))
                         (+ (* -2 a) b (* 2 c))
                         (+ (* -2 a) (* 2 b) (* 3 c)))
                   ; all of the rest
                   (cdr triples)))
            r])]))))

(define (count-triples-under-state sum)
  (define count 0)
  (for* ([trip (in-producer (primitive-triples-state sum) #f)]
         [k (in-range 1 (+ 1 (quotient sum (apply + trip))))])
    (set! count (+ count 1)))
  count)</code></pre>
<p>It's fractionally slower than the version that just directly returns the list (the overhead of the function calls, I'm guessing), but not enough to be statistically significant.</p>
<pre class="scheme"><code>&gt; (time (count-triples-under-nogen 1000000))
cpu time: 352 real time: 348 gc time: 112
808950

&gt; (time (count-triples-under-state 1000000))
cpu time: 388 real time: 388 gc time: 0
808950</code></pre>
<p>Now I'm wondering how hard it would be a write a version of the <code>generator</code> macro that bundles this all up for you. It wouldn't be as general purpose, but I'm will to bet it could be done.</p>
                </div>
                <div class="entry-footnotes">
                        <div id="footnotes"><ol></ol></div>
                </div>

                <div id="disqus_thread"></div>
<script type="text/javascript">
var disqus_shortname = "jverkamp";
var disqus_title = "Pythagorean Triples";
var disqus_url = "http://blog.jverkamp.com/2012/10/27/pythagorean-triples/";
/* * * DON'T EDIT BELOW THIS LINE * * */
(function() {
  var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
  dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js';
  (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
})();
</script>
<noscript>Please enable JavaScript to view the <a href="http://disqus.com/?ref_noscript">comments powered by Disqus.</a></noscript>
<a href="http://disqus.com" class="dsq-brlink">comments powered by <span class="logo-disqus">Disqus</span></a>
        </article>

        <footer class="container" role="contentinfo">
                <nav class="navbar navbar-default" role="navigation"><ul class="nav navbar-nav nav-justified"><li><a href="//blog.jverkamp.com/2012/10/26/a-sea-of-stars-ch-18-daedalus">← A Sea of Stars - Ch. 18 - Daedalus</a></li><li><a href="//blog.jverkamp.com/category/archives">Archives</a></li><li><a href="//blog.jverkamp.com/2012/10/28/starfall">Starfall →</a></li></ul><ul class="nav navbar-nav nav-justified"><li><a href="//blog.jverkamp.com/2012/10/25/determining-country-by-latitudelongitude">← Determining country by latitude/longitude</a></li><li><a href="//blog.jverkamp.com/category/programming">Programming</a></li><li><a href="//blog.jverkamp.com/2012/10/29/bitvectors-in-racket">Bitvectors in Racket →</a></li></ul></nav>

                <div class="legal">
                        <a href="//blog.jverkamp.com/feed/atom.xml">feed <img style="border: 0;" src="//blog.jverkamp.com/rss.png" /></a><br />
                        All posts unless otherwise mentioned are licensed under <a rel="license" href="http://creativecommons.org/licenses/by-nc-sa/3.0/deed.en_US"><img alt="Creative Commons License" style="border-width:0" src="http://i.creativecommons.org/l/by-nc-sa/3.0/80x15.png" /></a><br />
                        Any source code unless otherwise mentioned is licensed under the <a href="http://directory.fsf.org/wiki/License:BSD_3Clause">3 clause BSD license</a>
                </div>
        </footer>

<script>
(function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
(i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
m=s.getElementsByTagName(o)[0];a.defer=1;a.src=g;m.parentNode.insertBefore(a,m)
})(window,document,'script','//www.google-analytics.com/analytics.js','ga');

ga('create', 'UA-53688146-1', 'auto');
ga('send', 'pageview');
</script>
</body>
</html>