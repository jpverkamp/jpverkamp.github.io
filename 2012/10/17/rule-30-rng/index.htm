<!DOCTYPE html>
<html>
<head>
        
        

        <title>Rule 30 RNG | jverkamp.com | John-Paul Verkamp</title>

        <script src="//ajax.googleapis.com/ajax/libs/jquery/1.11.0/jquery.min.js"></script>

        <script src="//code.jquery.com/ui/1.11.1/jquery-ui.min.js"></script>

        <link rel="stylesheet" href="//netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css" />
        <link rel="stylesheet" href="//netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap-theme.min.css" />
        <script src="//netdna.bootstrapcdn.com/bootstrap/3.1.1/js/bootstrap.min.js"></script>

        <link rel="stylesheet" href="//cdnjs.cloudflare.com/ajax/libs/ekko-lightbox/3.0.3a/ekko-lightbox.min.css" />
        <script src="//cdnjs.cloudflare.com/ajax/libs/ekko-lightbox/3.0.3a/ekko-lightbox.min.js"></script>

        <script src="//cdnjs.cloudflare.com/ajax/libs/jquery.transit/0.9.9/jquery.transit.min.js"></script>

        <!-- Highlight.js for syntax highlighting -->
        <link rel="stylesheet" href="/highlight/styles/obsidian.css" />
        <script src="/highlight/highlight.pack.js"></script>

        <!-- MathJax for LaTeX support -->
        <script src="//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML"></script>

        <!-- nanoGallery for Flickr Galleries -->
        <link rel="stylesheet" href="//cdnjs.cloudflare.com/ajax/libs/nanogallery/4.4.2/css/themes/light/nanogallery_light.css" />
        <script type="text/javascript" src="//cdnjs.cloudflare.com/ajax/libs/nanogallery/4.4.2/jquery.nanogallery.min.js"></script>

        <!-- Pretty pretty fonts -->
        <link rel="stylesheet" type="text/css" href="//fonts.googleapis.com/css?family=Calligraffitti" />

        <!-- Emoji! (https://hassankhan.github.io/emojify.js/) -->
        <link rel="stylesheet" type="text/css" href="/emojify.js/emojify-emoticons.min.css" />
        <link rel="stylesheet" type="text/css" href="/emojify.js/emojify.min.css" />
        <script type="text/javascript" src="/emojify.js/emojify.min.js"></script>

        <!-- Any custom CSS or JS that I've written; this should be kept minimal -->
        <link rel="stylesheet" href="/custom.css" />
        <script src="/custom.js"></script>

        <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
        <link rel="alternate" type="application/atom+xml" title="jverkamp.com (Atom 2.0)" href="http://blog.jverkamp.com/feed/" />
</head>
<body>
        <header class="container">
        <nav class="navbar navbar-default" role="navigation">
  <div class="container-fluid">
    <!-- Brand and toggle get grouped for better mobile display -->
    <div class="navbar-header">
      <button type="button" class="navbar-toggle" data-toggle="collapse" data-target="#bs-example-navbar-collapse-1">
        <span class="sr-only">Toggle navigation</span>
        <span class="icon-bar"></span>
        <span class="icon-bar"></span>
        <span class="icon-bar"></span>
      </button>
      <a class="navbar-brand" href="http://blog.jverkamp.com"><span style="color: green;">jv</span>erkamp.com</a>
    </div>

    <!-- Collect the nav links, forms, and other content for toggling -->
    <div class="collapse navbar-collapse" id="bs-example-navbar-collapse-1">
      <ul class="nav navbar-nav"><li class="dropdown"><a href="http://blog.jverkamp.com/category/archives" class="dropdown-toggle">Archives<span class="caret"></span></a><ul class="dropdown-menu"><li><a href="http://blog.jverkamp.com/category/archives/2004">2004</a></li><li><a href="http://blog.jverkamp.com/category/archives/2005">2005</a></li><li><a href="http://blog.jverkamp.com/category/archives/2006">2006</a></li><li><a href="http://blog.jverkamp.com/category/archives/2007">2007</a></li><li><a href="http://blog.jverkamp.com/category/archives/2008">2008</a></li><li><a href="http://blog.jverkamp.com/category/archives/2009">2009</a></li><li><a href="http://blog.jverkamp.com/category/archives/2010">2010</a></li><li><a href="http://blog.jverkamp.com/category/archives/2011">2011</a></li><li><a href="http://blog.jverkamp.com/category/archives/2012">2012</a></li><li><a href="http://blog.jverkamp.com/category/archives/2013">2013</a></li><li><a href="http://blog.jverkamp.com/category/archives/2014">2014</a></li><li><a href="http://blog.jverkamp.com/category/archives/2015">2015</a></li></ul></li><li class="dropdown"><a href="http://blog.jverkamp.com/category/other" class="dropdown-toggle">Other<span class="caret"></span></a><ul class="dropdown-menu"><li><a href="http://blog.jverkamp.com/category/other/board-game-reviews">Board Game Reviews</a></li><li><a href="http://blog.jverkamp.com/category/other/book-reviews">Book Reviews</a></li><li><a href="http://blog.jverkamp.com/category/other/cooking">Cooking</a></li><li><a href="http://blog.jverkamp.com/category/other/movie-reviews">Movie Reviews</a></li></ul></li><li class="dropdown"><a href="http://blog.jverkamp.com/category/photography" class="dropdown-toggle">Photography<span class="caret"></span></a><ul class="dropdown-menu"><li><a href="http://blog.jverkamp.com/category/photography/dp-challenge">DP Challenge</a></li><li><a href="http://blog.jverkamp.com/category/photography/photosets">Photosets</a></li><li><a href="http://blog.jverkamp.com/category/photography/photosynth">Photosynth</a></li></ul></li><li class="dropdown"><a href="http://blog.jverkamp.com/category/programming" class="dropdown-toggle">Programming<span class="caret"></span></a><ul class="dropdown-menu"><li><a href="http://blog.jverkamp.com/category/programming/by-language">By Language</a></li><li><a href="http://blog.jverkamp.com/category/programming/by-project">By Project</a></li><li><a href="http://blog.jverkamp.com/category/programming/by-source">By Source</a></li><li><a href="http://blog.jverkamp.com/category/programming/by-topic">By Topic</a></li><li><a href="http://blog.jverkamp.com/category/programming/libraries">Libraries</a></li></ul></li><li class="dropdown"><a href="http://blog.jverkamp.com/category/research" class="dropdown-toggle">Research<span class="caret"></span></a><ul class="dropdown-menu"><li><a href="http://blog.jverkamp.com/category/research/by-topic">By Topic</a></li><li><a href="http://blog.jverkamp.com/category/research/publications">Publications</a></li></ul></li><li class="dropdown"><a href="http://blog.jverkamp.com/category/writing" class="dropdown-toggle">Writing<span class="caret"></span></a><ul class="dropdown-menu"><li><a href="http://blog.jverkamp.com/category/writing/by-genre">By Genre</a></li><li><a href="http://blog.jverkamp.com/category/writing/ideas">Ideas</a></li><li><a href="http://blog.jverkamp.com/category/writing/nanowrimo">NaNoWriMo</a></li><li><a href="http://blog.jverkamp.com/category/writing/novels">Novels</a></li><li><a href="http://blog.jverkamp.com/category/writing/other">Other</a></li><li><a href="http://blog.jverkamp.com/category/writing/short-stories">Short Stories</a></li><li><a href="http://blog.jverkamp.com/category/writing/writing-excuses">Writing Excuses</a></li></ul></li></ul>

      <form action="http://www.google.com/search" method="get" onSubmit="(function(obj){obj.q.value='site:blog.jverkamp.com '+obj.qfront.value;})(this)" class="navbar-form navbar-right" role="search">
        <div class="form-group">
          <input name="q" type="hidden" />
          <input name="qfront" type="text" class="form-control" placeholder="Search" />
          <button type="submit" class="btn btn-default" value="Search">Search</button>
        </p>
      </form>
    </div><!-- /.navbar-collapse -->
  </div><!-- /.container-fluid -->
</nav>
        </header>

        <article class="container">
                <header>
                        <h1 class="entry-title">Rule 30 RNG</h1>

                        <div class="entry-meta">
                                <span class="posted-on"><time class="entry-date" datetime="2012-10-17"><span class="year">2012</span> <span class="month">Oct</span> <span class="day">17</span></time></span>
                                <span class="tags"><ul class="tag-list list-inline"><li><a href="http://blog.jverkamp.com/category/programming/by-topic/cellular-automata">Cellular Automata</a></li><li><a href="http://blog.jverkamp.com/category/programming/by-topic/mathematics">Mathematics</a></li><li><a href="http://blog.jverkamp.com/category/programming">Programming</a></li><li><a href="http://blog.jverkamp.com/category/programming/by-source/programming-praxis">Programming Praxis</a></li><li><a href="http://blog.jverkamp.com/category/programming/by-language/racket">Racket</a></li><li><a href="http://blog.jverkamp.com/category/programming/by-language/scheme">Scheme</a></li></ul></span>
                        </div>

                        <hr />
                </header>
                <div class="entry-content">
                        <p>Today we get away from the word games for a little while and get back to talking about random number generators (previous posts <a href="http://blog.jverkamp.com/2012/08/22/two-random-exercises">here</a> and <a href="http://blog.jverkamp.com/2012/08/23/two-more-random-exercises">here</a>). Or rather one random number generator in specific: a <a href="https://en.wikipedia.org/wiki/Rule_30">Rule 30</a> <a href="https://en.wikipedia.org/wiki/psuedo-random_number generator">PRNG</a> (PRNG). (Here's the <a href="http://programmingpraxis.com/2011/04/29/rule-30-rng/" title="Programming Praxis: Rule 30 RNG">motivating post</a> from Programming Praxis.)</p>
<p>Remember the previous post I made about <a href="http://blog.jverkamp.com/2012/10/03/elementary-cellular-automaton">cellular automaton</a>? The basic idea is to turn those into a random number generator. If you go back to the linked post in particular and give it Rule 30 with a random initial state, you can see how chaotic the rows seem to be. Perfect for a PRNG.</p>
<!--more-->
<p>So how do we go about it?</p>
<p>First, since everything we're about to do deals with bits at some level or another, we want a pair of functions that can convert from binary to decimal and vice versa. Easy enough:</p>
<pre class="scheme"><code>; convert a decimal number to a binary list
; 10 =&gt; '(1 0 1 0)
(define (dec-&gt;bin d)
  (reverse
   (let loop ([d d])
     (if (= d 0)
         '()
         (cons (remainder d 2) (loop (quotient d 2)))))))

; convert a binary list to a decimal number
; '(1 0 1 0) =&gt; 10
(define (bin-&gt;dec b)
  (let loop ([b (reverse b)] [p 1])
    (if (null? b)
        0
        (+ (* (car b) p) (loop (cdr b) (* p 2))))))</code></pre>
<p>But that doesn't help if we have a number like 10 and we really need an 8-bit binary state. So one more function that will pad the width out to the correct length.</p>
<pre class="scheme"><code>; pad a list out to a given length with a given value
(define (pad-to n ls with)
  (append (make-list (- n (length ls)) with) ls))</code></pre>
<p>Yes, it's inefficient with calls to <code>append</code> and <code>length</code>, but with how little it's going to be used, it's all good.</p>
<p>With that, we're just about there. The goal will be to set up the state in an initial function and then return a thunk that will return each random number in turn. To do that, we'll loop across the internal state, updating each value according to the rule. Unfortunately, the edge cases are going to be a little problematic, so we're just going to wrap the references around so that a negative indexes start off the right end and too large indexes come back around to the left.</p>
<pre class="scheme"><code>; wrap the edges of a vector around rather than returning an error
(define (wrapped-vector-ref v i)
  (vector-ref v (remainder (+ i (vector-length v)) (vector-length v))))</code></pre>
<p>Okay, we're golden. Let's see if we can turn that into a function:</p>
<pre class="scheme"><code>; create a new random number generator
; rule is the rule to use to generate the next state
; width is the number of bits in the generator
; seed is the initial value for the generator
(define (make-rng [rule 30] [width 32] [seed #f])
  ; start by converting the initial state into an internal vector
  ; and the rule into a function that will convert states
  (let ([state
         (list-&gt;vector
          (pad-to width
                  (if seed
                      (dec-&gt;bin seed)
                      (for/list ([i width]) (random 2)))
                  0))]
        [rule
         (let ([rule (list-&gt;vector (reverse (pad-to 8 (dec-&gt;bin rule) 0)))])
           (lambda (a b c)
             (vector-ref rule (+ (* 4 a) (* 2 b) c))))])
    ; return a thunk that will generate each number
    ; calculate the next state, store it, and return a decimal version
    (lambda ()
      (define next
        (for/vector ([i width])
          (rule (wrapped-vector-ref state (- i 1))
                (wrapped-vector-ref state i)
                (wrapped-vector-ref state (+ i 1)))))
      (set! state next)
      (bin-&gt;dec (vector-&gt;list next)))))</code></pre>
<p>A few interesting parts.</p>
<p>First, we have default parameters. I really like this about Racket and miss it when I move back to other Schemes. In this case, you can call <code>make-rng</code> with 0, 1, 2, or 3 parameters. As noted in the comments, the first parameter controls the rule that we'll use to update the state (the eponymous Rule 30 by default), the second sets the width of the internal state in bits (set to a 32-bit integer by default), and the third sets the initial value (if it's not specified, generate random bits using a more traditional method).</p>
<p>The next interesting part is the mess I made of the <code>rule</code> variable. It starts as a decimal version of the rule, but is quickly changed first into a binary vector:</p>
<pre class="scheme"><code>(let ([rule (list-&gt;vector (reverse (pad-to 8 (dec-&gt;bin rule) 0)))])
  ...)</code></pre>
<p>After that, we turn it into a three-argument function, taking the left, center, and right bits above it and returning the bit that we want. Perhaps it's not optimal, what with all three variables having the same name, but since they all represent the same thing and we won't be using the original version, it seems reasonable.</p>
<p>The final part is calculating the next state each time. As I've said before, Racket's <code>for</code> family of macros is all sorts of fun.</p>
<pre class="scheme"><code>(for/vector ([i width])
  (rule (safe-vector-ref state (- i 1) 0)
        (safe-vector-ref state i 0)
        (safe-vector-ref state (+ i 1) 0)))</code></pre>
<p>And that's it, we're good to go. Let's go ahead and give it a try, making a 32-bit Rule-30 generator:</p>
<pre class="scheme"><code>&gt; (define rule-30-rng (make-rng 30 32))
&gt; (for/list ([i 20]) (rule-30-rng))

'(2081921567 3258217264 2808532712 3160193164 2731779546
  3063823635 2767282622 3213579041 2690277107 2966671502
  2845710809 2943432471 2823546036 2902073254 2877501501
  2856773729 2884406483 2852903838 2870612593 2863873995)
</code></pre>
<p>Some rules are a bit less interesting:</p>
<pre class="scheme"><code>&gt; (define rule-220-rng (make-rng 220 32))
&gt; (for/list ([i 20]) (rule-220-rng))
'(3181303643 3185497947 3185497947 3185497947 3185497947
  3185497947 3185497947 3185497947 3185497947 3185497947
  3185497947 3185497947 3185497947 3185497947 3185497947
  3185497947 3185497947 3185497947 3185497947 3185497947)</code></pre>
<p>Still, it's not bad from at least a theoretical point of view.</p>
<p>You can also make smaller generators:</p>
<pre class="scheme"><code>&gt; (define rule-30-small-rng (make-rng 30 8))
&gt; (for/list ([i 20]) (rule-30-small-rng))

'(237 137 223 144 248 132 206 185 167 188
  162 183 164 190 161 179 174 169 175 168)</code></pre>
<p>Or significantly larger ones:</p>
<pre class="scheme"><code>&gt; (define rule-30-large-rng (make-rng 30 32))
&gt; (for/list ([i 4]) (rule-30-large-rng))
'(89023152286745644506872318191753884006989667221527067666095402290895880008920
  79429241104291927956174027620442798020819263458393486404866413705199432492948
  76190546924302348594483004811252023470674220283715618311175239657740025994358
  78165092849222814468761907530085892160685112152512879137896641918045191418565
  77670707617636225778606052617006557506563209338194205599967259022343124184749)</code></pre>
<p>It's all good.</p>
<p>I wouldn't at all recommend using this for anything that needs even semi-secure random numbers, but at the very least it's interesting as a thought experiment.</p>
<p>If you'd like the entire source code, you can access it here:</p>
<ul>
<li><a href="https://github.com/jpverkamp/small-projects/blob/master/blog/rule-30-rng.rkt" title="rule-30-rng source code">rule-30-rng source code</a></li>
</ul>
                </div>
                <div class="entry-footnotes">
                        <div id="footnotes"><ol></ol></div>
                </div>

                <div id="disqus_thread"></div>
<script type="text/javascript">
var disqus_shortname = "jverkamp";
var disqus_title = "Rule 30 RNG";
var disqus_url = "http://blog.jverkamp.com/2012/10/17/rule-30-rng/";
/* * * DON'T EDIT BELOW THIS LINE * * */
(function() {
  var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
  dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js';
  (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
})();
</script>
<noscript>Please enable JavaScript to view the <a href="http://disqus.com/?ref_noscript">comments powered by Disqus.</a></noscript>
<a href="http://disqus.com" class="dsq-brlink">comments powered by <span class="logo-disqus">Disqus</span></a>
        </article>

        <footer class="container" role="contentinfo">
                <nav class="navbar navbar-default" role="navigation"><ul class="nav navbar-nav nav-justified"><li><a href="http://blog.jverkamp.com/2012/10/16/a-sea-of-stars-ch-15-artifact">← A Sea of Stars - Ch. 15 - Artifact</a></li><li><a href="http://blog.jverkamp.com/category/archives">Archives</a></li><li><a href="http://blog.jverkamp.com/2012/10/18/the-evolution-of-flibs">The Evolution Of Flibs →</a></li></ul><ul class="nav navbar-nav nav-justified"><li><a href="http://blog.jverkamp.com/2012/10/15/chopping-words">← Chopping words</a></li><li><a href="http://blog.jverkamp.com/category/programming">Programming</a></li><li><a href="http://blog.jverkamp.com/2012/10/18/the-evolution-of-flibs">The Evolution Of Flibs →</a></li></ul></nav>

                <div class="legal">
                        <a href="http://blog.jverkamp.com/feed/atom.xml">feed <img style="border: 0;" src="http://blog.jverkamp.com/rss.png" /></a><br />
                        All posts unless otherwise mentioned are licensed under <a rel="license" href="http://creativecommons.org/licenses/by-nc-sa/3.0/deed.en_US"><img alt="Creative Commons License" style="border-width:0" src="http://i.creativecommons.org/l/by-nc-sa/3.0/80x15.png" /></a><br />
                        Any source code unless otherwise mentioned is licensed under the <a href="http://directory.fsf.org/wiki/License:BSD_3Clause">3 clause BSD license</a>
                </div>
        </footer>

<script>
(function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
(i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
})(window,document,'script','//www.google-analytics.com/analytics.js','ga');

ga('create', 'UA-53688146-1', 'auto');
ga('send', 'pageview');
</script>
</body>
</html>