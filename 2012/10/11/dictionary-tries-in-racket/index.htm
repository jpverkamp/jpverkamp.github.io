<!DOCTYPE html>
<html>
<head>
        
        

        <title>Dictionary tries in Racket | jverkamp.com | John-Paul Verkamp</title>

        <script src="//ajax.googleapis.com/ajax/libs/jquery/1.11.0/jquery.min.js"></script>

        <script src="//code.jquery.com/ui/1.11.1/jquery-ui.min.js"></script>

        <link rel="stylesheet" href="//netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css" />
        <link rel="stylesheet" href="//netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap-theme.min.css" />
        <script src="//netdna.bootstrapcdn.com/bootstrap/3.1.1/js/bootstrap.min.js"></script>

        <link rel="stylesheet" href="//cdnjs.cloudflare.com/ajax/libs/ekko-lightbox/3.0.3a/ekko-lightbox.min.css" />
        <script src="//cdnjs.cloudflare.com/ajax/libs/ekko-lightbox/3.0.3a/ekko-lightbox.min.js"></script>

        <script src="//cdnjs.cloudflare.com/ajax/libs/jquery.transit/0.9.9/jquery.transit.min.js"></script>

        <!-- Highlight.js for syntax highlighting -->
        <link rel="stylesheet" href="/highlight/styles/obsidian.css" />
        <script src="/highlight/highlight.pack.js"></script>

        <!-- MathJax for LaTeX support -->
        <script src="//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML"></script>

        <!-- nanoGallery for Flickr Galleries -->
        <link rel="stylesheet" href="//cdnjs.cloudflare.com/ajax/libs/nanogallery/4.4.2/css/themes/light/nanogallery_light.css" />
        <script type="text/javascript" src="//cdnjs.cloudflare.com/ajax/libs/nanogallery/4.4.2/jquery.nanogallery.min.js"></script>

        <!-- Pretty pretty fonts -->
        <link rel="stylesheet" type="text/css" href="//fonts.googleapis.com/css?family=Calligraffitti" />

        <!-- Emoji! (https://hassankhan.github.io/emojify.js/) -->
        <link rel="stylesheet" type="text/css" href="/emojify.js/emojify-emoticons.min.css" />
        <link rel="stylesheet" type="text/css" href="/emojify.js/emojify.min.css" />
        <script type="text/javascript" src="/emojify.js/emojify.min.js"></script>

        <!-- Any custom CSS or JS that I've written; this should be kept minimal -->
        <link rel="stylesheet" href="/custom.css" />
        <script src="/custom.js"></script>

        <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
        <link rel="alternate" type="application/atom+xml" title="jverkamp.com (Atom 2.0)" href="http://blog.jverkamp.com/feed/" />
</head>
<body>
        <header class="container">
        <nav class="navbar navbar-default" role="navigation">
  <div class="container-fluid">
    <!-- Brand and toggle get grouped for better mobile display -->
    <div class="navbar-header">
      <button type="button" class="navbar-toggle" data-toggle="collapse" data-target="#bs-example-navbar-collapse-1">
        <span class="sr-only">Toggle navigation</span>
        <span class="icon-bar"></span>
        <span class="icon-bar"></span>
        <span class="icon-bar"></span>
      </button>
      <a class="navbar-brand" href="http://blog.jverkamp.com"><span style="color: green;">jv</span>erkamp.com</a>
    </div>

    <!-- Collect the nav links, forms, and other content for toggling -->
    <div class="collapse navbar-collapse" id="bs-example-navbar-collapse-1">
      <ul class="nav navbar-nav"><li class="dropdown"><a href="http://blog.jverkamp.com/category/archives" class="dropdown-toggle">Archives<span class="caret"></span></a><ul class="dropdown-menu"><li><a href="http://blog.jverkamp.com/category/archives/2004">2004</a></li><li><a href="http://blog.jverkamp.com/category/archives/2005">2005</a></li><li><a href="http://blog.jverkamp.com/category/archives/2006">2006</a></li><li><a href="http://blog.jverkamp.com/category/archives/2007">2007</a></li><li><a href="http://blog.jverkamp.com/category/archives/2008">2008</a></li><li><a href="http://blog.jverkamp.com/category/archives/2009">2009</a></li><li><a href="http://blog.jverkamp.com/category/archives/2010">2010</a></li><li><a href="http://blog.jverkamp.com/category/archives/2011">2011</a></li><li><a href="http://blog.jverkamp.com/category/archives/2012">2012</a></li><li><a href="http://blog.jverkamp.com/category/archives/2013">2013</a></li><li><a href="http://blog.jverkamp.com/category/archives/2014">2014</a></li><li><a href="http://blog.jverkamp.com/category/archives/2015">2015</a></li></ul></li><li class="dropdown"><a href="http://blog.jverkamp.com/category/other" class="dropdown-toggle">Other<span class="caret"></span></a><ul class="dropdown-menu"><li><a href="http://blog.jverkamp.com/category/other/board-game-reviews">Board Game Reviews</a></li><li><a href="http://blog.jverkamp.com/category/other/book-reviews">Book Reviews</a></li><li><a href="http://blog.jverkamp.com/category/other/cooking">Cooking</a></li><li><a href="http://blog.jverkamp.com/category/other/movie-reviews">Movie Reviews</a></li></ul></li><li class="dropdown"><a href="http://blog.jverkamp.com/category/photography" class="dropdown-toggle">Photography<span class="caret"></span></a><ul class="dropdown-menu"><li><a href="http://blog.jverkamp.com/category/photography/dp-challenge">DP Challenge</a></li><li><a href="http://blog.jverkamp.com/category/photography/photosets">Photosets</a></li><li><a href="http://blog.jverkamp.com/category/photography/photosynth">Photosynth</a></li></ul></li><li class="dropdown"><a href="http://blog.jverkamp.com/category/programming" class="dropdown-toggle">Programming<span class="caret"></span></a><ul class="dropdown-menu"><li><a href="http://blog.jverkamp.com/category/programming/by-language">By Language</a></li><li><a href="http://blog.jverkamp.com/category/programming/by-project">By Project</a></li><li><a href="http://blog.jverkamp.com/category/programming/by-source">By Source</a></li><li><a href="http://blog.jverkamp.com/category/programming/by-topic">By Topic</a></li><li><a href="http://blog.jverkamp.com/category/programming/libraries">Libraries</a></li></ul></li><li class="dropdown"><a href="http://blog.jverkamp.com/category/research" class="dropdown-toggle">Research<span class="caret"></span></a><ul class="dropdown-menu"><li><a href="http://blog.jverkamp.com/category/research/by-topic">By Topic</a></li><li><a href="http://blog.jverkamp.com/category/research/publications">Publications</a></li></ul></li><li class="dropdown"><a href="http://blog.jverkamp.com/category/writing" class="dropdown-toggle">Writing<span class="caret"></span></a><ul class="dropdown-menu"><li><a href="http://blog.jverkamp.com/category/writing/by-genre">By Genre</a></li><li><a href="http://blog.jverkamp.com/category/writing/ideas">Ideas</a></li><li><a href="http://blog.jverkamp.com/category/writing/nanowrimo">NaNoWriMo</a></li><li><a href="http://blog.jverkamp.com/category/writing/novels">Novels</a></li><li><a href="http://blog.jverkamp.com/category/writing/other">Other</a></li><li><a href="http://blog.jverkamp.com/category/writing/short-stories">Short Stories</a></li><li><a href="http://blog.jverkamp.com/category/writing/writing-excuses">Writing Excuses</a></li></ul></li></ul>

      <form action="http://www.google.com/search" method="get" onSubmit="(function(obj){obj.q.value='site:blog.jverkamp.com '+obj.qfront.value;})(this)" class="navbar-form navbar-right" role="search">
        <div class="form-group">
          <input name="q" type="hidden" />
          <input name="qfront" type="text" class="form-control" placeholder="Search" />
          <button type="submit" class="btn btn-default" value="Search">Search</button>
        </p>
      </form>
    </div><!-- /.navbar-collapse -->
  </div><!-- /.container-fluid -->
</nav>
        </header>

        <article class="container">
                <header>
                        <h1 class="entry-title">Dictionary tries in Racket</h1>

                        <div class="entry-meta">
                                <span class="posted-on"><time class="entry-date" datetime="2012-10-11"><span class="year">2012</span> <span class="month">Oct</span> <span class="day">11</span></time></span>
                                <span class="tags"><ul class="tag-list list-inline"><li><a href="http://blog.jverkamp.com/category/programming/by-topic/data-structures">Data Structures</a></li><li><a href="http://blog.jverkamp.com/category/programming/libraries">Libraries</a></li><li><a href="http://blog.jverkamp.com/category/programming">Programming</a></li><li><a href="http://blog.jverkamp.com/category/programming/by-language/racket">Racket</a></li><li><a href="http://blog.jverkamp.com/category/programming/by-language/scheme">Scheme</a></li><li><a href="http://blog.jverkamp.com/category/programming/by-topic/word-games">Word Games</a></li></ul></span>
                        </div>

                        <hr />
                </header>
                <div class="entry-content">
                        <p>For the next few posts, we're going to need a way to represent a dictionary. You could go with just a flat list containing all of the words in the dictionary, but the runtime doesn't seem optimal. Instead, we want a data structure that lets you easily get all possible words that start with a given prefix. We want a <a href="https://en.wikipedia.org/wiki/trie">trie</a>.</p>
<p><a href="http://blog.jverkamp.com/2012/10/11/dictionary-tries-in-racket/trie_example.png" data-toggle="lightbox"><img src="http://blog.jverkamp.com/2012/10/11/dictionary-tries-in-racket/trie_example.png" /></a>. Source: <a href="http://en.wikipedia.org/w/index.php?title=File:Trie_example.svg&page=1" title="Wikipedia: Trie example">Wikipedia</a>, public domain</p>
<!--more-->
<p>Essentially a trie is a misspelled tree. <img alt="smile" class="emoji" src="/emoji/smile.svg" /> More seriously, a trie is basically a tree where any node can have any number of children. In this case, the root of our trie will represent the start of every word in the dictionary. Then at each level, each branch will be either a single character or the symbol <code>word</code>. If it's a character, the branch represents continuing down the word. If 'word is set, that means that this is a valid ending of a word.</p>
<p>For example, here is such a dictionary containing just the words <code>CAT</code>, <code>COT</code>, <code>COG</code> and their plurals:</p>
<p><a href="http://blog.jverkamp.com/2012/10/11/dictionary-tries-in-racket/example-dict.png" data-toggle="lightbox"><img src="http://blog.jverkamp.com/2012/10/11/dictionary-tries-in-racket/example-dict.png" /></a></p>
<p>So how do we build such a structure?</p>
<p>First, we'll start with a structure that basically just wraps the nested hashtables in case I print one without meaning to (they're kind of large).</p>
<pre class="scheme"><code>; make the structure opaque in case I try to print them
(define-struct :dictionary: (value))

; make a dictionary
(define (make-dictionary)
  (make-:dictionary: (make-hasheq)))</code></pre>
<p>After that, we need a function that can add a word to an already existing dictionary:</p>
<pre class="scheme"><code>; add a word to a dictionary (internally a trie)
; keys are either characters =&gt; nested trie or 'word =&gt; #t/#f
(define (add-word! dict word)
  (let loop ([cs (string-&gt;list (string-upcase word))]
             [node (:dictionary:-value dict)])
    (cond
      [(null? cs)
       (hash-set! node 'word #t)]
      [else
       (when (not (hash-ref node (car cs) #f))
         (hash-set! node (car cs) (make-hasheq)))
       (loop (cdr cs) (hash-ref node (car cs)))])))</code></pre>
<p>Basically, we use the <code>loop</code> to recur down the nested structure, adding new branches to the tree as needed with the <code>(when ...)</code> part. When we get to the end, we set that hash's <code>word</code>-ness to <code>#t</code>.</p>
<p>Easy enough. So what if we wanted to reverse that and check if a word is in the dictionary? (Not strictly necessary for the given problem, but useful for testing.)</p>
<pre class="scheme"><code>; helper to do a partial lookup in a dictionary
; returns a node in the trie if given a valid prefix/word
; returns #f otherwise
(define (get-node dict word)
  (let loop ([cs (string-&gt;list (string-upcase word))]
             [node (:dictionary:-value dict)])
    (or (and (null? cs)
             node)
        (and (not (null? cs))
             node
             (loop (cdr cs)
                   (hash-ref node (car cs) #f))))))

; check if a word is in the dictionary
(define (contains? dict word)
  (let ([node (get-node dict word)])
    (and node (hash-ref node 'word #f))))</code></pre>
<p><code>get-node</code> abstracts out the first part of that by handling the main part of the recursion for us. It will go down a tree until it gets the node that we want or <code>#f</code> if the specified <code>prefix</code>/<code>word</code> doesn't exist. All <code>contains?</code> has to do then is to make sure that we did actually get a hash and that it represents the end of a word.</p>
<p>After that, the next step is to write a function that will load a dictionary file into this trie structure. Basically, I can use <a href="http://blog.jverkamp.com/2012/10/10/two-word-games">yesterday's code</a> with only minor modifications:</p>
<pre class="scheme"><code>; load a dictionary from a file
; one word per line, case doesn't matter
; ignores any words that have non-alphabetic characters
(define (load-dictionary filename)
  (let ([dict (make-dictionary)])
    (with-input-from-file filename
      (? ()
        (let loop ([line (read-line)])
          (unless (eof-object? line)
            (let ([word (string-trim line)])
              (add-word! dict word))
            (loop (read-line))))))
    dict))</code></pre>
<p>The <code>string-trim</code> call is necessary to remove the trailing linefeed that <code>read-line</code> returns.</p>
<p>Finally, a few more helper functions. First, a lookup function to make going one level down a tree easier.</p>
<pre class="scheme"><code>; given a dictionary (or it's node (or #f)) and a letter
; return the nested value or #f it there isn't one
(define (lookup dict letter)
  (let ([node (if (:dictionary:? dict) (:dictionary:-value dict) dict)])
    (and node
         (hash-ref node letter #f))))</code></pre>
<p>And then we want a function that will return all words that start with a given prefix. This is a little more complicated, but hopefully not unreasonably so:</p>
<pre class="scheme"><code>; get a list of all words in the dictionary with a given prefix
(define (words-by-prefix dict prefix)
  (let ([prefix (string-upcase prefix)])
    ; once we have the suffixes, add our prefix
    (map
     (? (ls) (string-append prefix (list-&gt;string ls)))
     ; loop from the node to all leaves
     (let loop ([node (get-node dict prefix)])
       (if node
           (let ([r (apply
                     append
                     ; add the current letter to each recursions
                     (for/list ([(k v) node]
                                #:when (and (not (eq? k 'word)) v))
                       (map (? (ls) (cons k ls))
                            (loop v))))])
             ; include the prefix if it's a word
             (if (hash-ref node 'word #f)
                 (cons '() r)
                 r))
           '())))))</code></pre>
<p>The core of that deserves some special attention:</p>
<pre class="scheme"><code>; add the current letter to each recursions
(for/list ([(k v) node]
           #:when (and (not (eq? k 'word)) v))
  (map (? (ls) (cons k ls))
       (loop v)))</code></pre>
<p>Basically, I love Racket's <code>for</code> family of macros. This one says for each key/value pair k/v in the current level (ignoring word endings at this point), recur into that branch. Then we <code>append</code> each of those sublists together. Finally, if the node we're currently at ends a word add that to the recursion. And that's it. Pretty simple, yes? Let's try it.</p>
<pre class="scheme"><code>&gt; (words-by-prefix dict "DRAGON")
'("DRAGON" "DRAGONET" "DRAGONFLY" "DRAGONFLIES" "DRAGONHEAD" "DRAGONS")</code></pre>
<p>If you would like the source code for this module, you can download it here: <a href='https://github.com/jpverkamp/small-projects/blob/master/racket-libraries/dictionary.rkt'>dictionary source code</a></p>
                </div>
                <div class="entry-footnotes">
                        <div id="footnotes"><ol></ol></div>
                </div>

                <div id="disqus_thread"></div>
<script type="text/javascript">
var disqus_shortname = "jverkamp";
var disqus_title = "Dictionary tries in Racket";
var disqus_url = "http://blog.jverkamp.com/2012/10/11/dictionary-tries-in-racket/";
/* * * DON'T EDIT BELOW THIS LINE * * */
(function() {
  var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
  dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js';
  (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
})();
</script>
<noscript>Please enable JavaScript to view the <a href="http://disqus.com/?ref_noscript">comments powered by Disqus.</a></noscript>
<a href="http://disqus.com" class="dsq-brlink">comments powered by <span class="logo-disqus">Disqus</span></a>
        </article>

        <footer class="container" role="contentinfo">
                <nav class="navbar navbar-default" role="navigation"><ul class="nav navbar-nav nav-justified"><li><a href="http://blog.jverkamp.com/2012/10/10/two-word-games">← Two Word Games</a></li><li><a href="http://blog.jverkamp.com/category/archives">Archives</a></li><li><a href="http://blog.jverkamp.com/2012/10/11/squaring-the-bishop">Squaring the Bishop →</a></li></ul><ul class="nav navbar-nav nav-justified"><li><a href="http://blog.jverkamp.com/2012/10/10/two-word-games">← Two Word Games</a></li><li><a href="http://blog.jverkamp.com/category/programming">Programming</a></li><li><a href="http://blog.jverkamp.com/2012/10/11/squaring-the-bishop">Squaring the Bishop →</a></li></ul></nav>

                <div class="legal">
                        <a href="http://blog.jverkamp.com/feed/atom.xml">feed <img style="border: 0;" src="http://blog.jverkamp.com/rss.png" /></a><br />
                        All posts unless otherwise mentioned are licensed under <a rel="license" href="http://creativecommons.org/licenses/by-nc-sa/3.0/deed.en_US"><img alt="Creative Commons License" style="border-width:0" src="http://i.creativecommons.org/l/by-nc-sa/3.0/80x15.png" /></a><br />
                        Any source code unless otherwise mentioned is licensed under the <a href="http://directory.fsf.org/wiki/License:BSD_3Clause">3 clause BSD license</a>
                </div>
        </footer>

<script>
(function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
(i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
})(window,document,'script','//www.google-analytics.com/analytics.js','ga');

ga('create', 'UA-53688146-1', 'auto');
ga('send', 'pageview');
</script>
</body>
</html>