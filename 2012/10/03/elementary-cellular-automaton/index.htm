<!DOCTYPE html>
<html>
<head>
        
        

        <title>Elementary cellular automaton | jverkamp.com | John-Paul Verkamp</title>

        <script src="//ajax.googleapis.com/ajax/libs/jquery/1.11.0/jquery.min.js"></script>

        <script src="//code.jquery.com/ui/1.11.1/jquery-ui.min.js"></script>

        <link rel="stylesheet" href="//netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css" />
        <link rel="stylesheet" href="//netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap-theme.min.css" />
        <script src="//netdna.bootstrapcdn.com/bootstrap/3.1.1/js/bootstrap.min.js"></script>

        <link rel="stylesheet" href="//cdnjs.cloudflare.com/ajax/libs/ekko-lightbox/3.0.3a/ekko-lightbox.min.css" />
        <script src="//cdnjs.cloudflare.com/ajax/libs/ekko-lightbox/3.0.3a/ekko-lightbox.min.js"></script>

        <script src="//cdnjs.cloudflare.com/ajax/libs/jquery.transit/0.9.9/jquery.transit.min.js"></script>

        <!-- Highlight.js for syntax highlighting -->
        <link rel="stylesheet" href="/highlight/styles/obsidian.css" />
        <script src="/highlight/highlight.pack.js"></script>

        <!-- MathJax for LaTeX support -->
        <script src="//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML"></script>

        <!-- nanoGallery for Flickr Galleries -->
        <link rel="stylesheet" href="//cdnjs.cloudflare.com/ajax/libs/nanogallery/4.4.2/css/themes/light/nanogallery_light.css" />
        <script type="text/javascript" src="//cdnjs.cloudflare.com/ajax/libs/nanogallery/4.4.2/jquery.nanogallery.min.js"></script>

        <!-- Pretty pretty fonts -->
        <link rel="stylesheet" type="text/css" href="//fonts.googleapis.com/css?family=Calligraffitti" />

        <!-- Emoji! (https://hassankhan.github.io/emojify.js/) -->
        <link rel="stylesheet" type="text/css" href="/emojify.js/emojify-emoticons.min.css" />
        <link rel="stylesheet" type="text/css" href="/emojify.js/emojify.min.css" />
        <script type="text/javascript" src="/emojify.js/emojify.min.js"></script>

        <!-- Any custom CSS or JS that I've written; this should be kept minimal -->
        <link rel="stylesheet" href="/custom.css" />
        <script src="/custom.js"></script>

        <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
        <link rel="alternate" type="application/atom+xml" title="jverkamp.com (Atom 2.0)" href="http://blog.jverkamp.com/feed/" />
</head>
<body>
        <header class="container">
        <nav class="navbar navbar-default" role="navigation">
  <div class="container-fluid">
    <!-- Brand and toggle get grouped for better mobile display -->
    <div class="navbar-header">
      <button type="button" class="navbar-toggle" data-toggle="collapse" data-target="#bs-example-navbar-collapse-1">
        <span class="sr-only">Toggle navigation</span>
        <span class="icon-bar"></span>
        <span class="icon-bar"></span>
        <span class="icon-bar"></span>
      </button>
      <a class="navbar-brand" href="http://blog.jverkamp.com"><span style="color: green;">jv</span>erkamp.com</a>
    </div>

    <!-- Collect the nav links, forms, and other content for toggling -->
    <div class="collapse navbar-collapse" id="bs-example-navbar-collapse-1">
      <ul class="nav navbar-nav"><li class="dropdown"><a href="http://blog.jverkamp.com/category/archives" class="dropdown-toggle">Archives<span class="caret"></span></a><ul class="dropdown-menu"><li><a href="http://blog.jverkamp.com/category/archives/2004">2004</a></li><li><a href="http://blog.jverkamp.com/category/archives/2005">2005</a></li><li><a href="http://blog.jverkamp.com/category/archives/2006">2006</a></li><li><a href="http://blog.jverkamp.com/category/archives/2007">2007</a></li><li><a href="http://blog.jverkamp.com/category/archives/2008">2008</a></li><li><a href="http://blog.jverkamp.com/category/archives/2009">2009</a></li><li><a href="http://blog.jverkamp.com/category/archives/2010">2010</a></li><li><a href="http://blog.jverkamp.com/category/archives/2011">2011</a></li><li><a href="http://blog.jverkamp.com/category/archives/2012">2012</a></li><li><a href="http://blog.jverkamp.com/category/archives/2013">2013</a></li><li><a href="http://blog.jverkamp.com/category/archives/2014">2014</a></li><li><a href="http://blog.jverkamp.com/category/archives/2015">2015</a></li></ul></li><li class="dropdown"><a href="http://blog.jverkamp.com/category/other" class="dropdown-toggle">Other<span class="caret"></span></a><ul class="dropdown-menu"><li><a href="http://blog.jverkamp.com/category/other/board-game-reviews">Board Game Reviews</a></li><li><a href="http://blog.jverkamp.com/category/other/book-reviews">Book Reviews</a></li><li><a href="http://blog.jverkamp.com/category/other/cooking">Cooking</a></li><li><a href="http://blog.jverkamp.com/category/other/movie-reviews">Movie Reviews</a></li></ul></li><li class="dropdown"><a href="http://blog.jverkamp.com/category/photography" class="dropdown-toggle">Photography<span class="caret"></span></a><ul class="dropdown-menu"><li><a href="http://blog.jverkamp.com/category/photography/dp-challenge">DP Challenge</a></li><li><a href="http://blog.jverkamp.com/category/photography/photosets">Photosets</a></li><li><a href="http://blog.jverkamp.com/category/photography/photosynth">Photosynth</a></li></ul></li><li class="dropdown"><a href="http://blog.jverkamp.com/category/programming" class="dropdown-toggle">Programming<span class="caret"></span></a><ul class="dropdown-menu"><li><a href="http://blog.jverkamp.com/category/programming/by-language">By Language</a></li><li><a href="http://blog.jverkamp.com/category/programming/by-project">By Project</a></li><li><a href="http://blog.jverkamp.com/category/programming/by-source">By Source</a></li><li><a href="http://blog.jverkamp.com/category/programming/by-topic">By Topic</a></li><li><a href="http://blog.jverkamp.com/category/programming/libraries">Libraries</a></li></ul></li><li class="dropdown"><a href="http://blog.jverkamp.com/category/research" class="dropdown-toggle">Research<span class="caret"></span></a><ul class="dropdown-menu"><li><a href="http://blog.jverkamp.com/category/research/by-topic">By Topic</a></li><li><a href="http://blog.jverkamp.com/category/research/publications">Publications</a></li></ul></li><li class="dropdown"><a href="http://blog.jverkamp.com/category/writing" class="dropdown-toggle">Writing<span class="caret"></span></a><ul class="dropdown-menu"><li><a href="http://blog.jverkamp.com/category/writing/by-genre">By Genre</a></li><li><a href="http://blog.jverkamp.com/category/writing/ideas">Ideas</a></li><li><a href="http://blog.jverkamp.com/category/writing/nanowrimo">NaNoWriMo</a></li><li><a href="http://blog.jverkamp.com/category/writing/novels">Novels</a></li><li><a href="http://blog.jverkamp.com/category/writing/other">Other</a></li><li><a href="http://blog.jverkamp.com/category/writing/short-stories">Short Stories</a></li><li><a href="http://blog.jverkamp.com/category/writing/writing-excuses">Writing Excuses</a></li></ul></li></ul>

      <form action="http://www.google.com/search" method="get" onSubmit="(function(obj){obj.q.value='site:blog.jverkamp.com '+obj.qfront.value;})(this)" class="navbar-form navbar-right" role="search">
        <div class="form-group">
          <input name="q" type="hidden" />
          <input name="qfront" type="text" class="form-control" placeholder="Search" />
          <button type="submit" class="btn btn-default" value="Search">Search</button>
        </p>
      </form>
    </div><!-- /.navbar-collapse -->
  </div><!-- /.container-fluid -->
</nav>
        </header>

        <article class="container">
                <header>
                        <h1 class="entry-title">Elementary cellular automaton</h1>

                        <div class="entry-meta">
                                <span class="posted-on"><time class="entry-date" datetime="2012-10-03"><span class="year">2012</span> <span class="month">Oct</span> <span class="day">3</span></time></span>
                                <span class="tags"><ul class="tag-list list-inline"><li><a href="http://blog.jverkamp.com/category/programming/by-topic/cellular-automata">Cellular Automata</a></li><li><a href="http://blog.jverkamp.com/category/programming/by-language/html">HTML</a></li><li><a href="http://blog.jverkamp.com/category/programming/by-language/javascript">JavaScript</a></li><li><a href="http://blog.jverkamp.com/category/programming/by-topic/mathematics">Mathematics</a></li><li><a href="http://blog.jverkamp.com/category/programming">Programming</a></li><li><a href="http://blog.jverkamp.com/category/programming/by-topic/web-development">Web Development</a></li></ul></span>
                        </div>

                        <hr />
                </header>
                <div class="entry-content">
                        <p>Today we're going to be playing with an HTML5 canvas again (previously we made <a href="http://blog.jverkamp.com/2012/09/26/line-art-with-html5-canvas">line art</a> and <a href="http://blog.jverkamp.com/2012/09/27/html5-bugs">bugs</a>). This time, the goal is to make a tool where you can explore <a href="http://mathworld.wolfram.com/ElementaryCellularAutomaton.html" title="Wolfram Mathworld: Elementary Cellular Automaton">elementary cellular automaton</a>.</p>
<!--more-->
<p>(If you just want to jump to the toy, <a href="#thecanvas">click here</a>. There's also a much larger version available <a href="http://apps.jverkamp.com/small-projects/cellular/" title="jverkamp apps: Cellular">here</a>.)</p>
<p>Essentially, you can think of an elementary cellular automaton as a function on a series of rooms. Each room has a light and the ability to see their neighbor's lights as well as their own. Now if you take that those three inputs, there are 8 cases to consider:</p>
<table class="table table-striped">
<thead>
<tr><td>left</td><td>me</td><td>right</td></tr>
</thead>
<tbody>
<tr><td>off</td><td>off</td><td>off</td></tr>
<tr><td>off</td><td>off</td><td>on</td></tr>
<tr><td>off</td><td>on</td><td>off</td></tr>
<tr><td>off</td><td>on</td><td>on</td></tr>
<tr><td>on</td><td>off</td><td>off</td></tr>
<tr><td>on</td><td>off</td><td>on</td></tr>
<tr><td>on</td><td>on</td><td>off</td></tr>
<tr><td>on</td><td>on</td><td>on</td></tr>
</tbody>
</table>
<p>For each of those eight inputs, there are two possible outputs. I can either turn my light on or turn it off. This in turn will be seen by my neighbors who might the adjust their own lights and so on.</p>
<p>What gets more interesting is when you show a picture of the changing lights over time. Imagine a series of rows where each row is the state of all of the lights at one moment in time. So if the rule is that whenever either neighbor's light is on to turn your own on, you'll see a spreading wave of lights turning on as you move down the picture (rule 222).</p>
<p>So how does this all work in practice? It turns out, it's actually pretty simple.</p>
<p>First, we'll initialize two arrays. I've included a number of initial conditions including all off, all on, half and half, random, and a single point.</p>
<pre class="javascript"><code>var oldRow = new Array(width);
var newRow = new Array(width);

for (var i = 0; i &lt; width; i++) {
  if (initial == "random")
    oldRow[i] = (Math.random() &gt; 0.5 ? 1 : 0);
  else if (initial == "5050")
    oldRow[i] = (i &lt; width / 2 ? 0 : 1);
  else if (initial == "point")
    oldRow[i] = (i == Math.floor(width / 2) ? 1 : 0);
  else if (initial == "black")
    oldRow[i] = 1;
  else if (initial == "white")
    oldRow[i] = 0;
  else
    oldRow[i] = 0;

  newRow[i] = 0;
}</code></pre>
<p>Why two arrays? So that we can update one without the updates themselves having an effect on the row we're working on. You could actually do that just as well, but it wouldn't be the simulation we're trying to do.</p>
<p>In any case, the next step we need is run the actual simulation. Basically, work from top to bottom making each row based off of the previous one.</p>
<pre class="javascript"><code>var index = 0;
for (var row = 0; row &lt; height; row++) {
  for (var col = 0; col &lt; width; col++) {
    if (oldRow[col] == 1)
      c.fillRect(col, row, 1, 1);

    index = oldRow[col == 0 ? 0 : col - 1] * 4 + oldRow[col] * 2 + oldRow[col == width - 1 ? width - 1 : col + 1];
    newRow[col] = setTo[index];
  }

  for (var col = 0; col &lt; width; col++) {
    oldRow[col] = newRow[col];
  }
}</code></pre>
<p>One interesting bit there is the calculation and use of the variable <code>index</code>. Basically, <code>index</code> treats the values to the left, right, and at the given point as a binary number 0-8. These values are each decoded in another part of the code:</p>
<pre class="javascript"><code>var setTo = [0, 0, 0, 0, 0, 0, 0, 0];
for (var i = 0; i &lt; 8; i++)
  setTo[i] = (rule &gt;&gt; i) & 1;</code></pre>
<p>That may look like black magic, but all it's doing is turning a number in the range [0, 255] into a set of rules for the automaton. Here's how that works:</p>
<p>First, convert the number into binary: Rule 30 = 00011110</p>
<p>Then, go through the 8 possibilies for off/on patterns we discussed earlier. Assign each bit to each pattern in order, treating 0 as off and 1 as on:</p>
<table class="table table-striped">
<thead>
<tr><td>left</td><td>me</td><td>right</td><td>bit</td></tr>
</thead>
<tbody>
<tr><td>off</td><td>off</td><td>off</td><td>0 = off</td></tr>
<tr><td>off</td><td>off</td><td>on</td><td>0 = 0ff</td></tr>
<tr><td>off</td><td>on</td><td>off</td><td>0 = off</td></tr>
<tr><td>off</td><td>on</td><td>on</td><td>1 = on</td></tr>
<tr><td>on</td><td>off</td><td>off</td><td>1 = on</td></tr>
<tr><td>on</td><td>off</td><td>on</td><td>1 = on</td></tr>
<tr><td>on</td><td>on</td><td>off</td><td>1 = on</td></tr>
<tr><td>on</td><td>on</td><td>on</td><td>0 = off</td></tr>
</tbody>
</table>
<p>Then, we can interpret the table by finding the row that corresponds to what we currently see and adjusting our lights accordingly. So if our light is on and so is our left neighbor but the right is out, that means we are in the second last row and should keep our light on. If our right neighbor turns their light on though, that puts us in the last row so we should turn our light off. That then means we're in the 6th row, so we should turn it back on (and thus we alternate between the 6th and 8th rows until one of our neighbors turns their light off). Isn't it neat how you get oscillating behavior like that from such a simple set of rules?</p>
<p>In any case, that's about enough from me for the time being. Why don't you try out the demo below? You can choose any of the 256 possible rules with 5 initial conditions I mentioned above or you can try out the interesting cases mentioned in the <a href="http://mathworld.wolfram.com/ElementaryCellularAutomaton.html" title="Wolfram Mathworld: Elementary Cellular Automaton">Wolfram Mathworld</a> article mine is based on.</p>
<p>If you have any questions / comments / suggestions, feel free to drop me a line below.</p>
<p>If you would like to try this in a larger, resizable version, you can do so <a href="http://apps.jverkamp.com/small-projects/cellular/" title="jverkamp apps: Cellular">here</a>.</p>
<p>Have fun!</p>
<p><a name="thecanvas"></p>
<canvas style="border: 1px solid black;" id="canvas" width="400" height="200"></canvas>
<p></a></p>
<table class="table table-striped">
  <tr><td>Rule</td><td><input class="update" id="inputRule" type="text" value="30" /></td><td class="warning" id="inputRuleWarning"></td></tr>
  <tr><td>Scale</td><td><input class="update" id="inputScale" type="text" value="1" /></td><td class="warning" id="inputScaleWarning"></td></tr>
  <tr><td>Initial condition</td>
    <td>
      <select class="update" id="inputInitial">
        <option value="point">Point</option>
        <option value="random">Random</option>
        <option value="5050">50/50 Split</option>
        <option value="black">Black</option>
        <option value="white">White</option>
      </select>
    </td><td></td>
  </tr>
  <tr><td>Interesting rules</td>
  <td>
<select id="inputInteresting">
  <option value=""></option>
  <option value="30">30</option>
  <option value="54">54</option>
  <option value="60">60</option>
  <option value="62">62</option>
  <option value="90">90</option>
  <option value="94">94</option>
  <option value="102">102</option>
  <option value="110">110</option>
  <option value="122">122</option>
  <option value="126">126</option>
  <option value="150">150</option>
  <option value="158">158</option>
  <option value="182">182</option>
  <option value="188">188</option>
  <option value="190">190</option>
  <option value="220">220</option>
  <option value="222">222</option>
  <option value="250">250</option>
</select>
</td><td></td></tr>
</table>
<p><button id="drawButton">Draw</button> <button id="saveButton">Save</button></p>
<p style="color: red;" id="warning"></p>
<p>If you'd like, you can download the source here: <a href="https://github.com/jpverkamp/small-projects/blob/master/blog/cellular-automaton.js" title="Cellular automaton source">cellular automaton source code</a></p>
<script>
jQuery(function($) {
  function div(a, b) {
    return Math.floor(a / b);
  }

  function drawRule(rule, initial, scale) {
    var c = $("#canvas")[0].getContext('2d');
    c.lineWidth = 1;
    c.fillStyle = "black";

    var width = $("#canvas").width();
    var height = $("#canvas").height();

    var scaleWidth = div(width, scale);
    var scaleHeight = div(height, scale);

    c.clearRect(0, 0, width, height);

    var setTo = [0, 0, 0, 0, 0, 0, 0, 0];
    for (var i = 0; i < 8; i++)
      setTo[i] = (rule >> i) & 1;

    var oldRow = new Array(scaleWidth);
    var newRow = new Array(scaleWidth);

    for (var i = 0; i < scaleWidth; i++) {
      if (initial == "random")
        oldRow[i] = (Math.random() > 0.5 ? 1 : 0);
      else if (initial == "5050")
        oldRow[i] = (i < scaleWidth / 2 ? 0 : 1);
      else if (initial == "point")
        oldRow[i] = (i == div(scaleWidth, 2) ? 1 : 0);
      else if (initial == "black")
        oldRow[i] = 1;
      else if (initial == "white")
        oldRow[i] = 0;
      else
        oldRow[i] = 0;

      newRow[i] = 0;
    }

    var index = 0;
    for (var row = 0; row < scaleHeight; row++) {
      for (var col = 0; col < scaleWidth; col++) {
        if (oldRow[col] == 1)
          c.fillRect(col * scale, row * scale, scale, scale);

        index = oldRow[col == 0 ? 0 : col - 1] * 4 + oldRow[col] * 2 + oldRow[col == scaleWidth - 1 ? scaleWidth - 1 : col + 1];
        newRow[col] = setTo[index];
      }

      for (var col = 0; col < scaleWidth; col++) {
        oldRow[col] = newRow[col];
      }
    }
  }

  $(".warning").css("color", "red");

  function doUpdate() {
    $(".warning").empty();

    var rule = parseInt($("#inputRule").val());
    if (isNaN(rule) || rule < 0 || rule > 255) {
      $("#inputRuleWarning").html('Rule must be an integer in the range [0, 255]');
      return;
    }

    var scale = parseInt($("#inputScale").val());
    if (isNaN(scale) || scale < 1 || scale > 10) {
      $("#inputScaleWarning").html('Rule must be an integer in the range [1, 10]');
      return;
    }

    var initial = $("#inputInitial").val();
    drawRule(rule, initial, scale);
  };

  $(".update").change(doUpdate);
  $("#drawButton").click(doUpdate);

  $("#inputInteresting").change(function() {
    if ($("#inputInteresting").val() != "") {
      $("#inputRule").val($("#inputInteresting").val());
      $("#inputInitial").val("point");
      $("#inputInteresting").val("");
      doUpdate();
    }
  });

  doUpdate();

  function doSave() {
    window.open(jQuery("#canvas")[0].toDataURL());
  }
  $("#saveButton").click(doSave);
});
</script>
                </div>
                <div class="entry-footnotes">
                        <div id="footnotes"><ol></ol></div>
                </div>

                <div id="disqus_thread"></div>
<script type="text/javascript">
var disqus_shortname = "jverkamp";
var disqus_title = "Elementary cellular automaton";
var disqus_url = "http://blog.jverkamp.com/2012/10/03/elementary-cellular-automaton/";
/* * * DON'T EDIT BELOW THIS LINE * * */
(function() {
  var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
  dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js';
  (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
})();
</script>
<noscript>Please enable JavaScript to view the <a href="http://disqus.com/?ref_noscript">comments powered by Disqus.</a></noscript>
<a href="http://disqus.com" class="dsq-brlink">comments powered by <span class="logo-disqus">Disqus</span></a>
        </article>

        <footer class="container" role="contentinfo">
                <nav class="navbar navbar-default" role="navigation"><ul class="nav navbar-nav nav-justified"><li><a href="http://blog.jverkamp.com/2012/10/02/a-sea-of-stars-ch-11-surprises">← A Sea of Stars - Ch. 11 - Surprises</a></li><li><a href="http://blog.jverkamp.com/category/archives">Archives</a></li><li><a href="http://blog.jverkamp.com/2012/10/04/querying-csv-files-with-sql">Querying CSV files with SQL →</a></li></ul><ul class="nav navbar-nav nav-justified"><li><a href="http://blog.jverkamp.com/2012/10/01/the-birthday-paradox">← The Birthday Paradox</a></li><li><a href="http://blog.jverkamp.com/category/programming">Programming</a></li><li><a href="http://blog.jverkamp.com/2012/10/04/querying-csv-files-with-sql">Querying CSV files with SQL →</a></li></ul></nav>

                <div class="legal">
                        <a href="http://blog.jverkamp.com/feed/atom.xml">feed <img style="border: 0;" src="http://blog.jverkamp.com/rss.png" /></a><br />
                        All posts unless otherwise mentioned are licensed under <a rel="license" href="http://creativecommons.org/licenses/by-nc-sa/3.0/deed.en_US"><img alt="Creative Commons License" style="border-width:0" src="http://i.creativecommons.org/l/by-nc-sa/3.0/80x15.png" /></a><br />
                        Any source code unless otherwise mentioned is licensed under the <a href="http://directory.fsf.org/wiki/License:BSD_3Clause">3 clause BSD license</a>
                </div>
        </footer>

<script>
(function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
(i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
})(window,document,'script','//www.google-analytics.com/analytics.js','ga');

ga('create', 'UA-53688146-1', 'auto');
ga('send', 'pageview');
</script>
</body>
</html>