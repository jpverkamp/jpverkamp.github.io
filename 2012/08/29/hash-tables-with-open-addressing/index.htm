<!DOCTYPE html>
<html>
<head>
        
        

        <title>Hash Tables With Open Addressing | jverkamp.com | John-Paul Verkamp</title>

        <script src="//ajax.googleapis.com/ajax/libs/jquery/1.11.0/jquery.min.js"></script>

        <link rel="stylesheet" href="//netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css" />
        <link rel="stylesheet" href="//netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap-theme.min.css" />
        <script src="//netdna.bootstrapcdn.com/bootstrap/3.1.1/js/bootstrap.min.js"></script>

        <link rel="stylesheet" href="//cdnjs.cloudflare.com/ajax/libs/ekko-lightbox/3.0.3a/ekko-lightbox.min.css" />
        <script src="//cdnjs.cloudflare.com/ajax/libs/ekko-lightbox/3.0.3a/ekko-lightbox.min.js"></script>

        <script src="//cdnjs.cloudflare.com/ajax/libs/jquery.transit/0.9.9/jquery.transit.min.js"></script>

        <!-- Highlight.js for syntax highlighting -->
        <link rel="stylesheet" href="/highlight/styles/tomorrow-night.css" />
        <script src="/highlight/highlight.pack.js"></script>

        <!-- MathJax for LaTeX support -->
        <script src="//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML"></script>

        <!-- nanoGallery for Flickr Galleries -->
        <link rel="stylesheet" href="//cdnjs.cloudflare.com/ajax/libs/nanogallery/4.4.2/css/themes/light/nanogallery_light.css" />
        <script type="text/javascript" src="//cdnjs.cloudflare.com/ajax/libs/nanogallery/4.4.2/jquery.nanogallery.min.js"></script>

        <!-- Any custom CSS or JS that I've written; this should be kept minimal -->
        <link rel="stylesheet" href="/custom.css" />
        <script src="/custom.js"></script>

        <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
</head>
<body>
        <header class="container">
        <nav class="navbar navbar-default" role="navigation">
  <div class="container-fluid">
    <!-- Brand and toggle get grouped for better mobile display -->
    <div class="navbar-header">
      <button type="button" class="navbar-toggle" data-toggle="collapse" data-target="#bs-example-navbar-collapse-1">
        <span class="sr-only">Toggle navigation</span>
        <span class="icon-bar"></span>
        <span class="icon-bar"></span>
        <span class="icon-bar"></span>
      </button>
      <a class="navbar-brand" href="http://blog.jverkamp.com"><span style="color: green;">jv</span>erkamp.com</a>
    </div>

    <!-- Collect the nav links, forms, and other content for toggling -->
    <div class="collapse navbar-collapse" id="bs-example-navbar-collapse-1">
      <ul class="nav navbar-nav"><li class="dropdown"><a href="http://blog.jverkamp.com/category/archives" class="dropdown-toggle">Archives<span class="caret"></span></a><ul class="dropdown-menu"><li><a href="http://blog.jverkamp.com/category/archives/2004">2004</a></li><li><a href="http://blog.jverkamp.com/category/archives/2005">2005</a></li><li><a href="http://blog.jverkamp.com/category/archives/2006">2006</a></li><li><a href="http://blog.jverkamp.com/category/archives/2007">2007</a></li><li><a href="http://blog.jverkamp.com/category/archives/2008">2008</a></li><li><a href="http://blog.jverkamp.com/category/archives/2009">2009</a></li><li><a href="http://blog.jverkamp.com/category/archives/2010">2010</a></li><li><a href="http://blog.jverkamp.com/category/archives/2011">2011</a></li><li><a href="http://blog.jverkamp.com/category/archives/2012">2012</a></li><li><a href="http://blog.jverkamp.com/category/archives/2013">2013</a></li><li><a href="http://blog.jverkamp.com/category/archives/2014">2014</a></li></ul></li><li class="dropdown"><a href="http://blog.jverkamp.com/category/other" class="dropdown-toggle">Other<span class="caret"></span></a><ul class="dropdown-menu"><li><a href="http://blog.jverkamp.com/category/other/board-game-reviews">Board Game Reviews</a></li><li><a href="http://blog.jverkamp.com/category/other/cooking">Cooking</a></li><li><a href="http://blog.jverkamp.com/category/other/movie-reviews">Movie Reviews</a></li></ul></li><li class="dropdown"><a href="http://blog.jverkamp.com/category/photography" class="dropdown-toggle">Photography<span class="caret"></span></a><ul class="dropdown-menu"><li><a href="http://blog.jverkamp.com/category/photography/dp-challenge">DP Challenge</a></li><li><a href="http://blog.jverkamp.com/category/photography/photosets">Photosets</a></li><li><a href="http://blog.jverkamp.com/category/photography/photosynth">Photosynth</a></li></ul></li><li class="dropdown"><a href="http://blog.jverkamp.com/category/programming" class="dropdown-toggle">Programming<span class="caret"></span></a><ul class="dropdown-menu"><li><a href="http://blog.jverkamp.com/category/programming/by-language">By Language</a></li><li><a href="http://blog.jverkamp.com/category/programming/by-project">By Project</a></li><li><a href="http://blog.jverkamp.com/category/programming/by-source">By Source</a></li><li><a href="http://blog.jverkamp.com/category/programming/by-topic">By Topic</a></li><li><a href="http://blog.jverkamp.com/category/programming/libraries">Libraries</a></li></ul></li><li class="dropdown"><a href="http://blog.jverkamp.com/category/research" class="dropdown-toggle">Research<span class="caret"></span></a><ul class="dropdown-menu"><li><a href="http://blog.jverkamp.com/category/research/by-topic">By Topic</a></li><li><a href="http://blog.jverkamp.com/category/research/publications">Publications</a></li></ul></li><li class="dropdown"><a href="http://blog.jverkamp.com/category/writing" class="dropdown-toggle">Writing<span class="caret"></span></a><ul class="dropdown-menu"><li><a href="http://blog.jverkamp.com/category/writing/by-genre">By Genre</a></li><li><a href="http://blog.jverkamp.com/category/writing/nanowrimo">NaNoWriMo</a></li><li><a href="http://blog.jverkamp.com/category/writing/novels">Novels</a></li><li><a href="http://blog.jverkamp.com/category/writing/other">Other</a></li><li><a href="http://blog.jverkamp.com/category/writing/short-stories">Short Stories</a></li></ul></li></ul>

      <form action="http://www.google.com/search" method="get" onSubmit="(function(obj){obj.q.value='site:blog.jverkamp.com '+obj.qfront.value;})(this)" class="navbar-form navbar-right" role="search">
        <div class="form-group">
          <input name="q" type="hidden" />
          <input name="qfront" type="text" class="form-control" placeholder="Search" />
          <button type="submit" class="btn btn-default" value="Search">Search</button>
        </p>
      </form>
    </div><!-- /.navbar-collapse -->
  </div><!-- /.container-fluid -->
</nav>
        </header>

        <article class="container">
                <header>
                        <h1 class="entry-title">Hash Tables With Open Addressing</h1>

                        <div class="entry-meta">
                                <span class="posted-on"><time class="entry-date" datetime="2012-08-29"><span class="year">2012</span> <span class="month">Aug</span> <span class="day">29</span></time></span>
                                <span class="tags"><ul class="tag-list list-inline"><li><a href="http://blog.jverkamp.com/category/programming/by-source/programming-praxis">Programming Praxis</a></li><li><a href="http://blog.jverkamp.com/category/programming">Programming</a></li><li><a href="http://blog.jverkamp.com/category/programming/by-language/scheme">Scheme</a></li></ul></span>
                        </div>

                        <hr />
                </header>
                <div class="entry-content">
                        <p>Another day, another post from <a href="http://programmingpraxis.com/2012/08/24/hash-tables-with-open-addressing/" title="Hash Tables With Open Accessing">Programming Praxis</a>. This time, the goal is to write a hash table with <a href="https://en.wikipedia.org/wiki/open_addressing">Hash table#Open addressing</a>. Basically, whenever there is a collision with your hash function, advance to the next index and try to store it there. Continue until you either succeed or are out of keys. My solution isn't so different from the one that <a href="http://programmingpraxis.com/2012/08/24/hash-tables-with-open-addressing/2/" title="Hash Tables With Open Addressing: Solution">Programming Praxis posted</a> (that'd be the problem with using the same language).</p>
<!--more-->
<p>In any case, it gave me a chance to play with <a href="http://scheme.com/" title="(chez (chez scheme))">Chez Scheme's</a> <a href="http://www.scheme.com/csug8/objects.html#./objects:s93" title="Chez Scheme API: records">records</a> and <a href="http://www.scheme.com/csug8/libraries.html" title="Chez Scheme API: libraries">libraries</a>. Great fun!</p>
<p>If you want, you can download You can download the entire file <a href='https://github.com/jpverkamp/small-projects/blob/master/chez-libraries/hash.ss'>here</a>.</p>
<p>Okay, first, some administrative detail. First, we have to set up the library (we're important the standard Chez Scheme library) and the data structure that we're going to use internally. The nice thing about <code>define-record</code> is that it makes a bunch of functions for us, like the constructor <code>make-:hash:</code> and the accessors <code>:hash:-f</code>, <code>:hash:-nul</code>, <code>:hash:-vals</code>, etc.</p>
<pre class="scheme"><code>
(library (hash)
  (export make-hash hash-ref hash-set! hash-unset! hash-&gt;list)
  (import (chezscheme))

  (define-record :hash: (f nul del keys vals))
</code></pre>
<p>Next up, we want a function that will set up a hash. I went with the abstraction that you pass the hashing function in here and it's stored with the hash record rather than passing it around all over the place. The nul and del symbols are also created here, gensym'ed to be unique<sup>1</sup>. The hash function is also wrapped here to force all generated keys to be in the proper range.</p>
<pre class="scheme"><code>
; given a hash function and a size for the table, create a hash
(define (make-hash hash-function size)
  (let ([nul (gensym)])
    (make-:hash:
      (lambda (key)
        (mod (hash-function key) size))
      nul
      (gensym)
      (make-vector size nul)
      (make-vector size nul))))
</code></pre>
<p>Next, our first helper function. I want to be able to unpack all of the parts of a <code>:hash:</code> structure, which I can do with this nice bit of code and the helper of multiple value returns. Behold the power of Scheme!</p>
<pre class="scheme"><code>
; unpack a :hash:
(define (*unpack h)
  (values
    (:hash:-f h) (:hash:-nul h) (:hash:-del h)
    (:hash:-keys h) (:hash:-vals h)))
</code></pre>
<p>Our second helper. This one is the core of pretty much all of the rest of the functions. Basically, we want to turn a key into an index. If the key is in the hash, this should be the index into the <code>keys</code> and <code>vals</code> for that key. If the key isn't, this should be the first location currently marked as either <code>nul</code> or <code>del</code> after that point. If the hash is full when you try to look up a hash that isn't already in it, then you'll get a nice error.</p>
<pre class="scheme"><code>
; convert a hash into an index
; start at the hashed index and look for either that key or nul
; error (hash is full) if we loop
; set del? to return a del? index
(define (*get-index h k del?)
  (let-values ([(f nul del ks vs) (*unpack h)])
    (let ([i0 (f k)])
      (let loop ([i i0] [fst #t])
        (cond
          [(and (not fst) (= i i0)) (error 'hash "hash is full")]
          [(equal? (vector-ref ks i) k) i]
          [(equal? (vector-ref ks i) nul) i]
          [(and del? (equal? (vector-ref ks i) del)) i]
          [else (loop (mod (+ i 1) 1000) #f)])))))
</code></pre>
<p>Once the helper is set up, it makes writing things like <code>hash-ref</code> much easier. Just find the index. If they key matches, return the value; otherwise, return an error.</p>
<pre class="scheme"><code>
; get the value associated with a key k out of the hash h
; error if they key has not been set
(define (hash-ref h k)
  (let-values ([(f nul del ks vs) (*unpack h)])
    (let ([i (*get-index h k #f)])
      (cond
        [(equal? (vector-ref ks i) nul)
         (error 'hash "key not set")]
        [else
         (vector-ref vs i)]))))
</code></pre>
<p>Even easier is the mutator for binding a key and a value. Since the <code>*get-index</code> function returns either the index of the item if it already exists or the first available index, you can just use that and then set the key and value. Done. Bam.</p>
<pre class="scheme"><code>
; get the value associated with key k out of the hash h
(define (hash-set! h k v)
  (let-values ([(f nul del ks vs) (*unpack h)])
    (let ([i (*get-index h k #t)])
      (vector-set! ks i k)
      (vector-set! vs i v))))
</code></pre>
<p>Same for unsetting values. Just set the key and value to <code>del</code>. Technically, we don't have to set the value as a value associated with <code>key = del</code> will never show up, but we might as well.</p>
<pre class="scheme"><code>
; remove a given key from the hash
(define (hash-unset! h k)
  (let-values ([(f nul del ks vs) (*unpack h)])
    (let ([i (*get-index h k #t)])
      (vector-set! ks i del)
      (vector-set! vs i del))))
</code></pre>
<p>Finally, a nice helper function to convert a hash into an association list. Pretty straight forward.</p>
<pre class="scheme"><code>
; convert a hash into a list of key, value pairs
(define (hash-&gt;list h)
  (let-values ([(f nul del ks vs) (*unpack h)])
    (let loop ([i 0])
      (cond
        [(= i (vector-length ks)) '()]
        [(or (equal? (vector-ref ks i) nul)
             (equal? (vector-ref ks i) del))
         (loop (+ i 1))]
        [else
         (cons
           (cons (vector-ref ks i) (vector-ref vs i))
           (loop (+ i 1)))]))))
</code></pre>
<p>And then the inverse:</p>
<pre class="scheme"><code>
; convert a hash into a list of key, value pairs
(define (hash-&gt;list h)
  (let-values ([(f nul del ks vs) (*unpack h)])
    (let loop ([i 0])
      (cond
        [(= i (vector-length ks)) '()]
        [(or (equal? (vector-ref ks i) nul)
             (equal? (vector-ref ks i) del))
         (loop (+ i 1))]
        [else
         (cons
           (list (vector-ref ks i) (vector-ref vs i))
           (loop (+ i 1)))]))))
</code></pre>
<p>Also, I wanted to make the printout a little nicer. Instead of printing out the hash function and <code>nul</code> and <code>del</code> values, just print out the association list.</p>
<pre class="scheme"><code>
; custom writer for the hash
(record-writer (type-descriptor :hash:)
  (lambda (r p wr)
    (display "#[hash " p)
    (wr (hash-&gt;list r) p)
    (display "]" p)))
</code></pre>
<p>All together, we have a nice hashing library. Let's try it out! I'm going to use Chez Scheme's built in <code>string-hash</code> for the hashing function. Let's start with a 100 item hash.</p>
<pre class="scheme"><code>
~ (import (hash))

~ (define h (make-hash string-hash 100))

~ h
 #[hash ()]
</code></pre>
<p>Now, we'll add a few keys:</p>
<pre class="scheme"><code>
~ (hash-set! h "cat" "dog")

~ (hash-set! h "thunder" "storm")

~ (hash-set! h "alpha" "beta")

~ h
 #[hash (("thunder" "storm") ("cat" "dog") ("alpha" "beta"))]
</code></pre>
<p>Delete one and reset another:</p>
<pre class="scheme"><code>
~ (hash-unset! h "cat")

~ (hash-set! h "thunder" "stone")

~ h
 #[hash (("thunder" "stone") ("alpha" "beta"))]
</code></pre>
<p>Finally, test <code>hash->list</code> and <code>list->hash</code>. The <code>list->hash</code> also tests collisions as everything hashes to the same thing. (Isn't that an awesome hashing function?)</p>
<pre class="scheme"><code>
~ (hash-&gt;list h)
 (("thunder" "stone") ("alpha" "beta"))

~ (define h2 (list-&gt;hash (lambda (x) x) 5 '((0 zero) (1 one) (5 five))))

~ (hash-unset! h2 1)

~ (hash-set! h2 2 'two)

~ h2
 #[hash ((0 zero) (5 five) (2 two))]
</code></pre>
<p>Anyways, that's what I have. You can download the entire code <a href='https://github.com/jpverkamp/small-projects/blob/master/chez-libraries/hash.ss'>here</a>.</p>
<p><sup>1</sup> unique enough for our purposes anyways</p>
                </div>
                <div class="entry-footnotes">
                        <div id="footnotes"><ol></ol></div>
                </div>

                <div id="disqus_thread"></div>
<script type="text/javascript">
var disqus_shortname = "jverkamp";
var disqus_title = "Hash Tables With Open Addressing";
var disqus_url = "http://blog.jverkamp.com/2012/08/29/hash-tables-with-open-addressing/";
/* * * DON'T EDIT BELOW THIS LINE * * */
(function() {
  var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
  dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js';
  (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
})();
</script>
<noscript>Please enable JavaScript to view the <a href="http://disqus.com/?ref_noscript">comments powered by Disqus.</a></noscript>
<a href="http://disqus.com" class="dsq-brlink">comments powered by <span class="logo-disqus">Disqus</span></a>
        </article>

        <footer class="container" role="contentinfo">
                <nav class="navbar navbar-default" role="navigation"><ul class="nav navbar-nav nav-justified"><li><a href="http://blog.jverkamp.com/2012/08/28/a-sea-of-stars-ch-1-liftoff">← A Sea of Stars - Ch. 1 - Liftoff</a></li><li><a href="http://blog.jverkamp.com/category/archives">Archives</a></li><li><a href="http://blog.jverkamp.com/2012/08/30/random-access-lists">Random Access Lists →</a></li></ul><ul class="nav navbar-nav nav-justified"><li><a href="http://blog.jverkamp.com/2012/08/27/4sum">← 4sum</a></li><li><a href="http://blog.jverkamp.com/category/programming">Programming</a></li><li><a href="http://blog.jverkamp.com/2012/08/30/random-access-lists">Random Access Lists →</a></li></ul></nav>

                <div class="legal">
                        All posts unless otherwise mentioned are licensed under <a rel="license" href="http://creativecommons.org/licenses/by-nc-sa/3.0/deed.en_US"><img alt="Creative Commons License" style="border-width:0" src="http://i.creativecommons.org/l/by-nc-sa/3.0/80x15.png" /></a><br />
                        Any source code unless otherwise mentioned is licensed under the <a href="http://directory.fsf.org/wiki/License:BSD_3Clause">3 clause BSD license</a>
                </div>
        </footer>

<script>
(function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
(i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
})(window,document,'script','//www.google-analytics.com/analytics.js','ga');

ga('create', 'UA-53688146-1', 'auto');
ga('send', 'pageview');
</script>
</body>
</html>