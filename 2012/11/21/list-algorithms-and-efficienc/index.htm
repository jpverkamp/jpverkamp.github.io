<!DOCTYPE html>
<html>
<head>
        
        

        <title>List algorithms and efficiency | jverkamp.com | John-Paul Verkamp</title>

        <script src="//ajax.googleapis.com/ajax/libs/jquery/1.11.0/jquery.min.js"></script>

        <script src="//code.jquery.com/ui/1.11.1/jquery-ui.min.js"></script>

        <link rel="stylesheet" href="//netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css" />
        <link rel="stylesheet" href="//netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap-theme.min.css" />
        <script src="//netdna.bootstrapcdn.com/bootstrap/3.1.1/js/bootstrap.min.js"></script>

        <link rel="stylesheet" href="//cdnjs.cloudflare.com/ajax/libs/ekko-lightbox/3.0.3a/ekko-lightbox.min.css" />
        <script src="//cdnjs.cloudflare.com/ajax/libs/ekko-lightbox/3.0.3a/ekko-lightbox.min.js"></script>

        <script src="//cdnjs.cloudflare.com/ajax/libs/jquery.transit/0.9.9/jquery.transit.min.js"></script>

        <!-- Highlight.js for syntax highlighting -->
        <link rel="stylesheet" href="/highlight/styles/obsidian.css" />
        <script src="/highlight/highlight.pack.js"></script>

        <!-- MathJax for LaTeX support -->
        <script src="//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML"></script>

        <!-- nanoGallery for Flickr Galleries -->
        <link rel="stylesheet" href="//cdnjs.cloudflare.com/ajax/libs/nanogallery/4.4.2/css/themes/light/nanogallery_light.css" />
        <script type="text/javascript" src="//cdnjs.cloudflare.com/ajax/libs/nanogallery/4.4.2/jquery.nanogallery.min.js"></script>

        <!-- Any custom CSS or JS that I've written; this should be kept minimal -->
        <link rel="stylesheet" href="/custom.css" />
        <script src="/custom.js"></script>

        <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
        <link rel="alternate" type="application/atom+xml" title="jverkamp.com (Atom 2.0)" href="http://blog.jverkamp.com/feed/" />
</head>
<body>
        <header class="container">
        <nav class="navbar navbar-default" role="navigation">
  <div class="container-fluid">
    <!-- Brand and toggle get grouped for better mobile display -->
    <div class="navbar-header">
      <button type="button" class="navbar-toggle" data-toggle="collapse" data-target="#bs-example-navbar-collapse-1">
        <span class="sr-only">Toggle navigation</span>
        <span class="icon-bar"></span>
        <span class="icon-bar"></span>
        <span class="icon-bar"></span>
      </button>
      <a class="navbar-brand" href="http://blog.jverkamp.com"><span style="color: green;">jv</span>erkamp.com</a>
    </div>

    <!-- Collect the nav links, forms, and other content for toggling -->
    <div class="collapse navbar-collapse" id="bs-example-navbar-collapse-1">
      <ul class="nav navbar-nav"><li class="dropdown"><a href="http://blog.jverkamp.com/category/archives" class="dropdown-toggle">Archives<span class="caret"></span></a><ul class="dropdown-menu"><li><a href="http://blog.jverkamp.com/category/archives/2004">2004</a></li><li><a href="http://blog.jverkamp.com/category/archives/2005">2005</a></li><li><a href="http://blog.jverkamp.com/category/archives/2006">2006</a></li><li><a href="http://blog.jverkamp.com/category/archives/2007">2007</a></li><li><a href="http://blog.jverkamp.com/category/archives/2008">2008</a></li><li><a href="http://blog.jverkamp.com/category/archives/2009">2009</a></li><li><a href="http://blog.jverkamp.com/category/archives/2010">2010</a></li><li><a href="http://blog.jverkamp.com/category/archives/2011">2011</a></li><li><a href="http://blog.jverkamp.com/category/archives/2012">2012</a></li><li><a href="http://blog.jverkamp.com/category/archives/2013">2013</a></li><li><a href="http://blog.jverkamp.com/category/archives/2014">2014</a></li><li><a href="http://blog.jverkamp.com/category/archives/2015">2015</a></li></ul></li><li class="dropdown"><a href="http://blog.jverkamp.com/category/other" class="dropdown-toggle">Other<span class="caret"></span></a><ul class="dropdown-menu"><li><a href="http://blog.jverkamp.com/category/other/board-game-reviews">Board Game Reviews</a></li><li><a href="http://blog.jverkamp.com/category/other/cooking">Cooking</a></li><li><a href="http://blog.jverkamp.com/category/other/movie-reviews">Movie Reviews</a></li></ul></li><li class="dropdown"><a href="http://blog.jverkamp.com/category/photography" class="dropdown-toggle">Photography<span class="caret"></span></a><ul class="dropdown-menu"><li><a href="http://blog.jverkamp.com/category/photography/dp-challenge">DP Challenge</a></li><li><a href="http://blog.jverkamp.com/category/photography/photosets">Photosets</a></li><li><a href="http://blog.jverkamp.com/category/photography/photosynth">Photosynth</a></li></ul></li><li class="dropdown"><a href="http://blog.jverkamp.com/category/programming" class="dropdown-toggle">Programming<span class="caret"></span></a><ul class="dropdown-menu"><li><a href="http://blog.jverkamp.com/category/programming/by-language">By Language</a></li><li><a href="http://blog.jverkamp.com/category/programming/by-project">By Project</a></li><li><a href="http://blog.jverkamp.com/category/programming/by-source">By Source</a></li><li><a href="http://blog.jverkamp.com/category/programming/by-topic">By Topic</a></li><li><a href="http://blog.jverkamp.com/category/programming/libraries">Libraries</a></li></ul></li><li class="dropdown"><a href="http://blog.jverkamp.com/category/research" class="dropdown-toggle">Research<span class="caret"></span></a><ul class="dropdown-menu"><li><a href="http://blog.jverkamp.com/category/research/by-topic">By Topic</a></li><li><a href="http://blog.jverkamp.com/category/research/publications">Publications</a></li></ul></li><li class="dropdown"><a href="http://blog.jverkamp.com/category/writing" class="dropdown-toggle">Writing<span class="caret"></span></a><ul class="dropdown-menu"><li><a href="http://blog.jverkamp.com/category/writing/by-genre">By Genre</a></li><li><a href="http://blog.jverkamp.com/category/writing/ideas">Ideas</a></li><li><a href="http://blog.jverkamp.com/category/writing/nanowrimo">NaNoWriMo</a></li><li><a href="http://blog.jverkamp.com/category/writing/novels">Novels</a></li><li><a href="http://blog.jverkamp.com/category/writing/other">Other</a></li><li><a href="http://blog.jverkamp.com/category/writing/short-stories">Short Stories</a></li><li><a href="http://blog.jverkamp.com/category/writing/writing-excuses">Writing Excuses</a></li></ul></li></ul>

      <form action="http://www.google.com/search" method="get" onSubmit="(function(obj){obj.q.value='site:blog.jverkamp.com '+obj.qfront.value;})(this)" class="navbar-form navbar-right" role="search">
        <div class="form-group">
          <input name="q" type="hidden" />
          <input name="qfront" type="text" class="form-control" placeholder="Search" />
          <button type="submit" class="btn btn-default" value="Search">Search</button>
        </p>
      </form>
    </div><!-- /.navbar-collapse -->
  </div><!-- /.container-fluid -->
</nav>
        </header>

        <article class="container">
                <header>
                        <h1 class="entry-title">List algorithms and efficiency</h1>

                        <div class="entry-meta">
                                <span class="posted-on"><time class="entry-date" datetime="2012-11-21"><span class="year">2012</span> <span class="month">Nov</span> <span class="day">21</span></time></span>
                                <span class="tags"><ul class="tag-list list-inline"><li><a href="http://blog.jverkamp.com/category/programming">Programming</a></li><li><a href="http://blog.jverkamp.com/category/programming/by-source/programming-praxis">Programming Praxis</a></li><li><a href="http://blog.jverkamp.com/category/programming/by-language/python">Python</a></li><li><a href="http://blog.jverkamp.com/category/programming/by-language/racket">Racket</a></li><li><a href="http://blog.jverkamp.com/category/programming/by-language/scheme">Scheme</a></li></ul></span>
                        </div>

                        <hr />
                </header>
                <div class="entry-content">
                        <p>Programming Praxis' new challenge(s) are to write three different list algorithms three times, each with a different runtime complexity. From their <a title="Programming Praxis: List Intersection and Union" href="http://programmingpraxis.com/2012/11/16/list-intersection-and-union/">first post</a> last week we have list intersection and union and from a <a title="Programming Praxis: List Difference" href="http://programmingpraxis.com/2012/11/20/list-difference/">newer post</a> yesterday we have the difference of two lists. For each of those, we want to be able to write an algorithm that runs in O(n<sup>2</sup>) time, one that runs in O(n log n), and finally one that runs in O(n). It turns out that it's more of an exercise in data structures than anything (although they're all still technically 'list' algorithms), but it's still interesting to see how you can achieve the same goal in different ways that may be far more efficient.</p>
<!--more-->
<p>Since all three of the basic algorithms (intersection, union, and difference) are actually rather similar, I'm going to start with the three different runtimes first. Like my recent <a href="http://blog.jverkamp.com/2012/11/15/project-euler-9">Project Euler</a> posts, I'll be writing the code in both Racket and Python to help those that read one language but not the other (although I would highly recommend that you learn both actually, they each have definite strengths). If you'd like to see the full code for each algorithm, you can see it here: <a href="https://github.com/jpverkamp/small-projects/blob/master/blog/list-algorithms.py" title="List algorithms source (Python)">python</a>, <a href="https://github.com/jpverkamp/small-projects/blob/master/blog/list-algorithms.rkt" title="List algorithms source (Racket)">racket</a></p>
<p>First, let's start with the slowest but most likely easiest to understand algorithm. Since we're doing list intersection, we want to only return the elements in both lists. To do that, we want to start by looping over one list. For each element in that last, scan through the second list. If the element is in both, return it, otherwise, skip it. This ends up being O(n<sup>2</sup>) because for each element in one list (O(n)), you have to loop over the other list (also O(n)). Since the loops are nested, you multiply the runtimes, resulting in O(n<sup>2</sup>).</p>
<p>Starting with the Python version (note that Python's <code>in</code> operator on lists loops over the list to check for inclusion):</p>
<pre class="python"><code>def intersection_loops(ls1, ls2):
        '''Calculate the intersection of two lists using nested loops.'''

        result = []

        for e in ls1:
                if e in ls2:
                        result.append(e)

        return result</code></pre>
<p>(Yes, this could be written in a single line using Python's list comprehension as <code>return [e for e in ls1 if e in ls2]</code>. In this case, I'm going for clean code over the shortest version.)</p>
<p>Next, we have the Racket version (in much the same way, <code>member</code> is linear):</p>
<pre class="scheme"><code>; Calculate the intersection of two lists using nested loops.
(define (intersection-loops ls1 ls2)
  (let loop ([ls1 ls1])
    (cond
      [(null? ls1) '()]
      [(member (car ls1) ls2)
       (cons (car ls1) (loop (cdr ls1)))]
      [else
       (loop (cdr ls1))])))</code></pre>
<p>This could be shortened significantly using Racket's <code>for/list</code> macro:</p>
<pre class="scheme"><code>(define (intersection-loops ls1 ls2)
  (for/list ([e (in-list ls1)]
             #:when (member e ls2))
    e))</code></pre>
<p>This will work here and on the third case, but we'll need to write the loops explicitly in the next (pre-sorted) case.</p>
<p>When you run it on some randomly generated lists, the result is quite obviously quadratic (the blue line is the runtime, the red line is a quadratic fit):</p>
<p><a href="http://blog.jverkamp.com/2012/11/21/list-algorithms-and-efficienc/intersection-loops.png" data-toggle="lightbox"><img src="http://blog.jverkamp.com/2012/11/21/list-algorithms-and-efficienc/intersection-loops.png" /></a></p>
<p>Next, we want to improve the time to O(n log n). Any time that you see a runtime like that, you should immediately think 'sort' (or trees, but not in this case) as the best sorting algorithms all have that runtime. In this case, we have to change the algorithm somewhat, but the basic idea is to first sort the lists. Then, you only have to compare the first elements against each other, basically zipping them together.</p>
<p>That basic idea in Python:</p>
<pre class="python"><code>def intersection_sort(ls1, ls2):
        '''Calculate the intersection of two lists by sorting them first.'''

        ls1 = sorted(ls1)
        ls2 = sorted(ls2)
        result = []

        i, j = 0, 0
        while True:
                if i &gt;= len(ls1):
                        break
                elif j &gt;= len(ls2):
                        break
                elif ls1[i] &lt; ls2[j]:
                        i += 1
                elif ls1[i] &gt; ls2[j]:
                        j += 1
                else: # ==
                        result.append(ls1[i])
                        i += 1
                        j += 1

        return result</code></pre>
<p>For intersection, if either list runs out, we're done. There will be no more matched elements. If either first element is smaller than the other, skip past that one. As soon as they're both equal, we have a match. Return it and keep going. The other two (union and difference) are much the same, see the full code (<a href="https://github.com/jpverkamp/small-projects/blob/master/blog/list-algorithms.py" title="List algorithms source (Python)">python</a>, <a href="https://github.com/jpverkamp/small-projects/blob/master/blog/list-algorithms.rkt" title="List algorithms source (Racket)">racket</a>) for more details.</p>
<p>And here's the Racket version:</p>
<pre class="scheme"><code>(define (intersection-sort ls1 ls2)
  (let loop ([ls1 (sort ls1 &lt;)]
             [ls2 (sort ls2 &lt;)])
    (cond
      [(null? ls1) '()]
      [(null? ls2) '()]
      [(&lt; (car ls1) (car ls2))
       (loop (cdr ls1) ls2)]
      [(&gt; (car ls1) (car ls2))
       (loop ls1 (cdr ls2))]
      [else
       (cons (car ls1) (loop (cdr ls1) (cdr ls2)))])))</code></pre>
<p>If we graph this one against O(n log n), we find that the graph isn't nearly as nice. Mostly, that's due to the relatively small times we're using. I also tried using larger lists, but garbage collection became a significant problem. Again, the blue is runtime and the red is the expected value.</p>
<p><a href="http://blog.jverkamp.com/2012/11/21/list-algorithms-and-efficienc/insertion-sort.png" data-toggle="lightbox"><img src="http://blog.jverkamp.com/2012/11/21/list-algorithms-and-efficienc/insertion-sort.png" /></a></p>
<p>Finally, the fastest version. The goal here is O(n). Since we have to loop over the lists at least once, that's going to be the fastest we can get. Since we don't have any more room to breathe as it were, we need an O(1) sort of algorithm. The first thing that comes to mind then is a hash. Hashes will gives us both O(1) insertion and selection, so it sounds like exactly what we need. Actually, the change from the first set (with nested loops) is only a line or two of code in each. In the Python version, we'll still be using <code>in</code>, but we want to build a <code>set</code> first (which is stored using hashing):</p>
<pre class="python"><code>def intersection_hash(ls1, ls2):
        '''Calculate the intersection of two lists using a hash.'''

        ls2_set = set(ls2)
        result = []

        for e in ls1:
                if e in ls2_set:
                        result.append(e)

        return result</code></pre>
<p>And similarly for Racket, we will be using a hash built using <code>for/list</code>. For that, we want to return two <code>value</code>s, the key and the value. We don't care what the values are, so we'll just insert <code>#t</code>. Then we can use <code>hash-has-key?</code> to do the lookup:</p>
<pre class="scheme"><code>; Calculate the intersection of two lists using a hash.
(define (intersection-hash ls1 ls2)
  (define ls2-hash (for/hash ([e2 (in-list ls2)]) (values e2 #t)))
  (let loop ([ls1 ls1])
    (cond
      [(null? ls1) '()]
      [(hash-has-key? ls2-hash (car ls1))
       (cons (car ls1) (loop (cdr ls1)))]
      [else
       (loop (cdr ls1))])))</code></pre>
<p>Similiarly to the sorted case, the timing (blue line) isn't perfect, but it's quite clearly linear (the red line):</p>
<p><a href="http://blog.jverkamp.com/2012/11/21/list-algorithms-and-efficienc/insertion-hash.png" data-toggle="lightbox"><img src="http://blog.jverkamp.com/2012/11/21/list-algorithms-and-efficienc/insertion-hash.png" /></a></p>
<p>ANd that's it. I'm not actually going to include the code for union or difference as it's basically the same with a few minor tweaks. You can see it in its fully comment entirety here: <a href="https://github.com/jpverkamp/small-projects/blob/master/blog/list-algorithms.py" title="List algorithms source (Python)">python</a>, <a href="https://github.com/jpverkamp/small-projects/blob/master/blog/list-algorithms.rkt" title="List algorithms source (Racket)">racket</a></p>
                </div>
                <div class="entry-footnotes">
                        <div id="footnotes"><ol></ol></div>
                </div>

                <div id="disqus_thread"></div>
<script type="text/javascript">
var disqus_shortname = "jverkamp";
var disqus_title = "List algorithms and efficiency";
var disqus_url = "http://blog.jverkamp.com/2012/11/21/list-algorithms-and-efficienc/";
/* * * DON'T EDIT BELOW THIS LINE * * */
(function() {
  var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
  dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js';
  (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
})();
</script>
<noscript>Please enable JavaScript to view the <a href="http://disqus.com/?ref_noscript">comments powered by Disqus.</a></noscript>
<a href="http://disqus.com" class="dsq-brlink">comments powered by <span class="logo-disqus">Disqus</span></a>
        </article>

        <footer class="container" role="contentinfo">
                <nav class="navbar navbar-default" role="navigation"><ul class="nav navbar-nav nav-justified"><li><a href="http://blog.jverkamp.com/2012/11/21/confession-day-20">← Confession - Day 20</a></li><li><a href="http://blog.jverkamp.com/category/archives">Archives</a></li><li><a href="http://blog.jverkamp.com/2012/11/22/confession-day-21">Confession - Day 21 →</a></li></ul><ul class="nav navbar-nav nav-justified"><li><a href="http://blog.jverkamp.com/2012/11/15/project-euler-9">← Project Euler #9</a></li><li><a href="http://blog.jverkamp.com/category/programming">Programming</a></li><li><a href="http://blog.jverkamp.com/2012/11/29/one-billion-primes-segmented-sieve">One Billion Primes - Segmented Sieve →</a></li></ul></nav>

                <div class="legal">
                        <a href="http://blog.jverkamp.com/feed/atom.xml">feed <img style="border: 0;" src="http://blog.jverkamp.com/rss.png" /></a><br />
                        All posts unless otherwise mentioned are licensed under <a rel="license" href="http://creativecommons.org/licenses/by-nc-sa/3.0/deed.en_US"><img alt="Creative Commons License" style="border-width:0" src="http://i.creativecommons.org/l/by-nc-sa/3.0/80x15.png" /></a><br />
                        Any source code unless otherwise mentioned is licensed under the <a href="http://directory.fsf.org/wiki/License:BSD_3Clause">3 clause BSD license</a>
                </div>
        </footer>

<script>
(function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
(i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
})(window,document,'script','//www.google-analytics.com/analytics.js','ga');

ga('create', 'UA-53688146-1', 'auto');
ga('send', 'pageview');
</script>
</body>
</html>