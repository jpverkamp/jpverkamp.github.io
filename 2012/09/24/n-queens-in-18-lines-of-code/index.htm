<!DOCTYPE html>
<html>
<head>
        
        

        <title>n-queens in 18 lines of code | jverkamp.com | John-Paul Verkamp</title>

        <script src="//ajax.googleapis.com/ajax/libs/jquery/1.11.0/jquery.min.js"></script>

        <script src="//code.jquery.com/ui/1.11.1/jquery-ui.min.js"></script>

        <link rel="stylesheet" href="//netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css" />
        <link rel="stylesheet" href="//netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap-theme.min.css" />
        <script src="//netdna.bootstrapcdn.com/bootstrap/3.1.1/js/bootstrap.min.js"></script>

        <link rel="stylesheet" href="//cdnjs.cloudflare.com/ajax/libs/ekko-lightbox/3.0.3a/ekko-lightbox.min.css" />
        <script src="//cdnjs.cloudflare.com/ajax/libs/ekko-lightbox/3.0.3a/ekko-lightbox.min.js"></script>

        <script src="//cdnjs.cloudflare.com/ajax/libs/jquery.transit/0.9.9/jquery.transit.min.js"></script>

        <!-- Highlight.js for syntax highlighting -->
        <link rel="stylesheet" href="/highlight/styles/obsidian.css" />
        <script src="/highlight/highlight.pack.js"></script>

        <!-- MathJax for LaTeX support -->
        <script src="//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML"></script>

        <!-- nanoGallery for Flickr Galleries -->
        <link rel="stylesheet" href="//cdnjs.cloudflare.com/ajax/libs/nanogallery/4.4.2/css/themes/light/nanogallery_light.css" />
        <script type="text/javascript" src="//cdnjs.cloudflare.com/ajax/libs/nanogallery/4.4.2/jquery.nanogallery.min.js"></script>

        <!-- Any custom CSS or JS that I've written; this should be kept minimal -->
        <link rel="stylesheet" href="/custom.css" />
        <script src="/custom.js"></script>

        <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
        <link rel="alternate" type="application/atom+xml" title="jverkamp.com (Atom 2.0)" href="http://blog.jverkamp.com/feed/" />
</head>
<body>
        <header class="container">
        <nav class="navbar navbar-default" role="navigation">
  <div class="container-fluid">
    <!-- Brand and toggle get grouped for better mobile display -->
    <div class="navbar-header">
      <button type="button" class="navbar-toggle" data-toggle="collapse" data-target="#bs-example-navbar-collapse-1">
        <span class="sr-only">Toggle navigation</span>
        <span class="icon-bar"></span>
        <span class="icon-bar"></span>
        <span class="icon-bar"></span>
      </button>
      <a class="navbar-brand" href="http://blog.jverkamp.com"><span style="color: green;">jv</span>erkamp.com</a>
    </div>

    <!-- Collect the nav links, forms, and other content for toggling -->
    <div class="collapse navbar-collapse" id="bs-example-navbar-collapse-1">
      <ul class="nav navbar-nav"><li class="dropdown"><a href="http://blog.jverkamp.com/category/archives" class="dropdown-toggle">Archives<span class="caret"></span></a><ul class="dropdown-menu"><li><a href="http://blog.jverkamp.com/category/archives/2004">2004</a></li><li><a href="http://blog.jverkamp.com/category/archives/2005">2005</a></li><li><a href="http://blog.jverkamp.com/category/archives/2006">2006</a></li><li><a href="http://blog.jverkamp.com/category/archives/2007">2007</a></li><li><a href="http://blog.jverkamp.com/category/archives/2008">2008</a></li><li><a href="http://blog.jverkamp.com/category/archives/2009">2009</a></li><li><a href="http://blog.jverkamp.com/category/archives/2010">2010</a></li><li><a href="http://blog.jverkamp.com/category/archives/2011">2011</a></li><li><a href="http://blog.jverkamp.com/category/archives/2012">2012</a></li><li><a href="http://blog.jverkamp.com/category/archives/2013">2013</a></li><li><a href="http://blog.jverkamp.com/category/archives/2014">2014</a></li></ul></li><li class="dropdown"><a href="http://blog.jverkamp.com/category/other" class="dropdown-toggle">Other<span class="caret"></span></a><ul class="dropdown-menu"><li><a href="http://blog.jverkamp.com/category/other/board-game-reviews">Board Game Reviews</a></li><li><a href="http://blog.jverkamp.com/category/other/cooking">Cooking</a></li><li><a href="http://blog.jverkamp.com/category/other/movie-reviews">Movie Reviews</a></li></ul></li><li class="dropdown"><a href="http://blog.jverkamp.com/category/photography" class="dropdown-toggle">Photography<span class="caret"></span></a><ul class="dropdown-menu"><li><a href="http://blog.jverkamp.com/category/photography/dp-challenge">DP Challenge</a></li><li><a href="http://blog.jverkamp.com/category/photography/photosets">Photosets</a></li><li><a href="http://blog.jverkamp.com/category/photography/photosynth">Photosynth</a></li></ul></li><li class="dropdown"><a href="http://blog.jverkamp.com/category/programming" class="dropdown-toggle">Programming<span class="caret"></span></a><ul class="dropdown-menu"><li><a href="http://blog.jverkamp.com/category/programming/by-language">By Language</a></li><li><a href="http://blog.jverkamp.com/category/programming/by-project">By Project</a></li><li><a href="http://blog.jverkamp.com/category/programming/by-source">By Source</a></li><li><a href="http://blog.jverkamp.com/category/programming/by-topic">By Topic</a></li><li><a href="http://blog.jverkamp.com/category/programming/libraries">Libraries</a></li></ul></li><li class="dropdown"><a href="http://blog.jverkamp.com/category/research" class="dropdown-toggle">Research<span class="caret"></span></a><ul class="dropdown-menu"><li><a href="http://blog.jverkamp.com/category/research/by-topic">By Topic</a></li><li><a href="http://blog.jverkamp.com/category/research/publications">Publications</a></li></ul></li><li class="dropdown"><a href="http://blog.jverkamp.com/category/writing" class="dropdown-toggle">Writing<span class="caret"></span></a><ul class="dropdown-menu"><li><a href="http://blog.jverkamp.com/category/writing/by-genre">By Genre</a></li><li><a href="http://blog.jverkamp.com/category/writing/nanowrimo">NaNoWriMo</a></li><li><a href="http://blog.jverkamp.com/category/writing/novels">Novels</a></li><li><a href="http://blog.jverkamp.com/category/writing/other">Other</a></li><li><a href="http://blog.jverkamp.com/category/writing/short-stories">Short Stories</a></li></ul></li></ul>

      <form action="http://www.google.com/search" method="get" onSubmit="(function(obj){obj.q.value='site:blog.jverkamp.com '+obj.qfront.value;})(this)" class="navbar-form navbar-right" role="search">
        <div class="form-group">
          <input name="q" type="hidden" />
          <input name="qfront" type="text" class="form-control" placeholder="Search" />
          <button type="submit" class="btn btn-default" value="Search">Search</button>
        </p>
      </form>
    </div><!-- /.navbar-collapse -->
  </div><!-- /.container-fluid -->
</nav>
        </header>

        <article class="container">
                <header>
                        <h1 class="entry-title">n-queens in 18 lines of code</h1>

                        <div class="entry-meta">
                                <span class="posted-on"><time class="entry-date" datetime="2012-09-24"><span class="year">2012</span> <span class="month">Sept</span> <span class="day">24</span></time></span>
                                <span class="tags"><ul class="tag-list list-inline"><li><a href="http://blog.jverkamp.com/category/programming/by-topic/mathematics">Mathematics</a></li><li><a href="http://blog.jverkamp.com/category/programming">Programming</a></li><li><a href="http://blog.jverkamp.com/category/programming/by-language/scheme">Scheme</a></li></ul></span>
                        </div>

                        <hr />
                </header>
                <div class="entry-content">
                        <p>One of the rites of passage for computer scientists it seems is to solve the <a href="https://en.wikipedia.org/wiki/Eight_Queens Problem">N-queens</a>--where you must place 8 queens on a chessboard so that no pair of queens is attacking each other. Even better is when you can expand that to the n-queens problem with n queens on an n by n chessboard. After finding it again in older posts on both <a href="http://programmingpraxis.com/2010/06/11/n-queens/" title="Programming Praxis: N-Queens">Programming Praxis</a> and <a href="http://www.datagenetics.com/blog/august42012/index.html" title="DataGenetics: Eight Queens">DataGenetics</a>, I decided to go ahead and take a crack at it and I think the solution is pretty straight forward.</p>
<!--more-->
<p>The most boring obvious solution would be to simply try every possible solution. For an 8x8 board, that turns out to be <span>\( \binom{8*8}{8} \approx 4.4e9 \)</span> or 4.4 billion. That's a fair few, but still entirely doable without too much effort. You can do a little better by restricting the solutions to exactly one queen per row and column. That reduces the number of necessary combinations all of the way down to <span>\( 8! = 40,320 \)</span> combinations. Much better, but it still seems like we should be able to do better.</p>
<p>Finally, we're at the solution hat I actually used: a simple backtracking model. Start by placing a queen in the first row and column. Then, for each row after that, place a queen in the first column that is available. If you ever get into a position where that just isn't possible, back up through the decisions you made, undoing them one at a time and trying the next column instead. Eventually, you might get all the way back to that original first row and column choice if it's not possible to place a queen in the corner and still solve the problem (that's not actually true, there are actually four such solutions for an 8x8 board).</p>
<p>For this particular algorithm, Scheme is a natural choice as the backtracking algorithm is a direct analogue to recursion. You can use the nested function calls to keep track of how far you have to back up, which makes it rather nice. For this particular implementation, the goal is to return all valid solutions as a list of row,column points.</p>
<p>In any case, here's my code:</p>
<pre class="scheme"><code>(define (queens n)
  (let loop ([queens '()] [row 0] [col 0])
    (cond
      [(= row n) (list queens)]
      [(= col n) '()]
      [else
       (let ([new-queen (list row col)])
         (if (any? (lambda (old-queen)
                     (or (= (car old-queen) (car new-queen))
                         (= (cadr old-queen) (cadr new-queen))
                         (= 1 (abs (/ (- (cadr old-queen) (cadr new-queen))
                                      (- (car old-queen) (car new-queen)))))))
               queens)
             (loop queens row (+ col 1))
             (append
               (loop (cons new-queen queens) (+ row 1) 0)
               (loop queens row (+ col 1)))))])))

(define (any? ? l) (not (null? (filter ? l))))</code></pre>
<p>Simple enough, although there are a few potential gotchas:</p>
<pre class="scheme"><code>[(= row n) (list queens)]
[(= col n) '()]</code></pre>
<p>The first two <code>cond</code> cases are for running off the edges. If you've run off the last row that means you've successfully placed a queen in every row of the board so you should return the list of queens thus far. It's wrapped in another call to <code>list</code> as the expected solution is a list of solutions, not just a single solution. The second case is for running off of a column. If you get here, that means that you've tried every solution in this particular row and either branched to look for more valid solutions or you're done and there aren't any. In either case, you just want an empty set of solutions for this branch.</p>
<pre class="scheme"><code>(any? (lambda (old-queen)
        (or (= (car old-queen) (car new-queen))
            (= (cadr old-queen) (cadr new-queen))
            (= 1 (abs (/ (- (cadr old-queen) (cadr new-queen))
                         (- (car old-queen) (car new-queen)))))))
  queens)</code></pre>
<p>The next interesting bit of code uses the <code>any?</code> function I've shown several times before to ask if there is any <code>old-queen</code> in <code>queens</code> that is in the same row, column, or diagonal (respectively) as the <code>new-queen</code> that we're trying to place. I'll admit that the code is a bit messy here and it was originally factored out into three helper functions, but since they're only used once, I went ahead and inlined them.</p>
<p>The rest is just the branching possibilities. If the <code>any?</code> returns <code>#t</code>, that means there is already a queen that can attack this square so just try the next column. If it doesn't return <code>#t</code> though, that means that we could place a queen here. So what we do is branch by first checking for any solutions starting in the next row that have the new queen in them and then checking for any solutions still in this row without the new queen. Stick the two lists together and we have our overall solution. Recursion is awesome.</p>
<p>Here is an example run showing the 10 solutions to the 5-queens problem:</p>
<pre>~ (queens 5)
 (((4 3) (3 1) (2 4) (1 2) (0 0))
  ((4 2) (3 4) (2 1) (1 3) (0 0))
  ((4 4) (3 2) (2 0) (1 3) (0 1))
  ((4 3) (3 0) (2 2) (1 4) (0 1))
  ((4 4) (3 1) (2 3) (1 0) (0 2))
  ((4 0) (3 3) (2 1) (1 4) (0 2))
  ((4 1) (3 4) (2 2) (1 0) (0 3))
  ((4 0) (3 2) (2 4) (1 1) (0 3))
  ((4 2) (3 0) (2 3) (1 1) (0 4))
  ((4 1) (3 3) (2 0) (1 2) (0 4)))</pre>
<p>Also, for those interested, I ran my code against the first several values for n:</p>
<table class="table table-striped">
<tr><td>n</td><td>solutions</td><td>time (sec)</td></tr>
<tr><td>1</td><td>1</td><td>0</td></tr>
<tr><td>2</td><td>0</td><td>0</td></tr>
<tr><td>3</td><td>0</td><td>0</td></tr>
<tr><td>4</td><td>2</td><td>0</td></tr>
<tr><td>5</td><td>10</td><td>0</td></tr>
<tr><td>6</td><td>4</td><td>0.001</td></tr>
<tr><td>7</td><td>40</td><td>0.003</td></tr>
<tr><td>8</td><td>92</td><td>0.019</td></tr>
<tr><td>9</td><td>352</td><td>0.102</td></tr>
<tr><td>10</td><td>724</td><td>0.549</td></tr>
<tr><td>11</td><td>2680</td><td>3.031</td></tr>
<tr><td>12</td><td>14200</td><td>19.282</td></tr>
<tr><td>13</td><td>73712</td><td>132.300</td></tr>

</table>
<p>All in all, a fun little problem. I'm tempted to try for some of the more interesting possible algorithms for this at some point. For example I was toying with the idea of using a genetic algorithm to solve it, although I have a feeling that there is too much repetitiveness and symmetry to the solution space for that to be an effective method. Still, it could be interesting.</p>
<p>If you'd like, you can download the source here: <a href="https://github.com/jpverkamp/small-projects/blob/master/blog/n-queens.ss" title="n-queens source code">n queens source</a></p>
                </div>
                <div class="entry-footnotes">
                        <div id="footnotes"><ol></ol></div>
                </div>

                <div id="disqus_thread"></div>
<script type="text/javascript">
var disqus_shortname = "jverkamp";
var disqus_title = "n-queens in 18 lines of code";
var disqus_url = "http://blog.jverkamp.com/2012/09/24/n-queens-in-18-lines-of-code/";
/* * * DON'T EDIT BELOW THIS LINE * * */
(function() {
  var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
  dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js';
  (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
})();
</script>
<noscript>Please enable JavaScript to view the <a href="http://disqus.com/?ref_noscript">comments powered by Disqus.</a></noscript>
<a href="http://disqus.com" class="dsq-brlink">comments powered by <span class="logo-disqus">Disqus</span></a>
        </article>

        <footer class="container" role="contentinfo">
                <nav class="navbar navbar-default" role="navigation"><ul class="nav navbar-nav nav-justified"><li><a href="http://blog.jverkamp.com/2012/09/23/herman">← Herman</a></li><li><a href="http://blog.jverkamp.com/category/archives">Archives</a></li><li><a href="http://blog.jverkamp.com/2012/09/25/a-sea-of-stars-ch-9-lies">A Sea of Stars - Ch. 9 - Lies →</a></li></ul><ul class="nav navbar-nav nav-justified"><li><a href="http://blog.jverkamp.com/2012/09/22/sampling-stdin">← Sampling stdin</a></li><li><a href="http://blog.jverkamp.com/category/programming">Programming</a></li><li><a href="http://blog.jverkamp.com/2012/09/26/line-art-with-html5-canvas">Line art with an HTML5 canvas →</a></li></ul></nav>

                <div class="legal">
                        <a href="http://blog.jverkamp.com/feed/atom.xml">feed <img style="border: 0;" src="http://blog.jverkamp.com/rss.png" /></a><br />
                        All posts unless otherwise mentioned are licensed under <a rel="license" href="http://creativecommons.org/licenses/by-nc-sa/3.0/deed.en_US"><img alt="Creative Commons License" style="border-width:0" src="http://i.creativecommons.org/l/by-nc-sa/3.0/80x15.png" /></a><br />
                        Any source code unless otherwise mentioned is licensed under the <a href="http://directory.fsf.org/wiki/License:BSD_3Clause">3 clause BSD license</a>
                </div>
        </footer>

<script>
(function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
(i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
})(window,document,'script','//www.google-analytics.com/analytics.js','ga');

ga('create', 'UA-53688146-1', 'auto');
ga('send', 'pageview');
</script>
</body>
</html>