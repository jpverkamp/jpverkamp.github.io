<!DOCTYPE html>
<html>
<head>
        
        

        <title>The First Two Problems | jverkamp.com | John-Paul Verkamp</title>

        <script src="//ajax.googleapis.com/ajax/libs/jquery/1.11.0/jquery.min.js" defer></script>
        <script src="//code.jquery.com/ui/1.11.1/jquery-ui.min.js" defer></script>

        <link rel="stylesheet" href="//netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css" defer />
        <link rel="stylesheet" href="//netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap-theme.min.css" defer />
        <script src="//netdna.bootstrapcdn.com/bootstrap/3.1.1/js/bootstrap.min.js" defer></script>

        <link rel="stylesheet" href="//cdnjs.cloudflare.com/ajax/libs/ekko-lightbox/3.0.3a/ekko-lightbox.min.css" defer />
        <script src="//cdnjs.cloudflare.com/ajax/libs/ekko-lightbox/3.0.3a/ekko-lightbox.min.js" defer></script>

        <script src="//cdnjs.cloudflare.com/ajax/libs/jquery.transit/0.9.9/jquery.transit.min.js" defer></script>

        <!-- Highlight.js for syntax highlighting -->
        <link rel="stylesheet" href="/highlight/styles/obsidian.css" defer />
        <script src="/highlight/highlight.pack.js" defer></script>

        <!-- MathJax for LaTeX support -->
        <script src="//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML" defer></script>

        <!-- nanoGallery for Flickr Galleries -->
        <link rel="stylesheet" href="//cdnjs.cloudflare.com/ajax/libs/nanogallery/4.4.2/css/themes/light/nanogallery_light.css" defer />
        <script type="text/javascript" src="//cdnjs.cloudflare.com/ajax/libs/nanogallery/4.4.2/jquery.nanogallery.min.js" defer ></script>

        <!-- Pretty pretty fonts -->
        <link rel="stylesheet" type="text/css" href="//fonts.googleapis.com/css?family=Calligraffitti" defer />

        <!-- Any custom CSS or JS that I've written; this should be kept minimal -->
        <link rel="stylesheet" href="/custom.css" defer />
        <script src="/custom.js" defer></script>

        <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
        <link rel="alternate" type="application/atom+xml" title="jverkamp.com (Atom 2.0)" href="//blog.jverkamp.com/feed/" />
</head>
<body>
        <header class="container">
        <nav class="navbar navbar-default" role="navigation">
  <div class="container-fluid">
    <!-- Brand and toggle get grouped for better mobile display -->
    <div class="navbar-header">
      <button type="button" class="navbar-toggle" data-toggle="collapse" data-target="#bs-example-navbar-collapse-1">
        <span class="sr-only">Toggle navigation</span>
        <span class="icon-bar"></span>
        <span class="icon-bar"></span>
        <span class="icon-bar"></span>
      </button>
      <a class="navbar-brand" href="//blog.jverkamp.com"><span style="color: green;">jv</span>erkamp.com</a>
    </div>

    <!-- Collect the nav links, forms, and other content for toggling -->
    <div class="collapse navbar-collapse" id="bs-example-navbar-collapse-1">
      <ul class="nav navbar-nav"><li class="dropdown"><a href="//blog.jverkamp.com/category/archives" class="dropdown-toggle">Archives<span class="caret"></span></a><ul class="dropdown-menu"><li><a href="//blog.jverkamp.com/category/archives/2004">2004</a></li><li><a href="//blog.jverkamp.com/category/archives/2005">2005</a></li><li><a href="//blog.jverkamp.com/category/archives/2006">2006</a></li><li><a href="//blog.jverkamp.com/category/archives/2007">2007</a></li><li><a href="//blog.jverkamp.com/category/archives/2008">2008</a></li><li><a href="//blog.jverkamp.com/category/archives/2009">2009</a></li><li><a href="//blog.jverkamp.com/category/archives/2010">2010</a></li><li><a href="//blog.jverkamp.com/category/archives/2011">2011</a></li><li><a href="//blog.jverkamp.com/category/archives/2012">2012</a></li><li><a href="//blog.jverkamp.com/category/archives/2013">2013</a></li><li><a href="//blog.jverkamp.com/category/archives/2014">2014</a></li><li><a href="//blog.jverkamp.com/category/archives/2015">2015</a></li></ul></li><li class="dropdown"><a href="//blog.jverkamp.com/category/other" class="dropdown-toggle">Other<span class="caret"></span></a><ul class="dropdown-menu"><li><a href="//blog.jverkamp.com/category/other/board-game-reviews">Board Game Reviews</a></li><li><a href="//blog.jverkamp.com/category/other/book-reviews">Book Reviews</a></li><li><a href="//blog.jverkamp.com/category/other/cooking">Cooking</a></li><li><a href="//blog.jverkamp.com/category/other/movie-reviews">Movie Reviews</a></li></ul></li><li class="dropdown"><a href="//blog.jverkamp.com/category/photography" class="dropdown-toggle">Photography<span class="caret"></span></a><ul class="dropdown-menu"><li><a href="//blog.jverkamp.com/category/photography/dp-challenge">DP Challenge</a></li><li><a href="//blog.jverkamp.com/category/photography/photosets">Photosets</a></li><li><a href="//blog.jverkamp.com/category/photography/photosynth">Photosynth</a></li></ul></li><li class="dropdown"><a href="//blog.jverkamp.com/category/programming" class="dropdown-toggle">Programming<span class="caret"></span></a><ul class="dropdown-menu"><li><a href="//blog.jverkamp.com/category/programming/by-language">By Language</a></li><li><a href="//blog.jverkamp.com/category/programming/by-project">By Project</a></li><li><a href="//blog.jverkamp.com/category/programming/by-source">By Source</a></li><li><a href="//blog.jverkamp.com/category/programming/by-topic">By Topic</a></li><li><a href="//blog.jverkamp.com/category/programming/libraries">Libraries</a></li></ul></li><li class="dropdown"><a href="//blog.jverkamp.com/category/research" class="dropdown-toggle">Research<span class="caret"></span></a><ul class="dropdown-menu"><li><a href="//blog.jverkamp.com/category/research/by-topic">By Topic</a></li><li><a href="//blog.jverkamp.com/category/research/publications">Publications</a></li></ul></li><li class="dropdown"><a href="//blog.jverkamp.com/category/writing" class="dropdown-toggle">Writing<span class="caret"></span></a><ul class="dropdown-menu"><li><a href="//blog.jverkamp.com/category/writing/by-genre">By Genre</a></li><li><a href="//blog.jverkamp.com/category/writing/ideas">Ideas</a></li><li><a href="//blog.jverkamp.com/category/writing/nanowrimo">NaNoWriMo</a></li><li><a href="//blog.jverkamp.com/category/writing/novels">Novels</a></li><li><a href="//blog.jverkamp.com/category/writing/other">Other</a></li><li><a href="//blog.jverkamp.com/category/writing/short-stories">Short Stories</a></li><li><a href="//blog.jverkamp.com/category/writing/writing-excuses">Writing Excuses</a></li></ul></li></ul>

      <form action="//www.google.com/search" method="get" onSubmit="(function(obj){obj.q.value='site:blog.jverkamp.com '+obj.qfront.value;})(this)" class="navbar-form navbar-right" role="search">
        <div class="form-group">
          <input name="q" type="hidden" />
          <input name="qfront" type="text" class="form-control" placeholder="Search" />
          <button type="submit" class="btn btn-default" value="Search">Search</button>
        </p>
      </form>
    </div><!-- /.navbar-collapse -->
  </div><!-- /.container-fluid -->
</nav>
        </header>

        <article class="container">
                <header>
                        <h1 class="entry-title">The First Two Problems</h1>

                        <div class="entry-meta">
                                <span class="posted-on"><time class="entry-date" datetime="2012-09-08"><span class="year">2012</span> <span class="month">Sept</span> <span class="day">8</span></time></span>
                                <span class="tags"><ul class="tag-list list-inline"><li><a href="//blog.jverkamp.com/category/programming">Programming</a></li><li><a href="//blog.jverkamp.com/category/programming/by-source/programming-praxis">Programming Praxis</a></li><li><a href="//blog.jverkamp.com/category/programming/by-language/scheme">Scheme</a></li></ul></span>
                        </div>

                        <hr />
                </header>
                <div class="entry-content">
                        <p>Anything worth doing is worth over doing, right? This time we have another two problems from Programming Praxis, aptly title "<a href="//blog.jverkamp.com/2012/04/13/wombat-ide-turtle-graphics">Turtle Graphics</a> instead of just printing the characters. <img alt="smile" class="emoji" src="/emoji/smile.svg" /></p>
<!--more-->
<p>As always if you would like to download the entire source code, you can do so <a href='https://github.com/jpverkamp/small-projects/blob/master/blog/first-two-problems.ss'>here</a>. Granted, you'll almost surely need <a href="http://blog.jverkamp.com/wombat-ide/" title="Wombat IDE">Wombat</a> to run it as it depends on the <code>(c211 turtle)</code> library, but the code should hopefully be easy enough to read through even without that.</p>
<p>Now that that's out of the way, let's start with a bit of a spoiler, here's the output I'm going for. First, Hello World:</p>
<p><a href="//blog.jverkamp.com/2012/09/08/the-first-two-problems/hello-world.png" data-toggle="lightbox"><img src="//blog.jverkamp.com/2012/09/08/the-first-two-problems/hello-world.png" /></a></p>
<p>Then, the conversion table:</p>
<p><a href="//blog.jverkamp.com/2012/09/08/the-first-two-problems/temperature-table.png" data-toggle="lightbox"><img src="//blog.jverkamp.com/2012/09/08/the-first-two-problems/temperature-table.png" /></a></p>
<p>Turns out, it doesn't look half bad. Particularly considering a bulk of the time was spent coming up with the points for a turtle graphics font. Speaking of which, here's what such a font might look like in the case of drawing numbers:</p>
<pre class="scheme"><code>; define positions for digits
(define digits
  '#(((0 3) (3 6) (9 6) (12 3) (9 0) (3 0) (0 3))         ; 0
     ((0 3) (12 3) (9 0))                                 ; 1
     ((0 6) (0 0) (6 6) (9 6) (12 3) (9 0))               ; 2
     ((3 0) (0 3) (3 6) (6 3) (9 6) (12 3) (9 0))         ; 3
     ((6 6) (6 0) (12 6) (0 6))                           ; 4
     ((12 6) (12 0) (9 0) (6 6) (3 6) (0 3) (0 0))        ; 5
     ((9 6) (12 3) (9 0) (3 0) (0 3) (3 6) (6 3) (3 0))   ; 6
     ((12 0) (12 6) (0 3))                                ; 7
     ((3 0) (0 3) (3 6) (9 0) (12 3) (9 6) (3 0))         ; 8
     ((3 0) (0 3) (3 6) (9 6) (12 3) (9 0) (6 3) (9 6))   ; 9
     ((6 0) (6 6))))                                      ; -</code></pre>
<p>Each of the characters is specified by a series of row/column coordinates with 0,0 in the bottom left with rows ranging from 0 to 12 and columns from 0 to 6. A line will be drawn starting at the first pair in the list and then through each of the rest in turn. I also added the special character <code>-</code> for negative numbers. There's another table for the letters, which you can see in the <a href='https://github.com/jpverkamp/small-projects/blob/master/blog/first-two-problems.ss'>source code</a>.</p>
<p>Now the big question is how do you actually draw those? It turns out, it's not so bad. Here's the first function which takes a vector of point lists (like <code>digits</code> above) and draws the list at a given point with the given turtle:</p>
<pre class="scheme"><code>; using turtle t, draw the digit/letter with index i from table chars
; with the top left at r, c
; reset the turtle to wherever it was after that
(define (draw-thing chars t r c i)
  (block t
    (let ([ps (vector-ref chars i)])
      (lift-pen! t)
      (move-to! t (+ c (cadar ps)) (+ r (caar ps)))
      (drop-pen! t)
      (let loop ([ps (cdr ps)])
        (unless (null? ps)
          (move-to! t (+ c (cadar ps)) (+ r (caar ps)))
          (loop (cdr ps)))))))</code></pre>
<p>Pretty straight forward. Save the state, lift the pen to move to the first point, and then recursively draw lines from point to point. Now what if we want to use that to draw a number? Still pretty straight forward. Just loop through the digits, drawing them one at a time. The hardest part was actually formatting them from the right so that the standard <code>mod</code>/<code>div</code> method for extracting digits would work.</p>
<pre class="scheme"><code>; using turtle t, draw a number n with the top left at r, c
; reset the turtle to whever it was after that
(define (draw-number t r c n)
  (block t
    (if (= n 0)
        (draw-thing digits t r (+ c 10) 0)
        (let ([? (&lt; n 0)])
          (let loop ([c (+ c (* 10 (digits-in n)) 1)]
                     [n (abs n)])
            (when (&gt; n 0)
              (draw-thing digits t r c (mod n 10))
              (loop (- c 10) (div n 10)))
            (when (and ? (= n 0))
              (draw-thing digits t r c 10)))))))</code></pre>
<p>In case you were wondering, here's the function that will tell me how many characters are in a number, including an extra one for the <code>-</code> in negative numbers:</p>
<pre class="scheme"><code>; helper to calculate how wide a number is (add one for negative numbers)
(define (digits-in n)
  (if (= n 0)
      0
      (+ (if (&lt; n 0) 1 0)
        (inexact-&gt;exact (+ 1 (floor (log (abs n) 10)))))))</code></pre>
<p>After getting numbers working, drawing strings was much easier. Particularly because you can directly access the letters from left to right with <code>string-ref</code>:</p>
<pre class="scheme"><code>; using turtle t, draw a string s with the top left at r, c
; reset the turtle to whever it was after that
(define (draw-string t r c s)
  (block t
    (for-each
      (lambda (i)
        (unless (eq? #\space (string-ref s i))
          (draw-thing letters t r (+ c (* i 10))
            (- (char-&gt;integer (char-upcase (string-ref s i))) 65))))
      (iota (string-length s)))))</code></pre>
<p>And that's it. Well, except for the minor fact that we haven't actually solved the problem yet. <img alt="smile" class="emoji" src="/emoji/smile.svg" /></p>
<pre class="scheme"><code>; draw a temperature table
; (draw-image (make-temperature-table))
(define (make-temperature-table)
  (let ([t (hatch)])
    (draw-string t 15 0 " F")
    (draw-string t 15 50 " C")
    (for-each
      (lambda (row)
        (let* ([f (* row 20)]
               [c (inexact-&gt;exact (round (/ (* (- f 32) 5) 9)))])
          (draw-number t (* (- row) 15) 0 f)
          (draw-number t (* (- row) 15) 50 c)))
      (iota 16))
    (turtle-&gt;image t)))

; draw hello world
; (draw-image (hello-world))
(define (hello-world)
  (let ([t (hatch)])
    (draw-string t 0 0 "Hello World")
    (turtle-&gt;image t)))</code></pre>
<p>Much better.</p>
<p>That was actually really fun to do. Perhaps I'll see what other <del>trouble</del> fun I can get into with it.</p>
<p>If you would like to download the entire source code, you can do so <a href="//blog.jverkamp.com/2012/04/13/wombat-ide-turtle-graphics">Turtle Graphics</a>).</p>
<p>As a random side note, it's amusing to watch the turtles actually going about the drawing. Try turning on <code>(live-display #t)</code>.</p>
                </div>
                <div class="entry-footnotes">
                        <div id="footnotes"><ol></ol></div>
                </div>

                <div id="disqus_thread"></div>
<script type="text/javascript">
var disqus_shortname = "jverkamp";
var disqus_title = "The First Two Problems";
var disqus_url = "http://blog.jverkamp.com/2012/09/08/the-first-two-problems/";
/* * * DON'T EDIT BELOW THIS LINE * * */
(function() {
  var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
  dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js';
  (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
})();
</script>
<noscript>Please enable JavaScript to view the <a href="http://disqus.com/?ref_noscript">comments powered by Disqus.</a></noscript>
<a href="http://disqus.com" class="dsq-brlink">comments powered by <span class="logo-disqus">Disqus</span></a>
        </article>

        <footer class="container" role="contentinfo">
                <nav class="navbar navbar-default" role="navigation"><ul class="nav navbar-nav nav-justified"><li><a href="//blog.jverkamp.com/2012/09/07/a-sea-of-stars-ch-4-troubleshooting">← A Sea of Stars - Ch. 4 - Troubleshooting</a></li><li><a href="//blog.jverkamp.com/category/archives">Archives</a></li><li><a href="//blog.jverkamp.com/2012/09/09/generating-voronoi-diagrams">Generating Voronoi diagrams →</a></li></ul><ul class="nav navbar-nav nav-justified"><li><a href="//blog.jverkamp.com/2012/09/06/generating-epubs">← Generating epubs</a></li><li><a href="//blog.jverkamp.com/category/programming">Programming</a></li><li><a href="//blog.jverkamp.com/2012/09/09/generating-voronoi-diagrams">Generating Voronoi diagrams →</a></li></ul></nav>

                <div class="legal">
                        <a href="//blog.jverkamp.com/feed/atom.xml">feed <img style="border: 0;" src="//blog.jverkamp.com/rss.png" /></a><br />
                        All posts unless otherwise mentioned are licensed under <a rel="license" href="//creativecommons.org/licenses/by-nc-sa/3.0/deed.en_US"><img alt="Creative Commons License" style="border-width:0" src="//i.creativecommons.org/l/by-nc-sa/3.0/80x15.png" /></a><br />
                        Any source code unless otherwise mentioned is licensed under the <a href="//directory.fsf.org/wiki/License:BSD_3Clause">3 clause BSD license</a>
                </div>
        </footer>

<script>
(function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
(i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
m=s.getElementsByTagName(o)[0];a.defer=1;a.src=g;m.parentNode.insertBefore(a,m)
})(window,document,'script','//www.google-analytics.com/analytics.js','ga');

ga('create', 'UA-53688146-1', 'auto');
ga('send', 'pageview');
</script>
</body>
</html>