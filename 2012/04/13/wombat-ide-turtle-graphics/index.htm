<!DOCTYPE html>
<html>
<head>
        
        

        <title>Wombat IDE - Turtle graphics | jverkamp.com | John-Paul Verkamp</title>

        <script src="//ajax.googleapis.com/ajax/libs/jquery/1.11.0/jquery.min.js" defer></script>
        <script src="//code.jquery.com/ui/1.11.1/jquery-ui.min.js" defer></script>

        <link rel="stylesheet" href="//netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css" defer />
        <link rel="stylesheet" href="//netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap-theme.min.css" defer />
        <script src="//netdna.bootstrapcdn.com/bootstrap/3.1.1/js/bootstrap.min.js" defer></script>

        <link rel="stylesheet" href="//cdnjs.cloudflare.com/ajax/libs/ekko-lightbox/3.0.3a/ekko-lightbox.min.css" defer />
        <script src="//cdnjs.cloudflare.com/ajax/libs/ekko-lightbox/3.0.3a/ekko-lightbox.min.js" defer></script>

        <script src="//cdnjs.cloudflare.com/ajax/libs/jquery.transit/0.9.9/jquery.transit.min.js" defer></script>

        <!-- Highlight.js for syntax highlighting -->
        <link rel="stylesheet" href="/highlight/styles/obsidian.css" defer />
        <script src="/highlight/highlight.pack.js" defer></script>

        <!-- MathJax for LaTeX support -->
        <script src="//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML" defer></script>

        <!-- nanoGallery for Flickr Galleries -->
        <link rel="stylesheet" href="//cdnjs.cloudflare.com/ajax/libs/nanogallery/4.4.2/css/themes/light/nanogallery_light.css" defer />
        <script type="text/javascript" src="//cdnjs.cloudflare.com/ajax/libs/nanogallery/4.4.2/jquery.nanogallery.min.js" defer ></script>

        <!-- Pretty pretty fonts -->
        <link rel="stylesheet" type="text/css" href="//fonts.googleapis.com/css?family=Calligraffitti" defer />

        <!-- Any custom CSS or JS that I've written; this should be kept minimal -->
        <link rel="stylesheet" href="/custom.css" defer />
        <script src="/custom.js" defer></script>

        <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
        <link rel="alternate" type="application/atom+xml" title="jverkamp.com (Atom 2.0)" href="http://blog.jverkamp.com/feed/" />
</head>
<body>
        <header class="container">
        <nav class="navbar navbar-default" role="navigation">
  <div class="container-fluid">
    <!-- Brand and toggle get grouped for better mobile display -->
    <div class="navbar-header">
      <button type="button" class="navbar-toggle" data-toggle="collapse" data-target="#bs-example-navbar-collapse-1">
        <span class="sr-only">Toggle navigation</span>
        <span class="icon-bar"></span>
        <span class="icon-bar"></span>
        <span class="icon-bar"></span>
      </button>
      <a class="navbar-brand" href="//blog.jverkamp.com"><span style="color: green;">jv</span>erkamp.com</a>
    </div>

    <!-- Collect the nav links, forms, and other content for toggling -->
    <div class="collapse navbar-collapse" id="bs-example-navbar-collapse-1">
      <ul class="nav navbar-nav"><li class="dropdown"><a href="//blog.jverkamp.com/category/archives" class="dropdown-toggle">Archives<span class="caret"></span></a><ul class="dropdown-menu"><li><a href="//blog.jverkamp.com/category/archives/2004">2004</a></li><li><a href="//blog.jverkamp.com/category/archives/2005">2005</a></li><li><a href="//blog.jverkamp.com/category/archives/2006">2006</a></li><li><a href="//blog.jverkamp.com/category/archives/2007">2007</a></li><li><a href="//blog.jverkamp.com/category/archives/2008">2008</a></li><li><a href="//blog.jverkamp.com/category/archives/2009">2009</a></li><li><a href="//blog.jverkamp.com/category/archives/2010">2010</a></li><li><a href="//blog.jverkamp.com/category/archives/2011">2011</a></li><li><a href="//blog.jverkamp.com/category/archives/2012">2012</a></li><li><a href="//blog.jverkamp.com/category/archives/2013">2013</a></li><li><a href="//blog.jverkamp.com/category/archives/2014">2014</a></li><li><a href="//blog.jverkamp.com/category/archives/2015">2015</a></li></ul></li><li class="dropdown"><a href="//blog.jverkamp.com/category/other" class="dropdown-toggle">Other<span class="caret"></span></a><ul class="dropdown-menu"><li><a href="//blog.jverkamp.com/category/other/board-game-reviews">Board Game Reviews</a></li><li><a href="//blog.jverkamp.com/category/other/book-reviews">Book Reviews</a></li><li><a href="//blog.jverkamp.com/category/other/cooking">Cooking</a></li><li><a href="//blog.jverkamp.com/category/other/movie-reviews">Movie Reviews</a></li></ul></li><li class="dropdown"><a href="//blog.jverkamp.com/category/photography" class="dropdown-toggle">Photography<span class="caret"></span></a><ul class="dropdown-menu"><li><a href="//blog.jverkamp.com/category/photography/dp-challenge">DP Challenge</a></li><li><a href="//blog.jverkamp.com/category/photography/photosets">Photosets</a></li><li><a href="//blog.jverkamp.com/category/photography/photosynth">Photosynth</a></li></ul></li><li class="dropdown"><a href="//blog.jverkamp.com/category/programming" class="dropdown-toggle">Programming<span class="caret"></span></a><ul class="dropdown-menu"><li><a href="//blog.jverkamp.com/category/programming/by-language">By Language</a></li><li><a href="//blog.jverkamp.com/category/programming/by-project">By Project</a></li><li><a href="//blog.jverkamp.com/category/programming/by-source">By Source</a></li><li><a href="//blog.jverkamp.com/category/programming/by-topic">By Topic</a></li><li><a href="//blog.jverkamp.com/category/programming/libraries">Libraries</a></li></ul></li><li class="dropdown"><a href="//blog.jverkamp.com/category/research" class="dropdown-toggle">Research<span class="caret"></span></a><ul class="dropdown-menu"><li><a href="//blog.jverkamp.com/category/research/by-topic">By Topic</a></li><li><a href="//blog.jverkamp.com/category/research/publications">Publications</a></li></ul></li><li class="dropdown"><a href="//blog.jverkamp.com/category/writing" class="dropdown-toggle">Writing<span class="caret"></span></a><ul class="dropdown-menu"><li><a href="//blog.jverkamp.com/category/writing/by-genre">By Genre</a></li><li><a href="//blog.jverkamp.com/category/writing/ideas">Ideas</a></li><li><a href="//blog.jverkamp.com/category/writing/nanowrimo">NaNoWriMo</a></li><li><a href="//blog.jverkamp.com/category/writing/novels">Novels</a></li><li><a href="//blog.jverkamp.com/category/writing/other">Other</a></li><li><a href="//blog.jverkamp.com/category/writing/short-stories">Short Stories</a></li><li><a href="//blog.jverkamp.com/category/writing/writing-excuses">Writing Excuses</a></li></ul></li></ul>

      <form action="http://www.google.com/search" method="get" onSubmit="(function(obj){obj.q.value='site:blog.jverkamp.com '+obj.qfront.value;})(this)" class="navbar-form navbar-right" role="search">
        <div class="form-group">
          <input name="q" type="hidden" />
          <input name="qfront" type="text" class="form-control" placeholder="Search" />
          <button type="submit" class="btn btn-default" value="Search">Search</button>
        </p>
      </form>
    </div><!-- /.navbar-collapse -->
  </div><!-- /.container-fluid -->
</nav>
        </header>

        <article class="container">
                <header>
                        <h1 class="entry-title">Wombat IDE - Turtle graphics</h1>

                        <div class="entry-meta">
                                <span class="posted-on"><time class="entry-date" datetime="2012-04-13"><span class="year">2012</span> <span class="month">Apr</span> <span class="day">13</span></time></span>
                                <span class="tags"><ul class="tag-list list-inline"><li><a href="//blog.jverkamp.com/category/programming/by-language/java">Java</a></li><li><a href="//blog.jverkamp.com/category/programming">Programming</a></li><li><a href="//blog.jverkamp.com/category/programming/by-language/scheme">Scheme</a></li><li><a href="//blog.jverkamp.com/category/programming/by-project/wombat-ide">Wombat IDE</a></li></ul></span>
                        </div>

                        <hr />
                </header>
                <div class="entry-content">
                        <p>As I mentioned in my last post, I've been adding a <a href="https://en.wikipedia.org/wiki/turtle_graphics">turtle graphics</a> library to Wombat to use with the other C211 libraries (<a href="//blog.jverkamp.com/2011/12/13/wombat-ide-c211-matrix-library">matrix</a>, <a href="//blog.jverkamp.com/2011/08/27/c211-tree-and-image-libraries">image</a>, and <a href="//blog.jverkamp.com/2011/08/27/c211-tree-and-image-libraries">tree</a>).</p>
<!--more-->
<p><b>Edit</b>: The most recent C211 APIs can be found here:</p>
<ul>
        <li><a title="C211 Matrix API" href="http://www.cs.indiana.edu/cgi-pub/c211/wombat/docs/c211-matrix.htm">Matrix API</a></li>
        <li><a title="C211 Image API" href="http://www.cs.indiana.edu/cgi-pub/c211/wombat/docs/c211-image.htm">Image API</a></li>
        <li><a title="C211 Tree API" href="http://www.cs.indiana.edu/cgi-pub/c211/wombat/docs/c211-tree.htm">Tree API</a></li>
</ul>
<p><b>Edit</b>: This post used an old version of the turtle graphics API, specifically using the function <code>spawn</code> rather than <code>hatch</code> in the code examples. So that the code will run in the newer version of Wombat, I have updated the examples.</p>
<p>Essentially, to think about turtle graphics, consider as a thought experiment a turtle standing in the middle of a giant blank white sheet of paper. Tied to the turtle's tail is a marker, initially in black. From there, you can issue a series of commands to the turtle, for example, telling it to <code>move!</code> or to <code>turn-left!</code> or <code>turn-right!</code>. You can also tell the turtle to <code>lift-pen!</code> and stop drawing, <code>drop-pen!</code> and start again, or even <code>set-pen-color!</code> to change to a different marker. Finally, there are some meta commands that allow you to either <code>split</code> into more turtles that will work in parallel, to run a <code>block</code> of commands and then reset back to the original state, or even to <code>repeat</code> a series of commands. For anything else, just check out the API:</p>
<h2><code>(c211 turtle)</code> API</h2>
<h3>Creating turtles:</h3>
<ul>
        <li><code>(hatch)</code> - create a new turtle</li>
        <li><code>(hatch dir)</code> - create a new turtle with the given facing (in degrees, 0 is north, positive to the right / clockwise)</li>
        <li><code>(hatch x y)</code> - create a turtle at the point (<code>x</code>, <code>y</code>) instead of the origin</li>
        <li><code>(hatch x y dir)</code> - create a turtle at (<code>x</code>, <code>y</code>) with the given facing</li>
        <li><code>(hatch x y dir up/down color)</code> - create a turtle at (<code>x</code>, <code>y</code>) with the given facing and a <code>color</code> pen that is either <code>up</code> or <code>down</code></li>
        <li><code>(split t)</code> - create a copy of a turtle so that the two can move in parallel (for branching structures)</li>
</ul>
<h3>Movement:</h3>
<ul>
        <li><code>(move! t n)</code> - move the turtle <code>n</code> units in whichever direction it is facing; draw a line if the pen is <code>down</code></li>
        <li><code>(move-to! t x y)</code> - jump directly to the point (<code>x</code>, <code>y</code>), preserving the original facing; draw a line if the pen is <code>down</code></li>
        <li><code>(turtle-location t)</code> - return the turtle's current location as a list of the form <code>(x y)</code></li>
        <li><code>(turn-left! t d)</code> - turn left / counter-clockwise this many degrees.</li>
        <li><code>(turn-right! t d)</code> - turn right / clockwise this many degrees</li>
        <li><code>(turn-to! t d)</code> - turn directly to a given facing (in degrees, 0 is north, positive to the right / clockwise)</li>
        <li><code>(turtle-direction t)</code> - return the turtle's current facing</li>
</ul>
<h3>Drawing:</h3>
<ul>
        <li><code>(lift-pen! t)</code> - lift the turtle's pen and stop drawing</li>
        <li><code>(drop-pen! t)</code> - drop the turtle's pen and start drawing again</li>
        <li><code>(pen-up/down? t)</code> - return either <code>up</code> if the pen is up or <code>down</code> if it's down</li>
        <li><code>(set-pen-color! t c)</code> - set the turtle's pen's color; colors can be accessed from <code>(c211 image)</code></li>
        <li><code>(pen-color t)</code> - access the turtle's pen's current color as a color from <code>(c211 image)</code></li>
</ul>
<h3>Output:</h3>
<ul>
        <li><code>(draw-turtle t)</code> - draw the turtle and any turtles <code>split</code> from it to the screen; if this turtle was the result of a split, its parent will not be drawn</li>
        <li><code>turtle->image</code> - convert the turtle to an image from <code>(c211 image)</code>, <code>(draw-turtle t)</code> is equivalent to <code>(draw-image (turtle->image t))</code></li>
</ul>
<div>
<h3>Useful macros:</h3>
<ul>
        <li><code>(block t cmds ...)</code> - save the turtle's current state then execute a series of commands; then reset the turtle to the stored state</li>
        <li><code>(repeat n cmds ...)</code> - repeat a series of commands n times; does not restore turtle state</li>
</ul>
</div>
<p>To use the turtle graphics library, you will have to import it with <code>(import (c211 turtle))</code>. After that, just give the above commands a try.</p>
<h2>Examples</h2>
<p>Here are some interesting turtles that I've written/translated from the <a href="https://en.wikipedia.org/wiki/Wikipedia_page on L-Systems">L-system</a>.</p>
<h2>Box:</h2>
<p>To start out with, a simple box. This shows how to move, how to turn, and how to use the <code>repeat</code> macro. In this example and all of the following ones, a new turtle is hatched when calling the function and returned at the end. The functions could have been written to take a turtle as an argument, alter its state, and return nothing--that's just not how I did it.</p>
<pre class="scheme"><code>(define box
  (lambda ()
    (let ([t (hatch)])
      (repeat 4
        (move! t 100)
        (turn-right! t 90))
      t)))

(draw-turtle (box))</code></pre>
<p><a href="//blog.jverkamp.com/2012/04/13/wombat-ide-turtle-graphics/box.png" data-toggle="lightbox"><img src="//blog.jverkamp.com/2012/04/13/wombat-ide-turtle-graphics/box.png" /></a></p>
<h3>Sierpinski triangle:</h3>
<p>Next, the traditional <a href="https://en.wikipedia.org/wiki/Sierpinski_triangle">Sierpinski triangle</a>. This is based on the <a href="https://en.wikipedia.org/wiki/L-systems_Wikipedia">L-system</a> page, using function calls for the recursive generating function. The original two inverse calls have been combined into the single loop, using the sign of the variable <code>d</code> to control which way the rotation is currently going.</p>
<pre class="scheme"><code>(define sierpinski
  (lambda (n)
    (let ([t (hatch)])
      (turn-right! t 30)
      (let loop ([i 0] [d 60])
        (if (= i n)
            (begin
              (set-pen-color! t
                (color 0 0 (mod (+ (color-ref
                                     (pen-color t)
                                     'blue)
                                   (random 10))
                             256)))
              (move! t 20))
            (begin
              (loop (+ i 1) (- d))
              (turn-right! t d)
              (loop (+ i 1) d)
              (turn-right! t d)
              (loop (+ i 1) (- d)))))
      t)))

(draw-turtle (sierpinski 5))</code></pre>
<p><a href="//blog.jverkamp.com/2012/04/13/wombat-ide-turtle-graphics/triangle.png" data-toggle="lightbox"><img src="//blog.jverkamp.com/2012/04/13/wombat-ide-turtle-graphics/triangle.png" /></a></p>
<h3>Recursive tree:</h3>
<p>A simple tree that starts with a single turtle and <code>split</code>s into two additional turtles at each iteration. Using a proper rendering (which I haven't actually written yet), you could see all of the branches expanding outwards in parallel.</p>
<pre class="scheme"><code>(define tree
  (lambda (n)
    (let ([t (hatch)])
      (let loop ([i 0] [t t])
        (when (&lt; i n)
          (set-pen-color! t (color 0 (+ 128 (random 128)) 0))
          (move! t 50)
          (let ([l (split t)]
                [r (split t)])
            (loop (+ i 1) t)
            (turn-left! l (random 45))
            (loop (+ i 1) l)
            (turn-right! r (random 45))
            (loop (+ i 1) r))))
      t)))

(draw-turtle (tree 5))</code></pre>
<p><a href="//blog.jverkamp.com/2012/04/13/wombat-ide-turtle-graphics/tree.png" data-toggle="lightbox"><img src="//blog.jverkamp.com/2012/04/13/wombat-ide-turtle-graphics/tree.png" /></a></p>
<h3>Recursive star:</h3>
<p>Rather than using <code>split</code> as the tree above does, this star uses a combination of <code>repeat</code> (to get the multiple arms) and <code>block</code> (to reset to the center for new extension).</p>
<pre class="scheme"><code>(define star
  (lambda (p n)
    (let ([t (hatch)])
      (let loop ([i 0] [d 100])
        (when (&lt; i n)
          (set-pen-color! t (color 0 (div (* 255 i) n) 0))
          (repeat p
            (turn-right! t (/ 360 p))
            (block t
              (move! t d)
              (loop (+ i 1) (/ d 2))))))
      t)))

(draw-turtle (star 5 3))</code></pre>
<p><a href="//blog.jverkamp.com/2012/04/13/wombat-ide-turtle-graphics/star.png" data-toggle="lightbox"><img src="//blog.jverkamp.com/2012/04/13/wombat-ide-turtle-graphics/star.png" /></a></p>
<h3>Dragon fractal:</h3>
<p>This is a pretty fractal translated almost directly from the <a href="https://en.wikipedia.org/wiki/L-System">L-System</a> Wikipedia page. Each recursive level became a function directly this time. The coloring is randomly selected tones from yellow to red.</p>
<pre class="scheme"><code>(define dragon
  (lambda (n)
  (let ([t (hatch)]
        [angle 90]
        [distance 10])
    (define (f)
      (set-pen-color! t
        (let* ([r (+ 128 (random 128))]
               [g (min r (random 255))]
               [b 0])
          (color r g b)))
      (move! t distance))
    (define (x i)
      (when (&lt; i n)
        (x (+ i 1))
        (turn-right! t angle)
        (y (+ i 1))
        (f)))
    (define (y i)
      (when (&lt; i n)
        (f)
        (x (+ i 1))
        (turn-left! t angle)
        (y (+ i 1))))
    (turn-left! t 90)
    (move! t distance)
    (x 0)
    t)))

(draw-turtle (dragon 12))</code></pre>
<p><a href="//blog.jverkamp.com/2012/04/13/wombat-ide-turtle-graphics/dragon-e1339825044657.png" data-toggle="lightbox"><img src="//blog.jverkamp.com/2012/04/13/wombat-ide-turtle-graphics/dragon-e1339825044657.png" /></a></p>
<p>&nbsp;</p>
                </div>
                <div class="entry-footnotes">
                        <div id="footnotes"><ol></ol></div>
                </div>

                <div id="disqus_thread"></div>
<script type="text/javascript">
var disqus_shortname = "jverkamp";
var disqus_title = "Wombat IDE - Turtle graphics";
var disqus_url = "http://blog.jverkamp.com/2012/04/13/wombat-ide-turtle-graphics/";
/* * * DON'T EDIT BELOW THIS LINE * * */
(function() {
  var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
  dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js';
  (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
})();
</script>
<noscript>Please enable JavaScript to view the <a href="http://disqus.com/?ref_noscript">comments powered by Disqus.</a></noscript>
<a href="http://disqus.com" class="dsq-brlink">comments powered by <span class="logo-disqus">Disqus</span></a>
        </article>

        <footer class="container" role="contentinfo">
                <nav class="navbar navbar-default" role="navigation"><ul class="nav navbar-nav nav-justified"><li><a href="//blog.jverkamp.com/2012/04/12/wombat-ide-a-pile-of-features-and-bugs">← Wombat IDE - A pile of features and bugs</a></li><li><a href="//blog.jverkamp.com/category/archives">Archives</a></li><li><a href="//blog.jverkamp.com/2012/04/13/wombat-ide-animated-turtles">Wombat IDE - Animated turtles →</a></li></ul><ul class="nav navbar-nav nav-justified"><li><a href="//blog.jverkamp.com/2012/04/12/wombat-ide-a-pile-of-features-and-bugs">← Wombat IDE - A pile of features and bugs</a></li><li><a href="//blog.jverkamp.com/category/programming">Programming</a></li><li><a href="//blog.jverkamp.com/2012/04/13/wombat-ide-animated-turtles">Wombat IDE - Animated turtles →</a></li></ul></nav>

                <div class="legal">
                        <a href="//blog.jverkamp.com/feed/atom.xml">feed <img style="border: 0;" src="//blog.jverkamp.com/rss.png" /></a><br />
                        All posts unless otherwise mentioned are licensed under <a rel="license" href="http://creativecommons.org/licenses/by-nc-sa/3.0/deed.en_US"><img alt="Creative Commons License" style="border-width:0" src="http://i.creativecommons.org/l/by-nc-sa/3.0/80x15.png" /></a><br />
                        Any source code unless otherwise mentioned is licensed under the <a href="http://directory.fsf.org/wiki/License:BSD_3Clause">3 clause BSD license</a>
                </div>
        </footer>

<script>
(function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
(i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
m=s.getElementsByTagName(o)[0];a.defer=1;a.src=g;m.parentNode.insertBefore(a,m)
})(window,document,'script','//www.google-analytics.com/analytics.js','ga');

ga('create', 'UA-53688146-1', 'auto');
ga('send', 'pageview');
</script>
</body>
</html>