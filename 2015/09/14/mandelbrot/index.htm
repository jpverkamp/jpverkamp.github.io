<!DOCTYPE html>
<html>
<head>
        
        

        <title>Mandelbrot | jverkamp.com | John-Paul Verkamp</title>

        <script src="//ajax.googleapis.com/ajax/libs/jquery/1.11.0/jquery.min.js" defer></script>
        <script src="//code.jquery.com/ui/1.11.1/jquery-ui.min.js" defer></script>

        <link rel="stylesheet" href="//netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css" defer />
        <link rel="stylesheet" href="//netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap-theme.min.css" defer />
        <script src="//netdna.bootstrapcdn.com/bootstrap/3.1.1/js/bootstrap.min.js" defer></script>

        <link rel="stylesheet" href="//cdnjs.cloudflare.com/ajax/libs/ekko-lightbox/3.0.3a/ekko-lightbox.min.css" defer />
        <script src="//cdnjs.cloudflare.com/ajax/libs/ekko-lightbox/3.0.3a/ekko-lightbox.min.js" defer></script>

        <script src="//cdnjs.cloudflare.com/ajax/libs/jquery.transit/0.9.9/jquery.transit.min.js" defer></script>

        <!-- Highlight.js for syntax highlighting -->
        <link rel="stylesheet" href="/highlight/styles/obsidian.css" defer />
        <script src="/highlight/highlight.pack.js" defer></script>

        <!-- MathJax for LaTeX support -->
        <script src="//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML" defer></script>

        <!-- nanoGallery for Flickr Galleries -->
        <link rel="stylesheet" href="//cdnjs.cloudflare.com/ajax/libs/nanogallery/4.4.2/css/themes/light/nanogallery_light.css" defer />
        <script type="text/javascript" src="//cdnjs.cloudflare.com/ajax/libs/nanogallery/4.4.2/jquery.nanogallery.min.js" defer ></script>

        <!-- Pretty pretty fonts -->
        <link rel="stylesheet" type="text/css" href="//fonts.googleapis.com/css?family=Calligraffitti" defer />

        <!-- Any custom CSS or JS that I've written; this should be kept minimal -->
        <link rel="stylesheet" href="/custom.css" defer />
        <script src="/custom.js" defer></script>

        <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
        <link rel="alternate" type="application/atom+xml" title="jverkamp.com (Atom 2.0)" href="//blog.jverkamp.com/feed/" />
</head>
<body>
        <header class="container">
        <nav class="navbar navbar-default" role="navigation">
  <div class="container-fluid">
    <!-- Brand and toggle get grouped for better mobile display -->
    <div class="navbar-header">
      <button type="button" class="navbar-toggle" data-toggle="collapse" data-target="#bs-example-navbar-collapse-1">
        <span class="sr-only">Toggle navigation</span>
        <span class="icon-bar"></span>
        <span class="icon-bar"></span>
        <span class="icon-bar"></span>
      </button>
      <a class="navbar-brand" href="//blog.jverkamp.com"><span style="color: green;">jv</span>erkamp.com</a>
    </div>

    <!-- Collect the nav links, forms, and other content for toggling -->
    <div class="collapse navbar-collapse" id="bs-example-navbar-collapse-1">
      <ul class="nav navbar-nav"><li class="dropdown"><a href="//blog.jverkamp.com/category/archives" class="dropdown-toggle">Archives<span class="caret"></span></a><ul class="dropdown-menu"><li><a href="//blog.jverkamp.com/category/archives/2004">2004</a></li><li><a href="//blog.jverkamp.com/category/archives/2005">2005</a></li><li><a href="//blog.jverkamp.com/category/archives/2006">2006</a></li><li><a href="//blog.jverkamp.com/category/archives/2007">2007</a></li><li><a href="//blog.jverkamp.com/category/archives/2008">2008</a></li><li><a href="//blog.jverkamp.com/category/archives/2009">2009</a></li><li><a href="//blog.jverkamp.com/category/archives/2010">2010</a></li><li><a href="//blog.jverkamp.com/category/archives/2011">2011</a></li><li><a href="//blog.jverkamp.com/category/archives/2012">2012</a></li><li><a href="//blog.jverkamp.com/category/archives/2013">2013</a></li><li><a href="//blog.jverkamp.com/category/archives/2014">2014</a></li><li><a href="//blog.jverkamp.com/category/archives/2015">2015</a></li><li><a href="//blog.jverkamp.com/category/archives/2016">2016</a></li></ul></li><li class="dropdown"><a href="//blog.jverkamp.com/category/other" class="dropdown-toggle">Other<span class="caret"></span></a><ul class="dropdown-menu"><li><a href="//blog.jverkamp.com/category/other/board-game-reviews">Board Game Reviews</a></li><li><a href="//blog.jverkamp.com/category/other/book-reviews">Book Reviews</a></li><li><a href="//blog.jverkamp.com/category/other/cooking">Cooking</a></li><li><a href="//blog.jverkamp.com/category/other/movie-reviews">Movie Reviews</a></li></ul></li><li class="dropdown"><a href="//blog.jverkamp.com/category/photography" class="dropdown-toggle">Photography<span class="caret"></span></a><ul class="dropdown-menu"><li><a href="//blog.jverkamp.com/category/photography/dp-challenge">DP Challenge</a></li><li><a href="//blog.jverkamp.com/category/photography/photosets">Photosets</a></li><li><a href="//blog.jverkamp.com/category/photography/photosynth">Photosynth</a></li></ul></li><li class="dropdown"><a href="//blog.jverkamp.com/category/programming" class="dropdown-toggle">Programming<span class="caret"></span></a><ul class="dropdown-menu"><li><a href="//blog.jverkamp.com/category/programming/by-language">By Language</a></li><li><a href="//blog.jverkamp.com/category/programming/by-project">By Project</a></li><li><a href="//blog.jverkamp.com/category/programming/by-source">By Source</a></li><li><a href="//blog.jverkamp.com/category/programming/by-topic">By Topic</a></li><li><a href="//blog.jverkamp.com/category/programming/libraries">Libraries</a></li></ul></li><li class="dropdown"><a href="//blog.jverkamp.com/category/research" class="dropdown-toggle">Research<span class="caret"></span></a><ul class="dropdown-menu"><li><a href="//blog.jverkamp.com/category/research/by-topic">By Topic</a></li><li><a href="//blog.jverkamp.com/category/research/publications">Publications</a></li></ul></li><li class="dropdown"><a href="//blog.jverkamp.com/category/writing" class="dropdown-toggle">Writing<span class="caret"></span></a><ul class="dropdown-menu"><li><a href="//blog.jverkamp.com/category/writing/by-genre">By Genre</a></li><li><a href="//blog.jverkamp.com/category/writing/ideas">Ideas</a></li><li><a href="//blog.jverkamp.com/category/writing/nanowrimo">NaNoWriMo</a></li><li><a href="//blog.jverkamp.com/category/writing/novels">Novels</a></li><li><a href="//blog.jverkamp.com/category/writing/other">Other</a></li><li><a href="//blog.jverkamp.com/category/writing/short-stories">Short Stories</a></li><li><a href="//blog.jverkamp.com/category/writing/writing-excuses">Writing Excuses</a></li></ul></li></ul>

      <form action="//www.google.com/search" method="get" onSubmit="(function(obj){obj.q.value='site:blog.jverkamp.com '+obj.qfront.value;})(this)" class="navbar-form navbar-right" role="search">
        <div class="form-group">
          <input name="q" type="hidden" />
          <input name="qfront" type="text" class="form-control" placeholder="Search" />
          <button type="submit" class="btn btn-default" value="Search">Search</button>
        </p>
      </form>
    </div><!-- /.navbar-collapse -->
  </div><!-- /.container-fluid -->
</nav>
        </header>

        <article class="container">
                <header>
                        <h1 class="entry-title">Mandelbrot</h1>

                        <div class="entry-meta">
                                <span class="posted-on"><time class="entry-date" datetime="2015-09-14"><span class="year">2015</span> <span class="month">Sept</span> <span class="day">14</span></time></span>
                                <span class="tags"><ul class="tag-list list-inline"><li><a href="//blog.jverkamp.com/category/programming/by-topic/mathematics/fractals">Fractals</a></li><li><a href="//blog.jverkamp.com/category/programming/by-topic/graphics">Graphics</a></li><li><a href="//blog.jverkamp.com/category/programming">Programming</a></li><li><a href="//blog.jverkamp.com/category/programming/by-language/python">Python</a></li></ul></span>
                        </div>

                        <hr />
                </header>
                <div class="entry-content">
                        <p>Perhaps the best known fractal of all: the <a href="https://en.wikipedia.org/wiki/Mandelbrot_set">Mandelbrot set</a>.</p>
<p><a href="//blog.jverkamp.com/2015/09/14/mandelbrot/mandelbrot_default_400x300_hot-and-cold.png" data-toggle="lightbox"><img src="//blog.jverkamp.com/2015/09/14/mandelbrot/mandelbrot_default_400x300_hot-and-cold.png" /></a></p>
<p>Since I was already working on Python code that would render an image given a function (for a future post), I figured that I might as well render fractals with it.</p>
<!--more-->
<p>The basic idea is simple. Use <a href="https://python-pillow.github.io/">pillow</a> (the successor <a href="http://www.pythonware.com/products/pil/">PIL</a>), create an empty image of a given size. Then, call a given function for each point in that image, passing the <code>x</code> and <code>y</code> coordinates of the function as parameters. Basically, the <code><a href="http://docs.racket-lang.org/search/index.html?q=build-flomap*">build-flomap*</a></code> function I use all the time in Racket.</p>
<p>It turns out, that's actually really straight forward:</p>
<pre class="python"><code>def generate_image(width, height, generator):
    '''
    Generate an RGB image using a generator function.

    width, height -- the size of the generated image
    generator -- a function that takes (x, y) and returns (r, g, b)
    '''

    # Generate the data as a row-major list of (r, g, b)
    data = [generator(x, y) for y in range(height) for x in range(width)]

    # Pack that into a Pillow image and return it
    img = PIL.Image.new('RGB', (width, height))
    img.putdata(data)
    return img</code></pre>
<p>I like that you can have multiple <code>for</code> statements in a generator like that. It's very similiar to the different forms of Racket's <code><a href="http://docs.racket-lang.org/search/index.html?q=for">for</a></code><span class="footnote"><sup><a href="#footnote-1">[1]</a></sup></span>, but I always seem to forget that I can do that in Python.</p>
<p>One downside of this is that it's relatively slow (at least on the big multi-core machines we have now). Luckily, we can use the <code><a href="https://docs.python.org/2/library/multiprocessing.html">multiprocessing</a></code> module to speed things up:</p>
<pre class="python"><code>def generate_image(width, height, generator, threads = 1):
    '''
    Generate an RGB image using a generator function.

    width, height -- the size of the generated image
    generator -- a function that takes (x, y) and returns (r, g, b)
    threads -- if != 1, use multiprocessing to spawn this many processes
    '''

    # Generate the data as a row-major list of (r, g, b)
    if threads == 1:
        data = [generator(x, y) for y in range(height) for x in range(width)]
    else:
        pool = multiprocessing.Pool(threads)
        data = pool.starmap(generator, [(x, y) for y in range(height) for x in range(width)])

    # Pack that into a Pillow image and return it
    img = PIL.Image.new('RGB', (width, height))
    img.putdata(data)
    return img</code></pre>
<p>By using <code>multiprocessing</code> rather than <code>threading</code>, we are actually spawning multiple Python processes, so we get a true multithreaded speedup. Since this program is almost entirely CPU bound, <code>threading</code> (with Python's <a href="https://en.wikipedia.org/wiki/global_interpreter lock">global interpreter lock</a>) wouldn't actually be any faster.</p>
<p>An aside: Using <code>starmap</code> allows us to pass multiple parameters to the function we are mapping over. This was only introduced in Python 2.6 / 3.3, so make sure you have a sufficiently new version<span class="footnote"><sup><a href="#footnote-2">[2]</a></sup></span>.</p>
<p>With that, we can make some pretty pictures like I'm sure I've shown off before<span class="footnote"><sup><a href="#footnote-3">[3]</a></sup></span>.</p>
<pre class="python"><code>generate_image(
    400,
    300,
    lambda x, y: (
        (x * y) % 256,
        (x + y) % 256,
        max(x, y) % 256
    )
).save('sample.png')</code></pre>
<p><a href="//blog.jverkamp.com/2015/09/14/mandelbrot/sample.png" data-toggle="lightbox"><img src="//blog.jverkamp.com/2015/09/14/mandelbrot/sample.png" /></a></p>
<p>Yes, I realize that's not the most Pythonic code in the world. And because the body of a Python <code>lambda</code> has to be an expression, you cannot write nearly as complicated functions as you could in Racket. It's perfectly valid though. :)</p>
<p>Okay, so we have a way to generate images, let's use it to generate Mandelbrot sets. The basic idea of the Mandelbrot set is surprisingly simple<span class="footnote"><sup><a href="#footnote-4">[4]</a></sup></span>:</p>
<p>Given a complex number <span>\( \mathbb{C} \)</span>, the <a href="https://en.wikipedia.org/wiki/complex_number">complex</a> <a href="https://en.wikipedia.org/wiki/quadratic_polynomial">quadratic polynomial</a>:</p>
<div>$$\mathbb{Z}_n+1 = \mathbb{Z}_n^2 + \mathbb{C}$$</div>
<p>Either does or does not escape to infinity. If the result remains bounded as <span>\( n \to \infty \)</span>, the number is part of the Mandelbrot set. If not, it's not. Because Python has built in support for complex numbers, this code is fairly elegant:</p>
<pre class="python"><code>def make_mandelbrot_generator(width, height, center, size, max_iterations = 256):
        '''
        A generator that makes generate_image compatible mandelbrot generators.

        width, height -- the size of the resulting image (used for scale)
        center -- the focus point of the image
        size -- the size of the larger dimension
        max_iterations -- the scale to check before exploding, used for coloring
        '''

        # Scale the size so that is the size of the larger dimension
        if width &gt;= height:
            size_x = size
            size_y = size * height / width
        else:
            size_x = size * width / height
            size_y = size

        # Convert to a bounding box
        min_x = center[0] - size_x / 2
        max_x = center[0] + size_x / 2
        min_y = center[1] - size_y / 2
        max_y = center[1] + size_y / 2

        def generator(x, y):
            # Scale to the mandlebrot frame; convert to a complex number
            x = (x / width) * (max_x - min_x) + min_x
            y = (y / height) * (max_y - min_y) + min_y
            c = x + y * 1j

            # Iterate until we escape to infinity or run out of iterations
            # For our purposes, we can consider infinity = 2
            z = 0
            for iteration in range(max_iterations):
                z = z * z + c

                # Size is r of polar coordinates
                (r, phi) = cmath.polar(z)
                if r &gt; 2:
                    break

            g = int(256 * iteration / max_iterations)
            return (g, g, g)

        return generator</code></pre>
<p>I've chosen here to make a function that returns the actual color generator primarily so that we would have access to the <code>width</code> and <code>height</code> within the main function.</p>
<p>Amusingly, it's been proven that if the magnitude of <span>\(\mathbb{Z}_n\)</span> crosses 2, it will go to infinity. Since <code>r</code> is the magnitude in the <a href="https://en.wikipedia.org/wiki/polar_coordinate system">polar coordinate system</a> (<code>r</code>,<code>ϕ</code>), we can use that as an escape hatch and even as a basic way to color the output.</p>
<p>One side note: using the <code>multiprocessing</code> module, we have to be able to <code><a href="https://docs.python.org/2/library/pickle.html">pickle</a></code> any variables to the function called. Functions defined in the global scope can be pickled, but functions used directly as parameters to other functions cannot; don't ask me why.</p>
<p>So if <code>threads</code> is not 1, this does not work:</p>
<pre class="python"><code>generate_image(
    400,
    300,
    make_mandelbrot_generator(400, 300, (-0.5, 0), 3),
    threads = 4
)</code></pre>
<p>But this does:</p>
<pre class="python"><code>generator = make_mandelbrot_generator(400, 300, (-0.5, 0), 3),
generate_image(400, 300, generator, threads = 4)</code></pre>
<p>Weird.</p>
<p>Anyways, what do we get when we try it out?</p>
<p><a href="//blog.jverkamp.com/2015/09/14/mandelbrot/mandelbrot_default_400x300_grayscale.png" data-toggle="lightbox"><img src="//blog.jverkamp.com/2015/09/14/mandelbrot/mandelbrot_default_400x300_grayscale.png" /></a></p>
<p>Beautiful<span class="footnote"><sup><a href="#footnote-5">[5]</a></sup></span>!</p>
<p>We need some color. Let's introduce one more parameter to the <code>make_mandelbrot_generator</code> function: <code>coloring</code>. Basically, a function that takes in a number in the range <code>[0, 1]</code> (which we're already computing; that is <code>iteration / max_iterations</code>) and return an RGB color. That way, we can have some more interesting colorations.</p>
<p>For example, the grayscale coloring function from earlier:</p>
<pre class="python"><code>def grayscale(v):
    '''Simple grayscale value.'''

    g = int(256 * v)
    return (g, g, g)</code></pre>
<p>Or how about instead, we render something in blue and red. Start at black, then fade up the blue channel, crossfade to red in the next third, and fade back to black in the last:</p>
<pre class="python"><code>def hot_and_cold(v):
    '''Scale from black to blue to red and back to black.'''

    r = g = b = 0

    if v &lt; 1/3:
        v = 3 * v
        b = int(256 * v)
    elif v &lt; 2/3:
        v = 3 * (v - 1/3)
        r = int(256 * v)
        b = int(256 * (1 - v))
    else:
        v = 3 * (v - 2/3)
        r = int(256 * (1 - v))

    return (r, g, b)</code></pre>
<p>Let's render that one instead:</p>
<pre class="python"><code>generator = make_mandelbrot_generator(400, 300, (-0.5, 0), 3),
generate_image(400, 300, generator, threads = 4, coloring = hot_and_cold)</code></pre>
<p><a href="//blog.jverkamp.com/2015/09/14/mandelbrot/mandelbrot_default_400x300_hot-and-cold.png" data-toggle="lightbox"><img src="//blog.jverkamp.com/2015/09/14/mandelbrot/mandelbrot_default_400x300_hot-and-cold.png" /></a></p>
<p>Excellent. We have a simple Mandelbrot generator. It's not exactly what I set out to do for this post (really only the <code>generate_image</code> function is), but I think it's pretty cool.</p>
<p>As a bonus round, I made something of a basic testing framework:</p>
<pre class="python"><code>THREAD_COUNT = max(1, multiprocessing.cpu_count() - 1)

SIZES = [
    (400, 300),
    (1920, 1080)
]

COLORINGS = [
    ('grayscale', grayscale),
    ('hot-and-cold', hot_and_cold),
]

IMAGES = [
    ('default', (-0.5, 0), 3),
    # http://www.nahee.com/Derbyshire/manguide.html
    ('seahorse-valley', (-0.75, 0.1), 0.05),
    ('triple-spiral-valley', (0.088, 0.654), 0.25),
    ('quad-spiral-valley', (0.274, 0.482), 0.005),
    ('double-scepter-valley', (-0.1, 0.8383), 0.005),
    ('mini-mandelbrot', (-1.75, 0), 0.1),

]

for width, height in SIZES:
    for image_name, center, size in IMAGES:
        for coloring_name, coloring in COLORINGS:
            filename = os.path.join('{width}x{height}', 'mandelbrot_{name}_{width}x{height}_{coloring}.png')
            filename = filename.format(
                name = image_name,
                width = width,
                height = height,
                coloring = coloring_name,
            )
            generator = make_mandelbrot_generator(width, height, center, size, coloring = coloring)

            start = time.time()
            img = generate_image(
                width,
                height,
                generator,
                threads = THREAD_COUNT
            )
            end = time.time()

            if not os.path.exists(os.path.dirname(filename)):
                os.makedirs(os.path.dirname(filename))
            img.save(filename)

            print('{} generated in {} seconds with {} threads'.format(
                filename,
                end - start,
                THREAD_COUNT
            ))</code></pre>
<p><code>multiprocessing.cpu_count() - 1</code> means that I leave one processor for other work (I was having issues with my computer freazing, <code>multiprocessing</code> is good at that). Other than that, generate a bunch of images and shove them into directories by size.</p>
<p>Here are a few examples from <a href="http://www.nahee.com/Derbyshire/manguide.html">nahee.com</a>:</p>
<h3>Seahorse Valley<h3>
<a href="//blog.jverkamp.com/2015/09/14/mandelbrot/mandelbrot_seahorse-valley_400x300_hot-and-cold.png" data-toggle="lightbox"><img src="//blog.jverkamp.com/2015/09/14/mandelbrot/mandelbrot_seahorse-valley_400x300_hot-and-cold.png" /></a>

<h3>Double Scepter Valley</h3>
<p><a href="//blog.jverkamp.com/2015/09/14/mandelbrot/mandelbrot_double-scepter-valley_400x300_hot-and-cold.png" data-toggle="lightbox"><img src="//blog.jverkamp.com/2015/09/14/mandelbrot/mandelbrot_double-scepter-valley_400x300_hot-and-cold.png" /></a></p>
<h3>Triple Spiral Valley</h3>
<p><a href="//blog.jverkamp.com/2015/09/14/mandelbrot/mandelbrot_triple-spiral-valley_400x300_hot-and-cold.png" data-toggle="lightbox"><img src="//blog.jverkamp.com/2015/09/14/mandelbrot/mandelbrot_triple-spiral-valley_400x300_hot-and-cold.png" /></a></p>
<h3>Quad Spiral Valley</h3>
<p><a href="//blog.jverkamp.com/2015/09/14/mandelbrot/mandelbrot_quad-spiral-valley_400x300_hot-and-cold.png" data-toggle="lightbox"><img src="//blog.jverkamp.com/2015/09/14/mandelbrot/mandelbrot_quad-spiral-valley_400x300_hot-and-cold.png" /></a></p>
<h3>Mini Mandelbrot</h3>
<p><a href="//blog.jverkamp.com/2015/09/14/mandelbrot/mandelbrot_mini-mandelbrot_400x300_hot-and-cold.png" data-toggle="lightbox"><img src="//blog.jverkamp.com/2015/09/14/mandelbrot/mandelbrot_mini-mandelbrot_400x300_hot-and-cold.png" /></a></p>
<p>Or how about one nice large one (right click, save as):</p>
<p><a href="//blog.jverkamp.com/2015/09/14/mandelbrot/mandelbrot_seahorse-valley_1920x1080_hot-and-cold.png" data-toggle="lightbox"><img src="//blog.jverkamp.com/2015/09/14/mandelbrot/mandelbrot_seahorse-valley_1920x1080_hot-and-cold.png" /></a></p>
<p>So much detail!</p>
<p>Enjoy!</p>
                </div>
                <div class="entry-footnotes">
                        <div id="footnotes"><ol><li><a name="footnote-1"></a>The <a href="http://www.call-cc.org/">chicken</a> or the <a href="https://wiki.python.org/moin/egg">egg</a>?</li><li><a name="footnote-2"></a>Use Python 3. The more people that use it, the less we'll have issues with split-version libraries.</li><li><a name="footnote-3"></a><a href="//blog.jverkamp.com/2015/01/01/generating-omnichromatic-images">Generating omnichromatic images</a> as an example</li><li><a name="footnote-4"></a>or at least concise to explain</li><li><a name="footnote-5"></a>Or at least elegant</li></ol></div>
                </div>

                <div id="disqus_thread"></div>
<script type="text/javascript">
var disqus_shortname = "jverkamp";
var disqus_title = "Mandelbrot";
var disqus_url = "http://blog.jverkamp.com/2015/09/14/mandelbrot/";
/* * * DON'T EDIT BELOW THIS LINE * * */
(function() {
  var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
  dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js';
  (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
})();
</script>
<noscript>Please enable JavaScript to view the <a href="http://disqus.com/?ref_noscript">comments powered by Disqus.</a></noscript>
<a href="http://disqus.com" class="dsq-brlink">comments powered by <span class="logo-disqus">Disqus</span></a>
        </article>

        <footer class="container" role="contentinfo">
                <nav class="navbar navbar-default" role="navigation"><ul class="nav navbar-nav nav-justified"><li><a href="//blog.jverkamp.com/2015/09/11/writing-excuses-10-6-second-place">← Writing Excuses 10.6: Second Place</a></li><li><a href="//blog.jverkamp.com/category/archives">Archives</a></li><li><a href="//blog.jverkamp.com/2015/09/15/accidental-adventure">Accidental Adventure →</a></li></ul><ul class="nav navbar-nav nav-justified"><li><a href="//blog.jverkamp.com/2015/09/08/backing-up-github-repositories">← Backing up GitHub repositories</a></li><li><a href="//blog.jverkamp.com/category/programming">Programming</a></li><li><a href="//blog.jverkamp.com/2015/10/29/takuzu-solver">Takuzu solver →</a></li></ul></nav>

                <div class="legal">
                        <a href="//blog.jverkamp.com/feed/atom.xml">feed <img style="border: 0;" src="//blog.jverkamp.com/rss.png" /></a><br />
                        All posts unless otherwise mentioned are licensed under <a rel="license" href="//creativecommons.org/licenses/by-nc-sa/3.0/deed.en_US"><img alt="Creative Commons License" style="border-width:0" src="//i.creativecommons.org/l/by-nc-sa/3.0/80x15.png" /></a><br />
                        Any source code unless otherwise mentioned is licensed under the <a href="//directory.fsf.org/wiki/License:BSD_3Clause">3 clause BSD license</a>
                </div>
        </footer>

<script>
(function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
(i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
m=s.getElementsByTagName(o)[0];a.defer=1;a.src=g;m.parentNode.insertBefore(a,m)
})(window,document,'script','//www.google-analytics.com/analytics.js','ga');

ga('create', 'UA-53688146-1', 'auto');
ga('send', 'pageview');
</script>
</body>
</html>