<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="374" onload="init(evt)" viewBox="0 0 1200 374" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="374" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="357.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1190" y="24.00">Search</text><text id="matched" x="1190" y="357.00"> </text><svg id="frames" x="10" width="1180" total_samples="6265"><g><title>wormwood`DYLD-STUB$$fcntl (1 samples, 0.02%)</title><rect x="0.0000%" y="277" width="0.0160%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="1"/><text x="0.2500%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`_free (6 samples, 0.10%)</title><rect x="0.0160%" y="229" width="0.0958%" height="15" fill="rgb(217,0,24)" fg:x="1" fg:w="6"/><text x="0.2660%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`_free (5 samples, 0.08%)</title><rect x="0.1277%" y="213" width="0.0798%" height="15" fill="rgb(221,193,54)" fg:x="8" fg:w="5"/><text x="0.3777%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.02%)</title><rect x="0.2075%" y="213" width="0.0160%" height="15" fill="rgb(248,212,6)" fg:x="13" fg:w="1"/><text x="0.4575%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (11 samples, 0.18%)</title><rect x="0.2235%" y="213" width="0.1756%" height="15" fill="rgb(208,68,35)" fg:x="14" fg:w="11"/><text x="0.4735%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_szone_free (1 samples, 0.02%)</title><rect x="0.3990%" y="213" width="0.0160%" height="15" fill="rgb(232,128,0)" fg:x="25" fg:w="1"/><text x="0.6490%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (8 samples, 0.13%)</title><rect x="0.4150%" y="213" width="0.1277%" height="15" fill="rgb(207,160,47)" fg:x="26" fg:w="8"/><text x="0.6650%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (5 samples, 0.08%)</title><rect x="0.4629%" y="197" width="0.0798%" height="15" fill="rgb(228,23,34)" fg:x="29" fg:w="5"/><text x="0.7129%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc_type (1 samples, 0.02%)</title><rect x="0.5427%" y="213" width="0.0160%" height="15" fill="rgb(218,30,26)" fg:x="34" fg:w="1"/><text x="0.7927%" y="223.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (5 samples, 0.08%)</title><rect x="0.5587%" y="213" width="0.0798%" height="15" fill="rgb(220,122,19)" fg:x="35" fg:w="5"/><text x="0.8087%" y="223.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (5 samples, 0.08%)</title><rect x="0.6385%" y="213" width="0.0798%" height="15" fill="rgb(250,228,42)" fg:x="40" fg:w="5"/><text x="0.8885%" y="223.50"></text></g><g><title>wormwood`&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (3 samples, 0.05%)</title><rect x="0.7183%" y="213" width="0.0479%" height="15" fill="rgb(240,193,28)" fg:x="45" fg:w="3"/><text x="0.9683%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`DYLD-STUB$$_platform_memset (1 samples, 0.02%)</title><rect x="7.6457%" y="197" width="0.0160%" height="15" fill="rgb(216,20,37)" fg:x="479" fg:w="1"/><text x="7.8957%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_free (2 samples, 0.03%)</title><rect x="7.6616%" y="197" width="0.0319%" height="15" fill="rgb(206,188,39)" fg:x="480" fg:w="2"/><text x="7.9116%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (11 samples, 0.18%)</title><rect x="7.6935%" y="197" width="0.1756%" height="15" fill="rgb(217,207,13)" fg:x="482" fg:w="11"/><text x="7.9435%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (17 samples, 0.27%)</title><rect x="7.8691%" y="197" width="0.2713%" height="15" fill="rgb(231,73,38)" fg:x="493" fg:w="17"/><text x="8.1191%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free_small (1 samples, 0.02%)</title><rect x="8.1405%" y="197" width="0.0160%" height="15" fill="rgb(225,20,46)" fg:x="510" fg:w="1"/><text x="8.3905%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`get_tiny_previous_free_msize (2 samples, 0.03%)</title><rect x="8.2203%" y="181" width="0.0319%" height="15" fill="rgb(210,31,41)" fg:x="515" fg:w="2"/><text x="8.4703%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (6 samples, 0.10%)</title><rect x="8.4916%" y="165" width="0.0958%" height="15" fill="rgb(221,200,47)" fg:x="532" fg:w="6"/><text x="8.7416%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (40 samples, 0.64%)</title><rect x="8.1564%" y="197" width="0.6385%" height="15" fill="rgb(226,26,5)" fg:x="511" fg:w="40"/><text x="8.4064%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (34 samples, 0.54%)</title><rect x="8.2522%" y="181" width="0.5427%" height="15" fill="rgb(249,33,26)" fg:x="517" fg:w="34"/><text x="8.5022%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (13 samples, 0.21%)</title><rect x="8.5874%" y="165" width="0.2075%" height="15" fill="rgb(235,183,28)" fg:x="538" fg:w="13"/><text x="8.8374%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc_type (34 samples, 0.54%)</title><rect x="8.7949%" y="197" width="0.5427%" height="15" fill="rgb(221,5,38)" fg:x="551" fg:w="34"/><text x="9.0449%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (21 samples, 0.34%)</title><rect x="9.0024%" y="181" width="0.3352%" height="15" fill="rgb(247,18,42)" fg:x="564" fg:w="21"/><text x="9.2524%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (17 samples, 0.27%)</title><rect x="9.0662%" y="165" width="0.2713%" height="15" fill="rgb(241,131,45)" fg:x="568" fg:w="17"/><text x="9.3162%" y="175.50"></text></g><g><title>libsystem_platform.dylib`__bzero (3 samples, 0.05%)</title><rect x="9.3376%" y="197" width="0.0479%" height="15" fill="rgb(249,31,29)" fg:x="585" fg:w="3"/><text x="9.5876%" y="207.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (2 samples, 0.03%)</title><rect x="9.3855%" y="197" width="0.0319%" height="15" fill="rgb(225,111,53)" fg:x="588" fg:w="2"/><text x="9.6355%" y="207.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (115 samples, 1.84%)</title><rect x="9.4174%" y="197" width="1.8356%" height="15" fill="rgb(238,160,17)" fg:x="590" fg:w="115"/><text x="9.6674%" y="207.50">l..</text></g><g><title>libsystem_platform.dylib`_platform_memset (19 samples, 0.30%)</title><rect x="11.2530%" y="197" width="0.3033%" height="15" fill="rgb(214,148,48)" fg:x="705" fg:w="19"/><text x="11.5030%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc_type (76 samples, 1.21%)</title><rect x="11.9393%" y="181" width="1.2131%" height="15" fill="rgb(232,36,49)" fg:x="748" fg:w="76"/><text x="12.1893%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (56 samples, 0.89%)</title><rect x="12.2586%" y="165" width="0.8939%" height="15" fill="rgb(209,103,24)" fg:x="768" fg:w="56"/><text x="12.5086%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (45 samples, 0.72%)</title><rect x="12.4342%" y="149" width="0.7183%" height="15" fill="rgb(229,88,8)" fg:x="779" fg:w="45"/><text x="12.6842%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (1 samples, 0.02%)</title><rect x="13.1365%" y="133" width="0.0160%" height="15" fill="rgb(213,181,19)" fg:x="823" fg:w="1"/><text x="13.3865%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (1 samples, 0.02%)</title><rect x="13.1524%" y="181" width="0.0160%" height="15" fill="rgb(254,191,54)" fg:x="824" fg:w="1"/><text x="13.4024%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`rack_get_thread_index (3 samples, 0.05%)</title><rect x="13.1844%" y="165" width="0.0479%" height="15" fill="rgb(241,83,37)" fg:x="826" fg:w="3"/><text x="13.4344%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (3 samples, 0.05%)</title><rect x="13.2322%" y="165" width="0.0479%" height="15" fill="rgb(233,36,39)" fg:x="829" fg:w="3"/><text x="13.4822%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (8 samples, 0.13%)</title><rect x="13.4557%" y="149" width="0.1277%" height="15" fill="rgb(226,3,54)" fg:x="843" fg:w="8"/><text x="13.7057%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_tiny_check_and_zero_inline_meta_from_freelist (1 samples, 0.02%)</title><rect x="14.3974%" y="133" width="0.0160%" height="15" fill="rgb(245,192,40)" fg:x="902" fg:w="1"/><text x="14.6474%" y="143.50"></text></g><g><title>wormwood`&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (184 samples, 2.94%)</title><rect x="11.5563%" y="197" width="2.9370%" height="15" fill="rgb(238,167,29)" fg:x="724" fg:w="184"/><text x="11.8063%" y="207.50">wo..</text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (83 samples, 1.32%)</title><rect x="13.1684%" y="181" width="1.3248%" height="15" fill="rgb(232,182,51)" fg:x="825" fg:w="83"/><text x="13.4184%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (76 samples, 1.21%)</title><rect x="13.2801%" y="165" width="1.2131%" height="15" fill="rgb(231,60,39)" fg:x="832" fg:w="76"/><text x="13.5301%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (57 samples, 0.91%)</title><rect x="13.5834%" y="149" width="0.9098%" height="15" fill="rgb(208,69,12)" fg:x="851" fg:w="57"/><text x="13.8334%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (5 samples, 0.08%)</title><rect x="14.4134%" y="133" width="0.0798%" height="15" fill="rgb(235,93,37)" fg:x="903" fg:w="5"/><text x="14.6634%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (5 samples, 0.08%)</title><rect x="15.2434%" y="181" width="0.0798%" height="15" fill="rgb(213,116,39)" fg:x="955" fg:w="5"/><text x="15.4934%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_calloc_type (5 samples, 0.08%)</title><rect x="15.3232%" y="181" width="0.0798%" height="15" fill="rgb(222,207,29)" fg:x="960" fg:w="5"/><text x="15.5732%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (2 samples, 0.03%)</title><rect x="15.3711%" y="165" width="0.0319%" height="15" fill="rgb(206,96,30)" fg:x="963" fg:w="2"/><text x="15.6211%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (1 samples, 0.02%)</title><rect x="15.3871%" y="149" width="0.0160%" height="15" fill="rgb(218,138,4)" fg:x="964" fg:w="1"/><text x="15.6371%" y="159.50"></text></g><g><title>libsystem_platform.dylib`__bzero (1 samples, 0.02%)</title><rect x="15.4030%" y="181" width="0.0160%" height="15" fill="rgb(250,191,14)" fg:x="965" fg:w="1"/><text x="15.6530%" y="191.50"></text></g><g><title>wormwood`&lt;wormwood::Local as solver::State&lt;wormwood::Global,solver::direction::Direction&gt;&gt;::heuristic (59 samples, 0.94%)</title><rect x="14.4932%" y="197" width="0.9417%" height="15" fill="rgb(239,60,40)" fg:x="908" fg:w="59"/><text x="14.7432%" y="207.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (1 samples, 0.02%)</title><rect x="15.4190%" y="181" width="0.0160%" height="15" fill="rgb(206,27,48)" fg:x="966" fg:w="1"/><text x="15.6690%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (3 samples, 0.05%)</title><rect x="16.3767%" y="181" width="0.0479%" height="15" fill="rgb(225,35,8)" fg:x="1026" fg:w="3"/><text x="16.6267%" y="191.50"></text></g><g><title>wormwood`&lt;wormwood::Local as solver::State&lt;wormwood::Global,solver::direction::Direction&gt;&gt;::is_solved (63 samples, 1.01%)</title><rect x="15.4350%" y="197" width="1.0056%" height="15" fill="rgb(250,213,24)" fg:x="967" fg:w="63"/><text x="15.6850%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_calloc_type (1 samples, 0.02%)</title><rect x="16.4246%" y="181" width="0.0160%" height="15" fill="rgb(247,123,22)" fg:x="1029" fg:w="1"/><text x="16.6746%" y="191.50"></text></g><g><title>wormwood`&lt;wormwood::Local as solver::State&lt;wormwood::Global,solver::direction::Direction&gt;&gt;::is_valid (1,334 samples, 21.29%)</title><rect x="16.4405%" y="197" width="21.2929%" height="15" fill="rgb(231,138,38)" fg:x="1030" fg:w="1334"/><text x="16.6905%" y="207.50">wormwood`&lt;wormwood::Local as solve..</text></g><g><title>libsystem_malloc.dylib`_free (18 samples, 0.29%)</title><rect x="37.8132%" y="181" width="0.2873%" height="15" fill="rgb(231,145,46)" fg:x="2369" fg:w="18"/><text x="38.0632%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (4 samples, 0.06%)</title><rect x="38.1006%" y="181" width="0.0638%" height="15" fill="rgb(251,118,11)" fg:x="2387" fg:w="4"/><text x="38.3506%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (10 samples, 0.16%)</title><rect x="38.1644%" y="181" width="0.1596%" height="15" fill="rgb(217,147,25)" fg:x="2391" fg:w="10"/><text x="38.4144%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`calloc (1 samples, 0.02%)</title><rect x="38.3240%" y="181" width="0.0160%" height="15" fill="rgb(247,81,37)" fg:x="2401" fg:w="1"/><text x="38.5740%" y="191.50"></text></g><g><title>wormwood`DYLD-STUB$$free (8 samples, 0.13%)</title><rect x="38.3400%" y="181" width="0.1277%" height="15" fill="rgb(209,12,38)" fg:x="2402" fg:w="8"/><text x="38.5900%" y="191.50"></text></g><g><title>wormwood`__rdl_alloc (1 samples, 0.02%)</title><rect x="38.4677%" y="181" width="0.0160%" height="15" fill="rgb(227,1,9)" fg:x="2410" fg:w="1"/><text x="38.7177%" y="191.50"></text></g><g><title>wormwood`__rdl_dealloc (2 samples, 0.03%)</title><rect x="38.4836%" y="181" width="0.0319%" height="15" fill="rgb(248,47,43)" fg:x="2411" fg:w="2"/><text x="38.7336%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.02%)</title><rect x="38.5156%" y="165" width="0.0160%" height="15" fill="rgb(221,10,30)" fg:x="2413" fg:w="1"/><text x="38.7656%" y="175.50"></text></g><g><title>wormwood`alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (4 samples, 0.06%)</title><rect x="38.5156%" y="181" width="0.0638%" height="15" fill="rgb(210,229,1)" fg:x="2413" fg:w="4"/><text x="38.7656%" y="191.50"></text></g><g><title>wormwood`alloc::raw_vec::finish_grow (3 samples, 0.05%)</title><rect x="38.5315%" y="165" width="0.0479%" height="15" fill="rgb(222,148,37)" fg:x="2414" fg:w="3"/><text x="38.7815%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc_type (3 samples, 0.05%)</title><rect x="38.5315%" y="149" width="0.0479%" height="15" fill="rgb(234,67,33)" fg:x="2414" fg:w="3"/><text x="38.7815%" y="159.50"></text></g><g><title>wormwood`solver::direction::Direction::all (2 samples, 0.03%)</title><rect x="38.5794%" y="181" width="0.0319%" height="15" fill="rgb(247,98,35)" fg:x="2417" fg:w="2"/><text x="38.8294%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc_type (1 samples, 0.02%)</title><rect x="38.5954%" y="165" width="0.0160%" height="15" fill="rgb(247,138,52)" fg:x="2418" fg:w="1"/><text x="38.8454%" y="175.50"></text></g><g><title>wormwood`solver::point::Point::neighbors (6 samples, 0.10%)</title><rect x="38.6113%" y="181" width="0.0958%" height="15" fill="rgb(213,79,30)" fg:x="2419" fg:w="6"/><text x="38.8613%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (26 samples, 0.42%)</title><rect x="74.9721%" y="165" width="0.4150%" height="15" fill="rgb(246,177,23)" fg:x="4697" fg:w="26"/><text x="75.2221%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (56 samples, 0.89%)</title><rect x="75.3871%" y="165" width="0.8939%" height="15" fill="rgb(230,62,27)" fg:x="4723" fg:w="56"/><text x="75.6371%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_calloc_type (6 samples, 0.10%)</title><rect x="76.2809%" y="165" width="0.0958%" height="15" fill="rgb(216,154,8)" fg:x="4779" fg:w="6"/><text x="76.5309%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (5 samples, 0.08%)</title><rect x="76.2969%" y="149" width="0.0798%" height="15" fill="rgb(244,35,45)" fg:x="4780" fg:w="5"/><text x="76.5469%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (4 samples, 0.06%)</title><rect x="76.3128%" y="133" width="0.0638%" height="15" fill="rgb(251,115,12)" fg:x="4781" fg:w="4"/><text x="76.5628%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc_type (3 samples, 0.05%)</title><rect x="76.3767%" y="165" width="0.0479%" height="15" fill="rgb(240,54,50)" fg:x="4785" fg:w="3"/><text x="76.6267%" y="175.50"></text></g><g><title>libsystem_platform.dylib`__bzero (3 samples, 0.05%)</title><rect x="76.4246%" y="165" width="0.0479%" height="15" fill="rgb(233,84,52)" fg:x="4788" fg:w="3"/><text x="76.6746%" y="175.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (31 samples, 0.49%)</title><rect x="76.4725%" y="165" width="0.4948%" height="15" fill="rgb(207,117,47)" fg:x="4791" fg:w="31"/><text x="76.7225%" y="175.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (21 samples, 0.34%)</title><rect x="76.9673%" y="165" width="0.3352%" height="15" fill="rgb(249,43,39)" fg:x="4822" fg:w="21"/><text x="77.2173%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc_type (30 samples, 0.48%)</title><rect x="77.4142%" y="149" width="0.4789%" height="15" fill="rgb(209,38,44)" fg:x="4850" fg:w="30"/><text x="77.6642%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (14 samples, 0.22%)</title><rect x="77.6696%" y="133" width="0.2235%" height="15" fill="rgb(236,212,23)" fg:x="4866" fg:w="14"/><text x="77.9196%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (8 samples, 0.13%)</title><rect x="77.7654%" y="117" width="0.1277%" height="15" fill="rgb(242,79,21)" fg:x="4872" fg:w="8"/><text x="78.0154%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (1 samples, 0.02%)</title><rect x="77.9090%" y="133" width="0.0160%" height="15" fill="rgb(211,96,35)" fg:x="4881" fg:w="1"/><text x="78.1590%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (1 samples, 0.02%)</title><rect x="77.9090%" y="117" width="0.0160%" height="15" fill="rgb(253,215,40)" fg:x="4881" fg:w="1"/><text x="78.1590%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (3 samples, 0.05%)</title><rect x="77.9250%" y="133" width="0.0479%" height="15" fill="rgb(211,81,21)" fg:x="4882" fg:w="3"/><text x="78.1750%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_tiny_check_and_zero_inline_meta_from_freelist (2 samples, 0.03%)</title><rect x="78.0208%" y="117" width="0.0319%" height="15" fill="rgb(208,190,38)" fg:x="4888" fg:w="2"/><text x="78.2708%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`mvm_allocate_pages_plat (1 samples, 0.02%)</title><rect x="78.0527%" y="117" width="0.0160%" height="15" fill="rgb(235,213,38)" fg:x="4890" fg:w="1"/><text x="78.3027%" y="127.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_map_trap (1 samples, 0.02%)</title><rect x="78.0527%" y="101" width="0.0160%" height="15" fill="rgb(237,122,38)" fg:x="4890" fg:w="1"/><text x="78.3027%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (6 samples, 0.10%)</title><rect x="78.0686%" y="117" width="0.0958%" height="15" fill="rgb(244,218,35)" fg:x="4891" fg:w="6"/><text x="78.3186%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_tiny_check_and_zero_inline_meta_from_freelist (2 samples, 0.03%)</title><rect x="78.3719%" y="101" width="0.0319%" height="15" fill="rgb(240,68,47)" fg:x="4910" fg:w="2"/><text x="78.6219%" y="111.50"></text></g><g><title>wormwood`&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (73 samples, 1.17%)</title><rect x="77.3025%" y="165" width="1.1652%" height="15" fill="rgb(210,16,53)" fg:x="4843" fg:w="73"/><text x="77.5525%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (36 samples, 0.57%)</title><rect x="77.8931%" y="149" width="0.5746%" height="15" fill="rgb(235,124,12)" fg:x="4880" fg:w="36"/><text x="78.1431%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (31 samples, 0.49%)</title><rect x="77.9729%" y="133" width="0.4948%" height="15" fill="rgb(224,169,11)" fg:x="4885" fg:w="31"/><text x="78.2229%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (19 samples, 0.30%)</title><rect x="78.1644%" y="117" width="0.3033%" height="15" fill="rgb(250,166,2)" fg:x="4897" fg:w="19"/><text x="78.4144%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (4 samples, 0.06%)</title><rect x="78.4038%" y="101" width="0.0638%" height="15" fill="rgb(242,216,29)" fg:x="4912" fg:w="4"/><text x="78.6538%" y="111.50"></text></g><g><title>wormwood`DYLD-STUB$$malloc (5 samples, 0.08%)</title><rect x="78.4677%" y="165" width="0.0798%" height="15" fill="rgb(230,116,27)" fg:x="4916" fg:w="5"/><text x="78.7177%" y="175.50"></text></g><g><title>wormwood`DYLD-STUB$$memcpy (1 samples, 0.02%)</title><rect x="78.5475%" y="165" width="0.0160%" height="15" fill="rgb(228,99,48)" fg:x="4921" fg:w="1"/><text x="78.7975%" y="175.50"></text></g><g><title>wormwood`__rdl_alloc (13 samples, 0.21%)</title><rect x="78.5634%" y="165" width="0.2075%" height="15" fill="rgb(253,11,6)" fg:x="4922" fg:w="13"/><text x="78.8134%" y="175.50"></text></g><g><title>wormwood`DYLD-STUB$$realloc (1 samples, 0.02%)</title><rect x="78.7869%" y="149" width="0.0160%" height="15" fill="rgb(247,143,39)" fg:x="4936" fg:w="1"/><text x="79.0369%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (2 samples, 0.03%)</title><rect x="78.8188%" y="101" width="0.0319%" height="15" fill="rgb(236,97,10)" fg:x="4938" fg:w="2"/><text x="79.0688%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (2 samples, 0.03%)</title><rect x="78.8667%" y="85" width="0.0319%" height="15" fill="rgb(233,208,19)" fg:x="4941" fg:w="2"/><text x="79.1167%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (10 samples, 0.16%)</title><rect x="78.8986%" y="85" width="0.1596%" height="15" fill="rgb(216,164,2)" fg:x="4943" fg:w="10"/><text x="79.1486%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (6 samples, 0.10%)</title><rect x="78.9625%" y="69" width="0.0958%" height="15" fill="rgb(220,129,5)" fg:x="4947" fg:w="6"/><text x="79.2125%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (6 samples, 0.10%)</title><rect x="78.9625%" y="53" width="0.0958%" height="15" fill="rgb(242,17,10)" fg:x="4947" fg:w="6"/><text x="79.2125%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`mvm_allocate_pages_plat (1 samples, 0.02%)</title><rect x="79.0583%" y="53" width="0.0160%" height="15" fill="rgb(242,107,0)" fg:x="4953" fg:w="1"/><text x="79.3083%" y="63.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_map_trap (1 samples, 0.02%)</title><rect x="79.0583%" y="37" width="0.0160%" height="15" fill="rgb(251,28,31)" fg:x="4953" fg:w="1"/><text x="79.3083%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (1 samples, 0.02%)</title><rect x="79.0742%" y="53" width="0.0160%" height="15" fill="rgb(233,223,10)" fg:x="4954" fg:w="1"/><text x="79.3242%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (5 samples, 0.08%)</title><rect x="79.0583%" y="85" width="0.0798%" height="15" fill="rgb(215,21,27)" fg:x="4953" fg:w="5"/><text x="79.3083%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (5 samples, 0.08%)</title><rect x="79.0583%" y="69" width="0.0798%" height="15" fill="rgb(232,23,21)" fg:x="4953" fg:w="5"/><text x="79.3083%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (3 samples, 0.05%)</title><rect x="79.0902%" y="53" width="0.0479%" height="15" fill="rgb(244,5,23)" fg:x="4955" fg:w="3"/><text x="79.3402%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`_tiny_check_and_zero_inline_meta_from_freelist (1 samples, 0.02%)</title><rect x="79.1221%" y="37" width="0.0160%" height="15" fill="rgb(226,81,46)" fg:x="4957" fg:w="1"/><text x="79.3721%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (20 samples, 0.32%)</title><rect x="78.8508%" y="101" width="0.3192%" height="15" fill="rgb(247,70,30)" fg:x="4940" fg:w="20"/><text x="79.1008%" y="111.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (2 samples, 0.03%)</title><rect x="79.1381%" y="85" width="0.0319%" height="15" fill="rgb(212,68,19)" fg:x="4958" fg:w="2"/><text x="79.3881%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (1 samples, 0.02%)</title><rect x="79.2179%" y="85" width="0.0160%" height="15" fill="rgb(240,187,13)" fg:x="4963" fg:w="1"/><text x="79.4679%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (1 samples, 0.02%)</title><rect x="79.2179%" y="69" width="0.0160%" height="15" fill="rgb(223,113,26)" fg:x="4963" fg:w="1"/><text x="79.4679%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (1 samples, 0.02%)</title><rect x="79.2179%" y="53" width="0.0160%" height="15" fill="rgb(206,192,2)" fg:x="4963" fg:w="1"/><text x="79.4679%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (1 samples, 0.02%)</title><rect x="79.2338%" y="85" width="0.0160%" height="15" fill="rgb(241,108,4)" fg:x="4964" fg:w="1"/><text x="79.4838%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (2 samples, 0.03%)</title><rect x="79.2498%" y="85" width="0.0319%" height="15" fill="rgb(247,173,49)" fg:x="4965" fg:w="2"/><text x="79.4998%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (2 samples, 0.03%)</title><rect x="79.2498%" y="69" width="0.0319%" height="15" fill="rgb(224,114,35)" fg:x="4965" fg:w="2"/><text x="79.4998%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (8 samples, 0.13%)</title><rect x="79.1700%" y="101" width="0.1277%" height="15" fill="rgb(245,159,27)" fg:x="4960" fg:w="8"/><text x="79.4200%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (1 samples, 0.02%)</title><rect x="79.2817%" y="85" width="0.0160%" height="15" fill="rgb(245,172,44)" fg:x="4967" fg:w="1"/><text x="79.5317%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (32 samples, 0.51%)</title><rect x="78.8029%" y="117" width="0.5108%" height="15" fill="rgb(236,23,11)" fg:x="4937" fg:w="32"/><text x="79.0529%" y="127.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.02%)</title><rect x="79.2977%" y="101" width="0.0160%" height="15" fill="rgb(205,117,38)" fg:x="4968" fg:w="1"/><text x="79.5477%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (33 samples, 0.53%)</title><rect x="78.8029%" y="133" width="0.5267%" height="15" fill="rgb(237,72,25)" fg:x="4937" fg:w="33"/><text x="79.0529%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (1 samples, 0.02%)</title><rect x="79.3136%" y="117" width="0.0160%" height="15" fill="rgb(244,70,9)" fg:x="4969" fg:w="1"/><text x="79.5636%" y="127.50"></text></g><g><title>wormwood`alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (39 samples, 0.62%)</title><rect x="78.7709%" y="165" width="0.6225%" height="15" fill="rgb(217,125,39)" fg:x="4935" fg:w="39"/><text x="79.0209%" y="175.50"></text></g><g><title>wormwood`alloc::raw_vec::finish_grow (37 samples, 0.59%)</title><rect x="78.8029%" y="149" width="0.5906%" height="15" fill="rgb(235,36,10)" fg:x="4937" fg:w="37"/><text x="79.0529%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (4 samples, 0.06%)</title><rect x="79.3296%" y="133" width="0.0638%" height="15" fill="rgb(251,123,47)" fg:x="4970" fg:w="4"/><text x="79.5796%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (4 samples, 0.06%)</title><rect x="79.5211%" y="149" width="0.0638%" height="15" fill="rgb(221,13,13)" fg:x="4982" fg:w="4"/><text x="79.7711%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (1 samples, 0.02%)</title><rect x="79.6169%" y="133" width="0.0160%" height="15" fill="rgb(238,131,9)" fg:x="4988" fg:w="1"/><text x="79.8669%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`DYLD-STUB$$_platform_memmove (1 samples, 0.02%)</title><rect x="79.6808%" y="101" width="0.0160%" height="15" fill="rgb(211,50,8)" fg:x="4992" fg:w="1"/><text x="79.9308%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.02%)</title><rect x="79.6967%" y="101" width="0.0160%" height="15" fill="rgb(245,182,24)" fg:x="4993" fg:w="1"/><text x="79.9467%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (3 samples, 0.05%)</title><rect x="79.7127%" y="101" width="0.0479%" height="15" fill="rgb(242,14,37)" fg:x="4994" fg:w="3"/><text x="79.9627%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (6 samples, 0.10%)</title><rect x="79.7765%" y="85" width="0.0958%" height="15" fill="rgb(246,228,12)" fg:x="4998" fg:w="6"/><text x="80.0265%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (17 samples, 0.27%)</title><rect x="79.7606%" y="101" width="0.2713%" height="15" fill="rgb(213,55,15)" fg:x="4997" fg:w="17"/><text x="80.0106%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (10 samples, 0.16%)</title><rect x="79.8723%" y="85" width="0.1596%" height="15" fill="rgb(209,9,3)" fg:x="5004" fg:w="10"/><text x="80.1223%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (6 samples, 0.10%)</title><rect x="79.9362%" y="69" width="0.0958%" height="15" fill="rgb(230,59,30)" fg:x="5008" fg:w="6"/><text x="80.1862%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (6 samples, 0.10%)</title><rect x="79.9362%" y="53" width="0.0958%" height="15" fill="rgb(209,121,21)" fg:x="5008" fg:w="6"/><text x="80.1862%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (27 samples, 0.43%)</title><rect x="79.6329%" y="133" width="0.4310%" height="15" fill="rgb(220,109,13)" fg:x="4989" fg:w="27"/><text x="79.8829%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (26 samples, 0.42%)</title><rect x="79.6488%" y="117" width="0.4150%" height="15" fill="rgb(232,18,1)" fg:x="4990" fg:w="26"/><text x="79.8988%" y="127.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (2 samples, 0.03%)</title><rect x="80.0319%" y="101" width="0.0319%" height="15" fill="rgb(215,41,42)" fg:x="5014" fg:w="2"/><text x="80.2819%" y="111.50"></text></g><g><title>wormwood`alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (44 samples, 0.70%)</title><rect x="79.3935%" y="165" width="0.7023%" height="15" fill="rgb(224,123,36)" fg:x="4974" fg:w="44"/><text x="79.6435%" y="175.50"></text></g><g><title>wormwood`alloc::raw_vec::finish_grow (32 samples, 0.51%)</title><rect x="79.5850%" y="149" width="0.5108%" height="15" fill="rgb(240,125,3)" fg:x="4986" fg:w="32"/><text x="79.8350%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (2 samples, 0.03%)</title><rect x="80.0638%" y="133" width="0.0319%" height="15" fill="rgb(205,98,50)" fg:x="5016" fg:w="2"/><text x="80.3138%" y="143.50"></text></g><g><title>wormwood`alloc::raw_vec::finish_grow (2 samples, 0.03%)</title><rect x="80.0958%" y="165" width="0.0319%" height="15" fill="rgb(205,185,37)" fg:x="5018" fg:w="2"/><text x="80.3458%" y="175.50"></text></g><g><title>wormwood`&lt;wormwood::Local as solver::State&lt;wormwood::Global,solver::direction::Direction&gt;&gt;::next_states (2,708 samples, 43.22%)</title><rect x="37.7334%" y="197" width="43.2243%" height="15" fill="rgb(238,207,15)" fg:x="2364" fg:w="2708"/><text x="37.9834%" y="207.50">wormwood`&lt;wormwood::Local as solver::State&lt;wormwood::Global,solver::dir..</text></g><g><title>wormwood`wormwood::Local::step (2,647 samples, 42.25%)</title><rect x="38.7071%" y="181" width="42.2506%" height="15" fill="rgb(213,199,42)" fg:x="2425" fg:w="2647"/><text x="38.9571%" y="191.50">wormwood`wormwood::Local::step</text></g><g><title>wormwood`solver::point::Point::neighbors (52 samples, 0.83%)</title><rect x="80.1277%" y="165" width="0.8300%" height="15" fill="rgb(235,201,11)" fg:x="5020" fg:w="52"/><text x="80.3777%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc_type (45 samples, 0.72%)</title><rect x="80.2394%" y="149" width="0.7183%" height="15" fill="rgb(207,46,11)" fg:x="5027" fg:w="45"/><text x="80.4894%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (7 samples, 0.11%)</title><rect x="80.8460%" y="133" width="0.1117%" height="15" fill="rgb(241,35,35)" fg:x="5065" fg:w="7"/><text x="81.0960%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (7 samples, 0.11%)</title><rect x="80.8460%" y="117" width="0.1117%" height="15" fill="rgb(243,32,47)" fg:x="5065" fg:w="7"/><text x="81.0960%" y="127.50"></text></g><g><title>wormwood`DYLD-STUB$$calloc (1 samples, 0.02%)</title><rect x="80.9577%" y="197" width="0.0160%" height="15" fill="rgb(247,202,23)" fg:x="5072" fg:w="1"/><text x="81.2077%" y="207.50"></text></g><g><title>wormwood`DYLD-STUB$$clock_gettime (1 samples, 0.02%)</title><rect x="80.9737%" y="197" width="0.0160%" height="15" fill="rgb(219,102,11)" fg:x="5073" fg:w="1"/><text x="81.2237%" y="207.50"></text></g><g><title>wormwood`DYLD-STUB$$free (1 samples, 0.02%)</title><rect x="80.9896%" y="197" width="0.0160%" height="15" fill="rgb(243,110,44)" fg:x="5074" fg:w="1"/><text x="81.2396%" y="207.50"></text></g><g><title>wormwood`DYLD-STUB$$malloc (2 samples, 0.03%)</title><rect x="81.0056%" y="197" width="0.0319%" height="15" fill="rgb(222,74,54)" fg:x="5075" fg:w="2"/><text x="81.2556%" y="207.50"></text></g><g><title>wormwood`DYLD-STUB$$memcpy (2 samples, 0.03%)</title><rect x="81.0375%" y="197" width="0.0319%" height="15" fill="rgb(216,99,12)" fg:x="5077" fg:w="2"/><text x="81.2875%" y="207.50"></text></g><g><title>wormwood`__rdl_alloc (7 samples, 0.11%)</title><rect x="81.0694%" y="197" width="0.1117%" height="15" fill="rgb(226,22,26)" fg:x="5079" fg:w="7"/><text x="81.3194%" y="207.50"></text></g><g><title>wormwood`__rdl_dealloc (2 samples, 0.03%)</title><rect x="81.1812%" y="197" width="0.0319%" height="15" fill="rgb(217,163,10)" fg:x="5086" fg:w="2"/><text x="81.4312%" y="207.50"></text></g><g><title>wormwood`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (533 samples, 8.51%)</title><rect x="81.2131%" y="197" width="8.5076%" height="15" fill="rgb(213,25,53)" fg:x="5088" fg:w="533"/><text x="81.4631%" y="207.50">wormwood`has..</text></g><g><title>wormwood`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (386 samples, 6.16%)</title><rect x="83.5595%" y="181" width="6.1612%" height="15" fill="rgb(252,105,26)" fg:x="5235" fg:w="386"/><text x="83.8095%" y="191.50">wormwood..</text></g><g><title>libsystem_malloc.dylib`free_medium (2 samples, 0.03%)</title><rect x="89.6887%" y="165" width="0.0319%" height="15" fill="rgb(220,39,43)" fg:x="5619" fg:w="2"/><text x="89.9387%" y="175.50"></text></g><g><title>libsystem_kernel.dylib`madvise (2 samples, 0.03%)</title><rect x="89.6887%" y="149" width="0.0319%" height="15" fill="rgb(229,68,48)" fg:x="5619" fg:w="2"/><text x="89.9387%" y="159.50"></text></g><g><title>wormwood`core::hash::Hasher::write_usize (32 samples, 0.51%)</title><rect x="89.8803%" y="181" width="0.5108%" height="15" fill="rgb(252,8,32)" fg:x="5631" fg:w="32"/><text x="90.1303%" y="191.50"></text></g><g><title>wormwood`core::hash::Hash::hash_slice (45 samples, 0.72%)</title><rect x="90.4070%" y="165" width="0.7183%" height="15" fill="rgb(223,20,43)" fg:x="5664" fg:w="45"/><text x="90.6570%" y="175.50"></text></g><g><title>wormwood`indexmap::map::IndexMap&lt;K,V,S&gt;::get (329 samples, 5.25%)</title><rect x="89.7207%" y="197" width="5.2514%" height="15" fill="rgb(229,81,49)" fg:x="5621" fg:w="329"/><text x="89.9707%" y="207.50">wormwo..</text></g><g><title>wormwood`indexmap::map::IndexMap&lt;K,V,S&gt;::hash (287 samples, 4.58%)</title><rect x="90.3911%" y="181" width="4.5810%" height="15" fill="rgb(236,28,36)" fg:x="5663" fg:w="287"/><text x="90.6411%" y="191.50">wormw..</text></g><g><title>wormwood`core::hash::Hasher::write_usize (241 samples, 3.85%)</title><rect x="91.1253%" y="165" width="3.8468%" height="15" fill="rgb(249,185,26)" fg:x="5709" fg:w="241"/><text x="91.3753%" y="175.50">worm..</text></g><g><title>wormwood`indexmap::map::IndexMap&lt;K,V,S&gt;::hash (2 samples, 0.03%)</title><rect x="94.9721%" y="197" width="0.0319%" height="15" fill="rgb(249,174,33)" fg:x="5950" fg:w="2"/><text x="95.2221%" y="207.50"></text></g><g><title>wormwood`indexmap::map::core::IndexMapCore&lt;K,V&gt;::swap_remove_index (5 samples, 0.08%)</title><rect x="95.0040%" y="197" width="0.0798%" height="15" fill="rgb(233,201,37)" fg:x="5952" fg:w="5"/><text x="95.2540%" y="207.50"></text></g><g><title>wormwood`keyed_priority_queue::editable_binary_heap::BinaryHeap&lt;TPriority&gt;::heapify_up (2 samples, 0.03%)</title><rect x="95.0838%" y="197" width="0.0319%" height="15" fill="rgb(221,78,26)" fg:x="5957" fg:w="2"/><text x="95.3338%" y="207.50"></text></g><g><title>wormwood`keyed_priority_queue::editable_binary_heap::BinaryHeap&lt;TPriority&gt;::remove (14 samples, 0.22%)</title><rect x="95.1157%" y="197" width="0.2235%" height="15" fill="rgb(250,127,30)" fg:x="5959" fg:w="14"/><text x="95.3657%" y="207.50"></text></g><g><title>wormwood`hashbrown::raw::inner::RawTable&lt;T,A&gt;::insert (2 samples, 0.03%)</title><rect x="95.3711%" y="181" width="0.0319%" height="15" fill="rgb(230,49,44)" fg:x="5975" fg:w="2"/><text x="95.6211%" y="191.50"></text></g><g><title>wormwood`core::hash::Hasher::write_usize (9 samples, 0.14%)</title><rect x="95.4509%" y="165" width="0.1437%" height="15" fill="rgb(229,67,23)" fg:x="5980" fg:w="9"/><text x="95.7009%" y="175.50"></text></g><g><title>wormwood`core::hash::Hash::hash_slice (21 samples, 0.34%)</title><rect x="95.5946%" y="149" width="0.3352%" height="15" fill="rgb(249,83,47)" fg:x="5989" fg:w="21"/><text x="95.8446%" y="159.50"></text></g><g><title>wormwood`indexmap::map::IndexMap&lt;K,V,S&gt;::entry (225 samples, 3.59%)</title><rect x="95.4030%" y="181" width="3.5914%" height="15" fill="rgb(215,43,3)" fg:x="5977" fg:w="225"/><text x="95.6530%" y="191.50">worm..</text></g><g><title>wormwood`indexmap::map::IndexMap&lt;K,V,S&gt;::hash (213 samples, 3.40%)</title><rect x="95.5946%" y="165" width="3.3998%" height="15" fill="rgb(238,154,13)" fg:x="5989" fg:w="213"/><text x="95.8446%" y="175.50">wor..</text></g><g><title>wormwood`core::hash::Hasher::write_usize (192 samples, 3.06%)</title><rect x="95.9298%" y="149" width="3.0646%" height="15" fill="rgb(219,56,2)" fg:x="6010" fg:w="192"/><text x="96.1798%" y="159.50">wor..</text></g><g><title>wormwood`indexmap::map::IndexMap&lt;K,V,S&gt;::hash (1 samples, 0.02%)</title><rect x="98.9944%" y="181" width="0.0160%" height="15" fill="rgb(233,0,4)" fg:x="6202" fg:w="1"/><text x="99.2444%" y="191.50"></text></g><g><title>wormwood`alloc::raw_vec::finish_grow (1 samples, 0.02%)</title><rect x="99.0263%" y="165" width="0.0160%" height="15" fill="rgb(235,30,7)" fg:x="6204" fg:w="1"/><text x="99.2763%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (1 samples, 0.02%)</title><rect x="99.0263%" y="149" width="0.0160%" height="15" fill="rgb(250,79,13)" fg:x="6204" fg:w="1"/><text x="99.2763%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (1 samples, 0.02%)</title><rect x="99.0263%" y="133" width="0.0160%" height="15" fill="rgb(211,146,34)" fg:x="6204" fg:w="1"/><text x="99.2763%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (1 samples, 0.02%)</title><rect x="99.0263%" y="117" width="0.0160%" height="15" fill="rgb(228,22,38)" fg:x="6204" fg:w="1"/><text x="99.2763%" y="127.50"></text></g><g><title>libsystem_kernel.dylib`vm_copy (1 samples, 0.02%)</title><rect x="99.0263%" y="101" width="0.0160%" height="15" fill="rgb(235,168,5)" fg:x="6204" fg:w="1"/><text x="99.2763%" y="111.50"></text></g><g><title>libsystem_kernel.dylib`mach_msg2_trap (1 samples, 0.02%)</title><rect x="99.0263%" y="85" width="0.0160%" height="15" fill="rgb(221,155,16)" fg:x="6204" fg:w="1"/><text x="99.2763%" y="95.50"></text></g><g><title>wormwood`indexmap::map::core::IndexMapCore&lt;K,V&gt;::insert_unique (9 samples, 0.14%)</title><rect x="99.0104%" y="181" width="0.1437%" height="15" fill="rgb(215,215,53)" fg:x="6203" fg:w="9"/><text x="99.2604%" y="191.50"></text></g><g><title>wormwood`hashbrown::raw::inner::RawTable&lt;T,A&gt;::insert (7 samples, 0.11%)</title><rect x="99.0423%" y="165" width="0.1117%" height="15" fill="rgb(223,4,10)" fg:x="6205" fg:w="7"/><text x="99.2923%" y="175.50"></text></g><g><title>wormwood`hashbrown::raw::inner::RawTable&lt;T,A&gt;::reserve_rehash (5 samples, 0.08%)</title><rect x="99.0742%" y="149" width="0.0798%" height="15" fill="rgb(234,103,6)" fg:x="6207" fg:w="5"/><text x="99.3242%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (1 samples, 0.02%)</title><rect x="99.1381%" y="133" width="0.0160%" height="15" fill="rgb(227,97,0)" fg:x="6211" fg:w="1"/><text x="99.3881%" y="143.50"></text></g><g><title>libsystem_kernel.dylib`madvise (1 samples, 0.02%)</title><rect x="99.1381%" y="117" width="0.0160%" height="15" fill="rgb(234,150,53)" fg:x="6211" fg:w="1"/><text x="99.3881%" y="127.50"></text></g><g><title>wormwood`keyed_priority_queue::keyed_priority_queue::KeyedPriorityQueue&lt;TKey,TPriority,S&gt;::push (242 samples, 3.86%)</title><rect x="95.3392%" y="197" width="3.8627%" height="15" fill="rgb(228,201,54)" fg:x="5973" fg:w="242"/><text x="95.5892%" y="207.50">worm..</text></g><g><title>wormwood`keyed_priority_queue::editable_binary_heap::BinaryHeap&lt;TPriority&gt;::heapify_up (3 samples, 0.05%)</title><rect x="99.1540%" y="181" width="0.0479%" height="15" fill="rgb(222,22,37)" fg:x="6212" fg:w="3"/><text x="99.4040%" y="191.50"></text></g><g><title>libsystem_c.dylib`clock_gettime_nsec_np (1 samples, 0.02%)</title><rect x="99.2019%" y="165" width="0.0160%" height="15" fill="rgb(237,53,32)" fg:x="6215" fg:w="1"/><text x="99.4519%" y="175.50"></text></g><g><title>wormwood`std::sys::pal::unix::time::Timespec::now (7 samples, 0.11%)</title><rect x="99.2019%" y="197" width="0.1117%" height="15" fill="rgb(233,25,53)" fg:x="6215" fg:w="7"/><text x="99.4519%" y="207.50"></text></g><g><title>libsystem_c.dylib`clock_gettime (7 samples, 0.11%)</title><rect x="99.2019%" y="181" width="0.1117%" height="15" fill="rgb(210,40,34)" fg:x="6215" fg:w="7"/><text x="99.4519%" y="191.50"></text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (6 samples, 0.10%)</title><rect x="99.2179%" y="165" width="0.0958%" height="15" fill="rgb(241,220,44)" fg:x="6216" fg:w="6"/><text x="99.4679%" y="175.50"></text></g><g><title>libsystem_c.dylib`clock_gettime_nsec_np (1 samples, 0.02%)</title><rect x="99.3296%" y="149" width="0.0160%" height="15" fill="rgb(235,28,35)" fg:x="6223" fg:w="1"/><text x="99.5796%" y="159.50"></text></g><g><title>libsystem_kernel.dylib`mach_timebase_info (1 samples, 0.02%)</title><rect x="99.3296%" y="133" width="0.0160%" height="15" fill="rgb(210,56,17)" fg:x="6223" fg:w="1"/><text x="99.5796%" y="143.50"></text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (27 samples, 0.43%)</title><rect x="99.3456%" y="149" width="0.4310%" height="15" fill="rgb(224,130,29)" fg:x="6224" fg:w="27"/><text x="99.5956%" y="159.50"></text></g><g><title>wormwood`&lt;solver::Solver&lt;GlobalState,LocalState,Step&gt; as core::iter::traits::iterator::Iterator&gt;::next (6,204 samples, 99.03%)</title><rect x="0.7662%" y="213" width="99.0263%" height="15" fill="rgb(235,212,8)" fg:x="48" fg:w="6204"/><text x="1.0162%" y="223.50">wormwood`&lt;solver::Solver&lt;GlobalState,LocalState,Step&gt; as core::iter::traits::iterator::Iterator&gt;::next</text></g><g><title>wormwood`std::time::Instant::elapsed (30 samples, 0.48%)</title><rect x="99.3136%" y="197" width="0.4789%" height="15" fill="rgb(223,33,50)" fg:x="6222" fg:w="30"/><text x="99.5636%" y="207.50"></text></g><g><title>wormwood`std::sys::pal::unix::time::Timespec::now (30 samples, 0.48%)</title><rect x="99.3136%" y="181" width="0.4789%" height="15" fill="rgb(219,149,13)" fg:x="6222" fg:w="30"/><text x="99.5636%" y="191.50"></text></g><g><title>libsystem_c.dylib`clock_gettime (29 samples, 0.46%)</title><rect x="99.3296%" y="165" width="0.4629%" height="15" fill="rgb(250,156,29)" fg:x="6223" fg:w="29"/><text x="99.5796%" y="175.50"></text></g><g><title>libsystem_kernel.dylib`mach_timebase_info (1 samples, 0.02%)</title><rect x="99.7765%" y="149" width="0.0160%" height="15" fill="rgb(216,193,19)" fg:x="6251" fg:w="1"/><text x="100.0265%" y="159.50"></text></g><g><title>wormwood`&lt;wormwood::Local as solver::State&lt;wormwood::Global,solver::direction::Direction&gt;&gt;::is_valid (2 samples, 0.03%)</title><rect x="99.7925%" y="213" width="0.0319%" height="15" fill="rgb(216,135,14)" fg:x="6252" fg:w="2"/><text x="100.0425%" y="223.50"></text></g><g><title>wormwood`&lt;wormwood::Local as solver::State&lt;wormwood::Global,solver::direction::Direction&gt;&gt;::next_states (1 samples, 0.02%)</title><rect x="99.8244%" y="213" width="0.0160%" height="15" fill="rgb(241,47,5)" fg:x="6254" fg:w="1"/><text x="100.0744%" y="223.50"></text></g><g><title>wormwood`DYLD-STUB$$free (3 samples, 0.05%)</title><rect x="99.8404%" y="213" width="0.0479%" height="15" fill="rgb(233,42,35)" fg:x="6255" fg:w="3"/><text x="100.0904%" y="223.50"></text></g><g><title>wormwood`DYLD-STUB$$malloc (1 samples, 0.02%)</title><rect x="99.8883%" y="213" width="0.0160%" height="15" fill="rgb(231,13,6)" fg:x="6258" fg:w="1"/><text x="100.1383%" y="223.50"></text></g><g><title>wormwood`__rdl_alloc (2 samples, 0.03%)</title><rect x="99.9042%" y="213" width="0.0319%" height="15" fill="rgb(207,181,40)" fg:x="6259" fg:w="2"/><text x="100.1542%" y="223.50"></text></g><g><title>wormwood`__rdl_dealloc (1 samples, 0.02%)</title><rect x="99.9362%" y="213" width="0.0160%" height="15" fill="rgb(254,173,49)" fg:x="6261" fg:w="1"/><text x="100.1862%" y="223.50"></text></g><g><title>wormwood`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2 samples, 0.03%)</title><rect x="99.9521%" y="213" width="0.0319%" height="15" fill="rgb(221,1,38)" fg:x="6262" fg:w="2"/><text x="100.2021%" y="223.50"></text></g><g><title>all (6,265 samples, 100%)</title><rect x="0.0000%" y="325" width="100.0000%" height="15" fill="rgb(206,124,46)" fg:x="0" fg:w="6265"/><text x="0.2500%" y="335.50"></text></g><g><title>dyld`start (6,265 samples, 100.00%)</title><rect x="0.0000%" y="309" width="100.0000%" height="15" fill="rgb(249,21,11)" fg:x="0" fg:w="6265"/><text x="0.2500%" y="319.50">dyld`start</text></g><g><title>wormwood`main (6,265 samples, 100.00%)</title><rect x="0.0000%" y="293" width="100.0000%" height="15" fill="rgb(222,201,40)" fg:x="0" fg:w="6265"/><text x="0.2500%" y="303.50">wormwood`main</text></g><g><title>wormwood`std::rt::lang_start_internal (6,264 samples, 99.98%)</title><rect x="0.0160%" y="277" width="99.9840%" height="15" fill="rgb(235,61,29)" fg:x="1" fg:w="6264"/><text x="0.2660%" y="287.50">wormwood`std::rt::lang_start_internal</text></g><g><title>wormwood`std::rt::lang_start::_{{closure}} (6,264 samples, 99.98%)</title><rect x="0.0160%" y="261" width="99.9840%" height="15" fill="rgb(219,207,3)" fg:x="1" fg:w="6264"/><text x="0.2660%" y="271.50">wormwood`std::rt::lang_start::_{{closure}}</text></g><g><title>wormwood`std::sys::backtrace::__rust_begin_short_backtrace (6,264 samples, 99.98%)</title><rect x="0.0160%" y="245" width="99.9840%" height="15" fill="rgb(222,56,46)" fg:x="1" fg:w="6264"/><text x="0.2660%" y="255.50">wormwood`std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>wormwood`wormwood::main (6,258 samples, 99.89%)</title><rect x="0.1117%" y="229" width="99.8883%" height="15" fill="rgb(239,76,54)" fg:x="7" fg:w="6258"/><text x="0.3617%" y="239.50">wormwood`wormwood::main</text></g><g><title>wormwood`std::sys::pal::unix::time::Timespec::now (1 samples, 0.02%)</title><rect x="99.9840%" y="213" width="0.0160%" height="15" fill="rgb(231,124,27)" fg:x="6264" fg:w="1"/><text x="100.2340%" y="223.50"></text></g></svg></svg>