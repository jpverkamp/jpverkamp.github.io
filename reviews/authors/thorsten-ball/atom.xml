<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Thorsten Ball on jverkamp.com</title><link>https://blog.jverkamp.com/reviews/authors/thorsten-ball/</link><description>Recent content in Thorsten Ball on jverkamp.com</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Fri, 03 Dec 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://blog.jverkamp.com/reviews/authors/thorsten-ball/atom.xml" rel="self" type="application/rss+xml"/><item><title>Writing An Interpreter In Go</title><link>https://blog.jverkamp.com/2021/12/03/writing-an-interpreter-in-go/</link><pubDate>Fri, 03 Dec 2021 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2021/12/03/writing-an-interpreter-in-go/</guid><description>&lt;p>You know, I&amp;rsquo;m always up for a good &amp;lsquo;writing an interpreter&amp;rsquo; book. Making programming languages is a thing I&amp;rsquo;ve done a number of times before and really have been itching to get back into again. Add to that a desire to pick up a bit more Go syntax&amp;hellip; well, perhaps this book is just about perfect.&lt;/p>
&lt;p>In a nutshell, it&amp;rsquo;s a &amp;lsquo;writing an interpreter&amp;rsquo; book. They go through lexing, parsing, and evaluating. On a plus side, they include closures and first-class functions. On the downside, they specifically didn&amp;rsquo;t get into garbage collection:&lt;/p></description></item></channel></rss>