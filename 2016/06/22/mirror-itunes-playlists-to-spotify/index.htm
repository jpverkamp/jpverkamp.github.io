<!DOCTYPE html>
<html>
<head>
        
        

        <title>Mirror iTunes playlists to Spotify | jverkamp.com | John-Paul Verkamp</title>

        <script src="//ajax.googleapis.com/ajax/libs/jquery/1.11.0/jquery.min.js" defer></script>
        <script src="//code.jquery.com/ui/1.11.1/jquery-ui.min.js" defer></script>

        <link rel="stylesheet" href="//netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css" defer />
        <link rel="stylesheet" href="//netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap-theme.min.css" defer />
        <script src="//netdna.bootstrapcdn.com/bootstrap/3.1.1/js/bootstrap.min.js" defer></script>

        <link rel="stylesheet" href="//cdnjs.cloudflare.com/ajax/libs/ekko-lightbox/3.0.3a/ekko-lightbox.min.css" defer />
        <script src="//cdnjs.cloudflare.com/ajax/libs/ekko-lightbox/3.0.3a/ekko-lightbox.min.js" defer></script>

        <script src="//cdnjs.cloudflare.com/ajax/libs/jquery.transit/0.9.9/jquery.transit.min.js" defer></script>

        <!-- Highlight.js for syntax highlighting -->
        <link rel="stylesheet" href="/highlight/styles/obsidian.css" defer />
        <script src="/highlight/highlight.pack.js" defer></script>

        <!-- MathJax for LaTeX support -->
        <script src="//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML" defer></script>

        <!-- nanoGallery for Flickr Galleries -->
        <link rel="stylesheet" href="//cdnjs.cloudflare.com/ajax/libs/nanogallery/4.4.2/css/themes/light/nanogallery_light.css" defer />
        <script type="text/javascript" src="//cdnjs.cloudflare.com/ajax/libs/nanogallery/4.4.2/jquery.nanogallery.min.js" defer ></script>

        <!-- Pretty pretty fonts -->
        <link rel="stylesheet" type="text/css" href="//fonts.googleapis.com/css?family=Calligraffitti" defer />

        <!-- Any custom CSS or JS that I've written; this should be kept minimal -->
        <link rel="stylesheet" href="/custom.css" defer />
        <script src="/custom.js" defer></script>

        <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
        <link rel="alternate" type="application/atom+xml" title="jverkamp.com (Atom 2.0)" href="//blog.jverkamp.com/feed/" />
</head>
<body>
        <header class="container">
        <nav class="navbar navbar-default" role="navigation">
  <div class="container-fluid">
    <!-- Brand and toggle get grouped for better mobile display -->
    <div class="navbar-header">
      <button type="button" class="navbar-toggle" data-toggle="collapse" data-target="#bs-example-navbar-collapse-1">
        <span class="sr-only">Toggle navigation</span>
        <span class="icon-bar"></span>
        <span class="icon-bar"></span>
        <span class="icon-bar"></span>
      </button>
      <a class="navbar-brand" href="//blog.jverkamp.com"><span style="color: green;">jv</span>erkamp.com</a>
    </div>

    <!-- Collect the nav links, forms, and other content for toggling -->
    <div class="collapse navbar-collapse" id="bs-example-navbar-collapse-1">
      <ul class="nav navbar-nav"><li class="dropdown"><a href="//blog.jverkamp.com/category/archives" class="dropdown-toggle">Archives<span class="caret"></span></a><ul class="dropdown-menu"><li><a href="//blog.jverkamp.com/category/archives/2004">2004</a></li><li><a href="//blog.jverkamp.com/category/archives/2005">2005</a></li><li><a href="//blog.jverkamp.com/category/archives/2006">2006</a></li><li><a href="//blog.jverkamp.com/category/archives/2007">2007</a></li><li><a href="//blog.jverkamp.com/category/archives/2008">2008</a></li><li><a href="//blog.jverkamp.com/category/archives/2009">2009</a></li><li><a href="//blog.jverkamp.com/category/archives/2010">2010</a></li><li><a href="//blog.jverkamp.com/category/archives/2011">2011</a></li><li><a href="//blog.jverkamp.com/category/archives/2012">2012</a></li><li><a href="//blog.jverkamp.com/category/archives/2013">2013</a></li><li><a href="//blog.jverkamp.com/category/archives/2014">2014</a></li><li><a href="//blog.jverkamp.com/category/archives/2015">2015</a></li><li><a href="//blog.jverkamp.com/category/archives/2016">2016</a></li></ul></li><li class="dropdown"><a href="//blog.jverkamp.com/category/other" class="dropdown-toggle">Other<span class="caret"></span></a><ul class="dropdown-menu"><li><a href="//blog.jverkamp.com/category/other/board-game-reviews">Board Game Reviews</a></li><li><a href="//blog.jverkamp.com/category/other/book-reviews">Book Reviews</a></li><li><a href="//blog.jverkamp.com/category/other/cooking">Cooking</a></li><li><a href="//blog.jverkamp.com/category/other/movie-reviews">Movie Reviews</a></li></ul></li><li class="dropdown"><a href="//blog.jverkamp.com/category/photography" class="dropdown-toggle">Photography<span class="caret"></span></a><ul class="dropdown-menu"><li><a href="//blog.jverkamp.com/category/photography/dp-challenge">DP Challenge</a></li><li><a href="//blog.jverkamp.com/category/photography/photosets">Photosets</a></li><li><a href="//blog.jverkamp.com/category/photography/photosynth">Photosynth</a></li></ul></li><li class="dropdown"><a href="//blog.jverkamp.com/category/programming" class="dropdown-toggle">Programming<span class="caret"></span></a><ul class="dropdown-menu"><li><a href="//blog.jverkamp.com/category/programming/by-language">By Language</a></li><li><a href="//blog.jverkamp.com/category/programming/by-project">By Project</a></li><li><a href="//blog.jverkamp.com/category/programming/by-source">By Source</a></li><li><a href="//blog.jverkamp.com/category/programming/by-topic">By Topic</a></li><li><a href="//blog.jverkamp.com/category/programming/libraries">Libraries</a></li></ul></li><li class="dropdown"><a href="//blog.jverkamp.com/category/research" class="dropdown-toggle">Research<span class="caret"></span></a><ul class="dropdown-menu"><li><a href="//blog.jverkamp.com/category/research/by-topic">By Topic</a></li><li><a href="//blog.jverkamp.com/category/research/publications">Publications</a></li></ul></li><li class="dropdown"><a href="//blog.jverkamp.com/category/writing" class="dropdown-toggle">Writing<span class="caret"></span></a><ul class="dropdown-menu"><li><a href="//blog.jverkamp.com/category/writing/by-genre">By Genre</a></li><li><a href="//blog.jverkamp.com/category/writing/ideas">Ideas</a></li><li><a href="//blog.jverkamp.com/category/writing/nanowrimo">NaNoWriMo</a></li><li><a href="//blog.jverkamp.com/category/writing/novels">Novels</a></li><li><a href="//blog.jverkamp.com/category/writing/other">Other</a></li><li><a href="//blog.jverkamp.com/category/writing/short-stories">Short Stories</a></li><li><a href="//blog.jverkamp.com/category/writing/writing-excuses">Writing Excuses</a></li></ul></li></ul>

      <form action="//www.google.com/search" method="get" onSubmit="(function(obj){obj.q.value='site:blog.jverkamp.com '+obj.qfront.value;})(this)" class="navbar-form navbar-right" role="search">
        <div class="form-group">
          <input name="q" type="hidden" />
          <input name="qfront" type="text" class="form-control" placeholder="Search" />
          <button type="submit" class="btn btn-default" value="Search">Search</button>
        </p>
      </form>
    </div><!-- /.navbar-collapse -->
  </div><!-- /.container-fluid -->
</nav>
        </header>

        <article class="container">
                <header>
                        <h1 class="entry-title">Mirror iTunes playlists to Spotify</h1>

                        <div class="entry-meta">
                                <span class="posted-on"><time class="entry-date" datetime="2016-06-22"><span class="year">2016</span> <span class="month">June</span> <span class="day">22</span></time></span>
                                <span class="tags"><ul class="tag-list list-inline"><li><a href="//blog.jverkamp.com/category/programming/by-topic/backups">Backups</a></li><li><a href="//blog.jverkamp.com/category/programming">Programming</a></li><li><a href="//blog.jverkamp.com/category/programming/by-language/python">Python</a></li></ul></span>
                        </div>

                        <hr />
                </header>
                <div class="entry-content">
                        <p>At the moment, I have an Apple Music subscription. It's great to be able to listen to more or less whatever music I want to. I switched from Spotify because they were missing a few artists that I actually did want to listen to. Unfortunately, there are a few things that Apple Music doesn't do that I would like to have--chief among them the ability to play on a Roku.</p>
<p>One nice thing that Spotify does have though is a fairly powerful API: <a href="https://developer.spotify.com/web-api/">Spotify Web API</a>. Inspired by a post on <a href="http://aguo.us/writings/spotify-billboard.html">Spotify and billboard.py</a> which automatically creates Spotify playlists from the Billboard music ranking charts, I decided to write up a script that can sync my playlists from iTunes to Spotify.</p>
<!--more-->
<p>First, let's write a method that uses the Spotify web API to search for tracks (or actually any <code>type</code>, such as an artist):</p>
<pre class="python"><code>@memory.cache
def spotify_search(type, retries = 3, **params):
    '''Search for an item on the spotify API.'''

    logging.debug('spotify_search({}, {})'.format(type, params))

    url = 'https://api.spotify.com/v1/search'
    query = ' '.join(
        '{key}:{value}'.format(key = key, value = params[key])
        for key in params
    )

    response = requests.get(url, {'type': type, 'q': query})

    if response.status_code == 419:
        timeout = int(response.headers['Retry-After'])
        sys.stderr.write('Rate limited, waiting {} seconds...\n'.format(timeout))
        time.sleep(timeout)
        return spotify_search(type, retries = 3, **params)

    if response.status_code != 200:
        if retries:
            logging.warning('Non-200 status code for {}, retrying in 1 second...\n'.format(query))
            time.sleep(1)
            return spotify_search(type, retries = retries - 1, **params)
        else:
            logging.critical('Non-200 status code for {}, no more retries'.format(query))
            raise Exception('Error in spotify api for {}'.format(query))

    type_plural = type + 's'

    if response.json()[type_plural]['total'] &gt; 0:
        return response.json()[type_plural]['items'][0]
    else:
        return None</code></pre>
<p>Essentially, it's just a call to the API endpoint <code>/v1/search</code>. The only two odd parts are how the query string is formatted (it looks something like this: <code>Artist:Arist Name Song:Song Name</code>) and the <code>memory.cache</code> decorator.</p>
<p>The decorator comes from <a href="https://pypi.python.org/pypi/joblib">joblib</a> and is basically an easy way to make sure that I don't fetch this information more than once per song no matter how many times I call this method. It will save the results and return them directly for any future calls. To initialize it, all I have to do is run <code>memory = joblib.Memory(cachedir = 'cache', verbose = 0)</code> at the top of my code.</p>
<p>Now that we have a way of looking up songs, lets write a few more helper methods to read from the iTunes library. The first thing that you have to do is check the Advanced setting to 'Share iTunes Library XML with other applications':</p>
<p><a href="//blog.jverkamp.com/2016/06/22/mirror-itunes-playlists-to-spotify/itunes-settings.png" data-toggle="lightbox"><img src="//blog.jverkamp.com/2016/06/22/mirror-itunes-playlists-to-spotify/itunes-settings.png" /></a></p>
<p>This will make the file <code>iTunes Library.xml</code> / <code>iTunes Music Library.xml</code> (it changed between Yosemite and El Capitan) available in your iTunes folder. This is a <a href="https://en.wikipedia.org/wiki/plist">plist</a> file which means the built in <a href="https://docs.python.org/2/library/plistlib.html">plistlib</a> can read it directly:</p>
<pre class="python"><code>path = os.path.expanduser('~/Music/iTunes/iTunes Music Library.xml')
with open(path, 'rb') as fin:
    ITUNES_LIBRARY = plistlib.load(fin)</code></pre>
<p>We can then use this directly to read in information about any given track that we have in our library.</p>
<pre class="python"><code>@memory.cache
def get_track(track_id):
    '''Get a track by ID.'''

    logging.debug('get_track({})'.format(track_id))

    track = ITUNES_LIBRARY['Tracks'].get(str(track_id), None)
    if not track:
        return None

    def remove_parentheticals(s):
        return re.sub(r'\s+[\(\[].*[\)\]]', '', s)

    spotify_data = spotify_search('track',
        artist = remove_parentheticals(track['Artist']),
        track = remove_parentheticals(track['Name']),
    )

    if spotify_data:
        track.update(spotify_data)

    return track</code></pre>
<p>Essentially, we pull the <code>Tracks</code> object out of the iTunes library which is indexed by a <code>track_id</code>. There's one kind of weird part here in that the <code>Tracks</code> object uses numeric strings as keys while the <code>Playlists</code> tracks (see below) are returned as <code>int</code>s. Thus the cast. We take the information from iTunes and then try to look up the song in Spotify. If the search returns, we shove the two objects together. If not, we return just the iTunes information and deal with that later.</p>
<p>Next, we want to look up playlists:</p>
<pre class="python"><code>def get_playlists():
    '''
    Return all playlists for the current user.

    Each will be of the form:
    {'name': '{playlist_name}', 'tracks': [...]}
    '''

    for playlist in ITUNES_LIBRARY['Playlists']:
        if any(key in playlist and playlist[key] for key in ['Master', 'Movies', 'TV Shows', 'Podcasts', 'iTunesU', 'Audiobooks']):
            continue

        yield {
            'name': playlist['Name'],
            'tracks': [
                get_track(track['Track ID'])
                for track in playlist['Playlist Items']
                if get_track(track['Track ID'])
            ]
        }</code></pre>
<p>This is a bit odd, since there are many different kinds of playlists in the iTunes library, not all of which have the same keys. With a bit of experimentation, I found that the list of keys above are the ones we want to avoid. Other than that, we will <code>yield</code> each playlist along with a list of track objects from <code>get_track</code>. This is why I cached those results, since a track can (and often will be) in multiple playlists and we don't want to re-fetch the track information if that's the case.</p>
<p>That's actually the lion's share of what I need. All that's left is the code to create / find Spotify playlists and then add the songs to them. For that, I'm going to use the <a href="https://github.com/plamere/spotipy">spotipy</a> library rather than directly dealing with the endpoints. For the most part, it really helps with the OAuth tokens. All we have to do to create a Spotipy client is this:</p>
<pre class="python"><code>token = spotipy.util.prompt_for_user_token(
    os.env['SPOTIFY_USERNAME'],
    client_id = os.env['SPOTIFY_CLIENT_ID'],
    client_secret = os.env['SPOTIFY_CLIENT_SECRET'],
    redirect_uri = os.env['SPOTIFY_REDIRECT_URI'],
    scope = os.env['SPOTIFY_SCOPE'],
)

sp = spotipy.Spotify(auth = token)</code></pre>
<p>You have to <a href="https://developer.spotify.com/my-applications/#!/applications">create a Spotify App</a>, but that's straight forward enough and free. The first time this is run, you will have to okay the permissions in your web browser, but after that it will keep track of your Spotify API token and will run transparently.</p>
<p>I'm going to use that to write one more helper method:</p>
<pre class="python"><code>def get_spotify_playlist(title):
    '''Get either an existing or new playlist by title.'''

    playlists = sp.user_playlists(sp.me()['id'])['items']
    for playlist in playlists:
        if title == playlist['name']:
            return playlist

    return sp.user_playlist_create(sp.me()['id'], title)</code></pre>
<p><a href="http://aguo.us/writings/spotify-billboard.html">The article</a> that inspired this code only used the <code>user_playlist_create</code> method, but that will create a new playlist on each run. Instead, we want to check if there's already a playlist matching the name that we're trying to create. If so, return that playlist. If not, create a new one to return.</p>
<p>Now we have everything we need. We can write a script that will loop through any iTunes playlists specified on the command line (or all of them if none are specified) and sync them to Spotify:</p>
<pre class="python"><code>for playlist in get_playlists():
    if len(sys.argv) &gt; 1 and playlist['name'] not in sys.argv:
        continue

    spotify_playlist = get_spotify_playlist('iTunes - {}'.format(playlist['name']))

    uris = [
        track['uri'] for
        track in playlist['tracks']
        if 'uri' in track
    ]

    def chunks(items, size):
        for start in range(0, len(items), size):
            yield items[start : start + size]

    for uri_chunk in chunks(uris, 100):
        sp.user_playlist_add_tracks(sp.me()['id'], spotify_playlist['id'], uri_chunk)</code></pre>
<p>I did hit one interesting temporary roadblock in that the Spotify API cannot accept more than 100 URIs at a time, but the <code>chunk</code> method took care of that. One thing that is nice is that the list of songs in a playlist form a set. So it doesn't matter if we add the same song to a playlist more than once, it will still only exist a single time. That's pretty cool!</p>
<p>And that's it. A quick run (it took a few minutes to get all of the information for the 500 songs I have in my iTunes library) and I now have a Spotify playlist for each of my iTunes ones. It's not perfect. There are still a few artists that are on Apple Music but not Spotify. But for a stopgap and when I'm on computers that don't have my iTunes library, it works pretty well. I'll probably set this up to run periodically, just so I always have my playlists relatively up to date.</p>
                </div>
                <div class="entry-footnotes">
                        <div id="footnotes"><ol></ol></div>
                </div>

                <div id="disqus_thread"></div>
<script type="text/javascript">
var disqus_shortname = "jverkamp";
var disqus_title = "Mirror iTunes playlists to Spotify";
var disqus_url = "http://blog.jverkamp.com/2016/06/22/mirror-itunes-playlists-to-spotify/";
/* * * DON'T EDIT BELOW THIS LINE * * */
(function() {
  var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
  dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js';
  (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
})();
</script>
<noscript>Please enable JavaScript to view the <a href="http://disqus.com/?ref_noscript">comments powered by Disqus.</a></noscript>
<a href="http://disqus.com" class="dsq-brlink">comments powered by <span class="logo-disqus">Disqus</span></a>
        </article>

        <footer class="container" role="contentinfo">
                <nav class="navbar navbar-default" role="navigation"><ul class="nav navbar-nav nav-justified"><li><a href="//blog.jverkamp.com/2016/06/21/imperial-radch">← Imperial Radch</a></li><li><a href="//blog.jverkamp.com/category/archives">Archives</a></li><li><a href="//blog.jverkamp.com/2016/07/08/the-fifth-season">The Fifth Season →</a></li></ul><ul class="nav navbar-nav nav-justified"><li><a href="//blog.jverkamp.com/2016/06/04/parsing-motorola-surfboard-stats">← Parsing Motorola Surfboard stats</a></li><li><a href="//blog.jverkamp.com/category/programming">Programming</a></li><li><a href="//blog.jverkamp.com/2016/07/14/solving-loop-puzzles">Solving Loop Puzzles →</a></li></ul></nav>

                <div class="legal">
                        <a href="//blog.jverkamp.com/feed/atom.xml">feed <img style="border: 0;" src="//blog.jverkamp.com/rss.png" /></a><br />
                        All posts unless otherwise mentioned are licensed under <a rel="license" href="//creativecommons.org/licenses/by-nc-sa/3.0/deed.en_US"><img alt="Creative Commons License" style="border-width:0" src="//i.creativecommons.org/l/by-nc-sa/3.0/80x15.png" /></a><br />
                        Any source code unless otherwise mentioned is licensed under the <a href="//directory.fsf.org/wiki/License:BSD_3Clause">3 clause BSD license</a>
                </div>
        </footer>

<script>
(function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
(i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
m=s.getElementsByTagName(o)[0];a.defer=1;a.src=g;m.parentNode.insertBefore(a,m)
})(window,document,'script','//www.google-analytics.com/analytics.js','ga');

ga('create', 'UA-53688146-1', 'auto');
ga('send', 'pageview');
</script>
</body>
</html>