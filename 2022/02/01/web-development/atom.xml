<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Web Development on jverkamp.com</title><link>https://blog.jverkamp.com/2022/02/01/web-development/</link><description>Recent content in Web Development on jverkamp.com</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Tue, 01 Feb 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://blog.jverkamp.com/2022/02/01/web-development/atom.xml" rel="self" type="application/rss+xml"/><item><title>A simple Flask Logging/Echo Server</title><link>https://blog.jverkamp.com/2022/02/01/a-simple-flask-logging/echo-server/</link><pubDate>Tue, 01 Feb 2022 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2022/02/01/a-simple-flask-logging/echo-server/</guid><description>&lt;p>A very simple server that can be used to catch all incoming HTTP requests and just echo them back + log their contents. I needed it to test what a webhook actually returned to me, but I&amp;rsquo;m sure that there are a number of other things it could be dropped in for.&lt;/p>
&lt;p>It will take in any GET/POST/PATCH/DELETE HTTP request with any path/params/data (optionally JSON), pack that data into a JSON object, and both log that to a file (with a UUID1 based name) plus return this object to the request.&lt;/p>
&lt;p>Warning: Off hand, there is already a potential security problem in this regarding DoS. It will happily try to log anything you throw at it, no matter how big and will store those in memory first. So long running requests / large requests / many requests will quickly eat up your RAM/disk. So&amp;hellip; don&amp;rsquo;t leave this running unattended? At least not without additional configuration.&lt;/p>
&lt;p>That&amp;rsquo;s it! Hope it&amp;rsquo;s helpful.&lt;/p></description></item><item><title>Automatic self-signed HTTPS for local development</title><link>https://blog.jverkamp.com/2018/02/15/automatic-self-signed-https-for-local-development/</link><pubDate>Thu, 15 Feb 2018 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2018/02/15/automatic-self-signed-https-for-local-development/</guid><description>&lt;p>From time to time when doing web development, you need to test something related to HTTPS. In some cases, the application you&amp;rsquo;re writing already supports HTTPS natively and that&amp;rsquo;s no problem. But more often (and probably better, in my opinion) is the case when you have another service (be it an AWS ELB or an nginx layer) that will terminate the HTTPS connection for you so your application doesn&amp;rsquo;t have to know how to speak HTTPS.&lt;/p>
&lt;p>In those cases, how can you test functionality that specifically interacts with HTTPS?&lt;/p>
&lt;p>Today I will show you &lt;code>autohttps&lt;/code>, a thin nginx proxy using Docker and a &lt;a href="https://en.wikipedia.org/wiki/self%20signed%20certificate">self signed certificate&lt;/a> to automatically create an HTTPS proxy in front of your application.&lt;/p></description></item><item><title>Audiobooks to Podcasts</title><link>https://blog.jverkamp.com/2016/02/26/audiobooks-to-podcasts/</link><pubDate>Fri, 26 Feb 2016 00:05:00 +0000</pubDate><guid>https://blog.jverkamp.com/2016/02/26/audiobooks-to-podcasts/</guid><description>&lt;p>I&amp;rsquo;ve recently started to listen to audiobooks again (The Aeronaut&amp;rsquo;s Windlass). If you buy books through Audible or some other setup that has their own app, it&amp;rsquo;s a straight forward enough process. On the other hand, if you have them on CD and want to play them on a mobile device&amp;hellip; It&amp;rsquo;s a little more interesting.&lt;/p>
&lt;p>I tried a few different apps that purport to do exactly what I wanted: import an audiobook as a folder full of MP3s and play them, but none that quite meet what I wanted. Since I also listen to a lot of podcasts and have more than one podcast app that I really like (I&amp;rsquo;ve used and liked both &lt;a href="http://www.downcastapp.com/">Downcast&lt;/a> and &lt;a href="http://www.shiftyjelly.com/pocketcasts">Pocket Casts&lt;/a>), I decided to see if I couldn&amp;rsquo;t use one of those as an audiobook player.&lt;/p></description></item><item><title>Generating YouTube user RSS feeds</title><link>https://blog.jverkamp.com/2015/05/11/generating-youtube-user-rss-feeds/</link><pubDate>Mon, 11 May 2015 00:00:00 +0000</pubDate><guid>https://blog.jverkamp.com/2015/05/11/generating-youtube-user-rss-feeds/</guid><description>&lt;p>On 4 March 2014, YouTube deprecated the v2.0 API for YouTube (&lt;a href="https://developers.google.com/youtube/2.0/developers_guide_protocol_deprecated">source&lt;/a>). One of the unfortunate side effects was that RSS feeds for user uploads were included in what was deprecated.&lt;/p>
&lt;p>Previously, you could get an RSS feed with a link of the form: &lt;code>https://gdata.youtube.com/feeds/base/users/{user}/uploads&lt;/code> For the longest time, even after the deprecation, those links still worked, but a couple weeks ago, more and more of the video feeds I was subscribed to started redirecting to &lt;a href="https://www.youtube.com/channel/UCMDQxm7cUx3yXkfeHa5zJIQ/videos">YouTube Help account&lt;/a>. As thrilling as that channel is, it&amp;rsquo;s not what I&amp;rsquo;m looking for.&lt;/p>
&lt;p>Let&amp;rsquo;s fix it.&lt;/p></description></item><item><title>CSRF protection injection with jQuery and Zend</title><link>https://blog.jverkamp.com/2014/01/13/csrf-protection-injection-with-jquery-and-zend/</link><pubDate>Mon, 13 Jan 2014 14:00:24 +0000</pubDate><guid>https://blog.jverkamp.com/2014/01/13/csrf-protection-injection-with-jquery-and-zend/</guid><description>&lt;p>&lt;a href="https://en.wikipedia.org/wiki/Csrf">Cross-site request forgery&lt;/a> attacks are among the most common vulnerabilities against websites, listed as &lt;a href="https://www.owasp.org/index.php/Top_10_2013-A8-Cross-Site_Request_Forgery_(CSRF)">number 8&lt;/a> on &lt;a href="https://www.owasp.org/index.php/Top_10_2013-Top_10">OWASP&amp;rsquo;s 2013 Top 10 list&lt;/a>.&lt;/p></description></item><item><title>Approximating Pi with Buffon's Needle</title><link>https://blog.jverkamp.com/2013/03/18/approximating-pi-with-buffons-needle/</link><pubDate>Mon, 18 Mar 2013 14:00:14 +0000</pubDate><guid>https://blog.jverkamp.com/2013/03/18/approximating-pi-with-buffons-needle/</guid><description>&lt;p>I&amp;rsquo;m a bit late for Pi Day, but Programming Praxis had &lt;a href="http://programmingpraxis.com/2013/03/15/buffons-needle/" title="Buffon's Needle">a neat problem on Friday&lt;/a> that I wanted to check out:&lt;/p>
&lt;blockquote>
&lt;p>Suppose we have a floor made of parallel strips of wood, each the same width, and we drop a needle onto the floor. What is the probability that the needle will lie across a line between two strips?&lt;/p>&lt;/blockquote></description></item><item><title>Partitioning the Dutch national flag</title><link>https://blog.jverkamp.com/2013/03/06/partitioning-the-dutch-national-flag/</link><pubDate>Wed, 06 Mar 2013 14:00:08 +0000</pubDate><guid>https://blog.jverkamp.com/2013/03/06/partitioning-the-dutch-national-flag/</guid><description>&lt;p>&lt;a title="Dutch National Flag" href="http://programmingpraxis.com/2013/03/05/dutch-national-flag/">Yesterday&amp;rsquo;s post&lt;/a> from Programming Praxis asks us to solve a problem known as the Dutch National Flag problem (attributed to &lt;a href="https://en.wikipedia.org/wiki/Edsgar%20Dijkstra">Edsgar Dijkstra&lt;/a>): &lt;em>sort an array of red, white and blue symbols so that all reds come together, followed by all whites, followed finally by all blues&lt;/em>.&lt;/p></description></item><item><title>Translate CSV to HTML</title><link>https://blog.jverkamp.com/2013/01/16/translate-csv-to-html/</link><pubDate>Wed, 16 Jan 2013 04:55:10 +0000</pubDate><guid>https://blog.jverkamp.com/2013/01/16/translate-csv-to-html/</guid><description>&lt;p>&lt;a href="http://programmingpraxis.com/2013/01/15/translate-csv-to-html/" title="Translate CSV to HTML">Yesterday&amp;rsquo;s post&lt;/a> from Programming Praxis asks us to write a function that will read content formatted as &lt;a href="https://en.wikipedia.org/wiki/comma-separated%20values">comma-separated values&lt;/a> and output the result as an HTML table. Their solution uses the &lt;a href="http://programmingpraxis.com/essays/#text-file-databases" title="Text file database">text file database library&lt;/a> that they posted about (which is a neat concept, you should check it out), but I think I&amp;rsquo;m going to work out the solution more directly.&lt;/p></description></item><item><title>Generated HTML index</title><link>https://blog.jverkamp.com/2012/10/06/generated-html-index/</link><pubDate>Sat, 06 Oct 2012 14:00:12 +0000</pubDate><guid>https://blog.jverkamp.com/2012/10/06/generated-html-index/</guid><description>&lt;p>A simple script today to generate an HTML index listing all of the files in a given directory. This has come in handy in the past when Apache has had &lt;code>Options -Indexes&lt;/code> set (disabling their automatically generated indexes) and I didn&amp;rsquo;t have the permissions to override it.&lt;/p></description></item><item><title>Elementary cellular automaton</title><link>https://blog.jverkamp.com/2012/10/03/elementary-cellular-automaton/</link><pubDate>Wed, 03 Oct 2012 14:00:47 +0000</pubDate><guid>https://blog.jverkamp.com/2012/10/03/elementary-cellular-automaton/</guid><description>&lt;p>Today we&amp;rsquo;re going to be playing with an HTML5 canvas again (previously we made &lt;a href="https://blog.jverkamp.com/2012/09/26/line-art-with-an-html5-canvas/">line art&lt;/a> and &lt;a href="https://blog.jverkamp.com/2012/09/27/html5-bugs/">bugs&lt;/a>). This time, the goal is to make a tool where you can explore &lt;a href="http://mathworld.wolfram.com/ElementaryCellularAutomaton.html" title="Wolfram Mathworld: Elementary Cellular Automaton">elementary cellular automaton&lt;/a>.&lt;/p></description></item><item><title>HTML5 Bugs</title><link>https://blog.jverkamp.com/2012/09/27/html5-bugs/</link><pubDate>Thu, 27 Sep 2012 14:00:13 +0000</pubDate><guid>https://blog.jverkamp.com/2012/09/27/html5-bugs/</guid><description>&lt;p>In the spirit of &lt;a href="https://blog.jverkamp.com/2012/09/26/line-art-with-an-html5-canvas/">yesterday&amp;rsquo;s post&lt;/a> about HTML5&amp;rsquo;s &lt;code>canvas&lt;/code>, I&amp;rsquo;ve got another post. This time, it&amp;rsquo;s a little buggy. &amp;#x1f604;&lt;/p></description></item><item><title>Line art with an HTML5 canvas</title><link>https://blog.jverkamp.com/2012/09/26/line-art-with-an-html5-canvas/</link><pubDate>Wed, 26 Sep 2012 14:00:16 +0000</pubDate><guid>https://blog.jverkamp.com/2012/09/26/line-art-with-an-html5-canvas/</guid><description>&lt;p>Let&amp;rsquo;s play with &lt;a href="http://www.w3schools.com/html/html5_canvas.asp" title="W3 Schools: HTML5 canvas">HTML5 canvas&lt;/a> elements!&lt;/p>
&lt;p>Basically, I want to draw some simple line diagrams. Go from top to bottom on one side while going from right to left along the top or bottom. It sounds complicated, but perhaps it&amp;rsquo;s easier to explain with a drawing:&lt;/p></description></item><item><title>OpenID - Part 2</title><link>https://blog.jverkamp.com/2012/07/20/openid-part-2/</link><pubDate>Fri, 20 Jul 2012 04:55:18 +0000</pubDate><guid>https://blog.jverkamp.com/2012/07/20/openid-part-2/</guid><description>&lt;p>I &lt;a href="https://blog.jverkamp.com/2012/07/19/adventures-in-openid-land/">wrote yesterday &lt;/a>about getting OpenID up and running, but when I played with the code a bit more today, I realized that something funny was going on. Yahoo worked exactly as I expected, when I clicked on the link for the first time, it would take me to the Yahoo login page and then to a page to grant the proper permissions. All well and good. The same with Google.&lt;/p></description></item><item><title>Adventures in OpenID land</title><link>https://blog.jverkamp.com/2012/07/19/adventures-in-openid-land/</link><pubDate>Thu, 19 Jul 2012 04:59:49 +0000</pubDate><guid>https://blog.jverkamp.com/2012/07/19/adventures-in-openid-land/</guid><description>&lt;p>Today I started working on a little webapp. It&amp;rsquo;s mostly to get me back in practice writing website code, but it does hopefully have the side effect of being useful. More on that later though, perhaps when it&amp;rsquo;s actually working.&lt;/p>
&lt;p>In any case, the first thing that I wanted to do for this app was to set up some sort of authentication system. Since I don&amp;rsquo;t have HTTPS set up at the moment with my webhost (&lt;a title="Dreamhost Homepage" href="http://dreamhost.com/">Dreamhost&lt;/a>; they really are pretty good to work with and far better than my previous host) and it doesn&amp;rsquo;t really make as much sense to send passwords in plaintext over the network, I decided to go ahead and give OpenID a try. Granted, it&amp;rsquo;s still sending the authentication information in plaintext for at least part of the trip, but it&amp;rsquo;s still something that I think is worth learning.&lt;/p></description></item></channel></rss>