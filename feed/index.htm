<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>jverkamp.com</title><link href="http://blog.jverkamp.com" /><link rel="self" href="http://blog.jverkamp.com/feed/" /><updated>2014-12-23T00:00:00Z</updated><author><name>JP Verkamp</name></author><id>urn:uuid:f148b655-ada3-c720-0c01-ca384ab68088</id><entry><title>Palette Swapping</title><link href="http://blog.jverkamp.com/2014/12/23/palette-swapping" /><id>urn:uuid:fdbf6642-e8d9-7544-30ed-156ee3de7f6d</id><updated>2014-12-23T00:00:00Z</updated><summary type="html"><![CDATA[<p>Today's task comes from the <a href="https://codegolf.stackexchange.com/">Code Golf StackExchange</a>. The idea behind <a href="https://en.wikipedia.org/wiki/code_golf">code golf</a> is to write a program with as few characters as possible, often rendering the code nigh on unreadable. Luckily, the same StackExchange also host popularity contests, one of which is the inspiration behind today's post:</p>
<blockquote>
You are given two true color images, the Source and the Palette. They do not necessarily have the same dimensions but it is guaranteed that their areas are the same, i.e. they have the same number of pixels.

Your task is to create an algorithm that makes the most accurate looking copy of the Source by only using the pixels in the Palette. Each pixel in the Palette must be used exactly once in a unique position in this copy. The copy must have the same dimensions as the Source.

-- <a href="https://codegolf.stackexchange.com/questions/33172/american-gothic-in-the-palette-of-mona-lisa-rearrange-the-pixels">American Gothic in the palette of Mona Lisa: Rearrange the pixels</a>
</blockquote>
]]></summary><content type="html"><![CDATA[<p>Today's task comes from the <a href="https://codegolf.stackexchange.com/">Code Golf StackExchange</a>. The idea behind <a href="https://en.wikipedia.org/wiki/code_golf">code golf</a> is to write a program with as few characters as possible, often rendering the code nigh on unreadable. Luckily, the same StackExchange also host popularity contests, one of which is the inspiration behind today's post:</p>
<blockquote>
You are given two true color images, the Source and the Palette. They do not necessarily have the same dimensions but it is guaranteed that their areas are the same, i.e. they have the same number of pixels.

Your task is to create an algorithm that makes the most accurate looking copy of the Source by only using the pixels in the Palette. Each pixel in the Palette must be used exactly once in a unique position in this copy. The copy must have the same dimensions as the Source.

-- <a href="https://codegolf.stackexchange.com/questions/33172/american-gothic-in-the-palette-of-mona-lisa-rearrange-the-pixels">American Gothic in the palette of Mona Lisa: Rearrange the pixels</a>
</blockquote>
<!--more-->
<p>Specifically for this post, we'll be using two source images, although for testing I had a whole pile more:</p>
<table>
    <tr>
        <td>
<a data-toggle="lightbox" href="http://blog.jverkamp.com/2014/12/23/palette-swapping/mona-lisa.png"><img src="http://blog.jverkamp.com/2014/12/23/palette-swapping/mona-lisa.png" /></a> <br />
-- <a href="https://en.wikipedia.org/wiki/Mona_Lisa">Mona Lisa</a> by <a href="https://en.wikipedia.org/wiki/Leonardo_da Vinci">Leonardo da Vinci</a>, c. 1503-1506
        </td><td>
<a data-toggle="lightbox" href="http://blog.jverkamp.com/2014/12/23/palette-swapping/scream.png"><img src="http://blog.jverkamp.com/2014/12/23/palette-swapping/scream.png" /></a> <br />
-- <a href="https://en.wikipedia.org/wiki/The_Scream">The Scream</a> by <a href="https://en.wikipedia.org/wiki/Edvard_Munch">Edvard Munch</a>, 1893
        </td>
    </tr>
</table>
<p>There are a bunch of different ways to solve this, but today we'll go through three of them:</p>
<ul>
    <li>Sort the colors in both images</li>
    <li>Swap pixels until the image is 'close enough'</li>
    <li>Fill in pixels greedily</li>
</ul>
<h2>Sort the colors in both images</h2>
<p>The first algorithm sounds crazy until you try it. In psuedocode:</p>
<ol>
    <li>Create a list of pixels from each image</li>
    <li>Sort the two lists by a given comparator</li>
    <li>For each pair of pixels in the two lists, take the color from the target image and the location from the source image</li>
</ol>
<p>And that's actually it. It turns out the code is just about as simple, with most of the length going into loading and saving the images and format juggling. First, we want a way of representing pixels which in this context are a color and a location:</p>
<pre class="scheme"><code>; A color with a location
(struct pixel (x y c) #:transparent)

; Sorting function based on grayscale value
(define (pixel&lt;?/grayscale p1 p2)
    (&lt; (apply + (flvector-&gt;list (pixel-c p1)))
       (apply + (flvector-&gt;list (pixel-c p2)))))</code></pre>
<p>We'll use <code>pixel&lt;?/grayscale</code> as a basic sorting function. It works well enough, although it could probably be tuned to more accurately model human vision.</p>
<p>Next, the pièce de résistance:</p>
<pre class="scheme"><code>; Recolor an image by sorting the pixels in both images
(define (recolor/sort original-src target-src
                      #:pixel&lt;? [pixel&lt;? pixel&lt;?/grayscale])
  (define original (load-flomap original-src))
  (define target (load-flomap target-src))

  ; Generate a list of pixels in each image
  (define (pixel-list fm)
    (for*/list ([x (in-range (flomap-width fm))]
                [y (in-range (flomap-height fm))])
      (pixel x y (flomap-ref* fm x y))))

  (define original-pixels (pixel-list original))
  (define target-pixels (pixel-list target))

  ; Sort both lists by the given sorting function
  (define sorted-original-pixels (sort original-pixels pixel&lt;?))
  (define sorted-target-pixels (sort target-pixels pixel&lt;?))

  ; Build a map from source xy to list index to target color
  (define transition-hash
    (for/fold ([h (hash)])
              ([original-pixel (in-list sorted-original-pixels)]
               [target-pixel (in-list sorted-target-pixels)])
      (hash-set h
                (list (pixel-x original-pixel)
                      (pixel-y original-pixel))
                (pixel-c target-pixel))))

  ; Build the new image from that transition matrix
  (flomap-&gt;bitmap
   (build-flomap*
    (flomap-components original)
    (flomap-width original) (flomap-height original)
    (λ (x y)
      (hash-ref transition-hash (list x y))))))</code></pre>
<p>Going through the commented blocks, we have a fairly direct match for the psuedocode. One difference is because of the structure of the <code><a href="http://docs.racket-lang.org/search/index.html?q=build-flomap*">build-flomap*</a></code> function. Since it's expects a generator rather than allowing us to generate arbitrary points, it's easier to make a map first. Still, about the same.</p>
<p>And when you apply it to the source images above?</p>
<table>
    <tr>
        <td>
            <a data-toggle="lightbox" href="http://blog.jverkamp.com/2014/12/23/palette-swapping/mona-lisa_scream_sort.png"><img src="http://blog.jverkamp.com/2014/12/23/palette-swapping/mona-lisa_scream_sort.png" /></a>
        </td><td>
            <a data-toggle="lightbox" href="http://blog.jverkamp.com/2014/12/23/palette-swapping/scream_mona-lisa_sort.png"><img src="http://blog.jverkamp.com/2014/12/23/palette-swapping/scream_mona-lisa_sort.png" /></a>
        </td>
    </tr>
</table>
<p>That's actually really cool. It's really interesting how sorting by the grayscale values ends up recoloring the images while preserving small details in the grain of the background. Very neat. Even cooler, it's wicked fast. Since sorting is one of the more well understood problems in computer science, there are well known algorithms to use. In this case, our runtime is probably <span>\( \mathcal{O}(n\log{}n) \)</span> (with <em>n</em> as the number of pixels), since that is the runtime for the sort and both loading and writing the image are  <span>\( \mathcal{O}(n) \)</span>.</p>
<h2>Swap pixels until the image is 'close enough'</h2>
<p>Okay, that was straight forward. Let's see if we can do something different. This time, let's just brute force the problem. Rather than systematically dealing with the entire image at once:</p>
<ol>
    <li>Scramble the pixels of the target image</li>
    <li>Set <code>counter = 0</code></li>
    <li>While <code>counter</code> &lt; <code>threshold</code>
        <ol>
            <li>Choose two random pixels</li>
            <li>Calculate the 'error' of the image with the pixels at their current location, and the error with those two pixels swapped</li>
            <li>If the swapped error is lower, swap the pixels and set <code>counter = 0</code>; otherwise, increment <code>counter</code></li>
        </ol>
    </li>
</ol>
<p>First, let's define an error function based on the distance between two colors in RGB space (again, there are better functions we could use here):</p>
<pre class="scheme"><code>; Find the distance between two flvectors
(define (fl-distance fl1 fl2)
  (sqrt (for/sum ([a (in-vector (flvector-&gt;vector fl1))]
                  [b (in-vector (flvector-&gt;vector fl2))])
          (sqr (- a b)))))

; Simple error function based on RGB distance
(define (error/rgb-distance original-fm target-fm color-pixel location-pixel)
    (match-define (pixel x y _) location-pixel)
    (match-define (pixel _ _ c) color-pixel)
    (fl-distance (flomap-ref* original-fm x y) c))</code></pre>
<p>Using that, we can  the algorithm fairly directly into Racket:</p>
<pre class="scheme"><code>; Recolor an image by randomly swapping pixels based on improving error
(define (recolor/swap original-src target-src
                      #:threshold [threshold 100]
                      #:error-function [err error/rgb-distance])

  (define original (load-flomap original-src))
  (define target (load-flomap target-src))

  (define width (flomap-width original))
  (define height (flomap-height original))

  ; Generate a 2d vector of pixels
  (define pixels
    (list-&gt;vector
     (shuffle
      (for*/list ([y (in-range (flomap-height target))]
                  [x (in-range (flomap-width target))])
        (flomap-ref* target x y)))))

  ; Get/set a pixel in the pixel map
  (define (get x y)
    (pixel x y (vector-ref pixels (+ x (* width y)))))

  (define (set! x y c)
    (vector-set! pixels (+ x (* width y)) c))

  ; Get a random pixel (sized from the original image)
  (define (rnd) (get (random width) (random height)))

  ; Keep swapping pixels until we get a certain number of non-swaps in a row
  (let loop ([swap-count 0] [non-swap-count 0])
    (define p1 (rnd))
    (define p2 (rnd))

    (cond
      ; Haven't swapped recently, return the result
      [(&gt;= non-swap-count threshold)
       (flomap-&gt;bitmap
        (build-flomap*
         (flomap-components original)
         (flomap-width original) (flomap-height original)
         (λ (x y)
           (pixel-c (get x y)))))]
      ; Swap is better, swap and reset count
      [(&lt; (+ (err original target p1 p2) (err original target p2 p1))
          (+ (err original target p1 p1) (err original target p2 p2)))

       (set! (pixel-x p1) (pixel-y p1) (pixel-c p2))
       (set! (pixel-x p2) (pixel-y p2) (pixel-c p1))
       (loop (+ swap-count 1) 0)]
      ; Swap is worse, just count
      [else
       (loop swap-count (+ non-swap-count 1))])))</code></pre>
<p>To start with, let's go for the default threshold of 100 consecutive errors:</p>
<table>
    <tr>
        <td>
            <a data-toggle="lightbox" href="http://blog.jverkamp.com/2014/12/23/palette-swapping/mona-lisa_scream_swap-100.png"><img src="http://blog.jverkamp.com/2014/12/23/palette-swapping/mona-lisa_scream_swap-100.png" /></a>
        </td><td>
            <a data-toggle="lightbox" href="http://blog.jverkamp.com/2014/12/23/palette-swapping/scream_mona-lisa_swap-100.png"><img src="http://blog.jverkamp.com/2014/12/23/palette-swapping/scream_mona-lisa_swap-100.png" /></a>
        </td>
    </tr>
</table>
<p>It's a little grainy, mostly because you actually get a random spike of 100 error free swaps fairly easily (it turns out 'random' isn't as uniform as most people think). Let's try cranking the threshold up to a thousand instead:</p>
<table>
    <tr>
        <td>
            <a data-toggle="lightbox" href="http://blog.jverkamp.com/2014/12/23/palette-swapping/mona-lisa_scream_swap-1k.png"><img src="http://blog.jverkamp.com/2014/12/23/palette-swapping/mona-lisa_scream_swap-1k.png" /></a>
        </td><td>
            <a data-toggle="lightbox" href="http://blog.jverkamp.com/2014/12/23/palette-swapping/scream_mona-lisa_swap-1k.png"><img src="http://blog.jverkamp.com/2014/12/23/palette-swapping/scream_mona-lisa_swap-1k.png" /></a>
        </td>
    </tr>
</table>
<p>That's a lot better for The Scream, but now the Mona Lisa is having some issues with the red in hear hair. It turns out there's a reasonable amount of brown, but too much red so they're both fairly close in grayscale distance. Perhaps a better error metric would work better.</p>
<p>Also, it takes a lot longer. While sorting worked in seconds and 100 took about 30 seconds, 1000 took about 5 minutes per image. Especially in The Scream recolored, the different in quality is obvious, but the cost really isn't worth it when you compare to how just sorting the pixels did.</p>
<p>Alternatively, you can try a different error function. For example, this one takes the weighted average of a 3x3 area rather than a single pixel (threshold = 1000).</p>
<pre class="scheme"><code>; Slightly more complicated error function takes original image average into account
(define (error/rgb-distance/average
         original-fm target-fm
         color-pixel location-pixel)
  (match-define (pixel x y _) location-pixel)
  (match-define (pixel _ _ c) color-pixel)
  (fl-distance (flvector-scale
                (foldl flvector+
                       (flomap-ref* original-fm x y)
                       (for*/list ([xd (in-range -1 2)] [yd (in-range -1 2)])
                         (flomap-ref* original-fm (+ x xd) (+ y yd))))
                (/ 1.0 9.0))
               c))</code></pre>
<table>
    <tr>
        <td>
            <a data-toggle="lightbox" href="http://blog.jverkamp.com/2014/12/23/palette-swapping/mona-lisa_scream_swap-1k-average.png"><img src="http://blog.jverkamp.com/2014/12/23/palette-swapping/mona-lisa_scream_swap-1k-average.png" /></a>
        </td><td>
            <a data-toggle="lightbox" href="http://blog.jverkamp.com/2014/12/23/palette-swapping/scream_mona-lisa_swap-1k-average.png"><img src="http://blog.jverkamp.com/2014/12/23/palette-swapping/scream_mona-lisa_swap-1k-average.png" /></a>
        </td>
    </tr>
</table>
<p>Mostly, it just made it blurry. Which makes sense, since we're comparing regions rather than a single pixel, so edges are less heavily influential than they were. So it goes.</p>
<h2>Fill in pixels greedily</h2>
<p>The third and final option was actually the first one that I came up with:</p>
<ol>
    <li>Generate a list of all colors in the target image</li>
    <li>For each pixel in the source image:
        <ol>
            <li>Find the most similar color in the target list</li>
            <li>Place that color in the result</li>
            <li>Remove it from the target list</li>
        </ol>
    </li>
</ol>
<p>As a <a href="https://en.wikipedia.org/wiki/greedy_algorithm">greedy algorithm</a>, it's theoretically fast but likely not optimal. What you end up getting is really good results for the first part of the image but increasingly bad results as the images diverge.</p>
<p>One neat trick I did here was that I could have just run from the top of the image down. But that would have lost out on a lot of the detail from the center of the image. So instead, I used the <code><a href="http://docs.racket-lang.org/search/index.html?q=racket/generator">racket/generator</a></code> library to make this neat gem:</p>
<pre class="scheme"><code>; Spiral outwards from (0,0) in squares
(define (in-spiral [radius +inf.0])
  (in-generator
    (yield (list 0 0))
    (for ([r (in-range 1 radius)])
      (yield (list (- r) (- r)))
      (yield (list (- r) r))
      (yield (list r (- r)))
      (yield (list r r))
      (for ([d (in-range (+ (- r) 1) r)])
        (yield (list (- r) d))
        (yield (list r     d))
        (yield (list d (- r)))
        (yield (list d r))))))</code></pre>
<p>That's much more Pythonic than Rackety, but it does work. Essentially, you get a square spiral moving out from the origin, first every pixel with x or y 1 different from the origin, then 2, then 3, etc. Neat.</p>
<p>Using that, we can  the psuedocode into Racket:</p>
<pre class="scheme"><code>; Recolor an image finding the best pixels from the center out
(define (recolor/fill/slow original-src target-src)
  (define original (load-flomap original-src))
  (define target (load-flomap target-src))

  (define width (flomap-width original))
  (define height (flomap-height original))

  ; Generate a list of target colors
  (define colors
    (for*/list ([y (in-range (flomap-height target))]
                [x (in-range (flomap-width target))])
      (flomap-ref* target x y)))

  ; Generate a 2d vector of pixels
  (define result
    (for*/vector ([y (in-range (flomap-height original))]
                  [x (in-range (flomap-width original))])
      #f))

  ; Get/set a pixel in the pixel map
  (define (result-get x y)
    (vector-ref result (+ x (* width y))))

  (define (result-set! x y c)
    (vector-set! result (+ x (* width y)) c))

  ; Spiral outwards from the center of the image
  (for ([pt (in-spiral (+ 2 (quotient (max width height) 2)))])
    ; Convert to image coordinates and verify that we're in the image
    (define x (+ (first pt) (quotient width 2)))
    (define y (+ (second pt) (quotient height 2)))
    (when (and (&gt;= x 0) (&lt; x width) (&gt;= y 0) (&lt; y height))
      ; Get the source color at that point
      (define target-color (flomap-ref* original x y))

      ; Choose the closest remaining color
      (define-values (_ color)
        (for/fold ([minimum-distance +inf.0] [best-color #f])
                  ([color (in-list colors)])
          (define new-distance (fl-distance target-color color))
          (if (&lt; new-distance minimum-distance)
              (values new-distance color)
              (values minimum-distance best-color))))

      ; Remove that color from the list to place, add it to the result
      (set! colors (remove color colors))
      (result-set! x y color)))

  ; Turn that into a bitmap
  (flomap-&gt;bitmap
   (build-flomap*
    (flomap-components original)
    (flomap-width original) (flomap-height original)
    result-get)))</code></pre>
<p>That's pretty straight forward. The most interesting bit is probably the <code><a href="http://docs.racket-lang.org/search/index.html?q=for/fold">for/fold</a></code> in the middle. It's a quick way of finding the minimum value in a list where the value itself isn't what you're interested in. Another option would have been to <code>sort</code> with a custom sorting function, but that would in this case be slower (<span>\( \mathcal{O}(n) \)</span> versus <span>\( \mathcal{O}(n\log{}n) \)</span>).</p>
<table>
    <tr>
        <td>
            <a data-toggle="lightbox" href="http://blog.jverkamp.com/2014/12/23/palette-swapping/mona-lisa_scream_fill.png"><img src="http://blog.jverkamp.com/2014/12/23/palette-swapping/mona-lisa_scream_fill.png" /></a>
        </td><td>
            <a data-toggle="lightbox" href="http://blog.jverkamp.com/2014/12/23/palette-swapping/scream_mona-lisa_fill.png"><img src="http://blog.jverkamp.com/2014/12/23/palette-swapping/scream_mona-lisa_fill.png" /></a>
        </td>
    </tr>
</table>
<p>Okay, that's just weird. :) Basically, there are enough shared pixels in the two images that you can more or less reconstruct the center sections. After that though... All bets are off. You didn't get this in either of the previous solutions because in the sorting case, they ended up spread throughout similarly color regions while in swapping they just didn't move from where they started.</p>
<p>Also, there's another problem. It's slow. Since this was actually the first thing that I worked on, I did wanit to take a little bit of time to make it faster:</p>
<h2>Filling pixels: Data structures strike back</h2>
<p>The main problem with the fill solution is that for each pixel <span>\( \mathcal{O}(n) \)</span>, you're going to run through every pixel in the target image (another <span>\( \mathcal{O}(n) \)</span>), resulting in an <span>\( \mathcal{O}(n^2) \)</span> runtime. Not particularly great. Especially because we shouldn't have to scan through the entire list (or even the average of half of it) to find the closest matching pixel.</p>
<p>Instead, we should be able to do something like a <a href="https://en.wikipedia.org/wiki/binary_search">binary search</a>:</p>
<ol>
    <li>Start with a lower and upper bound of the entire list</li>
    <li>Until we find the closest color:
        <ol>
            <li>Find the midpoint of the current bounds</li>
            <li>If the target color is 'less than' that, set the upper bound to the midpoint, otherwise set the lower bound to the midpoint</li>
            <li>Repeat</li>
        </ol>
    </li>
</ol>
<p>If we could get something like that working, we would only need <span>\( \mathcal{O}(\log{}n) \)</span> per lookup, reducing the runtime to the same as the <code>recolor/sort</code> method. And... it turns out that Racket has just the sort of data strucure we need: a <a href="https://en.wikipedia.org/wiki/splay_tree">splay tree</a>. Specifically, a splay tree is a binary tree (enabling binary search), that self-adjusts (to avoid worst case badly unbalanced trees), which has the additional property of making recently accessed elements quick to access. That's helpful in this case, since we'll have blocks of similar colors, which are close in the tree. Neat!</p>
<p>In Racket, to build a splay tree, we need to set up a couple of things in the <code><a href="http://docs.racket-lang.org/search/index.html?q=data/order">data/order</a></code> and <code><a href="http://docs.racket-lang.org/search/index.html?q=data/splay-tree">data/splay-tree</a></code> modules:</p>
<pre class="scheme"><code>; Find the distance between two flvectors
(define (fl-distance fl1 fl2)
  (sqrt (for/sum ([a (in-vector (flvector-&gt;vector fl1))]
                  [b (in-vector (flvector-&gt;vector fl2))])
          (sqr (- a b)))))

; Test if two flvectors are equal
(define (flvector=? flv1 flv2)
  (not (for/first ([v1 (in-flvector flv1)]
                   [v2 (in-flvector flv2)]
                   #:when (not (= v1 v2)))
         #t)))

; Test if one flvector is less than another by comparing each channel in order
(define (flvector&lt;? flv1 flv2)
  (for/first ([v1 (in-flvector flv1)]
              [v2 (in-flvector flv2)]
              #:when (not (= v1 v2)))
    (&lt; v1 v2)))</code></pre>
<p>Then, when loading the colors instead of building a list, we can make the splay tree:</p>
<pre class="scheme"><code>; Generate a list of target colors
(define colors
  (make-splay-tree
   (order 'pixel-grayscale-order
          flvector?
          flvector=?
          flvector&lt;?)))

(for* ([y (in-range (flomap-height target))]
       [x (in-range (flomap-width target))])

  (define color (flomap-ref* target x y))
  (define count (+ 1 (splay-tree-ref colors color 0)))
  (splay-tree-set! colors color count))</code></pre>
<p>One thing we didn't have to do earlier was to keep track of counts for each pixel. In a list, we just duplicated the elements, for the splay tree this won't work as well.</p>
<p>Then, in the <code>recolor/fill</code> method, we tweak the color choosing function (previously the <code>for/fold</code>):</p>
<pre class="scheme"><code>...

; Get the source color at that point
(define target-color (flomap-ref* original x y))

; Choose the closest remaining color
(define iter/&gt;= (splay-tree-iterate-least/&gt;=? colors target-color))
(define iter/&lt;= (splay-tree-iterate-greatest/&lt;=? colors target-color))

(define color
  (cond
    [(and iter/&gt;= iter/&lt;=)
     (define c1 (splay-tree-iterate-key colors iter/&gt;=))
     (define c2 (splay-tree-iterate-key colors iter/&lt;=))
     (if (&lt; (fl-distance target-color c1)
            (fl-distance target-color c2))
         c1
         c2)]
    [iter/&gt;= (splay-tree-iterate-key colors iter/&gt;=)]
    [iter/&lt;= (splay-tree-iterate-key colors iter/&lt;=)]))

(define count (splay-tree-ref colors color))
(if (= count 1)
    (splay-tree-remove! colors color)
    (splay-tree-set! colors color (- count 1)))

(result-set! x y color)

...</code></pre>
<p>The method for finding the smallest element greater than / largest less than a given element that isn't actually in the tree is a little weird, but it works out in the end. That's one nice thing about how crosslinked all of the Racket documentation is, I could just keep looking until I found the functions that I needed.</p>
<p>Give this a run... And it's a <em>lot</em> faster. Rather than an hour or more to run, it takes only seconds. It's a little bit slower than the sort (since the data structure is a little more complicated), but well within the same order of runtime.</p>
<p>Yet more evidence that perhaps you should pay attention in data structures class. :)</p>
<h2>Conclusion</h2>
<p>And, that's it. That was a lot of fun to work out. I really love how the simplest algorithm is also the fastest and has arguably the best results (at least for these two images). So cool!</p>
<p>If you would like to check out the source code for today's post, you can do so here: <a href="https://github.com/jpverkamp/small-projects/tree/master/blog/palette-swap">palette-swap</a>. If you place multiple PNG images with the same number of pixels (aspect ratios don't matter) in the <code>input</code> subdirectory and run <code>test.rkt</code> it will generate a whole pile of images like you've seen here.</p>]]></content></entry><entry><title>NaNoWriMo 2014 Winner!</title><link href="http://blog.jverkamp.com/2014/11/30/nanowrimo-2014-winner" /><id>urn:uuid:7f3cf84a-23c9-507d-b94e-0a28ebc04ae7</id><updated>2014-11-30T00:00:00Z</updated><summary type="html"><![CDATA[<p><a data-toggle="lightbox" href="http://blog.jverkamp.com/2014/11/30/nanowrimo-2014-winner/2014-Winner-NaNoWriMo.jpg"><img src="http://blog.jverkamp.com/2014/11/30/nanowrimo-2014-winner/2014-Winner-NaNoWriMo.jpg" /></a></p>
<p>Just under the wire this year.</p>
]]></summary><content type="html"><![CDATA[<p><a data-toggle="lightbox" href="http://blog.jverkamp.com/2014/11/30/nanowrimo-2014-winner/2014-Winner-NaNoWriMo.jpg"><img src="http://blog.jverkamp.com/2014/11/30/nanowrimo-2014-winner/2014-Winner-NaNoWriMo.jpg" /></a></p>
<p>Just under the wire this year.</p>
<!--more-->
<p>It took a bit to get going, given that I basically restarted on Day 7:</p>
<p><a data-toggle="lightbox" href="http://blog.jverkamp.com/2014/11/30/nanowrimo-2014-winner/2014-Progress-NaNoWriMo.png"><img src="http://blog.jverkamp.com/2014/11/30/nanowrimo-2014-winner/2014-Progress-NaNoWriMo.png" /></a></p>
<p>Basically, I wrote 3000 words each of the first three days and then settled in for 2000 words a day after that. I had one day where I just couldn't make it past 1000. So it goes.</p>
<p>As far as overall progress goes, I'm most of the way through chapter 10 of a planned 19 (there's something to be said for outlining ahead of time after all...), so I should be done around Christmas.</p>
<p>Onwards and upwards!</p>]]></content></entry><entry><title>How to Train Your Dragon 2 (DVD)</title><link href="http://blog.jverkamp.com/2014/11/25/how-to-train-your-dragon-2-dvd" /><id>urn:uuid:1e52fbad-217a-f9d2-e1b5-2cfc56a8ec44</id><updated>2014-11-25T00:00:00Z</updated><summary type="html"><![CDATA[<p><a data-toggle="lightbox" href="http://blog.jverkamp.com/2014/11/25/how-to-train-your-dragon-2-dvd/how-to-train-your-dragon-2.jpg" class="pull-left"><img src="http://blog.jverkamp.com/2014/11/25/how-to-train-your-dragon-2-dvd/how-to-train-your-dragon-2.jpg" /></a></p>
<p>I really liked the first How to Train Your Dragon. It was cute and it was fun. Cute, the sequel had. Fun, more or less. But it was still missing something.</p>
]]></summary><content type="html"><![CDATA[<p><a data-toggle="lightbox" href="http://blog.jverkamp.com/2014/11/25/how-to-train-your-dragon-2-dvd/how-to-train-your-dragon-2.jpg" class="pull-left"><img src="http://blog.jverkamp.com/2014/11/25/how-to-train-your-dragon-2-dvd/how-to-train-your-dragon-2.jpg" /></a></p>
<p>I really liked the first How to Train Your Dragon. It was cute and it was fun. Cute, the sequel had. Fun, more or less. But it was still missing something.</p>
<!--more-->
<p>Things I didn't care for about the movie:</p>
<p>The 'big twist' didn't make much sense. Why in the world didn't she come home?</p>
<p>The alphas. The dragons in this universe have always been some mix of dogs and cats. Having a dominating influence, sure. But they're so different. How in the world does that work? And they're referred to as queen bees essentially?</p>
<p>How does Toothless do his thing? If it was that easy for any dragon to stand in, why hasn't that already happened?</p>
<p>The vying for the one woman's vikings attention was just weird. That could have been done better.</p>
<p>Things I did like:</p>
<p>It was interesting to see that they didn't keep away from death. There wasn't any blood either time, but the deaths in the movie still hit fairly hard--and they didn't undo them. Too often in films like this, there's  some surprise solution.</p>
<p>So it goes. It was still a pretty movie. I liked the animation. I just thought it could have been so much more...</p>
<div><h3 class="ranking-title">2014 Movie Rankings</h3><ol><li><a href="http://blog.jverkamp.com/2014/02/15/the-lego-movie">The Lego Movie</a></li><li><a href="http://blog.jverkamp.com/2014/04/05/captain-america-the-winter-soldier">Captain America: The Winter Soldier</a></li><li><a href="http://blog.jverkamp.com/2014/10/28/edge-of-tomorrow-dvd">Edge of Tomorrow (DVD)</a></li><li><a href="http://blog.jverkamp.com/2014/08/05/guardians-of-the-galaxy">Guardians of the Galaxy</a></li><li><a href="http://blog.jverkamp.com/2014/06/08/x-men-days-of-future-past">X-Men: Days of Future Past</a></li><li><a href="http://blog.jverkamp.com/2014/06/14/maleficent">Maleficent</a></li><li><a href="http://blog.jverkamp.com/2014/11/25/how-to-train-your-dragon-2-dvd">How to Train Your Dragon 2 (DVD)</a></li><li><a href="http://blog.jverkamp.com/2014/11/01/i-frankenstein-dvd">I, Frankenstein (DVD)</a></li><li><a href="http://blog.jverkamp.com/2014/11/08/the-giver-dvd">The Giver (DVD)</a></li><li><a href="http://blog.jverkamp.com/2014/07/26/lucy">Lucy</a></li><li><a href="http://blog.jverkamp.com/2014/05/10/the-amazing-spider-man-2">The Amazing Spider-Man 2</a></li><li><a href="http://blog.jverkamp.com/2014/03/29/divergent">Divergent</a></li></ol></div>]]></content></entry><entry><title>A "one" line echo server using let in Racket</title><link href="http://blog.jverkamp.com/2014/11/13/a-one-line-echo-server-using-let-in-racket" /><id>urn:uuid:6f76d2a6-0b14-4d60-7cba-7ede454fd445</id><updated>2014-11-13T00:00:00Z</updated><summary type="html"><![CDATA[<p>A recent post on Reddit caught my attention: <a href="https://www.reddit.com/r/Python/comments/2m6d4z/a_one_line_echo_server_using_let_in_python/">A “One” Line Echo Server Using “let” in Python</a> (<a href="http://sigusr2.net/one-line-echo-server-using-let-python.html">original article</a>). The basic idea is that you can use Python's <code>lambda</code> with default arguments as a <code>let</code>, which in turn allows you to write a simple <a href="https://en.wikipedia.org/wiki/echo_server">echo server</a> in <del>one line</del> a nicely functional style.</p>
]]></summary><content type="html"><![CDATA[<p>A recent post on Reddit caught my attention: <a href="https://www.reddit.com/r/Python/comments/2m6d4z/a_one_line_echo_server_using_let_in_python/">A “One” Line Echo Server Using “let” in Python</a> (<a href="http://sigusr2.net/one-line-echo-server-using-let-python.html">original article</a>). The basic idea is that you can use Python's <code>lambda</code> with default arguments as a <code>let</code>, which in turn allows you to write a simple <a href="https://en.wikipedia.org/wiki/echo_server">echo server</a> in <del>one line</del> a nicely functional style.</p>
<!--more-->
<p>To start with, here is their original code:</p>
<pre class="scheme"><code>import socket
import itertools

(lambda port=9000, s=socket.socket(socket.AF_INET, socket.SOCK_STREAM):
      s.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1) == None and
      s.bind(('', port)) == None and
      s.listen(5) == None and
      list(map(lambda c:
                  c[0].sendall(c[0].recv(1024)) and
                  c[0].close(),
               (s.accept() for _ in itertools.count(1)))))()</code></pre>
<p>It's certainly not very Pythonic, but there are a few neat tricks in there:</p>
<ul>
    <li>Using <code>lambda</code> with default arguments to define things</li>
    <li>Using <code>and</code> to sequence function calls</li>
    <li>Using list comprehension to handle the response threads</li>
</ul>
<p>It got me thinking though, what would the same sort of code look like in Racket?</p>
<p>Well, one of the draws Racket advertises (rightfully so) on its <a href="http://racket-lang.org">home page</a> is that it comes <a href="http://docs.racket-lang.org/">batteries included</a>. That means that if you're using <code><a href="http://docs.racket-lang.org/search/index.html?q=#lang racket">#lang racket</a></code>, you get a bunch of useful functions for TCP built in. Let's start with a fairly direct translation:</p>
<pre class="scheme"><code>(let ([s (tcp-listen 9000)])
  (sequence-&gt;list
   (sequence-map
    (λ (in+out) (thread (thunk (apply copy-port in+out))))
    (in-producer (thunk (call-with-values (thunk (tcp-accept s)) list))))))</code></pre>
<p>Okay, so that looks really weird. But it's a fairly straight forward translation. A few of the lines got folded into the <code><a href="http://docs.racket-lang.org/search/index.html?q=tcp-connect">tcp-connect</a></code> call and the list comprehension became a <code><a href="http://docs.racket-lang.org/search/index.html?q=in-producer">in-producer</a></code> <code><a href="http://docs.racket-lang.org/search/index.html?q=sequence">sequence</a></code>. It's kicked off via <code><a href="http://docs.racket-lang.org/search/index.html?q=sequence-map">sequence-map</a></code> and forced to run to termination (which will never happend) with <code><a href="http://docs.racket-lang.org/search/index.html?q=sequence->list">sequence->list</a></code>. Unfortunately, it has the same problem that the original Python code does. Since we're constructing a list, we'll eventually run out of memory.</p>
<p>One interesting addition it does that the Python version didn't is that it both allows for multiple lines (the Python version would read one packet and hang up) and any amount of data. I've never actually used the <code><a href="http://docs.racket-lang.org/search/index.html?q=copy-port">copy-port</a></code> function before. It's really cool!</p>
<p>If we broaden our definition of "one" line a little more to allow <code><a href="http://docs.racket-lang.org/search/index.html?q=for">for</a></code> sequences (which aren't really that different under the hood), we can clean it up a bit to this:</p>
<pre class="scheme"><code>(let ([s (tcp-listen 9000)])
  (for ([(in out) (in-producer (thunk (tcp-accept s)))])
    (thread (thunk (copy-port in out)))))</code></pre>
<p>This is especially nice, since <code><a href="http://docs.racket-lang.org/search/index.html?q=in-producer">in-producer</a></code> and <code><a href="http://docs.racket-lang.org/search/index.html?q=for">for</a></code> work together to deal with the multiple values from <code><a href="http://docs.racket-lang.org/search/index.html?q=tcp-accept">tcp-accept</a></code>. Very clean.</p>
<p>Heck, if you want to get a little less clear about it, you can actually fold the <code>let</code> into the <code>for</code>:</p>
<pre class="scheme"><code>(for* ([s (in-value (tcp-listen 9000))]
       [(in out) (in-producer (thunk (tcp-accept s)))])
  (thread (thunk (copy-port in out))))</code></pre>
<p>This works because <code>for*</code> is actually a nested loop. So in the outer loop, it runs over the single value of the open socket. The inner loop then runs forever, accepting new incoming connections.</p>
<p>Actually, I may have to put this in my quick-scripts toolbox. There are a fair few times when writing networking clients that having a dead simple echo server could come in handy.</p>]]></content></entry><entry><title>NaNoWriMo 2014 Update</title><link href="http://blog.jverkamp.com/2014/11/12/nanowrimo-2014-update" /><id>urn:uuid:1c4e4885-4961-9116-19f0-d6c782dc7170</id><updated>2014-11-12T00:00:00Z</updated><summary type="html"><![CDATA[<p>They say a picture is worth a thousand words<span class="footnote"><sup><a href="#footnote-1">[1]</a></sup></span>:</p>
<p><a data-toggle="lightbox" href="http://blog.jverkamp.com/2014/11/12/nanowrimo-2014-update/nano.png"><img src="http://blog.jverkamp.com/2014/11/12/nanowrimo-2014-update/nano.png" /></a></p>
]]></summary><content type="html"><![CDATA[<p>They say a picture is worth a thousand words<span class="footnote"><sup><a href="#footnote-1">[1]</a></sup></span>:</p>
<p><a data-toggle="lightbox" href="http://blog.jverkamp.com/2014/11/12/nanowrimo-2014-update/nano.png"><img src="http://blog.jverkamp.com/2014/11/12/nanowrimo-2014-update/nano.png" /></a></p>
<!--more-->
<p>Yup, you're reading that right. Five days in and I decided to start over. Not only am I trying to write an entire novel<span class="footnote"><sup><a href="#footnote-2">[2]</a></sup></span> in a month, now I'm trying to do it in 23 days.</p>
<p>Basically, I got a few days in and realized that I was writing the same story I've written before. It had the same core of a story I wrote for The Gates of Heaven (not posted), the core as <a href="http://blog.jverkamp.com/category/writing/novels/confession">Confession</a>, the same as <a href="http://blog.jverkamp.com/category/writing/novels/computational-demonology">Computational Demonology</a>. In all three cases, the main character discovers the supernatural world and becomes a part of it.</p>
<p>Now don't get me wrong. I love that sort of story<span class="footnote"><sup><a href="#footnote-3">[3]</a></sup></span>. But I wanted to try something different. So I tossed out what I'd written, rebuilt the characters to fit the new world, and outlined a new story.</p>
<p><em>*le gasp*</em></p>
<p>Yes, I actually outlined a story. I don't know if I've mentioned it (I'm sure I have), but I'm generally a pants'er. As in fly-by-the-seat-of... But hey, let's try something new.</p>
<p><a data-toggle="lightbox" href="http://blog.jverkamp.com/2014/11/12/nanowrimo-2014-update/outline.png"><img src="http://blog.jverkamp.com/2014/11/12/nanowrimo-2014-update/outline.png" /></a></p>
<p>We have: target word counts, structural arcs, chapter titles (still making these up as I go), locations, times, characters, summaries, and effects. So far, it's actually going pretty well. I'm not great at estimating what is large enough to make a chapter. Live and learn.</p>
<p>At this point, I don't think I'm going to post the story while I'm writing it. If you'd like to read it though, post a comment or <a href="mailto:me@jverkamp.com">email me</a>. I'd love to have <del>beta</del> alpha readers and I can add you to the Google Doc.</p>]]></content></entry><entry><title>The Giver (DVD)</title><link href="http://blog.jverkamp.com/2014/11/08/the-giver-dvd" /><id>urn:uuid:aff73556-f50c-b67e-1f68-c6aceba55ef5</id><updated>2014-11-08T00:00:00Z</updated><summary type="html"><![CDATA[<p><a data-toggle="lightbox" href="http://blog.jverkamp.com/2014/11/08/the-giver-dvd/the-giver.jpg" class="pull-left"><img src="http://blog.jverkamp.com/2014/11/08/the-giver-dvd/the-giver.jpg" /></a></p>
<p>Apparently <a href="https://en.wikipedia.org/wiki/Jeff_Bridges">Jeff Bridges</a> has been trying to have The Giver turned into a movie for the better part of two decades. Originally, he wanted to have <a href="https://en.wikipedia.org/wiki/Lloyd_Bridges">his father</a> in the eponymous role. He even apparently went so far as to have a version filmed somewhere, although so far as I know that version has never been made publically available.</p>
<p>I wonder if that one diverged so much from the book?</p>
]]></summary><content type="html"><![CDATA[<p><a data-toggle="lightbox" href="http://blog.jverkamp.com/2014/11/08/the-giver-dvd/the-giver.jpg" class="pull-left"><img src="http://blog.jverkamp.com/2014/11/08/the-giver-dvd/the-giver.jpg" /></a></p>
<p>Apparently <a href="https://en.wikipedia.org/wiki/Jeff_Bridges">Jeff Bridges</a> has been trying to have The Giver turned into a movie for the better part of two decades. Originally, he wanted to have <a href="https://en.wikipedia.org/wiki/Lloyd_Bridges">his father</a> in the eponymous role. He even apparently went so far as to have a version filmed somewhere, although so far as I know that version has never been made publically available.</p>
<p>I wonder if that one diverged so much from the book?</p>
<!--more-->
<p>Now don't get me wrong. It's been rather a while since I've read the book. But there seemed to be rather a few minor changes. Most of them were fine; for example, I didn't mind that his first memory of pain wasn't a sunburn. But the ending was a bit rocky. After a certain point, I just kept expecting the film to be over. Eventually they got back on the rails, but it took a while.</p>
<p>One good part at least was that I think <a href="http://www.imdb.com/name/nm0000313">Jeff Bridges</a> was actually pretty good as The Giver. Just gruff and no-nonsense enough. He didn't have the odd accent from <a href="http://blog.jverkamp.com/2013/07/26/r-i-p-d">R.I.P.D.</a> and for once he didn't feel like another incarnation of <a href="https://en.wikipedia.org/wiki/The_Big Lebowski">the dude</a>. Also, it was interesting to see Taylor Swift in a film role, especially given that I didn't even know it was her until the credits.</p>
<p>Overall, I've seen worse movies. If this wasn't <em>the</em> film adaptation The Giver (given it took 20 years to make this one, we won't likely see another), I was hoping for more. What exactly, I couldn't tell you, but something more.</p>
<div><h3 class="ranking-title">2014 Movie Rankings</h3><ol><li><a href="http://blog.jverkamp.com/2014/02/15/the-lego-movie">The Lego Movie</a></li><li><a href="http://blog.jverkamp.com/2014/04/05/captain-america-the-winter-soldier">Captain America: The Winter Soldier</a></li><li><a href="http://blog.jverkamp.com/2014/10/28/edge-of-tomorrow-dvd">Edge of Tomorrow (DVD)</a></li><li><a href="http://blog.jverkamp.com/2014/08/05/guardians-of-the-galaxy">Guardians of the Galaxy</a></li><li><a href="http://blog.jverkamp.com/2014/06/08/x-men-days-of-future-past">X-Men: Days of Future Past</a></li><li><a href="http://blog.jverkamp.com/2014/06/14/maleficent">Maleficent</a></li><li><a href="http://blog.jverkamp.com/2014/11/01/i-frankenstein-dvd">I, Frankenstein (DVD)</a></li><li><a href="http://blog.jverkamp.com/2014/11/08/the-giver-dvd">The Giver (DVD)</a></li><li><a href="http://blog.jverkamp.com/2014/07/26/lucy">Lucy</a></li><li><a href="http://blog.jverkamp.com/2014/05/10/the-amazing-spider-man-2">The Amazing Spider-Man 2</a></li><li><a href="http://blog.jverkamp.com/2014/03/29/divergent">Divergent</a></li></ol></div>]]></content></entry><entry><title>Clockception</title><link href="http://blog.jverkamp.com/2014/11/04/clockception" /><id>urn:uuid:9a2e2d18-6c68-f33b-e456-aa1c1b531f62</id><updated>2014-11-04T09:00:00Z</updated><summary type="html"><![CDATA[<p>Let's talk about clocks.</p>
<p>We can draw traditional analog clocks<span class="footnote"><sup><a href="#footnote-1">[1]</a></sup></span>:</p>
<p><a data-toggle="lightbox" href="http://blog.jverkamp.com/2014/11/04/clockception/analog.png"><img src="http://blog.jverkamp.com/2014/11/04/clockception/analog.png" /></a></p>
<p>We can draw nice digital clocks:</p>
<pre>┌─┐  │ │ ─┐ ┌─┐
│ │└─┤    │ │ │
└─┘  │ │ ─┴─└─┘</pre>
<p>Or we can go downright mad and make clocks out of clocks:</p>
<p><a data-toggle="lightbox" href="http://blog.jverkamp.com/2014/11/04/clockception/clockception.png"><img src="http://blog.jverkamp.com/2014/11/04/clockception/clockception.png" /></a></p>
<p>Even animated!</p>
<p><a data-toggle="lightbox" href="http://blog.jverkamp.com/2014/11/04/clockception/animated.gif"><img src="http://blog.jverkamp.com/2014/11/04/clockception/animated.gif" /></a></p>
]]></summary><content type="html"><![CDATA[<p>Let's talk about clocks.</p>
<p>We can draw traditional analog clocks<span class="footnote"><sup><a href="#footnote-1">[1]</a></sup></span>:</p>
<p><a data-toggle="lightbox" href="http://blog.jverkamp.com/2014/11/04/clockception/analog.png"><img src="http://blog.jverkamp.com/2014/11/04/clockception/analog.png" /></a></p>
<p>We can draw nice digital clocks:</p>
<pre>┌─┐  │ │ ─┐ ┌─┐
│ │└─┤    │ │ │
└─┘  │ │ ─┴─└─┘</pre>
<p>Or we can go downright mad and make clocks out of clocks:</p>
<p><a data-toggle="lightbox" href="http://blog.jverkamp.com/2014/11/04/clockception/clockception.png"><img src="http://blog.jverkamp.com/2014/11/04/clockception/clockception.png" /></a></p>
<p>Even animated!</p>
<p><a data-toggle="lightbox" href="http://blog.jverkamp.com/2014/11/04/clockception/animated.gif"><img src="http://blog.jverkamp.com/2014/11/04/clockception/animated.gif" /></a></p>
<!--more-->
<p>I got the basic idea for this post from <a href="http://io9.com/these-stylish-minimalistic-clocks-let-you-tell-time-wit-1652202065">this post</a> on io9. That first clock ought to look awfully familiar (although theirs looks a bit better). Let's see how we can make one of our own.</p>
<p>First, some basic structure:</p>
<pre class="scheme"><code>(struct time-data (hour minute second) #:transparent)

(define (time hour minute [second #f])
  (time-data hour minute second))

(define current-size (make-parameter 30))</code></pre>
<p>This will represent the times that we are dealing with. I specifically broke the <code>time-data</code> structure and <code>time</code> function apart, since I wanted to have optional parameters. There is an <code>#:auto</code> option for struct fields, but it doesn't quite do what I want. Finally, <code>current-size</code> will be the width of each individual analog clock.</p>
<p>Speaking of which, let's draw some basic analog clocks. I went through several different Racket drawing libraries (<code><a href="http://docs.racket-lang.org/search/index.html?q=pict">pict</a></code>, (<code><a href="http://docs.racket-lang.org/search/index.html?q=2htdp/image">2htdp/image</a></code>, (<code><a href="http://docs.racket-lang.org/search/index.html?q=racket/draw">racket/draw</a></code>) before finally settling on <code><a href="http://docs.racket-lang.org/search/index.html?q=racket/draw">racket/draw</a></code>. I'm sure any of them could be used, but I just kept running into odd issues with coordinates.</p>
<pre class="scheme"><code>; Render a clock at the current-size
(define (analog-clock when)
  (match-define (time-data hour minute second) when)

  (define size (current-size))
  (define target (make-bitmap size size))
  (define dc (new bitmap-dc% [bitmap target]))

  (send dc set-pen "lightgray" 1 'solid)
  (send dc draw-ellipse 0 0 size size)
  (send dc set-pen "black" 1 'solid)

  ; Helper to draw a hand given a radius [0, 1.0] and angle
  ; Angle of 0 is upright, positive angles are clockwise
  (define (draw-hand! r θ)
    (define c (/ size 2))
    (define x (+ c (* 0.5 r size (cos θ))))
    (define y (+ c (* 0.5 r size (sin θ))))
    (send dc draw-line c c x y))

  (draw-hand! 0.8 (+ (* pi 1.5) (* 2 pi (/ minute 60))))
  (draw-hand! 0.7 (+ (* pi 1.5) (* 2 pi (/ hour 12))))

  (and second
       (begin
         (draw-hand! 0.9 (+ (* pi 1.5) (* 2 pi (/ second 60))))))

  target)</code></pre>
<p>The basic idea of <code>racket/draw</code> is that you have a sort of canvas (<code>target</code>) on which you can draw. You then issue a series of commands that either change your state (<code><a href="http://docs.racket-lang.org/search/index.html?q=set-pen">set-pen</a></code>) or draw (<code><a href="http://docs.racket-lang.org/search/index.html?q=draw-ellipse">draw-ellipse</a></code> and <code><a href="http://docs.racket-lang.org/search/index.html?q=draw-line">draw-line</a></code>). I did abstract a little bit the function to create the clock hands: <code>draw-hand!</code>, mostly so I wouldn't have to redo the centering offset (<code>c</code>, since <code>0,0</code> is in the top left, not the center as I'd hoped) and the <a href="https://en.wikipedia.org/wiki/trigonometry">trigonometry</a> to convert a radius and angle to x and y.</p>
<p>And that's actually all you need to make a basic clock:</p>
<pre class="scheme"><code> &gt; (analog-clock (time 4 10)) </code></pre>
<p><a data-toggle="lightbox" href="http://blog.jverkamp.com/2014/11/04/clockception/analog.png"><img src="http://blog.jverkamp.com/2014/11/04/clockception/analog.png" /></a></p>
<p>Straight forward enough. What's especially neat is that because radians cycle every two 2π rotations, you can put in some crazy times:</p>
<pre class="scheme"><code> &gt; (analog-clock (time 208 -350)) </code></pre>
<p><a data-toggle="lightbox" href="http://blog.jverkamp.com/2014/11/04/clockception/analog.png"><img src="http://blog.jverkamp.com/2014/11/04/clockception/analog.png" /></a></p>
<p>Cool. Okay, next step. Let's figure out how to animate these, so we can transition from one time to another. In this, I had two options. Either I could move as a clock moves (where the minute hand has to move an entire rotation for the hour hand to move 1/12) or independently (such that both hands move at the same speed). Because it's both less code and honestly works better in the final result, I went with the second option:</p>
<pre class="scheme"><code>; Render a sequence of frames animating a clock spinnging from one time to another
; Hands will always move clockwise but will both move at once (not as a normal clock)
(define (analog-frames α β frames)
  (match-define (time-data α-hour α-minute α-second) α)
  (match-define (time-data β-hour β-minute β-second) β)

  (let ([β-hour   (if (&gt;= β-hour α-hour)     β-hour    (+ β-hour 12))]
        [β-minute (if (&gt;= β-minute α-minute) β-minute (+ β-minute 60))]
        [β-second (and α-second β-second
                       (if (&gt;= β-second α-second) β-second (+ β-second 60)))])

    (for/list ([i (in-range frames)])
      (define frame-multiplier (/ i frames))

      (define hour (+ α-hour (* frame-multiplier (- β-hour α-hour))))
      (define minute (+ α-minute (* frame-multiplier (- β-minute α-minute))))

      (define second
        (and α-second β-second
             (+ α-second (* frame-multiplier (- β-second α-second)))))

      (analog-clock (time hour minute second)))))</code></pre>
<p>Basically, we will loop through the frames and interpolate for each frame. The <code>frame-multiplier</code> will range evenly from 0 to 1 over the course of the frames. Also, the <code>let</code> block setting <code>β-hour</code> etc is to make sure that the clocks rotate clockwise. Since the second (<code>β</code>) value will always be higher, we always rotate right.</p>
<p>Okay, next let's switch gears and make some digital clocks. Since the eventual end goal was to make clocks out of clocks, I wanted a nice blocky font, built out of only a few different pieces. That way we could animate it more easily. Luckily the Unicode <a href="https://en.wikipedia.org/wiki/box-drawing_characters">box-drawing characters</a> will do exactly what we need:</p>
<p>I went with a 3x3 character map for each letter:</p>
<pre class="scheme"><code>(define digits
  (vector "┌─┐│ │└─┘" ; 0
          "─┐  │ ─┴─" ; 1
          " ─┐┌─┘└──" ; 2
          "──┐ ─┤──┘" ; 3
          "  │└─┤  │" ; 4
          "┌─ └─┐──┘" ; 5
          "│  ├─┐└─┘" ; 6
          "──┐  │  │" ; 7
          "┌─┐├─┤└─┘" ; 8
          "┌─┐└─┤  │" ; 9
          " │     │ " ; delimiter
          " ○     ○ "))</code></pre>
<p>If you straighten them out, you have things like this for 5 for example:</p>
<pre>┌─
└─┐
──┘</pre>
<p>They're not perfect, but I think they have a certain sort of charm.</p>
<p>Putting that all together, we can loop across all of the digits in the final clock and then each character that makes them up:</p>
<pre class="scheme"><code>; Render a digital clock using ascii bar graphics
(define (digital-clock when)
  (match-define (time-data hour minute second) when)

  (string-join
   (for/list ([line-index (in-range 3)])
     (list-&gt;string
      (for*/list ([digit
                   (in-list
                    (append (list (if (&lt; hour 10) 0 (quotient hour 10))
                                  (remainder hour 10)
                                  10
                                  (if (&lt; minute 10) 0 (quotient minute 10))
                                  (remainder minute 10))
                            (if second
                                (list 10
                                      (if (&lt; second 10) 0 (quotient second 10))
                                      (remainder second 10))
                                (list))))]
                  [char-index (in-range 3)])

        (define str (vector-ref digits digit))
        (define char (string-ref str (+ char-index (* line-index 3))))

        char)))
   "\n"))</code></pre>
<p>It's a bit ugly, but the bulk of the code is to make sure that we have enough digits for numbers less than 10. I bet I could do something nice with string formatting, but it works well enough. An example:</p>
<pre class="scheme"><code>&gt; (digital-clock (time 4 10))
"┌─┐  │ │ ─┐ ┌─┐\n│ │└─┤    │ │ │\n└─┘  │ │ ─┴─└─┘"</code></pre>
<p>Oops.</p>
<pre class="scheme"><code>&gt; (display (digital-clock (time 4 10)))
┌─┐  │ │ ─┐ ┌─┐
│ │└─┤    │ │ │
└─┘  │ │ ─┴─└─┘</code></pre>
<p>Much better.</p>
<p>Okay, now we're at the point of no return. How do we turn a digital clock with that 3x3 font into smaller clocks?</p>
<p>First, we need a map of the bar characters to times:</p>
<pre class="scheme"><code>; Convert the bar images used back into clocks
(define bar-&gt;clock
  (hash #\└ (time 3 0 0)
        #\┘ (time 9 0 0)
        #\┼ (time 6 0 30)
        #\─ (time 3 45 45)
        #\┴ (time 6 45 15)
        #\├ (time 3 0 30)
        #\┤ (time 9 30 0)
        #\┬ (time 6 15 45)
        #\┌ (time 3 30 30)
        #\┐ (time 9 30 30)
        #\│ (time 12 30 30)
        #\○ #f
        #\space #f))</code></pre>
<p>These could probably use a little more tuning. But what this does allow us to make is a very simple function to make a clock out of clocks:</p>
<pre class="scheme"><code>(define timeless (make-parameter (time 12 0 0)))

; Make a clock out of clocks!
(define (clock-clock when)
  (define chars (digital-clock when))
  (define empty-frame (analog-clock (timeless)))

  (define rows
    (for/list ([line (in-list (string-split chars "\n"))])
      (for/list ([char (in-string line)])
        (cond
          [(hash-ref bar-&gt;clock char) =&gt; analog-clock]
          [else empty-frame]))))

  (apply above (map (curry apply beside) rows)))</code></pre>
<p>In use:</p>
<pre class="scheme"><code> &gt; (clock-clock (time 4 10)) </code></pre>
<p><a data-toggle="lightbox" href="http://blog.jverkamp.com/2014/11/04/clockception/clockception.png"><img src="http://blog.jverkamp.com/2014/11/04/clockception/clockception.png" /></a></p>
<p>That right there is actually one of the parts of programming I love the most. Where you write a small pile of functions, each of which does one specific piece and then when you finally get to the big overall algorithm... bam. Simple.</p>
<p>But... back to being a little more complicated. How do we do the transition from one <code>clock-clock</code> to another? It would be nice if we could use the previous function, but we really can't. A similar idea will work though:</p>
<pre class="scheme"><code>; Animate a clock of clocks turning from one time to another
(define (tick-tock α β frames)
  (define α-chars (digital-clock α))
  (define β-chars (digital-clock β))

  (define rows*
    (for/list ([α-line (in-list (string-split α-chars "\n"))]
               [β-line (in-list (string-split β-chars "\n"))])
      (for/list ([α-char (in-string α-line)]
                 [β-char (in-string β-line)])
        (analog-frames (or (hash-ref bar-&gt;clock α-char) (timeless))
                       (or (hash-ref bar-&gt;clock β-char) (timeless))
                       frames))))

  (for/list ([i (in-range frames)])

    (define rows
      (for/list ([row (string-split α-chars "\n")]
                 [row-index (in-naturals)])
        (for/list ([char-index (in-range (string-length row))])
          (list-ref (list-ref (list-ref rows* row-index) char-index) i))))

    (apply above (map (curry apply beside) rows))))</code></pre>
<p>Basically, we have two steps. First we define <code>rows*</code> by generating each of the subclocks for each of the intermediate times. Then, that last is in the wrong order (indexed by row, column, then frame, rather than frame, row, then column) so we unpack it and put it back together. This is pretty terribly inefficient, but there will only ever be 3 rows and up to 20 columns, so it's not that bad.</p>
<p>With that, we can make simple animations:</p>
<pre class="scheme"><code>&gt; ; Fix bitmaps so that big-bang / run-movie / etc can render them
&gt; (define (fix img) (rotate 0 img))
&gt; (run-movie 0.1 (tick-tock (time 7 59) (time 8 0) 56))</code></pre>
<p><a data-toggle="lightbox" href="http://blog.jverkamp.com/2014/11/04/clockception/animated.gif"><img src="http://blog.jverkamp.com/2014/11/04/clockception/animated.gif" /></a></p>
<p>I really wish that <code>fix</code> wasn't necessary, but for whatever reason, <code><a href="http://docs.racket-lang.org/search/index.html?q=big-bang">big-bang</a></code> / <code><a href="http://docs.racket-lang.org/search/index.html?q=run-movie">run-movie</a></code> / et al don't like <code><a href="http://docs.racket-lang.org/search/index.html?q=bitmap%">bitmap%</a></code>s. So it goes.</p>
<p>On the other hand though, <code><a href="http://docs.racket-lang.org/search/index.html?q=run-movie">run-movie</a></code> is really cool. I've been doing things like this with <code><a href="http://docs.racket-lang.org/search/index.html?q=big-bang">big-bang</a></code> and the <code>stop-when</code> parameter, but this just needs a list of images and stops automatically. Another tool for my toolchest!</p>
<p>Okay, one more step. I know I just said <code><a href="http://docs.racket-lang.org/search/index.html?q=run-movie">run-movie</a></code> is the new shiny, but let's step back to <code><a href="http://docs.racket-lang.org/search/index.html?q=big-bang">big-bang</a></code> for a second. Given that we have a clock made of clocks, what would it take to actually render it in real time?</p>
<pre class="scheme"><code>; Make a tick-tock real time clock
(define (tick-tock-real-time-clock #:12-hour? [12-hour? #f])
  ; Get the current time in hours/minutes/seconds
  (define (now)
    (define date (current-date))
    (time (date-hour date) (date-minute date) #f))

  ; Generate a list of frames for the next transition
  ; Note: The big bang clock is supposed to tick 28 times per second
  (define (transition-frames)
    (match-define (time-data hour minute _) (now))

    (define next-minute (remainder (+ minute 1) 60))
    (define next-hour (remainder (if (= next-minute 60) (+ hour 1) hour) (if 12-hour? 12 24)))

    (tick-tock (time hour minute)
               (time next-hour next-minute)
               56)) ; Note: The big bang clock is supposed to
                    ; tick 28 times per second

  (big-bang (list (now) (transition-frames))
    [on-tick
     (λ (state)
       (match-define (list old-time frames) state)
       (define new-time (now))
       (cond
         ; We've advanced to the new time, jump ahead!
         [(not (equal? old-time new-time))
          (list new-time (transition-frames))]
         ; Freeze if we only have one frame left
         [(null? (rest frames))
          state]
         ; Otherwise, advance one frame
         [else
          (list old-time (rest frames))]))]
    [to-draw
     (λ (state)
       (match-define (list old-time frames) state)
       (fix (first frames)))]))</code></pre>
<p>Now that is a cool function. Basically, each minute we will generate the frames that will be used by the transition. Since <code>big-bang</code> runs at 28 frames per second, the 56 frames will takes 2 seconds to animate. Each minute, the next transition will be generated and then ticked down one frame at a time until only one is left, at which point we will just wait. Neat!</p>
<p>Originally I had it rendering seconds as well, but it was just a little bit too jittery. So minutes it is! I can't really do this thing justice in a gif (it actually looks just like <code>tick-tock</code> above, just with the current time), but it's still pretty cool.</p>
<p>And... that's it. Clocks made of clocks. Who would have thought? As always, the full code is available on GitHub. Check it out: <a href="https://github.com/jpverkamp/small-projects/blob/master/blog/clockception.rkt">clockception.rkt</a></p>]]></content></entry><entry><title>NaNoWriMo 2014</title><link href="http://blog.jverkamp.com/2014/11/04/nanowrimo-2014" /><id>urn:uuid:15725cb2-faf4-5f17-7929-11afd884acc7</id><updated>2014-11-04T00:00:00Z</updated><summary type="html"><![CDATA[<p>Yup. Even with a new baby around, I'm mad enough to do it.</p>
<p><a data-toggle="lightbox" href="http://nanowrimo.org/widget/MyMonth/jpverkamp.png"><img src="http://nanowrimo.org/widget/MyMonth/jpverkamp.png" /></a></p>
<p>So far I've been keeping up 2000 words per day, but I'm already starting to feel a drag. It just feels like the same sort of story I've written before... We'll see in the next day or two if I try to reboot or just go with it.</p>
<p>I haven't yet decided if I'm going to publish them online this year. It's good motivation and I know at least a few of you out there read it. We'll see. If I do, it won't be daily, but rather after finishing each chapter. So every 2-4 days?</p>
<p>Wish me luck!</p>]]></summary><content type="html"><![CDATA[<p>Yup. Even with a new baby around, I'm mad enough to do it.</p>
<p><a data-toggle="lightbox" href="http://nanowrimo.org/widget/MyMonth/jpverkamp.png"><img src="http://nanowrimo.org/widget/MyMonth/jpverkamp.png" /></a></p>
<p>So far I've been keeping up 2000 words per day, but I'm already starting to feel a drag. It just feels like the same sort of story I've written before... We'll see in the next day or two if I try to reboot or just go with it.</p>
<p>I haven't yet decided if I'm going to publish them online this year. It's good motivation and I know at least a few of you out there read it. We'll see. If I do, it won't be daily, but rather after finishing each chapter. So every 2-4 days?</p>
<p>Wish me luck!</p>]]></content></entry><entry><title>I, Frankenstein (DVD)</title><link href="http://blog.jverkamp.com/2014/11/01/i-frankenstein-dvd" /><id>urn:uuid:bede8e25-5906-da31-f610-01d2fcbb7529</id><updated>2014-11-01T00:00:00Z</updated><summary type="html"><![CDATA[<p><a data-toggle="lightbox" href="http://blog.jverkamp.com/2014/11/01/i-frankenstein-dvd/i-frankenstein.jpg" class="pull-left"><img src="http://blog.jverkamp.com/2014/11/01/i-frankenstein-dvd/i-frankenstein.jpg" /></a></p>
<p>Wait, is it <a href="http://www.imdb.com/title/tt0320691/?ref_=fn_al_tt_1">2003 again</a>?</p>
]]></summary><content type="html"><![CDATA[<p><a data-toggle="lightbox" href="http://blog.jverkamp.com/2014/11/01/i-frankenstein-dvd/i-frankenstein.jpg" class="pull-left"><img src="http://blog.jverkamp.com/2014/11/01/i-frankenstein-dvd/i-frankenstein.jpg" /></a></p>
<p>Wait, is it <a href="http://www.imdb.com/title/tt0320691/?ref_=fn_al_tt_1">2003 again</a>?</p>
<!--more-->
<p>We have a fairly straight forward urban fantasy action flick with <del>vampires</del> demons and <del>werewolves</del> gargoyles squaring off in a war that's been raging for years<span class="footnote"><sup><a href="#footnote-1">[1]</a></sup></span> Then there's the odd man out, one of a kind and more powerful than either of the main groups so of course everyone is looking for him. Seems awfully formulaic all around.</p>
<p>Don't get me wrong of course, it's still a solid action movie. The fights are beautiful to behold, even on the small screen. The fireworks when a gargoyle or demon is <del>killed</del> ascended/descended<span class="footnote"><sup><a href="#footnote-2">[2]</a></sup></span> are a sight to behold, really lighting up the otherwise thematically dark world.</p>
<p>On top of that, I really like seeing <a href="http://www.imdb.com/name/nm0631490/?ref_=tt_cl_t4">Bill Nighy</a> as <del>Viktor</del> Naberius and <a href="http://www.imdb.com/name/nm0340485/?ref_=tt_cl_t14">Kevin Grevioux</a> switches sides this time around as <del>Raze</del> Dekar. <a href="http://www.imdb.com/name/nm0001584/?ref_=tt_cl_t3">Miranda Otto</a> does a much better job (at least in my opinion) than her outing in the Lord of the Rings.</p>
<p>On the downside, the dialog is pretty bad. The world building is just weird at times (why gargoyles?). For a planet of 7 billion people, I could just about count the number of times a real flesh and blood human appears on one hand<span class="footnote"><sup><a href="#footnote-3">[3]</a></sup></span>. And if the demons can collect that many bodies... Why are they still in hiding?</p>
<p>I will give them one bit of credit at least. It's a personal nit of mine when people use the name Frankenstein to apply to the monster. While there's something to be said for a family name being passed on, Frankenstein is the creator. At least in I, Frankenstein, they have Naberius <a href="http://tvtropes.org/pmwiki/pmwiki.php/Main/LampshadeHanging">hang a lamp on it</a>.</p>
<p>Still. It's an okay action movie and it is really pretty. I'm glad that they took a chance at least on something a little outside of the normal tropes. If you've got a spare weekend and want to just veg for an hour and a half, this isn't a bad film for it.</p>
<div><h3 class="ranking-title">2014 Movie Rankings</h3><ol><li><a href="http://blog.jverkamp.com/2014/02/15/the-lego-movie">The Lego Movie</a></li><li><a href="http://blog.jverkamp.com/2014/04/05/captain-america-the-winter-soldier">Captain America: The Winter Soldier</a></li><li><a href="http://blog.jverkamp.com/2014/10/28/edge-of-tomorrow-dvd">Edge of Tomorrow (DVD)</a></li><li><a href="http://blog.jverkamp.com/2014/08/05/guardians-of-the-galaxy">Guardians of the Galaxy</a></li><li><a href="http://blog.jverkamp.com/2014/06/08/x-men-days-of-future-past">X-Men: Days of Future Past</a></li><li><a href="http://blog.jverkamp.com/2014/06/14/maleficent">Maleficent</a></li><li><a href="http://blog.jverkamp.com/2014/11/01/i-frankenstein-dvd">I, Frankenstein (DVD)</a></li><li><a href="http://blog.jverkamp.com/2014/07/26/lucy">Lucy</a></li><li><a href="http://blog.jverkamp.com/2014/05/10/the-amazing-spider-man-2">The Amazing Spider-Man 2</a></li><li><a href="http://blog.jverkamp.com/2014/03/29/divergent">Divergent</a></li></ol></div>]]></content></entry><entry><title>Edge of Tomorrow (DVD)</title><link href="http://blog.jverkamp.com/2014/10/28/edge-of-tomorrow-dvd" /><id>urn:uuid:0be2bd6f-53c6-4a18-9ecb-4d77175a7354</id><updated>2014-10-28T00:00:00Z</updated><summary type="html"><![CDATA[<p><a data-toggle="lightbox" href="http://blog.jverkamp.com/2014/10/28/edge-of-tomorrow-dvd/edge-of-tomorrow.jpg" class="pull-left"><img src="http://blog.jverkamp.com/2014/10/28/edge-of-tomorrow-dvd/edge-of-tomorrow.jpg" /></a></p>
<p>Disclaimer time: I have a full time job now. And a baby at home. Some combination of these things means that I have nowhere near as much time to go see movies as I once did. So it goes.</p>
<p>But rather than let this particular part of my blog go to waste, I think that I'll go ahead and keep writing up movies. Just instead of movies in theaters, I'll aim for new releases on DVD / VOD.</p>
<p>Why?</p>
<p>Edge of Tomorrow.</p>
]]></summary><content type="html"><![CDATA[<p><a data-toggle="lightbox" href="http://blog.jverkamp.com/2014/10/28/edge-of-tomorrow-dvd/edge-of-tomorrow.jpg" class="pull-left"><img src="http://blog.jverkamp.com/2014/10/28/edge-of-tomorrow-dvd/edge-of-tomorrow.jpg" /></a></p>
<p>Disclaimer time: I have a full time job now. And a baby at home. Some combination of these things means that I have nowhere near as much time to go see movies as I once did. So it goes.</p>
<p>But rather than let this particular part of my blog go to waste, I think that I'll go ahead and keep writing up movies. Just instead of movies in theaters, I'll aim for new releases on DVD / VOD.</p>
<p>Why?</p>
<p>Edge of Tomorrow.</p>
<!--more-->
<p>Edge of Tomorrow (aka Live Die Repeat<span class="footnote"><sup><a href="#footnote-1">[1]</a></sup></span>) is a surprisingly solid movie. Looking back, I would say that it's probably Tom Cruise's best film in more than a decade--heck, I might even put it above Minority Report, in which case I'd actually call it his best film ever.</p>
<p>The aliens are downright alien--and pretty cool looking--the effects are well done, and the Groundhog Day applied to war<span class="footnote"><sup><a href="#footnote-2">[2]</a></sup></span> concent works out really well. But what really carried the movie were <a href="http://www.imdb.com/name/nm0000129/?ref_=tt_cl_t1">Tom Cruise</a> and <a href="http://www.imdb.com/name/nm1289434/?ref_=tt_cl_t2">Emily Blunt</a>. Lovely performances.</p>
<p>If you're looking for a solid sci-fi action flick with a touch of what-if inducing thought behind the scenes, you could do far worse than Edge of Tomorrow. I really wish that I'd gotten a chance to see it in theaters. It seems like exactly the sort of movie that would benefit from the big screen treatment.</p>
<div><h3 class="ranking-title">2014 Movie Rankings</h3><ol><li><a href="http://blog.jverkamp.com/2014/02/15/the-lego-movie">The Lego Movie</a></li><li><a href="http://blog.jverkamp.com/2014/04/05/captain-america-the-winter-soldier">Captain America: The Winter Soldier</a></li><li><a href="http://blog.jverkamp.com/2014/10/28/edge-of-tomorrow-dvd">Edge of Tomorrow (DVD)</a></li><li><a href="http://blog.jverkamp.com/2014/08/05/guardians-of-the-galaxy">Guardians of the Galaxy</a></li><li><a href="http://blog.jverkamp.com/2014/06/08/x-men-days-of-future-past">X-Men: Days of Future Past</a></li><li><a href="http://blog.jverkamp.com/2014/06/14/maleficent">Maleficent</a></li><li><a href="http://blog.jverkamp.com/2014/07/26/lucy">Lucy</a></li><li><a href="http://blog.jverkamp.com/2014/05/10/the-amazing-spider-man-2">The Amazing Spider-Man 2</a></li><li><a href="http://blog.jverkamp.com/2014/03/29/divergent">Divergent</a></li></ol></div>]]></content></entry></feed>