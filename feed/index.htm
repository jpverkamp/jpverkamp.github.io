<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>jverkamp.com</title><link href="http://blog.jverkamp.com" /><link rel="self" href="http://blog.jverkamp.com/feed/" /><updated>2014-11-30T00:00:00Z</updated><author><name>JP Verkamp</name></author><id>urn:uuid:f148b655-ada3-c720-0c01-ca384ab68088</id><entry><title>NaNoWriMo 2014 Winner!</title><link href="http://blog.jverkamp.com/2014/11/30/nanowrimo-2014-winner" /><id>urn:uuid:7f3cf84a-23c9-507d-b94e-0a28ebc04ae7</id><updated>2014-11-30T00:00:00Z</updated><summary type="html"><![CDATA[<p><a data-toggle="lightbox" href="http://blog.jverkamp.com/2014/11/30/nanowrimo-2014-winner/2014-Winner-NaNoWriMo.jpg"><img src="http://blog.jverkamp.com/2014/11/30/nanowrimo-2014-winner/2014-Winner-NaNoWriMo.jpg" /></a></p>
<p>Just under the wire this year.</p>
]]></summary><content type="html"><![CDATA[<p><a data-toggle="lightbox" href="http://blog.jverkamp.com/2014/11/30/nanowrimo-2014-winner/2014-Winner-NaNoWriMo.jpg"><img src="http://blog.jverkamp.com/2014/11/30/nanowrimo-2014-winner/2014-Winner-NaNoWriMo.jpg" /></a></p>
<p>Just under the wire this year.</p>
<!--more-->
<p>It took a bit to get going, given that I basically restarted on Day 7:</p>
<p><a data-toggle="lightbox" href="http://blog.jverkamp.com/2014/11/30/nanowrimo-2014-winner/2014-Progress-NaNoWriMo.png"><img src="http://blog.jverkamp.com/2014/11/30/nanowrimo-2014-winner/2014-Progress-NaNoWriMo.png" /></a></p>
<p>Basically, I wrote 3000 words each of the first three days and then settled in for 2000 words a day after that. I had one day where I just couldn't make it past 1000. So it goes.</p>
<p>As far as overall progress goes, I'm most of the way through chapter 10 of a planned 19 (there's something to be said for outlining ahead of time after all...), so I should be done around Christmas.</p>
<p>Onwards and upwards!</p>]]></content></entry><entry><title>A "one" line echo server using let in Racket</title><link href="http://blog.jverkamp.com/2014/11/13/a-one-line-echo-server-using-let-in-racket" /><id>urn:uuid:6f76d2a6-0b14-4d60-7cba-7ede454fd445</id><updated>2014-11-13T00:00:00Z</updated><summary type="html"><![CDATA[<p>A recent post on Reddit caught my attention: <a href="https://www.reddit.com/r/Python/comments/2m6d4z/a_one_line_echo_server_using_let_in_python/">A “One” Line Echo Server Using “let” in Python</a> (<a href="http://sigusr2.net/one-line-echo-server-using-let-python.html">original article</a>). The basic idea is that you can use Python's <code>lambda</code> with default arguments as a <code>let</code>, which in turn allows you to write a simple <a href="https://en.wikipedia.org/wiki/echo_server">echo server</a> in <del>one line</del> a nicely functional style.</p>
]]></summary><content type="html"><![CDATA[<p>A recent post on Reddit caught my attention: <a href="https://www.reddit.com/r/Python/comments/2m6d4z/a_one_line_echo_server_using_let_in_python/">A “One” Line Echo Server Using “let” in Python</a> (<a href="http://sigusr2.net/one-line-echo-server-using-let-python.html">original article</a>). The basic idea is that you can use Python's <code>lambda</code> with default arguments as a <code>let</code>, which in turn allows you to write a simple <a href="https://en.wikipedia.org/wiki/echo_server">echo server</a> in <del>one line</del> a nicely functional style.</p>
<!--more-->
<p>To start with, here is their original code:</p>
<pre class="scheme"><code>import socket
import itertools

(lambda port=9000, s=socket.socket(socket.AF_INET, socket.SOCK_STREAM):
      s.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1) == None and
      s.bind(('', port)) == None and
      s.listen(5) == None and
      list(map(lambda c:
                  c[0].sendall(c[0].recv(1024)) and
                  c[0].close(),
               (s.accept() for _ in itertools.count(1)))))()</code></pre>
<p>It's certainly not very Pythonic, but there are a few neat tricks in there:</p>
<ul>
    <li>Using <code>lambda</code> with default arguments to define things</li>
    <li>Using <code>and</code> to sequence function calls</li>
    <li>Using list comprehension to handle the response threads</li>
</ul>
<p>It got me thinking though, what would the same sort of code look like in Racket?</p>
<p>Well, one of the draws Racket advertises (rightfully so) on its <a href="http://racket-lang.org">home page</a> is that it comes <a href="http://docs.racket-lang.org/">batteries included</a>. That means that if you're using <code><a href="http://docs.racket-lang.org/search/index.html?q=#lang racket">#lang racket</a></code>, you get a bunch of useful functions for TCP built in. Let's start with a fairly direct translation:</p>
<pre class="scheme"><code>(let ([s (tcp-listen 9000)])
  (sequence-&gt;list
   (sequence-map
    (λ (in+out) (thread (thunk (apply copy-port in+out))))
    (in-producer (thunk (call-with-values (thunk (tcp-accept s)) list))))))</code></pre>
<p>Okay, so that looks really weird. But it's a fairly straight forward translation. A few of the lines got folded into the <code><a href="http://docs.racket-lang.org/search/index.html?q=tcp-connect">tcp-connect</a></code> call and the list comprehension became a <code><a href="http://docs.racket-lang.org/search/index.html?q=in-producer">in-producer</a></code> <code><a href="http://docs.racket-lang.org/search/index.html?q=sequence">sequence</a></code>. It's kicked off via <code><a href="http://docs.racket-lang.org/search/index.html?q=sequence-map">sequence-map</a></code> and forced to run to termination (which will never happend) with <code><a href="http://docs.racket-lang.org/search/index.html?q=sequence->list">sequence->list</a></code>. Unfortunately, it has the same problem that the original Python code does. Since we're constructing a list, we'll eventually run out of memory.</p>
<p>One interesting addition it does that the Python version didn't is that it both allows for multiple lines (the Python version would read one packet and hang up) and any amount of data. I've never actually used the <code><a href="http://docs.racket-lang.org/search/index.html?q=copy-port">copy-port</a></code> function before. It's really cool!</p>
<p>If we broaden our definition of "one" line a little more to allow <code><a href="http://docs.racket-lang.org/search/index.html?q=for">for</a></code> sequences (which aren't really that different under the hood), we can clean it up a bit to this:</p>
<pre class="scheme"><code>(let ([s (tcp-listen 9000)])
  (for ([(in out) (in-producer (thunk (tcp-accept s)))])
    (thread (thunk (copy-port in out)))))</code></pre>
<p>This is especially nice, since <code><a href="http://docs.racket-lang.org/search/index.html?q=in-producer">in-producer</a></code> and <code><a href="http://docs.racket-lang.org/search/index.html?q=for">for</a></code> work together to deal with the multiple values from <code><a href="http://docs.racket-lang.org/search/index.html?q=tcp-accept">tcp-accept</a></code>. Very clean.</p>
<p>Heck, if you want to get a little less clear about it, you can actually fold the <code>let</code> into the <code>for</code>:</p>
<pre class="scheme"><code>(for* ([s (in-value (tcp-listen 9000))]
       [(in out) (in-producer (thunk (tcp-accept s)))])
  (thread (thunk (copy-port in out))))</code></pre>
<p>This works because <code>for*</code> is actually a nested loop. So in the outer loop, it runs over the single value of the open socket. The inner loop then runs forever, accepting new incoming connections.</p>
<p>Actually, I may have to put this in my quick-scripts toolbox. There are a fair few times when writing networking clients that having a dead simple echo server could come in handy.</p>]]></content></entry><entry><title>NaNoWriMo 2014 Update</title><link href="http://blog.jverkamp.com/2014/11/12/nanowrimo-2014-update" /><id>urn:uuid:1c4e4885-4961-9116-19f0-d6c782dc7170</id><updated>2014-11-12T00:00:00Z</updated><summary type="html"><![CDATA[<p>They say a picture is worth a thousand words<span class="footnote"><sup><a href="#footnote-1">[1]</a></sup></span>:</p>
<p><a data-toggle="lightbox" href="http://blog.jverkamp.com/2014/11/12/nanowrimo-2014-update/nano.png"><img src="http://blog.jverkamp.com/2014/11/12/nanowrimo-2014-update/nano.png" /></a></p>
]]></summary><content type="html"><![CDATA[<p>They say a picture is worth a thousand words<span class="footnote"><sup><a href="#footnote-1">[1]</a></sup></span>:</p>
<p><a data-toggle="lightbox" href="http://blog.jverkamp.com/2014/11/12/nanowrimo-2014-update/nano.png"><img src="http://blog.jverkamp.com/2014/11/12/nanowrimo-2014-update/nano.png" /></a></p>
<!--more-->
<p>Yup, you're reading that right. Five days in and I decided to start over. Not only am I trying to write an entire novel<span class="footnote"><sup><a href="#footnote-2">[2]</a></sup></span> in a month, now I'm trying to do it in 23 days.</p>
<p>Basically, I got a few days in and realized that I was writing the same story I've written before. It had the same core of a story I wrote for The Gates of Heaven (not posted), the core as <a href="http://blog.jverkamp.com/category/writing/novels/confession">Confession</a>, the same as <a href="http://blog.jverkamp.com/category/writing/novels/computational-demonology">Computational Demonology</a>. In all three cases, the main character discovers the supernatural world and becomes a part of it.</p>
<p>Now don't get me wrong. I love that sort of story<span class="footnote"><sup><a href="#footnote-3">[3]</a></sup></span>. But I wanted to try something different. So I tossed out what I'd written, rebuilt the characters to fit the new world, and outlined a new story.</p>
<p><em>*le gasp*</em></p>
<p>Yes, I actually outlined a story. I don't know if I've mentioned it (I'm sure I have), but I'm generally a pants'er. As in fly-by-the-seat-of... But hey, let's try something new.</p>
<p><a data-toggle="lightbox" href="http://blog.jverkamp.com/2014/11/12/nanowrimo-2014-update/outline.png"><img src="http://blog.jverkamp.com/2014/11/12/nanowrimo-2014-update/outline.png" /></a></p>
<p>We have: target word counts, structural arcs, chapter titles (still making these up as I go), locations, times, characters, summaries, and effects. So far, it's actually going pretty well. I'm not great at estimating what is large enough to make a chapter. Live and learn.</p>
<p>At this point, I don't think I'm going to post the story while I'm writing it. If you'd like to read it though, post a comment or <a href="mailto:me@jverkamp.com">email me</a>. I'd love to have <del>beta</del> alpha readers and I can add you to the Google Doc.</p>]]></content></entry><entry><title>The Giver (DVD)</title><link href="http://blog.jverkamp.com/2014/11/08/the-giver-dvd" /><id>urn:uuid:aff73556-f50c-b67e-1f68-c6aceba55ef5</id><updated>2014-11-08T00:00:00Z</updated><summary type="html"><![CDATA[<p><a data-toggle="lightbox" href="http://blog.jverkamp.com/2014/11/08/the-giver-dvd/the-giver.jpg" class="pull-left"><img src="http://blog.jverkamp.com/2014/11/08/the-giver-dvd/the-giver.jpg" /></a></p>
<p>Apparently <a href="https://en.wikipedia.org/wiki/Jeff_Bridges">Jeff Bridges</a> has been trying to have The Giver turned into a movie for the better part of two decades. Originally, he wanted to have <a href="https://en.wikipedia.org/wiki/Lloyd_Bridges">his father</a> in the eponymous role. He even apparently went so far as to have a version filmed somewhere, although so far as I know that version has never been made publically available.</p>
<p>I wonder if that one diverged so much from the book?</p>
]]></summary><content type="html"><![CDATA[<p><a data-toggle="lightbox" href="http://blog.jverkamp.com/2014/11/08/the-giver-dvd/the-giver.jpg" class="pull-left"><img src="http://blog.jverkamp.com/2014/11/08/the-giver-dvd/the-giver.jpg" /></a></p>
<p>Apparently <a href="https://en.wikipedia.org/wiki/Jeff_Bridges">Jeff Bridges</a> has been trying to have The Giver turned into a movie for the better part of two decades. Originally, he wanted to have <a href="https://en.wikipedia.org/wiki/Lloyd_Bridges">his father</a> in the eponymous role. He even apparently went so far as to have a version filmed somewhere, although so far as I know that version has never been made publically available.</p>
<p>I wonder if that one diverged so much from the book?</p>
<!--more-->
<p>Now don't get me wrong. It's been rather a while since I've read the book. But there seemed to be rather a few minor changes. Most of them were fine; for example, I didn't mind that his first memory of pain wasn't a sunburn. But the ending was a bit rocky. After a certain point, I just kept expecting the film to be over. Eventually they got back on the rails, but it took a while.</p>
<p>One good part at least was that I think <a href="http://www.imdb.com/name/nm0000313">Jeff Bridges</a> was actually pretty good as The Giver. Just gruff and no-nonsense enough. He didn't have the odd accent from <a href="http://blog.jverkamp.com/2013/07/26/r-i-p-d">R.I.P.D.</a> and for once he didn't feel like another incarnation of <a href="https://en.wikipedia.org/wiki/The_Big Lebowski">the dude</a>. Also, it was interesting to see Taylor Swift in a film role, especially given that I didn't even know it was her until the credits.</p>
<p>Overall, I've seen worse movies. If this wasn't <em>the</em> film adaptation The Giver (given it took 20 years to make this one, we won't likely see another), I was hoping for more. What exactly, I couldn't tell you, but something more.</p>
<div><h3 class="ranking-title">2014 Movie Rankings</h3><ol><li><a href="http://blog.jverkamp.com/2014/02/15/the-lego-movie">The Lego Movie</a></li><li><a href="http://blog.jverkamp.com/2014/04/05/captain-america-the-winter-soldier">Captain America: The Winter Soldier</a></li><li><a href="http://blog.jverkamp.com/2014/10/28/edge-of-tomorrow-dvd">Edge of Tomorrow (DVD)</a></li><li><a href="http://blog.jverkamp.com/2014/08/05/guardians-of-the-galaxy">Guardians of the Galaxy</a></li><li><a href="http://blog.jverkamp.com/2014/06/08/x-men-days-of-future-past">X-Men: Days of Future Past</a></li><li><a href="http://blog.jverkamp.com/2014/06/14/maleficent">Maleficent</a></li><li><a href="http://blog.jverkamp.com/2014/11/01/i-frankenstein-dvd">I, Frankenstein (DVD)</a></li><li><a href="http://blog.jverkamp.com/2014/11/08/the-giver-dvd">The Giver (DVD)</a></li><li><a href="http://blog.jverkamp.com/2014/07/26/lucy">Lucy</a></li><li><a href="http://blog.jverkamp.com/2014/05/10/the-amazing-spider-man-2">The Amazing Spider-Man 2</a></li><li><a href="http://blog.jverkamp.com/2014/03/29/divergent">Divergent</a></li></ol></div>]]></content></entry><entry><title>Clockception</title><link href="http://blog.jverkamp.com/2014/11/04/clockception" /><id>urn:uuid:9a2e2d18-6c68-f33b-e456-aa1c1b531f62</id><updated>2014-11-04T09:00:00Z</updated><summary type="html"><![CDATA[<p>Let's talk about clocks.</p>
<p>We can draw traditional analog clocks<span class="footnote"><sup><a href="#footnote-1">[1]</a></sup></span>:</p>
<p><a data-toggle="lightbox" href="http://blog.jverkamp.com/2014/11/04/clockception/analog.png"><img src="http://blog.jverkamp.com/2014/11/04/clockception/analog.png" /></a></p>
<p>We can draw nice digital clocks:</p>
<pre>┌─┐  │ │ ─┐ ┌─┐
│ │└─┤    │ │ │
└─┘  │ │ ─┴─└─┘</pre>
<p>Or we can go downright mad and make clocks out of clocks:</p>
<p><a data-toggle="lightbox" href="http://blog.jverkamp.com/2014/11/04/clockception/clockception.png"><img src="http://blog.jverkamp.com/2014/11/04/clockception/clockception.png" /></a></p>
<p>Even animated!</p>
<p><a data-toggle="lightbox" href="http://blog.jverkamp.com/2014/11/04/clockception/animated.gif"><img src="http://blog.jverkamp.com/2014/11/04/clockception/animated.gif" /></a></p>
]]></summary><content type="html"><![CDATA[<p>Let's talk about clocks.</p>
<p>We can draw traditional analog clocks<span class="footnote"><sup><a href="#footnote-1">[1]</a></sup></span>:</p>
<p><a data-toggle="lightbox" href="http://blog.jverkamp.com/2014/11/04/clockception/analog.png"><img src="http://blog.jverkamp.com/2014/11/04/clockception/analog.png" /></a></p>
<p>We can draw nice digital clocks:</p>
<pre>┌─┐  │ │ ─┐ ┌─┐
│ │└─┤    │ │ │
└─┘  │ │ ─┴─└─┘</pre>
<p>Or we can go downright mad and make clocks out of clocks:</p>
<p><a data-toggle="lightbox" href="http://blog.jverkamp.com/2014/11/04/clockception/clockception.png"><img src="http://blog.jverkamp.com/2014/11/04/clockception/clockception.png" /></a></p>
<p>Even animated!</p>
<p><a data-toggle="lightbox" href="http://blog.jverkamp.com/2014/11/04/clockception/animated.gif"><img src="http://blog.jverkamp.com/2014/11/04/clockception/animated.gif" /></a></p>
<!--more-->
<p>I got the basic idea for this post from <a href="http://io9.com/these-stylish-minimalistic-clocks-let-you-tell-time-wit-1652202065">this post</a> on io9. That first clock ought to look awfully familiar (although theirs looks a bit better). Let's see how we can make one of our own.</p>
<p>First, some basic structure:</p>
<pre class="scheme"><code>(struct time-data (hour minute second) #:transparent)

(define (time hour minute [second #f])
  (time-data hour minute second))

(define current-size (make-parameter 30))</code></pre>
<p>This will represent the times that we are dealing with. I specifically broke the <code>time-data</code> structure and <code>time</code> function apart, since I wanted to have optional parameters. There is an <code>#:auto</code> option for struct fields, but it doesn't quite do what I want. Finally, <code>current-size</code> will be the width of each individual analog clock.</p>
<p>Speaking of which, let's draw some basic analog clocks. I went through several different Racket drawing libraries (<code><a href="http://docs.racket-lang.org/search/index.html?q=pict">pict</a></code>, (<code><a href="http://docs.racket-lang.org/search/index.html?q=2htdp/image">2htdp/image</a></code>, (<code><a href="http://docs.racket-lang.org/search/index.html?q=racket/draw">racket/draw</a></code>) before finally settling on <code><a href="http://docs.racket-lang.org/search/index.html?q=racket/draw">racket/draw</a></code>. I'm sure any of them could be used, but I just kept running into odd issues with coordinates.</p>
<pre class="scheme"><code>; Render a clock at the current-size
(define (analog-clock when)
  (match-define (time-data hour minute second) when)

  (define size (current-size))
  (define target (make-bitmap size size))
  (define dc (new bitmap-dc% [bitmap target]))

  (send dc set-pen "lightgray" 1 'solid)
  (send dc draw-ellipse 0 0 size size)
  (send dc set-pen "black" 1 'solid)

  ; Helper to draw a hand given a radius [0, 1.0] and angle
  ; Angle of 0 is upright, positive angles are clockwise
  (define (draw-hand! r θ)
    (define c (/ size 2))
    (define x (+ c (* 0.5 r size (cos θ))))
    (define y (+ c (* 0.5 r size (sin θ))))
    (send dc draw-line c c x y))

  (draw-hand! 0.8 (+ (* pi 1.5) (* 2 pi (/ minute 60))))
  (draw-hand! 0.7 (+ (* pi 1.5) (* 2 pi (/ hour 12))))

  (and second
       (begin
         (draw-hand! 0.9 (+ (* pi 1.5) (* 2 pi (/ second 60))))))

  target)</code></pre>
<p>The basic idea of <code>racket/draw</code> is that you have a sort of canvas (<code>target</code>) on which you can draw. You then issue a series of commands that either change your state (<code><a href="http://docs.racket-lang.org/search/index.html?q=set-pen">set-pen</a></code>) or draw (<code><a href="http://docs.racket-lang.org/search/index.html?q=draw-ellipse">draw-ellipse</a></code> and <code><a href="http://docs.racket-lang.org/search/index.html?q=draw-line">draw-line</a></code>). I did abstract a little bit the function to create the clock hands: <code>draw-hand!</code>, mostly so I wouldn't have to redo the centering offset (<code>c</code>, since <code>0,0</code> is in the top left, not the center as I'd hoped) and the <a href="https://en.wikipedia.org/wiki/trigonometry">trigonometry</a> to convert a radius and angle to x and y.</p>
<p>And that's actually all you need to make a basic clock:</p>
<pre class="scheme"><code> &gt; (analog-clock (time 4 10)) </code></pre>
<p><a data-toggle="lightbox" href="http://blog.jverkamp.com/2014/11/04/clockception/analog.png"><img src="http://blog.jverkamp.com/2014/11/04/clockception/analog.png" /></a></p>
<p>Straight forward enough. What's especially neat is that because radians cycle every two 2π rotations, you can put in some crazy times:</p>
<pre class="scheme"><code> &gt; (analog-clock (time 208 -350)) </code></pre>
<p><a data-toggle="lightbox" href="http://blog.jverkamp.com/2014/11/04/clockception/analog.png"><img src="http://blog.jverkamp.com/2014/11/04/clockception/analog.png" /></a></p>
<p>Cool. Okay, next step. Let's figure out how to animate these, so we can transition from one time to another. In this, I had two options. Either I could move as a clock moves (where the minute hand has to move an entire rotation for the hour hand to move 1/12) or independently (such that both hands move at the same speed). Because it's both less code and honestly works better in the final result, I went with the second option:</p>
<pre class="scheme"><code>; Render a sequence of frames animating a clock spinnging from one time to another
; Hands will always move clockwise but will both move at once (not as a normal clock)
(define (analog-frames α β frames)
  (match-define (time-data α-hour α-minute α-second) α)
  (match-define (time-data β-hour β-minute β-second) β)

  (let ([β-hour   (if (&gt;= β-hour α-hour)     β-hour    (+ β-hour 12))]
        [β-minute (if (&gt;= β-minute α-minute) β-minute (+ β-minute 60))]
        [β-second (and α-second β-second
                       (if (&gt;= β-second α-second) β-second (+ β-second 60)))])

    (for/list ([i (in-range frames)])
      (define frame-multiplier (/ i frames))

      (define hour (+ α-hour (* frame-multiplier (- β-hour α-hour))))
      (define minute (+ α-minute (* frame-multiplier (- β-minute α-minute))))

      (define second
        (and α-second β-second
             (+ α-second (* frame-multiplier (- β-second α-second)))))

      (analog-clock (time hour minute second)))))</code></pre>
<p>Basically, we will loop through the frames and interpolate for each frame. The <code>frame-multiplier</code> will range evenly from 0 to 1 over the course of the frames. Also, the <code>let</code> block setting <code>β-hour</code> etc is to make sure that the clocks rotate clockwise. Since the second (<code>β</code>) value will always be higher, we always rotate right.</p>
<p>Okay, next let's switch gears and make some digital clocks. Since the eventual end goal was to make clocks out of clocks, I wanted a nice blocky font, built out of only a few different pieces. That way we could animate it more easily. Luckily the Unicode <a href="https://en.wikipedia.org/wiki/box-drawing_characters">box-drawing characters</a> will do exactly what we need:</p>
<p>I went with a 3x3 character map for each letter:</p>
<pre class="scheme"><code>(define digits
  (vector "┌─┐│ │└─┘" ; 0
          "─┐  │ ─┴─" ; 1
          " ─┐┌─┘└──" ; 2
          "──┐ ─┤──┘" ; 3
          "  │└─┤  │" ; 4
          "┌─ └─┐──┘" ; 5
          "│  ├─┐└─┘" ; 6
          "──┐  │  │" ; 7
          "┌─┐├─┤└─┘" ; 8
          "┌─┐└─┤  │" ; 9
          " │     │ " ; delimiter
          " ○     ○ "))</code></pre>
<p>If you straighten them out, you have things like this for 5 for example:</p>
<pre>┌─
└─┐
──┘</pre>
<p>They're not perfect, but I think they have a certain sort of charm.</p>
<p>Putting that all together, we can loop across all of the digits in the final clock and then each character that makes them up:</p>
<pre class="scheme"><code>; Render a digital clock using ascii bar graphics
(define (digital-clock when)
  (match-define (time-data hour minute second) when)

  (string-join
   (for/list ([line-index (in-range 3)])
     (list-&gt;string
      (for*/list ([digit
                   (in-list
                    (append (list (if (&lt; hour 10) 0 (quotient hour 10))
                                  (remainder hour 10)
                                  10
                                  (if (&lt; minute 10) 0 (quotient minute 10))
                                  (remainder minute 10))
                            (if second
                                (list 10
                                      (if (&lt; second 10) 0 (quotient second 10))
                                      (remainder second 10))
                                (list))))]
                  [char-index (in-range 3)])

        (define str (vector-ref digits digit))
        (define char (string-ref str (+ char-index (* line-index 3))))

        char)))
   "\n"))</code></pre>
<p>It's a bit ugly, but the bulk of the code is to make sure that we have enough digits for numbers less than 10. I bet I could do something nice with string formatting, but it works well enough. An example:</p>
<pre class="scheme"><code>&gt; (digital-clock (time 4 10))
"┌─┐  │ │ ─┐ ┌─┐\n│ │└─┤    │ │ │\n└─┘  │ │ ─┴─└─┘"</code></pre>
<p>Oops.</p>
<pre class="scheme"><code>&gt; (display (digital-clock (time 4 10)))
┌─┐  │ │ ─┐ ┌─┐
│ │└─┤    │ │ │
└─┘  │ │ ─┴─└─┘</code></pre>
<p>Much better.</p>
<p>Okay, now we're at the point of no return. How do we turn a digital clock with that 3x3 font into smaller clocks?</p>
<p>First, we need a map of the bar characters to times:</p>
<pre class="scheme"><code>; Convert the bar images used back into clocks
(define bar-&gt;clock
  (hash #\└ (time 3 0 0)
        #\┘ (time 9 0 0)
        #\┼ (time 6 0 30)
        #\─ (time 3 45 45)
        #\┴ (time 6 45 15)
        #\├ (time 3 0 30)
        #\┤ (time 9 30 0)
        #\┬ (time 6 15 45)
        #\┌ (time 3 30 30)
        #\┐ (time 9 30 30)
        #\│ (time 12 30 30)
        #\○ #f
        #\space #f))</code></pre>
<p>These could probably use a little more tuning. But what this does allow us to make is a very simple function to make a clock out of clocks:</p>
<pre class="scheme"><code>(define timeless (make-parameter (time 12 0 0)))

; Make a clock out of clocks!
(define (clock-clock when)
  (define chars (digital-clock when))
  (define empty-frame (analog-clock (timeless)))

  (define rows
    (for/list ([line (in-list (string-split chars "\n"))])
      (for/list ([char (in-string line)])
        (cond
          [(hash-ref bar-&gt;clock char) =&gt; analog-clock]
          [else empty-frame]))))

  (apply above (map (curry apply beside) rows)))</code></pre>
<p>In use:</p>
<pre class="scheme"><code> &gt; (clock-clock (time 4 10)) </code></pre>
<p><a data-toggle="lightbox" href="http://blog.jverkamp.com/2014/11/04/clockception/clockception.png"><img src="http://blog.jverkamp.com/2014/11/04/clockception/clockception.png" /></a></p>
<p>That right there is actually one of the parts of programming I love the most. Where you write a small pile of functions, each of which does one specific piece and then when you finally get to the big overall algorithm... bam. Simple.</p>
<p>But... back to being a little more complicated. How do we do the transition from one <code>clock-clock</code> to another? It would be nice if we could use the previous function, but we really can't. A similar idea will work though:</p>
<pre class="scheme"><code>; Animate a clock of clocks turning from one time to another
(define (tick-tock α β frames)
  (define α-chars (digital-clock α))
  (define β-chars (digital-clock β))

  (define rows*
    (for/list ([α-line (in-list (string-split α-chars "\n"))]
               [β-line (in-list (string-split β-chars "\n"))])
      (for/list ([α-char (in-string α-line)]
                 [β-char (in-string β-line)])
        (analog-frames (or (hash-ref bar-&gt;clock α-char) (timeless))
                       (or (hash-ref bar-&gt;clock β-char) (timeless))
                       frames))))

  (for/list ([i (in-range frames)])

    (define rows
      (for/list ([row (string-split α-chars "\n")]
                 [row-index (in-naturals)])
        (for/list ([char-index (in-range (string-length row))])
          (list-ref (list-ref (list-ref rows* row-index) char-index) i))))

    (apply above (map (curry apply beside) rows))))</code></pre>
<p>Basically, we have two steps. First we define <code>rows*</code> by generating each of the subclocks for each of the intermediate times. Then, that last is in the wrong order (indexed by row, column, then frame, rather than frame, row, then column) so we unpack it and put it back together. This is pretty terribly inefficient, but there will only ever be 3 rows and up to 20 columns, so it's not that bad.</p>
<p>With that, we can make simple animations:</p>
<pre class="scheme"><code>&gt; ; Fix bitmaps so that big-bang / run-movie / etc can render them
&gt; (define (fix img) (rotate 0 img))
&gt; (run-movie 0.1 (tick-tock (time 7 59) (time 8 0) 56))</code></pre>
<p><a data-toggle="lightbox" href="http://blog.jverkamp.com/2014/11/04/clockception/animated.gif"><img src="http://blog.jverkamp.com/2014/11/04/clockception/animated.gif" /></a></p>
<p>I really wish that <code>fix</code> wasn't necessary, but for whatever reason, <code><a href="http://docs.racket-lang.org/search/index.html?q=big-bang">big-bang</a></code> / <code><a href="http://docs.racket-lang.org/search/index.html?q=run-movie">run-movie</a></code> / et al don't like <code><a href="http://docs.racket-lang.org/search/index.html?q=bitmap%">bitmap%</a></code>s. So it goes.</p>
<p>On the other hand though, <code><a href="http://docs.racket-lang.org/search/index.html?q=run-movie">run-movie</a></code> is really cool. I've been doing things like this with <code><a href="http://docs.racket-lang.org/search/index.html?q=big-bang">big-bang</a></code> and the <code>stop-when</code> parameter, but this just needs a list of images and stops automatically. Another tool for my toolchest!</p>
<p>Okay, one more step. I know I just said <code><a href="http://docs.racket-lang.org/search/index.html?q=run-movie">run-movie</a></code> is the new shiny, but let's step back to <code><a href="http://docs.racket-lang.org/search/index.html?q=big-bang">big-bang</a></code> for a second. Given that we have a clock made of clocks, what would it take to actually render it in real time?</p>
<pre class="scheme"><code>; Make a tick-tock real time clock
(define (tick-tock-real-time-clock #:12-hour? [12-hour? #f])
  ; Get the current time in hours/minutes/seconds
  (define (now)
    (define date (current-date))
    (time (date-hour date) (date-minute date) #f))

  ; Generate a list of frames for the next transition
  ; Note: The big bang clock is supposed to tick 28 times per second
  (define (transition-frames)
    (match-define (time-data hour minute _) (now))

    (define next-minute (remainder (+ minute 1) 60))
    (define next-hour (remainder (if (= next-minute 60) (+ hour 1) hour) (if 12-hour? 12 24)))

    (tick-tock (time hour minute)
               (time next-hour next-minute)
               56)) ; Note: The big bang clock is supposed to
                    ; tick 28 times per second

  (big-bang (list (now) (transition-frames))
    [on-tick
     (λ (state)
       (match-define (list old-time frames) state)
       (define new-time (now))
       (cond
         ; We've advanced to the new time, jump ahead!
         [(not (equal? old-time new-time))
          (list new-time (transition-frames))]
         ; Freeze if we only have one frame left
         [(null? (rest frames))
          state]
         ; Otherwise, advance one frame
         [else
          (list old-time (rest frames))]))]
    [to-draw
     (λ (state)
       (match-define (list old-time frames) state)
       (fix (first frames)))]))</code></pre>
<p>Now that is a cool function. Basically, each minute we will generate the frames that will be used by the transition. Since <code>big-bang</code> runs at 28 frames per second, the 56 frames will takes 2 seconds to animate. Each minute, the next transition will be generated and then ticked down one frame at a time until only one is left, at which point we will just wait. Neat!</p>
<p>Originally I had it rendering seconds as well, but it was just a little bit too jittery. So minutes it is! I can't really do this thing justice in a gif (it actually looks just like <code>tick-tock</code> above, just with the current time), but it's still pretty cool.</p>
<p>And... that's it. Clocks made of clocks. Who would have thought? As always, the full code is available on GitHub. Check it out: <a href="https://github.com/jpverkamp/small-projects/blob/master/blog/clockception.rkt">clockception.rkt</a></p>]]></content></entry><entry><title>NaNoWriMo 2014</title><link href="http://blog.jverkamp.com/2014/11/04/nanowrimo-2014" /><id>urn:uuid:15725cb2-faf4-5f17-7929-11afd884acc7</id><updated>2014-11-04T00:00:00Z</updated><summary type="html"><![CDATA[<p>Yup. Even with a new baby around, I'm mad enough to do it.</p>
<p><a data-toggle="lightbox" href="http://nanowrimo.org/widget/MyMonth/jpverkamp.png"><img src="http://nanowrimo.org/widget/MyMonth/jpverkamp.png" /></a></p>
<p>So far I've been keeping up 2000 words per day, but I'm already starting to feel a drag. It just feels like the same sort of story I've written before... We'll see in the next day or two if I try to reboot or just go with it.</p>
<p>I haven't yet decided if I'm going to publish them online this year. It's good motivation and I know at least a few of you out there read it. We'll see. If I do, it won't be daily, but rather after finishing each chapter. So every 2-4 days?</p>
<p>Wish me luck!</p>]]></summary><content type="html"><![CDATA[<p>Yup. Even with a new baby around, I'm mad enough to do it.</p>
<p><a data-toggle="lightbox" href="http://nanowrimo.org/widget/MyMonth/jpverkamp.png"><img src="http://nanowrimo.org/widget/MyMonth/jpverkamp.png" /></a></p>
<p>So far I've been keeping up 2000 words per day, but I'm already starting to feel a drag. It just feels like the same sort of story I've written before... We'll see in the next day or two if I try to reboot or just go with it.</p>
<p>I haven't yet decided if I'm going to publish them online this year. It's good motivation and I know at least a few of you out there read it. We'll see. If I do, it won't be daily, but rather after finishing each chapter. So every 2-4 days?</p>
<p>Wish me luck!</p>]]></content></entry><entry><title>I, Frankenstein (DVD)</title><link href="http://blog.jverkamp.com/2014/11/01/i-frankenstein-dvd" /><id>urn:uuid:bede8e25-5906-da31-f610-01d2fcbb7529</id><updated>2014-11-01T00:00:00Z</updated><summary type="html"><![CDATA[<p><a data-toggle="lightbox" href="http://blog.jverkamp.com/2014/11/01/i-frankenstein-dvd/i-frankenstein.jpg" class="pull-left"><img src="http://blog.jverkamp.com/2014/11/01/i-frankenstein-dvd/i-frankenstein.jpg" /></a></p>
<p>Wait, is it <a href="http://www.imdb.com/title/tt0320691/?ref_=fn_al_tt_1">2003 again</a>?</p>
]]></summary><content type="html"><![CDATA[<p><a data-toggle="lightbox" href="http://blog.jverkamp.com/2014/11/01/i-frankenstein-dvd/i-frankenstein.jpg" class="pull-left"><img src="http://blog.jverkamp.com/2014/11/01/i-frankenstein-dvd/i-frankenstein.jpg" /></a></p>
<p>Wait, is it <a href="http://www.imdb.com/title/tt0320691/?ref_=fn_al_tt_1">2003 again</a>?</p>
<!--more-->
<p>We have a fairly straight forward urban fantasy action flick with <del>vampires</del> demons and <del>werewolves</del> gargoyles squaring off in a war that's been raging for years<span class="footnote"><sup><a href="#footnote-1">[1]</a></sup></span> Then there's the odd man out, one of a kind and more powerful than either of the main groups so of course everyone is looking for him. Seems awfully formulaic all around.</p>
<p>Don't get me wrong of course, it's still a solid action movie. The fights are beautiful to behold, even on the small screen. The fireworks when a gargoyle or demon is <del>killed</del> ascended/descended<span class="footnote"><sup><a href="#footnote-2">[2]</a></sup></span> are a sight to behold, really lighting up the otherwise thematically dark world.</p>
<p>On top of that, I really like seeing <a href="http://www.imdb.com/name/nm0631490/?ref_=tt_cl_t4">Bill Nighy</a> as <del>Viktor</del> Naberius and <a href="http://www.imdb.com/name/nm0340485/?ref_=tt_cl_t14">Kevin Grevioux</a> switches sides this time around as <del>Raze</del> Dekar. <a href="http://www.imdb.com/name/nm0001584/?ref_=tt_cl_t3">Miranda Otto</a> does a much better job (at least in my opinion) than her outing in the Lord of the Rings.</p>
<p>On the downside, the dialog is pretty bad. The world building is just weird at times (why gargoyles?). For a planet of 7 billion people, I could just about count the number of times a real flesh and blood human appears on one hand<span class="footnote"><sup><a href="#footnote-3">[3]</a></sup></span>. And if the demons can collect that many bodies... Why are they still in hiding?</p>
<p>I will give them one bit of credit at least. It's a personal nit of mine when people use the name Frankenstein to apply to the monster. While there's something to be said for a family name being passed on, Frankenstein is the creator. At least in I, Frankenstein, they have Naberius <a href="http://tvtropes.org/pmwiki/pmwiki.php/Main/LampshadeHanging">hang a lamp on it</a>.</p>
<p>Still. It's an okay action movie and it is really pretty. I'm glad that they took a chance at least on something a little outside of the normal tropes. If you've got a spare weekend and want to just veg for an hour and a half, this isn't a bad film for it.</p>
<div><h3 class="ranking-title">2014 Movie Rankings</h3><ol><li><a href="http://blog.jverkamp.com/2014/02/15/the-lego-movie">The Lego Movie</a></li><li><a href="http://blog.jverkamp.com/2014/04/05/captain-america-the-winter-soldier">Captain America: The Winter Soldier</a></li><li><a href="http://blog.jverkamp.com/2014/10/28/edge-of-tomorrow-dvd">Edge of Tomorrow (DVD)</a></li><li><a href="http://blog.jverkamp.com/2014/08/05/guardians-of-the-galaxy">Guardians of the Galaxy</a></li><li><a href="http://blog.jverkamp.com/2014/06/08/x-men-days-of-future-past">X-Men: Days of Future Past</a></li><li><a href="http://blog.jverkamp.com/2014/06/14/maleficent">Maleficent</a></li><li><a href="http://blog.jverkamp.com/2014/11/01/i-frankenstein-dvd">I, Frankenstein (DVD)</a></li><li><a href="http://blog.jverkamp.com/2014/07/26/lucy">Lucy</a></li><li><a href="http://blog.jverkamp.com/2014/05/10/the-amazing-spider-man-2">The Amazing Spider-Man 2</a></li><li><a href="http://blog.jverkamp.com/2014/03/29/divergent">Divergent</a></li></ol></div>]]></content></entry><entry><title>Edge of Tomorrow (DVD)</title><link href="http://blog.jverkamp.com/2014/10/28/edge-of-tomorrow-dvd" /><id>urn:uuid:0be2bd6f-53c6-4a18-9ecb-4d77175a7354</id><updated>2014-10-28T00:00:00Z</updated><summary type="html"><![CDATA[<p><a data-toggle="lightbox" href="http://blog.jverkamp.com/2014/10/28/edge-of-tomorrow-dvd/edge-of-tomorrow.jpg" class="pull-left"><img src="http://blog.jverkamp.com/2014/10/28/edge-of-tomorrow-dvd/edge-of-tomorrow.jpg" /></a></p>
<p>Disclaimer time: I have a full time job now. And a baby at home. Some combination of these things means that I have nowhere near as much time to go see movies as I once did. So it goes.</p>
<p>But rather than let this particular part of my blog go to waste, I think that I'll go ahead and keep writing up movies. Just instead of movies in theaters, I'll aim for new releases on DVD / VOD.</p>
<p>Why?</p>
<p>Edge of Tomorrow.</p>
]]></summary><content type="html"><![CDATA[<p><a data-toggle="lightbox" href="http://blog.jverkamp.com/2014/10/28/edge-of-tomorrow-dvd/edge-of-tomorrow.jpg" class="pull-left"><img src="http://blog.jverkamp.com/2014/10/28/edge-of-tomorrow-dvd/edge-of-tomorrow.jpg" /></a></p>
<p>Disclaimer time: I have a full time job now. And a baby at home. Some combination of these things means that I have nowhere near as much time to go see movies as I once did. So it goes.</p>
<p>But rather than let this particular part of my blog go to waste, I think that I'll go ahead and keep writing up movies. Just instead of movies in theaters, I'll aim for new releases on DVD / VOD.</p>
<p>Why?</p>
<p>Edge of Tomorrow.</p>
<!--more-->
<p>Edge of Tomorrow (aka Live Die Repeat<span class="footnote"><sup><a href="#footnote-1">[1]</a></sup></span>) is a surprisingly solid movie. Looking back, I would say that it's probably Tom Cruise's best film in more than a decade--heck, I might even put it above Minority Report, in which case I'd actually call it his best film ever.</p>
<p>The aliens are downright alien--and pretty cool looking--the effects are well done, and the Groundhog Day applied to war<span class="footnote"><sup><a href="#footnote-2">[2]</a></sup></span> concent works out really well. But what really carried the movie were <a href="http://www.imdb.com/name/nm0000129/?ref_=tt_cl_t1">Tom Cruise</a> and <a href="http://www.imdb.com/name/nm1289434/?ref_=tt_cl_t2">Emily Blunt</a>. Lovely performances.</p>
<p>If you're looking for a solid sci-fi action flick with a touch of what-if inducing thought behind the scenes, you could do far worse than Edge of Tomorrow. I really wish that I'd gotten a chance to see it in theaters. It seems like exactly the sort of movie that would benefit from the big screen treatment.</p>
<div><h3 class="ranking-title">2014 Movie Rankings</h3><ol><li><a href="http://blog.jverkamp.com/2014/02/15/the-lego-movie">The Lego Movie</a></li><li><a href="http://blog.jverkamp.com/2014/04/05/captain-america-the-winter-soldier">Captain America: The Winter Soldier</a></li><li><a href="http://blog.jverkamp.com/2014/10/28/edge-of-tomorrow-dvd">Edge of Tomorrow (DVD)</a></li><li><a href="http://blog.jverkamp.com/2014/08/05/guardians-of-the-galaxy">Guardians of the Galaxy</a></li><li><a href="http://blog.jverkamp.com/2014/06/08/x-men-days-of-future-past">X-Men: Days of Future Past</a></li><li><a href="http://blog.jverkamp.com/2014/06/14/maleficent">Maleficent</a></li><li><a href="http://blog.jverkamp.com/2014/07/26/lucy">Lucy</a></li><li><a href="http://blog.jverkamp.com/2014/05/10/the-amazing-spider-man-2">The Amazing Spider-Man 2</a></li><li><a href="http://blog.jverkamp.com/2014/03/29/divergent">Divergent</a></li></ol></div>]]></content></entry><entry><title>Tile Puzzle</title><link href="http://blog.jverkamp.com/2014/10/28/tile-puzzle" /><id>urn:uuid:073afc5c-1121-544c-5879-486d124edb3c</id><updated>2014-10-28T00:00:00Z</updated><summary type="html"><![CDATA[<p>It's been a while<span class="footnote"><sup><a href="#footnote-1">[1]</a></sup></span>, but I'm back. Today's post is inspired by a post from /r/dailyprogrammer almost a month ago now: <a href="https://www.reddit.com/r/dailyprogrammer/comments/2ip1gj/10082014_challenge_183_intermediate_edge_matching/">Challenge #183 [Intermediate] Edge Matching Tile Puzzle</a>. Basically, we're going to solve puzzles like this:</p>
<p><a data-toggle="lightbox" href="http://blog.jverkamp.com/2014/10/28/tile-puzzle/unsolved-3x3.png"><img src="http://blog.jverkamp.com/2014/10/28/tile-puzzle/unsolved-3x3.png" /></a> <a data-toggle="lightbox" href="http://blog.jverkamp.com/2014/10/28/tile-puzzle/solved-3x3.png"><img src="http://blog.jverkamp.com/2014/10/28/tile-puzzle/solved-3x3.png" /></a></p>
<p>If you look carefully, the tiles are the same between the two, although they might be rotated.</p>
]]></summary><content type="html"><![CDATA[<p>It's been a while<span class="footnote"><sup><a href="#footnote-1">[1]</a></sup></span>, but I'm back. Today's post is inspired by a post from /r/dailyprogrammer almost a month ago now: <a href="https://www.reddit.com/r/dailyprogrammer/comments/2ip1gj/10082014_challenge_183_intermediate_edge_matching/">Challenge #183 [Intermediate] Edge Matching Tile Puzzle</a>. Basically, we're going to solve puzzles like this:</p>
<p><a data-toggle="lightbox" href="http://blog.jverkamp.com/2014/10/28/tile-puzzle/unsolved-3x3.png"><img src="http://blog.jverkamp.com/2014/10/28/tile-puzzle/unsolved-3x3.png" /></a> <a data-toggle="lightbox" href="http://blog.jverkamp.com/2014/10/28/tile-puzzle/solved-3x3.png"><img src="http://blog.jverkamp.com/2014/10/28/tile-puzzle/solved-3x3.png" /></a></p>
<p>If you look carefully, the tiles are the same between the two, although they might be rotated.</p>
<!--more-->
<p>Okay, let's start at the beginning. How are we going to represent a puzzle? Well, let's go with the same basic idea that was described in the original post: sets of four letters (in the order north, east, south, west), one for each tile. Furthermore, the letters represent color. Originally CMYK for cyan, magenta, yellow, and black, but we'll also add RGB for red, green, and blue (it's easy enough to add colors). Next, we'll use upper case and lower case letters in order to represent the two halves of a matching image.</p>
<p>So take the unsolved image above:</p>
<p><a data-toggle="lightbox" href="http://blog.jverkamp.com/2014/10/28/tile-puzzle/unsolved-3x3.png"><img src="http://blog.jverkamp.com/2014/10/28/tile-puzzle/unsolved-3x3.png" /></a></p>
<p>The first tile would be described as <code>cymK</code> for three circles and one rectangle. Continuing on, the entire puzzle would be:</p>
<pre class="scheme"><code>'("cymK" "KyCy" "ymkc" "mkYc" "MycK" "mCkY" "cmKY" "KYmC" "McMk")</code></pre>
<p>Now we'll want two helper functions:</p>
<pre class="scheme"><code>; Insert an item into the given location in a list
(define (insert-at ls item x)
  (for/list ([i (in-naturals)]
             [el (in-list ls)])
    (if (= x i) item el)))

; Return a list of all rotated versions of a string
(define (rotations str)
  (for/list ([i (in-range (string-length str))])
    (string-append (substring str i) (substring str 0 i))))</code></pre>
<p>Specifically, the first function allows us to insert a tile into a specified location in a list, while the second returns all possible rotations of our four character string. All around, things are going to be a little inefficient because we're working with lists rather than directly accessing something like a vector, but since the size of the puzzle is so small, the cost for these functions will be relatively cheap (especially compared to the crazy number of possible orderings of the tiles).</p>
<p>Okay, with that, we actually have enough of a framework to work out our solution. The basic plan of attack will be very much the same as when we worked on the <a href="http://blog.jverkamp.com/2014/09/03/chess-puzzles-n-queens">N Queens Puzzle</a>. Place each piece in order, backtracking as soon as we see a valid solution. This way we can cut out huge swaths of the potential solution space.</p>
<pre class="scheme"><code>; Solve a puzzle by ordering pieces so that they match
(define (solve puzzle)
  ; Start with an empty solution space (all null) and a list of pieces to place
  (let loop ([solution (make-list (length puzzle) "\0\0\0\0")]
             [to-place puzzle]
             [index    0])
    (cond
      ; If we've filled in all of the pieces, we have a solution
      [(= index (length puzzle))
       solution]
      ; Otherwise, try each piece, only recurring for those that fit
      ; Return the first that solves the puzzle from here,
      ; by recursion this will be a full solution
      [else
       (for*/first ([next-item (in-list to-place)]
                    [next-item-rotated (in-list (rotations next-item))]
                    [next-puzzle (in-value (insert-at solution
                                                      next-item-rotated
                                                      index))]
                    #:when (valid? next-puzzle)
                    [recur (in-value (loop next-puzzle
                                           (remove next-item to-place)
                                           (+ index 1)))]
                    #:when recur)
         recur)])))</code></pre>
<p>Basically there are two interesting parts: the <code>let loop</code> and the <code>for*/first</code> block. The main <code>loop</code> is the primary bit of the recursion. At any particular step, we have the solution that we've built thus far. We'll start with all <code>\0</code> strings (which we'll special case in <code>valid?</code>) and then fill in puzzle pieces one at a time. <code>to-place</code> will hold the pieces we've yet to place. The <code>index</code> is used primarily to insert new pieces at the proper location.</p>
<p>Next, we have the <code>for*/first</code> loop. This is designed to clean up the search, basically by returning the first recursion that makes it through all of the lists and conditionals. Specifically, we're going to do all of the following:</p>
<ul>
  <li>Loop through all remaining pieces to place as <code>next-item</code></li>
  <li>For each piece, try each rotation in turn</li>
  <li>Generate the <code>next-puzzle</code> by inserting that piece</li>
  <li>Check that the new insertion is <code>valid?</code></li>
  <li>Recur with the newly placed piece removed</li>
  <li>If there's a valid solution, continue to the body of the loop (and thus return, since we're looking for the <code>first</code>)</li>
</ul>
<p>All that combines (with the power of recursion!) to solve the puzzle:</p>
<pre class="scheme"><code>&gt; (solve '("cymK" "KyCy" "ymkc"
           "mkYc" "MycK" "mCkY"
           "cmKY" "KYmC" "McMk"))
'("cymK" "mCkY" "ymkc"
  "McMk" "KYmC" "KyCy"
  "mkYc" "MycK" "cmKY")</code></pre>
<p>Of course that's a little hard to see what in the world is going on. Let's write a few functions using Racket's <code><a href="http://docs.racket-lang.org/search/index.html?q=pict">pict</a></code> library. First, a <code><a href="http://docs.racket-lang.org/search/index.html?q=parameter">parameter</a></code> to control how large each tile will be and a pair of functions to decode the letters into colors / shapes:</p>
<pre class="scheme"><code>(define current-tile-size (make-parameter 50))

(define (char-&gt;color c)
  (case c
    [(#\R #\r) "red"]
    [(#\G #\g) "green"]
    [(#\B #\b) "blue"]
    [(#\C #\c) "cyan"]
    [(#\M #\m) "magenta"]
    [(#\Y #\y) "yellow"]
    [(#\K #\k) "black"]
    [else      "white"]))

(define (char-&gt;shape c)
  (case c
    [(#\R #\G #\B #\C #\M #\Y #\K) filled-rectangle]
    [(#\r #\g #\b #\c #\m #\y #\k) filled-ellipse]
    [(#\null)                      (λ _ (filled-rectangle 0 0))]))</code></pre>
<p>With those, we can render an individual tile:</p>
<pre class="scheme"><code>; Render a single tile given a four character specifier
; Order is top, right, bottom, left
; Colors are cyan, magenta, yellow, red, green, blue, black (k for black)
; Uppercase are square, lowercase are circular
(define (render-tile tile)
  (match-define (list top right bottom left) (string-&gt;list tile))

  ; Size of the individual images
  (define quad-size (quotient (current-tile-size) 3))

  ; Offsets for pinning, zero/half/full size adjusted for quad size
  (define zs (- (quotient quad-size 2)))
  (define hs (- (quotient (current-tile-size) 2) (quotient quad-size 2)))
  (define fs (- (current-tile-size) (quotient quad-size 2)))

  ; Helper function to render a specific shape of the specific color
  (define (shape c)
    (colorize ((char-&gt;shape c) quad-size quad-size)
              (char-&gt;color c)))

  ; Construct the image by layering each of the four sides on the base
  (let* ([pict (rectangle (current-tile-size) (current-tile-size))]
         [pict (pin-under pict hs zs (shape top))]
         [pict (pin-under pict fs hs (shape right))]
         [pict (pin-under pict hs fs (shape bottom))]
         [pict [pin-under pict zs hs (shape left)]])
    (clip pict)))</code></pre>
<p>One part that took a bit here was getting the <code>zs</code>, <code>hs</code>, and <code>fs</code> functions correct. Since coordinates are based on the top left corner of each subimage, we need to correctly offset by half of the image sizes for each of the halfway points. Also, make sure you use the <code><a href="http://docs.racket-lang.org/search/index.html?q=clip">clip</a></code> function. It will look fine with just a single tile if you do not use it, but once you start merging them... Strange things happen.</p>
<p>Demo time:</p>
<pre class="scheme"><code> &gt; (render-tile "cymK") </code></pre>
<p><a data-toggle="lightbox" href="http://blog.jverkamp.com/2014/10/28/tile-puzzle/single-tile-cymK.png"><img src="http://blog.jverkamp.com/2014/10/28/tile-puzzle/single-tile-cymK.png" /></a></p>
<p>Nice!</p>
<p>Next, we can combine the <code>picts</code> into a single larger <code>pict</code>:</p>
<pre class="scheme"><code>; Render a puzzle of multiple tiles
; Puzzles are assumed to be square
(define (render puzzle)
  (define width (integer-sqrt (length puzzle)))

  (define tiles
    (for/list ([y (in-range width)])
      (for/list ([x (in-range width)])
        (render-tile (list-ref puzzle (+ x (* y width)))))))

  (define rows
    (map (λ (row) (apply (curry hc-append -1) row)) tiles))

  (apply (curry vc-append -1) rows))</code></pre>
<p>Bam:</p>
<pre class="scheme"><code>&gt; (render (solve '("cymK" "KyCy" "ymkc"
                   "mkYc" "MycK" "mCkY"
                   "cmKY" "KYmC" "McMk")))</code></pre>
<p><a data-toggle="lightbox" href="http://blog.jverkamp.com/2014/10/28/tile-puzzle/solved-3x3.png"><img src="http://blog.jverkamp.com/2014/10/28/tile-puzzle/solved-3x3.png" /></a></p>
<p>Neat! We can try it on larger puzzles as well:</p>
<p>...</p>
<p>Okay, that takes a really long time. Perhaps a 4x4 with more colors (more colors is actually easier to solve since there are less valid placements for each tile):</p>
<pre class="scheme"><code>&gt; (define p4x4 (random-puzzle 4 #:colors 7))
&gt; p4x4
'("yyMY" "mCKM" "Cgrr" "BMMy"
  "MrYB" "mGYK" "BRyG" "gRmc"
  "KCCm" "cyby" "mYbY" "BMcB"
  "Bmbm" "kbrr" "MkYc" "ybGY")
&gt; (render p4x4)</code></pre>
<p><a data-toggle="lightbox" href="http://blog.jverkamp.com/2014/10/28/tile-puzzle/unsolved-4x4.png"><img src="http://blog.jverkamp.com/2014/10/28/tile-puzzle/unsolved-4x4.png" /></a></p>
<pre class="scheme"><code>&gt; (define p4x4-solution (solve p4x4))
&gt; p4x4-solution
'("rCgr" "BBMc" "YmYb" "yBMM"
  "GBRy" "mBmb" "ycyb" "mKCC"
  "rkbr" "MmCK" "YyyM" "cMkY"
  "BMrY" "cgRm" "YybG" "KmGY")
&gt; (render p4x4-solution)</code></pre>
<p><a data-toggle="lightbox" href="http://blog.jverkamp.com/2014/10/28/tile-puzzle/solved-4x4.png"><img src="http://blog.jverkamp.com/2014/10/28/tile-puzzle/solved-4x4.png" /></a></p>
<p>Shiny. :)</p>
<p>For those interested, here's how I generated random puzzles:</p>
<pre class="scheme"><code>; Generate random puzzles
(define (random-puzzle size #:colors [colors 4])
  ; Generate n+1 intersections (including those off the edges)
  ; Each value is the top left corner of a tile with the right then down edge
  (define intersections
    (for/list ([y (in-range (+ size 1))])
      (for/list ([x (in-range (+ size 1))])
        (for/list ([which (in-list '(right down))])
          (list (string-ref "CMYKRGB" (random (min colors 7)))
                (if (= 0 (random 2)) 'normal 'inverse))))))

  (define (@ x y w invert?)
    (match-define (list char mode)
      (list-ref (list-ref (list-ref intersections y) x)
                (if (eq? w 'right) 0 1)))

    ((if (xor invert? (eq? mode 'inverse))
         char-downcase
         identity)
     char))

  ; Fill out the tiles
  (shuffle
   (for*/list ([y (in-range size)]
               [x (in-range size)])
     (string (@ x       y       'right #f)
             (@ (+ x 1) y       'down  #f)
             (@ x       (+ y 1) 'right #t)
             (@ x       y       'down  #t)))))</code></pre>
<p>And that's it. Surprisingly simple<span class="footnote"><sup><a href="#footnote-2">[2]</a></sup></span> to solve, a little more to render. I love problems like this. :)</p>
<p>If you really want to go off the deep end though and, go download the full source from GitHub (<a href="https://github.com/jpverkamp/small-projects/blob/master/blog/tile-puzzles.rkt">tile-puzzles.rkt</a>). Therein lies solutions for using <a href="https://en.wikipedia.org/wiki/simulated_annealing">simulated annealing</a> or <a href="https://en.wikipedia.org/wiki/genetic_algorithms">genetic algorithms</a> in an effort to solve the problem more <a href="https://en.wikipedia.org/wiki/heurisitically">heurisitically</a>, but neither is working particularly well as of yet. If you want to take one of those and finish it up, I'd love to see it.</p>]]></content></entry><entry><title>Regular Expression Fractals</title><link href="http://blog.jverkamp.com/2014/10/05/regular-expression-fractals" /><id>urn:uuid:32f94d69-d55a-a14d-ef3c-5252a500522e</id><updated>2014-10-05T00:00:00Z</updated><summary type="html"><![CDATA[<p>Oops, turns out I haven't had a post in a good long while. Before it gets even longer, I figure that I should take one off my backlog and just write it up, even if it is a little on the shorter side.</p>
<p>Today's post was inspired by this post on /r/dailyprogrammer a month ago today: <a href="https://www.reddit.com/r/dailyprogrammer/comments/2fkh8u/9052014_challenge_178_hard_regular_expression/">Challenge #178 [Hard] Regular Expression Fractals</a>. The basic idea is that you are going to take a rectangular region and divide it into four quadrants, again and again, recording the path as you go (images from that post):</p>
<p><a data-toggle="lightbox" href="http://blog.jverkamp.com/2014/10/05/regular-expression-fractals/step-1.png"><img src="http://blog.jverkamp.com/2014/10/05/regular-expression-fractals/step-1.png" /></a> <a data-toggle="lightbox" href="http://blog.jverkamp.com/2014/10/05/regular-expression-fractals/step-2.png"><img src="http://blog.jverkamp.com/2014/10/05/regular-expression-fractals/step-2.png" /></a> <a data-toggle="lightbox" href="http://blog.jverkamp.com/2014/10/05/regular-expression-fractals/step-3.png"><img src="http://blog.jverkamp.com/2014/10/05/regular-expression-fractals/step-3.png" /></a></p>
]]></summary><content type="html"><![CDATA[<p>Oops, turns out I haven't had a post in a good long while. Before it gets even longer, I figure that I should take one off my backlog and just write it up, even if it is a little on the shorter side.</p>
<p>Today's post was inspired by this post on /r/dailyprogrammer a month ago today: <a href="https://www.reddit.com/r/dailyprogrammer/comments/2fkh8u/9052014_challenge_178_hard_regular_expression/">Challenge #178 [Hard] Regular Expression Fractals</a>. The basic idea is that you are going to take a rectangular region and divide it into four quadrants, again and again, recording the path as you go (images from that post):</p>
<p><a data-toggle="lightbox" href="http://blog.jverkamp.com/2014/10/05/regular-expression-fractals/step-1.png"><img src="http://blog.jverkamp.com/2014/10/05/regular-expression-fractals/step-1.png" /></a> <a data-toggle="lightbox" href="http://blog.jverkamp.com/2014/10/05/regular-expression-fractals/step-2.png"><img src="http://blog.jverkamp.com/2014/10/05/regular-expression-fractals/step-2.png" /></a> <a data-toggle="lightbox" href="http://blog.jverkamp.com/2014/10/05/regular-expression-fractals/step-3.png"><img src="http://blog.jverkamp.com/2014/10/05/regular-expression-fractals/step-3.png" /></a></p>
<!--more-->
<p>At the end, each point in the image will have a 'path' of decisions that got you there, making a string of the numbers 1, 2, 3, and 4.</p>
<p><a data-toggle="lightbox" href="http://blog.jverkamp.com/2014/10/05/regular-expression-fractals/step-4.png"><img src="http://blog.jverkamp.com/2014/10/05/regular-expression-fractals/step-4.png" /></a> <a data-toggle="lightbox" href="http://blog.jverkamp.com/2014/10/05/regular-expression-fractals/step-5.png"><img src="http://blog.jverkamp.com/2014/10/05/regular-expression-fractals/step-5.png" /></a> <a data-toggle="lightbox" href="http://blog.jverkamp.com/2014/10/05/regular-expression-fractals/step-6.png"><img src="http://blog.jverkamp.com/2014/10/05/regular-expression-fractals/step-6.png" /></a></p>
<p>How does that translate into code?</p>
<pre class="scheme"><code>; Generate a fractal by matching a recursive path into an image
(define (regex-fractal regex size)
  (flomap-&gt;bitmap
   (build-flomap*
    3 size size
    (λ (x y)
      (let loop ([t 0] [l 0] [s size] [path ""])
        (cond
          ; If we're at the last level, white, otherwise black
          [(&lt;= s 1)
           (cond
             [(regexp-match regex path) '#(1 1 1)]
             [else                      '#(0 0 0)])]
          ; Otherwise, divide the region into four subregions
          ; Recur into whichever our current pixel is in
          [else
           (define s/2 (quotient s 2))
           (define x-mid (+ l s/2))
           (define y-mid (+ t s/2))
           (loop
            (if (&lt; y y-mid) t y-mid)
            (if (&lt; x x-mid) l x-mid)
            s/2
            (~a path
                (match (list (&lt; y y-mid) (&lt; x x-mid))
                  ['(#t #t) 2]
                  ['(#t #f) 1]
                  ['(#f #t) 3]
                  ['(#f #f) 4])))]))))))</code></pre>
<p>That's actually pretty close to a lot of the fractal code we've been writing recently. And it generates some pretty cool images already:</p>
<pre class="scheme"><code> &gt; (regex-fractal #px"(13|31|24|42)" 256) </code></pre>
<p><a data-toggle="lightbox" href="http://blog.jverkamp.com/2014/10/05/regular-expression-fractals/example-256.png"><img src="http://blog.jverkamp.com/2014/10/05/regular-expression-fractals/example-256.png" /></a></p>
<p>But we can do a little better than that. Let's parameterize a few things:</p>
<pre class="scheme"><code>(define current-size     (make-parameter 64))
(define current-coloring (make-parameter (thunk* '#(1 1 1))))
(define current-mode     (make-parameter 'short))</code></pre>
<p>Specifically, we'll pull the size out, but also add two more parameters. A mode to short circuit (so that as soon as the pattern matches, return, rather than calculating the entire depth of the image) and another to color the pixel based on a specific match. As an example coloring, consider this:</p>
<pre class="scheme"><code>; Get the maximum path length; useful for making gradients
(define (size-&gt;path-length size)
  (inexact-&gt;exact (floor (/ (log size) (log 2)))))

; Color a pixel based on how long of a match group we have
(define (color-by-length m)
  (define l (string-length (car m)))
  (define p (size-&gt;path-length (current-size)))
  (if (= l p)
      '#(1 1 1)
      (vector
       (if (&gt;= (length m) 3) (/ (string-length (list-ref m 2)) p) 0)
       (if (&gt;= (length m) 2) (/ (string-length (list-ref m 1)) p) 0)
       (if (&gt;= (length m) 4) (/ (string-length (list-ref m 3)) p) 0))))</code></pre>
<p>Now, let's take another example, one where the matching group must contain a 1. But now, color based on how much of the path is before the one:</p>
<pre class="scheme"><code>(parameterize ([current-size 256]
               [current-coloring color-by-length]
               [current-mode 'short])
  (regex-fractal #px"(.*)1"))</code></pre>
<p><a data-toggle="lightbox" href="http://blog.jverkamp.com/2014/10/05/regular-expression-fractals/color-example-256.png"><img src="http://blog.jverkamp.com/2014/10/05/regular-expression-fractals/color-example-256.png" /></a></p>
<p>Very cool.</p>
<p>After that, I just collected and made up a bunch of colorings and regular expressions and generate all of the images. Check the <a href="https://github.com/jpverkamp/small-projects/blob/master/blog/regex-fractal.rkt">full source</a> on GitHub for details, but basically I have three colorings: a default white only, the length based coloring above, and another which matches the most common color in a match. Then I have about two dozen regular expression.</p>
<p>Then I wrote a quick loop that will generate all images in both modes (short circuiting and long), with all three colorings. It's a lot of images... Here are some of my favorites:</p>
<pre class="scheme"><code> (demo "test256" 256) </code></pre>
<p>First, a basic <a href="https://en.wikipedia.org/wiki/Sierpinski_triangle">Sierpinski triangle</a> <code>1</code>:</p>
<p><a data-toggle="lightbox" href="http://blog.jverkamp.com/2014/10/05/regular-expression-fractals/sierpinski_full_by-length_256.png"><img src="http://blog.jverkamp.com/2014/10/05/regular-expression-fractals/sierpinski_full_by-length_256.png" /></a></p>
<p>But if you turn on most common color, you see that each color sticks to it's own color (a pattern we'll see oft repeated):</p>
<p><a data-toggle="lightbox" href="http://blog.jverkamp.com/2014/10/05/regular-expression-fractals/sierpinski_full_common-voting_256.png"><img src="http://blog.jverkamp.com/2014/10/05/regular-expression-fractals/sierpinski_full_common-voting_256.png" /></a></p>
<p>What's even more interesting is when you switch to 'short mode'. Since we'll stop recurring as soon as we see a 1, you get blocks rather than each individual pixel colored:</p>
<p><a data-toggle="lightbox" href="http://blog.jverkamp.com/2014/10/05/regular-expression-fractals/sierpinski_short_common-voting_256.png"><img src="http://blog.jverkamp.com/2014/10/05/regular-expression-fractals/sierpinski_short_common-voting_256.png" /></a></p>
<p>Next, four corners. Basically, look for repeated patterns of a single digit: <code>((.)(\\2*))</code>. That should mean that we go out to the four corners, each with its own color:</p>
<p><a data-toggle="lightbox" href="http://blog.jverkamp.com/2014/10/05/regular-expression-fractals/four-corners_full_common-voting_256.png"><img src="http://blog.jverkamp.com/2014/10/05/regular-expression-fractals/four-corners_full_common-voting_256.png" /></a></p>
<p>Next, split the region into left and right halves, by checking if a 1 or 2 appears first: <code>^[34]*2(.*)</code>. If it's a 2, mark it, if it's a 1, do not.</p>
<p><a data-toggle="lightbox" href="http://blog.jverkamp.com/2014/10/05/regular-expression-fractals/left-right_full_by-length_256.png"><img src="http://blog.jverkamp.com/2014/10/05/regular-expression-fractals/left-right_full_by-length_256.png" /></a></p>
<p>Next, a nice jagged change on the original Sierpinski, match anything with either a 1 or a 2 (or both): <code>(12)</code></p>
<p><a data-toggle="lightbox" href="http://blog.jverkamp.com/2014/10/05/regular-expression-fractals/jagged_full_default_256.png"><img src="http://blog.jverkamp.com/2014/10/05/regular-expression-fractals/jagged_full_default_256.png" /></a></p>
<p>Or, similarly, make two Sierpinskis by matching patterns where there's both a 1 and a 2: <code>(1.*2|2.*1)</code>:</p>
<p><a data-toggle="lightbox" href="http://blog.jverkamp.com/2014/10/05/regular-expression-fractals/double-sierpinski_full_default_256.png"><img src="http://blog.jverkamp.com/2014/10/05/regular-expression-fractals/double-sierpinski_full_default_256.png" /></a></p>
<p><a data-toggle="lightbox" href="http://blog.jverkamp.com/2014/10/05/regular-expression-fractals/double-sierpinski_full_by-length_256.png"><img src="http://blog.jverkamp.com/2014/10/05/regular-expression-fractals/double-sierpinski_full_by-length_256.png" /></a></p>
<p>Next, match patterns where all 1s (if any) occur before all 2s: <code>^[34]*[134]*[34]*[234]*[34]*$</code></p>
<p><a data-toggle="lightbox" href="http://blog.jverkamp.com/2014/10/05/regular-expression-fractals/ones-then-twos_full_default_256.png"><img src="http://blog.jverkamp.com/2014/10/05/regular-expression-fractals/ones-then-twos_full_default_256.png" /></a></p>
<p>Or you can invert the Sierpinski triangle by making sure there are <em>no</em> ones at all: <code>^[^1]*$</code></p>
<p><a data-toggle="lightbox" href="http://blog.jverkamp.com/2014/10/05/regular-expression-fractals/no-one_full_common-voting_256.png"><img src="http://blog.jverkamp.com/2014/10/05/regular-expression-fractals/no-one_full_common-voting_256.png" /></a></p>
<p>Or go really crazy and do some math. For example, finding all sequences with an even sum: <code>^(2|4|[13][24]*[13])*$</code></p>
<p><a data-toggle="lightbox" href="http://blog.jverkamp.com/2014/10/05/regular-expression-fractals/even-sum_full_by-length_256.png"><img src="http://blog.jverkamp.com/2014/10/05/regular-expression-fractals/even-sum_full_by-length_256.png" /></a></p>
<p>Next, we have a few from the comments on the <a href="https://www.reddit.com/r/dailyprogrammer/comments/2fkh8u/">original post</a>.</p>
<p>Some nice curls: <code>[13][24][^1][^2][^3][^4]</code></p>
<p><a data-toggle="lightbox" href="http://blog.jverkamp.com/2014/10/05/regular-expression-fractals/curls_full_common-voting_256.png"><img src="http://blog.jverkamp.com/2014/10/05/regular-expression-fractals/curls_full_common-voting_256.png" /></a></p>
<p>Patterns where you have the same pattern repeated at least three times, but with other random bits in between: <code>(.)\\1..\\1</code></p>
<p><a data-toggle="lightbox" href="http://blog.jverkamp.com/2014/10/05/regular-expression-fractals/self-similar_full_default_256.png"><img src="http://blog.jverkamp.com/2014/10/05/regular-expression-fractals/self-similar_full_default_256.png" /></a>\ <a data-toggle="lightbox" href="http://blog.jverkamp.com/2014/10/05/regular-expression-fractals/self-similar_full_common-voting_256.png"><img src="http://blog.jverkamp.com/2014/10/05/regular-expression-fractals/self-similar_full_common-voting_256.png" /></a></p>
<p>Or you can draw some nice boxes: <code>(?:13|31)(.*)</code></p>
<p><a data-toggle="lightbox" href="http://blog.jverkamp.com/2014/10/05/regular-expression-fractals/boxes_short_default_256.png"><img src="http://blog.jverkamp.com/2014/10/05/regular-expression-fractals/boxes_short_default_256.png" /></a> <a data-toggle="lightbox" href="http://blog.jverkamp.com/2014/10/05/regular-expression-fractals/boxes_full_by-length_256.png"><img src="http://blog.jverkamp.com/2014/10/05/regular-expression-fractals/boxes_full_by-length_256.png" /></a></p>
<p>A nice recursive outline (reminds me of the <a href="http://blog.jverkamp.com/2014/09/16/fractal-invaders">Fractal Invaders</a>): <code>^(1[124]|2[14]|4[12]|31)*$</code></p>
<p><a data-toggle="lightbox" href="http://blog.jverkamp.com/2014/10/05/regular-expression-fractals/outlined_full_by-length_256.png"><img src="http://blog.jverkamp.com/2014/10/05/regular-expression-fractals/outlined_full_by-length_256.png" /></a></p>
<p>Figure eights: <code>^(?:..)*(?:[13][13]|[24][24])((?:..)*)$</code></p>
<p><a data-toggle="lightbox" href="http://blog.jverkamp.com/2014/10/05/regular-expression-fractals/figure-eights_full_by-length_256.png"><img src="http://blog.jverkamp.com/2014/10/05/regular-expression-fractals/figure-eights_full_by-length_256.png" /></a></p>
<p>And finally, some nice diagonal lines, by making sure the top left/bottom right are before the top right/bottom left: <code>^[13]*[24]*$</code>:</p>
<p><a data-toggle="lightbox" href="http://blog.jverkamp.com/2014/10/05/regular-expression-fractals/scanlines_full_common-voting_256.png"><img src="http://blog.jverkamp.com/2014/10/05/regular-expression-fractals/scanlines_full_common-voting_256.png" /></a></p>
<p>And there you have it. Any other awesome patterns you come up with? Share them below. I'd love to see them.</p>
<p>As always, the full source is available on GitHub if you'd like to play with it: <a href="https://github.com/jpverkamp/small-projects/blob/master/blog/regex-fractal.rkt">regex-fractal.rkt</a></p>]]></content></entry></feed>