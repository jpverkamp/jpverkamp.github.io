<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>jverkamp.com</title><link href="http://blog.jverkamp.com" /><link rel="self" href="http://blog.jverkamp.com/feed/" /><updated>2015-01-27T00:00:00Z</updated><author><name>JP Verkamp</name></author><id>urn:uuid:f148b655-ada3-c720-0c01-ca384ab68088</id><entry><title>iOS Backups in Racket: Messages</title><link href="http://blog.jverkamp.com/2015/01/27/ios-backups-in-racket-messages" /><id>urn:uuid:5a638d35-714a-ea03-68c1-9a6ac3d30dcd</id><updated>2015-01-27T00:00:00Z</updated><summary type="html"><![CDATA[<p>So far we've <a href="http://blog.jverkamp.com/2015/01/22/ios-backups-in-racket-groundwork">laid the groundwork</a>, loading local iOS backups and parsed out <a href="http://blog.jverkamp.com/2015/01/23/ios-backups-in-racket-contacts">contacts</a>. Today let's take another step down the rabbit hole and figure out how messages are stored.</p>
]]></summary><content type="html"><![CDATA[<p>So far we've <a href="http://blog.jverkamp.com/2015/01/22/ios-backups-in-racket-groundwork">laid the groundwork</a>, loading local iOS backups and parsed out <a href="http://blog.jverkamp.com/2015/01/23/ios-backups-in-racket-contacts">contacts</a>. Today let's take another step down the rabbit hole and figure out how messages are stored.</p>
<!--more-->
<p>Okay, first things first, we need to find the database(s) that messages are stored in. Using the <a href="https://theiphonewiki.com/wiki/ITunes_Backup#Files">same source</a> as last time, we have:</p>
<pre class="racket"><code>&gt; (hash-filename "Library/SMS/sms.db" "HomeDomain")
"3d0d7e5fb2ce288813306e4d4636395e047a3d28"</code></pre>
<p>Interesting. What's in there?</p>
<pre class="sql"><code>sqlite&gt; .tables
_SqliteDatabaseProperties  chat_message_join
attachment                 handle
chat                       message
chat_handle_join           message_attachment_join</code></pre>
<p>Dang. That's rather less than there was when dealing with contacts. From a first guess, I would say that <code>message</code> contains the text itself, <code>chat</code> is a group of messages with the same people, and <code>*_join</code> are tables that related those. <code>handle</code> could perhaps be a way of relating who is in a chat to the information in contacts from last week. Let's see how I did:</p>
<pre class="sql"><code>CREATE TABLE message (ROWID INTEGER PRIMARY KEY AUTOINCREMENT,
    guid TEXT UNIQUE NOT NULL,
    text TEXT,
    replace INTEGER DEFAULT 0,
    service_center TEXT,
    handle_id INTEGER DEFAULT 0,
    subject TEXT,
    country TEXT,
    attributedBody BLOB,
    version INTEGER DEFAULT 0,
    type INTEGER DEFAULT 0,
    service TEXT,
    account TEXT,
    account_guid TEXT,
    error INTEGER DEFAULT 0,
    date INTEGER,
    date_read INTEGER,
    date_delivered INTEGER,
    is_delivered INTEGER DEFAULT 0,
    is_finished INTEGER DEFAULT 0,
    is_emote INTEGER DEFAULT 0,
    is_from_me INTEGER DEFAULT 0,
    is_empty INTEGER DEFAULT 0,
    is_delayed INTEGER DEFAULT 0,
    is_auto_reply INTEGER DEFAULT 0,
    is_prepared INTEGER DEFAULT 0,
    is_read INTEGER DEFAULT 0,
    is_system_message INTEGER DEFAULT 0,
    is_sent INTEGER DEFAULT 0,
    has_dd_results INTEGER DEFAULT 0,
    is_service_message INTEGER DEFAULT 0,
    is_forward INTEGER DEFAULT 0,
    was_downgraded INTEGER DEFAULT 0,
    is_archive INTEGER DEFAULT 0,
    cache_has_attachments INTEGER DEFAULT 0,
    cache_roomnames TEXT,
    was_data_detected INTEGER DEFAULT 0,
    was_deduplicated INTEGER DEFAULT 0,
    is_audio_message INTEGER DEFAULT 0,
    is_played INTEGER DEFAULT 0,
    date_played INTEGER,
    item_type INTEGER DEFAULT 0,
    other_handle INTEGER DEFAULT -1,
    group_title TEXT,
    group_action_type INTEGER DEFAULT 0,
    share_status INTEGER,
    share_direction INTEGER,
    is_expirable INTEGER DEFAULT 0,
    expire_state INTEGER DEFAULT 0,
    message_action_type INTEGER DEFAULT 0,
    message_source INTEGER DEFAULT 0
 );</code></pre>
<p>Oof. Okay, that's more like what I was expecting. In particular though, it looks like we don't care about most of those fields. In particular, I think the interesting fields will be <code>guid</code>, <code>text</code>, <code>handle_id</code> (it looks like we will need the <code>handle</code> table), <code>date</code>, and <code>is_from_me</code>.</p>
<p>Next, <code>chat</code>:</p>
<pre class="sql"><code>sqlite&gt; .schema chat
CREATE TABLE chat (ROWID INTEGER PRIMARY KEY AUTOINCREMENT,
    guid TEXT UNIQUE NOT NULL,
    style INTEGER,
    state INTEGER,
    account_id TEXT,
    properties BLOB,
    chat_identifier TEXT,
    service_name TEXT,
    room_name TEXT,
    account_login TEXT,
    is_archived INTEGER DEFAULT 0,
    last_addressed_handle TEXT,
    display_name TEXT,
    group_id TEXT
);</code></pre>
<p>Hmm. It turns out that we don't actually need anything there. All that we need to know about chats is which ID we need, which because it's a join table, that will be in <code>chat_message_join</code>:</p>
<pre class="sql"><code>sqlite&gt; .schema chat_message_join
CREATE TABLE chat_message_join (
    chat_id INTEGER REFERENCES chat (ROWID) ON DELETE CASCADE,
    message_id INTEGER REFERENCES message (ROWID) ON DELETE CASCADE,
    PRIMARY KEY (chat_id, message_id)
);</code></pre>
<p>So if we have a chat ID, we can get all of that information:</p>
<pre class="sql"><code>SELECT
  message.ROWID as message_id,
  message.date,
  message.service,
  message.is_from_me,
  (CASE WHEN message.subject IS NULL THEN '' ELSE message.subject END),
  (CASE WHEN message.text IS NULL THEN '' ELSE message.text END)
FROM
  chat_message_join,
  message
WHERE
  chat_id = ?
  AND message_id = message.ROWID
ORDER BY date ASC</code></pre>
<p>The conversion from <code>NULL</code> to an empty string is mostly for later. I know that I'll want to serialize these, most likely to JSON and I don't particularly care about the difference between a <code>NULL</code> entry and an empty string.</p>
<p>That's a good start. We still need to know who they're from though.</p>
<pre class="sql"><code>sqlite&gt; .schema handle
CREATE TABLE handle (
    ROWID INTEGER PRIMARY KEY AUTOINCREMENT UNIQUE,
    id TEXT NOT NULL,
    country TEXT,
    service TEXT NOT NULL,
    uncanonicalized_id TEXT,
    UNIQUE (id,
    service)
);</code></pre>
<p>Looking at some of the values, it seems that <code>id</code> is either an email or a phone number, while service is either SMS or iMessage (at least in my case). Country might be interesting later, but we'll ignore it for the moment.</p>
<p>So let's expand the query to include that information:</p>
<pre class="sql"><code>SELECT
  message.ROWID as message_id,
  message.date,
  message.service,
  message.is_from_me,
  handle.id as them,
  (CASE WHEN message.subject IS NULL THEN '' ELSE message.subject END),
  (CASE WHEN message.text IS NULL THEN '' ELSE message.text END)
FROM
  chat_message_join,
  message,
  handle
WHERE
  chat_id = ?
  AND message_id = message.ROWID
  AND handle_id = handle.ROWID
ORDER BY date ASC</code></pre>
<p>Cool. One last thing. Remember that <code>attachment</code> table? Let's go ahead and add that in, just loading the attachments as a single string:</p>
<pre class="sql"><code>SELECT
  message.ROWID as message_id,
  message.date,
  message.service,
  message.is_from_me,
  handle.id as them,
  (CASE WHEN message.subject IS NULL THEN '' ELSE message.subject END),
  (CASE WHEN message.text IS NULL THEN '' ELSE message.text END),
  (SELECT group_concat(attachment.filename)
     FROM message_attachment_join, attachment
     WHERE message_attachment_join.message_id = message.ROWID
       AND message_attachment_join.attachment_id = attachment.ROWID)
FROM
  chat_message_join,
  message,
  handle
WHERE
  chat_id = ?
  AND message_id = message.ROWID
  AND handle_id = handle.ROWID
ORDER BY date ASC</code></pre>
<p>Okay. They say that <a href="https://www.youtube.com/watch?v=pele5vptVgc" data-toggle="lightbox">knowing is half the battle</a>, so having all of the structure and that SQL query should translate pretty directly to code:</p>
<pre class="racket"><code>(struct chat (contacts messages) #:prefab)
(struct message (date service sender subject text attachments) #:prefab)
(struct attachment (name path) #:prefab)

; Load all chats from a backup directory
(define (list-chats)
  (hash-ref!
   chats-by-backup
   (current-backup)
   (Î» ()
     (parameterize ([date-display-format 'iso-8601])
       ; Connect to the correct DB
       (define sms-db
         (sqlite3-connect
           #:database (build-path (backup-path (current-backup))
                                  MESSAGES-DB)))

       ; Loop over the individual chat ids
       (for/list ([(chat-id) (in-query sms-db "SELECT ROWID FROM chat")])
         ; Determine which contacts were involved in the conversation by contact
         ; Use models/contacts.rkt to figure out who belongs to contact information
         (define user-query "SELECT id FROM chat_handle_join, handle
                             WHERE chat_id = $1 AND handle_id = ROWID
                             ORDER BY handle_id ASC")
         (define contacts
           (for/list ([(contact) (in-query sms-db user-query chat-id)])
             (find-contact (normalize-contact contact))))

         ; Load the individual messages
         (define msg-query "
SELECT
  message.ROWID as message_id,
  message.date,
  message.service,
  message.is_from_me,
  handle.id as them,
  (CASE WHEN message.subject IS NULL THEN '' ELSE message.subject END),
  (CASE WHEN message.text IS NULL THEN '' ELSE message.text END),
  (SELECT group_concat(attachment.filename)
     FROM message_attachment_join, attachment
     WHERE message_attachment_join.message_id = message.ROWID
       AND message_attachment_join.attachment_id = attachment.ROWID)
FROM
  chat_message_join,
  message,
  handle
WHERE
  chat_id = ?
  AND message_id = message.ROWID
  AND handle_id = handle.ROWID
ORDER BY date ASC")
         (define messages
           (for/list ([(message-id
                        raw-date
                        service
                        from-me?
                        other-party
                        subject
                        text
                        raw-attachments)
                       (in-query sms-db msg-query chat-id)])
             ; Correct dates from Apple time to unix time
             ; TODO: Account for timezones?
             (define date (seconds-&gt;date (+ raw-date 978336000 (- (* 16 60 60))) #f))

             (define sender
               (if (= 1 from-me?)
                   (backup-phone-number (current-backup))
                   (normalize-contact other-party)))

             ; Load attachments,
             (define attachments
               (if (sql-null? raw-attachments)
                   '()
                   (for/list ([path (in-list (string-split raw-attachments ","))])
                     (attachment
                      (path-&gt;string (last (explode-path path)))
                      (build-path (backup-path (current-backup))
                                  (hash-filename path))))))

             (message date service sender subject text attachments)))

         ; Create the chat object
         (chat contacts messages))))))</code></pre>
<p>Theoretically, that should be a fairly direct translation. One interesting bit is the format of <code>date</code>. It's actually a timestamp, but not a normal <a href="https://en.wikipedia.org/wiki/Unix_timestamp">Unix timestamp</a>. So I have a bit of a <a href="https://en.wikipedia.org/wiki/magic_number">magic number</a>, but it works correctly for my backups, so we'll just leave it for the moment. Other than that, we use the <code>hash-filename</code> function from last time to get a local path for any <code>attachment</code> and we've got everything pretty much written.</p>
<p>And that's really all we need. One thing that would be nice to be able to do though is, given a contact, filter for only the messages with that contact (either directly or in group chats as well):</p>
<pre class="racket"><code>; Get all chats involving a specific chat
(define (find-chats-by-contact contact #:direct? [direct? #f])
  ; Allow the user to specify the contact by name / phone number / email / etc
  (when (not (contact? contact))
    (set! contact (find-contact contact)))

  ; Filter the list of chats
  (for/list ([chat (in-list (list-chats))]
             #:when (if direct?
                        (equal? (list contact) (chat-contacts chat))
                        (member contact (chat-contacts chat))))
    chat))</code></pre>
<p>If you have an iOS device, check it out. It makes certain things really easy. For example, if I want to have a log of every word that I've ever said in a conversation with Jenny:</p>
<pre class="racket"><code>&gt; (with-backup "86b18...aa36"
    (for*/list ([chat (in-list (find-chats-by-contact "Jenny" #:direct? #t))]
                [message (in-list (chat-messages chat))])
      (message-text message)))
'("Jenny, Jenny, who can I turn to?"
  "You give me somethin' I can hold on to"
  ...)</code></pre>
<p>That's exactly the sort of that prompted this entire thought: the ability to take the fairly opaque structure of iOS backups and dump them into an easily readable / easily diffable format for my own purposes. Sweet.</p>
<p>If you'd like to see the entire project, you can do so on GitHub: <a href="https://github.com/jpverkamp/ios-backup">ios-backup</a>. Alternatively, it's set up as a package, so you should be able to install it with <code>raco pkg install</code>. If you do, just import one or more of these:</p>
<pre class="racket"><code>(require ios-backup
         ios-backup/contacts
         ios-backup/messages)</code></pre>
<p>Here is a list of all of the posts in this series:</p>
<ul class="list-unstyled"><li class="post-listing"><a href="http://blog.jverkamp.com/2015/01/22/ios-backups-in-racket-groundwork">iOS Backups in Racket: Groundwork</a></li><li class="post-listing"><a href="http://blog.jverkamp.com/2015/01/23/ios-backups-in-racket-contacts">iOS Backups in Racket: Contacts</a></li><li class="post-listing"><a href="http://blog.jverkamp.com/2015/01/27/ios-backups-in-racket-messages">iOS Backups in Racket: Messages</a></li></ul>]]></content></entry><entry><title>His Majesty's Dragon</title><link href="http://blog.jverkamp.com/2015/01/25/his-majestys-dragon" /><id>urn:uuid:a17cd2b2-3fdd-7615-8b67-dfd65db3b999</id><updated>2015-01-25T00:00:00Z</updated><summary type="html"><![CDATA[<p><a href="https://www.goodreads.com/book/show/28876.His_Majesty_s_Dragon?from_search=true"><img src="http://blog.jverkamp.com/2015/01/25/his-majestys-dragon/his-majestys-dragon.jpg" /></a></p>
<p>As my third series / book of the year, I've read <a href="https://www.goodreads.com/book/show/28876.His_Majesty_s_Dragon?from_search=true"><em>His Majesty's Dragon</em></a>, the first in the <a href="https://www.goodreads.com/series/43272-temeraire">Temeraire</a> series by <a href="https://www.goodreads.com/author/show/8730.Naomi_Novik">Naomi Novik</a>.</p>
<p>This one is a little different, since although there eight novels currently out in the Temeraire series (with another due this year), I don't plan on finishing the series at the moment.</p>
]]></summary><content type="html"><![CDATA[<p><a href="https://www.goodreads.com/book/show/28876.His_Majesty_s_Dragon?from_search=true"><img src="http://blog.jverkamp.com/2015/01/25/his-majestys-dragon/his-majestys-dragon.jpg" /></a></p>
<p>As my third series / book of the year, I've read <a href="https://www.goodreads.com/book/show/28876.His_Majesty_s_Dragon?from_search=true"><em>His Majesty's Dragon</em></a>, the first in the <a href="https://www.goodreads.com/series/43272-temeraire">Temeraire</a> series by <a href="https://www.goodreads.com/author/show/8730.Naomi_Novik">Naomi Novik</a>.</p>
<p>This one is a little different, since although there eight novels currently out in the Temeraire series (with another due this year), I don't plan on finishing the series at the moment.</p>
<!--more-->
<p>This was always something that I had in mind when I set my 100 book goal. It's a lot of books to read and if I'm just not enjoying a series overly much, it's worth moving along.</p>
<p>That's not to say that I didn't enjoy <em>His Majesty's Dragon</em>. It was a very interestingly written story, in a style that where I can actually imagine people during the era of the Napoleonic Wars speaking (although if they actually spoke like that, I will admit to having no idea). That being said, that was actually one of the the things that took my out of the story. Both of the main characters (the man and the dragon) spoke so eloquently, it was hard to identity with them.</p>
<p>Another positive was how well Novik wove the dragons into the story. It never felt like they were just tacked on, and she seems to have thought through many of the changes that would come about had dragons been there throughout history. It's an interesting take on alternate history--not changing particularly much, but rather enhancing what already happened with the changes you want to make. At the very least, it saves you the time and trouble of trying to deal with a true divergence. History is complicated. Making up your entire own history as deep and complicated as the real one? Oof.</p>
<p>Back to the negative though, I wasn't particularly thrilled with the characterizations of the dragons. I understand and like the idea of dragons as or more intelligent than humans, but on the other hand it's a little strange for them to be <em>so</em> smart just out of the shell--although Novik did comment that was because they learn while therein.</p>
<p>Also, their size. It's a given in any story involving dragons that the mere idea that they could fly is a little strange. They're just too big and heavy. But not only can dragons in this universe fly, they can do so while carrying entire crews of men. It's a really neat idea--that you can basically have an entire navel crew in the air--and on a 'ship' as intelligent as a man to boot--but four dragons carrying an estimated 2000 men? That's almost 40 tons of men per dragon. I'm not buying it. So it goes. It's still pretty awesome.</p>
<p>And finally, I'm not really a fan of chosen one / only one in the world type stories (one of the issues I had with <a href="http://blog.jverkamp.com/2015/01/18/the-heroes-of-olympus">The Heroes of Olympus</a> as well), which is another reason not to carry on with this series. Throughout the first book is bad enough--<em>ooh, a new and unique species, at least in Europe</em>--the ending implies that the sequels will be even worse. So it goes.</p>
<p>All said and done, I did enjoy the story. It isn't exactly my sort of thing (thus not reading the sequels), but I'm sure there are many out there who would find it far more enjoyable. It's a neat world and it wouldn't hurt to read at least a chapter or two to just to see the writing style. It's certainly different.</p>
<p>Current progress: 11 of 100 books in 25 days. That puts me roughly 5 books ahead of schedule. Up next? <a href="https://www.goodreads.com/series/52837-the-iron-druid-chronicles">The Iron Druid Chronicles</a></p>]]></content></entry><entry><title>iOS Backups in Racket: Contacts</title><link href="http://blog.jverkamp.com/2015/01/23/ios-backups-in-racket-contacts" /><id>urn:uuid:e4d2594c-e305-b796-553b-77a2ca28a8fb</id><updated>2015-01-23T00:00:00Z</updated><summary type="html"><![CDATA[<p>After <a href="http://blog.jverkamp.com/2015/01/22/ios-backups-in-racket-groundwork">yesterday's post</a> laying the groundwork for looking into <a href="http://blog.jverkamp.com/category/programming/by-project/ios-backup">iOS Backups</a>, today why don't we actually start digging into one of the more interesting files: your list of contacts.</p>
]]></summary><content type="html"><![CDATA[<p>After <a href="http://blog.jverkamp.com/2015/01/22/ios-backups-in-racket-groundwork">yesterday's post</a> laying the groundwork for looking into <a href="http://blog.jverkamp.com/category/programming/by-project/ios-backup">iOS Backups</a>, today why don't we actually start digging into one of the more interesting files: your list of contacts.</p>
<!--more-->
<p>First things first, we have to find where the list of contacts is stored. That's the problem with the backup format--we have a giant list of files each of which is a SHA-1 hash. But of what?</p>
<p>Doing a little bit of digging, it looks like each of those hashes is based more or less on the filename of the source file. So if we happened to know that contacts are stored in the file <code>Library/AddressBook/AddressBook.sqlitedb</code><span class="footnote"><sup><a href="#footnote-1">[1]</a></sup></span>, we should just be able to hash that:</p>
<pre class="racket"><code>&gt; (call-with-input-string "Library/AddressBook/AddressBook.sqlitedb" sha1)
"adb8c77534444e97c31ff15924d50f3ed1fbd3b1"</code></pre>
<p>Hmm. That file doesn't exist. But all of my sources are telling me that <code>AddressBook.sqlitedb</code> is in <code>HomeDomain</code>. What does that mean? Well it seems that iOS has some amount of sandboxing in it's filesystem, rather than a more traditional Unix style. Basically, the path is actually:</p>
<p><code>Domain-Path</code></p>
<p>Specifically:</p>
<pre class="racket"><code>; Hash attachments so that we can find the local path
(define (hash-filename path [domain "MediaDomain"])
  (for*/first ([prefix (in-list (list "/var/mobile/"
                                      "~/"
                                      ""))]
               #:when (and (&gt; (string-length path) (string-length prefix))
                           (equal? (substring path 0 (string-length prefix)) prefix)))
    (define path-w/o-prefix (substring path (string-length prefix)))
    (call-with-input-string (~a domain "-" path-w/o-prefix) sha1)))</code></pre>
<p>There's a bit of complication there. If a file uses a traditional Unix path, starting with with <code>/var/mobile/</code> or <code>~/</code> (the home directory), that is stripped off before adding the domain. If we try it again:</p>
<pre class="racket"><code>&gt; (hash-filename "Library/AddressBook/AddressBook.sqlitedb" "HomeDomain")
"31bb7ba8914766d4ba40d6dfb6113c8b614be442"</code></pre>
<p>Ah hah! That file actually exists (and matches the hash I've found online).</p>
<p>Let's poke around. First things first, let's load it up in <code>sqlite3</code>:</p>
<pre class="sql"><code>sqlite&gt; .tables
ABAccount                        ABPersonFullTextSearch_segdir
ABGroup                          ABPersonFullTextSearch_segments
ABGroupChanges                   ABPersonFullTextSearch_stat
ABGroupMembers                   ABPersonLink
ABMultiValue                     ABPersonMultiValueDeletes
ABMultiValueEntry                ABPersonSearchKey
ABMultiValueEntryKey             ABPhoneLastFour
ABMultiValueLabel                ABRecent
ABPerson                         ABStore
ABPersonBasicChanges             FirstSortSectionCount
ABPersonChanges                  FirstSortSectionCountTotal
ABPersonFullTextSearch           LastSortSectionCount
ABPersonFullTextSearch_content   LastSortSectionCountTotal
ABPersonFullTextSearch_docsize   _SqliteDatabaseProperties</code></pre>
<p>A lot of those are indicies or other things that we don't necessarily care about, but the first one that jumps out to me is <code>ABPerson</code>:</p>
<pre class="sql"><code>sqlite&gt; .schema ABPerson
CREATE TABLE ABPerson (
  ROWID INTEGER PRIMARY KEY AUTOINCREMENT,
  First TEXT,
  Last TEXT,
  Middle TEXT,
  FirstPhonetic TEXT,
  MiddlePhonetic TEXT,
  LastPhonetic TEXT,
  Organization TEXT,
  Department TEXT,
  Note TEXT,
  Kind INTEGER,
  Birthday TEXT,
  JobTitle TEXT,
  Nickname TEXT,
  Prefix TEXT,
  Suffix TEXT,
  FirstSort TEXT,
  LastSort TEXT,
  CreationDate INTEGER,
  ModificationDate INTEGER,
  CompositeNameFallback TEXT,
  ExternalIdentifier TEXT,
  ExternalModificationTag TEXT,
  ExternalUUID TEXT,
  StoreID INTEGER,
  DisplayName TEXT,
  ExternalRepresentation BLOB,
  FirstSortSection TEXT,
  LastSortSection TEXT,
  FirstSortLanguageIndex INTEGER DEFAULT 2147483647,
  LastSortLanguageIndex INTEGER DEFAULT 2147483647,
  PersonLink INTEGER DEFAULT -1,
  ImageURI TEXT,
  IsPreferredName INTEGER DEFAULT 1,
  guid TEXT DEFAULT (ab_generate_guid()),
  PhonemeData TEXT,
  AlternateBirthday TEXT,
  MapsData TEXT,
  UNIQUE(guid)
);
...</code></pre>
<p>There is rather a pile of other statements after that, but that's the table that we're interested in. Specifically, that at least has the names and organizations (which at the moment is what I'm really interested in). What's suspiciously absent though, is the phone numbers. Hmm...</p>
<p>After a little bit of digging, I came across this table:</p>
<pre class="sql"><code>sqlite&gt; .schema ABMultiValue
CREATE TABLE ABMultiValue (
  UID INTEGER PRIMARY KEY,
  record_id INTEGER,
  property INTEGER,
  identifier INTEGER,
  label INTEGER,
  value TEXT,
  guid TEXT DEFAULT (ab_generate_guid()),
  UNIQUE(guid)
);</code></pre>
<p>Specifically, <code>record_id</code> matches <code>ABPerson.ROWID</code> and <code>value</code> contains phone numbers, email address, etc. (This is the real reason that I wrote the <code>normalize-contact</code> function).</p>
<p>Okay. That should be enough for the moment. Let's switch gears and lay out a similar framework to <code>backup</code>.</p>
<pre class="racket"><code>(define CONTACTS-DB
  (hash-filename "Library/AddressBook/AddressBook.sqlitedb" "HomeDomain"))

; Name is a human readable name for a contact
; Identifiers is a list of phone numbers / emails / etc
(struct contact (name identifiers) #:prefab)

; Store a separate list of contacts for each backup (potentially)
(define contacts-by-backup (make-hash))
(hash-set! contacts-by-backup #f '())</code></pre>
<p>Cool. Now we want to load the specific list of contacts, caching them the same way we did with the backups themselves:</p>
<pre class="racket"><code>; Load all contacts stored in a specific backup
(define (list-contacts)
  (hash-ref!
   contacts-by-backup
   (current-backup)
   (Î» ()
     (define contacts-db
       (sqlite3-connect #:database (build-path (backup-path (current-backup))
                                               CONTACTS-DB)))

     (for/list ([(user-id first-name middle-name last-name organization)
                 (in-query contacts-db "SELECT ROWID, First, Middle, Last, Organization FROM ABPerson")])

       (define (fix str) (if (sql-null? str) "" str))

       (define name
         (let* ([name (~a (fix first-name) " "
                          (fix middle-name) " "
                          (fix last-name) " "
                          "(" (fix organization) ")")]
                [name (regexp-replace* #px"\\(\\)" name "")]
                [name (regexp-replace* #px"\\s+" name " ")]
                [name (string-trim name)]
                [name (regexp-replace* #px"^\\((.*)\\)$" name "\\1")])
           name))

       (define identifiers
         (for*/list ([raw-value (in-list (query-list contacts-db "SELECT value FROM ABMultiValue WHERE record_id = $1" user-id))]
                     [value (in-value (normalize-contact raw-value))]
                     #:when value)
           value))

       (contact name identifiers)))))</code></pre>
<p>Basically, we want to make a nested set of queries, first one for each user and then another for all contact information for that user. It's Not the perfect way of doing itl as theoretically we could have done a sql join, but it works well enough.</p>
<p>As far as the name formatting, that's just the way I needed it to work. When I get around to it, I'll probably write a <code>name-display-format</code> parameter akin to <code><a href="http://docs.racket-lang.org/search/index.html?q=date-display-format">date-display-format</a></code> from <code><a href="http://docs.racket-lang.org/search/index.html?q=racket/date">racket/date</a></code>. Not today though!</p>
<p>So let's see how it works:</p>
<pre class="racket"><code>&gt; (with-backup "86b18eea28a991f4dd569d1f59737a842e24aa36"
    (list-contacts))
'(#s(contact "Charles I. Clarke" ("555.555.1234" "charlie.c@example.com"))
  #s(contact "Jenny Reichert (Catsitter)" ("555.867.5309"))
  #s(contact "Mary Orndorff" ("555.555.0000"))
  #s(contact "Pizza Palace" ("555.555.1123"))
  #s(contact "Willie S. Culpepper" ("555.555.1491"))
  ...)</code></pre>
<p>Sweet.</p>
<p>And as a bonus, let's include a basic search function:</p>
<pre class="racket"><code>; Load a user by name or value
(define (find-contact key)
  (for/first ([contact (in-list (list-contacts))]
              #:when (or (equal? key (contact-name contact))
                         (member key (contact-identifiers contact))))
    contact))</code></pre>
<p>Again, it's not a fuzzy match (you have to have the name exact), but that's something I'll probably clean up later.</p>
<pre class="racket"><code>&gt; (with-backup "86b18eea28a991f4dd569d1f59737a842e24aa36"
    (find-contact "Charles I. Clarke"))
#s(contact
   "Charles I. Clarke"
   ("555.555.1234" "charlie.c@example.com")</code></pre>
<p>And there you have it. Contacts. We're really starting to get somewhere here. Next week (probably Monday or Tuesday), I'll write up messages (both SMS and iMessage). That one will really be fun.</p>
<p>As always entire code for today's post is available on GitHub: <a href="https://github.com/jpverkamp/ios-backup">ios-backup</a></p>
<p>Here is a list of all of the posts in this series:</p>
<ul class="list-unstyled"><li class="post-listing"><a href="http://blog.jverkamp.com/2015/01/22/ios-backups-in-racket-groundwork">iOS Backups in Racket: Groundwork</a></li><li class="post-listing"><a href="http://blog.jverkamp.com/2015/01/23/ios-backups-in-racket-contacts">iOS Backups in Racket: Contacts</a></li><li class="post-listing"><a href="http://blog.jverkamp.com/2015/01/27/ios-backups-in-racket-messages">iOS Backups in Racket: Messages</a></li></ul>]]></content></entry><entry><title>iOS Backups in Racket: Groundwork</title><link href="http://blog.jverkamp.com/2015/01/22/ios-backups-in-racket-groundwork" /><id>urn:uuid:180d204b-b657-2667-bf03-1c1555d8a51d</id><updated>2015-01-22T00:00:00Z</updated><summary type="html"><![CDATA[<p>For the last little while, I've been spending my spare programming time working on a slightly larger project than I normally do: a <a href="http://blog.jverkamp.com/category/programming/by-language/racket">Racket</a> library for reading iOS backups.</p>
<p>Basically, I want to take the mess that is an iOS backup (not particularly designed to be easy to read by other programs) and extract some information from it, backing it up in a more easily readable format.</p>
<p>Specifically, I would like to be able to backup:</p>
<ul>
    <li>Contact information: Even thought they're mostly from Facebook, it will be useful for the other parts</li>
    <li>Messages: These are taking up a large portion of my phone's hard drive, mostly due to attachments. Back them up just in case<span class="footnote"><sup><a href="#footnote-1">[1]</a></sup></span><span class="footnote"><sup><a href="#footnote-2">[2]</a></sup></span></li>
    <li>Photos: I'm already backing these up, but it would be nice to have it in the same process</li>
    <li>Application data:
        <ul>
            <li>List of applications over time</li>
            <li><a href="https://www.moves-app.com/">Moves</a>: GPS location</li>
            <li><a href="http://www.downcastapp.com/">Downcast</a>: List of current podcasts</li>
            <li><a href="http://www.sleepcycle.com/">Sleep Cycle</a>: Sleep data</li>
            <li><a href="http://www.boardgamescorer.com/">Boardgame Scorer</a>: High scores for board games</li>
        </ul>
    </li>
</ul>
]]></summary><content type="html"><![CDATA[<p>For the last little while, I've been spending my spare programming time working on a slightly larger project than I normally do: a <a href="http://blog.jverkamp.com/category/programming/by-language/racket">Racket</a> library for reading iOS backups.</p>
<p>Basically, I want to take the mess that is an iOS backup (not particularly designed to be easy to read by other programs) and extract some information from it, backing it up in a more easily readable format.</p>
<p>Specifically, I would like to be able to backup:</p>
<ul>
    <li>Contact information: Even thought they're mostly from Facebook, it will be useful for the other parts</li>
    <li>Messages: These are taking up a large portion of my phone's hard drive, mostly due to attachments. Back them up just in case<span class="footnote"><sup><a href="#footnote-1">[1]</a></sup></span><span class="footnote"><sup><a href="#footnote-2">[2]</a></sup></span></li>
    <li>Photos: I'm already backing these up, but it would be nice to have it in the same process</li>
    <li>Application data:
        <ul>
            <li>List of applications over time</li>
            <li><a href="https://www.moves-app.com/">Moves</a>: GPS location</li>
            <li><a href="http://www.downcastapp.com/">Downcast</a>: List of current podcasts</li>
            <li><a href="http://www.sleepcycle.com/">Sleep Cycle</a>: Sleep data</li>
            <li><a href="http://www.boardgamescorer.com/">Boardgame Scorer</a>: High scores for board games</li>
        </ul>
    </li>
</ul>
<!--more-->
<p>The first thing to look at is the basic structure of the iOS backup directory:</p>
<pre class="text"><code>~/Library/Application Support/MobileSync/Backup/
    86b1...aa36/
        0003...1b9a
        0009...521c
        000b...46ab
        ...
        fff6...5152
        fff8...9f8a
        fffa...ca34
        Info.plist
        Manifest.mbdb
        Manifest.plist
        Status.plist</code></pre>
<p>Okay, that's helpful<span class="footnote"><sup><a href="#footnote-3">[3]</a></sup></span>. 6788 files, all but four of which named via <a href="https://en.wikipedia.org/wiki/SHA-1">SHA-1</a> hashes. I know that there are pictures, applications, and various databases here, so there has to be a map somewhere.</p>
<p>But first, those last four files:</p>
<ul>
    <li><code>Info.plist</code> - Contains information about the backup, including the phone's name, various IDs, the phone's number, and versioning information</li>
    <li><code>Manifest.mbdb</code> - Binary file containing a listing of every file in the backup</li>
    <li><code>Manifest.plist</code> - Legacy file, useful information is mostly a list of installed applications</li>
    <li><code>Status.plist</code> - Mostly a subset of the information in <code>Info.plist</code></li>
</ul>
<p>Of those, we'll start with the first one. We want to be able to load that information into a basic structure to represent a backup:</p>
<pre class="racket"><code>; Represents an iPhone backup on disk
(struct backup (name hash date phone-number path) #:prefab)</code></pre>
<p>Cool. First thing first, let's find the backups on disk. We want to be able to support either Windows or OSX (I use both), so try both locations:</p>
<pre class="racket"><code>; Load all backups on disk into a list
(define list-backups
  (let* (; OS agnostic (I hope) way of finding the backup root
         [backup-root
          (for*/first ([path-parts (in-list '(("AppData" "Roaming" "Apple Computer"
                                               "MobileSync" "Backup")
                                              ("Library" "Application Support"
                                                "MobileSync" "Backup")))]
                       [path (in-value (apply build-path
                                              (cons (find-system-path 'home-dir)
                                                    path-parts)))]
                       #:when (directory-exists? path))
            path)]

         ; List all backups in that directory, along with some metadata
         [backups
          (for/list ([dir (in-list (directory-list backup-root))])
            (define info-file
              (call-with-input-file (build-path backup-root dir "Info.plist")
                read-plist/jsexpr))

            (backup (dict-ref info-file '|Device Name|)
                    (path-&gt;string dir)
                    (dict-ref info-file '|Last Backup Date|)
                    (normalize-contact (dict-ref info-file '|Phone Number|))
                    (build-path backup-root dir)))])

    (Î» () backups)))</code></pre>
<p>The function is a little strange looking, mostly because of caching. Rather than scanning and loading the backup every time we want a list, scan it once on load, then return that whenever the function is called.</p>
<p>One thing missing though, we have to define the function <code>read-plist/jsexpr</code> yet. Luckily, we have the <code><a href="http://docs.racket-lang.org/search/index.html?q=xml/plist">xml/plist</a></code> library to handle the first part of this<span class="footnote"><sup><a href="#footnote-4">[4]</a></sup></span>, but personally I'd rather a more straight forward format (a <code><a href="http://docs.racket-lang.org/search/index.html?q=jsexpr">jsexpr</a></code> is basically a mix of hashes, lists, and atoms):</p>
<pre class="racket"><code>; Convert a plist into a JSON expression
(define (plist-&gt;jsexpr data)
  (match data
    [(? string?) data]
    [`(true) #t]
    [`(false) #f]
    [`(integer ,v) v]
    [`(real ,v) v]
    [`(data ,v) v] ; Should we special case these?
    [`(date ,v) v] ; Ditto
    [`(array . ,v*)
     (map plist-&gt;jsexpr v*)]
    [`(dict . ,kv*)
     (for/hash ([kv (in-list kv*)])
       (values (string-&gt;symbol (second kv)) (plist-&gt;jsexpr (third kv))))]))

; Read a plist file as a JSON expression from a file
(define (read-plist/jsexpr [in (current-input-port)])
  (plist-&gt;jsexpr (read-plist in)))</code></pre>
<p>I still haven't decided if special casing <code>data</code> and <code>date</code> elements is worthwhile.</p>
<p>The other interesting function is another utility function <code>normalize-contact</code>:</p>
<pre class="racket"><code>; Process a phone number or email address into a common format
(define (normalize-contact value)
  (define re #px"^\\+?1? ?[\\(\\.]?(\\d\\d\\d)[\\)\\.-]? ?(\\d\\d\\d)[ \\.-]?(\\d\\d\\d\\d)$")
  (cond
    [(sql-null? value)
     #f]
    ; Standard phone numbers
    ; TODO: Figure out international numbers
    [(regexp-match re value)
     =&gt; (Î» (match) (string-join (rest match) "."))]
    ; Email addresses
    [(regexp-match #px"^[^@]+@[^@]+$" value)
     value]
    ; Short phone numbers
    [(regexp-match #px"^\\d{,6}$" value)
     value]
    ; No idea...
    [else #f]))</code></pre>
<p>Phone numbers in an iPhone backup are stored all sorts of odd ways. In particular, once you start looking at the contacts, you can get three or four different formats just for normal area code + 7 phone numbers (I haven't yet decided how to support international numbers). So this can be used to at least put them all in the same format.</p>
<p>But with that, we now have the ability to list all backups on the local system:</p>
<pre class="racket"><code>&gt; (list-backups)
'(#s(backup
     "JPâs iPhone"
     "63b5...a651"
     "2014-04-17T21:53:16Z"
     "{redacted}"
     #&lt;path:/Users/jp/Library/Application Support/MobileSync/Backup/63b5....a651&gt;))</code></pre>
<p>It's an older backup, but that's fine.</p>
<p>Next, what if we have more than one backup on the system? It would be nice to have a function that could take that list of backups and load just one (that other parts of the library can access) based on name/hash/phone number:</p>
<pre class="racket"><code>; Store the most recently used backup for other modules
(define current-backup (make-parameter #f))

; Load a specific backup, try to guess what the identifier is
(define (read-backup identifier)
  (for/first ([backup (in-list (list-backups))]
              #:when (or (equal? identifier (backup-date backup))
                         (equal? identifier (backup-name backup))
                         (equal? identifier (backup-hash backup))
                         (equal? identifier (backup-phone-number backup))))
    backup))</code></pre>
<p>Fair enough. At the moment, you have to have an exact match, but that's fine. If we want to later, we could replace the calls to <code><a href="http://docs.racket-lang.org/search/index.html?q=equal?">equal?</a></code> with <code><a href="http://docs.racket-lang.org/search/index.html?q=regexp-match">regexp-match</a></code>.</p>
<p>So now I can find my own backup:</p>
<pre class="racket"><code>&gt; (read-backup "86b1...aa36")
'#s(backup
    "JPâs iPhone"
    "63b5...a651"
    "2014-04-17T21:53:16Z"
    "{redacted}"
    #&lt;path:/Users/jp/Library/Application Support/MobileSync/Backup/63b5....a651&gt;)</code></pre>
<p>One more utility macro:</p>
<pre class="racket"><code>; Parameterize code with a current backup
(define-syntax-rule (with-backup identifier body ...)
  (parameterize ([current-backup (read-backup identifier)])
    body ...))</code></pre>
<p>This will be nice, since it can let us do things like this:</p>
<pre class="racket"><code>&gt; (define contacts
    (with-backup "86b1...aa36"
      (list-contacts)))</code></pre>
<p>Nice and clean.</p>
<p>I think that's about enough for today. The entire code for today's post (along with the entire library thus far, which is significantly further along<span class="footnote"><sup><a href="#footnote-5">[5]</a></sup></span>), is available on GitHub: <a href="https://github.com/jpverkamp/ios-backup">ios-backup</a></p>
<p>Here is a list of all of the posts in this series:</p>
<ul class="list-unstyled"><li class="post-listing"><a href="http://blog.jverkamp.com/2015/01/22/ios-backups-in-racket-groundwork">iOS Backups in Racket: Groundwork</a></li><li class="post-listing"><a href="http://blog.jverkamp.com/2015/01/23/ios-backups-in-racket-contacts">iOS Backups in Racket: Contacts</a></li><li class="post-listing"><a href="http://blog.jverkamp.com/2015/01/27/ios-backups-in-racket-messages">iOS Backups in Racket: Messages</a></li></ul>]]></content></entry><entry><title>Wool</title><link href="http://blog.jverkamp.com/2015/01/20/wool" /><id>urn:uuid:ad72369b-9c38-f545-b71b-543bcd785367</id><updated>2015-01-20T00:00:00Z</updated><summary type="html"><![CDATA[<p><a href="https://www.goodreads.com/book/show/12287209-wool"><img src="http://blog.jverkamp.com/2015/01/20/wool/1-wool.jpg" /></a> <a href="https://www.goodreads.com/book/show/13178410-proper-gauge"><img src="http://blog.jverkamp.com/2015/01/20/wool/2-proper-gauge.jpg" /></a> <a href="https://www.goodreads.com/book/show/13202200-casting-off"><img src="http://blog.jverkamp.com/2015/01/20/wool/3-casting-off.jpg" /></a> <a href="https://www.goodreads.com/book/show/13314945-the-unraveling"><img src="http://blog.jverkamp.com/2015/01/20/wool/4-the-unraveling.jpg" /></a> <a href="https://www.goodreads.com/book/show/13425846-the-stranded"><img src="http://blog.jverkamp.com/2015/01/20/wool/5-the-stranded.jpg" /></a></p>
<p>Second series of the New Year: <a href="https://www.goodreads.com/author/show/3064305.Hugh_Howey">Hugh Howey's</a> series: Wool.</p>
<p>The story of how <em>Wool</em> came to be is actually pretty interesting. Howey originally self-published the first story (only ~50 pages) through <a href="https://www.amazon.com/">Amazon.com's</a> <a href="https://kdp.amazon.com/">Kindle Direct Publishing</a>. Although he didn't originally expect it to do as well as it did, it just took off and over the next few years he wrote several increasingly longer (although still well within the novella range) sequels.</p>
<p>Very cool.</p>
]]></summary><content type="html"><![CDATA[<p><a href="https://www.goodreads.com/book/show/12287209-wool"><img src="http://blog.jverkamp.com/2015/01/20/wool/1-wool.jpg" /></a> <a href="https://www.goodreads.com/book/show/13178410-proper-gauge"><img src="http://blog.jverkamp.com/2015/01/20/wool/2-proper-gauge.jpg" /></a> <a href="https://www.goodreads.com/book/show/13202200-casting-off"><img src="http://blog.jverkamp.com/2015/01/20/wool/3-casting-off.jpg" /></a> <a href="https://www.goodreads.com/book/show/13314945-the-unraveling"><img src="http://blog.jverkamp.com/2015/01/20/wool/4-the-unraveling.jpg" /></a> <a href="https://www.goodreads.com/book/show/13425846-the-stranded"><img src="http://blog.jverkamp.com/2015/01/20/wool/5-the-stranded.jpg" /></a></p>
<p>Second series of the New Year: <a href="https://www.goodreads.com/author/show/3064305.Hugh_Howey">Hugh Howey's</a> series: Wool.</p>
<p>The story of how <em>Wool</em> came to be is actually pretty interesting. Howey originally self-published the first story (only ~50 pages) through <a href="https://www.amazon.com/">Amazon.com's</a> <a href="https://kdp.amazon.com/">Kindle Direct Publishing</a>. Although he didn't originally expect it to do as well as it did, it just took off and over the next few years he wrote several increasingly longer (although still well within the novella range) sequels.</p>
<p>Very cool.</p>
<!--more-->
<p>So what is there to like about <em>Wool</em>? Well, the world is really interesting. It has everything that I both love and hate in a short story: getting me really into the world building and the characters, while at the same time knowing when not to get into the deep backstory that a full length novel could do. And then in the sequels, you get the best of both worlds with a more fleshed out world with all the little twists and turns you should have seen coming<span class="footnote"><sup><a href="#footnote-1">[1]</a></sup></span>.</p>
<p>I also really liked the characters. They each have unique voices and react well enough to difficult circumstances, something I like to see done well in a story. One problem I had around the middle of the series was the relationship between Juliette and Lukas. It just felt unearned. It grows and makes more sense by the end, but it still felt weird. Also Lukas' sudden ascension in power didn't feel earned to me. I get that he wanted a POV character in that role, but it still felt weird.</p>
<p>On the down side (and here be spoilers), the world doesn't really make that much sense to me. Perhaps it's because I'm not seeing the big picture, perhaps there are other ways throughout the world, but I just really don't get why each and every silo has to either follow the rules or <em>will</em> collapse. Honestly, in a few hundred years, no one has managed to build what Juliette seems to be trying for at the end of the series?</p>
<p>All that being said, I really loved these books. I can see why they took off so well on Amazon. If you like post-apocalypic fiction (or heck, even if you just don't hate it), give them a try.</p>
<p>So after 20 days, I've read 10 books. Even though <em>Wool</em> et al are significantly shorter, I'm still going to count them. With behemoths such as Way of Kings to balance the scales I'm sure everything will work out in the end.</p>
<p>Originally my goal was 24 books. I might just finish that by the end of the month. New goal? The full 100. So far I'm 4-5 books ahead.</p>]]></content></entry><entry><title>The Heroes of Olympus</title><link href="http://blog.jverkamp.com/2015/01/18/the-heroes-of-olympus" /><id>urn:uuid:2b90f74b-9a8e-41b4-70c5-62e2f2bdb2da</id><updated>2015-01-18T00:00:00Z</updated><summary type="html"><![CDATA[<p><a href="https://www.goodreads.com/book/show/7736182-the-lost-hero"><img src="http://blog.jverkamp.com/2015/01/18/the-heroes-of-olympus/1-the-lost-hero.jpg" /></a> <a href="https://www.goodreads.com/book/show/9520360-the-son-of-neptune"><img src="http://blog.jverkamp.com/2015/01/18/the-heroes-of-olympus/2-the-son-of-neptune.jpg" /></a> <a href="https://www.goodreads.com/book/show/12127750-the-mark-of-athena"><img src="http://blog.jverkamp.com/2015/01/18/the-heroes-of-olympus/3-the-mark-of-athena.jpg" /></a> <a href="https://www.goodreads.com/book/show/12127810-the-house-of-hades"><img src="http://blog.jverkamp.com/2015/01/18/the-heroes-of-olympus/4-the-house-of-hades.jpg" /></a> <a href="https://www.goodreads.com/book/show/18705209-the-blood-of-olympus"><img src="http://blog.jverkamp.com/2015/01/18/the-heroes-of-olympus/5-the-blood-of-olympus.jpg" /></a></p>
<p>First series completed in the New Year<span class="footnote"><sup><a href="#footnote-1">[1]</a></sup></span>.</p>
]]></summary><content type="html"><![CDATA[<p><a href="https://www.goodreads.com/book/show/7736182-the-lost-hero"><img src="http://blog.jverkamp.com/2015/01/18/the-heroes-of-olympus/1-the-lost-hero.jpg" /></a> <a href="https://www.goodreads.com/book/show/9520360-the-son-of-neptune"><img src="http://blog.jverkamp.com/2015/01/18/the-heroes-of-olympus/2-the-son-of-neptune.jpg" /></a> <a href="https://www.goodreads.com/book/show/12127750-the-mark-of-athena"><img src="http://blog.jverkamp.com/2015/01/18/the-heroes-of-olympus/3-the-mark-of-athena.jpg" /></a> <a href="https://www.goodreads.com/book/show/12127810-the-house-of-hades"><img src="http://blog.jverkamp.com/2015/01/18/the-heroes-of-olympus/4-the-house-of-hades.jpg" /></a> <a href="https://www.goodreads.com/book/show/18705209-the-blood-of-olympus"><img src="http://blog.jverkamp.com/2015/01/18/the-heroes-of-olympus/5-the-blood-of-olympus.jpg" /></a></p>
<p>First series completed in the New Year<span class="footnote"><sup><a href="#footnote-1">[1]</a></sup></span>.</p>
<!--more-->
<p>So, The Heroes of Olympus. It's the second series based on the idea that all of the Greek (and now Roman<span class="footnote"><sup><a href="#footnote-2">[2]</a></sup></span>) myths were true. The gods/demigods/et al live in the 'center of the Western world' (read: America). It's actually a really neat idea and a really neat world. It turns out, those old myths are <em>really weird</em>.</p>
<p>But herein lies the main problem I had with <em>The Heroes of Olympus</em>. We've already been there / done this. <em>Percy Jackson and Olympians</em> did it and did it better. If you only read one of the two, I would honestly suggest that one. On the other hand, if you loved the Percy Jackson books and want to read more? You could do far worse.</p>
<p>Other than that, I had a few gripes. How in the world did they (the sort of general they) keep such a secret for so long? Especially given how everyone they meet seems to know? Why does it fall time and again to a small handful of children to save the world? How do they always have only a handful of days?</p>
<p>On the strengths, I really do like how different the new characters are. Leo is a lot of fun. Piper's godly parent is an interesting addition, not at all one of the 'big three' but surprisingly powerful nevertheless. Frank makes the world feel just a little bit larger.</p>
<p>On the other hand, the older characters (Percy, Annabeth, et al) feel a little strange. We already know their story and they've already saved the world. Now they're doing it again? And <em>once again</em> the fate of the world rests on a smile pile of children? All righty then.</p>
<p>Anyways, long story short(ish): I'm glad I read them. It was a fun series, although I doubt I will reread them any time soon. If you like this sort of book (and specifically already read the <em>Percy Jackson</em> series), check them out.</p>]]></content></entry><entry><title>Writing Excuses exercise: Five story ideas</title><link href="http://blog.jverkamp.com/2015/01/14/writing-excuses-exercise-five-story-ideas" /><id>urn:uuid:794c9e5c-9593-20b8-bf6b-31bfaace5985</id><updated>2015-01-14T00:00:00Z</updated><summary type="html"><![CDATA[<p>Inspired by the <a href="http://www.writingexcuses.com/">Writing Excuses</a> podcast <a href="http://www.writingexcuses.com/2015/01/04/writing-excuses-10-1-seriously-where-do-you-get-your-ideas/">10.1: Seriously, Where Do You Get Your Ideas?</a></p>
<p><strong>Writing Prompt</strong>: Write down five different story ideas in 150 words or less. Generate these ideas from these five sources.</p>
<ul>
    <li>From an interview or conversation you've had</li>
    <li>From research you've done (reading science news, military history, etc)</li>
    <li>From observation (go for a walk!)</li>
    <li>From a piece of media (watch a movie)</li>
    <li>From a piece of music (with or without lyrics)</li>
</ul>
]]></summary><content type="html"><![CDATA[<p>Inspired by the <a href="http://www.writingexcuses.com/">Writing Excuses</a> podcast <a href="http://www.writingexcuses.com/2015/01/04/writing-excuses-10-1-seriously-where-do-you-get-your-ideas/">10.1: Seriously, Where Do You Get Your Ideas?</a></p>
<p><strong>Writing Prompt</strong>: Write down five different story ideas in 150 words or less. Generate these ideas from these five sources.</p>
<ul>
    <li>From an interview or conversation you've had</li>
    <li>From research you've done (reading science news, military history, etc)</li>
    <li>From observation (go for a walk!)</li>
    <li>From a piece of media (watch a movie)</li>
    <li>From a piece of music (with or without lyrics)</li>
</ul>
<!--more-->
<h2>Interview/Conversation</h2>
<p>Humanity has discovered how to find tiny rifts in space, tears in the fabric of reality that can be widened and use to cross from our world into a world with much stranger (and perhaps more mutable) rules. The story takes place on a research station just on the other side of one of these rifts.</p>
<p>Because of the location of the tear in realspace (far out on the edges of the solar system for political reasons) and the danger of the rip (the edges are two dimension, thus sharp), supplies from back home are rare. Throughout the course of the story, stranger and more horrifying things keep happening, making the characters wish more and more for something <em>normal</em>.</p>
<p>All of the characters are Jacks/Jills of All Trades, but specifically scientists. They can't stand that even the basest laws of otherspace aren't so immutable.</p>
<p>Inspiration: <a href="http://space.io9.com/astronauts-get-belated-christmas-presents-mustard-and-1679156026">Astronauts Get Belated Christmas Presents, Mustard, and Clean Undies (io9)</a></p>
<h2>Research</h2>
<p>93% of the energy from the sun is stored in the ocean (water has a particularly high <a href="https://en.wikipedia.org/wiki/specific_heat capacity">specific heat capacity</a>). Far in the future, mankind has used this in order to make a generation ship: a city sealed in the center of a massive sphere of water, hurtling through space.</p>
<p>Over time, the world that was is forgotten and legends grow around operation of the ship. The main character is a young man being inducted into the Priesthood (mixing <a href="http://tvtropes.org/pmwiki/pmwiki.php/Main/MachineWorship">machine worship</a> and <a href="http://tvtropes.org/pmwiki/pmwiki.php/Main/CargoCult">cargo cult</a>), but one day the terminal in his bunk (repurposed computer rooms) begins to glow. The ocean is warming, wrecking havoc with the life therein.</p>
<p>Before all is said and done, the young man has a lot to learn about the world he thought he knew and about just what is out there in the deep, dark space between the stars.</p>
<p>Inspiration: <a href="http://www.thenakedscientists.com/HTML/content/interviews/interview/1001076/">Project ARGO - monitoring Earth's oceans (Naked Scientists)</a></p>
<p>Side note: that would be a much better story for the title <a href="http://blog.jverkamp.com/category/writing/novels/a-sea-of-stars">A Sea of Stars</a>. I may have to repurpose it. :)</p>
<h2>Observation</h2>
<p>In the future, time travel is real and common. It's entirely possible to jump back or forward in time, with paradoxes tending to just sort themselves out, as if the universe itself is trying to heal.</p>
<p>The central concept of the story is the idea of a time crash, where two time travelers come directly into conflict and the resulting collision sends out ripples in time and space, with history and reality waving between the original and the two colliding realities. Specifically, there is a time crash pile up, with more and more time travelers arriving, only to be caught in the growing storm.</p>
<p>When? World War II. Why? Hitler.</p>
<p>It's up to the main character: a middle aged, not at all special time cop to untangle the timelines, rescuing some, arresting others, and eventually stumbling on the dark secret at the core of it all: Hitler was a time traveler.</p>
<p>Inspiration:</p>
<p><iframe width="560" height="315" src="//www.youtube.com/embed/qtT_OHIY4jE" frameborder="0" allowfullscreen="allowfullscreen"></iframe></p>
<p><iframe width="560" height="315" src="//www.youtube.com/embed/vo4YABHEzuU" frameborder="0" allowfullscreen="allowfullscreen"></iframe></p>
<h2>Media</h2>
<p>Just beneath the surface of our world, supernatural beings wage war. Not <a href="https://www.youtube.com/watch?v=MqT-e44kIM8">werewolves and vampires</a>, nor <a href="https://www.youtube.com/watch?v=pxOSPfUw3qw">gargoyles and demons</a>. Let's go with the fae and robots (alternatively AIs in general). I'm not sure there are too many books out there mixing those two... :)</p>
<p>The main characters will be a young changeling woman rebelling against her family (iron piercings!) and a robot working at a robot factory that fall in love (because of course they do), somewhat mirroring the whole <a href="https://en.wikipedia.org/wiki/Romeo_and Juliet">Romeo and Juliet</a> thing.</p>
<p>Also, <a href="https://en.wikipedia.org/wiki/Skynet(Terminator)">Skynet</a>. :)</p>
<p>Inspiration:</p>
<p><iframe width="560" height="315" src="//www.youtube.com/embed/pxOSPfUw3qw" frameborder="0" allowfullscreen="allowfullscreen"></iframe></p>
<p><iframe width="560" height="315" src="//www.youtube.com/embed/MqT-e44kIM8" frameborder="0" allowfullscreen="allowfullscreen"></iframe></p>
<h2>Music</h2>
<p>In a steampunk world of steam powered clockwork gadgets, death is not the end. The most complicated and powerful of the machines are the automaton, essentially humanoid robots. But what most people don't know, is that it's not technology that grants such machines life, it's magic binding the soul of one recently departed into a 'tired mechanical heart'.</p>
<p>One character is a serving girl from the kitchens, who dies in the first chapter (<em>le twist</em>) and becomes one of these automatons, assigned as a frontier solider (a war is brewing with another empire who binds their souls into animals rather than automatons). Another is the son of the Mayer. When his pranks get out of hand, he gets sent away, apprenticed to the Priesthood (the ones who bind the souls to the automatons).</p>
<p>In the end, it's up to the two of them to either save the day... or change their world.</p>
<p>Inspiration:</p>
<p><iframe width="560" height="315" src="//www.youtube.com/embed/49tpIMDy9BE" frameborder="0" allowfullscreen="allowfullscreen"></iframe></p>
<p>Specifically:</p>
<blockquote>Tired mechanical heart<br />
<p>Beats 'til the song disappears<br /> ...<br /> If only the clockwork could speak<br /> I wouldn't be so alone</blockquote></p>
<p>Side note: This is actually the world of two of my previous incomplete novels: Shadows and Steam (NaNoWriMo 2011) and the City on the Lake (<a href="http://blog.jverkamp.com/2013/03/06/my-personal-nanowrimo-march-madness">March Madness NaNoWriMo</a>). I really want to write in this world, I just haven't <em>quite</em> managed it.</p>
<hr />
<p>Amusing. I didn't expect to go so heavily into the science fiction. I think that I've subconsciously (or not) been thinking about how much I enjoy science fiction, while at the same time, I've been writing far more fantasy. Perhaps this will be the push I need to remedy that...</p>
<p>Also, if any of these ideas strike your fancy, feel free to steal them. Ideas want to be free and all of that. All I ask is that if you use one of them, let me know. I'd love to see it.</p>]]></content></entry><entry><title>Let it snow!</title><link href="http://blog.jverkamp.com/2015/01/09/let-it-snow" /><id>urn:uuid:fa564bef-0d12-6077-4670-d0535b5acc9c</id><updated>2015-01-09T00:00:00Z</updated><summary type="html"><![CDATA[<p>â« Oh the weather outside is frightful<span class="footnote"><sup><a href="#footnote-1">[1]</a></sup></span>... â«</p>
<p><a href="http://blog.jverkamp.com/2015/01/09/let-it-snow/snowflake.gif" data-toggle="lightbox"><img src="http://blog.jverkamp.com/2015/01/09/let-it-snow/snowflake.gif" /></a></p>
]]></summary><content type="html"><![CDATA[<p>â« Oh the weather outside is frightful<span class="footnote"><sup><a href="#footnote-1">[1]</a></sup></span>... â«</p>
<p><a href="http://blog.jverkamp.com/2015/01/09/let-it-snow/snowflake.gif" data-toggle="lightbox"><img src="http://blog.jverkamp.com/2015/01/09/let-it-snow/snowflake.gif" /></a></p>
<!--more-->
<p>Today's post is inspired once again by the <a href="https://codegolf.stackexchange.com/">Code Golf StackExchange</a>: <a href="https://codegolf.stackexchange.com/questions/42506/draw-a-snowflake">Draw a snowflake</a>. Sounds simple enough, yes?</p>
<p>The basic idea is to take a similar sort of code to what I used about 10 months ago when I wrote a post on <a href="http://blog.jverkamp.com/2014/03/11/brownian-trees">Brownian trees</a>. The main difference this time is that this time we want <a href="https://en.wikipedia.org/wiki/rotational_symmetry">rotational/radial</a> and <a href="https://en.wikipedia.org/wiki/reflectional_symmetry">reflectional</a> symmetry. To do that, instead of generating points in an entire circular world, we will instead use only a slice, which we can than repeat and rotate. It turns out there's a reasonable amount of math involved in making that actually work right, but the code should still be fairly straight forward.</p>
<p>First, we need to decide what data types we're going to work with. Originally, I had a struct for both the points and the snowflakes themselves, but then I realized with have a very powerful tool at our disposal: <a href="https://en.wikipedia.org/wiki/complex_numbers">complex numbers</a>.</p>
<p>What does representing points as complex numbers buy us?</p>
<ul>
    <li>Conversion between <a href="https://en.wikipedia.org/wiki/cartesian_coordinates">cartesian coordinates</a> (<code><a href="http://docs.racket-lang.org/search/index.html?q=make-rectangular">make-rectangular</a></code>) and <a href="https://en.wikipedia.org/wiki/polar_coordinates">polar coordinates</a> with <code><a href="http://docs.racket-lang.org/search/index.html?q=make-rectangular">make-rectangular</a></code> and <code><a href="http://docs.racket-lang.org/search/index.html?q=make-polar">make-polar</a></code></li>
    <li>Add offsets to points</li>
    <li>Determine the distance between two points with subtration and <code><a href="http://docs.racket-lang.org/search/index.html?q=magnitude">magnitude</a></code></li>
    <li>The ability to rate points (again via <code><a href="http://docs.racket-lang.org/search/index.html?q=make-polar">make-polar</a></code>)</li>
</ul>
<p>Sounds worth doing. :)</p>
<p>So then we just need a structure for snowflakes to start with:</p>
<pre class="racket"><code>(struct snowflake (radius arms points) #:prefab)

; Generate a new snowflake with the given number of arms
(define (make-snowflake radius arms)
  (snowflake radius arms '(0)))</code></pre>
<p><code>radius</code> and <code>arms</code> will be constants that store the structure of the snowflake, while <code>points</code> will change (sans mutation, since we didn't make it <code>#:mutable</code>) as we add more points. Originally I had a grid of points, but since we're moving going to be constantly converting between cartesean and polar coordinates and moving about in a continuous space, it didn't work so well. On the down side, the larger an image gets, the longer it takes to compare to previous points. If I wanted to optimize this, something like a <a href="https://en.wikipedia.org/wiki/quadtree">quadtree</a>, but at the moment, this works well enough.</p>
<p>Next, we want the ability to add points to a snowflake, or to check if a point is currently in it:</p>
<pre class="racket"><code>; Rotate a point so that the angle is in the range [Î¸, -Î¸)
(define (clampÎ¸ p Î¸min Î¸max)
  (define Î¸Î (- Î¸max Î¸min))
  (make-polar
   (magnitude p)
   (let loop ([Î¸ (if (= 0 p) 0 (angle p))])
     (cond
       [(&lt;  Î¸ Î¸min) (loop (+ Î¸ Î¸Î))]
       [(&gt;= Î¸ Î¸max) (loop (- Î¸ Î¸Î))]
       [else        Î¸]))))

; Test if a snowflake contains a point within a given Î
; Return the index of the point if it does, #f otherwise
(define (snowflake-contains? s p Î)
  (match-define (snowflake radius arms points) s)

  (define Î¸  (/ 2Ï arms))
  (define pÎ± (clampÎ¸ p 0 Î¸))
  (define pÎ² (make-polar (magnitude pÎ±) (if (= pÎ± 0) 0 (- Î¸ (angle pÎ±)))))

  (for/first ([i (in-naturals)]
              [point (in-list points)]
              #:when (or (&lt; (magnitude (- pÎ± point)) Î)
                         (&lt; (magnitude (- pÎ² point)) Î)))
    i))

; Add a new point to the snowflake
(define (snowflake-set s p)
  (match-define (snowflake radius arms points) s)
  (define Î¸max (/ 2Ï arms))
  (snowflake radius arms (cons (clampÎ¸ p 0 Î¸max) points)))</code></pre>
<p>Oof. That's an intense bit of code. First, the <code>clampÎ¸</code> function. The goal here is, as mentioned earlier, we want to be able to take an arbitrary point and rotate it so that it's in a range we can specify. Basically, modular arithmatic on angles, whee!</p>
<p>Next, checking if a <code>snowflake-contains?</code> a point. This has one particularly interesting argument: <code>Î</code>. This basically is a margin of error. That way we can check if a point is 'close enough' to any of the points currently in the snowflake, thus building the brownian tree. Next, we have <code>pÎ±</code> and <code>pÎ²</code>. <code>pÎ±</code> is taking the point and rotating it into the proper frame of reference (giving the rotational symmetry we want), while <code>pÎ²</code> gives us reflectional symmetry.</p>
<p>Likewise, <code>snowflake-set</code> adds a point to the snowflake. This one is much simpler, just adding the point to the snowflake. Here's where we aren't actually mutating the snowflake, but rather returning a new copy.</p>
<p>Cool<span class="footnote"><sup><a href="#footnote-2">[2]</a></sup></span>.</p>
<p>Now, the meat and potatoes: The function that makes a snowflake grow:</p>
<pre class="racket"><code>; Generate a new point on the snowflake by drifting a point inwards
(define (snowflake-grow s [Î (sqrt 2)])
  (match-define (snowflake radius arms points) s)

  (let loop ([p (make-polar radius (* (random) 2Ï))])
    (cond
      ; Hit an already existing point, add it and return
      [(snowflake-contains? s p Î)
       (snowflake-set s p)]
      ; Otherwise, try to drift inwards
      [else
       (loop
        (for/fold ([p p])
                  ([step (in-list
                          (list
                           ; Drift randomly
                           (Î» (p) (+ p (make-polar
                                        (* (random) Î)
                                        (* (random) 2Ï))))
                           ; Drift inwards
                           (Î» (p) (make-polar
                                   (- (magnitude p) (* (random) Î))
                                   (angle p)))))])
          (step p)))])))</code></pre>
<p>I think the strangest bit in this code is the <code>for/fold</code> in the middle. Basically, it will apply a series of functions to a point in order to make it wiggle around. Why I did this was that I was experimenting with a number of other 'wiggle' functions as I was developing. In the end, I only have two--one for random motion, the other for inwards drift--but I liked the style well enough so I kept it.</p>
<p>Specifically, the first of the two functions, will generate a new random point that is up <code>Î</code> units away in any direction and add it to our current flake. The second will keep the same angle, but move directly inwards, again by a random amount up to <code>Î</code>. This is exactly why we wanted to use complex numbers for our points.</p>
<p>So all we have to do to make a snowflake is to call this function a bunch of times in a row:</p>
<pre class="racket"><code>(render-snowflake
   (for/fold ([s (make-snowflake 50 6)])
             ([i (in-range 20)])
     (snowflake-grow s 4)))</code></pre>
<p><a href="http://blog.jverkamp.com/2015/01/09/let-it-snow/sample-6-20steps.png" data-toggle="lightbox"><img src="http://blog.jverkamp.com/2015/01/09/let-it-snow/sample-6-20steps.png" /></a></p>
<p>(We'll define <code>render-snowflake</code> in a bit.)</p>
<p>Cool! We already have some nice flakey structure. Let's take it out to it's logical conclusion and keep growing until we hit the radius:</p>
<pre class="racket"><code>; Generate an entire snowflake
(define (generate-snowflake radius arms [Î (sqrt 2)])
  (let loop ([s (make-snowflake radius arms)])
    (define s^ (snowflake-grow s Î))
    (if (&gt; (magnitude (car (snowflake-points s^))) radius)
        s^
        (loop s^))))</code></pre>
<p>Basically, we keep adding points. If, at any point, the newest point added was further out from the center than our radius, we're done. Bam.</p>
<pre class="racket"><code>&gt; (render-snowflake (generate-snowflake 50 6 4))</code></pre>
<p><a href="http://blog.jverkamp.com/2015/01/09/let-it-snow/sample-6.png" data-toggle="lightbox"><img src="http://blog.jverkamp.com/2015/01/09/let-it-snow/sample-6.png" /></a></p>
<p>Or we can generate a bunch of snowflakes with different numbers of arms:</p>
<pre class="racket"><code>&gt; (for/list ([arms (in-range 3 9)])
    (render-snowflake (generate-snowflake 50 arms 4)))</code></pre>
<p><a href="http://blog.jverkamp.com/2015/01/09/let-it-snow/sample-arms-3.png" data-toggle="lightbox"><img src="http://blog.jverkamp.com/2015/01/09/let-it-snow/sample-arms-3.png" /></a> <a href="http://blog.jverkamp.com/2015/01/09/let-it-snow/sample-arms-4.png" data-toggle="lightbox"><img src="http://blog.jverkamp.com/2015/01/09/let-it-snow/sample-arms-4.png" /></a> <a href="http://blog.jverkamp.com/2015/01/09/let-it-snow/sample-arms-5.png" data-toggle="lightbox"><img src="http://blog.jverkamp.com/2015/01/09/let-it-snow/sample-arms-5.png" /></a> <a href="http://blog.jverkamp.com/2015/01/09/let-it-snow/sample-arms-6.png" data-toggle="lightbox"><img src="http://blog.jverkamp.com/2015/01/09/let-it-snow/sample-arms-6.png" /></a> <a href="http://blog.jverkamp.com/2015/01/09/let-it-snow/sample-arms-7.png" data-toggle="lightbox"><img src="http://blog.jverkamp.com/2015/01/09/let-it-snow/sample-arms-7.png" /></a> <a href="http://blog.jverkamp.com/2015/01/09/let-it-snow/sample-arms-8.png" data-toggle="lightbox"><img src="http://blog.jverkamp.com/2015/01/09/let-it-snow/sample-arms-8.png" /></a></p>
<p>Or we can experiment with different values for the packing radius:</p>
<pre class="racket"><code>&gt; (for/list ([Î (in-list (list 1 (sqrt 2) 2 3 Ï 4))])
    (render-snowflake (generate-snowflake 50 6 Î)))</code></pre>
<p><a href="http://blog.jverkamp.com/2015/01/09/let-it-snow/sample-delta-1.png" data-toggle="lightbox"><img src="http://blog.jverkamp.com/2015/01/09/let-it-snow/sample-delta-1.png" /></a> <a href="http://blog.jverkamp.com/2015/01/09/let-it-snow/sample-delta-root2.png" data-toggle="lightbox"><img src="http://blog.jverkamp.com/2015/01/09/let-it-snow/sample-delta-root2.png" /></a> <a href="http://blog.jverkamp.com/2015/01/09/let-it-snow/sample-delta-2.png" data-toggle="lightbox"><img src="http://blog.jverkamp.com/2015/01/09/let-it-snow/sample-delta-2.png" /></a> <a href="http://blog.jverkamp.com/2015/01/09/let-it-snow/sample-delta-3.png" data-toggle="lightbox"><img src="http://blog.jverkamp.com/2015/01/09/let-it-snow/sample-delta-3.png" /></a> <a href="http://blog.jverkamp.com/2015/01/09/let-it-snow/sample-delta-pi.png" data-toggle="lightbox"><img src="http://blog.jverkamp.com/2015/01/09/let-it-snow/sample-delta-pi.png" /></a> <a href="http://blog.jverkamp.com/2015/01/09/let-it-snow/sample-delta-4.png" data-toggle="lightbox"><img src="http://blog.jverkamp.com/2015/01/09/let-it-snow/sample-delta-4.png" /></a></p>
<p>Okay, so how have I been rendering these things?</p>
<pre class="racket"><code>; Render a snowflake to a bitmap
(define (render-snowflake s)
  (match-define (snowflake radius arms data) s)
  (define size (+ 1 (* radius 2)))

  (flomap-&gt;bitmap
   (build-flomap*
    1 size size
    (Î» (x y)
      (define p (make-rectangular (- x radius) (- y radius)))
      (vector (if (snowflake-contains? s p 1) 1 0))))))</code></pre>
<p>Simple. That's the beauty of making that <code>snowflake-contains?</code> function as we did earlier.</p>
<p>One neat trick that we can do though, since we have all of the points ordered by how they were added to the snowflake (albeit in reverse), we can render each step along the way as a single frame:</p>
<pre class="racket"><code>; Render a snowflake being formed
(define (render-snowflake/frames s)
  (match-define (snowflake radius arms data) s)

  (define snowflakes
    (reverse
     (for/fold ([s* (list (make-snowflake radius arms))])
               ([pt (in-list (reverse data))])
       (match-define (list* first rest) s*)
       (match-define (snowflake _ _ data^) first)
       (list* (snowflake radius arms (cons pt data^)) s*))))

  (map render-snowflake snowflakes))</code></pre>
<p>And turn that into a fun animation:</p>
<pre class="racket"><code>(require mrlib/gif)

(write-animated-gif
 (render-snowflake/frames (generate-snowflake 50 8 4))
 5
 filename
 #:last-frame-delay 50)</code></pre>
<p><a href="http://blog.jverkamp.com/2015/01/09/let-it-snow/snowflake.gif" data-toggle="lightbox"><img src="http://blog.jverkamp.com/2015/01/09/let-it-snow/snowflake.gif" /></a></p>
<p>I've not used the <code><a href="http://docs.racket-lang.org/search/index.html?q=mrlib/gif">mrlib/gif</a></code> library before (instead I've been using <code><a href="http://docs.racket-lang.org/search/index.html?q=2htdp/universe">2htdp/universe</a></code> to generate the frames and <a href="http://www.imagemagick.org/">ImageMagick</a> to combine them), but it's really nice. Should make future animations even easier!</p>
<p>One step further, we can take that index from <code>snowflake-contains?</code> to colorize images. We just need to tweak <code>render-snowflake</code> a bit:</p>
<pre class="racket"><code>; Render a snowflake to a bitmap
(define (render-snowflake s #:colorize? [colorize? #f])
  (match-define (snowflake radius arms data) s)
  (define size (+ 1 (* radius 2)))
  (define data-length (length data))

  (flomap-&gt;bitmap
   (build-flomap*
    (if colorize? 3 1) size size
    (Î» (x y)
      (define p (make-rectangular (- x radius) (- y radius)))
      (define index (snowflake-contains? s p 1))
      (cond
        [(and colorize? index) (let ([g (- 1 (/ index data-length))])
                                 (vector g g 1))]
        [colorize?             (vector 0 0 0)]
        [index                 (vector 1)]
        [else                  (vector 0)])))))</code></pre>
<p>Trying it out:</p>
<pre class="racket"><code>&gt; (write-animated-gif
   (render-snowflake/frames (generate-snowflake 50 8 4) #:colorize? #t)
   5
   filename
   #:last-frame-delay 50)</code></pre>
<p><a href="http://blog.jverkamp.com/2015/01/09/let-it-snow/snowflake-colorized.gif" data-toggle="lightbox"><img src="http://blog.jverkamp.com/2015/01/09/let-it-snow/snowflake-colorized.gif" /></a></p>
<p>And there we have it. As always, the code is available on GitHub: <a href="https://github.com/jpverkamp/small-projects/blob/master/blog/let-it-snow.rkt">let-it-snow.rkt</a></p>
<p>â« Let it snow, let it snow, let it snow! â«<span class="footnote"><sup><a href="#footnote-3">[3]</a></sup></span></p>]]></content></entry><entry><title>Generating omnichromatic images</title><link href="http://blog.jverkamp.com/2015/01/01/generating-omnichromatic-images" /><id>urn:uuid:f0391a98-c064-56fb-c8aa-b1b2cfcb9966</id><updated>2015-01-01T00:10:00Z</updated><summary type="html"><![CDATA[<p>Inspired half by a <a href="https://codegolf.stackexchange.com/questions/22144/images-with-all-colors">post on the Code Golf StackExchange</a> and half by the corresponding website <a href="http://allrgb.com/">allrgb.com</a>, today's post tasks us with making images like this:</p>
<p><a href="http://blog.jverkamp.com/2015/01/01/generating-omnichromatic-images/grow-minimum_gray-code_400x200.png" data-toggle="lightbox"><img src="http://blog.jverkamp.com/2015/01/01/generating-omnichromatic-images/grow-minimum_gray-code_400x200.png" /></a></p>
<p>So what's so interesting about that picture?</p>
]]></summary><content type="html"><![CDATA[<p>Inspired half by a <a href="https://codegolf.stackexchange.com/questions/22144/images-with-all-colors">post on the Code Golf StackExchange</a> and half by the corresponding website <a href="http://allrgb.com/">allrgb.com</a>, today's post tasks us with making images like this:</p>
<p><a href="http://blog.jverkamp.com/2015/01/01/generating-omnichromatic-images/grow-minimum_gray-code_400x200.png" data-toggle="lightbox"><img src="http://blog.jverkamp.com/2015/01/01/generating-omnichromatic-images/grow-minimum_gray-code_400x200.png" /></a></p>
<p>So what's so interesting about that picture?</p>
<!--more-->
<p>Well, at 256x128, there are 32,768 pixels in that image. And all 32,768 are different.</p>
<p>What's really interesting about this is that there are all sorts of possible ways to do this. That's sort of the entire point behind <a href="http://allrgb.com/">allrgb.com</a>, although in that case, you are generating 4096x4096 images containing <em>all</em> RGB images (with one byte each for red, green, and blue). Perhaps by the end of the post, we can generate one of those giant images.</p>
<p>When I first started out, I had a few ideas for the images that I wanted to generate. Then a few more. Then even more. Each time I added more, I wanted to see how it would combine with each of the previous. As I added more and more, that got increasingly complicated. So instead, I decided to split all of the algorithms that I was writing into two halves:</p>
<ul>
  <li>Color producers - generate a list of unique colors in some specified order</li>
  <li>Location producers - generate a list of locations within the target image to place each color produced by a color producer</li>
</ul>
<p>Specifically, a producer is something that I can use with <code><a href="http://docs.racket-lang.org/search/index.html?q=in-producer">in-producer</a></code>. A thunk (a function of no arguments) that I can call over and over again that will return a new item with each call. In the case of color producers, I will be returning a vector of ARGB colors in the range <code>[0.0, 1.0]</code> (for use with the <code><a href="http://docs.racket-lang.org/search/index.html?q=images/flomap">images/flomap</a></code> module). In the case of location producers, the returned value will be a <code>(struct pt (x y))</code>.</p>
<p>This way, I can make a new color producer and almost immediately see how it looked with all of the location producers (and vice versa). Neat, no?</p>
<p>To do that, I made a module each for colors and locations. For each then, I defined code something like this:</p>
<pre class="racket"><code>(provide list-rgb-producers
         get-rgb-producer
         in-rgb-producers)

; Interface to export all known rgb producers
(define rgb-producers (make-hash))

(define (list-rgb-producers) (hash-keys rgb-producers))
(define (get-rgb-producer name) (hash-ref rgb-producers name))
(define (in-rgb-producers) (in-hash rgb-producers))

(define-syntax-rule (define-rgb-producer (name count) body ...)
  (let ()
    (define (name count) body ...)
    (hash-set! rgb-producers 'name name)))</code></pre>
<p>The basic idea is that internally, I will store a list of producers which I can easily define with my custom macro (<code>define-rgb-producer</code> in this case). Then when I want to use the module, I can use one of the three exported functions:</p>
<ul>
  <li><code>list-rgb-producers</code> - get a list of names of defined producers</li>
  <li><code>get-rgb-producer</code> - get a specific producer by name (especially helpful if I want to base one off of another internally)</li>
  <li><code>in-rgb-producers</code> - a thin wrapper around <code>in-hash</code> to return both the name and function for each defined producer in turn</li>
</ul>
<p>Everything else, including all of the functions themselves I can define privately. That way, we can write our testing code using <code>in-rgb-producers</code> and have it automatically generate all new variants no matter what we add. Neat!</p>
<h2>Color producers</h2>
<p>Okay, let's get to the meat of the situation now. First, let's define a whole series of color producers. Since we need a location producer to actually render these, let's assume we have an <code>order-producer</code> that runs left to right, top to bottom. <code>reading</code> order, as it were (we'll define it in the next section).</p>
<p>First thought, let's just run directly through the RGB color space:</p>
<pre class="racket"><code>; Move evenly through the RGB color space
(define-rgb-producer (sequential-noskip count)
  (generator ()
    (for ([i (in-range 256^3)])
      (yield (-&gt;rgb i)))))

; Convert an integer [0, 256^3) into an ARGB flvector
(define (-&gt;rgb n)
  (define (-&gt;1.0 n) (/ n 256.0))
  (vector 1.0
          (-&gt;1.0 (bitwise-and (arithmetic-shift n -16) 255))
          (-&gt;1.0 (bitwise-and (arithmetic-shift n -8) 255))
          (-&gt;1.0 (bitwise-and (arithmetic-shift n -0) 255))))</code></pre>
<p><a href="http://blog.jverkamp.com/2015/01/01/generating-omnichromatic-images/reading_sequential-noskip_400x200.png" data-toggle="lightbox"><img src="http://blog.jverkamp.com/2015/01/01/generating-omnichromatic-images/reading_sequential-noskip_400x200.png" /></a></p>
<p>Nice and simple. We're using a <code><a href="http://docs.racket-lang.org/search/index.html?q=generator">generator</a></code> despite the performance problems mostly because they make the code so nice and clean. Also, especially once we get to the more complicated location generation code, the algorithmic complexity is going to dwarf the cost of a generator anyways...</p>
<p>Simple enough, but it has one major disadvantage. Because we're working in RGB, but only using 0.1% of the color space (20 thousand of the available 16 million colors), everything is blue. That's because since we're only changing the low bits, we change the blue value first (0-255). Green changes as well, but much slower, only getting up to around 80. Oops. So instead, let's skip enough colors each time so we go through the entire color space:</p>
<pre class="racket"><code>; Move evenly through the RGB color space
(define-rgb-producer (sequential count)
  (define increment (quotient 256^3 count))
  (generator ()
    (for ([i (in-range 0 256^3 increment)])
      (yield (-&gt;rgb i)))))</code></pre>
<p><a href="http://blog.jverkamp.com/2015/01/01/generating-omnichromatic-images/reading_sequential_400x200.png" data-toggle="lightbox"><img src="http://blog.jverkamp.com/2015/01/01/generating-omnichromatic-images/reading_sequential_400x200.png" /></a>.</p>
<p>Much better. This time we have a reasonable sampling of colors. Well... sort of. This time we have the opposite problem. Now instead of too much blue, we have less blue, more red and green. This time, the problem is that since we're changing the most in the low bits, we're skipping over a lot of the possible values for blue in each pixel, using all of the red values and still only some of the green. What we really want to do is iterate through each of the three channels, skipping the same amount for each:</p>
<pre class="racket"><code>; Cascade through red, then green, then blue
(define-rgb-producer (cascade count)
  (define increment (inexact-&gt;exact (floor (/ 256 (expt count 1/3)))))
  (generator ()
    (for* ([r (in-range 0 256 increment)]
           [g (in-range 0 256 increment)]
           [b (in-range 0 256 increment)])
      (yield (-&gt;rgb (+ r (* 256 g) (* 256 256 b)))))))</code></pre>
<p><a href="http://blog.jverkamp.com/2015/01/01/generating-omnichromatic-images/reading_cascade_400x200.png" data-toggle="lightbox"><img src="http://blog.jverkamp.com/2015/01/01/generating-omnichromatic-images/reading_cascade_400x200.png" /></a></p>
<p>One problem is that unless you have a specific power, this isn't quite going to give you an even split, but it's certainly better than the previous examples.</p>
<p>Another idea would be to make use of <a href="https://en.wikipedia.org/wiki/gray_codes">gray codes</a>, rather than directly use the indicies. Also known as a reflected binary code, the idea of a gray code is that between any two values, you change only one bit. This has two advantages. First, gray codes avoid the sudden change we have in previous images where we go from the end of one iteration to the beginning of the next. Second, gray codes essentially form a <a href="https://en.wikipedia.org/wiki/space_filling curve">space filling curve</a>. If you have a power of 2, <em>n</em> gray codes will cover the same space as <em>n</em> sequential values, just in a different order. Let's see what that means for our color generation:</p>
<pre class="racket"><code>(define (-&gt;gray-code i)
  (bitwise-xor (arithmetic-shift i 1) i))

; Generate codes using gray codes
(define-rgb-producer (gray-code-noskip count)
  (generator ()
    (for ([i (in-range 256^3)])
      (yield (-&gt;rgb (-&gt;gray-code i))))))</code></pre>
<p><a href="http://blog.jverkamp.com/2015/01/01/generating-omnichromatic-images/reading_gray-code-noskip_400x200.png" data-toggle="lightbox"><img src="http://blog.jverkamp.com/2015/01/01/generating-omnichromatic-images/reading_gray-code-noskip_400x200.png" /></a></p>
<pre class="racket"><code>(define-rgb-producer (gray-code count)
  (define increment (quotient 256^3 count))
  (generator ()
    (for ([i (in-range 0 256^3 increment)])
      (yield (-&gt;rgb (-&gt;gray-code i))))))</code></pre>
<p><a href="http://blog.jverkamp.com/2015/01/01/generating-omnichromatic-images/reading_gray-code_400x200.png" data-toggle="lightbox"><img src="http://blog.jverkamp.com/2015/01/01/generating-omnichromatic-images/reading_gray-code_400x200.png" /></a></p>
<p>As before, if you don't skip you get change mostly in the lowest/blue channel with a slower change in the green. None at all in the red. If you skip around though, you get exactly the pattern we're looking for, smooth changes uniformly through the entire color space. Nice!</p>
<p>Last but not least, let's through all this nice theoretically color space stuff out the window. Random colors for the win!</p>
<pre class="racket"><code>; Randomly generate colors (regenerating on duplicates)
(define-rgb-producer (randomly count)
  (define used (make-hasheq))
  (Î» ()
    (for*/first ([_ (in-naturals)]
                 [new-color (in-value (random 256^3))]
                 #:when (not (hash-has-key? used new-color)))
      (hash-set! used new-color #t)
      (-&gt;rgb new-color))))</code></pre>
<p><a href="http://blog.jverkamp.com/2015/01/01/generating-omnichromatic-images/reading_randomly_400x200.png" data-toggle="lightbox"><img src="http://blog.jverkamp.com/2015/01/01/generating-omnichromatic-images/reading_randomly_400x200.png" /></a></p>
<p>Optimally, I'd like to call that one <code>random</code>, but that would shadow the call to <code>random</code> made to actually choose a color. Can't very well do that, now can we?</p>
<p>Also, this one has a major performance problem, especially with larger images. Can you guess what it is?</p>
<h2>Location producers</h2>
<p>Okay, enough with the color generation. That should be enough for the moment. Let's instead move on to location producers. First, we'll start with the simple one we've been actually using all along:</p>
<pre class="racket"><code>; Left to right, top to bottom
(define-order-producer (reading width height get-new-color get-color-at)
  (generator ()
    (for* ([y (in-range height)] [x (in-range width)])
      (yield (pt x y)))))</code></pre>
<p>Simple enough. That generates the images we've seen above:</p>
<p><a href="http://blog.jverkamp.com/2015/01/01/generating-omnichromatic-images/reading_gray-code_400x200.png" data-toggle="lightbox"><img src="http://blog.jverkamp.com/2015/01/01/generating-omnichromatic-images/reading_gray-code_400x200.png" /></a></p>
<p>This time, you may have noticed a few more parameters. Specifically, this time we care about not just how many colors to generate, but also the size of the iamge we're going to put them in. Likewise, in some of the later functions, we're going to want to determine which color we're about to place (generated from the color producers) and what neighbors we're about to place it nearby. In the next section, we'll have to show how we came to those last two functions / parameters.</p>
<p>How about next, we spiral from a central point outwards. This is similar to the <code>in-spiral</code> function I defined in the post on <a href="http://blog.jverkamp.com/2014/12/23/palette-swapping">palette swapping</a>, only this time we'll use a <a href="https://en.wikipedia.org/wiki/Queue_(abstract_data_type)">queue</a> rather than a generator:</p>
<pre class="racket"><code>; Spiral from the center point outwards
(require data/queue)

(define-order-producer (spiral width height get-new-color get-color-at)
  (define q (make-queue))
  (enqueue! q (pt (quotient width 2) (quotient height 2)))

  (define (in-bounds? p)
    (match-define (pt x y) p)
    (and (&gt;= x 0) (&lt; x width)
         (&gt;= y 0) (&lt; y height)))

  (Î» ()
    (let loop ()
      (define next (dequeue! q))
      (cond
        [(or (not (in-bounds? next)) (get-color-at next #f)) (loop)]
        [else
         (match-define (pt x y) next)
         (for* ([xd (in-range -1 2)] [yd (in-range -1 2)])
           (enqueue! q (pt (+ x xd) (+ y yd))))
         next]))))</code></pre>
<p><a href="http://blog.jverkamp.com/2015/01/01/generating-omnichromatic-images/spiral_gray-code_400x200.png" data-toggle="lightbox"><img src="http://blog.jverkamp.com/2015/01/01/generating-omnichromatic-images/spiral_gray-code_400x200.png" /></a></p>
<p>Not very functional code, but it certainly does work. The beauty of using a queue here is that by processing each pixel in the order it was added, we will do each layer in turn. As we do each layer, the next is added to the end of the queue. It's arguable which code is cleaner between this and <code>in-spiral</code>.</p>
<p>Neat. Okay, how about we take that code one step further. Rather than generating a single square, how about we generate a seed square randomly in the image, expanding it until we hit the edge. Once we do, generate another square, repeating over and over again with smaller and smaller seeds. Something like this:</p>
<pre class="racket"><code>; Generate random squares each until they hit an edge or another square
(define-order-producer (square-fill width height get-new-color get-color-at)
  (define q (make-queue))
  (enqueue! q (pt (random width) (random height)))

  (define this-square (make-hash))

  (define (in-bounds? p)
    (match-define (pt x y) p)
    (and (&gt;= x 0) (&lt; x width)
         (&gt;= y 0) (&lt; y height)))

  (Î» ()
    (let loop ()
      (define next (dequeue! q))
      (cond
        ; Already set, try again with this square
        [(hash-has-key? this-square next)
         (loop)]
        ; Out of bounds or already set, seed a new square
        [(or (not (in-bounds? next))
             (get-color-at next #f))

         (queue-filter! q (const #f))
         (hash-clear! this-square)

         (enqueue! q (pt (random width) (random height)))
         (loop)]
        ; Otherwise, return that point and queue up its neighbors
        [else
         (match-define (pt x y) next)
         (for* ([xd (in-range -1 2)] [yd (in-range -1 2)])
           (enqueue! q (pt (+ x xd) (+ y yd))))
         (hash-set! this-square next #t)
         next]))))</code></pre>
<p><a href="http://blog.jverkamp.com/2015/01/01/generating-omnichromatic-images/square-fill_gray-code_400x200.png" data-toggle="lightbox"><img src="http://blog.jverkamp.com/2015/01/01/generating-omnichromatic-images/square-fill_gray-code_400x200.png" /></a></p>
<p>This is actually one algorithm where the more abrupt changes of the <code>cascade</code> algorithm really look neat:</p>
<p><a href="http://blog.jverkamp.com/2015/01/01/generating-omnichromatic-images/square-fill_cascade_400x200.png" data-toggle="lightbox"><img src="http://blog.jverkamp.com/2015/01/01/generating-omnichromatic-images/square-fill_cascade_400x200.png" /></a></p>
<p>Next, let's take a similar idea, but instead of squares, let's go back to something I posted about all of the way in 2012: <a href="http://blog.jverkamp.com/2012/09/27/html5-bugs">random walk / bugs</a>.</p>
<p>Basically, start with a seed as before. This time though, randomly expand in one of the eight possible directions. If that doesn't work (either it's an edge or already set), try another direction until we fail at all eight. If that's the case (and we've walked ourselves into a corner), generate a new seed.</p>
<pre class="racket"><code>; Walk randomly, starting a new seed if there are no more options
(define-order-producer (random-walk width height get-new-color get-color-at)
  (define current-point (pt (random width) (random height)))

  (define (in-bounds? p)
    (match-define (pt x y) p)
    (and (&gt;= x 0) (&lt; x width)
         (&gt;= y 0) (&lt; y height)))

  (Î» ()
    (begin0
      current-point

      (let ()
        (match-define (pt x y) current-point)
        (define next-point
          (or
           ; Find a neighboring point that hasn't been set
           (for*/first ([xd (in-list (shuffle (range -1 2)))]
                        [yd (in-list (shuffle (range -1 2)))]
                        [neighbor (in-value (pt (+ x xd) (+ y yd)))]
                        #:when (and (in-bounds? neighbor)
                                    (not (= xd yd 0))
                                    (not (get-color-at neighbor #f))))
             neighbor)
           ; If that doesn't work, generate a new seed
           (let loop ()
             (define new-seed (pt (random width) (random height)))
             (if (get-color-at new-seed #f)
                 (loop)
                 new-seed))))

        (set! current-point next-point)))))</code></pre>
<p><a href="http://blog.jverkamp.com/2015/01/01/generating-omnichromatic-images/random-walk_gray-code_400x200.png" data-toggle="lightbox"><img src="http://blog.jverkamp.com/2015/01/01/generating-omnichromatic-images/random-walk_gray-code_400x200.png" /></a></p>
<p><a href="http://blog.jverkamp.com/2015/01/01/generating-omnichromatic-images/random-walk_cascade_400x200.png" data-toggle="lightbox"><img src="http://blog.jverkamp.com/2015/01/01/generating-omnichromatic-images/random-walk_cascade_400x200.png" /></a></p>
<p>It's really neat how you can see the structure in each of the images, where fairly large initial walks fill in large regions and then as the space gets more and more full, you get more noise as walks generate only a pixel or two.</p>
<p>Okay, and now the big one. This is honestly the response to the <a href="https://codegolf.stackexchange.com/questions/22144/images-with-all-colors">StackExchange post</a> that got me the most interested in the first place, generating some really stunning images. Here's the basic algorithm:</p>
<ol>
  <li>Generate a set of border points <code>B</code>, set to some initial small set of points</li>
  <li>While <code>B</code> is not empty:
    <ol>
      <li>Generate a new color <code>c</code></li>
      <li>For each point <code>b</code> â <code>B</code> calculate an error value if we were to place <code>c</code> at <code>b</code></li>
      <li>Place <code>c</code> at the <code>b</code> with the minimal error</li>
      <li>Update <code>B</code> by removing <code>b</code> and adding points adjacent to <code>b</code> that have not already been set</li>
    </ol>
  </li>
</ol>
<p>That's a bit of a mouthful, but it's relatively straight forward to turn into code:</p>
<pre class="racket"><code>; Organically grow outwards, finding the best match among border pixels

; combine is how distances of border pixels are combined
; missing is the initial value and the value used if a point is missing
; after is called once with the final value (defaults to identity)
(define (make-grower #:combine combine
                     #:missing missing
                     #:after [after identity]
                     #:seeds [seeds #f])
  (Î» (width height get-new-color get-color-at)
    (define border (make-hash))
    (if seeds
        (for-each (Î» (seed) (hash-set! border seed #t)) seeds)
        (hash-set! border (pt (quotient width 2) (quotient height 2)) #t))

    (Î» ()
      (define new-color (get-new-color))

      ; Loop through all border pixels to find the best match
      (define-values (_ best-point)
        (for/fold ([best-distance +inf.0] [best-point #f])
                  ([(point _) (in-hash border)])

          ; Find the minimum distance to pixels adjacent to that border
          (define new-distance
            (after
             (for*/fold ([new-distance missing])
                        ([xd (in-range -1 2)] [yd (in-range -1 2)])
               (define c (get-color-at (pt+ point (pt xd yd)) #f))
               (combine new-distance (if c (rgb-distance new-color c) missing)))))

          (if (&lt;= new-distance best-distance)
              (values new-distance point)
              (values best-distance best-point))))

      ; Update the borders without that point but with it's neighbors
      (hash-remove! border best-point)
      (match-define (pt x y) best-point)

      (for* ([xd (in-range -1 2)]
             [yd (in-range -1 2)]
             [new-border-point (in-value (pt (+ x xd) (+ y yd)))]
             #:when (and (not (= xd yd 0))
                         (&gt;= (+ x xd) 0) (&lt; (+ x xd) width)
                         (&gt;= (+ y yd) 0) (&lt; (+ y yd) height)
                         (not (get-color-at new-border-point #f))))
        (hash-set! border new-border-point #t))

      best-point)))</code></pre>
<p>I did say relatively. :) One thing to note is that we're doing something a little different here. Rather than directly defining a new ordering function, we're going to define several. That's the beauty of higher order functions is that we can make one function (like this one) and parameterize it over how exactly that error function is calculated. Specifically (as noted in the comments), we have 3 variables that determine how error is defined:</p>
<ul>
  <li><code>combine</code> - how do you combine the error of multiple already set pixels adjacent to a border pixel <code>b</code></li>
  <li><code>zero</code> - the initial value for the error, also used for neighboring pixels that are not currently set</li>
  <li><code>after</code> - a special function I needed when I wanted to average the error over the surrounding pixels</li>
</ul>
<p>Specifically, with these three functions, we can define (at the very least), the following error functions:</p>
<ul>
  <li><code>grow-minimum</code> - take the color distance to the neighboring pixel closest to the new color</li>
  <li><code>grow-minimum</code> - like <code>grow-minimum</code>, only take the worst neighbor</li>
  <li><code>grow-average</code> - take the average color of any set neighbors and use the distance to that as the error</li>
</ul>
<p>We can use the <code>make-grower</code> function to define these as such:</p>
<pre class="racket"><code>; Choose the border pixel closest to any one of its neighbors
(define-order-producer (grow-minimum width height get-new-color get-color-at)
  ((make-grower #:combine min #:missing +inf.0)
   width height get-new-color get-color-at))</code></pre>
<p><a href="http://blog.jverkamp.com/2015/01/01/generating-omnichromatic-images/grow-minimum_gray-code_400x200.png" data-toggle="lightbox"><img src="http://blog.jverkamp.com/2015/01/01/generating-omnichromatic-images/grow-minimum_gray-code_400x200.png" /></a></p>
<p><a href="http://blog.jverkamp.com/2015/01/01/generating-omnichromatic-images/grow-minimum_cascade_400x200.png" data-toggle="lightbox"><img src="http://blog.jverkamp.com/2015/01/01/generating-omnichromatic-images/grow-minimum_cascade_400x200.png" /></a></p>
<pre class="racket"><code>; Choose the border pixel closest to the furthest away neighbor
(define-order-producer (grow-maximum width height get-new-color get-color-at)
  ((make-grower #:combine max #:missing -inf.0)
   width height get-new-color get-color-at))</code></pre>
<p><a href="http://blog.jverkamp.com/2015/01/01/generating-omnichromatic-images/grow-maximum_gray-code_400x200.png" data-toggle="lightbox"><img src="http://blog.jverkamp.com/2015/01/01/generating-omnichromatic-images/grow-maximum_gray-code_400x200.png" /></a></p>
<p><a href="http://blog.jverkamp.com/2015/01/01/generating-omnichromatic-images/grow-maximum_cascade_400x200.png" data-toggle="lightbox"><img src="http://blog.jverkamp.com/2015/01/01/generating-omnichromatic-images/grow-maximum_cascade_400x200.png" /></a></p>
<pre class="racket"><code>; Choose the border pixel where the difference from the average of already placed pixels is minimal
(define-order-producer (grow-average width height get-new-color get-color-at)
  ; Sneaky trick to track both sum (real) and count (imagionary)
  ((make-grower #:combine (Î» (old-v new-v) (+ old-v new-v 0+1i))
                #:missing 0
                #:after (Î» (v) (if (= v 0) 0 (/ (real-part v) (imag-part v)))))
   width height get-new-color get-color-at))</code></pre>
<p><a href="http://blog.jverkamp.com/2015/01/01/generating-omnichromatic-images/grow-average_gray-code_400x200.png" data-toggle="lightbox"><img src="http://blog.jverkamp.com/2015/01/01/generating-omnichromatic-images/grow-average_gray-code_400x200.png" /></a></p>
<p><a href="http://blog.jverkamp.com/2015/01/01/generating-omnichromatic-images/grow-average_cascade_400x200.png" data-toggle="lightbox"><img src="http://blog.jverkamp.com/2015/01/01/generating-omnichromatic-images/grow-average_cascade_400x200.png" /></a></p>
<p>The oddest one is <code>grow-average</code>. Since we need to track both the sum and the count (since we don't know how many neighbors are actually set), we'll use imagionary numbers. Then we can use that <code>#:after</code> parameter to do the final division.</p>
<p>I really also like how different <code>grow-minimum</code> and <code>grow-maximum</code> are, despite how similar their definitions are. Specifically, since in the latter we take the worst case error, we get neat ridges between the expanding color sections which are only filled right at the very end. Likewise, <code>grow-average</code> has it's own distinct feel. Because of the averaging of the error, it tends to be much more muted.</p>
<p>Another interesting note is runtime. Because of how the border pixels are filled in, <code>grow-maximum</code> will have a much longer list through most of its run. Furthermore, since we have to compare every current border pixel to each new color, that results in a correspondingly longer runtime. While they would have the same runtime in <a href="https://en.wikipedia.org/wiki/Big_O notation">Big O notation</a>, the constants are very different.</p>
<p>You may be asking yourself, so what about that <code>#:seeds</code> paramater? Well, with that, you can do something like this: growing in from the edges rather than from the center:</p>
<pre class="racket"><code>(define-order-producer (grow-maximum-corners width height get-new-color get-color-at)
  ((make-grower #:combine max #:missing -inf.0 #:seeds (corners width height))
   width height get-new-color get-color-at))</code></pre>
<p><a href="http://blog.jverkamp.com/2015/01/01/generating-omnichromatic-images/grow-maximum-corners_gray-code_400x200.png" data-toggle="lightbox"><img src="http://blog.jverkamp.com/2015/01/01/generating-omnichromatic-images/grow-maximum-corners_gray-code_400x200.png" /></a></p>
<p><a href="http://blog.jverkamp.com/2015/01/01/generating-omnichromatic-images/grow-maximum-corners_cascade_400x200.png" data-toggle="lightbox"><img src="http://blog.jverkamp.com/2015/01/01/generating-omnichromatic-images/grow-maximum-corners_cascade_400x200.png" /></a></p>
<p>And... that's that. That's all of the different algorithms I've come up with thus far. I have a few more ideas percolating in the back of my head (in particular, the idea of combining the ideas in this post with those in <a href="http://blog.jverkamp.com/2014/12/23/palette-swapping">palette swapping</a>), but those will have to wait for another day.</p>
<h2>Putting it all together</h2>
<p>Before we go though, I think it would be interesting to show how I've been putting these images all together. Given one of each producer, how do you render that into an image?</p>
<pre class="racket"><code>; Given a color and order producer, make an image
(define (render width height rgb-producer order-producer)
  ; Initialize the image to error pixels
  (define output (make-vector (* width height) (void)))

  ; Access a pixel, will be given to order producer
  ; If default is set, return that on unset or out of bounds
  (define (get-pixel p [default (void)])
    (match-define (pt x y) p)
    (cond
      [(and (&gt;= x 0) (&lt; x width)
            (&gt;= y 0) (&lt; y height))
       (define v (vector-ref output (+ x (* y width))))
       (cond
         [(not (void? v)) v]
         [(not (void? default)) default]
         [else (error 'get-pixel "pixel at ~a,~a undefined, no default specified" x y)])]
      [(not (void? default))
       default]
      [else
       (error 'get-pixel "invalid coordinates ~a,~a (size = ~a,~a)" x y width height)]))

  ; Set a pixel in the final image, error on out of bounds
  (define (set-pixel! p c)
    (match-define (pt x y) p)
    (cond
      [(and (&gt;= x 0) (&lt; x width)
            (&gt;= y 0) (&lt; y height))
       (vector-set! output (+ x (* y width)) c)]
      [else
       (error 'get-pixel "invalid coordinates ~a,~a (size = ~a,~a)" x y width height)]))

  (define count (* width height))

  ; Accessor for within the location producer to get the next color
  (define current-color #f)
  (define (get-current-color) current-color)

  ; Create the producers, cannot directly use for since we need to set the current color
  (define next-rgb (rgb-producer count))
  (define next-location (order-producer width height get-current-color get-pixel))

  (for ([index (in-range count)])
    (define color (next-rgb))
    (set! current-color color)
    (define location (next-location))
    (set-pixel! location color))

  ; Generate the resulting image, setting errors to magenta
  (flomap-&gt;bitmap
   (build-flomap*
    4 width height
    (Î» (x y) (get-pixel (pt x y) (vector 1 1 0 1))))))</code></pre>
<p>Basically, it's very similar to how we were working with <a href="http://blog.jverkamp.com/2014/12/23/palette-swapping">palette swapping</a>. We generate a vector to hold the colors as we're generating them, since <code>build-flomap*</code> doesn't give us a mutable image. Then we created a getter/setter for that same vector, the former of which we will be passing into the location producers above (as <code>get-color-at</code>). Finally, we loop through the colors.</p>
<p>I would optimally have rather used <code>in-rgb-producer</code> and <code>in-order-producer</code> here, but unfortunately that doesn't quite work. Since we need to know what the color generated by the former is in the latter, we have to add another instruction. So it goes.</p>
<p>And... that's it. Really this time. There's also a bit of test code for generating a bunch of test images along with all of the rest of my code available on GitHub: <a href="https://github.com/jpverkamp/small-projects/tree/master/blog/allrgb">allrgb</a>.</p>
<p>If you have any great ideas for more producers, I'd love to see them. Feel free to leave a comment / make a pull request / shoot me an email. If they're particularly neat, I'll add them here / to the repo above.</p>
<p>Oh hey, since I already generated it anyways:</p>
<p><a href="http://blog.jverkamp.com/2015/01/01/generating-omnichromatic-images/grow-minimum_randomly_512x512.png" data-toggle="lightbox"><img src="http://blog.jverkamp.com/2015/01/01/generating-omnichromatic-images/grow-minimum_randomly_512x512.png" /></a></p>]]></content></entry><entry><title>2015 Reading List</title><link href="http://blog.jverkamp.com/2015/01/01/2015-reading-list" /><id>urn:uuid:578fac8e-7860-9ff6-9e0e-a03d7f35f3bd</id><updated>2015-01-01T00:05:00Z</updated><summary type="html"><![CDATA[<p>Partially to keep myself honest and partially because I think these books look neat, here is my (entirely too ambitious) current reading list for 2015:</p>
<p><a href="https://www.goodreads.com/book/show/7235533-the-way-of-kings" title="The Way of Kings"><img alt="The Way of Kings" src="http://blog.jverkamp.com/2015/01/01/2015-reading-list/the-way-of-kings.jpg" /></a> <a href="https://www.goodreads.com/book/show/7736182-the-lost-hero" title="The Lost Hero"><img alt="The Lost Hero" src="http://blog.jverkamp.com/2015/01/01/2015-reading-list/the-lost-hero.jpg" /></a> <a href="https://www.goodreads.com/book/show/12287209-wool" title="Wool"><img alt="Wool" src="http://blog.jverkamp.com/2015/01/01/2015-reading-list/wool.jpg" /></a> <a href="https://www.goodreads.com/book/show/28876.His_Majesty_s_Dragon" title="His Majesty's Dragon"><img alt="His Majesty's Dragon" src="http://blog.jverkamp.com/2015/01/01/2015-reading-list/his-majesty-s-dragon.jpg" /></a> <a href="https://www.goodreads.com/book/show/9533378-hounded" title="Hounded"><img alt="Hounded" src="http://blog.jverkamp.com/2015/01/01/2015-reading-list/hounded.jpg" /></a> <a href="https://www.goodreads.com/book/show/2355575.Cry_Wolf" title="Cry Wolf"><img alt="Cry Wolf" src="http://blog.jverkamp.com/2015/01/01/2015-reading-list/cry-wolf.jpg" /></a> <a href="https://www.goodreads.com/book/show/9640626-my-life-as-a-white-trash-zombie" title="My Life as a White Trash Zombie"><img alt="My Life as a White Trash Zombie" src="http://blog.jverkamp.com/2015/01/01/2015-reading-list/my-life-as-a-white-trash-zombie.jpg" /></a> <a href="https://www.goodreads.com/book/show/12779838-precinct-13" title="Precinct 13"><img alt="Precinct 13" src="http://blog.jverkamp.com/2015/01/01/2015-reading-list/precinct-13.jpg" /></a> <a href="https://www.goodreads.com/book/show/3220405-ender-in-exile" title="Ender in Exile"><img alt="Ender in Exile" src="http://blog.jverkamp.com/2015/01/01/2015-reading-list/ender-in-exile.jpg" /></a> <a href="https://www.goodreads.com/book/show/12953520-year-zero" title="Year Zero"><img alt="Year Zero" src="http://blog.jverkamp.com/2015/01/01/2015-reading-list/year-zero.jpg" /></a> <a href="https://www.goodreads.com/book/show/12988074-the-unnaturalists" title="The Unnaturalists"><img alt="The Unnaturalists" src="http://blog.jverkamp.com/2015/01/01/2015-reading-list/the-unnaturalists.jpg" /></a> <a href="https://www.goodreads.com/book/show/4407.American_Gods" title="American Gods"><img alt="American Gods" src="http://blog.jverkamp.com/2015/01/01/2015-reading-list/american-gods.jpg" /></a> <a href="https://www.goodreads.com/book/show/2302159.Whitechapel_Gods" title="Whitechapel Gods"><img alt="Whitechapel Gods" src="http://blog.jverkamp.com/2015/01/01/2015-reading-list/whitechapel-gods.jpg" /></a> <a href="https://www.goodreads.com/book/show/112537.Rendezvous_with_Rama" title="Rendezvous with Rama"><img alt="Rendezvous with Rama" src="http://blog.jverkamp.com/2015/01/01/2015-reading-list/rendezvous-with-rama.jpg" /></a> <a href="https://www.goodreads.com/book/show/337048.The_Engines_of_God" title="The Engines of God"><img alt="The Engines of God" src="http://blog.jverkamp.com/2015/01/01/2015-reading-list/the-engines-of-god.jpg" /></a> <a href="https://www.goodreads.com/book/show/11138.Mere_Christianity" title="Mere Christianity"><img alt="Mere Christianity" src="http://blog.jverkamp.com/2015/01/01/2015-reading-list/mere-christianity.jpg" /></a> <a href="https://www.goodreads.com/book/show/12899734-the-iron-wyrm-affair" title="The Iron Wyrm Affair"><img alt="The Iron Wyrm Affair" src="http://blog.jverkamp.com/2015/01/01/2015-reading-list/the-iron-wyrm-affair.jpg" /></a> <a href="https://www.goodreads.com/book/show/12476820-partials" title="Partials"><img alt="Partials" src="http://blog.jverkamp.com/2015/01/01/2015-reading-list/partials.jpg" /></a> <a href="https://www.goodreads.com/book/show/7094569-feed" title="Feed"><img alt="Feed" src="http://blog.jverkamp.com/2015/01/01/2015-reading-list/feed.jpg" /></a> <a href="https://www.goodreads.com/book/show/11487807-throne-of-the-crescent-moon" title="Throne of the Crescent Moon"><img alt="Throne of the Crescent Moon" src="http://blog.jverkamp.com/2015/01/01/2015-reading-list/throne-of-the-crescent-moon.jpg" /></a> <a href="https://www.goodreads.com/book/show/7090447-the-red-pyramid" title="The Red Pyramid"><img alt="The Red Pyramid" src="http://blog.jverkamp.com/2015/01/01/2015-reading-list/the-red-pyramid.jpg" /></a> <a href="https://www.goodreads.com/book/show/2429135.The_Girl_with_the_Dragon_Tattoo" title="The Girl with the Dragon Tattoo"><img alt="The Girl with the Dragon Tattoo" src="http://blog.jverkamp.com/2015/01/01/2015-reading-list/the-girl-with-the-dragon-tattoo.jpg" /></a> <a href="https://www.goodreads.com/book/show/910863.Spin" title="Spin"><img alt="Spin" src="http://blog.jverkamp.com/2015/01/01/2015-reading-list/spin.jpg" /></a> <a href="https://www.goodreads.com/book/show/66655.Necroscope" title="Necroscope"><img alt="Necroscope" src="http://blog.jverkamp.com/2015/01/01/2015-reading-list/necroscope.jpg" /></a></p>
]]></summary><content type="html"><![CDATA[<p>Partially to keep myself honest and partially because I think these books look neat, here is my (entirely too ambitious) current reading list for 2015:</p>
<p><a href="https://www.goodreads.com/book/show/7235533-the-way-of-kings" title="The Way of Kings"><img alt="The Way of Kings" src="http://blog.jverkamp.com/2015/01/01/2015-reading-list/the-way-of-kings.jpg" /></a> <a href="https://www.goodreads.com/book/show/7736182-the-lost-hero" title="The Lost Hero"><img alt="The Lost Hero" src="http://blog.jverkamp.com/2015/01/01/2015-reading-list/the-lost-hero.jpg" /></a> <a href="https://www.goodreads.com/book/show/12287209-wool" title="Wool"><img alt="Wool" src="http://blog.jverkamp.com/2015/01/01/2015-reading-list/wool.jpg" /></a> <a href="https://www.goodreads.com/book/show/28876.His_Majesty_s_Dragon" title="His Majesty's Dragon"><img alt="His Majesty's Dragon" src="http://blog.jverkamp.com/2015/01/01/2015-reading-list/his-majesty-s-dragon.jpg" /></a> <a href="https://www.goodreads.com/book/show/9533378-hounded" title="Hounded"><img alt="Hounded" src="http://blog.jverkamp.com/2015/01/01/2015-reading-list/hounded.jpg" /></a> <a href="https://www.goodreads.com/book/show/2355575.Cry_Wolf" title="Cry Wolf"><img alt="Cry Wolf" src="http://blog.jverkamp.com/2015/01/01/2015-reading-list/cry-wolf.jpg" /></a> <a href="https://www.goodreads.com/book/show/9640626-my-life-as-a-white-trash-zombie" title="My Life as a White Trash Zombie"><img alt="My Life as a White Trash Zombie" src="http://blog.jverkamp.com/2015/01/01/2015-reading-list/my-life-as-a-white-trash-zombie.jpg" /></a> <a href="https://www.goodreads.com/book/show/12779838-precinct-13" title="Precinct 13"><img alt="Precinct 13" src="http://blog.jverkamp.com/2015/01/01/2015-reading-list/precinct-13.jpg" /></a> <a href="https://www.goodreads.com/book/show/3220405-ender-in-exile" title="Ender in Exile"><img alt="Ender in Exile" src="http://blog.jverkamp.com/2015/01/01/2015-reading-list/ender-in-exile.jpg" /></a> <a href="https://www.goodreads.com/book/show/12953520-year-zero" title="Year Zero"><img alt="Year Zero" src="http://blog.jverkamp.com/2015/01/01/2015-reading-list/year-zero.jpg" /></a> <a href="https://www.goodreads.com/book/show/12988074-the-unnaturalists" title="The Unnaturalists"><img alt="The Unnaturalists" src="http://blog.jverkamp.com/2015/01/01/2015-reading-list/the-unnaturalists.jpg" /></a> <a href="https://www.goodreads.com/book/show/4407.American_Gods" title="American Gods"><img alt="American Gods" src="http://blog.jverkamp.com/2015/01/01/2015-reading-list/american-gods.jpg" /></a> <a href="https://www.goodreads.com/book/show/2302159.Whitechapel_Gods" title="Whitechapel Gods"><img alt="Whitechapel Gods" src="http://blog.jverkamp.com/2015/01/01/2015-reading-list/whitechapel-gods.jpg" /></a> <a href="https://www.goodreads.com/book/show/112537.Rendezvous_with_Rama" title="Rendezvous with Rama"><img alt="Rendezvous with Rama" src="http://blog.jverkamp.com/2015/01/01/2015-reading-list/rendezvous-with-rama.jpg" /></a> <a href="https://www.goodreads.com/book/show/337048.The_Engines_of_God" title="The Engines of God"><img alt="The Engines of God" src="http://blog.jverkamp.com/2015/01/01/2015-reading-list/the-engines-of-god.jpg" /></a> <a href="https://www.goodreads.com/book/show/11138.Mere_Christianity" title="Mere Christianity"><img alt="Mere Christianity" src="http://blog.jverkamp.com/2015/01/01/2015-reading-list/mere-christianity.jpg" /></a> <a href="https://www.goodreads.com/book/show/12899734-the-iron-wyrm-affair" title="The Iron Wyrm Affair"><img alt="The Iron Wyrm Affair" src="http://blog.jverkamp.com/2015/01/01/2015-reading-list/the-iron-wyrm-affair.jpg" /></a> <a href="https://www.goodreads.com/book/show/12476820-partials" title="Partials"><img alt="Partials" src="http://blog.jverkamp.com/2015/01/01/2015-reading-list/partials.jpg" /></a> <a href="https://www.goodreads.com/book/show/7094569-feed" title="Feed"><img alt="Feed" src="http://blog.jverkamp.com/2015/01/01/2015-reading-list/feed.jpg" /></a> <a href="https://www.goodreads.com/book/show/11487807-throne-of-the-crescent-moon" title="Throne of the Crescent Moon"><img alt="Throne of the Crescent Moon" src="http://blog.jverkamp.com/2015/01/01/2015-reading-list/throne-of-the-crescent-moon.jpg" /></a> <a href="https://www.goodreads.com/book/show/7090447-the-red-pyramid" title="The Red Pyramid"><img alt="The Red Pyramid" src="http://blog.jverkamp.com/2015/01/01/2015-reading-list/the-red-pyramid.jpg" /></a> <a href="https://www.goodreads.com/book/show/2429135.The_Girl_with_the_Dragon_Tattoo" title="The Girl with the Dragon Tattoo"><img alt="The Girl with the Dragon Tattoo" src="http://blog.jverkamp.com/2015/01/01/2015-reading-list/the-girl-with-the-dragon-tattoo.jpg" /></a> <a href="https://www.goodreads.com/book/show/910863.Spin" title="Spin"><img alt="Spin" src="http://blog.jverkamp.com/2015/01/01/2015-reading-list/spin.jpg" /></a> <a href="https://www.goodreads.com/book/show/66655.Necroscope" title="Necroscope"><img alt="Necroscope" src="http://blog.jverkamp.com/2015/01/01/2015-reading-list/necroscope.jpg" /></a></p>
<!--more-->
<p>It doesn't look that bad (only 24 books, that's only one every two weeks), until you realize that about 20 of those are the first in a series. And if there's one thing that I don't like doing, it's leaving a (good) book series unfinished... All told, there are actually just over a hundred books on this list (1 every 3 days...). That's a bit taller order.</p>
<p>That being said, I doubt I'll actually finish the entire list, but I'm certainly going to try. If a series is good, I'll read the entire thing. If not... well, life's short.</p>
<p>I'm also considering doing a year in book reviews rather than my normal <a href="http://blog.jverkamp.com/category/other/movie-reviews">movie reviews</a>, seeing as I'm basically not seeing any movies in theaters for the foreseeable future. We'll see.</p>]]></content></entry></feed>