<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>jverkamp.com</title><link href="http://blog.jverkamp.com" /><link rel="self" href="http://blog.jverkamp.com/feed/" /><updated>2015-04-16T00:00:00Z</updated><author><name>JP Verkamp</name></author><id>urn:uuid:f148b655-ada3-c720-0c01-ca384ab68088</id><entry><title>The First Formic War</title><link href="http://blog.jverkamp.com/2015/04/16/the-first-formic-war" /><id>urn:uuid:bb79dce0-417c-c928-d86d-d6abda1a88d1</id><updated>2015-04-16T00:00:00Z</updated><summary type="html"><![CDATA[<p><a href="https://www.goodreads.com/book/show/13151129-earth-unaware"><img src="http://blog.jverkamp.com/2015/04/16/the-first-formic-war/1-earth-unaware.jpg" /></a> <a href="https://www.goodreads.com/book/show/16059350-earth-afire"><img src="http://blog.jverkamp.com/2015/04/16/the-first-formic-war/2-earth-afire.jpg" /></a> <a href="https://www.goodreads.com/book/show/18490707-earth-awakens"><img src="http://blog.jverkamp.com/2015/04/16/the-first-formic-war/3-earth-awakens.jpg" /></a></p>
<p>Continuing on the Enderverse kick after <a href="http://blog.jverkamp.com/2015/04/06/ender-in-exile">Ender in Exile</a>, I've just finished <a href="https://www.goodreads.com/series/72732-the-first-formic-war">The First Formic War</a> trilogy, a collaboration (of sorts) between <a href="https://www.goodreads.com/author/show/55830.Aaron_Johnston">Aaron Johnston</a> and <a href="https://www.goodreads.com/author/show/589.Orson_Scott_Card">Orson Scott Card</a>. From that I think you actually get to the root of one of many of the oddities of the book: The story originated as a pair of comic books: <a href="https://www.goodreads.com/book/show/10644801-formic-wars">Burning Earth</a> and <a href="https://www.goodreads.com/book/show/13528662-formic-wars">Silent Strike</a>. I'm not sure how much of those (or the latter novels which I actually read) was written by Card and how much was co-written, but any time you get a collaboration in what was originally a single author's universe, strange things can happen.</p>
]]></summary><content type="html"><![CDATA[<p><a href="https://www.goodreads.com/book/show/13151129-earth-unaware"><img src="http://blog.jverkamp.com/2015/04/16/the-first-formic-war/1-earth-unaware.jpg" /></a> <a href="https://www.goodreads.com/book/show/16059350-earth-afire"><img src="http://blog.jverkamp.com/2015/04/16/the-first-formic-war/2-earth-afire.jpg" /></a> <a href="https://www.goodreads.com/book/show/18490707-earth-awakens"><img src="http://blog.jverkamp.com/2015/04/16/the-first-formic-war/3-earth-awakens.jpg" /></a></p>
<p>Continuing on the Enderverse kick after <a href="http://blog.jverkamp.com/2015/04/06/ender-in-exile">Ender in Exile</a>, I've just finished <a href="https://www.goodreads.com/series/72732-the-first-formic-war">The First Formic War</a> trilogy, a collaboration (of sorts) between <a href="https://www.goodreads.com/author/show/55830.Aaron_Johnston">Aaron Johnston</a> and <a href="https://www.goodreads.com/author/show/589.Orson_Scott_Card">Orson Scott Card</a>. From that I think you actually get to the root of one of many of the oddities of the book: The story originated as a pair of comic books: <a href="https://www.goodreads.com/book/show/10644801-formic-wars">Burning Earth</a> and <a href="https://www.goodreads.com/book/show/13528662-formic-wars">Silent Strike</a>. I'm not sure how much of those (or the latter novels which I actually read) was written by Card and how much was co-written, but any time you get a collaboration in what was originally a single author's universe, strange things can happen.</p>
<!--more-->
<p>The first of the issues this raises I already mentioned in my review of <a href="http://blog.jverkamp.com/2015/04/06/ender-in-exile">Ender in Exile</a>. When you write a series of books out of chronological order, it's extremely easy to contradict yourself. In this case, there was really one sticking point: gravity manipulation technology. In Ender's Game (let alone the sequels), it's made relatively clear that humanity only learned to manipulate gravity from the formics. But in the First Formic War, there are two different groups using gravity technology, one for mining (in a way that sounds an awful lot like the Little Doctor) and the other for propulsion.</p>
<p>Now, it's entirely possible to explain this away in universe as Ender just being too young or others not even knowing that this was the case--except Mazer Rackham was one of the pilots of the planes using the gravity manipulation technology. So...</p>
<p>Now that is off of my chest though, I actually greatly enjoyed the series. I like it when you have multiple completely different points of view or time in a shared universe, so that you can see how some difference play out. I also liked the aspect of the First Formic War taking place when humanity is just starting to expand out into the solar system, with a colonies on other rocks (the moon and asteroids at least) and even mining in the Kuiper Belt. It's a segment of science fiction that isn't that common, so it was nice to see it here.</p>
<p>Next, the characters. There was definiately some give and take here. I liked Victor and his family. I thought their family dynamic was interesting, even if it did edge into the 'children are far smarter than adults' trope that the Enderverse relies fairly heavily upon. One interesting contrast was a bit right at the beginning of the first book about relationships in a closely related, isolated population. It got just as preachy as Ender in Exile, but for whatever reason, I thought this time it was more deserved and done much better.</p>
<p>On the other hand, I wasn't overly thrilled with the character of Lem. I get that there are people that think that, that are so set in their world view and so sure that everyone is out to get them that they cannot see it any other way. I even get that those can make interesting characters in fiction. He just really grated on me. I wish there had been more growth and change for him.</p>
<p>Third and final, Mazer Rackham and the MOPs were interesting. There's certainly an undertone of military worship (but only 'smart' military worship) going on as many of the Enderverse books have, but I think I liked how it worked out here. What I didn't care for as much was how obvious (at least to me) many of their political maneuverings and military tactics were. Need to justify military action in China? Publicly thank a high powered general ahead of time so he cannot back down without looking a fool. Need some way to attack under the landers? Oh hey, we happen to have these drills...</p>
<p>All that said and done, it's not bad. I'm looking forward to if/when the detail the Second Formic War even more. For now though, I think I'm going to go ahead and take one final side trip (for now) and finish the <a href="https://www.goodreads.com/series/43963">Ender Quintet</a> before getting back to my list with <a href="https://www.goodreads.com/book/show/12953520-year-zero">Year Zero</a>. Onwards!</p>]]></content></entry><entry><title>A Quick Look at RC4</title><link href="http://blog.jverkamp.com/2015/04/14/a-quick-look-at-rc4" /><id>urn:uuid:7faa7241-8deb-6230-5db2-37d89e5af00c</id><updated>2015-04-14T00:00:00Z</updated><summary type="html"><![CDATA[<p>In cryptography work, <a href="https://en.wikipedia.org/wiki/RC4">RC4</a> (Rivest Cipher 4) is well known as both one of the easiest to implement and fastest to run <a href="https://en.wikipedia.org/wiki/symmetric_encryption">symmetric encryption</a> algorithms. Unfortunately, over time there have been a number of attacks on RC4, both in poorly written protocols (such as in the case of <a href="https://en.wikipedia.org/wiki/WEP">WEP</a>) or statistical attacks against the protocol itself.</p>
<p>Still, for how well it formed, it's an amazingly simple algorithm, so I decided to try my hand at implementing it.</p>
]]></summary><content type="html"><![CDATA[<p>In cryptography work, <a href="https://en.wikipedia.org/wiki/RC4">RC4</a> (Rivest Cipher 4) is well known as both one of the easiest to implement and fastest to run <a href="https://en.wikipedia.org/wiki/symmetric_encryption">symmetric encryption</a> algorithms. Unfortunately, over time there have been a number of attacks on RC4, both in poorly written protocols (such as in the case of <a href="https://en.wikipedia.org/wiki/WEP">WEP</a>) or statistical attacks against the protocol itself.</p>
<p>Still, for how well it formed, it's an amazingly simple algorithm, so I decided to try my hand at implementing it.</p>
<!--more-->
<p>Basically, RC4 is what is known as a '<a href="https://en.wikipedia.org/wiki/stream_cipher">stream cipher</a>', implying that each byte in the input message is encrypted individually (generally taking into account feedback from previous bytes). This runs counter to the perhaps more well known <a href="https://en.wikipedia.org/wiki/block_ciphers">block ciphers</a> such as DES and AES, where bytes are instead encrypted together (although feedback between blocks is still of course possible).</p>
<p>The first step of the algorithm is to take your encryption key (a password or the like) and convert it into a sequence of bytes at least as long as your input. For RC4, this is done in two pieces. First, prepare the index:</p>
<pre class="python"><code>def rc4(key, msg):
    S = list(range(256))

    j = 0
    for i in range(256):
        j = (j + S[i] + key[i % len(key)]) % 256
        S[i], S[j] = S[j], S[i]

    ...</code></pre>
<p>Or in Racket:</p>
<pre class="racket"><code>(define (rc4 key msg)
  (define (mod256 n) (modulo n 256))

  (define permutation (make-bytes 256))
  (for ([i (in-range 256)])
    (bytes-set! permutation i i))

  (define (S i)
    (bytes-ref permutation i))

  (define (swap! i j)
    (let ([pi (bytes-ref permutation i)]
          [pj (bytes-ref permutation j)])
      (bytes-set! permutation i pj)
      (bytes-set! permutation j pi)))

  ; Key-scheduling algorithm
  (for/fold ([j 0]) ([i (in-range 256)])
    (let ([j (mod256 (+ j
                        (S i)
                        (bytes-ref key (modulo i (bytes-length key)))))])
      (swap! i j)
      j))

  ...)</code></pre>
<p>I made the Racket version a little more verbose with helper functions, since I know I'll both be indexing the permutation and swapping values again in the next step. That's one of the reasons that I'll sometimes go for Python over Racket in on off scripts.</p>
<p>Still, relatively simple in both cases.</p>
<p>The next step is to turn that into a stream, essentially creating an infinite number generator. Luckily, both Python and Racket have generators, which are perfectly suited for this sort of thing (assuming in both cases that <code>S</code> / <code>permutation</code> are in scope from above):</p>
<pre class="python"><code>def rc4(key, msg):
    ...

    def prga():
        i = j = 0
        while True:
            i = (i + 1) % 256
            j = (j + S[i]) % 256
            S[i], S[j] = S[j], S[i]
            yield S[(S[i] + S[j]) % 256]

    return prga # DEBUG</code></pre>
<pre class="racket"><code>(define (rc4 key msg)
  ...

  ; Pseudo-random generation algorithm
  (define prga
    (generator ()
      (let loop ([i 1] [j (S 1)])
        (swap! i j)
        (yield (S (mod256 (+ (S i) (S j)))))
        (loop (mod256 (+ i 1)) (mod256 (+ j (S (+ i 1))))))))

  prng) ; DEBUG</code></pre>
<p>Now that we have a stream, we can generate a few bytes and take a look if we wanted:</p>
<pre class="python"><code>&gt;&gt;&gt; import binascii, itertools
&gt;&gt;&gt; prga = rc4(b'Secret', b'Attack at dawn')
&gt;&gt;&gt; print(binascii.hexlify(bytes(itertools.islice(prga(), 10))))
b'04d46b053ca87b594172'</code></pre>
<pre class="racket"><code>(define (bytes-&gt;hex b*)
  (apply ~a (for/list ([b (in-bytes b*)])
        (~a (number-&gt;string (quotient b 16) 16)
            (number-&gt;string (modulo b 16) 16)))))

&gt; (define prga (rc4 "Secret" "Attack at dawn"))
&gt; (bytes-&gt;hex (apply bytes (for/list ([i (in-range 10)] [b (in-producer prga)]) b)))
"04d46b053ca87b594172"</code></pre>
<p>Both of them the same? Good sign. Both matching the example on the Wikipedia page? Even better!</p>
<p>So, we have an infinite stream of bytes. What next?</p>
<p>Well, this is actually the crazy part: You just <a href="https://en.wikipedia.org/wiki/xor">xor</a> them.</p>
<pre class="python"><code>def rc4(key, msg):
    ...

    return bytes(msgbyte ^ keybyte for msgbyte, keybyte in zip(msg, prga()))</code></pre>
<pre class="racket"><code>(define (rc4 key msg)
  ...

  ; Encryption
  (apply bytes
    (for/list ([input-byte (in-bytes msg)] [key-byte (in-producer prga)])
      (bitwise-xor input-byte key-byte))))</code></pre>
<p>And now we can encrypt!</p>
<pre class="python"><code>&gt;&gt;&gt; print(binascii.hexlify(rc4(b'Secret', b'Attack at dawn')))
b'45a01f645fc35b383552544b9bf5'</code></pre>
<pre class="racket"><code>&gt; (bytes-&gt;hex (rc4 "Secret" "Attack at dawn"))
"45a01f645fc35b383552544b9bf5"</code></pre>
<p>And decrypt!</p>
<pre class="python"><code>&gt;&gt;&gt; rc4(b'Secret', rc4(b'Secret', b'Attack at dawn'))
b'Attack at dawn'</code></pre>
<pre class="racket"><code>&gt; (rc4 "Secret" (rc4 "Secret" "Attack at dawn"))
#"Attack at dawn"</code></pre>
<p>Very cool. I'm really starting to see the appeal of RC4. A couple dozen lines of Python/Racket and you're encrypting. Bam. As mentioned, it's not really an algorithm you should use in encryption any more (the author has released a slightly more complicated algorithm called Spritz that works very similarly).</p>
<p>And that's it. If you'd like to see the entire code in one place (along with some fiddling in both cases to deal with Unicode keys/messages as well as pure bytes), it's on GitHub: <a href="https://github.com/jpverkamp/small-projects/blob/master/blog/rc4.py">rc4.py</a>, <a href="https://github.com/jpverkamp/small-projects/blob/master/blog/rc4.rkt">rc4.rkt</a>.</p>
<p><code>7b82 c5cf 12c4 e168 8a4a 5cbe 9300</code></p>
<p><img alt="smile" class="emoji" src="/emoji/smile.svg" /></p>]]></content></entry><entry><title>Generating perfect portmanteaus</title><link href="http://blog.jverkamp.com/2015/04/07/generating-perfect-portmanteaus" /><id>urn:uuid:0b6a158d-e441-c880-5fcf-4d4a1394e61d</id><updated>2015-04-07T00:00:00Z</updated><summary type="html"><![CDATA[<p>A quick programming post, since it's been a while, inspired by this video:</p>
<p><iframe width="560" height="315" src="//www.youtube.com/embed/QVn2PZGZxaI" frameborder="0" allowfullscreen="allowfullscreen"></iframe></p>
<p>I'm not going to go quite as far as that, but I thought it would be interesting to write up some quick code to generate portmanteaus<span class="footnote"><sup><a href="#footnote-1">[1]</a></sup></span>.</p>
]]></summary><content type="html"><![CDATA[<p>A quick programming post, since it's been a while, inspired by this video:</p>
<p><iframe width="560" height="315" src="//www.youtube.com/embed/QVn2PZGZxaI" frameborder="0" allowfullscreen="allowfullscreen"></iframe></p>
<p>I'm not going to go quite as far as that, but I thought it would be interesting to write up some quick code to generate portmanteaus<span class="footnote"><sup><a href="#footnote-1">[1]</a></sup></span>.</p>
<!--more-->
<p>Basically<span class="footnote"><sup><a href="#footnote-2">[2]</a></sup></span>, a portmanteau is a combination of two words, smooshing them together<span class="footnote"><sup><a href="#footnote-3">[3]</a></sup></span> and dropping some letters from each. In this case, what I'm specifically interested in is 'perfect' portmanteaus (I'm not sure if there is a better term for it), where the suffix of one word exactly matches the prefix of the other.</p>
<p>As an example, consider the words <code>hamster</code> and <code>termine</code>. The last three letters of the former, perfectly matches the first three of the latter, so let's overlap them. <code>hamstermite</code>. Bam.</p>
<p>So how do we do it?</p>
<pre class="racket"><code>(define current-minimum-overlap (make-parameter 3))

(define (portmanteau left right)
  (define maximum-overlap (- (min (string-length left) (string-length right)) 1))

  (for*/first ([overlap (in-range maximum-overlap (- (current-minimum-overlap) 1) -1)]
               #:when (equal? (substring left (- (string-length left) overlap))
                              (substring right 0 overlap)))
    (list left
          right
          (string-append
           (substring left 0 (- (string-length left) overlap))
           right))))</code></pre>
<p>Should be straight forward enough. Basically, we start with the longest possible overlap (1 less than the length of the shorter word, since we don't want to completely subsume a word), counting down until we reach some minimum overlap. For each possible sequence, we compare the prefix and suffix of the two words, only proceeding into the body of the loop when they match. That's the beauty of <code><a href="http://docs.racket-lang.org/search/index.html?q=for*/first">for*/first</a></code>, it will loop until it gets a valid value, returning when it does.</p>
<p>And that's really it. Try it out with the example from earlier:</p>
<pre class="racket"><code>&gt; (portmanteau "hamster" "termite")
'("hamster" "termite" "hamstermite")</code></pre>
<p>Since that was so quick, let's put some simple wrapper code around it in order to find all portmanteaus from a given word list. First, do the heavy lifting of finding portmanteaus:</p>
<pre class="racket"><code>(define (portmanteaus)
  (define words
    (for*/list ([raw-line (in-lines)]
                [line (in-value (string-trim (string-downcase raw-line)))]
                #:when (not (equal? "" line)))
      line))

  (for*/list ([left (in-list words)]
              [right (in-list words)]
              #:when (not (eq? left right))
              [portmanteau (in-value (portmanteau left right))]
              #:when portmanteau)
    portmanteau))</code></pre>
<p><code><a href="http://docs.racket-lang.org/search/index.html?q=in-value">in-value</a></code> is useful in <code><a href="http://docs.racket-lang.org/search/index.html?q=for*">for*</a></code> since it lets you bind a single value for future <code>#:when</code> blocks without having to recalculate anything.</p>
<p>After that, a wrapper to process some command line parameters and render output in a few different ways:</p>
<pre class="racket"><code>(define paths
  (command-line
   #:program "portmanteau"
   #:once-each
   [("--minimum-overlap")
    overlap
    "Specify the minimum necessary overlap (default = 3)"
    (cond
      [(string-&gt;number overlap) =&gt; current-minimum-overlap]
      [else (error '--minimum-overlap "must specify a number")])]
   #:once-any
   [("--verbose")
    "Print in verbose mode (default = false)"
    (verbose-mode #t)]
   [("--graph")
    "Print out a dotfile"
    (graph-mode #t)]
   #:args paths

   paths))

(when (null? paths)
  (set! paths '("-")))

(for ([path (in-list paths)])
  (define results
    (cond
      [(equal? path "-")
       (portmanteaus)]
      [else
       (with-input-from-file path portmanteaus)]))

  (define g (unweighted-graph/directed '()))

  (for ([result (in-list results)])
    (match-define (list left right portmanteau) result)
    (cond
      [(verbose-mode)
       (printf "~a + ~a = ~a\n" left right portmanteau)]
      [(graph-mode)
       (add-edge! g (~a "\"" left "\"") (~a "\"" right "\""))]
      [else
       (displayln portmanteau)]))

  (when (graph-mode)
    (displayln (graphviz g))))</code></pre>
<p>Now you can do some interesting things:</p>
<pre class="bash"><code>$ racket portmanteau.rkt animals.txt

brown recluse spider monkey
gila monstermite
grasshopperegrine falcon
hamstermite
leechidna
ottermite</code></pre>
<p>Just in case you cannot figure out what animals actually went into that list:</p>
<pre class="bash"><code>$ racket portmanteau.rkt --verbose animals.txt

brown recluse spider + spider monkey = brown recluse spider monkey
gila monster + termite = gila monstermite
grasshopper + peregrine falcon = grasshopperegrine falcon
hamster + termite = hamstermite
leech + echidna = leechidna
otter + termite = ottermite</code></pre>
<p>Or if you want to be a little more general, matching with only 2 characters rather than the default 3:</p>
<pre class="bash"><code>$ racket portmanteau.rkt --minimum-overlap 2 --verbose animals.txt

armadillo + loon = armadilloon
armadillo + lorikeet = armadillorikeet
armadillo + louse = armadillouse
black mamba + badger = black mambadger
brown bear + armadillo = brown bearmadillo
brown recluse spider + spider monkey = brown recluse spider monkey
chinchilaa + aardvark = chinchilaardvark
copperhead snake + kestrel = copperhead snakestrel
coyote + termite = coyotermite
crow + owl = crowl
eagle + leech = eagleech
eagle + leopard seal = eagleopard seal
echidna + narwhal = echidnarwhal
gecko + koala = geckoala
gila monster + termite = gila monstermite
grasshopper + peregrine falcon = grasshopperegrine falcon
hamster + termite = hamstermite
hyena + narwhal = hyenarwhal
jackal + albatross = jackalbatross
king cobra + rattlesnake = king cobrattlesnake
king cobra + raven = king cobraven
kingsnake + kestrel = kingsnakestrel
kiwi + wild boar = kiwild boar
leech + chinchilaa = leechinchilaa
leech + echidna = leechidna
leopard seal + albatross = leopard sealbatross
narwhal + albatross = narwhalbatross
ostrich + chinchilaa = ostrichinchilaa
otter + termite = ottermite
polar bear + armadillo = polar bearmadillo
rattlesnake + kestrel = rattlesnakestrel
sloth bear + armadillo = sloth bearmadillo
snapping turtle + leech = snapping turtleech
snapping turtle + leopard seal = snapping turtleopard seal
sparrow + owl = sparrowl
sperm whale + leech = sperm whaleech
sperm whale + leopard seal = sperm whaleopard seal
sponge + gecko = spongecko
swan + anaconda = swanaconda
wild boar + armadillo = wild boarmadillo</code></pre>
<p>Heh. Narwhalbatross. Wild boarmadillo. <img alt="smile" class="emoji" src="/emoji/smile.svg" /></p>
<p>And as a final bonus, using the <a href="https://github.com/stchang/graph/tree/master">graph</a> library I've used (and contributed to) before, we can render the structure of the thing):</p>
<pre class="bash"><code>$ racket portmanteau.rkt --graph --minimum-overlap 2 animals.txt \
    | sed "s/edge \[dir=none\];//g" \
    | fdp -Tpng &gt; animals.png \
    && open animals.png</code></pre>
<p><a href="http://blog.jverkamp.com/2015/04/07/generating-perfect-portmanteaus/animals.png" data-toggle="lightbox"><img src="http://blog.jverkamp.com/2015/04/07/generating-perfect-portmanteaus/animals.png" /></a></p>
<p>Fun. :)</p>
<p>Think of the arrows as going from the stuck on word to where it's sticking rather than in the order the words would be written. It's easy enough to change though if you'd like, just swap the arguments in the <code>add-edge!</code> call above.</p>
<p>And... that's it. Not much more to do with this one, unless I want to duplicate the above video and portmanteau all the things! We'll see.</p>
<p>As with all my code, you can see the entire thing on GitHub: <a href="https://github.com/jpverkamp/small-projects/blob/master/blog/portmanteau.rkt">portmanteau.rkt</a></p>]]></content></entry><entry><title>Ender in Exile</title><link href="http://blog.jverkamp.com/2015/04/06/ender-in-exile" /><id>urn:uuid:de289b67-a5f5-b9c9-05a4-58e38a793379</id><updated>2015-04-06T00:00:00Z</updated><summary type="html"><![CDATA[<p><a href="https://www.goodreads.com/book/show/375802.Ender_s_Game"><img src="http://blog.jverkamp.com/2015/04/06/ender-in-exile/1-enders-game.jpg" /></a> <a href="https://www.goodreads.com/book/show/552987.A_War_of_Gifts"><img src="http://blog.jverkamp.com/2015/04/06/ender-in-exile/1.5-a-war-of-gifts.jpg" /></a> <a href="https://www.goodreads.com/book/show/3220405-ender-in-exile"><img src="http://blog.jverkamp.com/2015/04/06/ender-in-exile/2-ender-in-exile.jpg" /></a></p>
<p><a href="https://www.goodreads.com/author/show/589.Orson_Scott_Card">Orson Scott Card's</a> <a href="https://www.goodreads.com/book/show/375802.Ender_s_Game">Ender's Game</a> has long been among my favorite science fiction novels<span class="footnote"><sup><a href="#footnote-1">[1]</a></sup></span>, ever since I first read it years ago. I've always found it interesting how, given the two branches of sequels to Ender's Game, most people prefer one or the other, either <a href="https://www.goodreads.com/series/43963-the-ender-quintet">Ender's Quintet</a> or <a href="https://www.goodreads.com/series/40409-ender-s-shadow">Ender's Shadow</a>. Personally, I tend towards the former, perhaps because I read it first, perhaps because it's more science fictiony and philosophical rather than militaristic and political.</p>
<p>So when I recently realized that between when I last read <a href="https://www.goodreads.com/book/show/7967.Speaker_for_the_Dead">Speaker for the Dead</a> et al, a new book had been released: <a href="https://www.goodreads.com/book/show/3220405-ender-in-exile">Ender in Exile</a>, taking place between Ender's Game and Speaker for the Dead. So of course I had to read it.</p>
]]></summary><content type="html"><![CDATA[<p><a href="https://www.goodreads.com/book/show/375802.Ender_s_Game"><img src="http://blog.jverkamp.com/2015/04/06/ender-in-exile/1-enders-game.jpg" /></a> <a href="https://www.goodreads.com/book/show/552987.A_War_of_Gifts"><img src="http://blog.jverkamp.com/2015/04/06/ender-in-exile/1.5-a-war-of-gifts.jpg" /></a> <a href="https://www.goodreads.com/book/show/3220405-ender-in-exile"><img src="http://blog.jverkamp.com/2015/04/06/ender-in-exile/2-ender-in-exile.jpg" /></a></p>
<p><a href="https://www.goodreads.com/author/show/589.Orson_Scott_Card">Orson Scott Card's</a> <a href="https://www.goodreads.com/book/show/375802.Ender_s_Game">Ender's Game</a> has long been among my favorite science fiction novels<span class="footnote"><sup><a href="#footnote-1">[1]</a></sup></span>, ever since I first read it years ago. I've always found it interesting how, given the two branches of sequels to Ender's Game, most people prefer one or the other, either <a href="https://www.goodreads.com/series/43963-the-ender-quintet">Ender's Quintet</a> or <a href="https://www.goodreads.com/series/40409-ender-s-shadow">Ender's Shadow</a>. Personally, I tend towards the former, perhaps because I read it first, perhaps because it's more science fictiony and philosophical rather than militaristic and political.</p>
<p>So when I recently realized that between when I last read <a href="https://www.goodreads.com/book/show/7967.Speaker_for_the_Dead">Speaker for the Dead</a> et al, a new book had been released: <a href="https://www.goodreads.com/book/show/3220405-ender-in-exile">Ender in Exile</a>, taking place between Ender's Game and Speaker for the Dead. So of course I had to read it.</p>
<!--more-->
<p>If you're familiar with the other novels in the Ender Quintet, Ender in Exile takes place between the end of the war in Ender's Game and the events some 3000 years later in Speaker for the Dead. It details the first world (and to some extent, the second) that Ender visits, overlapping with and somewhat replacing the final chapter of Ender's Game.</p>
<p>All together, it's a solid enough book. I enjoy--as I always have--the character of Ender, although he remains from time to time too perfect. I enjoy reading about some of the other characters in this world as well, especially the captain (he's a jerk, but a well characterized one) and the family from Italy. I still don't quite get Valentine, but she's not so odd</p>
<p>One thing that felt completely different about this book was how it edged on preachy at times. Long swathes of the book were dedicated to ideas from evolutionary psychology espousing monogamy, even in cases where there is a severe gender imbalance (as is the case with the initial soldiers turned colonists). It wasn't quite enough enough to kick me entirely out of the story, but it's something to keep in mind.</p>
<p>Another oddity is a problem that always comes up with prequels. Strictly speaking, Ender in Exile isn't supposed to be a prequel, but since it was written after books 3-5 of the Ender Quintent (and I read it after as well), there is a certain amount of knowing what will happen throughout the book that takes away a certain something. Add to that the chunk in the center of the book originally published (and I originally read) as the short story Gold Bug<span class="footnote"><sup><a href="#footnote-2">[2]</a></sup></span>, and it feels just a bit messy.</p>
<p>As an aside, I had not previously read the novella <a href="https://www.goodreads.com/book/show/552987.A_War_of_Gifts">A War of Gifts</a>, set during Ender's time at Battle School, so I took a chance to do so now. On the upside, it's a really interesting look both at how a dedicated pacifist would fare at Battle School (although if a six year old could remain so dedicated) and one of the few times in the time at Battle School that the children actually feel like children. It usually doesn't bother me, but it's nice to have at least this little nod. On the downside, I see no reason why Ender had to save the day yet again. It's a big school. Is there really no one anywhere nearly as good at reading people and understanding them as Ender is?</p>
<p>All together, I enjoyed both rereading Ender's Game and reading the new (for me) Ender in Exile. It's almost enough to get me to reread the rest of The Ender Quintet. We'll see. Instead though, I'm actually going to inject an aside to my <a href="http://blog.jverkamp.com/2015/01/01/2015-reading-list">2015 Reading List</a> and stay in the Enderverse a little while longer at least with the <a href="https://www.goodreads.com/series/72732-the-first-formic-war">First Formic War</a> trilogy. After that? Who knows!</p>]]></content></entry><entry><title>Performance problems with Flask and Docker</title><link href="http://blog.jverkamp.com/2015/04/03/performance-problems-with-flask-and-docker" /><id>urn:uuid:8d7d8e5b-effe-34a6-b190-d0068d5879a0</id><updated>2015-04-03T00:00:00Z</updated><summary type="html"><![CDATA[<p>I had an interesting problem recently on a project I was working on. It's a simple <a href="http://flask.pocoo.org/">Flask</a>-based webapp, designed to be deployed to <a href="https://aws.amazon.com/">AWS</a> using <a href="https://www.docker.com/">Docker</a>. The application worked just fine when I was running it locally, but as soon as I pushed the docker container...</p>
<p>Latency spikes. Bad enough that the application was failing AWS's healthy host checks, cycling in and out of existence<span class="footnote"><sup><a href="#footnote-1">[1]</a></sup></span>:</p>
<p><a href="http://blog.jverkamp.com/2015/04/03/performance-problems-with-flask-and-docker/health-check.png" data-toggle="lightbox"><img src="http://blog.jverkamp.com/2015/04/03/performance-problems-with-flask-and-docker/health-check.png" /></a></p>
]]></summary><content type="html"><![CDATA[<p>I had an interesting problem recently on a project I was working on. It's a simple <a href="http://flask.pocoo.org/">Flask</a>-based webapp, designed to be deployed to <a href="https://aws.amazon.com/">AWS</a> using <a href="https://www.docker.com/">Docker</a>. The application worked just fine when I was running it locally, but as soon as I pushed the docker container...</p>
<p>Latency spikes. Bad enough that the application was failing AWS's healthy host checks, cycling in and out of existence<span class="footnote"><sup><a href="#footnote-1">[1]</a></sup></span>:</p>
<p><a href="http://blog.jverkamp.com/2015/04/03/performance-problems-with-flask-and-docker/health-check.png" data-toggle="lightbox"><img src="http://blog.jverkamp.com/2015/04/03/performance-problems-with-flask-and-docker/health-check.png" /></a></p>
<!--more-->
<p>At that time, the only traffic to the container was the health checks, every 30 seconds, as regular as clockwork. So it wasn't load that was making them fail. And it was exactly the same code each time<span class="footnote"><sup><a href="#footnote-2">[2]</a></sup></span><span class="footnote"><sup><a href="#footnote-3">[3]</a></sup></span>:</p>
<pre class="python"><code>@app.route('/', methods = ['GET'])
def healthcheck():
    return "I'm a teapot"</code></pre>
<p>So not that either. So what in the world was going on?</p>
<p>Google to the rescue! <code><a href="https://www.google.com/search?q=flask application periodically slow">flask application periodically slow</a></code></p>
<p>The very first link is a response on StackOverflow:</p>
<blockquote>
    On operating systems that support ipv6 and have it configured such as modern Linux systems, OS X 10.4 or higher as well as Windows Vista some browsers can be painfully slow if accessing your local server. The reason for this is that sometimes “localhost” is configured to be available on both ipv4 and ipv6 socktes and some browsers will try to access ipv6 first and then ivp4. -- <a href="http://stackoverflow.com/questions/11150343/slow-requests-on-local-flask-server">Slow Requests on Local Flask Server</a>
</blockquote>
<p>Huh. Get a shell into my docker container, and what do you know:</p>
<pre class="bash"><code>$ cat /etc/hosts
172.17.1.112	27392a3e0fa5
127.0.0.1	localhost
::1	localhost ip6-localhost ip6-loopback
fe00::0	ip6-localnet
ff00::0	ip6-mcastprefix
ff02::1	ip6-allnodes
ff02::2	ip6-allrouters</code></pre>
<p>Yup. <code>localhost</code> routes to both IPv4's <code>127.0.0.1</code> and IPv6's <code>::1</code>. Comment out the <code>::1</code> line and give it a shot... Yup. That did it. Waited ten minutes and the hosts weren't marked unhealthy once. All I should need to do is add it to the <code>Dockerfile</code> and we should be golden, yes?</p>
<pre class="text"><code>$ vi Dockerfile
...
RUN sed -i "s/::1.*//g"
...

$ docker build .
...
Step 9 : RUN sed -i "s/::1.*//g" /etc/hosts
 ---&gt; Running in 7c73dc473507
sed: cannot rename /etc/sedXZv0Yy: Device or resource busy</code></pre>
<p>What.</p>
<pre class="text"><code>$ vi Dockerfile
...
RUN sed "s/::1.*//g" /etc/hosts &gt; /etc/hosts-new && mv /etc/hosts-new /etc/hosts
...

$ docker build .
...
RUN sed "s/::1.*//g" /etc/hosts &gt; /etc/hosts-new && mv /etc/hosts-new /etc/hosts
 ---&gt; Running in d6b896f4fc9e
sed: cannot rename /etc/sedqYrfxO: Device or resource busy</code></pre>
<p>Double what.</p>
<p>Back to Google: <code><a href="https://www.google.com/search?q=docker edit hosts">docker edit hosts</a></code></p>
<p>Specifically: <a href="https://github.com/docker/docker/issues/1951">Unable to modify /etc/hosts file in a container #1951</a>. Looks like there was a fix that would let you edit <code>/etc/hosts</code> if you were in a container (that used to not be possible), but (because it's actually mounted rather than just a container file), it's non-trivial to edit it as part of a build.</p>
<p>All righty then.</p>
<p>That's about when I decided to listen to the Flask documentation:</p>
<blockquote>You can use the builtin server during development, but you should use a full deployment option for production applications. (Do not use the builtin development server in production.)</blockquote>
<p>All right. Not only is it what I'm actually supposed to be doing, but if I used CGI, I can avoid Flask trying to resolve <code>localhost</code> at all. I've worked with <a href="http://wiki.nginx.org/Main">nginx</a> before. Let's use that.</p>
<p>Picking some documentation from a hat, I decided to use <a href="https://uwsgi-docs.readthedocs.org/en/latest/">uWSGI</a> as the glue between nginx and Flask. Easy enough to install with pip (although I had to grab a C compiler from the apt package <code>build-essential</code>) and off we go.</p>
<p>First, a small <code>nginx</code> config:</p>
<pre class="nginx"><code>location / { try_files $uri @project; }
location @project {
    include uwsgi_params;
    uwsgi_pass unix:/tmp/uwsgi.sock;
}</code></pre>
<p>Then, to start it all up, a change to the <code>Dockerfile</code> <code>CMD</code>:</p>
<pre class="bash"><code>CMD uwsgi -s /tmp/uwsgi.sock -w project:app --chown-socket=www-data:www-data --enable-threads & \
    nginx -g 'daemon off;'</code></pre>
<p>That <code>--chown-socket</code> flag really drove me a bit batty. Basically, <code>uwsgi</code> was starting as the <code>root</code> user (within the Docker container). <code>nginx</code> was starting as <code>root</code>. But the <code>nginx</code> threads were not. They were starting as <code>www-data</code> and thus couldn't read the Unix socket between the two.</p>
<p>All righty then.</p>
<p>Let's go!</p>
<p>Starting successfully... And it's running. Not on the first try or even the 10th (I left out quite a bit of fumbling around tweaking flags), but eventually as was well in the world.</p>
<p>Push it out to AWS...</p>
<p>Health check passed.</p>
<p>Bam.</p>
<p>Awesome.</p>
<p>Now I not only have a neat little webapp, I have one that doesn't randomly decide to take forever on every other request or so.</p>
<p>If you're looking for the bare minimum <code>requirements.txt</code> and <code>Dockerfile</code> that I'm using (in addition to that <code>nginx</code> host configuration file above), here they are:</p>
<p><code>requirements.txt</code></p>
<pre class="text"><code>flask
flup6
uwsgi</code></pre>
<p><code>Dockerfile</code>:</p>
<pre class="text"><code>FROM ubuntu:14.04

RUN apt-get update && apt-get install -y build-essential nginx python3.4 python3.4-dev
RUN easy_install3 pip

WORKDIR /project

ADD requirements.txt /project/requirements.txt
RUN pip install -r requirements.txt

ADD . /project

ADD nginx /etc/nginx

CMD uwsgi -s /tmp/uwsgi.sock -w project:app --chown-socket=www-data:www-data --enable-threads & \
    nginx -g 'daemon off;'</code></pre>
<p>It's for moments like these that I do software. That little moment when everything comes together just right and it all just ... works.</p>]]></content></entry><entry><title>Parsing AWS instance data with jq</title><link href="http://blog.jverkamp.com/2015/04/01/parsing-aws-instance-data-with-jq" /><id>urn:uuid:db7917d7-1267-4fde-d9a4-c2d153f23979</id><updated>2015-04-01T00:00:00Z</updated><summary type="html"><![CDATA[<p>Semi-random amusing code snippet of the day:</p>
<pre class="bash"><code>aws ec2 describe-instances | jq &lt;&lt; EOF
    .[][].Instances[]
    | select(.Tags[]?.Value == "production")
    | .PrivateIpAddress
EOF</code></pre>
]]></summary><content type="html"><![CDATA[<p>Semi-random amusing code snippet of the day:</p>
<pre class="bash"><code>aws ec2 describe-instances | jq &lt;&lt; EOF
    .[][].Instances[]
    | select(.Tags[]?.Value == "production")
    | .PrivateIpAddress
EOF</code></pre>
<!--more-->
<p>Basically, it's combining the <a href="https://aws.amazon.com/cli/">AWS command line tools</a> and the excellent <a href="https://stedolan.github.io/jq/"><code>jq</code></a> tool for parsing JSON to extract a field from all instances with a particular tag on your AWS account (whatever account you have configured in your <code>~/.aws/</code> directory).</p>
<p>To describe it a little bit more, the data is structured as a list of <code>Instance</code> objects. The first line of the <code>jq</code> query loops over each instance object.</p>
<p>Next, each of those has zero or more <code>Tags</code> (the <code>[]?</code> is to not fail if the tag object is empty), with <code>Key</code> and <code>Value</code> entries. <code>select</code> is a new feature I hadn't seen before which will pass along an object if the condition holds. These are essentially equivalent:</p>
<pre class="text"><code> select(condition) </code></pre>
<pre class="text"><code> if condition then . else empty end </code></pre>
<p>After that, we extract a given field. In this particular case, I wanted IP addresses, but there are a bunch of other fields you can access. Here are a few other interesting ones:</p>
<ul>
    <li>AmiLaunchIndex</li>
    <li>Architecture</li>
    <li>ImageId</li>
    <li>InstanceId</li>
    <li>InstanceType</li>
    <li>LaunchTime</li>
    <li>PrivateDnsName</li>
    <li>PrivateIpAddress</li>
    <li>PublicDnsName</li>
    <li>PublicIpAddress</li>
    <li>SecurityGroups</li>
    <li>State</li>
    <li>SubnetId</li>
    <li>Tags</li>
</ul>
<p>The beauty of doing this directly in the shell is that you can then chain it to something else. For example, what if I wanted to log into every production server in turn and ask how much free disk space they have:</p>
<pre class="bash"><code>for IP in aws ec2 describe-instances | jq &lt;&lt; EOF
    .[][].Instances[]
    | select(.Tags[]?.Value == "production")
    | .PrivateIpAddress
EOF
do
    echo $IP
    ssh $IP du -h
    echo
done</code></pre>
<p>I'm really starting to admire the 'Do One Thing and Do It Well' philosophy of Unix and chaining things together.</p>]]></content></entry><entry><title>Precinct 13</title><link href="http://blog.jverkamp.com/2015/03/31/precinct-13" /><id>urn:uuid:1a16133b-f599-b842-82bc-c629ff57c19b</id><updated>2015-03-31T00:00:00Z</updated><summary type="html"><![CDATA[<p><a href="https://www.goodreads.com/book/show/12779838-precinct-13"><img src="http://blog.jverkamp.com/2015/03/31/precinct-13/precinct-13.jpg" /></a></p>
<p>Onward and upward on my <a href="http://blog.jverkamp.com/2015/01/01/2015-reading-list">2015 Reading List</a> with #7: <a href="https://www.goodreads.com/book/show/12779838-precinct-13">Precinct 13</a> by <a href="https://www.goodreads.com/author/show/379444.Tate_Hallaway">Tate Hallaway</a>. It's a little amusing to be reading this back to back with <a href="http://blog.jverkamp.com/2015/03/27/white-trash-zombie">White Trash Zombie</a>, given that in both cases the main character works in a morgue.</p>
]]></summary><content type="html"><![CDATA[<p><a href="https://www.goodreads.com/book/show/12779838-precinct-13"><img src="http://blog.jverkamp.com/2015/03/31/precinct-13/precinct-13.jpg" /></a></p>
<p>Onward and upward on my <a href="http://blog.jverkamp.com/2015/01/01/2015-reading-list">2015 Reading List</a> with #7: <a href="https://www.goodreads.com/book/show/12779838-precinct-13">Precinct 13</a> by <a href="https://www.goodreads.com/author/show/379444.Tate_Hallaway">Tate Hallaway</a>. It's a little amusing to be reading this back to back with <a href="http://blog.jverkamp.com/2015/03/27/white-trash-zombie">White Trash Zombie</a>, given that in both cases the main character works in a morgue.</p>
<!--more-->
<p>That being said, I think that unfortunately Precinct 13 was a somewhat weaker book. In particular, it had a pair of problems: a <a href="http://tvtropes.org/pmwiki/pmwiki.php/Main/FantasyKitchenSink">fantasy kitchen sink</a> and <a href="http://tvtropes.org/pmwiki/pmwiki.php/Main/ChosenOne">chosen one</a> syndrome. Both have the possibility--as do all tropes--of being done well, but in this case I wasn't particularly thrilled with it.</p>
<p>So far as the kitchen sink, I feel like to do it right, you have to either introduce new beasties slowly (that's one thing I liked about both the Dresden Files and <a href="http://blog.jverkamp.com/2015/02/20/the-iron-druid-chronicles">The Iron Druid Chronicles</a>) or just hint about the bigger world. Instead, we're hit pretty immediately over the head with witches and vampire-werewolves and fairies and golems.</p>
<p>Other than that, I don't really like 'chosen one' stories. I think this is less of a general issue and more one that bugs me in particularly. Specifically, I'm not a fan of stories where the main character is unique, with powers (especially unexplainable) unique that no one else has.</p>
<p>That being said, I thought two parts of the world building were neat: the aforementioned <a href="https://en.wikipedia.org/wiki/golem">golem</a> and parts of the magic system. Related to the golem, I don't often see Jewish influences in urban fantasy, so that was neat. I would like to see a little bit more of that. Also, the magic was neat--especially the magical tattoo early in the book and curses literally based on cursing.</p>
<p>Another idea that was interesting was the division between natural and unnatural magic. Basically, you can either use the natural ebb and flow of magic or you can force it to do your bidding. It's an interesting way to bring some prejudice into your story--which Hallaway does--although I think she could have done more with it.</p>
<p>All together, I thought it was a good enough story. I'm a little burned out on urban fantasy at the moment (I'm glad <a href="https://www.goodreads.com/book/show/3220405-ender-in-exile?from_search=true">Ender in Exile</a> is up next) and I'm not sure I liked Precinct 13 enough to continue with the series when the inevitable sequel comes about, but you could do worse.</p>]]></content></entry><entry><title>White Trash Zombie</title><link href="http://blog.jverkamp.com/2015/03/27/white-trash-zombie" /><id>urn:uuid:3985c60a-19e9-91ae-1029-68cb85330059</id><updated>2015-03-27T00:00:00Z</updated><summary type="html"><![CDATA[<p><a href="https://www.goodreads.com/book/show/9640626-my-life-as-a-white-trash-zombie"><img src="http://blog.jverkamp.com/2015/03/27/white-trash-zombie/1-i-was-a-white-trash-zombie.jpg" /></a> <a href="https://www.goodreads.com/book/show/12766833-even-white-trash-zombies-get-the-blues"><img src="http://blog.jverkamp.com/2015/03/27/white-trash-zombie/2-even-white-trash-zombies-get-the-blues.jpg" /></a> <a href="https://www.goodreads.com/book/show/15738579-white-trash-zombie-apocalypse"><img src="http://blog.jverkamp.com/2015/03/27/white-trash-zombie/3-white-trash-zombie-apocalypse.jpg" /></a> <a href="https://www.goodreads.com/book/show/19486406-how-the-white-trash-zombie-got-her-groove-back"><img src="http://blog.jverkamp.com/2015/03/27/white-trash-zombie/4-how-the-white-trash-zombie-got-her-groove-back.jpg" /></a></p>
<p>Series number six on my <a href="http://blog.jverkamp.com/2015/01/01/2015-reading-list">2015 Reading List</a>: <a href="https://www.goodreads.com/series/show/54966-white-trash-zombie">White Trash Zombie</a> by <a href="https://www.goodreads.com/author/show/852078.Diana_Rowland">Diana Rowland</a>.</p>
<p>Continuing on my recent trend, here is the third urban fantasy novel series in a row. After <a href="http://blog.jverkamp.com/2015/02/20/the-iron-druid-chronicles">The Iron Druid Chronicles</a> and <a href="http://blog.jverkamp.com/2015/03/13/alpha-and-omega">Alpha and Omega</a>, it's actually a breath of fresh air to see a series that doesn't take the everything-is-real approach and make a world where only one thing is different: zombies.</p>
]]></summary><content type="html"><![CDATA[<p><a href="https://www.goodreads.com/book/show/9640626-my-life-as-a-white-trash-zombie"><img src="http://blog.jverkamp.com/2015/03/27/white-trash-zombie/1-i-was-a-white-trash-zombie.jpg" /></a> <a href="https://www.goodreads.com/book/show/12766833-even-white-trash-zombies-get-the-blues"><img src="http://blog.jverkamp.com/2015/03/27/white-trash-zombie/2-even-white-trash-zombies-get-the-blues.jpg" /></a> <a href="https://www.goodreads.com/book/show/15738579-white-trash-zombie-apocalypse"><img src="http://blog.jverkamp.com/2015/03/27/white-trash-zombie/3-white-trash-zombie-apocalypse.jpg" /></a> <a href="https://www.goodreads.com/book/show/19486406-how-the-white-trash-zombie-got-her-groove-back"><img src="http://blog.jverkamp.com/2015/03/27/white-trash-zombie/4-how-the-white-trash-zombie-got-her-groove-back.jpg" /></a></p>
<p>Series number six on my <a href="http://blog.jverkamp.com/2015/01/01/2015-reading-list">2015 Reading List</a>: <a href="https://www.goodreads.com/series/show/54966-white-trash-zombie">White Trash Zombie</a> by <a href="https://www.goodreads.com/author/show/852078.Diana_Rowland">Diana Rowland</a>.</p>
<p>Continuing on my recent trend, here is the third urban fantasy novel series in a row. After <a href="http://blog.jverkamp.com/2015/02/20/the-iron-druid-chronicles">The Iron Druid Chronicles</a> and <a href="http://blog.jverkamp.com/2015/03/13/alpha-and-omega">Alpha and Omega</a>, it's actually a breath of fresh air to see a series that doesn't take the everything-is-real approach and make a world where only one thing is different: zombies.</p>
<!--more-->
<p>On one hand, it's particularly interesting to see a zombie main character. Far more often than not, the zombies are the bad guys. Only rarely are they even particularly intelligent, let alone much more than evil monsters. Here, they're just like everyone else--just so long as they get a nice supply of brains. With brains, they not only remain human, but can actually push harder and faster.</p>
<p>The underlying means of how zombies work is pretty neat. Essentially, zombies have a brain based symbiote interested primarily in brains, but also in helping their host surive. It's for exactly that reason that zombies without brains begin to rot--the symbiote is forcing the host to choose their priorities. There's an interesting aspect that I wish the series got into more--once the symbiote has taken hold, how much influence does it have? How much has the person changed? <a href="https://en.wikipedia.org/wiki/Ship_of Theseus">Are they still the same person?</a></p>
<p>One core theme throughout the book is how exactly do zombies get their brains (the main character ends up with a job at the local morgue). Killing people for their brains is rare enough--but not entirely ignored, bringing a bit of internal conflict. Another amusing note is how they eat them.</p>
<p>Another theme is the 'white trash' part of White Trash Zombie. If you read enough urban fantasy series, you tend to start seeing a lot of similarity between the main characters. It's not really that bad, since it's one of the reasons many people read them in the first place, but it's still nice to see something different. Particularly since there's a lot of room for growth. There's a lovely progression through the series as the main character gets her life together--sometimes by force, most drugs just don't work on zombies--all without completely abandoning her roots.</p>
<p>One oddity I found in reading all four books together is that the forth doesn't really fit with the first three. There's an increase in scale for each book, but it seems to me that the first fit together much better than the forth. It's interesting to see how the titular 'white trash' zombie deals with traveling a thousand miles further than she ever has in her life, but her sudden ascention to power seems a bit odd. So it goes, it's still an enjoyable story. Plus it brings an interesting wrinkle to how zombies work that I really want to see how they work out. Luckily a fifth book is in the pipeline.</p>
<p>All together, the White Trash Zombie series was a nice breath of fresh air. (Amusing that.) Still urban fantasy, but a much different approach. 28 books down, we're just over a quarter done bookwise with the year, and with a few days left in the quarter to boot. Awesome.</p>
<p>Up next, I have <a href="https://www.goodreads.com/book/show/12779838-precinct-13">Precinct 13</a>, yet another kitchen sink urban fantasy. Should be fun, although at this point, I'm glad it's only a single book. Then we try some science fiction instead for a while.</p>]]></content></entry><entry><title>San Andreas Lake</title><link href="http://blog.jverkamp.com/2015/03/21/san-andreas-lake" /><id>urn:uuid:54bfa591-1d8e-6d07-d4e3-4881392a9c52</id><updated>2015-03-21T00:00:00Z</updated><summary type="html"><![CDATA[<p>Had an hour and change to walk along the San Andreas Lake outside of Burlingame. It's really interesting to live so close to one of the better known fault lines in the world. We'll have to go back again sometime.</p>
<div><div class="flickr-gallery" data-set-id="72157651496600235" data-per-page="30"></div><p><a href="https://flickr.com/photos/jpverkamp/sets/72157651496600235">View on Flickr</a></p></div>]]></summary><content type="html"><![CDATA[<p>Had an hour and change to walk along the San Andreas Lake outside of Burlingame. It's really interesting to live so close to one of the better known fault lines in the world. We'll have to go back again sometime.</p>
<div><div class="flickr-gallery" data-set-id="72157651496600235" data-per-page="30"></div><p><a href="https://flickr.com/photos/jpverkamp/sets/72157651496600235">View on Flickr</a></p></div>]]></content></entry><entry><title>Half Moon Bay State Beach</title><link href="http://blog.jverkamp.com/2015/03/15/half-moon-bay-state-beach" /><id>urn:uuid:8a6853fb-d575-1d01-2060-9dc7cdd98932</id><updated>2015-03-15T00:00:00Z</updated><summary type="html"><![CDATA[<p>Three beaches in a row! Don't worry, there will be something new next time. And hey, at least this time, it isn't dead crabs. :)</p>
<div><div class="flickr-gallery" data-set-id="72157651077899690" data-per-page="30"></div><p><a href="https://flickr.com/photos/jpverkamp/sets/72157651077899690">View on Flickr</a></p></div>]]></summary><content type="html"><![CDATA[<p>Three beaches in a row! Don't worry, there will be something new next time. And hey, at least this time, it isn't dead crabs. :)</p>
<div><div class="flickr-gallery" data-set-id="72157651077899690" data-per-page="30"></div><p><a href="https://flickr.com/photos/jpverkamp/sets/72157651077899690">View on Flickr</a></p></div>]]></content></entry></feed>