<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>jverkamp.com</title><link href="http://blog.jverkamp.com" /><link rel="self" href="http://blog.jverkamp.com/feed/" /><updated>2015-05-10T00:00:00Z</updated><author><name>JP Verkamp</name></author><id>urn:uuid:f148b655-ada3-c720-0c01-ca384ab68088</id><entry><title>The Unnaturalists</title><link href="http://blog.jverkamp.com/2015/05/10/the-unnaturalists" /><id>urn:uuid:c2b87157-2f5a-d1bb-528c-7712235d8008</id><updated>2015-05-10T00:00:00Z</updated><summary type="html"><![CDATA[<p><a href="https://www.goodreads.com/book/show/12988074-the-unnaturalists"><img src="http://blog.jverkamp.com/2015/05/10/the-unnaturalists/the-unnaturalists.jpg" /></a></p>
<p>Right on the heels of <a href="http://blog.jverkamp.com/2015/04/28/year-zero">Year Zero</a>, I have another book that got itself on my list based on the potential in its world building: <a href="https://www.goodreads.com/book/show/12988074-the-unnaturalists">The Unnaturalists</a>. I mean, how can you <em>not</em> be intrigued by a world where London seems to have been yanked into another world, where Science<span class="footnote"><sup><a href="#footnote-1">[1]</a></sup></span> has grown into a religion.</p>
<p>You have things like people cursing with "by Saint Darwin and all his apes". A world where you hear someone say (with a straight face) "I turn my attention to another window, the one in which Saint Pasteur smites the Demon Byron for his licentious poetry."</p>
]]></summary><content type="html"><![CDATA[<p><a href="https://www.goodreads.com/book/show/12988074-the-unnaturalists"><img src="http://blog.jverkamp.com/2015/05/10/the-unnaturalists/the-unnaturalists.jpg" /></a></p>
<p>Right on the heels of <a href="http://blog.jverkamp.com/2015/04/28/year-zero">Year Zero</a>, I have another book that got itself on my list based on the potential in its world building: <a href="https://www.goodreads.com/book/show/12988074-the-unnaturalists">The Unnaturalists</a>. I mean, how can you <em>not</em> be intrigued by a world where London seems to have been yanked into another world, where Science<span class="footnote"><sup><a href="#footnote-1">[1]</a></sup></span> has grown into a religion.</p>
<p>You have things like people cursing with "by Saint Darwin and all his apes". A world where you hear someone say (with a straight face) "I turn my attention to another window, the one in which Saint Pasteur smites the Demon Byron for his licentious poetry."</p>
<!--more-->
<p>Therein lies the problem with the world though. It never quite gelled for me. There is quite a lot of world there, just waiting to be tapped, but it seemed too busy. It seemed to be a steampunk London torn from our world some time in the past, sent into a world where magic still holds sway--which is particularly odd. How do you have Science grow to the point it has in this story in a world where there are literal living fairies and sphinxes hanging around?</p>
<p>Also, it was never entirely clear what the rules were in the world. I don't strictly speaking have to know what the worlds are for magic systems, but I do prefer that there are rules. I never get the impression that is the case here. We have the last Witch in the world; Architects which can do... something; Tinkers with the ability to commune with Elemantals (essentially animstic spirits); and all manner of magical beasties. Don't get me wrong, there were some particularly cool visuals, it just didn't quite get beyond that.</p>
<p>Beyond the world building, the writing style was odd. There were two story lines: a rich girl rebelling against Victorian gender roles and a Tinker boy from the outskirts with the only remaining Tinker magic among his people. The former was written in first person present tense<span class="footnote"><sup><a href="#footnote-2">[2]</a></sup></span>, the latter in third person. I can see where the two characters tie together, but for the most part, there seem to almost be two stories going on in parallel.</p>
<p>Finally, the love story just felt strange. Pedant Lumin/Hal/Bayne/The Architect is referred to four different ways at different points in the book; it took me a while to figure out they were all the same person. As a result, I couldn't figure out who he was and what in the world Vespa saw in him. It felt like the author was trying to make him adequately interesting, but it felt forced.</p>
<p>Overall, it took me a while to get finish this book. It never quite got to the point where I just wanted to put it down, but at the same point, it didn't keep me turning pages. So it goes. I'm sure there are many people who would enjoy this style of book. I'm just not one of them. So it goes.</p>
<p>So far, I've finished 41 of 100 books for the year, keeping me at a solid 6 books ahead of schedule<span class="footnote"><sup><a href="#footnote-3">[3]</a></sup></span>. Next up, <a href="https://www.goodreads.com/author/show/1221698.Neil_Gaiman">Neil Gaiman's</a> <a href="https://www.goodreads.com/book/show/4407.American_Gods">American Gods</a>.</p>]]></content></entry><entry><title>Tupper's self-referential formula</title><link href="http://blog.jverkamp.com/2015/05/07/tuppers-self-referential-formula" /><id>urn:uuid:bf58a9a0-f27e-d83e-acd1-97ca1db67a9b</id><updated>2015-05-07T00:00:00Z</updated><summary type="html"><![CDATA[<p>Quick post today. Let's implement <a href="https://en.wikipedia.org/wiki/Tupper's_self-referential formula">Tupper's self-referential formula</a> in Racket!</p>
<div>$$ \frac{1}{2} < \left \lfloor mod \left ( \left \lfloor \frac{y}{17} 2^{-17 \lfloor x \rfloor - mod(\lfloor y \rfloor, 2)} \right \rfloor, 2 \right ) \right \rfloor $$</div>
<pre class="racket"><code> (tupper 960939379918958884971672962127852754715004339660129306651505519271702802395266424689642842174350718121267153782770623355993237280874144307891325963941337723487857735749823926629715517173716995165232890538221612403238855866184013235585136048828693337902491454229288667081096184496091705183454067827731551705405381627380967602565625016981482083418783163849115590225610003652351370343874461848378737238198224849863465033159410054974700593138339226497249461751545728366702369745461014655997933798537483143786841806593422227898388722980000748404719) </code></pre>
<p><a href="http://blog.jverkamp.com/2015/05/07/tuppers-self-referential-formula/tupper.png" data-toggle="lightbox"><img src="http://blog.jverkamp.com/2015/05/07/tuppers-self-referential-formula/tupper.png" /></a></p>
<p>That's the result of graphing the above function at a point rather far away from the origin. Specifically, where <code>y</code> is around that crazy big number. Look familiar?</p>
]]></summary><content type="html"><![CDATA[<p>Quick post today. Let's implement <a href="https://en.wikipedia.org/wiki/Tupper's_self-referential formula">Tupper's self-referential formula</a> in Racket!</p>
<div>$$ \frac{1}{2} < \left \lfloor mod \left ( \left \lfloor \frac{y}{17} 2^{-17 \lfloor x \rfloor - mod(\lfloor y \rfloor, 2)} \right \rfloor, 2 \right ) \right \rfloor $$</div>
<pre class="racket"><code> (tupper 960939379918958884971672962127852754715004339660129306651505519271702802395266424689642842174350718121267153782770623355993237280874144307891325963941337723487857735749823926629715517173716995165232890538221612403238855866184013235585136048828693337902491454229288667081096184496091705183454067827731551705405381627380967602565625016981482083418783163849115590225610003652351370343874461848378737238198224849863465033159410054974700593138339226497249461751545728366702369745461014655997933798537483143786841806593422227898388722980000748404719) </code></pre>
<p><a href="http://blog.jverkamp.com/2015/05/07/tuppers-self-referential-formula/tupper.png" data-toggle="lightbox"><img src="http://blog.jverkamp.com/2015/05/07/tuppers-self-referential-formula/tupper.png" /></a></p>
<p>That's the result of graphing the above function at a point rather far away from the origin. Specifically, where <code>y</code> is around that crazy big number. Look familiar?</p>
<!--more-->
<p>The basic idea behind the formula is that it can encode any arbitrary bitmap (so long as it's black and white and only 106x17 pixels). Essentially under the hood everything is in base 17. First, let's fairly directly translate the original formula into Racket:</p>
<pre class="racket"><code>; Tupper's "self-referential" formula
; Encodes a bitmap as an integer
(define (tupper k)
  (flomap-&gt;bitmap
   (build-flomap*
    1 106 17
    (Î» (x y)
      (set! y (+ y k))
      (set! x (- 105 x))
      (cond
        [(&lt; 1/2 (floor (mod (* (floor (/ y 17)) (expt 2 (- (* -17 (floor x)) (mod (floor y) 17)))) 2)))
         (vector 0)]
        [else
         (vector 1)])))))</code></pre>
<p>One amusing caveat that we have to deal with here is that <code>modulus</code> doesn't work on numbers this large. So instead, we're going to have to do it manually:</p>
<pre class="racket"><code>; Modulus that will work with really large numbers
(define (mod a b)
  (define q (floor (/ a b)))
  (define r (- a (* b q)))
  r)</code></pre>
<p>Whee!</p>
<p>Another neat trick I was playing with is "rendering" the image by adding one digit at a time (in base 10, so it's mostly noise):</p>
<pre class="racket"><code>(define (render-to target)
  (define str-target (number-&gt;string target))
  (define str-buffer (make-string (string-length str-target) #\0))

  (for/list ([i (in-range (sub1 (string-length str-target)) -1)])
    (string-set! str-buffer i (string-ref str-target i))
    (tupper (string-&gt;number str-buffer))))

&gt; (write-animated-gif
   (render-to 960939379918958884971672962127852754715004339660129306651505519271702802395266424689642842174350718121267153782770623355993237280874144307891325963941337723487857735749823926629715517173716995165232890538221612403238855866184013235585136048828693337902491454229288667081096184496091705183454067827731551705405381627380967602565625016981482083418783163849115590225610003652351370343874461848378737238198224849863465033159410054974700593138339226497249461751545728366702369745461014655997933798537483143786841806593422227898388722980000748404719)
   5
   "tupper.gif"
   #:last-frame-delay 50)</code></pre>
<p><a href="http://blog.jverkamp.com/2015/05/07/tuppers-self-referential-formula/tupper.gif" data-toggle="lightbox"><img src="http://blog.jverkamp.com/2015/05/07/tuppers-self-referential-formula/tupper.gif" /></a></p>
<p>If you look carefully, you'll occasionally see flashes of the final image being rendered. This happens whenever the base-10 numbers that we're adding line up with the base-17 encoding.</p>
<p>I'm not sure it's particularly useful for anything, but I found it amusing.</p>
<p>Code: <a href="https://github.com/jpverkamp/small-projects/blob/master/blog/tupper.rkt">tupper.rkt</a></p>]]></content></entry><entry><title>Year Zero</title><link href="http://blog.jverkamp.com/2015/04/28/year-zero" /><id>urn:uuid:a0507ac6-d1ec-9e91-ff33-5842a395cbb6</id><updated>2015-04-28T00:00:00Z</updated><summary type="html"><![CDATA[<p><a href="https://www.goodreads.com/book/show/12953520-year-zero"><img src="http://blog.jverkamp.com/2015/04/28/year-zero/year-zero.jpg" /></a></p>
<p>Confession time: I didn't particularly like <a href="https://www.goodreads.com/book/show/11.The_Hitchhiker_s_Guide_to_the_Galaxy">The Hitchhiker's Guide to the Galaxy</a>. It seems a bit of blasphemy for a self professed 'geek', but I just don't particularly care for this style of humorous science fiction. A novel with a large helping of humor? Good. Example: <a href="http://blog.jverkamp.com/2015/02/20/the-iron-druid-chronicles">The Iron Druid Chronicles</a>. But when that humor is pushed to the level of world building, that's a bit of a problem.</p>
]]></summary><content type="html"><![CDATA[<p><a href="https://www.goodreads.com/book/show/12953520-year-zero"><img src="http://blog.jverkamp.com/2015/04/28/year-zero/year-zero.jpg" /></a></p>
<p>Confession time: I didn't particularly like <a href="https://www.goodreads.com/book/show/11.The_Hitchhiker_s_Guide_to_the_Galaxy">The Hitchhiker's Guide to the Galaxy</a>. It seems a bit of blasphemy for a self professed 'geek', but I just don't particularly care for this style of humorous science fiction. A novel with a large helping of humor? Good. Example: <a href="http://blog.jverkamp.com/2015/02/20/the-iron-druid-chronicles">The Iron Druid Chronicles</a>. But when that humor is pushed to the level of world building, that's a bit of a problem.</p>
<!--more-->
<p>Specifically, Year Zero starts with an interesting premise: Since the 1970s, aliens have been listening to our music--and they love it. But alien society at large also has a problem: art created by a 'primitive' species is bound by the laws of that species. In this particular case, copyright law. The end result: humanity is now due all of the universe's wealth (for better and for worse). Neat concept, yes?</p>
<p>The problem is that it starts to fall apart almost immediately. The basic conceit is that art is at the core of universal culture. That part seems fine. But in all the millions of species, we are the best at music--by a large margin. A step forward and our music seems universally loved. How that's possible in such a large universe? It's hard to swallow.</p>
<p>On the other hand I did like is the idea that in such a huge universe, just about every sort of alien life is possible. Life that looks like parrots... vacuum cleaners... and life that looks <em>almost</em> exactly like us. That's not a problem though, with that many species, chances are pretty good that one or more would end up just like us.</p>
<p>An interesting note is that the author of the book--<a href="https://www.goodreads.com/author/show/6423803.Rob_Reid?ref=ru_lihp_nsup_as.6423803_0_mclk">Rob Reid</a> founded the company that developed Rhapsody. So a novel heavily invested with copyright law works well with the idea to 'write what you know'. It shows, with more details about copyright law and musical pop culture references than I personally cared for. I'm not convinced that this is a novel that is going to age well--although I guess that isn't the end of the world.</p>
<p>Otherwise, the characters are a little rough, closer to caricatures at times<span class="footnote"><sup><a href="#footnote-1">[1]</a></sup></span>. The plot is a little uneven, taking a while to get moving, then each conclusion in turn--including the finale--comes too suddenly.  When I first started Year Zero, I wasn't sure that I was even going to finish it. Around 20% in, something clicked and suddenly it was a few hours later and I'd finished it. If you liked the Hitchhiker's Guide, you'll probably like this book.</p>
<p>Counting my side trip into the <a href="http://blog.jverkamp.com/2015/04/25/the-ender-quintet">Enderverse</a>, that puts me at 39 books just shy of the first 4 months. 100 books sounded mad at first, but I'm really enjoying it. It's nice to be reading again. Next up, <a href="https://www.goodreads.com/book/show/12988074-the-unnaturalists">The Unnaturalists</a> by <a href="https://www.goodreads.com/author/show/345572.Tiffany_Trent">Tiffany Trent</a>.</p>]]></content></entry><entry><title>The Ender Quintet</title><link href="http://blog.jverkamp.com/2015/04/25/the-ender-quintet" /><id>urn:uuid:38be9a14-6aa6-edee-3d9b-37fab199f328</id><updated>2015-04-25T00:00:00Z</updated><summary type="html"><![CDATA[<p><a href="https://www.goodreads.com/book/show/375802.Ender_s_Game"><img src="http://blog.jverkamp.com/2015/04/25/the-ender-quintet/1-enders-game.jpg" /></a> <a href="https://www.goodreads.com/book/show/3220405-ender-in-exile"><img src="http://blog.jverkamp.com/2015/04/25/the-ender-quintet/2-ender-in-exile.jpg" /></a> <a href="https://www.goodreads.com/book/show/7967.Speaker_for_the_Dead"><img src="http://blog.jverkamp.com/2015/04/25/the-ender-quintet/3-speaker-for-the-dead.jpg" /></a> <a href="https://www.goodreads.com/book/show/8648.Xenocide"><img src="http://blog.jverkamp.com/2015/04/25/the-ender-quintet/4-xenocide.jpg" /></a> <a href="https://www.goodreads.com/book/show/31360.Children_of_the_Mind"><img src="http://blog.jverkamp.com/2015/04/25/the-ender-quintet/5-children-of-the-mind.jpg" /></a></p>
<p>As mentioned in my post on <a href="http://blog.jverkamp.com/2015/04/16/the-first-formic-war">The First Formic War</a>, I decided to take a quick detour from my <a href="http://blog.jverkamp.com/2015/01/01/2015-reading-list">2015 Reading List</a> and read the rest of the Ender Quintet. Since I've already read Ender's Game and <a href="http://blog.jverkamp.com/2015/04/06/ender-in-exile">Ender in Exile</a>, this just consisted of re-reading three novels: Speaker for the Dead, Xenocide, and Children of the Mind.</p>
]]></summary><content type="html"><![CDATA[<p><a href="https://www.goodreads.com/book/show/375802.Ender_s_Game"><img src="http://blog.jverkamp.com/2015/04/25/the-ender-quintet/1-enders-game.jpg" /></a> <a href="https://www.goodreads.com/book/show/3220405-ender-in-exile"><img src="http://blog.jverkamp.com/2015/04/25/the-ender-quintet/2-ender-in-exile.jpg" /></a> <a href="https://www.goodreads.com/book/show/7967.Speaker_for_the_Dead"><img src="http://blog.jverkamp.com/2015/04/25/the-ender-quintet/3-speaker-for-the-dead.jpg" /></a> <a href="https://www.goodreads.com/book/show/8648.Xenocide"><img src="http://blog.jverkamp.com/2015/04/25/the-ender-quintet/4-xenocide.jpg" /></a> <a href="https://www.goodreads.com/book/show/31360.Children_of_the_Mind"><img src="http://blog.jverkamp.com/2015/04/25/the-ender-quintet/5-children-of-the-mind.jpg" /></a></p>
<p>As mentioned in my post on <a href="http://blog.jverkamp.com/2015/04/16/the-first-formic-war">The First Formic War</a>, I decided to take a quick detour from my <a href="http://blog.jverkamp.com/2015/01/01/2015-reading-list">2015 Reading List</a> and read the rest of the Ender Quintet. Since I've already read Ender's Game and <a href="http://blog.jverkamp.com/2015/04/06/ender-in-exile">Ender in Exile</a>, this just consisted of re-reading three novels: Speaker for the Dead, Xenocide, and Children of the Mind.</p>
<!--more-->
<p>My first thought in re-reading these books? Wow, those got weird. I'd forgotten how philosophical they get. There are hints of the same in most of Card's works, especially as you get to some of his more recent writings. The first of the three--Speaker for the Dead--is relatively straight forward through most of it. The pequeninos are a neat concept for an alien race (give Card credit for that, each of the species in the Enderverse actually manages to feel alien) and the story is relatively straight forward. It actually makes some sort of sense that--after having skipped through three thousand years of history--Ender would be drawn right to the next aliens. A chance for forgiveness for his sins of all those years ago.</p>
<p>Once you get past that into the other two books though--that's when things get weird. Don't get me wrong. I actually like the discussions about aiÃºa. It's in the interesting category of fiction which makes me think what if... what if that's how the world actually did work? Would that be so bad? It does drag on at times, but it's still an interesting concept.</p>
<p>Then there's the change in focus, bringing in the world of Path in Xenocide and then both Divine Wind and Pacifica in Children of the Mind. If it were any other books, I think hat I would have liked to see how he built up the cultures, so different from anything I personally have much experience with. But in the context of Speaker for the Dead--it just feels off. Like there are two completely separate stories going on that got smooshed together at some point.</p>
<p>All together though, I still do greatly enjoy all five books in the Ender Quintet, each for different reasons. Ender's Game is near the top of my personal science fiction list with Speaker for the Dead as a worthwhile successor. Xenocide and Children of the Dead are a little lower, but interesting to read if you want a bit of a different philosophy for a little while. I have less of a history with Ender in Exile, but it's a good follow up to the others, just a little less deep--which sometimes is a good thing.</p>
<p>Next up, <a href="https://www.goodreads.com/book/show/12953520-year-zero">Year Zero</a> by <a href="https://www.goodreads.com/author/show/6423803.Rob_Reid">Rob Reid</a>. From what I've read about it, I remain cautiously optimistic. The premise sounds fascinating (aliens were pirating our music for decades and just now realize that--by our laws--they own more money than there is in the universe). Conversely though, it's been compared to The Hitchhiker's Guide to the Galaxy. Perhaps it's blasphemy, but that just wasn't my cup of tea when I last read it. We'll see how it goes.</p>]]></content></entry><entry><title>It's all Greek to me</title><link href="http://blog.jverkamp.com/2015/04/17/its-all-greek-to-me" /><id>urn:uuid:b361ed4c-c170-609c-a31d-3fbc5642e648</id><updated>2015-04-17T00:00:00Z</updated><summary type="html"><![CDATA[<p>A few days ago an interesting article came across my RSS feeds: <a href="http://flowingdata.com/2015/04/14/its-all-greek-or-chinese-or-spanish-or-to-me/">Itâs All Greek (or Chinese or Spanish orâ¦) to Me</a>. Basically, in English, when you're confused, you'll often say 'It's all Greek to me'. It turns out that man (if not all) languages around the world have a similar saying, but the target varies. Luckily, Wikipedia has a lovely page about it: <a href="https://en.wikipedia.org/wiki/Greek_to me">Greek to me</a>.</p>
]]></summary><content type="html"><![CDATA[<p>A few days ago an interesting article came across my RSS feeds: <a href="http://flowingdata.com/2015/04/14/its-all-greek-or-chinese-or-spanish-or-to-me/">Itâs All Greek (or Chinese or Spanish orâ¦) to Me</a>. Basically, in English, when you're confused, you'll often say 'It's all Greek to me'. It turns out that man (if not all) languages around the world have a similar saying, but the target varies. Luckily, Wikipedia has a lovely page about it: <a href="https://en.wikipedia.org/wiki/Greek_to me">Greek to me</a>.</p>
<!--more-->
<p>When I posted the link to Facebook, I got a quick question: are there any cycles? While one could just scan through the document, it would be a lot more interesting (at least to me!) if you could do it automatically. Let's toss together a quick script to do it.</p>
<p>First thing we need: a way to get the content of the Wikipedia page. Python is great for this, with <a href="http://docs.python-requests.org/en/latest/">requests</a> to grab the page and <a href="http://www.crummy.com/software/BeautifulSoup/">BeautifulSoup</a> to process it:</p>
<pre class="python"><code>content = requests.get('https://en.wikipedia.org/wiki/Greek_to_me').text
soup = bs4.BeautifulSoup(content)

table = soup.find('table', {'class': 'wikitable sortable'})

pairs = collections.defaultdict(set)

for row in table.findAll('tr'):
    cols = row.findAll('td')
    if not cols:
        continue

    if len(cols) == 5:
        srcs = [src.strip() for src in cols[0].text.split(',')]

    dsts = [dst.strip() for dst in cols[-1].text.split(',')]
    for i, dst in enumerate(dsts):
        dsts[i] = re.sub(r'[\[(].*?[\])]', '', dst)

    for src in srcs:
        if ' ' in src: continue

        for dst in dsts:
            if ' ' in dst: continue

            pairs[src].add(dst)</code></pre>
<p>Basically, we download the page. Then we go through each of the rows (<code>tr</code>). Skip any rows without column elements (<code>td</code>) as that's probably the header, otherwise, pull them out. The first column (index <code>0</code>) is the language with the idiom (English in the example) while the last column (index <code>-1</code>) is the target (Greek). There's one caveat though, that sometimes the table uses a <code>rowspan</code> when one source can have multiple targets but is only listed once. We check that by only changing the <code>srcs</code> when there are 5 columns.</p>
<p>Parse through all of that and what do you have?</p>
<pre class="python"><code>&gt;&gt;&gt; import pprint
&gt;&gt;&gt; pprint.pprint(dict(pairs))
{u'': set([]),
 u'Afrikaans': set([u'Greek']),
 u'Albanian': set([u'Chinese']),
 u'Arabic': set([u'Chinese', u'Garshuni']),
 ...
 u'Vietnamese': set([u'Cambodian']),
 u'Volap\xfck': set([]),
 u'Yiddish': set([u'Aramaic'])}</code></pre>
<p>Exactly what I was looking for. Okay, next step. Find any cycles in the graph. This is straight forward enough by performing a <a href="https://en.wikipedia.org/wiki/depth_first search">depth first search</a>:</p>
<pre class="python"><code>def cycle(node, seen):

    for neighbor in pairs[node]:
        new_seen = seen + [neighbor]

        if neighbor in seen:
            yield new_seen[new_seen.index(neighbor):]
        else:
            for recur in cycle(neighbor, new_seen):
                yield recur</code></pre>
<p>The basic idea is to make a generator that returns each cycle as it finds it. It does so by search down each branch, maintaining a list of all nodes it has <code>seen</code>. If it sees the same node twice, that's a cycle. Otherwise, try all of the neighbors. We avoid infinite loops since there's a guaranteed base case to the recursion: <code>seen</code> is always one bigger on each step and it's maximum size is the number of nodes in the graph.</p>
<p>So how does it work?</p>
<pre class="python"><code>&gt;&gt;&gt; for result in cycle('English', ['English']):
...     print result
...
['English', u'Greek', u'Chinese', u'English']
['English', u'Greek', u'Turkish', u'Arabic', u'Chinese', u'English']
['English', u'Greek', u'Turkish', u'French', u'Chinese', u'English']
['English', u'Greek', u'Turkish', u'French', u'Hebrew', u'Chinese', u'English']
['English', u'Dutch', u'Chinese', u'English']</code></pre>
<p>Neat! We've already found 5 cycles that involve English alone. But how many cycles are there all together? For that, we need a way to determine if a cycle is actually unique. If you have the cycles <code>A -> B -> C -> A</code>, that's the same as <code>B -> C -> A -> B</code>. You can do this by putting the cycles in <a href="https://en.wikipedia.org/wiki/lexical_order">lexical order</a> (so that the 'smallest' element in the cycle is first).</p>
<pre class="python"><code>def reorder(cycle):
    if cycle[0] == cycle[-1]:
        cycle = cycle[1:]

    smallest = min(cycle)
    for el in list(cycle):
        if el == smallest:
            break
        else:
            cycle = cycle[1:] + [cycle[0]]

    return cycle</code></pre>
<p>It also is smart enough that if we pass it a list with the first and last node the same (as we will), it trims that off automatically.</p>
<pre class="python"><code>&gt;&gt;&gt; reorder(['A', 'B', 'C', 'A'])
['A', 'B', 'C']
&gt;&gt;&gt; reorder(['B', 'C', 'A', 'B'])
['A', 'B', 'C']</code></pre>
<p>Bam. So we use that and a <code>set</code> to keep track of what we've seen:</p>
<pre class="python"><code>&gt;&gt;&gt; seen = set()
&gt;&gt;&gt; for src in pairs.keys():
...     for result in cycle(src, [src]):
...         result = reorder(result)
...         if not str(result) in seen:
...             print(result)
...             seen.add(str(result))
...
[u'Chinese', u'English', u'Greek']
[u'Chinese', u'English', u'Dutch']
[u'Arabic', u'Chinese', u'English', u'Greek', u'Turkish']
[u'Chinese', u'English', u'Greek', u'Turkish', u'French']
[u'Chinese', u'English', u'Greek', u'Turkish', u'French', u'Hebrew']</code></pre>
<p>Huh. So they all go through English. I didn't actually expect that. :) Still, it's cool to be able to unify them like that.</p>
<p>Okay, one last trick. Let's visualize them. Luckily, there's a nice Python interface for <a href="https://pypi.python.org/pypi/graphviz">graphviz</a> that we can use:</p>
<pre class="python"><code># --- Render a nice graph ---

g = graphviz.Digraph()
for src in pairs.keys():
    for dst in pairs[src]:
        g.edge(src, dst)

g.graph_attr['overlap'] = 'false'
g.graph_attr['splines'] = 'true'

g.format = 'png'
g.engine = 'neato'

g.render('greek-to-me')</code></pre>
<p><a href="http://blog.jverkamp.com/2015/04/17/its-all-greek-to-me/greek-to-me.png" data-toggle="lightbox"><img src="http://blog.jverkamp.com/2015/04/17/its-all-greek-to-me/greek-to-me.png" /></a></p>
<p>Awesome.</p>
<p>It's not the easiest thing in the world to read, but if you look carefully you can pick out a few interesting things. Let's tweak it a bit to color nodes if and only if they have both an inward edge and an outward one:</p>
<pre class="python"><code>for src in pairs.keys():
    # Does this node lead to another
    has_out = pairs[src]

    # Does any node lead to this one
    has_in = False
    for dst in pairs.keys():
        if src in pairs[dst]:
            has_in = True
            break

    # If both, color it
    if has_out and has_in:
        g.node(src, color = 'blue')
</code></pre>
<p><a href="http://blog.jverkamp.com/2015/04/17/its-all-greek-to-me/greek-to-me-color-nodes.png" data-toggle="lightbox"><img src="http://blog.jverkamp.com/2015/04/17/its-all-greek-to-me/greek-to-me-color-nodes.png" /></a></p>
<p>That's a little better, all of the nodes in any cycle are in there. Let's go ahead and show all of the edges in any cycle:</p>
<pre class="python"><code># Get all edges that are part of a cycle
cycle_edges = set()
for cycle in cycles:
    for src, dst in zip(cycle, cycle[1:]):
        cycle_edges.add((src, dst))
    cycle_edges.add((cycle[-1], cycle[0]))

for src in pairs.keys():
    for dst in pairs[src]:
        if (src, dst) in cycle_edges:
            g.edge(src, dst, color = 'blue')
        else:
            g.edge(src, dst)</code></pre>
<p><a href="http://blog.jverkamp.com/2015/04/17/its-all-greek-to-me/greek-to-me-color.png" data-toggle="lightbox"><img src="http://blog.jverkamp.com/2015/04/17/its-all-greek-to-me/greek-to-me-color.png" /></a></p>
<p>So they're all in that pocket. If I had a few more minutes, I could show all of the cycles as different colors, but that gets complicated in that many re-use the same paths. So it goes.</p>
<p>If you'd like to see / run the code, you can grab it from GitHub: <a href="https://github.com/jpverkamp/small-projects/blob/master/blog/greek-to-me.py">greek-to-me.py</a></p>]]></content></entry><entry><title>The First Formic War</title><link href="http://blog.jverkamp.com/2015/04/16/the-first-formic-war" /><id>urn:uuid:bb79dce0-417c-c928-d86d-d6abda1a88d1</id><updated>2015-04-16T00:00:00Z</updated><summary type="html"><![CDATA[<p><a href="https://www.goodreads.com/book/show/13151129-earth-unaware"><img src="http://blog.jverkamp.com/2015/04/16/the-first-formic-war/1-earth-unaware.jpg" /></a> <a href="https://www.goodreads.com/book/show/16059350-earth-afire"><img src="http://blog.jverkamp.com/2015/04/16/the-first-formic-war/2-earth-afire.jpg" /></a> <a href="https://www.goodreads.com/book/show/18490707-earth-awakens"><img src="http://blog.jverkamp.com/2015/04/16/the-first-formic-war/3-earth-awakens.jpg" /></a></p>
<p>Continuing on the Enderverse kick after <a href="http://blog.jverkamp.com/2015/04/06/ender-in-exile">Ender in Exile</a>, I've just finished <a href="https://www.goodreads.com/series/72732-the-first-formic-war">The First Formic War</a> trilogy, a collaboration (of sorts) between <a href="https://www.goodreads.com/author/show/55830.Aaron_Johnston">Aaron Johnston</a> and <a href="https://www.goodreads.com/author/show/589.Orson_Scott_Card">Orson Scott Card</a>. From that I think you actually get to the root of one of many of the oddities of the book: The story originated as a pair of comic books: <a href="https://www.goodreads.com/book/show/10644801-formic-wars">Burning Earth</a> and <a href="https://www.goodreads.com/book/show/13528662-formic-wars">Silent Strike</a>. I'm not sure how much of those (or the latter novels which I actually read) was written by Card and how much was co-written, but any time you get a collaboration in what was originally a single author's universe, strange things can happen.</p>
]]></summary><content type="html"><![CDATA[<p><a href="https://www.goodreads.com/book/show/13151129-earth-unaware"><img src="http://blog.jverkamp.com/2015/04/16/the-first-formic-war/1-earth-unaware.jpg" /></a> <a href="https://www.goodreads.com/book/show/16059350-earth-afire"><img src="http://blog.jverkamp.com/2015/04/16/the-first-formic-war/2-earth-afire.jpg" /></a> <a href="https://www.goodreads.com/book/show/18490707-earth-awakens"><img src="http://blog.jverkamp.com/2015/04/16/the-first-formic-war/3-earth-awakens.jpg" /></a></p>
<p>Continuing on the Enderverse kick after <a href="http://blog.jverkamp.com/2015/04/06/ender-in-exile">Ender in Exile</a>, I've just finished <a href="https://www.goodreads.com/series/72732-the-first-formic-war">The First Formic War</a> trilogy, a collaboration (of sorts) between <a href="https://www.goodreads.com/author/show/55830.Aaron_Johnston">Aaron Johnston</a> and <a href="https://www.goodreads.com/author/show/589.Orson_Scott_Card">Orson Scott Card</a>. From that I think you actually get to the root of one of many of the oddities of the book: The story originated as a pair of comic books: <a href="https://www.goodreads.com/book/show/10644801-formic-wars">Burning Earth</a> and <a href="https://www.goodreads.com/book/show/13528662-formic-wars">Silent Strike</a>. I'm not sure how much of those (or the latter novels which I actually read) was written by Card and how much was co-written, but any time you get a collaboration in what was originally a single author's universe, strange things can happen.</p>
<!--more-->
<p>The first of the issues this raises I already mentioned in my review of <a href="http://blog.jverkamp.com/2015/04/06/ender-in-exile">Ender in Exile</a>. When you write a series of books out of chronological order, it's extremely easy to contradict yourself. In this case, there was really one sticking point: gravity manipulation technology. In Ender's Game (let alone the sequels), it's made relatively clear that humanity only learned to manipulate gravity from the formics. But in the First Formic War, there are two different groups using gravity technology, one for mining (in a way that sounds an awful lot like the Little Doctor) and the other for propulsion.</p>
<p>Now, it's entirely possible to explain this away in universe as Ender just being too young or others not even knowing that this was the case--except Mazer Rackham was one of the pilots of the planes using the gravity manipulation technology. So...</p>
<p>Now that is off of my chest though, I actually greatly enjoyed the series. I like it when you have multiple completely different points of view or time in a shared universe, so that you can see how some difference play out. I also liked the aspect of the First Formic War taking place when humanity is just starting to expand out into the solar system, with a colonies on other rocks (the moon and asteroids at least) and even mining in the Kuiper Belt. It's a segment of science fiction that isn't that common, so it was nice to see it here.</p>
<p>Next, the characters. There was definiately some give and take here. I liked Victor and his family. I thought their family dynamic was interesting, even if it did edge into the 'children are far smarter than adults' trope that the Enderverse relies fairly heavily upon. One interesting contrast was a bit right at the beginning of the first book about relationships in a closely related, isolated population. It got just as preachy as Ender in Exile, but for whatever reason, I thought this time it was more deserved and done much better.</p>
<p>On the other hand, I wasn't overly thrilled with the character of Lem. I get that there are people that think that, that are so set in their world view and so sure that everyone is out to get them that they cannot see it any other way. I even get that those can make interesting characters in fiction. He just really grated on me. I wish there had been more growth and change for him.</p>
<p>Third and final, Mazer Rackham and the MOPs were interesting. There's certainly an undertone of military worship (but only 'smart' military worship) going on as many of the Enderverse books have, but I think I liked how it worked out here. What I didn't care for as much was how obvious (at least to me) many of their political maneuverings and military tactics were. Need to justify military action in China? Publicly thank a high powered general ahead of time so he cannot back down without looking a fool. Need some way to attack under the landers? Oh hey, we happen to have these drills...</p>
<p>All that said and done, it's not bad. I'm looking forward to if/when the detail the Second Formic War even more. For now though, I think I'm going to go ahead and take one final side trip (for now) and finish the <a href="https://www.goodreads.com/series/43963">Ender Quintet</a> before getting back to my list with <a href="https://www.goodreads.com/book/show/12953520-year-zero">Year Zero</a>. Onwards!</p>]]></content></entry><entry><title>A Quick Look at RC4</title><link href="http://blog.jverkamp.com/2015/04/14/a-quick-look-at-rc4" /><id>urn:uuid:7faa7241-8deb-6230-5db2-37d89e5af00c</id><updated>2015-04-14T00:00:00Z</updated><summary type="html"><![CDATA[<p>In cryptography work, <a href="https://en.wikipedia.org/wiki/RC4">RC4</a> (Rivest Cipher 4) is well known as both one of the easiest to implement and fastest to run <a href="https://en.wikipedia.org/wiki/symmetric_encryption">symmetric encryption</a> algorithms. Unfortunately, over time there have been a number of attacks on RC4, both in poorly written protocols (such as in the case of <a href="https://en.wikipedia.org/wiki/WEP">WEP</a>) or statistical attacks against the protocol itself.</p>
<p>Still, for how well it formed, it's an amazingly simple algorithm, so I decided to try my hand at implementing it.</p>
]]></summary><content type="html"><![CDATA[<p>In cryptography work, <a href="https://en.wikipedia.org/wiki/RC4">RC4</a> (Rivest Cipher 4) is well known as both one of the easiest to implement and fastest to run <a href="https://en.wikipedia.org/wiki/symmetric_encryption">symmetric encryption</a> algorithms. Unfortunately, over time there have been a number of attacks on RC4, both in poorly written protocols (such as in the case of <a href="https://en.wikipedia.org/wiki/WEP">WEP</a>) or statistical attacks against the protocol itself.</p>
<p>Still, for how well it formed, it's an amazingly simple algorithm, so I decided to try my hand at implementing it.</p>
<!--more-->
<p>Basically, RC4 is what is known as a '<a href="https://en.wikipedia.org/wiki/stream_cipher">stream cipher</a>', implying that each byte in the input message is encrypted individually (generally taking into account feedback from previous bytes). This runs counter to the perhaps more well known <a href="https://en.wikipedia.org/wiki/block_ciphers">block ciphers</a> such as DES and AES, where bytes are instead encrypted together (although feedback between blocks is still of course possible).</p>
<p>The first step of the algorithm is to take your encryption key (a password or the like) and convert it into a sequence of bytes at least as long as your input. For RC4, this is done in two pieces. First, prepare the index:</p>
<pre class="python"><code>def rc4(key, msg):
    S = list(range(256))

    j = 0
    for i in range(256):
        j = (j + S[i] + key[i % len(key)]) % 256
        S[i], S[j] = S[j], S[i]

    ...</code></pre>
<p>Or in Racket:</p>
<pre class="racket"><code>(define (rc4 key msg)
  (define (mod256 n) (modulo n 256))

  (define permutation (make-bytes 256))
  (for ([i (in-range 256)])
    (bytes-set! permutation i i))

  (define (S i)
    (bytes-ref permutation i))

  (define (swap! i j)
    (let ([pi (bytes-ref permutation i)]
          [pj (bytes-ref permutation j)])
      (bytes-set! permutation i pj)
      (bytes-set! permutation j pi)))

  ; Key-scheduling algorithm
  (for/fold ([j 0]) ([i (in-range 256)])
    (let ([j (mod256 (+ j
                        (S i)
                        (bytes-ref key (modulo i (bytes-length key)))))])
      (swap! i j)
      j))

  ...)</code></pre>
<p>I made the Racket version a little more verbose with helper functions, since I know I'll both be indexing the permutation and swapping values again in the next step. That's one of the reasons that I'll sometimes go for Python over Racket in on off scripts.</p>
<p>Still, relatively simple in both cases.</p>
<p>The next step is to turn that into a stream, essentially creating an infinite number generator. Luckily, both Python and Racket have generators, which are perfectly suited for this sort of thing (assuming in both cases that <code>S</code> / <code>permutation</code> are in scope from above):</p>
<pre class="python"><code>def rc4(key, msg):
    ...

    def prga():
        i = j = 0
        while True:
            i = (i + 1) % 256
            j = (j + S[i]) % 256
            S[i], S[j] = S[j], S[i]
            yield S[(S[i] + S[j]) % 256]

    return prga # DEBUG</code></pre>
<pre class="racket"><code>(define (rc4 key msg)
  ...

  ; Pseudo-random generation algorithm
  (define prga
    (generator ()
      (let loop ([i 1] [j (S 1)])
        (swap! i j)
        (yield (S (mod256 (+ (S i) (S j)))))
        (loop (mod256 (+ i 1)) (mod256 (+ j (S (+ i 1))))))))

  prng) ; DEBUG</code></pre>
<p>Now that we have a stream, we can generate a few bytes and take a look if we wanted:</p>
<pre class="python"><code>&gt;&gt;&gt; import binascii, itertools
&gt;&gt;&gt; prga = rc4(b'Secret', b'Attack at dawn')
&gt;&gt;&gt; print(binascii.hexlify(bytes(itertools.islice(prga(), 10))))
b'04d46b053ca87b594172'</code></pre>
<pre class="racket"><code>(define (bytes-&gt;hex b*)
  (apply ~a (for/list ([b (in-bytes b*)])
        (~a (number-&gt;string (quotient b 16) 16)
            (number-&gt;string (modulo b 16) 16)))))

&gt; (define prga (rc4 "Secret" "Attack at dawn"))
&gt; (bytes-&gt;hex (apply bytes (for/list ([i (in-range 10)] [b (in-producer prga)]) b)))
"04d46b053ca87b594172"</code></pre>
<p>Both of them the same? Good sign. Both matching the example on the Wikipedia page? Even better!</p>
<p>So, we have an infinite stream of bytes. What next?</p>
<p>Well, this is actually the crazy part: You just <a href="https://en.wikipedia.org/wiki/xor">xor</a> them.</p>
<pre class="python"><code>def rc4(key, msg):
    ...

    return bytes(msgbyte ^ keybyte for msgbyte, keybyte in zip(msg, prga()))</code></pre>
<pre class="racket"><code>(define (rc4 key msg)
  ...

  ; Encryption
  (apply bytes
    (for/list ([input-byte (in-bytes msg)] [key-byte (in-producer prga)])
      (bitwise-xor input-byte key-byte))))</code></pre>
<p>And now we can encrypt!</p>
<pre class="python"><code>&gt;&gt;&gt; print(binascii.hexlify(rc4(b'Secret', b'Attack at dawn')))
b'45a01f645fc35b383552544b9bf5'</code></pre>
<pre class="racket"><code>&gt; (bytes-&gt;hex (rc4 "Secret" "Attack at dawn"))
"45a01f645fc35b383552544b9bf5"</code></pre>
<p>And decrypt!</p>
<pre class="python"><code>&gt;&gt;&gt; rc4(b'Secret', rc4(b'Secret', b'Attack at dawn'))
b'Attack at dawn'</code></pre>
<pre class="racket"><code>&gt; (rc4 "Secret" (rc4 "Secret" "Attack at dawn"))
#"Attack at dawn"</code></pre>
<p>Very cool. I'm really starting to see the appeal of RC4. A couple dozen lines of Python/Racket and you're encrypting. Bam. As mentioned, it's not really an algorithm you should use in encryption any more (the author has released a slightly more complicated algorithm called Spritz that works very similarly).</p>
<p>And that's it. If you'd like to see the entire code in one place (along with some fiddling in both cases to deal with Unicode keys/messages as well as pure bytes), it's on GitHub: <a href="https://github.com/jpverkamp/small-projects/blob/master/blog/rc4.py">rc4.py</a>, <a href="https://github.com/jpverkamp/small-projects/blob/master/blog/rc4.rkt">rc4.rkt</a>.</p>
<p><code>7b82 c5cf 12c4 e168 8a4a 5cbe 9300</code></p>
<p><img alt="smile" class="emoji" src="/emoji/smile.svg" /></p>]]></content></entry><entry><title>Generating perfect portmanteaus</title><link href="http://blog.jverkamp.com/2015/04/07/generating-perfect-portmanteaus" /><id>urn:uuid:0b6a158d-e441-c880-5fcf-4d4a1394e61d</id><updated>2015-04-07T00:00:00Z</updated><summary type="html"><![CDATA[<p>A quick programming post, since it's been a while, inspired by this video:</p>
<p><iframe width="560" height="315" src="//www.youtube.com/embed/QVn2PZGZxaI" frameborder="0" allowfullscreen="allowfullscreen"></iframe></p>
<p>I'm not going to go quite as far as that, but I thought it would be interesting to write up some quick code to generate portmanteaus<span class="footnote"><sup><a href="#footnote-1">[1]</a></sup></span>.</p>
]]></summary><content type="html"><![CDATA[<p>A quick programming post, since it's been a while, inspired by this video:</p>
<p><iframe width="560" height="315" src="//www.youtube.com/embed/QVn2PZGZxaI" frameborder="0" allowfullscreen="allowfullscreen"></iframe></p>
<p>I'm not going to go quite as far as that, but I thought it would be interesting to write up some quick code to generate portmanteaus<span class="footnote"><sup><a href="#footnote-1">[1]</a></sup></span>.</p>
<!--more-->
<p>Basically<span class="footnote"><sup><a href="#footnote-2">[2]</a></sup></span>, a portmanteau is a combination of two words, smooshing them together<span class="footnote"><sup><a href="#footnote-3">[3]</a></sup></span> and dropping some letters from each. In this case, what I'm specifically interested in is 'perfect' portmanteaus (I'm not sure if there is a better term for it), where the suffix of one word exactly matches the prefix of the other.</p>
<p>As an example, consider the words <code>hamster</code> and <code>termine</code>. The last three letters of the former, perfectly matches the first three of the latter, so let's overlap them. <code>hamstermite</code>. Bam.</p>
<p>So how do we do it?</p>
<pre class="racket"><code>(define current-minimum-overlap (make-parameter 3))

(define (portmanteau left right)
  (define maximum-overlap (- (min (string-length left) (string-length right)) 1))

  (for*/first ([overlap (in-range maximum-overlap (- (current-minimum-overlap) 1) -1)]
               #:when (equal? (substring left (- (string-length left) overlap))
                              (substring right 0 overlap)))
    (list left
          right
          (string-append
           (substring left 0 (- (string-length left) overlap))
           right))))</code></pre>
<p>Should be straight forward enough. Basically, we start with the longest possible overlap (1 less than the length of the shorter word, since we don't want to completely subsume a word), counting down until we reach some minimum overlap. For each possible sequence, we compare the prefix and suffix of the two words, only proceeding into the body of the loop when they match. That's the beauty of <code><a href="http://docs.racket-lang.org/search/index.html?q=for*/first">for*/first</a></code>, it will loop until it gets a valid value, returning when it does.</p>
<p>And that's really it. Try it out with the example from earlier:</p>
<pre class="racket"><code>&gt; (portmanteau "hamster" "termite")
'("hamster" "termite" "hamstermite")</code></pre>
<p>Since that was so quick, let's put some simple wrapper code around it in order to find all portmanteaus from a given word list. First, do the heavy lifting of finding portmanteaus:</p>
<pre class="racket"><code>(define (portmanteaus)
  (define words
    (for*/list ([raw-line (in-lines)]
                [line (in-value (string-trim (string-downcase raw-line)))]
                #:when (not (equal? "" line)))
      line))

  (for*/list ([left (in-list words)]
              [right (in-list words)]
              #:when (not (eq? left right))
              [portmanteau (in-value (portmanteau left right))]
              #:when portmanteau)
    portmanteau))</code></pre>
<p><code><a href="http://docs.racket-lang.org/search/index.html?q=in-value">in-value</a></code> is useful in <code><a href="http://docs.racket-lang.org/search/index.html?q=for*">for*</a></code> since it lets you bind a single value for future <code>#:when</code> blocks without having to recalculate anything.</p>
<p>After that, a wrapper to process some command line parameters and render output in a few different ways:</p>
<pre class="racket"><code>(define paths
  (command-line
   #:program "portmanteau"
   #:once-each
   [("--minimum-overlap")
    overlap
    "Specify the minimum necessary overlap (default = 3)"
    (cond
      [(string-&gt;number overlap) =&gt; current-minimum-overlap]
      [else (error '--minimum-overlap "must specify a number")])]
   #:once-any
   [("--verbose")
    "Print in verbose mode (default = false)"
    (verbose-mode #t)]
   [("--graph")
    "Print out a dotfile"
    (graph-mode #t)]
   #:args paths

   paths))

(when (null? paths)
  (set! paths '("-")))

(for ([path (in-list paths)])
  (define results
    (cond
      [(equal? path "-")
       (portmanteaus)]
      [else
       (with-input-from-file path portmanteaus)]))

  (define g (unweighted-graph/directed '()))

  (for ([result (in-list results)])
    (match-define (list left right portmanteau) result)
    (cond
      [(verbose-mode)
       (printf "~a + ~a = ~a\n" left right portmanteau)]
      [(graph-mode)
       (add-edge! g (~a "\"" left "\"") (~a "\"" right "\""))]
      [else
       (displayln portmanteau)]))

  (when (graph-mode)
    (displayln (graphviz g))))</code></pre>
<p>Now you can do some interesting things:</p>
<pre class="bash"><code>$ racket portmanteau.rkt animals.txt

brown recluse spider monkey
gila monstermite
grasshopperegrine falcon
hamstermite
leechidna
ottermite</code></pre>
<p>Just in case you cannot figure out what animals actually went into that list:</p>
<pre class="bash"><code>$ racket portmanteau.rkt --verbose animals.txt

brown recluse spider + spider monkey = brown recluse spider monkey
gila monster + termite = gila monstermite
grasshopper + peregrine falcon = grasshopperegrine falcon
hamster + termite = hamstermite
leech + echidna = leechidna
otter + termite = ottermite</code></pre>
<p>Or if you want to be a little more general, matching with only 2 characters rather than the default 3:</p>
<pre class="bash"><code>$ racket portmanteau.rkt --minimum-overlap 2 --verbose animals.txt

armadillo + loon = armadilloon
armadillo + lorikeet = armadillorikeet
armadillo + louse = armadillouse
black mamba + badger = black mambadger
brown bear + armadillo = brown bearmadillo
brown recluse spider + spider monkey = brown recluse spider monkey
chinchilaa + aardvark = chinchilaardvark
copperhead snake + kestrel = copperhead snakestrel
coyote + termite = coyotermite
crow + owl = crowl
eagle + leech = eagleech
eagle + leopard seal = eagleopard seal
echidna + narwhal = echidnarwhal
gecko + koala = geckoala
gila monster + termite = gila monstermite
grasshopper + peregrine falcon = grasshopperegrine falcon
hamster + termite = hamstermite
hyena + narwhal = hyenarwhal
jackal + albatross = jackalbatross
king cobra + rattlesnake = king cobrattlesnake
king cobra + raven = king cobraven
kingsnake + kestrel = kingsnakestrel
kiwi + wild boar = kiwild boar
leech + chinchilaa = leechinchilaa
leech + echidna = leechidna
leopard seal + albatross = leopard sealbatross
narwhal + albatross = narwhalbatross
ostrich + chinchilaa = ostrichinchilaa
otter + termite = ottermite
polar bear + armadillo = polar bearmadillo
rattlesnake + kestrel = rattlesnakestrel
sloth bear + armadillo = sloth bearmadillo
snapping turtle + leech = snapping turtleech
snapping turtle + leopard seal = snapping turtleopard seal
sparrow + owl = sparrowl
sperm whale + leech = sperm whaleech
sperm whale + leopard seal = sperm whaleopard seal
sponge + gecko = spongecko
swan + anaconda = swanaconda
wild boar + armadillo = wild boarmadillo</code></pre>
<p>Heh. Narwhalbatross. Wild boarmadillo. <img alt="smile" class="emoji" src="/emoji/smile.svg" /></p>
<p>And as a final bonus, using the <a href="https://github.com/stchang/graph/tree/master">graph</a> library I've used (and contributed to) before, we can render the structure of the thing):</p>
<pre class="bash"><code>$ racket portmanteau.rkt --graph --minimum-overlap 2 animals.txt \
    | sed "s/edge \[dir=none\];//g" \
    | fdp -Tpng &gt; animals.png \
    && open animals.png</code></pre>
<p><a href="http://blog.jverkamp.com/2015/04/07/generating-perfect-portmanteaus/animals.png" data-toggle="lightbox"><img src="http://blog.jverkamp.com/2015/04/07/generating-perfect-portmanteaus/animals.png" /></a></p>
<p>Fun. :)</p>
<p>Think of the arrows as going from the stuck on word to where it's sticking rather than in the order the words would be written. It's easy enough to change though if you'd like, just swap the arguments in the <code>add-edge!</code> call above.</p>
<p>And... that's it. Not much more to do with this one, unless I want to duplicate the above video and portmanteau all the things! We'll see.</p>
<p>As with all my code, you can see the entire thing on GitHub: <a href="https://github.com/jpverkamp/small-projects/blob/master/blog/portmanteau.rkt">portmanteau.rkt</a></p>]]></content></entry><entry><title>Ender in Exile</title><link href="http://blog.jverkamp.com/2015/04/06/ender-in-exile" /><id>urn:uuid:de289b67-a5f5-b9c9-05a4-58e38a793379</id><updated>2015-04-06T00:00:00Z</updated><summary type="html"><![CDATA[<p><a href="https://www.goodreads.com/book/show/375802.Ender_s_Game"><img src="http://blog.jverkamp.com/2015/04/06/ender-in-exile/1-enders-game.jpg" /></a> <a href="https://www.goodreads.com/book/show/552987.A_War_of_Gifts"><img src="http://blog.jverkamp.com/2015/04/06/ender-in-exile/1.5-a-war-of-gifts.jpg" /></a> <a href="https://www.goodreads.com/book/show/3220405-ender-in-exile"><img src="http://blog.jverkamp.com/2015/04/06/ender-in-exile/2-ender-in-exile.jpg" /></a></p>
<p><a href="https://www.goodreads.com/author/show/589.Orson_Scott_Card">Orson Scott Card's</a> <a href="https://www.goodreads.com/book/show/375802.Ender_s_Game">Ender's Game</a> has long been among my favorite science fiction novels<span class="footnote"><sup><a href="#footnote-1">[1]</a></sup></span>, ever since I first read it years ago. I've always found it interesting how, given the two branches of sequels to Ender's Game, most people prefer one or the other, either <a href="https://www.goodreads.com/series/43963-the-ender-quintet">Ender's Quintet</a> or <a href="https://www.goodreads.com/series/40409-ender-s-shadow">Ender's Shadow</a>. Personally, I tend towards the former, perhaps because I read it first, perhaps because it's more science fictiony and philosophical rather than militaristic and political.</p>
<p>So when I recently realized that between when I last read <a href="https://www.goodreads.com/book/show/7967.Speaker_for_the_Dead">Speaker for the Dead</a> et al, a new book had been released: <a href="https://www.goodreads.com/book/show/3220405-ender-in-exile">Ender in Exile</a>, taking place between Ender's Game and Speaker for the Dead. So of course I had to read it.</p>
]]></summary><content type="html"><![CDATA[<p><a href="https://www.goodreads.com/book/show/375802.Ender_s_Game"><img src="http://blog.jverkamp.com/2015/04/06/ender-in-exile/1-enders-game.jpg" /></a> <a href="https://www.goodreads.com/book/show/552987.A_War_of_Gifts"><img src="http://blog.jverkamp.com/2015/04/06/ender-in-exile/1.5-a-war-of-gifts.jpg" /></a> <a href="https://www.goodreads.com/book/show/3220405-ender-in-exile"><img src="http://blog.jverkamp.com/2015/04/06/ender-in-exile/2-ender-in-exile.jpg" /></a></p>
<p><a href="https://www.goodreads.com/author/show/589.Orson_Scott_Card">Orson Scott Card's</a> <a href="https://www.goodreads.com/book/show/375802.Ender_s_Game">Ender's Game</a> has long been among my favorite science fiction novels<span class="footnote"><sup><a href="#footnote-1">[1]</a></sup></span>, ever since I first read it years ago. I've always found it interesting how, given the two branches of sequels to Ender's Game, most people prefer one or the other, either <a href="https://www.goodreads.com/series/43963-the-ender-quintet">Ender's Quintet</a> or <a href="https://www.goodreads.com/series/40409-ender-s-shadow">Ender's Shadow</a>. Personally, I tend towards the former, perhaps because I read it first, perhaps because it's more science fictiony and philosophical rather than militaristic and political.</p>
<p>So when I recently realized that between when I last read <a href="https://www.goodreads.com/book/show/7967.Speaker_for_the_Dead">Speaker for the Dead</a> et al, a new book had been released: <a href="https://www.goodreads.com/book/show/3220405-ender-in-exile">Ender in Exile</a>, taking place between Ender's Game and Speaker for the Dead. So of course I had to read it.</p>
<!--more-->
<p>If you're familiar with the other novels in the Ender Quintet, Ender in Exile takes place between the end of the war in Ender's Game and the events some 3000 years later in Speaker for the Dead. It details the first world (and to some extent, the second) that Ender visits, overlapping with and somewhat replacing the final chapter of Ender's Game.</p>
<p>All together, it's a solid enough book. I enjoy--as I always have--the character of Ender, although he remains from time to time too perfect. I enjoy reading about some of the other characters in this world as well, especially the captain (he's a jerk, but a well characterized one) and the family from Italy. I still don't quite get Valentine, but she's not so odd</p>
<p>One thing that felt completely different about this book was how it edged on preachy at times. Long swathes of the book were dedicated to ideas from evolutionary psychology espousing monogamy, even in cases where there is a severe gender imbalance (as is the case with the initial soldiers turned colonists). It wasn't quite enough enough to kick me entirely out of the story, but it's something to keep in mind.</p>
<p>Another oddity is a problem that always comes up with prequels. Strictly speaking, Ender in Exile isn't supposed to be a prequel, but since it was written after books 3-5 of the Ender Quintent (and I read it after as well), there is a certain amount of knowing what will happen throughout the book that takes away a certain something. Add to that the chunk in the center of the book originally published (and I originally read) as the short story Gold Bug<span class="footnote"><sup><a href="#footnote-2">[2]</a></sup></span>, and it feels just a bit messy.</p>
<p>As an aside, I had not previously read the novella <a href="https://www.goodreads.com/book/show/552987.A_War_of_Gifts">A War of Gifts</a>, set during Ender's time at Battle School, so I took a chance to do so now. On the upside, it's a really interesting look both at how a dedicated pacifist would fare at Battle School (although if a six year old could remain so dedicated) and one of the few times in the time at Battle School that the children actually feel like children. It usually doesn't bother me, but it's nice to have at least this little nod. On the downside, I see no reason why Ender had to save the day yet again. It's a big school. Is there really no one anywhere nearly as good at reading people and understanding them as Ender is?</p>
<p>All together, I enjoyed both rereading Ender's Game and reading the new (for me) Ender in Exile. It's almost enough to get me to reread the rest of The Ender Quintet. We'll see. Instead though, I'm actually going to inject an aside to my <a href="http://blog.jverkamp.com/2015/01/01/2015-reading-list">2015 Reading List</a> and stay in the Enderverse a little while longer at least with the <a href="https://www.goodreads.com/series/72732-the-first-formic-war">First Formic War</a> trilogy. After that? Who knows!</p>]]></content></entry><entry><title>Performance problems with Flask and Docker</title><link href="http://blog.jverkamp.com/2015/04/03/performance-problems-with-flask-and-docker" /><id>urn:uuid:8d7d8e5b-effe-34a6-b190-d0068d5879a0</id><updated>2015-04-03T00:00:00Z</updated><summary type="html"><![CDATA[<p>I had an interesting problem recently on a project I was working on. It's a simple <a href="http://flask.pocoo.org/">Flask</a>-based webapp, designed to be deployed to <a href="https://aws.amazon.com/">AWS</a> using <a href="https://www.docker.com/">Docker</a>. The application worked just fine when I was running it locally, but as soon as I pushed the docker container...</p>
<p>Latency spikes. Bad enough that the application was failing AWS's healthy host checks, cycling in and out of existence<span class="footnote"><sup><a href="#footnote-1">[1]</a></sup></span>:</p>
<p><a href="http://blog.jverkamp.com/2015/04/03/performance-problems-with-flask-and-docker/health-check.png" data-toggle="lightbox"><img src="http://blog.jverkamp.com/2015/04/03/performance-problems-with-flask-and-docker/health-check.png" /></a></p>
]]></summary><content type="html"><![CDATA[<p>I had an interesting problem recently on a project I was working on. It's a simple <a href="http://flask.pocoo.org/">Flask</a>-based webapp, designed to be deployed to <a href="https://aws.amazon.com/">AWS</a> using <a href="https://www.docker.com/">Docker</a>. The application worked just fine when I was running it locally, but as soon as I pushed the docker container...</p>
<p>Latency spikes. Bad enough that the application was failing AWS's healthy host checks, cycling in and out of existence<span class="footnote"><sup><a href="#footnote-1">[1]</a></sup></span>:</p>
<p><a href="http://blog.jverkamp.com/2015/04/03/performance-problems-with-flask-and-docker/health-check.png" data-toggle="lightbox"><img src="http://blog.jverkamp.com/2015/04/03/performance-problems-with-flask-and-docker/health-check.png" /></a></p>
<!--more-->
<p>At that time, the only traffic to the container was the health checks, every 30 seconds, as regular as clockwork. So it wasn't load that was making them fail. And it was exactly the same code each time<span class="footnote"><sup><a href="#footnote-2">[2]</a></sup></span><span class="footnote"><sup><a href="#footnote-3">[3]</a></sup></span>:</p>
<pre class="python"><code>@app.route('/', methods = ['GET'])
def healthcheck():
    return "I'm a teapot"</code></pre>
<p>So not that either. So what in the world was going on?</p>
<p>Google to the rescue! <code><a href="https://www.google.com/search?q=flask application periodically slow">flask application periodically slow</a></code></p>
<p>The very first link is a response on StackOverflow:</p>
<blockquote>
    On operating systems that support ipv6 and have it configured such as modern Linux systems, OS X 10.4 or higher as well as Windows Vista some browsers can be painfully slow if accessing your local server. The reason for this is that sometimes âlocalhostâ is configured to be available on both ipv4 and ipv6 socktes and some browsers will try to access ipv6 first and then ivp4. -- <a href="http://stackoverflow.com/questions/11150343/slow-requests-on-local-flask-server">Slow Requests on Local Flask Server</a>
</blockquote>
<p>Huh. Get a shell into my docker container, and what do you know:</p>
<pre class="bash"><code>$ cat /etc/hosts
172.17.1.112	27392a3e0fa5
127.0.0.1	localhost
::1	localhost ip6-localhost ip6-loopback
fe00::0	ip6-localnet
ff00::0	ip6-mcastprefix
ff02::1	ip6-allnodes
ff02::2	ip6-allrouters</code></pre>
<p>Yup. <code>localhost</code> routes to both IPv4's <code>127.0.0.1</code> and IPv6's <code>::1</code>. Comment out the <code>::1</code> line and give it a shot... Yup. That did it. Waited ten minutes and the hosts weren't marked unhealthy once. All I should need to do is add it to the <code>Dockerfile</code> and we should be golden, yes?</p>
<pre class="text"><code>$ vi Dockerfile
...
RUN sed -i "s/::1.*//g"
...

$ docker build .
...
Step 9 : RUN sed -i "s/::1.*//g" /etc/hosts
 ---&gt; Running in 7c73dc473507
sed: cannot rename /etc/sedXZv0Yy: Device or resource busy</code></pre>
<p>What.</p>
<pre class="text"><code>$ vi Dockerfile
...
RUN sed "s/::1.*//g" /etc/hosts &gt; /etc/hosts-new && mv /etc/hosts-new /etc/hosts
...

$ docker build .
...
RUN sed "s/::1.*//g" /etc/hosts &gt; /etc/hosts-new && mv /etc/hosts-new /etc/hosts
 ---&gt; Running in d6b896f4fc9e
sed: cannot rename /etc/sedqYrfxO: Device or resource busy</code></pre>
<p>Double what.</p>
<p>Back to Google: <code><a href="https://www.google.com/search?q=docker edit hosts">docker edit hosts</a></code></p>
<p>Specifically: <a href="https://github.com/docker/docker/issues/1951">Unable to modify /etc/hosts file in a container #1951</a>. Looks like there was a fix that would let you edit <code>/etc/hosts</code> if you were in a container (that used to not be possible), but (because it's actually mounted rather than just a container file), it's non-trivial to edit it as part of a build.</p>
<p>All righty then.</p>
<p>That's about when I decided to listen to the Flask documentation:</p>
<blockquote>You can use the builtin server during development, but you should use a full deployment option for production applications. (Do not use the builtin development server in production.)</blockquote>
<p>All right. Not only is it what I'm actually supposed to be doing, but if I used CGI, I can avoid Flask trying to resolve <code>localhost</code> at all. I've worked with <a href="http://wiki.nginx.org/Main">nginx</a> before. Let's use that.</p>
<p>Picking some documentation from a hat, I decided to use <a href="https://uwsgi-docs.readthedocs.org/en/latest/">uWSGI</a> as the glue between nginx and Flask. Easy enough to install with pip (although I had to grab a C compiler from the apt package <code>build-essential</code>) and off we go.</p>
<p>First, a small <code>nginx</code> config:</p>
<pre class="nginx"><code>location / { try_files $uri @project; }
location @project {
    include uwsgi_params;
    uwsgi_pass unix:/tmp/uwsgi.sock;
}</code></pre>
<p>Then, to start it all up, a change to the <code>Dockerfile</code> <code>CMD</code>:</p>
<pre class="bash"><code>CMD uwsgi -s /tmp/uwsgi.sock -w project:app --chown-socket=www-data:www-data --enable-threads & \
    nginx -g 'daemon off;'</code></pre>
<p>That <code>--chown-socket</code> flag really drove me a bit batty. Basically, <code>uwsgi</code> was starting as the <code>root</code> user (within the Docker container). <code>nginx</code> was starting as <code>root</code>. But the <code>nginx</code> threads were not. They were starting as <code>www-data</code> and thus couldn't read the Unix socket between the two.</p>
<p>All righty then.</p>
<p>Let's go!</p>
<p>Starting successfully... And it's running. Not on the first try or even the 10th (I left out quite a bit of fumbling around tweaking flags), but eventually as was well in the world.</p>
<p>Push it out to AWS...</p>
<p>Health check passed.</p>
<p>Bam.</p>
<p>Awesome.</p>
<p>Now I not only have a neat little webapp, I have one that doesn't randomly decide to take forever on every other request or so.</p>
<p>If you're looking for the bare minimum <code>requirements.txt</code> and <code>Dockerfile</code> that I'm using (in addition to that <code>nginx</code> host configuration file above), here they are:</p>
<p><code>requirements.txt</code></p>
<pre class="text"><code>flask
flup6
uwsgi</code></pre>
<p><code>Dockerfile</code>:</p>
<pre class="text"><code>FROM ubuntu:14.04

RUN apt-get update && apt-get install -y build-essential nginx python3.4 python3.4-dev
RUN easy_install3 pip

WORKDIR /project

ADD requirements.txt /project/requirements.txt
RUN pip install -r requirements.txt

ADD . /project

ADD nginx /etc/nginx

CMD uwsgi -s /tmp/uwsgi.sock -w project:app --chown-socket=www-data:www-data --enable-threads & \
    nginx -g 'daemon off;'</code></pre>
<p>It's for moments like these that I do software. That little moment when everything comes together just right and it all just ... works.</p>]]></content></entry></feed>