<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>jverkamp.com</title><link href="http://blog.jverkamp.com" /><link rel="self" href="http://blog.jverkamp.com/feed/" /><updated>2015-03-13T00:00:00Z</updated><author><name>JP Verkamp</name></author><id>urn:uuid:f148b655-ada3-c720-0c01-ca384ab68088</id><entry><title>Alpha and Omega</title><link href="http://blog.jverkamp.com/2015/03/13/alpha-and-omega" /><id>urn:uuid:4fba16fd-f197-c4b3-dc04-facf8a172097</id><updated>2015-03-13T00:00:00Z</updated><summary type="html"><![CDATA[<p><a href="https://www.goodreads.com/book/show/2355575.Cry_Wolf"><img src="http://blog.jverkamp.com/2015/03/13/alpha-and-omega/1-cry-wolf.jpg" /></a> <a href="https://www.goodreads.com/book/show/5292853-hunting-ground"><img src="http://blog.jverkamp.com/2015/03/13/alpha-and-omega/2-hunting-ground.jpg" /></a> <a href="https://www.goodreads.com/book/show/7942786-fair-game"><img src="http://blog.jverkamp.com/2015/03/13/alpha-and-omega/3-fair-game.jpg" /></a> <a href="https://www.goodreads.com/book/show/18941694-dead-heat"><img src="http://blog.jverkamp.com/2015/03/13/alpha-and-omega/4-dead-heat.jpg" /></a></p>
<p>Series number five: <a href="https://www.goodreads.com/series/45135-alpha-omega">Alpha &amp; Omega</a> by <a href="https://www.goodreads.com/author/show/40563.Patricia_Briggs">Patricia Briggs</a>.</p>
<p>It's not that often I actually read two books/series in the same genre back to back. But after <a href="http://blog.jverkamp.com/2015/02/20/the-iron-druid-chronicles">The Iron Druid Chronicles</a> last time and <a href="https://www.goodreads.com/series/54966-white-trash-zombie">White Trash Zombie</a> up next, we've got something of an interesting contrast.</p>
]]></summary><content type="html"><![CDATA[<p><a href="https://www.goodreads.com/book/show/2355575.Cry_Wolf"><img src="http://blog.jverkamp.com/2015/03/13/alpha-and-omega/1-cry-wolf.jpg" /></a> <a href="https://www.goodreads.com/book/show/5292853-hunting-ground"><img src="http://blog.jverkamp.com/2015/03/13/alpha-and-omega/2-hunting-ground.jpg" /></a> <a href="https://www.goodreads.com/book/show/7942786-fair-game"><img src="http://blog.jverkamp.com/2015/03/13/alpha-and-omega/3-fair-game.jpg" /></a> <a href="https://www.goodreads.com/book/show/18941694-dead-heat"><img src="http://blog.jverkamp.com/2015/03/13/alpha-and-omega/4-dead-heat.jpg" /></a></p>
<p>Series number five: <a href="https://www.goodreads.com/series/45135-alpha-omega">Alpha &amp; Omega</a> by <a href="https://www.goodreads.com/author/show/40563.Patricia_Briggs">Patricia Briggs</a>.</p>
<p>It's not that often I actually read two books/series in the same genre back to back. But after <a href="http://blog.jverkamp.com/2015/02/20/the-iron-druid-chronicles">The Iron Druid Chronicles</a> last time and <a href="https://www.goodreads.com/series/54966-white-trash-zombie">White Trash Zombie</a> up next, we've got something of an interesting contrast.</p>
<!--more-->
<p>Back to Alpha &amp; Omega. I'd previously read the <a href="https://www.goodreads.com/series/40932-mercy-thompson">Mercy Thompson</a> series, set in the same universe. It is a really interesting world in which a subset of the supernatural critters (only the fae at the start of the series) are 'out' in the public consciousness. Since the story is told from the perspective of various supernaturals and takes place primarily in their world, Briggs manages to avoid some of the problems that would come with such a revelation.</p>
<p>After reading both Alpha &amp; Omega and Mercy Thompson, I'm really hard pressed to say which series I like more. There's a certain familiarity and depth to Mercy, being the older (for me) and longer series, but Alpha &amp; Omega is the new shiny. It's nice to see a contrast between the mostly outsider perspective into the lives of werewolves that Mercy brings versus a wolf's look from Anna.</p>
<p>The fantastic elements to this story are well thought out, with a particularly interesting amount of attention paid to the relative dominance of werewolves and how that influences their ranks within the pack. Although it turns out that the original studies about alpha wolves aren't actually that great<span class="footnote"><sup><a href="#footnote-1">[1]</a></sup></span>, it's still an interesting aspect for the story.</p>
<p>In addition to the wolves, you get the normal rogues gallery common in most urban fantasy. It turns out every story about things that go bump in the night is true. Vampires? Fae? Witches? Present and accounted for. It was particularly interesting reading the last book in Alpha &amp; Omega after reading <a href="http://blog.jverkamp.com/2015/02/20/the-iron-druid-chronicles">The Iron Druid Chronicles</a> and <a href="https://www.goodreads.com/series/40346-the-dresden-files">The Dresden Files</a>. There's a bit more influence from / reference to Navajo myths and it's interesting to see how each series does it differently.</p>
<p>One note, for better or for worse. Alpha &amp; Omega deals a lot more with themes of helplessness and rape (although Mercy had some as well). It was at times uncomfortable even for me; I can't really imagine how it would read to someone that had to live through such things.</p>
<p>Overall, Alpha &amp; Omega is an excellent series, easily my favorite out of the ones I've read thus far this year. I still couldn't say if I would recommend it over Mercy Thompson or vice versa. Honestly, if you have the time, read both. The timelines are intermixed (with some mostly small references between them), so you could even read alternating books.</p>
<p>So far this year, that puts me at 24 books out of 100 after two and a half months. I've fallen behind a bit (only 5 books ahead of schedule instead of 7), but still well on my way.</p>
<p>Up next: <a href="https://www.goodreads.com/series/54966-white-trash-zombie">White Trash Zombie</a> by <a href="https://www.goodreads.com/author/show/852078.Diana_Rowland">Diana Rowland</a>.</p>]]></content></entry><entry><title>Pescadero State Beach</title><link href="http://blog.jverkamp.com/2015/03/07/pescadero-state-beach" /><id>urn:uuid:3aec8073-c62f-58e7-f17b-02d715fd328d</id><updated>2015-03-07T00:00:00Z</updated><summary type="html"><![CDATA[<p>Another beach! This time A borrowed the camera and took a few pictures of a. Adorable. :)</p>
<div><div class="flickr-gallery" data-set-id="72157651233600192" data-per-page="30"></div><p><a href="https://flickr.com/photos/jpverkamp/sets/72157651233600192">View on Flickr</a></p></div>]]></summary><content type="html"><![CDATA[<p>Another beach! This time A borrowed the camera and took a few pictures of a. Adorable. :)</p>
<div><div class="flickr-gallery" data-set-id="72157651233600192" data-per-page="30"></div><p><a href="https://flickr.com/photos/jpverkamp/sets/72157651233600192">View on Flickr</a></p></div>]]></content></entry><entry><title>Pomponio State Beach</title><link href="http://blog.jverkamp.com/2015/02/28/pomponio-state-beach" /><id>urn:uuid:f7c6e00a-40ce-b01f-79f9-e16fb400f039</id><updated>2015-02-28T00:00:00Z</updated><summary type="html"><![CDATA[<p>It's been far too long since I took my camera out. Since our original morning plans got rained out, we decided to go to the beach instead. It's lovely being able to just drive to the ocean on a whim.</p>
<div><div class="flickr-gallery" data-set-id="72157650686478158" data-per-page="30"></div><p><a href="https://flickr.com/photos/jpverkamp/sets/72157650686478158">View on Flickr</a></p></div>]]></summary><content type="html"><![CDATA[<p>It's been far too long since I took my camera out. Since our original morning plans got rained out, we decided to go to the beach instead. It's lovely being able to just drive to the ocean on a whim.</p>
<div><div class="flickr-gallery" data-set-id="72157650686478158" data-per-page="30"></div><p><a href="https://flickr.com/photos/jpverkamp/sets/72157650686478158">View on Flickr</a></p></div>]]></content></entry><entry><title>The Iron Druid Chronicles</title><link href="http://blog.jverkamp.com/2015/02/20/the-iron-druid-chronicles" /><id>urn:uuid:b7de8f5f-07ce-a841-53bb-be60df2c806f</id><updated>2015-02-20T00:00:00Z</updated><summary type="html"><![CDATA[<p><a href="https://www.goodreads.com/book/show/9533378-hounded"><img src="http://blog.jverkamp.com/2015/02/20/the-iron-druid-chronicles/1-hounded.jpg" /></a> <a href="https://www.goodreads.com/book/show/9595650-hexed"><img src="http://blog.jverkamp.com/2015/02/20/the-iron-druid-chronicles/2-hexed.jpg" /></a> <a href="https://www.goodreads.com/book/show/9595620-hammered"><img src="http://blog.jverkamp.com/2015/02/20/the-iron-druid-chronicles/3-hammered.jpg" /></a> <a href="https://www.goodreads.com/book/show/12700306-tricked"><img src="http://blog.jverkamp.com/2015/02/20/the-iron-druid-chronicles/4-tricked.jpg" /></a> <a href="https://www.goodreads.com/book/show/13536649-trapped"><img src="http://blog.jverkamp.com/2015/02/20/the-iron-druid-chronicles/5-trapped.jpg" /></a> <a href="https://www.goodreads.com/book/show/16071748-hunted"><img src="http://blog.jverkamp.com/2015/02/20/the-iron-druid-chronicles/6-hunted.jpg" /></a> <a href="https://www.goodreads.com/book/show/16280678-shattered"><img src="http://blog.jverkamp.com/2015/02/20/the-iron-druid-chronicles/7-shattered.jpg" /></a></p>
<p>On to my fourth series this year: <a href="https://www.goodreads.com/series/52837-the-iron-druid-chronicles">The Iron Druid Chronicles</a> by <a href="https://www.goodreads.com/author/show/4414255.Kevin_Hearne">Kevin Hearne</a>.</p>
<p>First, let's start with the good parts:</p>
<p>I really like urban fantasy series and this is a fairly prototypical example there of. It's always interesting to see how an author marries the real world with various mythologies. In particular, this series forcuses on Irish mythology, which is something that I haven't really had that much experience with.</p>
]]></summary><content type="html"><![CDATA[<p><a href="https://www.goodreads.com/book/show/9533378-hounded"><img src="http://blog.jverkamp.com/2015/02/20/the-iron-druid-chronicles/1-hounded.jpg" /></a> <a href="https://www.goodreads.com/book/show/9595650-hexed"><img src="http://blog.jverkamp.com/2015/02/20/the-iron-druid-chronicles/2-hexed.jpg" /></a> <a href="https://www.goodreads.com/book/show/9595620-hammered"><img src="http://blog.jverkamp.com/2015/02/20/the-iron-druid-chronicles/3-hammered.jpg" /></a> <a href="https://www.goodreads.com/book/show/12700306-tricked"><img src="http://blog.jverkamp.com/2015/02/20/the-iron-druid-chronicles/4-tricked.jpg" /></a> <a href="https://www.goodreads.com/book/show/13536649-trapped"><img src="http://blog.jverkamp.com/2015/02/20/the-iron-druid-chronicles/5-trapped.jpg" /></a> <a href="https://www.goodreads.com/book/show/16071748-hunted"><img src="http://blog.jverkamp.com/2015/02/20/the-iron-druid-chronicles/6-hunted.jpg" /></a> <a href="https://www.goodreads.com/book/show/16280678-shattered"><img src="http://blog.jverkamp.com/2015/02/20/the-iron-druid-chronicles/7-shattered.jpg" /></a></p>
<p>On to my fourth series this year: <a href="https://www.goodreads.com/series/52837-the-iron-druid-chronicles">The Iron Druid Chronicles</a> by <a href="https://www.goodreads.com/author/show/4414255.Kevin_Hearne">Kevin Hearne</a>.</p>
<p>First, let's start with the good parts:</p>
<p>I really like urban fantasy series and this is a fairly prototypical example there of. It's always interesting to see how an author marries the real world with various mythologies. In particular, this series forcuses on Irish mythology, which is something that I haven't really had that much experience with.</p>
<!--more-->
<p>Another thing I liked is how many/all of various religious figures are represented. It gets a little crazy at times, seeing how various aspects of all the different world religious figures are all all out and about but it's fun to see them interact. I was particularly amused when Mary (yup, that Mary) showed up. That's not something I've often seen.</p>
<p>Finally, the books are really funny. Some of the humor was more than a little crude. I particularly enjoyed a lot of the mental back and forth between Atticus and his hound. While I agree with a lot of other reviews I've read about the series in that the latter doesn't actually feel like a dog, but that's not really the point. The point is that he's funny. <img alt="smile" class="emoji" src="/emoji/smile.svg" /></p>
<p>Okay, now the less than great parts:</p>
<p>Atticus is supposed to be 2,100 years old. He really doesn't feel it. He claims that he's gotten very good at fitting in with modern young adults, but there's never really a sense of age or weight to him. He comments on all manner of events that he's been involved in, but there's really nothing to it other than those slight mentions.</p>
<p>How in the world have none of the mortal gods died by the beginning of the series? In the very first book, it becomes all too obvious that gods can be killed. But we're supposed to believe that pretty much all of them have survived for millenia until Atticus happens to come around? All righty then.</p>
<p>There is a tendency towards a male fantasy centric / sexist view, especially in the earlier books. I'd be willing to be that the author got more than a few reviews and comments about this and it is toned down somewhat by the latter books. Still, the idea of random goddesses and other woman seemingly ranodmly falling for the main character and the sidekick dog's obsession with poodles are offputting.</p>
<p>All that being said, there's an obvious comparison (at least in my mind) between this series and <a href="https://www.goodreads.com/series/40346-the-dresden-files">The Dresden Files</a> by <a href="https://www.goodreads.com/author/show/10746.Jim_Butcher">Jim Butcher</a>. They are both urban fantasy series with a male-fantasy-powerful male protagonist; they both rely heavily on a quick moving snarky sense of humor. Iron Druid starts out at a higher level, although the latter Dresden Books do catch up rather well. All together, if you're only going to read one of them read The Dresden Files. But if you run out of Dresden Files, you could do worse than The Iron Druid Chronicles.</p>
<p>So far this year, that puts me at 20 books out of 100 after 51 days; 7 books ahead of schedule. I guess that's another indicator for how much I wanted to keep reading the Iron Druid Chronicles.</p>
<p>Up next, more urban fantasy! <a href="https://www.goodreads.com/series/45135-alpha-omega">Alpha &amp; Omega</a> by <a href="https://www.goodreads.com/author/show/40563.Patricia_Briggs">Patricia Briggs</a>.</p>]]></content></entry><entry><title>Writing Excuses prompt: Interviews</title><link href="http://blog.jverkamp.com/2015/02/13/writing-excuses-prompt-interviews" /><id>urn:uuid:0a19eae4-4fc0-3a0f-9b24-4abc07ffae94</id><updated>2015-02-13T00:00:00Z</updated><summary type="html"><![CDATA[<p><strong><a href="http://www.writingexcuses.com/2015/01/25/writing-excuses-10-4-qa-on-ideas/">Writing Excuses 10.4: Q&A on Ideas</a> writing prompt</strong>: <em>Take one of the ideas you're excited about, and then audition five different characters for the lead role in that story. Make sure they're all different from each other.</em></p>
<hr />
<p>"So what brings you all of the way out here?"</p>
<p>The man on the other side of the table blinked. That was all the more reaction he showed, but it was more than I had seen since he'd entered the building.</p>
]]></summary><content type="html"><![CDATA[<p><strong><a href="http://www.writingexcuses.com/2015/01/25/writing-excuses-10-4-qa-on-ideas/">Writing Excuses 10.4: Q&A on Ideas</a> writing prompt</strong>: <em>Take one of the ideas you're excited about, and then audition five different characters for the lead role in that story. Make sure they're all different from each other.</em></p>
<hr />
<p>"So what brings you all of the way out here?"</p>
<p>The man on the other side of the table blinked. That was all the more reaction he showed, but it was more than I had seen since he'd entered the building.</p>
<!--more-->
<p>"The job?"</p>
<p>Mentally, I shook my head. Of course he'd come for the job. That wasn't the point. The entire thing was something of a test.</p>
<p>"It's a bit of a long way to go for work."</p>
<p>Based on his robe and rope belt, I had a sneaking suspicion that he was from some religious order or another. It seemed unlikely that he was looking for a new job, so there had to be something else there.</p>
<p>He just nodded.</p>
<p>Perhaps a different tack.</p>
<p>"You know what the job will entail?"</p>
<p>He nodded again.</p>
<p>I paused a moment, but when he remained silent I prompted, "care to elaborate?"</p>
<p>"I'm here to step through a hole in the end of the world."</p>
<p>It was an oddly poetic answer. But then again, if he actually were a man of the cloth it made some manner of sense. A lifetime devoted to the study of one holy text or another would do that to you.</p>
<p>The next was the most important question of the interview. Given the ... unique situation I found myself in...</p>
<p>"Why?"</p>
<p>He studied me for a long moment before answering. *Good* I thought. That was good.</p>
<p>"Because He is calling to me."</p>
<p>I swear I could hear the capital in his voice. Not entirely sure that I even wanted to know the answer, I asked the obvious question.</p>
<p>"Who?"</p>
<p>"He-Who-Waits" His eyes had grown wide and almost warm, although how such an adjective could be applied to one's eyes, I couldn't quite describe. "He-Who-Lives-Beyond"</p>
<p>"And this 'He-Who-Waits'," I asked, "what will you do if you find him?</p>
<p>A shake of his head and a smile was all the answer I got. No matter how I rephrased the question, he refused to answer.</p>
<p>If it had been up to me, that right there would have been enough to remove him from the pool of applicants, small as it was. Unfortunately though, for me as much as for them, it wasn't up to be.</p>
<p>And the powers that be had been very clear.</p>
<p>Madness was *not* to be considered a deal breaker.</p>
<hr />
<p>The second and third candidates for the position came in together, holding hands in fact.</p>
<p>The first woman was tall and thin, with a veritable name of unruly red hair drawing attention onwards and upwards. I could have sworn I saw twigs tangled throughout and--stranger yet--what appeared to be a potted tree sticking out of one over large pocket.</p>
<p>The second seemed as tied to get machines as the first was to nature. She walked with an odd gate, every second step taking longer than the one before, swinging outwards with a dull thump unlike a footfall had any right to sound.</p>
<p>They took their seats as one, not letting go of one another even as they did, instead scooting the chairs ever closer, just so they could reach without a strain.</p>
<p>"Hi!" the first woman exclaimed. I don't believe I've ever before or since heard a voice better matching the description of sunshine. "I'm Flora."</p>
<p>"Cogs." The other woman's reply wasn't rude, strictly speaking, just on the very edge of curt.</p>
<p>And those names...</p>
<p>Based on the nature of our work--and the position we were attempting to fill in particular--we had suggested, né required that applicants not use their real names. Names have power, and if there's one thing the Others don't need, it's more power over us mere mortals.</p>
<p>Still, they could at least have tried to make up slightly less unusual names.</p>
<p>* * * * *</p>
<p>"Why?" I asked. Despite their nom de choice, the two women were among the best candidates I'd had yet. Truth be told, given how far we were from even the fringes of civilization, it was a miracle that we had choices at all.</p>
<p>To my surprise, Cogs was the first to answer. Up until now, Flora had been taking point, with her friend only chiming in for the few questions with a more mechanical gent.</p>
<p>"They say the rules are different there. Machines don't work. Physics is less rigid. Navigation isn't always reliable."</p>
<p>I nodded to each point. That was often among the more difficult aspect for applicants to wrap their heads around. The rules we'd all grown up with just didn't work on the other side of the portal. To most, it was disorientating, sickening even. To some--like Cogs apparently--it was intriguing.</p>
<p>"And you?" I turned to Flora.</p>
<p>"Isn't it obvious?" Her voice was low, lilting. "I want to be the first to find Otherlife."</p>
<p>I blinked at her. It wasn't the first time I'd heard the idea--the monk had seemed to think there'd be life there at least. But thus far, the other side had been entirely sterile. The only life was what we brought with us, even if it did tend to go... strange, given enough time.</p>
<p>"And if you find it," I asked, "what then?" I was sure my employers wouldn't actually care about that particular question, but I was actually a little curious myself.</p>
<p>She waited a moment before answering, watching me closely. I had the feeling she was weighing me, judging me. As if I were the interviewee, rather than the other way around.</p>
<p>"We've already screwed up this world," she finally said with a nod. "I want to find a world where we can do better. I want to give life a chance."</p>
<p>That sounded like just the right sort of crazy to me. Ultimately it would be up to the powers that were to choose whether or not the lair of them were chosen. I thought they had a chance though.</p>
<hr />
<p>The final interview candidate looked a little bit off even as he walked through the door. It wasn't until he sat down and looked right at me that I could begin to figure out why though.</p>
<p>The first thing that jumped out at me was the eyes. Pale blue, so pale they were almost white. I hadn't seen anyone with eyes that color before. And the pupils. They weren't entirely... Round. Slightly oblong, although without another pair of eyes to compare too, I couldn't say for certain how different they were.</p>
<p>After a sufficiently long pause where I was sure he was beginning to wonder if perhaps he had somehow miraculously come to the wrong place, I finally greeted him. "Good morning."</p>
<p>He smiled.</p>
<p>That was when I got the second surprise--his teeth were ground each to a fine point, overlapping I'm a saw tooth pattern. And it wasn't just that, it couldn't be. To have been ground like that, they couldn't have started out at a normal human size. They had to have been several times that to begin with.</p>
<p>"Good morning," he intoned. Third surprise: his voice was unusually high, edging well into the range of an alto. And neither was a single harmonic, as voices tended towards, but rather a complex layering, a choir all in one.</p>
<p>What <em>was</em> this man?</p>
<p>* * * * *</p>
<p>"So tell me," I asked. "Why do you want the job?" Although the strangeness kept mounting, I still couldn't quite figure out what the man was. I had seen all manner of strange men and women in my travels, but nothing quite like this. It was almost like he didn't quite fit together.</p>
<p>The man answered almost immediately, that layered voice every bit as intriguing as the first I had heard it. I don't think I would ever tire of listening to him. "New parts."</p>
<p>I blinked.</p>
<p>"What?"</p>
<p>He smiled. It wasn't a jovial smile, but rather a predatory one. His eyes glinted, that pale blue catching the light.</p>
<p>He raised his hand, turning it slowly, watching it as he did.</p>
<p>It took me a moment, but eventually I noticed. Running along the back of each finger, right where the tendons would have been was a thin spoke of what looked like bone. I thought at first that he was wearing some sort of glove, but it moved too smoothly, pulling against the skin in too natural a way.</p>
<p>It was part of his hand.</p>
<p>The hand. They eyes. The legs.</p>
<p>This wasn't a single man, this was a patchwork. A mix of who knew how many different organisms.</p>
<p>That predatory glint in his eyes? For all I knew, they were actually a predator's eyes.</p>
<p>This was something I hadn't ever heard of before. Some sort of magic? Whether or not the powers in charge of the expedition wanted him, I was going to have to keep an eye on this one.</p>
<hr />
<p>Why do I want to go? Is that your question?</p>
<p>Well, everyone is looking for something. Be it an alien god or a new set of rules for reality, there's always something.</p>
<p>But me? I study people. That's the reason you hired me in the first place, isn't it? Because I can see how people think, and because it fascinates me to do so.</p>
<p>Well I really want to see what happens to long term explorers in this Otherspace. To date, we've only sent out small trips, a day or two at most.</p>
<p>Even in those, there were changes. Small neurosis, changes so slight you wouldn't even notice them if you weren't watching carefully.</p>
<p>Me, I've been watching carefully.</p>
<p>What will happen if you take a group through for weeks, even months at a time? I don't know. No one does. Well, except maybe He-Who-Waits. You'll have to take that up with the monk though.</p>
<p>But I do know one thing for certain.  I can't wait to find out.</p>]]></content></entry><entry><title>Writing Excuses prompt: Lovecraftian horror</title><link href="http://blog.jverkamp.com/2015/02/02/writing-excuses-prompt-lovecraftian-horror" /><id>urn:uuid:860bf0bd-2efc-837e-4434-de6e69df743b</id><updated>2015-02-02T00:00:00Z</updated><summary type="html"><![CDATA[<p><strong><a href="http://www.writingexcuses.com/2015/01/20/writing-excuses-10-3-lovecraftian-horror/">Writing Excuses 10.3 </a> writing prompt</strong>: <em>Take a character, and from that character's point of view, describe their reaction to something horrific and awful, but do so without describing the thing itself.</em></p>
<hr />
<p>The old man watched the world end. He knew that he should have been bothered by this, he knew that he should have cared. But he was two wars and uncountable battles beyond caring. When he had been a younger man, something such as this would have mattered, would have gotten a rise out of him. Heck, that was the reason he had gone to battle in the first place wasn't it? The first Great Incursion?</p>
]]></summary><content type="html"><![CDATA[<p><strong><a href="http://www.writingexcuses.com/2015/01/20/writing-excuses-10-3-lovecraftian-horror/">Writing Excuses 10.3 </a> writing prompt</strong>: <em>Take a character, and from that character's point of view, describe their reaction to something horrific and awful, but do so without describing the thing itself.</em></p>
<hr />
<p>The old man watched the world end. He knew that he should have been bothered by this, he knew that he should have cared. But he was two wars and uncountable battles beyond caring. When he had been a younger man, something such as this would have mattered, would have gotten a rise out of him. Heck, that was the reason he had gone to battle in the first place wasn't it? The first Great Incursion?</p>
<!--more-->
<p>Even then, the battles had been relatively clean. A thousand fighter jets no more than a swarm of gnats. Megatons of warheads dwarfed to pinpricks of light. A fight that lasted three days, claiming more than half the lives of the worlds most populous nations. But still. Clean. Clean fighting, clean deaths, clean annihilation. He had gone in knowing that there was nothing that he could do. Nothing that any of them could do. Yet he had gone.</p>
<p>And they had done it.</p>
<p>They had won.</p>
<p>The Second Incursion was worse.</p>
<p>Tiny, instead of huge; myriad rather than singular. Appearing in the shadows between two ears of corn, they ate and ate, gorging themselves on what humanity could ill afford to lose. It wasn't fighters and warheads this time, it was chemicals and flames.</p>
<p>Many claimed that they couldn't possibly be related to the First Incursion, they were far too different. The xenogeneticists put that particularly theory to rest, although there were few enough of those left when all was said and done. Few enough of any such lofty ideals in a world on the brink of starvation.</p>
<p>Now <em>it</em> was here. The mother of all things wrong in the universe and he couldn't even bring himself to care. The Third Incursion.</p>
<p>It wasn't clean like the First, nor all consuming like the Second.</p>
<p>Nothing like what he was seeing in front of him now, on a thousand channels, the individuals each with their fifteen minutes, fueled by an Internet just reborn.</p>
<p>Even when he felt the shuddering beneath his feet, the very plates that made up the world beneath him bowing to one far greater than they, he just couldn't bring himself to care.</p>
<hr />
<p>Not sure that I exactly got what the prompt was after, but I think it's close enough to the idea. Horror--especially cosmic horror in the ilk of Lovecraft--is a genre I particularly want to try, for exactly this reason.</p>]]></content></entry><entry><title>iOS Backups in Racket: Apps</title><link href="http://blog.jverkamp.com/2015/01/29/ios-backups-in-racket-apps" /><id>urn:uuid:761445ba-06be-d1cd-b496-1e52081d2f71</id><updated>2015-01-29T00:00:00Z</updated><summary type="html"><![CDATA[<p>So far we've read <a href="http://blog.jverkamp.com/2015/01/22/ios-backups-in-racket-groundwork">backup files</a>, parsed <a href="http://blog.jverkamp.com/2015/01/23/ios-backups-in-racket-contacts">contacts</a>, and parsed <a href="http://blog.jverkamp.com/2015/01/27/ios-backups-in-racket-messages">messages</a>. Today we're going to dig a little deeper and start parsing apps specifically.</p>
]]></summary><content type="html"><![CDATA[<p>So far we've read <a href="http://blog.jverkamp.com/2015/01/22/ios-backups-in-racket-groundwork">backup files</a>, parsed <a href="http://blog.jverkamp.com/2015/01/23/ios-backups-in-racket-contacts">contacts</a>, and parsed <a href="http://blog.jverkamp.com/2015/01/27/ios-backups-in-racket-messages">messages</a>. Today we're going to dig a little deeper and start parsing apps specifically.</p>
<!--more-->
<p>First things first, let's get a list of applications. That's actually in two different files: <code>Manifest.plist</code> and <code>Manifest.mbdb</code>. In versions of iTunes prior to 9.2, <code>Manifest.plist</code> had a nice listing of files, but now it only contains the list of applications. Still, that's a good enough place to start.</p>
<p>Remember back in the <a href="http://blog.jverkamp.com/2015/01/22/ios-backups-in-racket-groundwork">first post</a>? We learned how how to read plist files. In this one in particular, we have a list of installed applications, using their internal names:</p>
<pre class="racket"><code>(struct app (name plist files) #:prefab #:mutable)
(struct file (name path) #:prefab)

; List all installed applications
(define (list-apps)
  (hash-ref!
   apps-by-backup
   (current-backup)
   (λ ()
     (for/list ([name (in-list
                       (hash-ref
                        (call-with-input-file
                          (build-path (backup-path (current-backup))
                                                   "Info.plist")
                          read-plist/jsexpr)
                        '|Installed Applications|))])
       (app name #f #f)))))</code></pre>
<p>For the moment, we'll leave out the plist and files. Eventually, plist is going to store a list of properties stored with the application (all apps have it, even if some don't store anything interesting). Files will store any files stored in the local filesystem for app in specific.</p>
<p>So how does it work?</p>
<pre class="racket"><code>&gt; (with-backup "86b1...aa36"
    (map app-name (list-apps)))
'("com.google.Maps"
  "com.apple.mobilesms.notification"
  "com.roku.ios.roku"
  ...
  "com.apple.iBooks"
  "com.apple.MobileSMS"
  "com.apple.CoreAuthUI")</code></pre>
<p>Neat. That's pretty much exactly what I was hoping to see.</p>
<p>Next, let's load up the plists. On doing some digging around, it looks like every app will have a file with a path something like <code>AppDomain-Library/Preferences/{app-name}.plist</code>, so let's try to load that:</p>
<pre class="racket"><code>; Load an app's plist file
(define (load-plist! app)
  (set-app-plist!
   app
   (let ([plist-path
          (build-path
           (backup-path (current-backup))
           (hash-filename
            (~a "Library/Preferences/" (app-name app) ".plist")
            (~a "AppDomain-" (app-name app))))])

     ; Try to load in text mode first, if that fails fall back to binary
     (with-handlers ([exn? (λ (exn)
                             (call-with-input-file plist-path
                               read-plist/jsexpr/binary))])
       (call-with-input-file plist-path read-plist/jsexpr)))))</code></pre>
<p>Here we run into our first wrinkle. It turns out that while the <code><a href="http://docs.racket-lang.org/search/index.html?q=xml/plist">xml/plist</a></code> file works just fine on the text format plist files, it doesn't deal well with binary ones. And unfortunately most (if not all) apps use the binary format. So we need something that will be able to convert and load those (warning, this is ugly):</p>
<pre class="racket"><code>; Read a plist file as a JSON expression from a binary plist file
(define (read-plist/jsexpr/binary [in (current-input-port)])
  ; Copy the file to a temporary path
  (define temp-filename (~a (gensym) ".plist"))
  (call-with-output-file temp-filename
    (λ (out) (copy-port in out)))

  ; Run Apple's plutil to convert it
  ; Redirect err to suppress from missing programs
  (parameterize ([current-error-port (open-output-nowhere)])
    (for* ([path
            (in-list
              '("plutil"
                "plutil.exe"
                "\"C:\\Program Files (x86)\\Common Files\\Apple\\Apple Application Support\\plutil.exe\""
                ""\"C:\\Program Files\\Common Files\\Apple\\Apple Application Support\\plutil.exe\""))]
           [return (in-value (system (~a path " -convert xml1 " temp-filename)))]
           #:break return)
      #t))

  ; Patch over xml/plist's handling of empty string element
  (define plist-fixed-content
    (regexp-replace* #px"&lt;string&gt;&lt;/string&gt;"
                     (file-&gt;string temp-filename)
                     "&lt;string&gt; &lt;/string&gt;"))
  (delete-file temp-filename)

  ; Read the plist into memory and remove the temporary file
  (call-with-input-string plist-fixed-content read-plist/jsexpr))</code></pre>
<p>Basically, if you have iTunes installed, it comes with a program (on Windows, it's built in on OSX) called <code>plutil</code>. That can be used to convert between binary, xml, and json formats of plist files. Unfortunately though, the json format cannont handle a lot of plists, so we have to convert to xml and then use our previous <code>plist->jsexpr</code> function to convert it.</p>
<p>Other hacks: we have to copy it to a temporary file. It's probably possible to open <code>plutil</code> and pass the file on stdin and read from stdout instead, but this works so we'll leave it as is for the moment.</p>
<p>Finally, another caveat of the <code><a href="http://docs.racket-lang.org/search/index.html?q=xml/plist">xml/plist</a></code> library: it breaks on empty string elements. So there's a fix above to take any empty string elements and insert a single space into them. Hacky, but so it goes. When all this is said and done though, we can use this to read in the plist data for an application:</p>
<pre class="racket"><code>&gt; (with-backup "86b18eea28a991f4dd569d1f59737a842e24aa36"
    (let ([app (list-ref (list-apps) 12)])
      (load-plist! app)
      app))

'#s((app #(0 1 2))
    "com.google.Maps"
    #hash((WebKitCacheModelPreferenceKey . 1)
          (WebKitDiskImageCacheSavedCacheDirectory . " ")
          (WebKitMediaPlaybackAllowsInline . #t)
          (WebKitOfflineWebApplicationCacheEnabled . #t)
          (WebKitShrinksStandaloneImagesToFit . #t)
          ...
          (kGIPMicPermissionControllerPermissionRequested . #t)
          (kGMSMapsUserClientLegalCountry . "US")
          (kGMSUserEvent3LoggerSequenceIDKey . 8860))
    #f)</code></pre>
<p>Whee! For any particular app, I'm not entirely sure what I'm looking for, but there's a whole heck of a lot of information there.</p>
<p>But one thing that I was hoping to find is still missing: a list of files for a given application. I was hoping each application would know that, but apparently not. Then again, why would they? A given application probably knows exactly what files it's looking for, it doesn't have to list them.</p>
<p>Fine. I guess I have to read that <code>Manifest.mbdb</code> file.</p>
<pre class="bash"><code>$ xxd "Manifest.mbdb"

0000000: 6d62 6462 0500 001d 4170 7044 6f6d 6169  mbdb....AppDomai
0000010: 6e2d 636f 6d2e 6f6f 6b6c 612e 7370 6565  n-com.ookla.spee
0000020: 6474 6573 7400 00ff ffff ffff ff41 ed00  dtest........A..
0000030: 0000 0000 005f bc00 0001 f500 0001 f554  ....._.........T
0000040: 3044 1354 3044 1354 2757 c900 0000 0000  0D.T0D.T'W......
0000050: 0000 0000 0000 1d41 7070 446f 6d61 696e  .......AppDomain
0000060: 2d63 6f6d 2e6f 6f6b 6c61 2e73 7065 6564  -com.ookla.speed
0000070: 7465 7374 0007 4c69 6272 6172 79ff ffff  test..Library...
0000080: ffff ff41 ed00 0000 0000 0013 b600 0001  ...A............
0000090: f500 0001 f554 2757 c954 2758 1f54 1b09  .....T'W.T'X.T..
00000a0: df00 0000 0000 0000 0000 0000 1d41 7070  .............App
00000b0: 446f 6d61 696e 2d63 6f6d 2e6f 6f6b 6c61  Domain-com.ookla
...</code></pre>
<p>Right. That's some sort of binary file. I can see the app names repeated several times for each app, but we're still going to have to figure out the format.</p>
<p>Luckily for me, the format has already been relatively well reverse engineered<span class="footnote"><sup><a href="#footnote-1">[1]</a></sup></span>. First, we have a file header, the bytes <code>mbdb\5\0</code>. The last two are probably versioning, but so far as I can tell, it hasn't changed. So we'll skip over that for the moment.</p>
<p>Next, we have a sequence of records:</p>
<table class="table">
    <thead>
        <tr><td>Type</td><td>Name</td><td>Note</td></tr>
    </thead>
    <tbody>
        <tr><td>string</td><td>domain</td><td>Used for <code>hash-filename</code></td></tr>
        <tr><td>string</td><td>path</td><td></td></tr>
        <tr><td>string</td><td>target</td><td>Absolute path, only for <a href="https://en.wikipedia.org/wiki/symlinks">symlinks</a></td></tr>
        <tr><td>string</td><td>data hash</td><td>SHA1 (for encrypted files)</td></tr>
        <tr><td>string</td><td>encryption key </td><td></td></tr>
        <tr><td>uint16</td><td>mode</td><td>file/directory/symlink (see below)</td></tr>
        <tr><td>uint64</td><td><a href="https://en.wikipedia.org/wiki/inode">inode</a></td><td></td></tr>
        <tr><td>uint32</td><td>user id</td><td></td></tr>
        <tr><td>uint32</td><td>group id</td><td></td></tr>
        <tr><td>uint32</td><td>last modified</td><td></td></tr>
        <tr><td>uint32</td><td>last accessed</td><td></td></tr>
        <tr><td>uint32</td><td>created at</td><td></td></tr>
        <tr><td>uint64</td><td>file size</td><td>0 for symlinks and directories</td></tr>
        <tr><td>uint8</td><td>data protection class</td><td>0 if special (link, directory), otherwise ranges from 1-11</td></tr>
        <tr><td>uint8</td><td>property count</td><td>number of properties following</td></tr>
    </tbody>
</table>
<p>This is then followed by a list of properties:</p>
<table class="table">
    <thead>
        <tr><td>Type</td><td>Name</td><td>Note</td></tr>
    </thead>
    <tbody>
        <tr><td>string</td><td>name</td><td></td></tr>
        <tr><td>string</td><td>value</td><td>either UTF8 or binary data</td></tr>
    </tbody>
</table>
<p>That sounds pretty straight forward (relatively speaking). Let's write a function to read it. We want to fill out this structure:</p>
<pre class="racket"><code>(struct record (domain path hash mode size properties) #:prefab)
(struct property (name value) #:prefab)</code></pre>
<p>In general LISP style (so far as I understand it), we will write a series of functions named <code>read-*</code>, each of which will read the specified form of data from the current input port. Then, for example, we can have a <code>read-mbdb</code> function, which calls <code>read-record</code>, which in turn has a bunch of calls to either <code>read-uint</code> or <code>read-string</code> followed by zero or more calls to <code>read-property</code>.</p>
<p>Starting at the outermost layer, lets read an entire file. Specifically, we want a function that will read off those 6 header bytes then continuously read records until the end of the file:</p>
<pre class="racket"><code>; Read mdbd records until eof
(define (read-mbdb [in (current-input-port)])
  (read-bytes 6 in)
  (let loop ()
    (cond
      [(eof-object? (peek-char in)) '()]
      [else
       (cons (read-record in) (loop))])))</code></pre>
<p>Having that, we need the ability to read an individual record:</p>
<pre class="racket"><code>; Read an mbdb record
(define (read-record [in (current-input-port)])

  (define domain (read-string-data in))
  (define path (read-string-data in))
  (define link-target (read-string-data in))
  (define data-hash (read-string-data in))
  (define encryption-key (read-string-data in))

  (define raw-mode (read-uint 2 in))
  (define mode
    (case (arithmetic-shift raw-mode -12)
      [(#xA) (list 'symlink link-target)]
      [(#x8) 'file]
      [(#x4) 'directory]))

  (define inode (read-uint 8 in))
  (define user-id (read-uint 4 in))
  (define group-id (read-uint 4 in))

  (define last-modified (read-uint 4 in))
  (define last-accessed (read-uint 4 in))
  (define created-at (read-uint 4 in))
  (define file-size (read-uint 8 in))

  (define data-protection-class (read-uint 1 in)) ; 0x1 to 0xB
  (define property-count (read-uint 1 in))

  (define properties
    (for/list ([i (in-range property-count)])
      (define name (read-string-data in))
      (define value (read-string-data in))
      (property name value)))

  (define hash (hash-filename path domain))

  (record domain path hash mode file-size properties))</code></pre>
<p>Other than the missing functions, one caveat here is the definition of <code>mode</code>. I'm not actually sure what's in the other three half bytes, but all we care about is in the first. If it's <code>A</code>, it's a symlink. <code>8</code> is a file; <code>4</code> is a directory. That handles every entry at least on my phone.</p>
<p>Also, you may note that we're not returning all of the data in the records. Honestly, for most of it I just don't need it. It's useful if you're trying to do more interesting things and then write back to the backup, but just to read it? We don't care about user/group ids, et al. It's all there though, with just a tweak. Perhaps I'll figure out a way to pull out the full record if wanted in the future.</p>
<p>Okay, so next, what does it mean to <code>read-uint</code>? Well, we're going to have anywhere from 1 to 8 bytes, which we then need to turn into a single value. That's easy enough doing a base conversion (from essentially base 256 to base 10):</p>
<pre class="racket"><code>; Read size bytes as a big-endian unsigned integer
(define (read-uint size [in (current-input-port)])
  (define b* (read-bytes size in))
  (for/sum ([i (in-naturals)]
            [b (in-bytes b*)])
    (* (expt 256 (- (bytes-length b*) i 1)) b)))</code></pre>
<p>Cool. That means that all that's left is reading strings. Luckily, they have a nice format. Rather than <a href="https://en.wikipedia.org/wiki/null_terminated strings">null terminated strings</a> a la C/C++, they store first the length of the string (as a <code>uint16</code>) and then that many bytes. There are two caveats though:</p>
<ul>
    <li>If the size is maxed (<code>#xFFFF</code>), it's actually empty</li>
    <li>This same datatype can be either a UTF8 string or raw binary data (try to parse it as a string, fall back to bytes)</li>
</ul>
<p>Codewise:</p>
<pre class="racket"><code>; Read a length + string, if length if #xFFFF the string is empty
; Note: Sometimes 'strings' are actually binary data, return those as bytes
(define (read-string-data [in (current-input-port)])
  (define size (read-uint 2 in))
  (cond
    [(equal? size #xFFFF) ""]
    [else
     (define raw (read-bytes size in))
     (with-handlers ([exn? (λ (_) raw)])
       (bytes-&gt;string/utf-8 raw))]))</code></pre>
<p>Cool.</p>
<pre class="racket"><code>&gt; (with-backup "86b1...aa36"
    (call-with-input-file (build-path (backup-path (current-backup))
                                      "Manifest.mbdb")
      read-mbdb))
'(#s(record "AppDomain-com.ookla.speedtest" "" #f directory 0 ())
  #s(record "AppDomain-com.ookla.speedtest" "Library" "83fee2b4383a3d59c99185862e220d5a0a77d546" directory 0 ())
  #s(record "AppDomain-com.ookla.speedtest" "Library/Preferences" "726b41739d2c95794288f354134f75515db58dbd" directory 0 ())
  #s(record
     "AppDomain-com.ookla.speedtest"
     "Library/Preferences/com.ookla.speedtest.plist"
     "dc4081fac8bf5bdf6ed025d3da24e6b8a287c4fb"
     file
     620
     ())
  #s(record
     "AppDomain-com.ookla.speedtest"
     "Library/Preferences/com.apple.PeoplePicker.plist"
     "f9e644265dbcc0a7179c631e0ba3173868663b04"
     (symlink "/private/var/mobile/Library/Preferences/com.apple.PeoplePicker.plist")
     0
     ())
  ...)</code></pre>
<p>It's kind of neat how cleanly binary formats can actually be read at least if they're relatively well documented.</p>
<p>Let's go ahead and add this to the <code>app</code> structure and then write a helper as we have before to find a specific app:</p>
<pre class="racket"><code>; Load the list of files associated with an app
(define (load-files! app)
  (define app-domain (~a "AppDomain-" (app-name app)))

  (set-app-files!
   app
   (for/list ([record (in-list (list-mdbd-records))]
              #:when (and (equal? (record-domain record) app-domain)
                          (eq? 'file (record-mode record))))
     (file (record-path record)
           (build-path (backup-path (current-backup)) (record-hash record))))))

; Find an app by name (actually a case insensative regex)
; plists and files in domain are loaded when this is called and cached
(define (find-app name)
  (define app
    (for/first ([app (in-list (list-apps))]
                #:when (regexp-match (~a "(?i:" name ")") (app-name app)))
      app))

  ; If this app is missing it's plist / files, load them
  (when (and app (not (app-plist app))) (load-plist! app))
  (when (and app (not (app-files app))) (load-files! app))

  app)</code></pre>
<p>Yes, this does has the disadvantage that if you just <code>list-apps</code>, you won't get the plists and file lists. On the flip side though, this one uses a regex, so you can just search by app name. Most developers (although not all I've found) will include that as part of their internal name. They take a bit to load though, especially if you have a lot of apps, so I think that's a fair enough trade off. It's still caching <code>Manifest.mbdb</code> though, so at least that only has to be read once:</p>
<pre class="racket"><code>(define mdbd-records-by-backup (make-hash))
(hash-set! mdbd-records-by-backup #f '())

; Get all MDBD records
(define (list-mdbd-records)
  (hash-ref!
   mdbd-records-by-backup
   (current-backup)
   (λ ()
     (call-with-input-file (build-path (backup-path (current-backup))
                                       "Manifest.mbdb")
       read-mbdb))))</code></pre>
<p>Once you start digging through these lists, there are some pretty interesting files ... but that will have to wait for another post. This one is already pretty long. I think I'll have at least one more post in this series taking everything I've done thus far and turning it into an actual backup solution. Keep an eye out!</p>
<p>The full source thus far (and I've finally caught up) is on GitHub: <a href="https://github.com/jpverkamp/ios-backup">ios-backup</a>.</p>
<p>If you've installed <code>ios-backup</code> as a library, you can import these new functions with <code>(require ios-backup/apps)</code> or if you really want to get adventerous <code>(require ios-backup/mbdb)</code>.</p>
<p>Here is a list of all of the posts in this series:</p>
<ul class="list-unstyled"><li class="post-listing"><a href="http://blog.jverkamp.com/2015/01/22/ios-backups-in-racket-groundwork">iOS Backups in Racket: Groundwork</a></li><li class="post-listing"><a href="http://blog.jverkamp.com/2015/01/23/ios-backups-in-racket-contacts">iOS Backups in Racket: Contacts</a></li><li class="post-listing"><a href="http://blog.jverkamp.com/2015/01/27/ios-backups-in-racket-messages">iOS Backups in Racket: Messages</a></li><li class="post-listing"><a href="http://blog.jverkamp.com/2015/01/29/ios-backups-in-racket-apps">iOS Backups in Racket: Apps</a></li></ul>]]></content></entry><entry><title>iOS Backups in Racket: Messages</title><link href="http://blog.jverkamp.com/2015/01/27/ios-backups-in-racket-messages" /><id>urn:uuid:5a638d35-714a-ea03-68c1-9a6ac3d30dcd</id><updated>2015-01-27T00:00:00Z</updated><summary type="html"><![CDATA[<p>So far we've <a href="http://blog.jverkamp.com/2015/01/22/ios-backups-in-racket-groundwork">laid the groundwork</a>, loading local iOS backups and parsed out <a href="http://blog.jverkamp.com/2015/01/23/ios-backups-in-racket-contacts">contacts</a>. Today let's take another step down the rabbit hole and figure out how messages are stored.</p>
]]></summary><content type="html"><![CDATA[<p>So far we've <a href="http://blog.jverkamp.com/2015/01/22/ios-backups-in-racket-groundwork">laid the groundwork</a>, loading local iOS backups and parsed out <a href="http://blog.jverkamp.com/2015/01/23/ios-backups-in-racket-contacts">contacts</a>. Today let's take another step down the rabbit hole and figure out how messages are stored.</p>
<!--more-->
<p>Okay, first things first, we need to find the database(s) that messages are stored in. Using the <a href="https://theiphonewiki.com/wiki/ITunes_Backup#Files">same source</a> as last time, we have:</p>
<pre class="racket"><code>&gt; (hash-filename "Library/SMS/sms.db" "HomeDomain")
"3d0d7e5fb2ce288813306e4d4636395e047a3d28"</code></pre>
<p>Interesting. What's in there?</p>
<pre class="sql"><code>sqlite&gt; .tables
_SqliteDatabaseProperties  chat_message_join
attachment                 handle
chat                       message
chat_handle_join           message_attachment_join</code></pre>
<p>Dang. That's rather less than there was when dealing with contacts. From a first guess, I would say that <code>message</code> contains the text itself, <code>chat</code> is a group of messages with the same people, and <code>*_join</code> are tables that related those. <code>handle</code> could perhaps be a way of relating who is in a chat to the information in contacts from last week. Let's see how I did:</p>
<pre class="sql"><code>CREATE TABLE message (ROWID INTEGER PRIMARY KEY AUTOINCREMENT,
    guid TEXT UNIQUE NOT NULL,
    text TEXT,
    replace INTEGER DEFAULT 0,
    service_center TEXT,
    handle_id INTEGER DEFAULT 0,
    subject TEXT,
    country TEXT,
    attributedBody BLOB,
    version INTEGER DEFAULT 0,
    type INTEGER DEFAULT 0,
    service TEXT,
    account TEXT,
    account_guid TEXT,
    error INTEGER DEFAULT 0,
    date INTEGER,
    date_read INTEGER,
    date_delivered INTEGER,
    is_delivered INTEGER DEFAULT 0,
    is_finished INTEGER DEFAULT 0,
    is_emote INTEGER DEFAULT 0,
    is_from_me INTEGER DEFAULT 0,
    is_empty INTEGER DEFAULT 0,
    is_delayed INTEGER DEFAULT 0,
    is_auto_reply INTEGER DEFAULT 0,
    is_prepared INTEGER DEFAULT 0,
    is_read INTEGER DEFAULT 0,
    is_system_message INTEGER DEFAULT 0,
    is_sent INTEGER DEFAULT 0,
    has_dd_results INTEGER DEFAULT 0,
    is_service_message INTEGER DEFAULT 0,
    is_forward INTEGER DEFAULT 0,
    was_downgraded INTEGER DEFAULT 0,
    is_archive INTEGER DEFAULT 0,
    cache_has_attachments INTEGER DEFAULT 0,
    cache_roomnames TEXT,
    was_data_detected INTEGER DEFAULT 0,
    was_deduplicated INTEGER DEFAULT 0,
    is_audio_message INTEGER DEFAULT 0,
    is_played INTEGER DEFAULT 0,
    date_played INTEGER,
    item_type INTEGER DEFAULT 0,
    other_handle INTEGER DEFAULT -1,
    group_title TEXT,
    group_action_type INTEGER DEFAULT 0,
    share_status INTEGER,
    share_direction INTEGER,
    is_expirable INTEGER DEFAULT 0,
    expire_state INTEGER DEFAULT 0,
    message_action_type INTEGER DEFAULT 0,
    message_source INTEGER DEFAULT 0
 );</code></pre>
<p>Oof. Okay, that's more like what I was expecting. In particular though, it looks like we don't care about most of those fields. In particular, I think the interesting fields will be <code>guid</code>, <code>text</code>, <code>handle_id</code> (it looks like we will need the <code>handle</code> table), <code>date</code>, and <code>is_from_me</code>.</p>
<p>Next, <code>chat</code>:</p>
<pre class="sql"><code>sqlite&gt; .schema chat
CREATE TABLE chat (ROWID INTEGER PRIMARY KEY AUTOINCREMENT,
    guid TEXT UNIQUE NOT NULL,
    style INTEGER,
    state INTEGER,
    account_id TEXT,
    properties BLOB,
    chat_identifier TEXT,
    service_name TEXT,
    room_name TEXT,
    account_login TEXT,
    is_archived INTEGER DEFAULT 0,
    last_addressed_handle TEXT,
    display_name TEXT,
    group_id TEXT
);</code></pre>
<p>Hmm. It turns out that we don't actually need anything there. All that we need to know about chats is which ID we need, which because it's a join table, that will be in <code>chat_message_join</code>:</p>
<pre class="sql"><code>sqlite&gt; .schema chat_message_join
CREATE TABLE chat_message_join (
    chat_id INTEGER REFERENCES chat (ROWID) ON DELETE CASCADE,
    message_id INTEGER REFERENCES message (ROWID) ON DELETE CASCADE,
    PRIMARY KEY (chat_id, message_id)
);</code></pre>
<p>So if we have a chat ID, we can get all of that information:</p>
<pre class="sql"><code>SELECT
  message.ROWID as message_id,
  message.date,
  message.service,
  message.is_from_me,
  (CASE WHEN message.subject IS NULL THEN '' ELSE message.subject END),
  (CASE WHEN message.text IS NULL THEN '' ELSE message.text END)
FROM
  chat_message_join,
  message
WHERE
  chat_id = ?
  AND message_id = message.ROWID
ORDER BY date ASC</code></pre>
<p>The conversion from <code>NULL</code> to an empty string is mostly for later. I know that I'll want to serialize these, most likely to JSON and I don't particularly care about the difference between a <code>NULL</code> entry and an empty string.</p>
<p>That's a good start. We still need to know who they're from though.</p>
<pre class="sql"><code>sqlite&gt; .schema handle
CREATE TABLE handle (
    ROWID INTEGER PRIMARY KEY AUTOINCREMENT UNIQUE,
    id TEXT NOT NULL,
    country TEXT,
    service TEXT NOT NULL,
    uncanonicalized_id TEXT,
    UNIQUE (id,
    service)
);</code></pre>
<p>Looking at some of the values, it seems that <code>id</code> is either an email or a phone number, while service is either SMS or iMessage (at least in my case). Country might be interesting later, but we'll ignore it for the moment.</p>
<p>So let's expand the query to include that information:</p>
<pre class="sql"><code>SELECT
  message.ROWID as message_id,
  message.date,
  message.service,
  message.is_from_me,
  handle.id as them,
  (CASE WHEN message.subject IS NULL THEN '' ELSE message.subject END),
  (CASE WHEN message.text IS NULL THEN '' ELSE message.text END)
FROM
  chat_message_join,
  message,
  handle
WHERE
  chat_id = ?
  AND message_id = message.ROWID
  AND handle_id = handle.ROWID
ORDER BY date ASC</code></pre>
<p>Cool. One last thing. Remember that <code>attachment</code> table? Let's go ahead and add that in, just loading the attachments as a single string:</p>
<pre class="sql"><code>SELECT
  message.ROWID as message_id,
  message.date,
  message.service,
  message.is_from_me,
  handle.id as them,
  (CASE WHEN message.subject IS NULL THEN '' ELSE message.subject END),
  (CASE WHEN message.text IS NULL THEN '' ELSE message.text END),
  (SELECT group_concat(attachment.filename)
     FROM message_attachment_join, attachment
     WHERE message_attachment_join.message_id = message.ROWID
       AND message_attachment_join.attachment_id = attachment.ROWID)
FROM
  chat_message_join,
  message,
  handle
WHERE
  chat_id = ?
  AND message_id = message.ROWID
  AND handle_id = handle.ROWID
ORDER BY date ASC</code></pre>
<p>Okay. They say that <a href="https://www.youtube.com/watch?v=pele5vptVgc" data-toggle="lightbox">knowing is half the battle</a>, so having all of the structure and that SQL query should translate pretty directly to code:</p>
<pre class="racket"><code>(struct chat (contacts messages) #:prefab)
(struct message (date service sender subject text attachments) #:prefab)
(struct attachment (name path) #:prefab)

; Load all chats from a backup directory
(define (list-chats)
  (hash-ref!
   chats-by-backup
   (current-backup)
   (λ ()
     (parameterize ([date-display-format 'iso-8601])
       ; Connect to the correct DB
       (define sms-db
         (sqlite3-connect
           #:database (build-path (backup-path (current-backup))
                                  MESSAGES-DB)))

       ; Loop over the individual chat ids
       (for/list ([(chat-id) (in-query sms-db "SELECT ROWID FROM chat")])
         ; Determine which contacts were involved in the conversation by contact
         ; Use models/contacts.rkt to figure out who belongs to contact information
         (define user-query "SELECT id FROM chat_handle_join, handle
                             WHERE chat_id = $1 AND handle_id = ROWID
                             ORDER BY handle_id ASC")
         (define contacts
           (for/list ([(contact) (in-query sms-db user-query chat-id)])
             (find-contact (normalize-contact contact))))

         ; Load the individual messages
         (define msg-query "
SELECT
  message.ROWID as message_id,
  message.date,
  message.service,
  message.is_from_me,
  handle.id as them,
  (CASE WHEN message.subject IS NULL THEN '' ELSE message.subject END),
  (CASE WHEN message.text IS NULL THEN '' ELSE message.text END),
  (SELECT group_concat(attachment.filename)
     FROM message_attachment_join, attachment
     WHERE message_attachment_join.message_id = message.ROWID
       AND message_attachment_join.attachment_id = attachment.ROWID)
FROM
  chat_message_join,
  message,
  handle
WHERE
  chat_id = ?
  AND message_id = message.ROWID
  AND handle_id = handle.ROWID
ORDER BY date ASC")
         (define messages
           (for/list ([(message-id
                        raw-date
                        service
                        from-me?
                        other-party
                        subject
                        text
                        raw-attachments)
                       (in-query sms-db msg-query chat-id)])
             ; Correct dates from Apple time to unix time
             ; TODO: Account for timezones?
             (define date (seconds-&gt;date (+ raw-date 978336000 (- (* 16 60 60))) #f))

             (define sender
               (if (= 1 from-me?)
                   (backup-phone-number (current-backup))
                   (normalize-contact other-party)))

             ; Load attachments,
             (define attachments
               (if (sql-null? raw-attachments)
                   '()
                   (for/list ([path (in-list (string-split raw-attachments ","))])
                     (attachment
                      (path-&gt;string (last (explode-path path)))
                      (build-path (backup-path (current-backup))
                                  (hash-filename path))))))

             (message date service sender subject text attachments)))

         ; Create the chat object
         (chat contacts messages))))))</code></pre>
<p>Theoretically, that should be a fairly direct translation. One interesting bit is the format of <code>date</code>. It's actually a timestamp, but not a normal <a href="https://en.wikipedia.org/wiki/Unix_timestamp">Unix timestamp</a>. So I have a bit of a <a href="https://en.wikipedia.org/wiki/magic_number">magic number</a>, but it works correctly for my backups, so we'll just leave it for the moment. Other than that, we use the <code>hash-filename</code> function from last time to get a local path for any <code>attachment</code> and we've got everything pretty much written.</p>
<p>And that's really all we need. One thing that would be nice to be able to do though is, given a contact, filter for only the messages with that contact (either directly or in group chats as well):</p>
<pre class="racket"><code>; Get all chats involving a specific chat
(define (find-chats-by-contact contact #:direct? [direct? #f])
  ; Allow the user to specify the contact by name / phone number / email / etc
  (when (not (contact? contact))
    (set! contact (find-contact contact)))

  ; Filter the list of chats
  (for/list ([chat (in-list (list-chats))]
             #:when (if direct?
                        (equal? (list contact) (chat-contacts chat))
                        (member contact (chat-contacts chat))))
    chat))</code></pre>
<p>If you have an iOS device, check it out. It makes certain things really easy. For example, if I want to have a log of every word that I've ever said in a conversation with Jenny:</p>
<pre class="racket"><code>&gt; (with-backup "86b18...aa36"
    (for*/list ([chat (in-list (find-chats-by-contact "Jenny" #:direct? #t))]
                [message (in-list (chat-messages chat))])
      (message-text message)))
'("Jenny, Jenny, who can I turn to?"
  "You give me somethin' I can hold on to"
  ...)</code></pre>
<p>That's exactly the sort of that prompted this entire thought: the ability to take the fairly opaque structure of iOS backups and dump them into an easily readable / easily diffable format for my own purposes. Sweet.</p>
<p>If you'd like to see the entire project, you can do so on GitHub: <a href="https://github.com/jpverkamp/ios-backup">ios-backup</a>. Alternatively, it's set up as a package, so you should be able to install it with <code>raco pkg install</code>. If you do, just import one or more of these:</p>
<pre class="racket"><code>(require ios-backup
         ios-backup/contacts
         ios-backup/messages)</code></pre>
<p>Here is a list of all of the posts in this series:</p>
<ul class="list-unstyled"><li class="post-listing"><a href="http://blog.jverkamp.com/2015/01/22/ios-backups-in-racket-groundwork">iOS Backups in Racket: Groundwork</a></li><li class="post-listing"><a href="http://blog.jverkamp.com/2015/01/23/ios-backups-in-racket-contacts">iOS Backups in Racket: Contacts</a></li><li class="post-listing"><a href="http://blog.jverkamp.com/2015/01/27/ios-backups-in-racket-messages">iOS Backups in Racket: Messages</a></li><li class="post-listing"><a href="http://blog.jverkamp.com/2015/01/29/ios-backups-in-racket-apps">iOS Backups in Racket: Apps</a></li></ul>]]></content></entry><entry><title>His Majesty's Dragon</title><link href="http://blog.jverkamp.com/2015/01/25/his-majestys-dragon" /><id>urn:uuid:a17cd2b2-3fdd-7615-8b67-dfd65db3b999</id><updated>2015-01-25T00:00:00Z</updated><summary type="html"><![CDATA[<p><a href="https://www.goodreads.com/book/show/28876.His_Majesty_s_Dragon?from_search=true"><img src="http://blog.jverkamp.com/2015/01/25/his-majestys-dragon/his-majestys-dragon.jpg" /></a></p>
<p>As my third series / book of the year, I've read <a href="https://www.goodreads.com/book/show/28876.His_Majesty_s_Dragon?from_search=true"><em>His Majesty's Dragon</em></a>, the first in the <a href="https://www.goodreads.com/series/43272-temeraire">Temeraire</a> series by <a href="https://www.goodreads.com/author/show/8730.Naomi_Novik">Naomi Novik</a>.</p>
<p>This one is a little different, since although there eight novels currently out in the Temeraire series (with another due this year), I don't plan on finishing the series at the moment.</p>
]]></summary><content type="html"><![CDATA[<p><a href="https://www.goodreads.com/book/show/28876.His_Majesty_s_Dragon?from_search=true"><img src="http://blog.jverkamp.com/2015/01/25/his-majestys-dragon/his-majestys-dragon.jpg" /></a></p>
<p>As my third series / book of the year, I've read <a href="https://www.goodreads.com/book/show/28876.His_Majesty_s_Dragon?from_search=true"><em>His Majesty's Dragon</em></a>, the first in the <a href="https://www.goodreads.com/series/43272-temeraire">Temeraire</a> series by <a href="https://www.goodreads.com/author/show/8730.Naomi_Novik">Naomi Novik</a>.</p>
<p>This one is a little different, since although there eight novels currently out in the Temeraire series (with another due this year), I don't plan on finishing the series at the moment.</p>
<!--more-->
<p>This was always something that I had in mind when I set my 100 book goal. It's a lot of books to read and if I'm just not enjoying a series overly much, it's worth moving along.</p>
<p>That's not to say that I didn't enjoy <em>His Majesty's Dragon</em>. It was a very interestingly written story, in a style that where I can actually imagine people during the era of the Napoleonic Wars speaking (although if they actually spoke like that, I will admit to having no idea). That being said, that was actually one of the the things that took my out of the story. Both of the main characters (the man and the dragon) spoke so eloquently, it was hard to identity with them.</p>
<p>Another positive was how well Novik wove the dragons into the story. It never felt like they were just tacked on, and she seems to have thought through many of the changes that would come about had dragons been there throughout history. It's an interesting take on alternate history--not changing particularly much, but rather enhancing what already happened with the changes you want to make. At the very least, it saves you the time and trouble of trying to deal with a true divergence. History is complicated. Making up your entire own history as deep and complicated as the real one? Oof.</p>
<p>Back to the negative though, I wasn't particularly thrilled with the characterizations of the dragons. I understand and like the idea of dragons as or more intelligent than humans, but on the other hand it's a little strange for them to be <em>so</em> smart just out of the shell--although Novik did comment that was because they learn while therein.</p>
<p>Also, their size. It's a given in any story involving dragons that the mere idea that they could fly is a little strange. They're just too big and heavy. But not only can dragons in this universe fly, they can do so while carrying entire crews of men. It's a really neat idea--that you can basically have an entire navel crew in the air--and on a 'ship' as intelligent as a man to boot--but four dragons carrying an estimated 2000 men? That's almost 40 tons of men per dragon. I'm not buying it. So it goes. It's still pretty awesome.</p>
<p>And finally, I'm not really a fan of chosen one / only one in the world type stories (one of the issues I had with <a href="http://blog.jverkamp.com/2015/01/18/the-heroes-of-olympus">The Heroes of Olympus</a> as well), which is another reason not to carry on with this series. Throughout the first book is bad enough--<em>ooh, a new and unique species, at least in Europe</em>--the ending implies that the sequels will be even worse. So it goes.</p>
<p>All said and done, I did enjoy the story. It isn't exactly my sort of thing (thus not reading the sequels), but I'm sure there are many out there who would find it far more enjoyable. It's a neat world and it wouldn't hurt to read at least a chapter or two to just to see the writing style. It's certainly different.</p>
<p>Current progress: 11 of 100 books in 25 days. That puts me roughly 5 books ahead of schedule. Up next? <a href="https://www.goodreads.com/series/52837-the-iron-druid-chronicles">The Iron Druid Chronicles</a></p>]]></content></entry><entry><title>iOS Backups in Racket: Contacts</title><link href="http://blog.jverkamp.com/2015/01/23/ios-backups-in-racket-contacts" /><id>urn:uuid:e4d2594c-e305-b796-553b-77a2ca28a8fb</id><updated>2015-01-23T00:00:00Z</updated><summary type="html"><![CDATA[<p>After <a href="http://blog.jverkamp.com/2015/01/22/ios-backups-in-racket-groundwork">yesterday's post</a> laying the groundwork for looking into <a href="http://blog.jverkamp.com/category/programming/by-project/ios-backup">iOS Backups</a>, today why don't we actually start digging into one of the more interesting files: your list of contacts.</p>
]]></summary><content type="html"><![CDATA[<p>After <a href="http://blog.jverkamp.com/2015/01/22/ios-backups-in-racket-groundwork">yesterday's post</a> laying the groundwork for looking into <a href="http://blog.jverkamp.com/category/programming/by-project/ios-backup">iOS Backups</a>, today why don't we actually start digging into one of the more interesting files: your list of contacts.</p>
<!--more-->
<p>First things first, we have to find where the list of contacts is stored. That's the problem with the backup format--we have a giant list of files each of which is a SHA-1 hash. But of what?</p>
<p>Doing a little bit of digging, it looks like each of those hashes is based more or less on the filename of the source file. So if we happened to know that contacts are stored in the file <code>Library/AddressBook/AddressBook.sqlitedb</code><span class="footnote"><sup><a href="#footnote-1">[1]</a></sup></span>, we should just be able to hash that:</p>
<pre class="racket"><code>&gt; (call-with-input-string "Library/AddressBook/AddressBook.sqlitedb" sha1)
"adb8c77534444e97c31ff15924d50f3ed1fbd3b1"</code></pre>
<p>Hmm. That file doesn't exist. But all of my sources are telling me that <code>AddressBook.sqlitedb</code> is in <code>HomeDomain</code>. What does that mean? Well it seems that iOS has some amount of sandboxing in it's filesystem, rather than a more traditional Unix style. Basically, the path is actually:</p>
<p><code>Domain-Path</code></p>
<p>Specifically:</p>
<pre class="racket"><code>; Hash attachments so that we can find the local path
(define (hash-filename path [domain "MediaDomain"])
  (for*/first ([prefix (in-list (list "/var/mobile/"
                                      "~/"
                                      ""))]
               #:when (and (&gt; (string-length path) (string-length prefix))
                           (equal? (substring path 0 (string-length prefix)) prefix)))
    (define path-w/o-prefix (substring path (string-length prefix)))
    (call-with-input-string (~a domain "-" path-w/o-prefix) sha1)))</code></pre>
<p>There's a bit of complication there. If a file uses a traditional Unix path, starting with with <code>/var/mobile/</code> or <code>~/</code> (the home directory), that is stripped off before adding the domain. If we try it again:</p>
<pre class="racket"><code>&gt; (hash-filename "Library/AddressBook/AddressBook.sqlitedb" "HomeDomain")
"31bb7ba8914766d4ba40d6dfb6113c8b614be442"</code></pre>
<p>Ah hah! That file actually exists (and matches the hash I've found online).</p>
<p>Let's poke around. First things first, let's load it up in <code>sqlite3</code>:</p>
<pre class="sql"><code>sqlite&gt; .tables
ABAccount                        ABPersonFullTextSearch_segdir
ABGroup                          ABPersonFullTextSearch_segments
ABGroupChanges                   ABPersonFullTextSearch_stat
ABGroupMembers                   ABPersonLink
ABMultiValue                     ABPersonMultiValueDeletes
ABMultiValueEntry                ABPersonSearchKey
ABMultiValueEntryKey             ABPhoneLastFour
ABMultiValueLabel                ABRecent
ABPerson                         ABStore
ABPersonBasicChanges             FirstSortSectionCount
ABPersonChanges                  FirstSortSectionCountTotal
ABPersonFullTextSearch           LastSortSectionCount
ABPersonFullTextSearch_content   LastSortSectionCountTotal
ABPersonFullTextSearch_docsize   _SqliteDatabaseProperties</code></pre>
<p>A lot of those are indicies or other things that we don't necessarily care about, but the first one that jumps out to me is <code>ABPerson</code>:</p>
<pre class="sql"><code>sqlite&gt; .schema ABPerson
CREATE TABLE ABPerson (
  ROWID INTEGER PRIMARY KEY AUTOINCREMENT,
  First TEXT,
  Last TEXT,
  Middle TEXT,
  FirstPhonetic TEXT,
  MiddlePhonetic TEXT,
  LastPhonetic TEXT,
  Organization TEXT,
  Department TEXT,
  Note TEXT,
  Kind INTEGER,
  Birthday TEXT,
  JobTitle TEXT,
  Nickname TEXT,
  Prefix TEXT,
  Suffix TEXT,
  FirstSort TEXT,
  LastSort TEXT,
  CreationDate INTEGER,
  ModificationDate INTEGER,
  CompositeNameFallback TEXT,
  ExternalIdentifier TEXT,
  ExternalModificationTag TEXT,
  ExternalUUID TEXT,
  StoreID INTEGER,
  DisplayName TEXT,
  ExternalRepresentation BLOB,
  FirstSortSection TEXT,
  LastSortSection TEXT,
  FirstSortLanguageIndex INTEGER DEFAULT 2147483647,
  LastSortLanguageIndex INTEGER DEFAULT 2147483647,
  PersonLink INTEGER DEFAULT -1,
  ImageURI TEXT,
  IsPreferredName INTEGER DEFAULT 1,
  guid TEXT DEFAULT (ab_generate_guid()),
  PhonemeData TEXT,
  AlternateBirthday TEXT,
  MapsData TEXT,
  UNIQUE(guid)
);
...</code></pre>
<p>There is rather a pile of other statements after that, but that's the table that we're interested in. Specifically, that at least has the names and organizations (which at the moment is what I'm really interested in). What's suspiciously absent though, is the phone numbers. Hmm...</p>
<p>After a little bit of digging, I came across this table:</p>
<pre class="sql"><code>sqlite&gt; .schema ABMultiValue
CREATE TABLE ABMultiValue (
  UID INTEGER PRIMARY KEY,
  record_id INTEGER,
  property INTEGER,
  identifier INTEGER,
  label INTEGER,
  value TEXT,
  guid TEXT DEFAULT (ab_generate_guid()),
  UNIQUE(guid)
);</code></pre>
<p>Specifically, <code>record_id</code> matches <code>ABPerson.ROWID</code> and <code>value</code> contains phone numbers, email address, etc. (This is the real reason that I wrote the <code>normalize-contact</code> function).</p>
<p>Okay. That should be enough for the moment. Let's switch gears and lay out a similar framework to <code>backup</code>.</p>
<pre class="racket"><code>(define CONTACTS-DB
  (hash-filename "Library/AddressBook/AddressBook.sqlitedb" "HomeDomain"))

; Name is a human readable name for a contact
; Identifiers is a list of phone numbers / emails / etc
(struct contact (name identifiers) #:prefab)

; Store a separate list of contacts for each backup (potentially)
(define contacts-by-backup (make-hash))
(hash-set! contacts-by-backup #f '())</code></pre>
<p>Cool. Now we want to load the specific list of contacts, caching them the same way we did with the backups themselves:</p>
<pre class="racket"><code>; Load all contacts stored in a specific backup
(define (list-contacts)
  (hash-ref!
   contacts-by-backup
   (current-backup)
   (λ ()
     (define contacts-db
       (sqlite3-connect #:database (build-path (backup-path (current-backup))
                                               CONTACTS-DB)))

     (for/list ([(user-id first-name middle-name last-name organization)
                 (in-query contacts-db "SELECT ROWID, First, Middle, Last, Organization FROM ABPerson")])

       (define (fix str) (if (sql-null? str) "" str))

       (define name
         (let* ([name (~a (fix first-name) " "
                          (fix middle-name) " "
                          (fix last-name) " "
                          "(" (fix organization) ")")]
                [name (regexp-replace* #px"\\(\\)" name "")]
                [name (regexp-replace* #px"\\s+" name " ")]
                [name (string-trim name)]
                [name (regexp-replace* #px"^\\((.*)\\)$" name "\\1")])
           name))

       (define identifiers
         (for*/list ([raw-value (in-list (query-list contacts-db "SELECT value FROM ABMultiValue WHERE record_id = $1" user-id))]
                     [value (in-value (normalize-contact raw-value))]
                     #:when value)
           value))

       (contact name identifiers)))))</code></pre>
<p>Basically, we want to make a nested set of queries, first one for each user and then another for all contact information for that user. It's Not the perfect way of doing itl as theoretically we could have done a sql join, but it works well enough.</p>
<p>As far as the name formatting, that's just the way I needed it to work. When I get around to it, I'll probably write a <code>name-display-format</code> parameter akin to <code><a href="http://docs.racket-lang.org/search/index.html?q=date-display-format">date-display-format</a></code> from <code><a href="http://docs.racket-lang.org/search/index.html?q=racket/date">racket/date</a></code>. Not today though!</p>
<p>So let's see how it works:</p>
<pre class="racket"><code>&gt; (with-backup "86b18eea28a991f4dd569d1f59737a842e24aa36"
    (list-contacts))
'(#s(contact "Charles I. Clarke" ("555.555.1234" "charlie.c@example.com"))
  #s(contact "Jenny Reichert (Catsitter)" ("555.867.5309"))
  #s(contact "Mary Orndorff" ("555.555.0000"))
  #s(contact "Pizza Palace" ("555.555.1123"))
  #s(contact "Willie S. Culpepper" ("555.555.1491"))
  ...)</code></pre>
<p>Sweet.</p>
<p>And as a bonus, let's include a basic search function:</p>
<pre class="racket"><code>; Load a user by name or value
(define (find-contact key)
  (for/first ([contact (in-list (list-contacts))]
              #:when (or (equal? key (contact-name contact))
                         (member key (contact-identifiers contact))))
    contact))</code></pre>
<p>Again, it's not a fuzzy match (you have to have the name exact), but that's something I'll probably clean up later.</p>
<pre class="racket"><code>&gt; (with-backup "86b18eea28a991f4dd569d1f59737a842e24aa36"
    (find-contact "Charles I. Clarke"))
#s(contact
   "Charles I. Clarke"
   ("555.555.1234" "charlie.c@example.com")</code></pre>
<p>And there you have it. Contacts. We're really starting to get somewhere here. Next week (probably Monday or Tuesday), I'll write up messages (both SMS and iMessage). That one will really be fun.</p>
<p>As always entire code for today's post is available on GitHub: <a href="https://github.com/jpverkamp/ios-backup">ios-backup</a></p>
<p>Here is a list of all of the posts in this series:</p>
<ul class="list-unstyled"><li class="post-listing"><a href="http://blog.jverkamp.com/2015/01/22/ios-backups-in-racket-groundwork">iOS Backups in Racket: Groundwork</a></li><li class="post-listing"><a href="http://blog.jverkamp.com/2015/01/23/ios-backups-in-racket-contacts">iOS Backups in Racket: Contacts</a></li><li class="post-listing"><a href="http://blog.jverkamp.com/2015/01/27/ios-backups-in-racket-messages">iOS Backups in Racket: Messages</a></li><li class="post-listing"><a href="http://blog.jverkamp.com/2015/01/29/ios-backups-in-racket-apps">iOS Backups in Racket: Apps</a></li></ul>]]></content></entry></feed>