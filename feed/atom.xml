<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>jverkamp.com</title><link href="//blog.jverkamp.com" /><link rel="self" href="//blog.jverkamp.com/feed/" /><updated>2016-12-02T00:00:00Z</updated><author><name>JP Verkamp</name></author><id>urn:uuid:b26bbc31-d1d1-3557-055d-3c47073ed3bd</id><entry><title>Inlining plaintext attachments in Gmail</title><link href="//blog.jverkamp.com/2016/12/02/inlining-plaintext-attachments-in-gmail" /><id>urn:uuid:bc0d7956-f462-18f3-a332-a274b8c65941</id><updated>2016-12-02T00:00:00Z</updated><summary type="html"><![CDATA[<p>When you send a text message to a Gmail email address (at least from an iPhone using AT&T), you get something like this:</p>
<p><a href="//blog.jverkamp.com/2016/12/02/inlining-plaintext-attachments-in-gmail/gpti-before.png" data-toggle="lightbox"><img src="//blog.jverkamp.com/2016/12/02/inlining-plaintext-attachments-in-gmail/gpti-before.png" /></a></p>
<p>It's vaguely annoying to have to click through every single time just to see what the message is, especially when various extensions (such as <a href="https://github.com/gorhill/uMatrix">uMatrix</a>) break overlay rendering or when you have multiple attachments.</p>
<p>Much better would be to just display the plaintext attachments inline:</p>
<p><a href="//blog.jverkamp.com/2016/12/02/inlining-plaintext-attachments-in-gmail/gpti-after.png" data-toggle="lightbox"><img src="//blog.jverkamp.com/2016/12/02/inlining-plaintext-attachments-in-gmail/gpti-after.png" /></a></p>
]]></summary><content type="html"><![CDATA[<p>When you send a text message to a Gmail email address (at least from an iPhone using AT&T), you get something like this:</p>
<p><a href="//blog.jverkamp.com/2016/12/02/inlining-plaintext-attachments-in-gmail/gpti-before.png" data-toggle="lightbox"><img src="//blog.jverkamp.com/2016/12/02/inlining-plaintext-attachments-in-gmail/gpti-before.png" /></a></p>
<p>It's vaguely annoying to have to click through every single time just to see what the message is, especially when various extensions (such as <a href="https://github.com/gorhill/uMatrix">uMatrix</a>) break overlay rendering or when you have multiple attachments.</p>
<p>Much better would be to just display the plaintext attachments inline:</p>
<p><a href="//blog.jverkamp.com/2016/12/02/inlining-plaintext-attachments-in-gmail/gpti-after.png" data-toggle="lightbox"><img src="//blog.jverkamp.com/2016/12/02/inlining-plaintext-attachments-in-gmail/gpti-after.png" /></a></p>
<!--more-->
<p>Let's do it!</p>
<p>Essentially, I'm going to write a Javascript userscript, compatible with <a href="https://addons.mozilla.org/en-US/firefox/addon/greasemonkey/">Greasemonkey</a> or <a href="https://chrome.google.com/webstore/detail/tampermonkey/dhdgffkkebhmkfjojejmpbldmpobfkfo?hl=en">Tampermonkey</a> for Chrome. Either allows you to insert small bits of Javascript into web pages to modify their behavior.</p>
<p>After digging around a bit in the structure of Gmail's message pages, here's roughly what I ended up with:</p>
<pre class="javascript"><code>var checkForPlaintexts = function(evt) {
    jQuery('span[download_url]').each(function(i, el) {
        var parts = el.getAttribute('download_url').split(':');
        if (!parts || parts[0] != 'text/plain') return;
        var url = parts[3];

        var newElement = jQuery('&lt;pre id="GPTI_' + i + '"&gt;&lt;/pre&gt;');
        newElement.text('Loading: ' + url);

        jQuery(el).replaceWith(newElement);
        jQuery.ajax({
            url: url,
            success: function(data) {
                newElement.text(data);
            }
        });
    });
};</code></pre>
<p>Basically, we're going to look for a <code>span</code> containing a <code>download_url</code> attribute. For the moment at least, that's always present with attachments and not otherwise. If you take that <code>download_url</code> element, you get something like this:</p>
<p><code>text/plain:text_0.txt:https://mail.google.com/mail/u/0/?ui=...</code>`</p>
<p>The first part is a <a href="https://en.wikipedia.org/wiki/MIME_type">MIME type</a>--of which, we're only interested in plaintext. The last section is a URL under gmail which, when visited, contains the contents of the attachment.</p>
<p>Now that I have that (via jQuery<span class="footnote"><sup><a href="#footnote-1">[1]</a></sup></span><span class="footnote"><sup><a href="#footnote-2">[2]</a></sup></span>), I build a new <code>pre</code> element with the text content and shove it in place.</p>
<p>Voila.</p>
<p>All I have to do next is make sure that it's called when I either load the page or when I navigate from the Inbox (et al) to a message:</p>
<pre class="javascript"><code>jQuery(window).bind('hashchange', checkForPlaintexts);
jQuery(checkForPlaintexts);</code></pre>
<p>Unfortunately, this has some issues as well. It works if the message has already been viewed once, but not on the first load. Basically, I'm running into timing issues.</p>
<p>My original solution to this was to put in a quick delay and call it a day. Unfortunately, when using satellite internet... even that didn't work. So instead, I built a system that will delay the initial call and then--if it fails--try a few more times with increasing timeouts between then.</p>
<p>Something like this:</p>
<pre class="javascript"><code>var delayedEvent = function(f, timeout, retries) {
    timeout = timeout || 0;
    retries = retries || 0;

    return function(evt) {
        setTimeout(f, timeout, evt, retries, timeout * 2);
    }
};

var checkForPlaintexts = function(evt, retries, delay) {
    retries = retries || 0;
    var foundOne = false;

    jQuery('span[download_url]').each(function(i, el) {
        foundOne = true;

        ...
    });

    if (!foundOne && retries) {
        setTimeout(checkForPlaintexts, delay, evt, retries - 1, delay * 2);
    }
};

jQuery(window).bind('hashchange', delayedEvent(checkForPlaintexts, 125, 3));
jQuery(delayedEvent(checkForPlaintexts, 125, 3));</code></pre>
<p>So far, this has worked perfectly. Sometimes it takes a bit to fetch the ajax call in the background. That's why I put in the <code>Loading...</code> notification to tell the user it was working.</p>
<p>It's been a little while since I last wrote a userscript (pre-Chrome, to give you an idea). I forgot how much fun it can be to mess with websites a bit like that. I may write up a few more.</p>
<p>If you'd like to see the entire source (includes some debug messaging and the userscript header comments), you can do so on GitHub: <a href="https://github.com/jpverkamp/userscripts/blob/master/gmail-plaintext-inline.user.js">gmail-plaintext-inline.user.js</a></p>
<p>If you want to install it directly (and have Greasemonkey/Tampermonkey installed), you can directly from GitHub as well: <a href="https://github.com/jpverkamp/userscripts/raw/master/gmail-plaintext-inline.user.js">install gmail-plaintext-inline.user.js</a>.</p>
<p>As a side note, 'optional' parameters in Javascript are weird...</p>]]></content></entry><entry><title>2016 Reading List</title><link href="//blog.jverkamp.com/2016/01/01/2016-reading-list" /><id>urn:uuid:84512a8b-25fc-f25d-17ed-0184a6e249e9</id><updated>2016-01-01T00:00:00Z</updated><summary type="html"><![CDATA[<p>I enjoyed keeping public track of my <a href="//blog.jverkamp.com/2015/01/01/2015-reading-list">2015 Reading List</a>, so here's the same thing for 2016:</p>
<p><a href="https://www.goodreads.com/book/show/186074.The_Name_of_the_Wind" title="The Name of the Wind"><img alt="The Name of the Wind" src="//blog.jverkamp.com/2016/01/01/2016-reading-list/the-name-of-the-wind.jpg" /></a> <a href="https://www.goodreads.com/book/show/47613.Mister_Monday" title="Mister Monday"><img alt="Mister Monday" src="//blog.jverkamp.com/2016/01/01/2016-reading-list/mister-monday.jpg" /></a> <a href="https://www.goodreads.com/book/show/89187.Revelation_Space" title="Revelation Space"><img alt="Revelation Space" src="//blog.jverkamp.com/2016/01/01/2016-reading-list/revelation-space.jpg" /></a> <a href="https://www.goodreads.com/book/show/16280689-staked" title="Staked"><img alt="Staked" src="//blog.jverkamp.com/2016/01/01/2016-reading-list/staked.jpg" /></a> <a href="https://www.goodreads.com/book/show/24876258-the-aeronaut-s-windlass" title="The Aeronaut's Windlass"><img alt="The Aeronaut's Windlass" src="//blog.jverkamp.com/2016/01/01/2016-reading-list/the-aeronaut-s-windlass.jpg" /></a> <a href="https://www.goodreads.com/book/show/8868764-white-sand" title="White Sand"><img alt="White Sand" src="//blog.jverkamp.com/2016/01/01/2016-reading-list/white-sand.png" /></a> <a href="https://www.goodreads.com/book/show/13642710-nexus" title="Nexus"><img alt="Nexus" src="//blog.jverkamp.com/2016/01/01/2016-reading-list/nexus.jpg" /></a> <a href="https://www.goodreads.com/book/show/1268479.Warbreaker" title="Warbreaker"><img alt="Warbreaker" src="//blog.jverkamp.com/2016/01/01/2016-reading-list/warbreaker.jpg" /></a> <a href="https://www.goodreads.com/book/show/17333324-ancillary-justice" title="Ancillary Justice"><img alt="Ancillary Justice" src="//blog.jverkamp.com/2016/01/01/2016-reading-list/ancillary-justice.jpg" /></a> <a href="https://www.goodreads.com/book/show/68428.The_Final_Empire" title="The Final Empire"><img alt="The Final Empire" src="//blog.jverkamp.com/2016/01/01/2016-reading-list/the-final-empire.jpg" /></a> <a href="https://www.goodreads.com/book/show/19161852-the-fifth-season" title="The Fifth Season"><img alt="The Fifth Season" src="//blog.jverkamp.com/2016/01/01/2016-reading-list/the-fifth-season.jpg" /></a> <a href="https://www.goodreads.com/book/show/15730101-the-call-of-cthulhu" title="The Call of Cthulhu"><img alt="The Call of Cthulhu" src="//blog.jverkamp.com/2016/01/01/2016-reading-list/the-call-of-cthulhu.jpg" /></a> <a href="https://www.goodreads.com/book/show/20518872-the-three-body-problem" title="The Three-Body Problem"><img alt="The Three-Body Problem" src="//blog.jverkamp.com/2016/01/01/2016-reading-list/the-three-body-problem.jpg" /></a> <a href="https://www.goodreads.com/book/show/13452375-legion" title="Legion"><img alt="Legion" src="//blog.jverkamp.com/2016/01/01/2016-reading-list/legion.jpg" /></a> <a href="https://www.goodreads.com/book/show/71811.Moon_Called" title="Moon Called"><img alt="Moon Called" src="//blog.jverkamp.com/2016/01/01/2016-reading-list/moon-called.jpg" /></a> <a href="https://www.goodreads.com/book/show/15839976-red-rising" title="Red Rising"><img alt="Red Rising" src="//blog.jverkamp.com/2016/01/01/2016-reading-list/red-rising.jpg" /></a> <a href="https://www.goodreads.com/book/show/9278806-the-aether-of-night" title="The Aether of Night"><img alt="The Aether of Night" src="//blog.jverkamp.com/2016/01/01/2016-reading-list/the-aether-of-night.png" /></a> <a href="https://www.goodreads.com/book/show/23197269-aurora" title="Aurora"><img alt="Aurora" src="//blog.jverkamp.com/2016/01/01/2016-reading-list/aurora.jpg" /></a> <a href="https://www.goodreads.com/book/show/17182126-steelheart" title="Steelheart"><img alt="Steelheart" src="//blog.jverkamp.com/2016/01/01/2016-reading-list/steelheart.jpg" /></a> <a href="https://www.goodreads.com/book/show/23129410-welcome-to-night-vale" title="Welcome to Night Vale"><img alt="Welcome to Night Vale" src="//blog.jverkamp.com/2016/01/01/2016-reading-list/welcome-to-night-vale.jpg" /></a></p>
]]></summary><content type="html"><![CDATA[<p>I enjoyed keeping public track of my <a href="//blog.jverkamp.com/2015/01/01/2015-reading-list">2015 Reading List</a>, so here's the same thing for 2016:</p>
<p><a href="https://www.goodreads.com/book/show/186074.The_Name_of_the_Wind" title="The Name of the Wind"><img alt="The Name of the Wind" src="//blog.jverkamp.com/2016/01/01/2016-reading-list/the-name-of-the-wind.jpg" /></a> <a href="https://www.goodreads.com/book/show/47613.Mister_Monday" title="Mister Monday"><img alt="Mister Monday" src="//blog.jverkamp.com/2016/01/01/2016-reading-list/mister-monday.jpg" /></a> <a href="https://www.goodreads.com/book/show/89187.Revelation_Space" title="Revelation Space"><img alt="Revelation Space" src="//blog.jverkamp.com/2016/01/01/2016-reading-list/revelation-space.jpg" /></a> <a href="https://www.goodreads.com/book/show/16280689-staked" title="Staked"><img alt="Staked" src="//blog.jverkamp.com/2016/01/01/2016-reading-list/staked.jpg" /></a> <a href="https://www.goodreads.com/book/show/24876258-the-aeronaut-s-windlass" title="The Aeronaut's Windlass"><img alt="The Aeronaut's Windlass" src="//blog.jverkamp.com/2016/01/01/2016-reading-list/the-aeronaut-s-windlass.jpg" /></a> <a href="https://www.goodreads.com/book/show/8868764-white-sand" title="White Sand"><img alt="White Sand" src="//blog.jverkamp.com/2016/01/01/2016-reading-list/white-sand.png" /></a> <a href="https://www.goodreads.com/book/show/13642710-nexus" title="Nexus"><img alt="Nexus" src="//blog.jverkamp.com/2016/01/01/2016-reading-list/nexus.jpg" /></a> <a href="https://www.goodreads.com/book/show/1268479.Warbreaker" title="Warbreaker"><img alt="Warbreaker" src="//blog.jverkamp.com/2016/01/01/2016-reading-list/warbreaker.jpg" /></a> <a href="https://www.goodreads.com/book/show/17333324-ancillary-justice" title="Ancillary Justice"><img alt="Ancillary Justice" src="//blog.jverkamp.com/2016/01/01/2016-reading-list/ancillary-justice.jpg" /></a> <a href="https://www.goodreads.com/book/show/68428.The_Final_Empire" title="The Final Empire"><img alt="The Final Empire" src="//blog.jverkamp.com/2016/01/01/2016-reading-list/the-final-empire.jpg" /></a> <a href="https://www.goodreads.com/book/show/19161852-the-fifth-season" title="The Fifth Season"><img alt="The Fifth Season" src="//blog.jverkamp.com/2016/01/01/2016-reading-list/the-fifth-season.jpg" /></a> <a href="https://www.goodreads.com/book/show/15730101-the-call-of-cthulhu" title="The Call of Cthulhu"><img alt="The Call of Cthulhu" src="//blog.jverkamp.com/2016/01/01/2016-reading-list/the-call-of-cthulhu.jpg" /></a> <a href="https://www.goodreads.com/book/show/20518872-the-three-body-problem" title="The Three-Body Problem"><img alt="The Three-Body Problem" src="//blog.jverkamp.com/2016/01/01/2016-reading-list/the-three-body-problem.jpg" /></a> <a href="https://www.goodreads.com/book/show/13452375-legion" title="Legion"><img alt="Legion" src="//blog.jverkamp.com/2016/01/01/2016-reading-list/legion.jpg" /></a> <a href="https://www.goodreads.com/book/show/71811.Moon_Called" title="Moon Called"><img alt="Moon Called" src="//blog.jverkamp.com/2016/01/01/2016-reading-list/moon-called.jpg" /></a> <a href="https://www.goodreads.com/book/show/15839976-red-rising" title="Red Rising"><img alt="Red Rising" src="//blog.jverkamp.com/2016/01/01/2016-reading-list/red-rising.jpg" /></a> <a href="https://www.goodreads.com/book/show/9278806-the-aether-of-night" title="The Aether of Night"><img alt="The Aether of Night" src="//blog.jverkamp.com/2016/01/01/2016-reading-list/the-aether-of-night.png" /></a> <a href="https://www.goodreads.com/book/show/23197269-aurora" title="Aurora"><img alt="Aurora" src="//blog.jverkamp.com/2016/01/01/2016-reading-list/aurora.jpg" /></a> <a href="https://www.goodreads.com/book/show/17182126-steelheart" title="Steelheart"><img alt="Steelheart" src="//blog.jverkamp.com/2016/01/01/2016-reading-list/steelheart.jpg" /></a> <a href="https://www.goodreads.com/book/show/23129410-welcome-to-night-vale" title="Welcome to Night Vale"><img alt="Welcome to Night Vale" src="//blog.jverkamp.com/2016/01/01/2016-reading-list/welcome-to-night-vale.jpg" /></a></p>
<!--more-->
<p>20 series this year, compared to 24 from last year. I have a few re-reads in here (Mistborn and Mercy Thompson) along with a nice pile of new books. All told, I'm aiming for 52 books this year--one per week.</p>
<p>Here's my list of reviews (it will update as each one is added):</p>
<ul class="list-unstyled"><li class="post-listing"><a href="//blog.jverkamp.com/2016/01/01/2016-reading-list">2016 Reading List</a></li></ul>]]></content></entry><entry><title>2015 Reading List Retrospective</title><link href="//blog.jverkamp.com/2015/12/31/2015-reading-list-retrospective" /><id>urn:uuid:65ef37d8-26e6-12b7-6aca-3bd1857c254f</id><updated>2015-12-31T00:00:00Z</updated><summary type="html"><![CDATA[<p>I 2015, I set myself an <del>ambitious</del> <del>slightly</del> insane reading goal: 100 books.</p>
<p>My final count: exactly 100 books (from ~30 different series), totaling 38,048 pages. There were a few short stories in there (<a href="https://www.goodreads.com/book/show/24330383-pimpf">Pimpf</a> by <a href="https://www.goodreads.com/author/show/8794.Charles_Stross">Charles Stross</a> was the shortest at 25 pages) to offset a couple epic fantasies (1,048 pages in <a href="https://www.goodreads.com/author/show/38550.Brandon_Sanderson">Brandon Sanderson's</a> <a href="https://www.goodreads.com/book/show/17332218-words-of-radiance">Words of Radiance</a>). Overall, I averaged 388 pages/book, which sounds about right to me.</p>
]]></summary><content type="html"><![CDATA[<p>I 2015, I set myself an <del>ambitious</del> <del>slightly</del> insane reading goal: 100 books.</p>
<p>My final count: exactly 100 books (from ~30 different series), totaling 38,048 pages. There were a few short stories in there (<a href="https://www.goodreads.com/book/show/24330383-pimpf">Pimpf</a> by <a href="https://www.goodreads.com/author/show/8794.Charles_Stross">Charles Stross</a> was the shortest at 25 pages) to offset a couple epic fantasies (1,048 pages in <a href="https://www.goodreads.com/author/show/38550.Brandon_Sanderson">Brandon Sanderson's</a> <a href="https://www.goodreads.com/book/show/17332218-words-of-radiance">Words of Radiance</a>). Overall, I averaged 388 pages/book, which sounds about right to me.</p>
<!--more-->
<p>For the longest time, I was average right at 100 pages per day, but over the last week or so (in a last burst to finish the year), that bumped up slightly. I ended up at an average of 104 pages / day. None too shabby.</p>
<p>Rating-wise, I rated a full quarter of the books I read 5 out of 5. Less than 20 were three stars or less. My average rating was 4.2. If that sounds a bit high... it should be. These are the books that I put on my <a href="https://www.goodreads.com">Goodreads</a> list since I wanted to read them. Of those, I took the subset of those that I particularly wanted to read for 2015. So it's no surprise that I (for the most part) selected books I thought I would like.</p>
<p>From my original list (<a href="//blog.jverkamp.com/2015/01/01/2015-reading-list">2015 Reading List</a>), I at least started every series (Mere Christianity I'm reading at two chapters per week, so I'm still working on it). I even added a few that weren't originally on there:</p>
<p><a href="https://www.goodreads.com/book/show/13151129-earth-unaware"><img src="//blog.jverkamp.com/2015/12/31/2015-reading-list-retrospective/earth-unaware.jpg" /></a> <a href="https://www.goodreads.com/book/show/68427.Elantris"><img src="//blog.jverkamp.com/2015/12/31/2015-reading-list-retrospective/elantris.jpg" /></a> <a href="https://www.goodreads.com/book/show/10803121-the-alloy-of-law"><img src="//blog.jverkamp.com/2015/12/31/2015-reading-list-retrospective/the-alloy-of-law.jpg" /></a> <a href="https://www.goodreads.com/book/show/15819028-the-golem-and-the-jinni"><img src="//blog.jverkamp.com/2015/12/31/2015-reading-list-retrospective/the-golem-and-the-jinni.jpg" /></a> <a href="https://www.goodreads.com/book/show/7163862-zoo-city"><img src="//blog.jverkamp.com/2015/12/31/2015-reading-list-retrospective/zoo-city.jpg" /></a> <a href="https://www.goodreads.com/book/show/47613.Mister_Monday"><img src="//blog.jverkamp.com/2015/12/31/2015-reading-list-retrospective/mister-monday.jpg" /></a></p>
<p>Overall, I greatly enjoyed reading as much as I did. According to Goodreads, I only read 10 in 2014. Perhaps though, I should aim for something in between those two... Look tomorrow for my 2016 reading list.</p>
<p>Here's the full list of reviews:</p>
<ul class="list-unstyled"><li class="post-listing"><a href="//blog.jverkamp.com/2015/01/01/2015-reading-list">2015 Reading List</a></li><li class="post-listing"><a href="//blog.jverkamp.com/2015/01/18/the-heroes-of-olympus">The Heroes of Olympus</a></li><li class="post-listing"><a href="//blog.jverkamp.com/2015/01/20/wool">Wool</a></li><li class="post-listing"><a href="//blog.jverkamp.com/2015/01/25/his-majestys-dragon">His Majesty's Dragon</a></li><li class="post-listing"><a href="//blog.jverkamp.com/2015/02/20/the-iron-druid-chronicles">The Iron Druid Chronicles</a></li><li class="post-listing"><a href="//blog.jverkamp.com/2015/03/13/alpha-and-omega">Alpha and Omega</a></li><li class="post-listing"><a href="//blog.jverkamp.com/2015/03/27/white-trash-zombie">White Trash Zombie</a></li><li class="post-listing"><a href="//blog.jverkamp.com/2015/03/31/precinct-13">Precinct 13</a></li><li class="post-listing"><a href="//blog.jverkamp.com/2015/04/06/ender-in-exile">Ender in Exile</a></li><li class="post-listing"><a href="//blog.jverkamp.com/2015/04/16/the-first-formic-war">The First Formic War</a></li><li class="post-listing"><a href="//blog.jverkamp.com/2015/04/25/the-ender-quintet">The Ender Quintet</a></li><li class="post-listing"><a href="//blog.jverkamp.com/2015/04/28/year-zero">Year Zero</a></li><li class="post-listing"><a href="//blog.jverkamp.com/2015/05/10/the-unnaturalists">The Unnaturalists</a></li><li class="post-listing"><a href="//blog.jverkamp.com/2015/05/26/american-gods">American Gods</a></li><li class="post-listing"><a href="//blog.jverkamp.com/2015/06/21/rama">Rama</a></li><li class="post-listing"><a href="//blog.jverkamp.com/2015/07/28/laundry-files">Laundry Files</a></li><li class="post-listing"><a href="//blog.jverkamp.com/2015/08/27/the-academy">The Academy</a></li><li class="post-listing"><a href="//blog.jverkamp.com/2015/09/01/the-iron-wyrm-affair">The Iron Wyrm Affair</a></li><li class="post-listing"><a href="//blog.jverkamp.com/2015/09/16/partials-sequence">Partials Sequence</a></li><li class="post-listing"><a href="//blog.jverkamp.com/2015/09/18/elantris">Elantris</a></li><li class="post-listing"><a href="//blog.jverkamp.com/2015/09/30/newsflesh-trilogy">Newsflesh Trilogy</a></li><li class="post-listing"><a href="//blog.jverkamp.com/2015/10/04/throne-of-the-crescent-moon">Throne of the Crescent Moon</a></li><li class="post-listing"><a href="//blog.jverkamp.com/2015/10/23/the-kane-chronicles">The Kane Chronicles</a></li><li class="post-listing"><a href="//blog.jverkamp.com/2015/11/10/the-girl-with-the-dragon-tattoo">The Girl with the Dragon Tattoo (The Millennium Trilogy)</a></li><li class="post-listing"><a href="//blog.jverkamp.com/2015/11/29/spin-saga">Spin Saga</a></li><li class="post-listing"><a href="//blog.jverkamp.com/2015/12/05/powder-mage-trilogy">Powder Mage Trilogy</a></li><li class="post-listing"><a href="//blog.jverkamp.com/2015/12/09/the-golem-and-the-jinni">The Golem and the Jinni</a></li><li class="post-listing"><a href="//blog.jverkamp.com/2015/12/11/zoo-city">Zoo City</a></li><li class="post-listing"><a href="//blog.jverkamp.com/2015/12/29/necroscope">Necroscope</a></li></ul>]]></content></entry><entry><title>Necroscope</title><link href="//blog.jverkamp.com/2015/12/29/necroscope" /><id>urn:uuid:a14aaeee-cf12-d338-7ff8-e49dabe164c3</id><updated>2015-12-29T00:00:00Z</updated><summary type="html"><![CDATA[<p><a href="https://www.goodreads.com/book/show/66655.Necroscope"><img src="//blog.jverkamp.com/2015/12/29/necroscope/1-necroscope.jpg" /></a> <a href="https://www.goodreads.com/book/show/60836.Necroscope_II"><img src="//blog.jverkamp.com/2015/12/29/necroscope/2-vamphyri.jpg" /></a> <a href="https://www.goodreads.com/book/show/636742.Necroscope_III"><img src="//blog.jverkamp.com/2015/12/29/necroscope/3-the-source.jpg" /></a> <a href="https://www.goodreads.com/book/show/1063378.Necroscope_IV"><img src="//blog.jverkamp.com/2015/12/29/necroscope/4-deadspeak.jpg" /></a> <a href="https://www.goodreads.com/book/show/66658.Necroscope_V"><img src="//blog.jverkamp.com/2015/12/29/necroscope/5-deadspawn.jpg" /></a></p>
<p>So... The <a href="https://www.goodreads.com/series/40853-necroscope">Necroscope</a> series by <a href="https://www.goodreads.com/author/show/20602.Brian_Lumley">Brian Lumley</a>.</p>
<p>I don't know if I've ever read anything in quite this genre before. It's basically urban fantasy, except set during the Cold War (which makes some sense, given this book was released in 1986) and with an extra helping of espionage (ESPionage) thrown in. It's an interesting change and the two styles complement one another.</p>
<p>The world building is neat, especially around the vampires. I like how this universe handles them. The prose itself is a bit strange at times (Lumley really likes exclamation points), but certainly readable. The contents veered well into horror at times, which isn't always my cup of tea--especially towards the end. Overall, I liked the first three a lot and the last two were worth finishing for completion's sake. I'll definitely be taking a break before (if) I start the next Necroscope series though.</p>
]]></summary><content type="html"><![CDATA[<p><a href="https://www.goodreads.com/book/show/66655.Necroscope"><img src="//blog.jverkamp.com/2015/12/29/necroscope/1-necroscope.jpg" /></a> <a href="https://www.goodreads.com/book/show/60836.Necroscope_II"><img src="//blog.jverkamp.com/2015/12/29/necroscope/2-vamphyri.jpg" /></a> <a href="https://www.goodreads.com/book/show/636742.Necroscope_III"><img src="//blog.jverkamp.com/2015/12/29/necroscope/3-the-source.jpg" /></a> <a href="https://www.goodreads.com/book/show/1063378.Necroscope_IV"><img src="//blog.jverkamp.com/2015/12/29/necroscope/4-deadspeak.jpg" /></a> <a href="https://www.goodreads.com/book/show/66658.Necroscope_V"><img src="//blog.jverkamp.com/2015/12/29/necroscope/5-deadspawn.jpg" /></a></p>
<p>So... The <a href="https://www.goodreads.com/series/40853-necroscope">Necroscope</a> series by <a href="https://www.goodreads.com/author/show/20602.Brian_Lumley">Brian Lumley</a>.</p>
<p>I don't know if I've ever read anything in quite this genre before. It's basically urban fantasy, except set during the Cold War (which makes some sense, given this book was released in 1986) and with an extra helping of espionage (ESPionage) thrown in. It's an interesting change and the two styles complement one another.</p>
<p>The world building is neat, especially around the vampires. I like how this universe handles them. The prose itself is a bit strange at times (Lumley really likes exclamation points), but certainly readable. The contents veered well into horror at times, which isn't always my cup of tea--especially towards the end. Overall, I liked the first three a lot and the last two were worth finishing for completion's sake. I'll definitely be taking a break before (if) I start the next Necroscope series though.</p>
<!--more-->
<p>And now, the individual reviews. As is often the case, the individual reviews for later books will almost certainly spoil earlier ones (and at points, minor spoilers for the books themselves). Read at your own peril.</p>
<hr />
<p><a href="https://www.goodreads.com/book/show/66655.Necroscope"><img src="//blog.jverkamp.com/2015/12/29/necroscope/1-necroscope.jpg" /></a></p>
<p>I don't know if I've read many books where the first two chapters go quite so strongly back and forth between this is cool and that's gross. It evened out a bit over the course of the book, but there was still a good amount of each.</p>
<p>The basic world building takes our own world and adds a bunch of ESPers on top; with ESPers being a general term for all sorts of supernatural power. We see people that can read minds, ones that can see far away events, and those that can speak with the dead (in two different flavors). It's an interesting sort of world and somehow manages not actually to feel too kitchen-sinky, which is a general problem in urban fantasy. Also, there are vampires. I have a feeling we'll be learning a bit more about them later, but so far I'm cautiously intrigued by this particular interpretation. They're weird and alien, which is neat.</p>
<p>One oddity with the book comes with the main character's abilities--that of a Necroscope. The basic idea is that he can speak with the dead and learn from / gain their abilities. It's a cool power, although in the last ten percent of the story it gets insanely powerful. I'm not sure how there can be a sequel, let alone a dozen of them. I'm curious to find out though.</p>
<p>Structurally, there's a framing story taking place in the present, telling the story that actually takes place throughout the past many years. In addition, we follow a few different viewpoints (following at least two main characters). It's a bit confusing at first, but started to gel for me about a quarter of the way through the story. There is at least one interesting twist that the frame allows, so I appreciate that.</p>
<p>Occasionally, the phrasing and especially the punctuation that interrupted my reading. I don't know if I've read a novel with quite so many ellipses and exclamation points. It's not a deal breaker, but it's weird.</p>
<p>Overall, worth the read and I'll check out the sequels. At the very least, I want to know how in the world their going to deal with such radical events for both main characters during the ending...</p>
<hr />
<p><a href="https://www.goodreads.com/book/show/60836.Necroscope_II"><img src="//blog.jverkamp.com/2015/12/29/necroscope/2-vamphyri.jpg" /></a></p>
<p>So that's how the series will continue.</p>
<p>Basically, we get a bit more of Harry who is now sharing bodies with his infant son (it's about that weird) and communicating with the now dead main characters from the first book.</p>
<p>The world building continues to be one of the stronger parts of these books. This time around, we have a fair chunk of the book from the view point of two of the old vampires (Thibor and Faethor Ferenczy), including a look at how they were turned and what they did over their centuries of life. It's an interesting take of vampires, and I continue to want to want to know more about that.</p>
<p>On the other hand, Harry's plotline and the moebius continuum remain weird. I think Lumley wrote himself into a bit of a whole introducing all of that at the end of the first book. Teleportation and time travel, essentially for free? Too powerful. Sanderson's Second Law: Limitations > Powers. It doesn't ruin the book by any means, but I think they could be stronger without.</p>
<p>The other present timeline follows Yulian Bodescu, another of Thibor's offspring (I thought vampires could only have one true offspring in this universe? I guess Yulian is something new). It's certainly an interesting story, if rather dark and probably could have carried the novel by itself. It didn't mesh particularly well with the flashbacks to the Ferenczys history though. They just didn't overly relate.</p>
<p>On the whole, an interesting read. Enough to keep me going on the series.</p>
<hr />
<p><a href="https://www.goodreads.com/book/show/636742.Necroscope_III"><img src="//blog.jverkamp.com/2015/12/29/necroscope/3-the-source.jpg" /></a></p>
<p>The Source follows a nuclear accident that manages to blow a hole in between our reality and the homeworld (more accurately home universe, since Harry cannot Moebius his way there) of the Vampires.</p>
<p>It's interesting watching this series progress from espionage mixed with urban fantasy and horror in the first book to a more historical urban fantasy (if that makes sense) to this one which veers a bit more into almost science fiction. We have a parallel universe, a tidally locked planet, and some really weird vampire biology. The world building around vampires continues to be the strongest part of this series (which is amusing, given that I find the Moebius Continuum and the various ESP powers to be among the weakest).</p>
<p>I'm still not particularly a fan of Harry Keogh, but for most of the book he has a relatively minor role and I like a lot of the new characters in this book. Overall, I liked to see the extra worldbuilding, but the story was a bit weaker. Given the conclusion, I can guess where the next book is going to go (Harry Sr vs Harry Jr). We'll give it a chance.</p>
<hr />
<p><a href="https://www.goodreads.com/book/show/1063378.Necroscope_IV"><img src="//blog.jverkamp.com/2015/12/29/necroscope/4-deadspeak.jpg" /></a></p>
<p>Oh hey, turns out there is another Ferenczy. Or rather, that's what a lot of this book felt like. Don't get me wrong, it's interesting to fill out a few more of the possibilities of what might happen if a vampire spawns a mostly human child who then desperately tries to learn to be a Vampire. But at the same time, it's starting to feel like the same story again, just with different players.</p>
<p>Another twist this time, which I at first appreciated was that Harry has lost his powers (stolen from him by Harry Jr). So for a large chunk of the story, he cannot speak to the dead except in dreams--which he doesn't remember upon waking--and cannot access the Moebius Continuum at all. Given how often I've complained about how overpowerful the latter made him, I thought it would be good for him to lose the power, but of course I guessed he would at some point get it back. And just in time for the final battle too, making it feel like an echo of the final battle from Necroscope I. So it goes.</p>
<p>Also this one really played up the more sexual aspects of the story. They were already there in the previous books, but relatively minor and sort of out of the way. Not so much in Deadspeak. Several incidents certainly play into the horror aspect of things and for that I applaud them, but it's starting to get a bit ridiculous.</p>
<p>Overall, it's still an interesting enough entry to the series and worth reading for completion's sake. Likewise I'll read the fifth and final Necroscope for the same reason. Plus I am vaguely curious how Harry ended up with a bit of vampire in his soul after all...</p>
<hr />
<p><a href="https://www.goodreads.com/book/show/66658.Necroscope_V"><img src="//blog.jverkamp.com/2015/12/29/necroscope/5-deadspawn.jpg" /></a></p>
<p>I think I'm done with the Necroscope series, at least for the time being. And hey, technically this <em>is</em> the end of the first Necroscope series.</p>
<p>On the negative side:</p>
<p>This feels like 2 or 3 novels shoved together. There's the parts on Earth where Harry tracks down a serial killer. Then there are the Wamphyri in exile in the Icelands and what they find there. Then finally, there's Harry in the Vampire world and the final showdown. It all more or less comes together at the end, but switching back and forth was a bit rough.</p>
<p>The horror, especially around the serial killer plot line, just got too horrific for me. It certainly works as a shock factor I guess.</p>
<p>The relationship (as it was) between Penny and Harry was weird, abrupt, and ugly. Especially in how it ended. And I don't feel like it actually needed to be there for the story to progress as is it did.</p>
<p>Speaking of which, Harry went dark. Given how too-good he was before, I thought a turn as anti-hero would be nice. It wasn't. It felt completely out of character for Harry. More in line for a vampire, but it's not what I was wanting to read in that character.</p>
<p>The sex scene with Lady Karen was ... weird. It certainly fits the horror scenes of the world, but I feel like I'm going to read a palette cleaner after this.</p>
<p>On the positive side:</p>
<p>I still really do like the world building around vampires in this world. They're actually horrific and alien, but with related aspects from their former human lives. All together, that seems something less common in modern vampire literature, so it's nice to see here. This was even better and weirder this time around, especially with some of the ancient ones come back.</p>
<hr />
<p>I think it's time for something lighter.</p>
<p>Well, that finishes my original <a href="//blog.jverkamp.com/2015/01/01/2015-reading-list">2015 Reading List</a> (with the exception of Mere Christianity; that one is still in progress).</p>
<p>Unfortunately, I'm still 2 books shy of my 100 book goal, so I think I'll start <a href="https://www.goodreads.com/author/show/8347.Garth_Nix">Garth Nix's</a> <a href="https://www.goodreads.com/series/42967-the-keys-to-the-kingdom">Keys to the Kingdom</a> series. From what I've been told, they're a bit lighter (everything is relative) and quick reads. I should be able to knock out two of them in the two days and change before the end of the year. <img alt="smile" class="emoji" src="/emoji/smile.svg" /></p>]]></content></entry><entry><title>Advent of Code: Day 25</title><link href="//blog.jverkamp.com/2015/12/25/advent-of-code-day-25" /><id>urn:uuid:76fab82b-01da-119f-da63-b163c5d488e0</id><updated>2015-12-25T00:00:00Z</updated><summary type="html"><![CDATA[<p><a href="http://adventofcode.com/day/25">Source</a></p>
<p><strong>Part 1:</strong> Take the relation:</p>
<div>$$F(n) = \left\{\begin{matrix}
20151225 & \textrm{if}\ n = 1 \\
252533F(n-1) \mod 33554393 & \textrm{otherwise}
\end{matrix}\right.$$</div>
<p>Arrange the values according to <a href="https://en.wikipedia.org/wiki/Cantor's_diagonal argument">Cantor's diagonal argument</a>. Find the value at a specific cell.</p>
]]></summary><content type="html"><![CDATA[<p><a href="http://adventofcode.com/day/25">Source</a></p>
<p><strong>Part 1:</strong> Take the relation:</p>
<div>$$F(n) = \left\{\begin{matrix}
20151225 & \textrm{if}\ n = 1 \\
252533F(n-1) \mod 33554393 & \textrm{otherwise}
\end{matrix}\right.$$</div>
<p>Arrange the values according to <a href="https://en.wikipedia.org/wiki/Cantor's_diagonal argument">Cantor's diagonal argument</a>. Find the value at a specific cell.</p>
<!--more-->
<pre class="python"><code>target_row = int(sys.argv[1])
target_col = int(sys.argv[2])

row = 1
col = 1
val = 20151125

while True:
    if target_row == row and target_col == col:
        print(val)
        sys.exit(0)
    else:
        val = (val * 252533) % 33554393

    if row == 1:
        row = col + 1
        col = 1
    else:
        row -= 1
        col += 1</code></pre>
<p>Merry Christmas!</p>]]></content></entry><entry><title>Advent of Code: Day 24</title><link href="//blog.jverkamp.com/2015/12/24/advent-of-code-day-24" /><id>urn:uuid:2035cd03-489e-dfec-f613-117529fa491f</id><updated>2015-12-24T00:00:00Z</updated><summary type="html"><![CDATA[<p><a href="http://adventofcode.com/day/24">Source</a></p>
<p><strong>Part 1:</strong> Split a list of integers into three groups of equal sum. Find the grouping such that the smallest group has the least items, breaking ties by the smallest product for that group.</p>
]]></summary><content type="html"><![CDATA[<p><a href="http://adventofcode.com/day/24">Source</a></p>
<p><strong>Part 1:</strong> Split a list of integers into three groups of equal sum. Find the grouping such that the smallest group has the least items, breaking ties by the smallest product for that group.</p>
<!--more-->
<p>My initial solution to this was to solve the <a href="https://en.wikipedia.org/wiki/subset_sum">subset sum</a> problem (or at least a slightly modified version thereof):</p>
<pre class="python"><code>def subsets_summing_to(target, items, cache = {}):
    if target == 0:
        yield set()
    else:
        for i, item in enumerate(items):
            if item &lt;= target:
                for recur in subsets_summing_to(target - item, items - {item}):
                    yield {item} | recur</code></pre>
<p>It's elegant code, and you can use that to generate the three groups fairly easily:</p>
<pre class="python"><code>packages = {int(line.strip()) for line in sys.stdin}
weight_per_package = sum(packages) // 3

for group1 in subsets_summing_to(weight_per_package, package):
    for group2 in subsets_summing_to(weight_per_package, package - group1):
        group3 = packages - group1 - group2
        ...</code></pre>
<p>And then while I let that run, I made a realization. If I generate the first group to be the smallest (by generating all groups of size 1, size 2, size 3, etc), then it doesn't actually matter what the other groups are. Furthermore, if I structure my iteration carefully so that I always return the smallest items first, I will get a minimal product<span class="footnote"><sup><a href="#footnote-1">[1]</a></sup></span>. Combining these two jumps, I get:</p>
<pre class="python"><code>def subset_sum_of_n(target, items, count):
    if target == 0 and count == 0:
        yield set()
    elif count == 0:
        return
    else:
        for i, item in enumerate(sorted(items)):
            if item &lt;= target:
                for recur in subset_sum_of_n(target - item, items - {item}, count - 1):
                    yield {item} | recur

def calculate_quantum_entanglement(group):
    product = 1
    for item in group:
        product *= item
    return product

def split_into(packages, n_groups):
    weight_per_section = sum(packages) / int(sys.argv[1])

    for n in range(1, len(packages)):
        for group in subset_sum_of_n(weight_per_section, packages, n):
            return (len(group), calculate_quantum_entanglement(group), group)

if __name__ == '__main__':
    packages = {int(line.strip()) for line in sys.stdin}
    n_groups = int(sys.argv[1])

    print(split_into(packages, n_groups))</code></pre>
<p>I'm greatly amused that it doesn't matter at all what any of the other groups are.</p>
<p><strong>Part 2:</strong> Split into four groups.</p>
<p>I already solved this with the <code>n_groups</code> parameter above.</p>
<p>Amusingly, because this solution (at least with my input) only has 4 items in the minimal group, it runs about 60 times faster than the first part. It still doesn't matter at all what the other groups are.</p>]]></content></entry><entry><title>Advent of Code: Day 23</title><link href="//blog.jverkamp.com/2015/12/23/advent-of-code-day-23" /><id>urn:uuid:2b737957-97d1-2db7-c18a-ef2b4bee221f</id><updated>2015-12-23T00:00:00Z</updated><summary type="html"><![CDATA[<p><a href="http://adventofcode.com/day/23">Source</a></p>
<p><strong>Part 1:</strong> Create a simple virtual machine with two registers (<code>a</code> and <code>b</code>, non-negative integers) and six instructions:</p>
<ul>
    <li><code>hlf (a|b)</code> - divide the given register by half, round down</li>
    <li><code>tpl (a|b)</code> - triple the given register</li>
    <li><code>inc (a|b)</code> - add 1 to the given register</li>
    <li><code>jmp [+-]\d+</code> - jump forward/backwards by the given number of instructions</li>
    <li><code>jie (a|b), [+-]\d+</code> - if the given register is even, jump</li>
    <li><code>jio (a|b), [+-]\d+</code> - if the given register equals one, jump</li>
</ul>
]]></summary><content type="html"><![CDATA[<p><a href="http://adventofcode.com/day/23">Source</a></p>
<p><strong>Part 1:</strong> Create a simple virtual machine with two registers (<code>a</code> and <code>b</code>, non-negative integers) and six instructions:</p>
<ul>
    <li><code>hlf (a|b)</code> - divide the given register by half, round down</li>
    <li><code>tpl (a|b)</code> - triple the given register</li>
    <li><code>inc (a|b)</code> - add 1 to the given register</li>
    <li><code>jmp [+-]\d+</code> - jump forward/backwards by the given number of instructions</li>
    <li><code>jie (a|b), [+-]\d+</code> - if the given register is even, jump</li>
    <li><code>jio (a|b), [+-]\d+</code> - if the given register equals one, jump</li>
</ul>
<!--more-->
<p>I do love writing a good virtual machine. Check out my <a href="//blog.jverkamp.com/2013/08/21/a-tiny-virtual-machine-in-racket">'Tiny' virtual machine in Racket</a>.</p>
<pre class="python"><code>def read_program():
    return [
        tuple(re.split('[, ]+', line.strip()))
        for line in sys.stdin
    ]

def run(program, **initial_state):
    pc = 0
    registers = {'a': 0, 'b': 0}
    registers.update(initial_state)

    while True:
        op = program[pc][0]
        args = program[pc][1:]

        if op == 'hlf':
            registers[args[0]] //= 2
            pc += 1
        elif op == 'tpl':
            registers[args[0]] *= 3
            pc += 1
        elif op == 'inc':
            registers[args[0]] += 1
            pc += 1
        elif op == 'jmp':
            pc += int(args[0])
        elif op == 'jie':
            if registers[args[0]] % 2 == 0:
                pc += int(args[1])
            else:
                pc += 1
        elif op == 'jio':
            if registers[args[0]] == 1:
                pc += int(args[1])
            else:
                pc += 1

        if not (0 &lt;= pc &lt; len(program)):
            break

    return registers

if __name__ == '__main__':
    program = read_program()
    output = run(program)
    print(output['b'])</code></pre>
<p>It's not the most abstracted thing ever, but it really doesn't matter. It works great.</p>
<p><strong>Part 2:</strong> Re-run with the initial state <code>a=1, b=0</code>.</p>
<p>I'll reuse the same trick I've used a few times before to load part 1:</p>
<pre class="python"><code>part1 = imp.load_source('part1', 'part-1.py')

if __name__ == '__main__':
    program = part1.read_program()
    output = part1.run(program, a = 1)
    print(output['b'])</code></pre>]]></content></entry><entry><title>Advent of Code: Day 22</title><link href="//blog.jverkamp.com/2015/12/22/advent-of-code-day-22" /><id>urn:uuid:9cebad4b-f376-fc86-db80-6136e90ab202</id><updated>2015-12-22T00:00:00Z</updated><summary type="html"><![CDATA[<p><a href="http://adventofcode.com/day/22">Source</a></p>
<p><strong>Part 1:</strong> Simulate an RPG mage battle; finding the winning solution using the least mana. See the <a href="http://adventofcode.com/day/22">original writeup</a> for more details.</p>
]]></summary><content type="html"><![CDATA[<p><a href="http://adventofcode.com/day/22">Source</a></p>
<p><strong>Part 1:</strong> Simulate an RPG mage battle; finding the winning solution using the least mana. See the <a href="http://adventofcode.com/day/22">original writeup</a> for more details.</p>
<!--more-->
<p>First, let's create some simple abstractions for the players:</p>
<pre class="python"><code>class Entity(dict):
    '''Represent a damagable entity such as the player or a boss'''

    def __init__(self, **kwargs):
        for key, val in kwargs.items():
            self[key] = val

    def __getitem__(self, key):
        try:
            return dict.__getitem__(self, key)
        except:
            return 0

    def damage(self, points):
        '''Apply damage to this entity; minimum damage is always 1'''

        self['Hit Points'] -= max(1, points - self['Armor'])

    def tick_active_spells(self, target):
        '''Apply all active spells to the target, remove any that have expired.'''

        if self['Active Spells']:
            for spell in list(self['Active Spells']):
                self['History'].append(str(spell))
                spell.tick(self, target)
                spell.Duration -= 1
                if spell.Duration &lt;= 0:
                    self['History'].append('{} fades'.format(spell.__class__.__name__))
                    spell.fade(self, target)
                    self['Active Spells'].remove(spell)</code></pre>
<p>Basically, we have an extended <code>dict</code> that will default values to 0, includes a method for applying <code>damage</code> while taking armor into account, and applying an active spells to a given player. That will make more sense once you see the way spells are defined:</p>
<pre class="python"><code>class Spell(dict):
    '''
    Create a spell. Spells have &lt;code&gt;Cost&lt;/code&gt; mana and last &lt;code&gt;Duration&lt;/code&gt; turns.

    cast() is called when a spell is first cast
    tick() is called each turn (for Duration &gt; 0)
    fade() is called when a spell runs out of duration
    '''

    Cost = float("inf")
    Duration = 0

    def __init__(self):
        self['Duration'] = self.__class__.Duration

    def cast(self, caster, target):
        pass

    def tick(self, caster, target):
        pass

    def fade(self, caster, target):
        pass

    def __repr__(self):
        return '{}({})'.format(self.__class__.__name__, self.Duration)

    def __eq__(self, other):
        return self.__class__.__name__ == other.__class__.__name__

    def __hash__(self):
        return hash(self.__class__.__name__)

class MagicMissle(Spell):
    Cost = 53

    def cast(self, caster, target):
        target.damage(4)

class Drain(Spell):
    Cost = 73

    def cast(self, caster, target):
        target.damage(2)
        caster['Hit Points'] += 2

class Shield(Spell):
    Cost = 113
    Duration = 6

    def cast(self, caster, target):
        caster['Armor'] += 7

    def fade(self, caster, target):
        caster['Armor'] -= 7

class Poison(Spell):
    Cost = 173
    Duration = 6

    def tick(self, caster, target):
        target.damage(3)

class Recharge(Spell):
    Cost = 229
    Duration = 5

    def tick(self, caster, target):
        caster['Mana Points'] += 101

spells = [MagicMissle, Drain, Shield, Poison, Recharge]</code></pre>
<p>As noted in the comment for the <code>Spell</code> class, there are two interesting fields (<code>Cost</code> is the mana cost and <code>Duration</code> is how long an ongoing spell will last) and three functions that can be overridden. <code>cast</code> will be called when the spell is first cast, <code>tick</code> will be called each turn it runs for ongoing spells, and <code>fade</code> will be called when an ongoing spell runs out of time. That will let us encode the five spells in the <a href="http://adventofcode.com/day/22">problem statement</a>.</p>
<p>Finally, we can load the player and boss:</p>
<pre class="python"><code>boss = lib.Entity()
for line in sys.stdin:
    key, val = line.strip().split(': ')
    boss[key] = int(val)

player = lib.Entity(**{
    'Hit Points': 50,
    'Mana Points': 500,
    'Active Spells': [],
    'History': [],
})</code></pre>
<p>Now we have everything to solve the problem. My first take at a solution using a <a href="https://en.wikipedia.org/wiki/priority_queue">priority queue</a> based on the mana spent. That means that as soon as we find a solution where <code>boss['Hit Points'] <= 0</code>, we have the minimal solution:</p>
<pre class="python"><code>queue_breaker = 0

states = queue.PriorityQueue()
states.put((0, queue_breaker, player, boss))

best_player = {'Mana Spent': float('inf')}

# This will be used to break ties in the queue since Entities are not orderable
queue_breaker += 1

while not states.empty():
    score, _, player, boss = states.get()

    # If we win, because of the priority queue, this is the best solution
    if boss['Hit Points'] &lt;= 0:
        return player

    # Player died, no point in continuing on this track
    if player['Hit Points'] &lt;= 0:
        continue

    # --- Player's turn ---
    player = copy.deepcopy(player)
    boss = copy.deepcopy(boss)
    player['History'].append('&gt;&gt; Player Turn &lt;&lt;')
    player.tick_active_spells(boss)

    # Branch (see the copy below) to applying each possible spell for the player's turn
    for potential_spell in lib.spells:
        if player['Mana Points'] &lt; potential_spell.Cost:
            continue

        spell = potential_spell()
        if spell in player['Active Spells']:
            continue

        current_player = copy.deepcopy(player)
        current_boss = copy.deepcopy(boss)

        # Cast the player's new spell
        current_player['Mana Points'] -= potential_spell.Cost
        current_player['Mana Spent'] += potential_spell.Cost
        spell.cast(current_player, current_boss)

        if spell['Duration']:
            current_player['Active Spells'].append(spell)

        current_player['History'].append(str(spell))

        # --- Boss's turn ---
        current_player['History'].append('&gt;&gt; Boss Turn &lt;&lt;')
        current_player.tick_active_spells(current_boss)
        current_player.damage(current_boss['Damage'])

        # Store the altered copies back in the queue
        states.put((current_player['Mana Spent'], queue_breaker, current_player, current_boss))
        queue_breaker += 1</code></pre>
<p>Most of the code is spent getting the order of events exactly correct. It's a bit weird, but it does work in the end (I think I rewrote exactly this code a dozen times and it finally worked...). The only problem with this solution: the search space is <em>huge</em>. I let it run for rather a while and it simulated literally millions of states still without finding a final solution. I need to cut that down.</p>
<p>My next trial was to tweak the scoring algorithm. By doing this, we lose the ability to return immediately once we have a solution, but we gain the ability to find <em>a</em> solution quickly and then throw out any solutions that would be worse than that one. We only have to make a few tweaks to the above code:</p>
<pre class="python"><code>best_player = {'Mana Spent': float('inf')}

while not states.empty():
    score, _, player, boss = states.get()

    # If we win, because of the priority queue, this is the best solution
    if boss['Hit Points'] &lt;= 0:
        if early_exit:
            return player
        elif player['Mana Spent'] &lt; best_player['Mana Spent']:
            print('New best mana spent:', player['Mana Spent'])
            best_player = player
            continue

    ...

    # Store the altered copies back in the queue
    score = scoring_function(current_player, current_boss)
    states.put((score, queue_breaker, current_player, current_boss))
    queue_breaker += 1

return best_player</code></pre>
<p>Interestingly, this converges very quickly (a few seconds) on my correct solution, then spends a (long) while making sure it's correct. In earlier (incorrect) simulations, it would find a few increasingly good solutions before finally ending up at a steady state.</p>
<p>This runs much more quickly, but guaranteeing that we have a correct solution is still difficult. Instead, let's try a quick <a href="https://en.wikipedia.org/wiki/Monte_Carlo simulation">Monte Carlo simulation</a>:</p>
<pre class="python"><code>def random_spells():
    while True:
        yield random.choice(lib.spells)

class GameOverException(Exception):
    def __init__(self, player_won, reason):
        self.player_won = player_won
        self.reason = reason

def check_game_over(player, boss):
    if boss['Hit Points'] &lt;= 0:
        raise GameOverException(True, 'boss died')

    if player['Hit Points'] &lt;= 0:
        raise GameOverException(False, 'player died')

def fight(player, boss, spell_iterator):
    while True:
        check_game_over(player, boss)

        # --- Player turn ---
        player.tick_active_spells(boss)
        check_game_over(player, boss)

        for i, potential_spell in enumerate(spell_iterator):
            if i &gt;= 10:
                raise GameOverException(False, 'failed to cast 10 spells')

            if potential_spell.Cost &gt; player['Mana Points']:
                continue

            spell = potential_spell()
            if spell in player['Active Spells']:
                continue

            player['History'].append('Player casts {}'.format(potential_spell.__name__))
            player['Mana Points'] -= potential_spell.Cost
            player['Mana Spent'] += potential_spell.Cost

            spell.cast(player, boss)
            check_game_over(player, boss)

            if spell.Duration:
                player['Active Spells'].append(spell)

            break

        # --- Boss turn ---
        player.tick_active_spells(boss)
        check_game_over(player, boss)

        player.damage(boss['Damage'])
        check_game_over(player, boss)

def monte_carlo(player, boss, timeout = TIME_TO_RUN):
    start = time.time()
    best_player = {'Mana Spent': float('inf')}
    simulations = 0
    wins = 0

    while True:
        if time.time() - start &gt; TIME_TO_RUN:
            break

        simulations += 1
        current_boss = copy.deepcopy(boss)
        current_player = copy.deepcopy(player)

        try:
            fight(current_player, current_boss, random_spells())
        except GameOverException as game_over:
            if game_over.player_won:
                wins += 1
                if current_player['Mana Spent'] &lt; best_player['Mana Spent']:
                    print('New best:', current_player['Mana Spent'])
                    best_player = current_player

    return simulations, wins, best_player</code></pre>
<p>Basically, just fire off random spells (trying up to 10 times in a given round to account for running low on mana and no duplicates) until one player wins (I'm using a <a href="https://en.wikipedia.org/wiki/try_catch">try catch</a> block to handle that so that I can check for winners more cleanly than in the first solution). If it's the player, see if we spent less mana than any solution we've found thus far. Rinse and repeat. Running it for a minute, it seems to find the best solution after roughly 2-3 minutes of running on my laptop. So not great, but at least an alternative.</p>
<p><strong>Part 2:</strong> On each of the player's turns (not on the boss's turns), the player loses 1 HP. Find the winning combination of spells that uses the least mana.</p>
<p>Based on the way that I structured the code, this is actually as easy as adding a new spell with unlimited <code>Duration</code>:</p>
<pre class="python"><code>class HardMode(Spell):
    Duration = float('inf')

    def tick(self, caster, target):
        self.toggle = not getattr(self, 'toggle', False)
        if self.toggle:
            caster.damage(1)</code></pre>
<p>There's a bit of weirdness there to make sure that it only runs half as often as most spells (since we don't have half hit points), but this works perfectly. We then start the player with this as an active spell:</p>
<pre class="python"><code>player = lib.Entity(**{
    'Hit Points': 50,
    'Mana Points': 500,
    'Active Spells': [lib.HardMode()],
    'History': [],
})</code></pre>
<p>And that's it. The rest of the simulation is identical. Since <code>HardMode</code> isn't in the <code>lib.spells</code> list, it won't get cast by either solution. Even if we wanted to we couldn't because of the limitation of only one of each ongoing spell at a time.</p>
<p>This actually makes the problem a bit harder computationally. There were already not <em>that</em> many combinations of spells that would win in the first case and there are even fewer this time around. I ran the Monte Carlo simulation several times for five minutes each without it randomly stumbling on a valid ordering that works for this case. I could probably have tweaked the generation algorithm to be a bit smarter, but it wasn't necessary. The priority queue solution with the boss HP weighting found the solution quickly enough.</p>
<p>Since the code for this one is a bit more complicated, feel free to check it out on GitHub to see the whole picture: <a href="https://github.com/jpverkamp/advent-of-code/tree/master/day-22">GitHub:jpverkamp/advent-of-code</a>. I've been (and will continue to) uploading my solutions there, but previously I've just directly included the entire code in order in the posts.</p>
<p>That all being said, I honestly think this was my least favorite problem of them thus far. It was interesting in that it actually mattered what algorithm you chose to solve it (I imagine that a recursive solution with memoization could be even faster), but the implementation details were just way too fiddly. As mentioned earlier, I wrote out more or less exactly the same algorithms a dozen times before I finally had one that actually returned the correct answer (for the most part, they were finding solutions that were too low). So it goes.</p>
<p>I look forward to the final three problems!</p>]]></content></entry><entry><title>Advent of Code: Day 21</title><link href="//blog.jverkamp.com/2015/12/21/advent-of-code-day-21" /><id>urn:uuid:2a910be6-afd8-d4dc-e437-c5c47fc1ed7a</id><updated>2015-12-21T00:00:00Z</updated><summary type="html"><![CDATA[<p><a href="http://adventofcode.com/day/21">Source</a></p>
<p><strong>Part 1:</strong> Given a shop full of weapons (buy exactly one), armor (buy zero or one), and rings (buy 0, 1, or 2), determine the set of items that will defeat a given enemy for the minimum cost (see the <a href="http://adventofcode.com/day/21">original writeup</a> for more details).</p>
]]></summary><content type="html"><![CDATA[<p><a href="http://adventofcode.com/day/21">Source</a></p>
<p><strong>Part 1:</strong> Given a shop full of weapons (buy exactly one), armor (buy zero or one), and rings (buy 0, 1, or 2), determine the set of items that will defeat a given enemy for the minimum cost (see the <a href="http://adventofcode.com/day/21">original writeup</a> for more details).</p>
<!--more-->
<p>First, a bit of code to parse the shop:</p>
<pre class="python"><code>shop = {}
category = None

with open('shop.txt', 'r') as fin:
    for line in fin:
        line = line.strip()
        if not line:
            continue

        if ':' in line:
            category = line.split(':')[0]
            shop[category] = []
            continue

        name, cost, damage, armor = line.rsplit(maxsplit = 3)

        shop[category].append({
            'Name': name,
            'Cost': int(cost),
            'Damage': int(damage),
            'Armor': int(armor),
        })

# Allow for no armor or rings
shop['Armor'].append({'Name': None, 'Cost': 0, 'Damage': 0, 'Armor': 0})
shop['Rings'].append({'Name': None, 'Cost': 0, 'Damage': 0, 'Armor': 0})</code></pre>
<p>Using that, we can write some code to generate all possible players:</p>
<pre class="python"><code>def all_players():
    for weapon in shop['Weapons']:
        for armor in shop['Armor']:
            for left_ring in shop['Rings']:
                for right_ring in shop['Rings']:
                    # Cannot have two of the same ring unless they're both None
                    if left_ring and right_ring and left_ring == right_ring:
                        continue

                    items = [weapon, armor, left_ring, right_ring]

                    player = {
                        'Hit Points': 100,
                        'Items': [item['Name'] for item in items if item['Name']],
                        'Damage': sum(item['Damage'] for item in items),
                        'Armor': sum(item['Armor'] for item in items),
                        'Cost': sum(item['Cost'] for item in items),
                    }

                    yield player</code></pre>
<p>Additionally, we can read our opponent's stats from <code>stdin</code>:</p>
<pre class="python"><code>enemy = {}
for line in sys.stdin:
    key, val = line.strip().split(':')
    enemy[key] = int(val)

def get_enemy():
    return copy.copy(enemy)</code></pre>
<p>It's important to return a new copy each time; otherwise you end up badly beating up the same guy over and over again.</p>
<p>Finally, fight:</p>
<pre class="python"><code>def player_wins(player, enemy):
    while True:
        enemy['Hit Points'] -= max(1, player['Damage'] - enemy['Armor'])
        if enemy['Hit Points'] &lt;= 0:
            return True

        player['Hit Points'] -= max(1, enemy['Damage'] - player['Armor'])
        if player['Hit Points'] &lt;= 0:
            return False</code></pre>
<p>With all of this in a separate file called <code>lib.py</code> (I should probably refactor some of the previous days this way), we can solve the actual problem in about a half dozen lines:</p>
<pre class="python"><code>import lib

best_player = {'Cost': float("inf")}
for player in lib.all_players():
    if lib.player_wins(player, lib.get_enemy()):
        if player['Cost'] &lt; best_player['Cost']:
            best_player = player

print(best_player['Cost'])</code></pre>
<p>A brute force solution feels a bit ugly. We could instead have iterated over the solutions from the cheapest up until we found one that worked, or even done a <a href="https://en.wikipedia.org/wiki/binary_search">binary search</a> by cost, but what's the point? There are only 1260 possible inventories. That's nothing to a computer.</p>
<p><strong>Part 2:</strong> Invert the problem. Find the most expensive set of items you can buy and still lose.</p>
<p>This is why I factored out all of the library code. I know that something like this would be part 2. :)</p>
<pre class="python"><code>import lib

best_player = {'Cost': float("-inf")}
for player in lib.all_players():
    if not lib.player_wins(player, lib.get_enemy()):
        if player['Cost'] &gt; best_player['Cost']:
            best_player = player

print(best_player['Cost'])</code></pre>
<p>In case you were curious, my winner for part 1 had a longsword, chainmail, and a Ring of Damage +2. Part 2 had a Dagger, Leather Armor, and Rings of Damage +3 and Defense +3. It's interesting that the cheaper option actually had a more expensive weapon and armor, but the pair of rings more than made up for it.</p>]]></content></entry><entry><title>Advent of Code: Day 20</title><link href="//blog.jverkamp.com/2015/12/20/advent-of-code-day-20" /><id>urn:uuid:afd29395-b082-d1af-1e24-dc1d0df19418</id><updated>2015-12-20T00:00:00Z</updated><summary type="html"><![CDATA[<p><a href="http://adventofcode.com/day/20">Source</a></p>
<p><strong>Part 1:</strong> <em>P(n)</em> is defined such that for each number <em>i</em>, add <em>10i</em> to any number divisible by <em>i</em>. Find the first value <em>n</em> such that <em>P(n)</em> is at least a given target number.</p>
]]></summary><content type="html"><![CDATA[<p><a href="http://adventofcode.com/day/20">Source</a></p>
<p><strong>Part 1:</strong> <em>P(n)</em> is defined such that for each number <em>i</em>, add <em>10i</em> to any number divisible by <em>i</em>. Find the first value <em>n</em> such that <em>P(n)</em> is at least a given target number.</p>
<!--more-->
<p>Let's throw some memory (and <a href="http://www.numpy.org/">numpy</a>) at it:</p>
<pre class="python"><code>target = int(sys.argv[1])

presents = numpy.zeros(target)

for i in range(1, target):
    presents[i::i] += 10 * i

for i in range(len(presents)):
    if presents[i] &gt;= target:
        print(i)
        sys.exit(0)</code></pre>
<p>It barely makes it in under a minute, but it does. You can speed it up even more if you guess on where the answer will be an initialize to only the first <code>numpy.zeros(target / 10)</code>. In only shaves off about 1/6 of the time on my run though, so I'm not sure it's worth it.</p>
<p><strong>Part 2:</strong> Do the same thing, only use <em>11i</em> instead of <em>10i</em> but only to the first 50 multiples.</p>
<p>Nothing much changes:</p>
<pre class="python"><code>target = int(sys.argv[1])

presents = numpy.zeros(target / 10)

for i in range(1, target):
    presents[i:i*50:i] += 11 * i

for i in range(len(presents)):
    if presents[i] &gt;= target:
        print(i)
        sys.exit(0)</code></pre>]]></content></entry></feed>